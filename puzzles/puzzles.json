[
  {
    "name": "Study_1_0",
    "sat": "def sat(s: str):\n    \"\"\"Find a string with 1000 'o's but no two adjacent 'o's.\"\"\"\n    return s.count('o') == 1000 and s.count('oo') == 0",
    "sols": [
      "def sol():\n    return ('h' + 'o') * 1000"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_2_0",
    "sat": "def sat(s: str):\n    \"\"\"Find a string with 1000 'o's, 100 pairs of adjacent 'o's and 801 copies of 'ho'.\"\"\"\n    return s.count('o') == 1000 and s.count('oo') == 100 and s.count('ho') == 801",
    "sols": [
      "def sol():\n    return 'ho' * (800 + 1) + 'o' * (100 * 2 - 1)"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_3_0",
    "sat": "def sat(li: List[int]):\n    \"\"\"Find a permutation of [0, 1, ..., 998] such that the ith element is *not* i, for all i=0, 1, ..., 998.\"\"\"\n    return sorted(li) == list(range(999)) and all(li[i] != i for i in range(len(li)))",
    "sols": [
      "def sol():\n    return [((i + 1) % 999) for i in range(999)]"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_4_0",
    "sat": "def sat(li: List[int]):\n    \"\"\"Find a list of length 10 where the fourth element occurs exactly twice.\"\"\"\n    return len(li) == 10 and li.count(li[3]) == 2",
    "sols": [
      "def sol():\n    return list(range(10 // 2)) * 2"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_5_0",
    "sat": "def sat(li: List[int]):\n    \"\"\"Find a list integers such that the integer i occurs i times, for i = 0, 1, 2, ..., 9.\"\"\"\n    return all([li.count(i) == i for i in range(10)])",
    "sols": [
      "def sol():\n    return [i for i in range(10) for j in range(i)]"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_6_0",
    "sat": "def sat(i: int):\n    \"\"\"Find an integer greater than 10^10 which is 4 mod 123.\"\"\"\n    return i % 123 == 4 and i > 10 ** 10",
    "sols": [
      "def sol():\n    return 4 + 10 ** 10 + 123 - 10 ** 10 % 123"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_7_0",
    "sat": "def sat(s: str):\n    \"\"\"Find a three-digit pattern  that occurs more than 8 times in the decimal representation of 8^2888.\"\"\"\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3",
    "sols": [
      "def sol():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_8_0",
    "sat": "def sat(ls: List[str]):\n    \"\"\"Find a list of more than 1235 strings such that the 1234th string is a proper substring of the 1235th.\"\"\"\n    return ls[1234] in ls[1235] and ls[1234] != ls[1235]",
    "sols": [
      "def sol():\n    return [''] * 1235 + ['a']"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_9_0",
    "sat": "def sat(li: List[int]):\n    \"\"\"\n    Find a way to rearrange the letters in the pangram \"The quick brown fox jumps over the lazy dog\" to get\n    the pangram \"The five boxing wizards jump quickly\". The answer should be represented as a list of index\n    mappings.\n    \"\"\"\n    return [\"The quick brown fox jumps over the lazy dog\"[i] for i in li] == list(\n        \"The five boxing wizards jump quickly\")",
    "sols": [
      "def sol():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_10_0",
    "sat": "def sat(s: str):\n    \"\"\"Find a palindrome of length greater than 11 in the decimal representation of 8^1818.\"\"\"\n    return s in str(8 ** 1818) and s == s[::-1] and len(s) > 11",
    "sols": [
      "def sol():\n    s = str(8 ** 1818)\n    return next(s[i: i + le]\n                for le in range(12, len(s) + 1)\n                for i in range(len(s) - le + 1)\n                if s[i: i + le] == s[i: i + le][::-1]\n                )"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_11_0",
    "sat": "def sat(ls: List[str]):\n    \"\"\"\n    Find a list of strings whose length (viewed as a string) is equal to the lexicographically largest element\n    and is equal to the lexicographically smallest element.\n    \"\"\"\n    return min(ls) == max(ls) == str(len(ls))",
    "sols": [
      "def sol():\n    return ['1']"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_12_0",
    "sat": "def sat(li: List[int]):\n    \"\"\"Find a list of 1,000 integers where every two adjacent integers sum to 9, and where the first\n    integer plus 4 is 9.\"\"\"\n    return all(i + j == 9 for i, j in zip([4] + li, li)) and len(li) == 1000",
    "sols": [
      "def sol():\n    return [9 - 4, 4] * (1000 // 2)"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_13_0",
    "sat": "def sat(x: float):\n    \"\"\"Find a real number which, when you subtract 3.1415, has a decimal representation starting with 123.456.\"\"\"\n    return str(x - 3.1415).startswith(\"123.456\")",
    "sols": [
      "def sol():\n    return 123.456 + 3.1415"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_14_0",
    "sat": "def sat(li: List[int]):\n    \"\"\"Find a list of integers such that the sum of the first i integers is i, for i=0, 1, 2, ..., 19.\"\"\"\n    return all([sum(li[:i]) == i for i in range(20)])",
    "sols": [
      "def sol():\n    return [1] * 20"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_15_0",
    "sat": "def sat(li: List[int]):\n    \"\"\"Find a list of integers such that the sum of the first i integers is 2^i -1, for i = 0, 1, 2, ..., 19.\"\"\"\n    return all(sum(li[:i]) == 2 ** i - 1 for i in range(20))",
    "sols": [
      "def sol():\n    return [(2 ** i) for i in range(20)]"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_16_0",
    "sat": "def sat(s: str):\n    \"\"\"Find a real number such that when you add the length of its decimal representation to it, you get 4.5.\n    Your answer should be the string form of the number in its decimal representation.\"\"\"\n    return float(s) + len(s) == 4.5",
    "sols": [
      "def sol():\n    return str(4.5 - len(str(4.5)))"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_17_0",
    "sat": "def sat(i: int):\n    \"\"\"Find a number whose decimal representation is *a longer string* when you add 1,000 to it than when you add 1,001.\"\"\"\n    return len(str(i + 1000)) > len(str(i + 1001))",
    "sols": [
      "def sol():\n    return -1001"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_18_0",
    "sat": "def sat(ls: List[str]):\n    \"\"\"\n    Find a list of strings that when you combine them in all pairwise combinations gives the six strings:\n    'berlin', 'berger', 'linber', 'linger', 'gerber', 'gerlin'\n    \"\"\"\n    return [s + t for s in ls for t in ls if s != t] == 'berlin berger linber linger gerber gerlin'.split()",
    "sols": [
      "def sol():\n    seen = set()\n    ans = []\n    for s in 'berlin berger linber linger gerber gerlin'.split():\n        t = s[:3]\n        if t not in seen:\n            ans.append(t)\n            seen.add(t)\n    return ans"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_19_0",
    "sat": "def sat(li: List[int]):\n    \"\"\"\n    Find a list of integers whose pairwise sums make the set {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}.\n    That is find L such that, { i + j | i, j in L } = {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}.\n    \"\"\"\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}",
    "sols": [
      "def sol():\n    return [0, 1, 2, 3, 17]"
    ],
    "module": "study",
    "notes": "9/15/2021 Updated to take a list rather than a set because it was the only puzzle in the repo with Set argument.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_20_0",
    "sat": "def sat(li: List[int]):\n    \"\"\"\n    Find a list of integers, starting with 0 and ending with 128, such that each integer either differs from\n    the previous one by one or is thrice the previous one.\n    \"\"\"\n    return all(j in {i - 1, i + 1, 3 * i} for i, j in zip([0] + li, li + [128]))",
    "sols": [
      "def sol():\n    return [1, 3, 4, 12, 13, 14, 42, 126, 127]"
    ],
    "module": "study",
    "notes": "A more interesting version of this puzzle with a length constraint is ShortIntegerPath in graphs.py",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_21_0",
    "sat": "def sat(li: List[int]):\n    \"\"\"\n    Find a list integers containing exactly three distinct values, such that no integer repeats\n    twice consecutively among the first eleven entries. (So the list needs to have length greater than ten.)\n    \"\"\"\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3",
    "sols": [
      "def sol():\n    return list(range(3)) * 10"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_22_0",
    "sat": "def sat(s: str):\n    \"\"\"\n    Find a string s containing exactly five distinct characters which also contains as a substring every other\n    character of s (e.g., if the string s were 'parrotfish' every other character would be 'profs').\n    \"\"\"\n    return s[::2] in s and len(set(s)) == 5",
    "sols": [
      "def sol():\n    return \"\"\"abacadaeaaaaaaaaaa\"\"\""
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_23_0",
    "sat": "def sat(ls: List[str]):\n    \"\"\"\n    Find a list of characters which are aligned at the same indices of the three strings 'dee', 'doo', and 'dah!'.\n    \"\"\"\n    return tuple(ls) in zip('dee', 'doo', 'dah!')",
    "sols": [
      "def sol():\n    return list(next(zip('dee', 'doo', 'dah!')))"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_24_0",
    "sat": "def sat(li: List[int]):\n    \"\"\"Find a list of integers with exactly three occurrences of seventeen and at least two occurrences of three.\"\"\"\n    return li.count(17) == 3 and li.count(3) >= 2",
    "sols": [
      "def sol():\n    return [17] * 3 + [3] * 2"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_25_0",
    "sat": "def sat(s: str):\n    \"\"\"Find a permutation of the string 'Permute me true' which is a palindrome.\"\"\"\n    return sorted(s) == sorted('Permute me true') and s == s[::-1]",
    "sols": [
      "def sol():\n    s = sorted('Permute me true'[1:])[::2]\n    return \"\".join(s + ['P'] + s[::-1])"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_26_0",
    "sat": "def sat(ls: List[str]):\n    \"\"\"Divide the decimal representation of 8^88 up into strings of length eight.\"\"\"\n    return \"\".join(ls) == str(8 ** 88) and all(len(s) == 8 for s in ls)",
    "sols": [
      "def sol():\n    return [str(8 ** 88)[i:i + 8] for i in range(0, len(str(8 ** 88)), 8)]"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_27_0",
    "sat": "def sat(li: List[int]):\n    \"\"\"\n    Consider a digraph where each node has exactly one outgoing edge. For each edge (u, v), call u the parent and\n    v the child. Then find such a digraph where the grandchildren of the first and second nodes differ but they\n    share the same great-grandchildren. Represented this digraph by the list of children indices.\n    \"\"\"\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]",
    "sols": [
      "def sol():\n    return [1, 2, 3, 3]"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_28_0",
    "sat": "def sat(li: List[int]):\n    \"\"\"Find a list of one hundred integers between 0 and 999 which all differ by at least ten from one another.\"\"\"\n    return all(i in range(1000) and abs(i - j) >= 10 for i in li for j in li if i != j) and len(set(li)) == 100",
    "sols": [
      "def sol():\n    return list(range(0, 1000, 10))"
    ],
    "module": "study",
    "notes": "9/15/2021: updated to a list since sets were removed from puzzle formats",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_29_0",
    "sat": "def sat(l: List[int]):\n    \"\"\"\n    Find a list of more than 995 distinct integers between 0 and 999, inclusive, such that each pair of integers\n    have squares that differ by at least 10.\n    \"\"\"\n    return all(i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j) and len(set(l)) > 995",
    "sols": [
      "def sol():\n    return [0, 4] + list(range(6, 1000))"
    ],
    "module": "study",
    "notes": "9/15/2021: updated to a list since sets were removed from puzzle formats",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Study_30_0",
    "sat": "def sat(li: List[int]):\n    \"\"\"\n    Define f(n) to be the residue of 123 times n mod 1000. Find a list of integers such that the first twenty one\n    are between 0 and 999, inclusive, and are strictly increasing in terms of f(n).\n    \"\"\"\n    return all([123 * li[i] % 1000 < 123 * li[i + 1] % 1000 and li[i] in range(1000) for i in range(20)])",
    "sols": [
      "def sol():\n    return sorted(range(1000), key=lambda n: 123 * n % 1000)[:21]",
      "def sol():\n    return list(range(1000))[::8][::-1]"
    ],
    "module": "study",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "TowersOfHanoi_0",
    "sat": "def sat(moves: List[List[int]]):\n    \"\"\"\n    Eight disks of sizes 1-8 are stacked on three towers, with each tower having disks in order of largest to\n    smallest. Move [i, j] corresponds to taking the smallest disk off tower i and putting it on tower j, and it\n    is legal as long as the towers remain in sorted order. Find a sequence of moves that moves all the disks\n    from the first to last towers.\n    \"\"\"\n    rods = ([8, 7, 6, 5, 4, 3, 2, 1], [], [])\n    for [i, j] in moves:\n        rods[j].append(rods[i].pop())\n        assert rods[j][-1] == min(rods[j]), \"larger disk on top of smaller disk\"\n    return rods[0] == rods[1] == []",
    "sols": [
      "def sol():\n    def helper(m, i, j):\n        if m == 0:\n            return []\n        k = 3 - i - j\n        return helper(m - 1, i, k) + [[i, j]] + helper(m - 1, k, j)\n\n    return helper(8, 0, 2)"
    ],
    "module": "classic_puzzles",
    "notes": "[Towers of Hanoi](https://en.wikipedia.org/w/index.php?title=Tower_of_Hanoi)\n\nIn this classic version one must move all 8 disks from the first to third peg.",
    "taint_date": "2021-4-26",
    "weight": 0.045454545454545456
  },
  {
    "name": "TowersOfHanoiArbitrary_0",
    "sat": "def sat(moves: List[List[int]], source=[[0, 7], [4, 5, 6], [1, 2, 3, 8]], target=[[0, 1, 2, 3, 8], [4, 5], [6, 7]]):\n    \"\"\"\n    A state is a partition of the integers 0-8 into three increasing lists. A move is pair of integers i, j in\n    {0, 1, 2} corresponding to moving the largest number from the end of list i to list j, while preserving the\n    order of list j. Find a sequence of moves that transform the given source to target states.\n    \"\"\"\n    state = [s[:] for s in source]\n\n    for [i, j] in moves:\n        state[j].append(state[i].pop())\n        assert state[j] == sorted(state[j])\n\n    return state == target",
    "sols": [
      "def sol(source=[[0, 7], [4, 5, 6], [1, 2, 3, 8]], target=[[0, 1, 2, 3, 8], [4, 5], [6, 7]]):\n    state = {d: i for i, tower in enumerate(source) for d in tower}\n    final = {d: i for i, tower in enumerate(target) for d in tower}\n    disks = set(state)\n    assert disks == set(final) and all(isinstance(i, int) for i in state) and len(source) == len(target) >= 3\n    ans = []\n\n    def move(d, i):  # move disk d to tower i\n        if state[d] == i:\n            return\n        for t in range(3):  # first tower besides i, state[d]\n            if t != i and t != state[d]:\n                break\n        for d2 in range(d + 1, max(disks) + 1):\n            if d2 in disks:\n                move(d2, t)\n        ans.append([state[d], i])\n        state[d] = i\n\n    for d in range(min(disks), max(disks) + 1):\n        if d in disks:\n            move(d, final[d])\n\n    return ans"
    ],
    "module": "classic_puzzles",
    "notes": "[Towers of Hanoi](https://en.wikipedia.org/w/index.php?title=Tower_of_Hanoi)\n\nIn this version one must transform a given source state to a target state.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "TowersOfHanoiArbitrary_1",
    "sat": "def sat(moves: List[List[int]], source=[[1, 3, 5], [2, 8, 14], [0, 4, 6, 7, 9, 10, 11, 12, 13]], target=[[5, 12], [0, 3, 4, 7, 10, 11], [1, 2, 6, 8, 9, 13, 14]]):\n    \"\"\"\n    A state is a partition of the integers 0-8 into three increasing lists. A move is pair of integers i, j in\n    {0, 1, 2} corresponding to moving the largest number from the end of list i to list j, while preserving the\n    order of list j. Find a sequence of moves that transform the given source to target states.\n    \"\"\"\n    state = [s[:] for s in source]\n\n    for [i, j] in moves:\n        state[j].append(state[i].pop())\n        assert state[j] == sorted(state[j])\n\n    return state == target",
    "sols": [
      "def sol(source=[[1, 3, 5], [2, 8, 14], [0, 4, 6, 7, 9, 10, 11, 12, 13]], target=[[5, 12], [0, 3, 4, 7, 10, 11], [1, 2, 6, 8, 9, 13, 14]]):\n    state = {d: i for i, tower in enumerate(source) for d in tower}\n    final = {d: i for i, tower in enumerate(target) for d in tower}\n    disks = set(state)\n    assert disks == set(final) and all(isinstance(i, int) for i in state) and len(source) == len(target) >= 3\n    ans = []\n\n    def move(d, i):  # move disk d to tower i\n        if state[d] == i:\n            return\n        for t in range(3):  # first tower besides i, state[d]\n            if t != i and t != state[d]:\n                break\n        for d2 in range(d + 1, max(disks) + 1):\n            if d2 in disks:\n                move(d2, t)\n        ans.append([state[d], i])\n        state[d] = i\n\n    for d in range(min(disks), max(disks) + 1):\n        if d in disks:\n            move(d, final[d])\n\n    return ans"
    ],
    "module": "classic_puzzles",
    "notes": "[Towers of Hanoi](https://en.wikipedia.org/w/index.php?title=Tower_of_Hanoi)\n\nIn this version one must transform a given source state to a target state.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "TowersOfHanoiArbitrary_2",
    "sat": "def sat(moves: List[List[int]], source=[[0, 1, 6, 7, 8, 9, 14, 16], [5, 15], [2, 3, 4, 10, 11, 12, 13]], target=[[1, 2, 4, 5, 13], [3, 6, 11, 12, 14], [0, 7, 8, 9, 10, 15, 16]]):\n    \"\"\"\n    A state is a partition of the integers 0-8 into three increasing lists. A move is pair of integers i, j in\n    {0, 1, 2} corresponding to moving the largest number from the end of list i to list j, while preserving the\n    order of list j. Find a sequence of moves that transform the given source to target states.\n    \"\"\"\n    state = [s[:] for s in source]\n\n    for [i, j] in moves:\n        state[j].append(state[i].pop())\n        assert state[j] == sorted(state[j])\n\n    return state == target",
    "sols": [
      "def sol(source=[[0, 1, 6, 7, 8, 9, 14, 16], [5, 15], [2, 3, 4, 10, 11, 12, 13]], target=[[1, 2, 4, 5, 13], [3, 6, 11, 12, 14], [0, 7, 8, 9, 10, 15, 16]]):\n    state = {d: i for i, tower in enumerate(source) for d in tower}\n    final = {d: i for i, tower in enumerate(target) for d in tower}\n    disks = set(state)\n    assert disks == set(final) and all(isinstance(i, int) for i in state) and len(source) == len(target) >= 3\n    ans = []\n\n    def move(d, i):  # move disk d to tower i\n        if state[d] == i:\n            return\n        for t in range(3):  # first tower besides i, state[d]\n            if t != i and t != state[d]:\n                break\n        for d2 in range(d + 1, max(disks) + 1):\n            if d2 in disks:\n                move(d2, t)\n        ans.append([state[d], i])\n        state[d] = i\n\n    for d in range(min(disks), max(disks) + 1):\n        if d in disks:\n            move(d, final[d])\n\n    return ans"
    ],
    "module": "classic_puzzles",
    "notes": "[Towers of Hanoi](https://en.wikipedia.org/w/index.php?title=Tower_of_Hanoi)\n\nIn this version one must transform a given source state to a target state.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "TowersOfHanoiArbitrary_3",
    "sat": "def sat(moves: List[List[int]], source=[[2, 11, 12, 16], [1, 3, 6, 8, 9, 10, 13], [0, 4, 5, 7, 14, 15]], target=[[0, 2, 3, 5, 7, 8, 14, 16], [9, 11, 12, 13, 15], [1, 4, 6, 10]]):\n    \"\"\"\n    A state is a partition of the integers 0-8 into three increasing lists. A move is pair of integers i, j in\n    {0, 1, 2} corresponding to moving the largest number from the end of list i to list j, while preserving the\n    order of list j. Find a sequence of moves that transform the given source to target states.\n    \"\"\"\n    state = [s[:] for s in source]\n\n    for [i, j] in moves:\n        state[j].append(state[i].pop())\n        assert state[j] == sorted(state[j])\n\n    return state == target",
    "sols": [
      "def sol(source=[[2, 11, 12, 16], [1, 3, 6, 8, 9, 10, 13], [0, 4, 5, 7, 14, 15]], target=[[0, 2, 3, 5, 7, 8, 14, 16], [9, 11, 12, 13, 15], [1, 4, 6, 10]]):\n    state = {d: i for i, tower in enumerate(source) for d in tower}\n    final = {d: i for i, tower in enumerate(target) for d in tower}\n    disks = set(state)\n    assert disks == set(final) and all(isinstance(i, int) for i in state) and len(source) == len(target) >= 3\n    ans = []\n\n    def move(d, i):  # move disk d to tower i\n        if state[d] == i:\n            return\n        for t in range(3):  # first tower besides i, state[d]\n            if t != i and t != state[d]:\n                break\n        for d2 in range(d + 1, max(disks) + 1):\n            if d2 in disks:\n                move(d2, t)\n        ans.append([state[d], i])\n        state[d] = i\n\n    for d in range(min(disks), max(disks) + 1):\n        if d in disks:\n            move(d, final[d])\n\n    return ans"
    ],
    "module": "classic_puzzles",
    "notes": "[Towers of Hanoi](https://en.wikipedia.org/w/index.php?title=Tower_of_Hanoi)\n\nIn this version one must transform a given source state to a target state.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "TowersOfHanoiArbitrary_4",
    "sat": "def sat(moves: List[List[int]], source=[[5, 6], [1, 2, 4], [0, 3]], target=[[2, 3, 4, 6], [0, 1], [5]]):\n    \"\"\"\n    A state is a partition of the integers 0-8 into three increasing lists. A move is pair of integers i, j in\n    {0, 1, 2} corresponding to moving the largest number from the end of list i to list j, while preserving the\n    order of list j. Find a sequence of moves that transform the given source to target states.\n    \"\"\"\n    state = [s[:] for s in source]\n\n    for [i, j] in moves:\n        state[j].append(state[i].pop())\n        assert state[j] == sorted(state[j])\n\n    return state == target",
    "sols": [
      "def sol(source=[[5, 6], [1, 2, 4], [0, 3]], target=[[2, 3, 4, 6], [0, 1], [5]]):\n    state = {d: i for i, tower in enumerate(source) for d in tower}\n    final = {d: i for i, tower in enumerate(target) for d in tower}\n    disks = set(state)\n    assert disks == set(final) and all(isinstance(i, int) for i in state) and len(source) == len(target) >= 3\n    ans = []\n\n    def move(d, i):  # move disk d to tower i\n        if state[d] == i:\n            return\n        for t in range(3):  # first tower besides i, state[d]\n            if t != i and t != state[d]:\n                break\n        for d2 in range(d + 1, max(disks) + 1):\n            if d2 in disks:\n                move(d2, t)\n        ans.append([state[d], i])\n        state[d] = i\n\n    for d in range(min(disks), max(disks) + 1):\n        if d in disks:\n            move(d, final[d])\n\n    return ans"
    ],
    "module": "classic_puzzles",
    "notes": "[Towers of Hanoi](https://en.wikipedia.org/w/index.php?title=Tower_of_Hanoi)\n\nIn this version one must transform a given source state to a target state.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "TowersOfHanoiArbitrary_5",
    "sat": "def sat(moves: List[List[int]], source=[[6], [0, 2, 3], [1, 4, 5]], target=[[3, 5], [0, 2, 4], [1, 6]]):\n    \"\"\"\n    A state is a partition of the integers 0-8 into three increasing lists. A move is pair of integers i, j in\n    {0, 1, 2} corresponding to moving the largest number from the end of list i to list j, while preserving the\n    order of list j. Find a sequence of moves that transform the given source to target states.\n    \"\"\"\n    state = [s[:] for s in source]\n\n    for [i, j] in moves:\n        state[j].append(state[i].pop())\n        assert state[j] == sorted(state[j])\n\n    return state == target",
    "sols": [
      "def sol(source=[[6], [0, 2, 3], [1, 4, 5]], target=[[3, 5], [0, 2, 4], [1, 6]]):\n    state = {d: i for i, tower in enumerate(source) for d in tower}\n    final = {d: i for i, tower in enumerate(target) for d in tower}\n    disks = set(state)\n    assert disks == set(final) and all(isinstance(i, int) for i in state) and len(source) == len(target) >= 3\n    ans = []\n\n    def move(d, i):  # move disk d to tower i\n        if state[d] == i:\n            return\n        for t in range(3):  # first tower besides i, state[d]\n            if t != i and t != state[d]:\n                break\n        for d2 in range(d + 1, max(disks) + 1):\n            if d2 in disks:\n                move(d2, t)\n        ans.append([state[d], i])\n        state[d] = i\n\n    for d in range(min(disks), max(disks) + 1):\n        if d in disks:\n            move(d, final[d])\n\n    return ans"
    ],
    "module": "classic_puzzles",
    "notes": "[Towers of Hanoi](https://en.wikipedia.org/w/index.php?title=Tower_of_Hanoi)\n\nIn this version one must transform a given source state to a target state.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "TowersOfHanoiArbitrary_6",
    "sat": "def sat(moves: List[List[int]], source=[[0], [1, 2, 3], []], target=[[1], [0, 3], [2]]):\n    \"\"\"\n    A state is a partition of the integers 0-8 into three increasing lists. A move is pair of integers i, j in\n    {0, 1, 2} corresponding to moving the largest number from the end of list i to list j, while preserving the\n    order of list j. Find a sequence of moves that transform the given source to target states.\n    \"\"\"\n    state = [s[:] for s in source]\n\n    for [i, j] in moves:\n        state[j].append(state[i].pop())\n        assert state[j] == sorted(state[j])\n\n    return state == target",
    "sols": [
      "def sol(source=[[0], [1, 2, 3], []], target=[[1], [0, 3], [2]]):\n    state = {d: i for i, tower in enumerate(source) for d in tower}\n    final = {d: i for i, tower in enumerate(target) for d in tower}\n    disks = set(state)\n    assert disks == set(final) and all(isinstance(i, int) for i in state) and len(source) == len(target) >= 3\n    ans = []\n\n    def move(d, i):  # move disk d to tower i\n        if state[d] == i:\n            return\n        for t in range(3):  # first tower besides i, state[d]\n            if t != i and t != state[d]:\n                break\n        for d2 in range(d + 1, max(disks) + 1):\n            if d2 in disks:\n                move(d2, t)\n        ans.append([state[d], i])\n        state[d] = i\n\n    for d in range(min(disks), max(disks) + 1):\n        if d in disks:\n            move(d, final[d])\n\n    return ans"
    ],
    "module": "classic_puzzles",
    "notes": "[Towers of Hanoi](https://en.wikipedia.org/w/index.php?title=Tower_of_Hanoi)\n\nIn this version one must transform a given source state to a target state.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "TowersOfHanoiArbitrary_7",
    "sat": "def sat(moves: List[List[int]], source=[[5, 8, 14], [2, 3, 4, 11], [0, 1, 6, 7, 9, 10, 12, 13]], target=[[0, 2, 3, 6, 7, 8, 9, 10, 14], [1, 5, 11, 12], [4, 13]]):\n    \"\"\"\n    A state is a partition of the integers 0-8 into three increasing lists. A move is pair of integers i, j in\n    {0, 1, 2} corresponding to moving the largest number from the end of list i to list j, while preserving the\n    order of list j. Find a sequence of moves that transform the given source to target states.\n    \"\"\"\n    state = [s[:] for s in source]\n\n    for [i, j] in moves:\n        state[j].append(state[i].pop())\n        assert state[j] == sorted(state[j])\n\n    return state == target",
    "sols": [
      "def sol(source=[[5, 8, 14], [2, 3, 4, 11], [0, 1, 6, 7, 9, 10, 12, 13]], target=[[0, 2, 3, 6, 7, 8, 9, 10, 14], [1, 5, 11, 12], [4, 13]]):\n    state = {d: i for i, tower in enumerate(source) for d in tower}\n    final = {d: i for i, tower in enumerate(target) for d in tower}\n    disks = set(state)\n    assert disks == set(final) and all(isinstance(i, int) for i in state) and len(source) == len(target) >= 3\n    ans = []\n\n    def move(d, i):  # move disk d to tower i\n        if state[d] == i:\n            return\n        for t in range(3):  # first tower besides i, state[d]\n            if t != i and t != state[d]:\n                break\n        for d2 in range(d + 1, max(disks) + 1):\n            if d2 in disks:\n                move(d2, t)\n        ans.append([state[d], i])\n        state[d] = i\n\n    for d in range(min(disks), max(disks) + 1):\n        if d in disks:\n            move(d, final[d])\n\n    return ans"
    ],
    "module": "classic_puzzles",
    "notes": "[Towers of Hanoi](https://en.wikipedia.org/w/index.php?title=Tower_of_Hanoi)\n\nIn this version one must transform a given source state to a target state.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "TowersOfHanoiArbitrary_8",
    "sat": "def sat(moves: List[List[int]], source=[[3, 4, 5, 9, 12], [0, 2, 6, 8, 10, 11, 14], [1, 7, 13, 15, 16]], target=[[1, 6, 7, 9, 10, 11, 14], [2, 5, 8, 13], [0, 3, 4, 12, 15, 16]]):\n    \"\"\"\n    A state is a partition of the integers 0-8 into three increasing lists. A move is pair of integers i, j in\n    {0, 1, 2} corresponding to moving the largest number from the end of list i to list j, while preserving the\n    order of list j. Find a sequence of moves that transform the given source to target states.\n    \"\"\"\n    state = [s[:] for s in source]\n\n    for [i, j] in moves:\n        state[j].append(state[i].pop())\n        assert state[j] == sorted(state[j])\n\n    return state == target",
    "sols": [
      "def sol(source=[[3, 4, 5, 9, 12], [0, 2, 6, 8, 10, 11, 14], [1, 7, 13, 15, 16]], target=[[1, 6, 7, 9, 10, 11, 14], [2, 5, 8, 13], [0, 3, 4, 12, 15, 16]]):\n    state = {d: i for i, tower in enumerate(source) for d in tower}\n    final = {d: i for i, tower in enumerate(target) for d in tower}\n    disks = set(state)\n    assert disks == set(final) and all(isinstance(i, int) for i in state) and len(source) == len(target) >= 3\n    ans = []\n\n    def move(d, i):  # move disk d to tower i\n        if state[d] == i:\n            return\n        for t in range(3):  # first tower besides i, state[d]\n            if t != i and t != state[d]:\n                break\n        for d2 in range(d + 1, max(disks) + 1):\n            if d2 in disks:\n                move(d2, t)\n        ans.append([state[d], i])\n        state[d] = i\n\n    for d in range(min(disks), max(disks) + 1):\n        if d in disks:\n            move(d, final[d])\n\n    return ans"
    ],
    "module": "classic_puzzles",
    "notes": "[Towers of Hanoi](https://en.wikipedia.org/w/index.php?title=Tower_of_Hanoi)\n\nIn this version one must transform a given source state to a target state.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "TowersOfHanoiArbitrary_9",
    "sat": "def sat(moves: List[List[int]], source=[[1, 2, 4, 5, 10], [0, 8], [3, 6, 7, 9]], target=[[0, 3, 4, 7], [1, 6, 10], [2, 5, 8, 9]]):\n    \"\"\"\n    A state is a partition of the integers 0-8 into three increasing lists. A move is pair of integers i, j in\n    {0, 1, 2} corresponding to moving the largest number from the end of list i to list j, while preserving the\n    order of list j. Find a sequence of moves that transform the given source to target states.\n    \"\"\"\n    state = [s[:] for s in source]\n\n    for [i, j] in moves:\n        state[j].append(state[i].pop())\n        assert state[j] == sorted(state[j])\n\n    return state == target",
    "sols": [
      "def sol(source=[[1, 2, 4, 5, 10], [0, 8], [3, 6, 7, 9]], target=[[0, 3, 4, 7], [1, 6, 10], [2, 5, 8, 9]]):\n    state = {d: i for i, tower in enumerate(source) for d in tower}\n    final = {d: i for i, tower in enumerate(target) for d in tower}\n    disks = set(state)\n    assert disks == set(final) and all(isinstance(i, int) for i in state) and len(source) == len(target) >= 3\n    ans = []\n\n    def move(d, i):  # move disk d to tower i\n        if state[d] == i:\n            return\n        for t in range(3):  # first tower besides i, state[d]\n            if t != i and t != state[d]:\n                break\n        for d2 in range(d + 1, max(disks) + 1):\n            if d2 in disks:\n                move(d2, t)\n        ans.append([state[d], i])\n        state[d] = i\n\n    for d in range(min(disks), max(disks) + 1):\n        if d in disks:\n            move(d, final[d])\n\n    return ans"
    ],
    "module": "classic_puzzles",
    "notes": "[Towers of Hanoi](https://en.wikipedia.org/w/index.php?title=Tower_of_Hanoi)\n\nIn this version one must transform a given source state to a target state.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LongestMonotonicSubstring_0",
    "sat": "def sat(x: List[int], length=13, s=\"Dynamic programming solves this puzzle!!!\"):\n    \"\"\"\n    Remove as few characters as possible from s so that the characters of the remaining string are alphebetical.\n    Here x is the list of string indices that have not been deleted.\n    \"\"\"\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] >= 0 for i in range(length - 1))",
    "sols": [
      "def sol(length=13, s=\"Dynamic programming solves this puzzle!!!\"):  # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, -1))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[i][2] != -1:\n        i = dyn[i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "This is a form of the classic\n[Longest increasing subsequence](https://en.wikipedia.org/wiki/Longest_increasing_subsequence) problem\nwhere the goal is to find a substring with characters in sorted order.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LongestMonotonicSubstring_1",
    "sat": "def sat(x: List[int], length=193, s=\"    !!\\\"\\\"\\\"#$$%&&')''((()!))****X**++,,,,---...///0111114445556888::::;s;;<<==,=>>>>ABBBBBCDEEEEEEEFGHIIKKKKLMNOOPPPQQQRRRRASUUUVVVWWXXZZZ[]]]!``aEaabbbccccPcdeeeeefghjjjjkkkllmmooooKpppppqsttwt'$ww=wLwwyyyyzz{\"):\n    \"\"\"\n    Remove as few characters as possible from s so that the characters of the remaining string are alphebetical.\n    Here x is the list of string indices that have not been deleted.\n    \"\"\"\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] >= 0 for i in range(length - 1))",
    "sols": [
      "def sol(length=193, s=\"    !!\\\"\\\"\\\"#$$%&&')''((()!))****X**++,,,,---...///0111114445556888::::;s;;<<==,=>>>>ABBBBBCDEEEEEEEFGHIIKKKKLMNOOPPPQQQRRRRASUUUVVVWWXXZZZ[]]]!``aEaabbbccccPcdeeeeefghjjjjkkkllmmooooKpppppqsttwt'$ww=wLwwyyyyzz{\"):  # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, -1))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[i][2] != -1:\n        i = dyn[i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "This is a form of the classic\n[Longest increasing subsequence](https://en.wikipedia.org/wiki/Longest_increasing_subsequence) problem\nwhere the goal is to find a substring with characters in sorted order.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LongestMonotonicSubstring_2",
    "sat": "def sat(x: List[int], length=737, s=\"    _   !m!!!!!!!!!!!V!\\\"=\\\"\\\"\\\"\\\"\\\"l#####$$r$$$$$$$$$%%%%%&&&&&&y&''''''@'''''<(((())))))******+++++++p,,,,,!,-----w-----o-....,.......//////D000000000000111111111222222,23h33c33334444444'4455555555566666R6@9777777T7888888-8994999999999::::::::::;;;;;;;P;;;<<<:<<^<)<<sn<<<====u=*=>>>>>>>>>???A?j??8??.?@@O@@@@@@ArAA&ABBBBBBBBBCCCCCDDDEEEEEEEEE%E(EEEEEFF!FFG-GGGGGGGGHHCHHHIGIsIIIInIIIIJJJRJFJJKKKKKKa0K<KKLL.LLLLLLMMMnMMM_MMMNNNONNOOOOOPPPP4LPPPPQQ\\\\QQQbQQQ7QQRRRRR\\\"RRSSSSSSTTgTTTTUUtUUUUUVVVVVVVVVVVqVVVMWWRWWWWWWWW%XXXXXXXXXXYYYYYZZZZZZZZZ2y[S[[[I[[[[\\\\$g\\\"\\\\\\\\\\\\\\\\T]]]]]]]]]]^^o^^______________`?&`I`y````aaaaaabbbbcccccc3ddddIu;L*dddeeee#eee]ffff1f]=fffffffffgggghhxhhhhhhiigiiiiiiiDiiCiiiijLjjIljjjjjjjkklllllmmmmJymmmmnnnnMnnnnnnoooiobooXoopppppqy5qqqdqqrrIrrrrJrssssssssTsstt'ttttZttt@tttuluuuuu0uuuvvxvvvv\\\\vv3vvvvwwwwwwba.wwx4xxxxxxxxxxxxxJyyyyyyyyyyzzzzzzzz{{{{{{{{\"):\n    \"\"\"\n    Remove as few characters as possible from s so that the characters of the remaining string are alphebetical.\n    Here x is the list of string indices that have not been deleted.\n    \"\"\"\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] >= 0 for i in range(length - 1))",
    "sols": [
      "def sol(length=737, s=\"    _   !m!!!!!!!!!!!V!\\\"=\\\"\\\"\\\"\\\"\\\"l#####$$r$$$$$$$$$%%%%%&&&&&&y&''''''@'''''<(((())))))******+++++++p,,,,,!,-----w-----o-....,.......//////D000000000000111111111222222,23h33c33334444444'4455555555566666R6@9777777T7888888-8994999999999::::::::::;;;;;;;P;;;<<<:<<^<)<<sn<<<====u=*=>>>>>>>>>???A?j??8??.?@@O@@@@@@ArAA&ABBBBBBBBBCCCCCDDDEEEEEEEEE%E(EEEEEFF!FFG-GGGGGGGGHHCHHHIGIsIIIInIIIIJJJRJFJJKKKKKKa0K<KKLL.LLLLLLMMMnMMM_MMMNNNONNOOOOOPPPP4LPPPPQQ\\\\QQQbQQQ7QQRRRRR\\\"RRSSSSSSTTgTTTTUUtUUUUUVVVVVVVVVVVqVVVMWWRWWWWWWWW%XXXXXXXXXXYYYYYZZZZZZZZZ2y[S[[[I[[[[\\\\$g\\\"\\\\\\\\\\\\\\\\T]]]]]]]]]]^^o^^______________`?&`I`y````aaaaaabbbbcccccc3ddddIu;L*dddeeee#eee]ffff1f]=fffffffffgggghhxhhhhhhiigiiiiiiiDiiCiiiijLjjIljjjjjjjkklllllmmmmJymmmmnnnnMnnnnnnoooiobooXoopppppqy5qqqdqqrrIrrrrJrssssssssTsstt'ttttZttt@tttuluuuuu0uuuvvxvvvv\\\\vv3vvvvwwwwwwba.wwx4xxxxxxxxxxxxxJyyyyyyyyyyzzzzzzzz{{{{{{{{\"):  # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, -1))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[i][2] != -1:\n        i = dyn[i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "This is a form of the classic\n[Longest increasing subsequence](https://en.wikipedia.org/wiki/Longest_increasing_subsequence) problem\nwhere the goal is to find a substring with characters in sorted order.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LongestMonotonicSubstring_3",
    "sat": "def sat(x: List[int], length=0, s=\"\"):\n    \"\"\"\n    Remove as few characters as possible from s so that the characters of the remaining string are alphebetical.\n    Here x is the list of string indices that have not been deleted.\n    \"\"\"\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] >= 0 for i in range(length - 1))",
    "sols": [
      "def sol(length=0, s=\"\"):  # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, -1))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[i][2] != -1:\n        i = dyn[i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "This is a form of the classic\n[Longest increasing subsequence](https://en.wikipedia.org/wiki/Longest_increasing_subsequence) problem\nwhere the goal is to find a substring with characters in sorted order.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LongestMonotonicSubstring_4",
    "sat": "def sat(x: List[int], length=1, s=\"xwV\"):\n    \"\"\"\n    Remove as few characters as possible from s so that the characters of the remaining string are alphebetical.\n    Here x is the list of string indices that have not been deleted.\n    \"\"\"\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] >= 0 for i in range(length - 1))",
    "sols": [
      "def sol(length=1, s=\"xwV\"):  # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, -1))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[i][2] != -1:\n        i = dyn[i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "This is a form of the classic\n[Longest increasing subsequence](https://en.wikipedia.org/wiki/Longest_increasing_subsequence) problem\nwhere the goal is to find a substring with characters in sorted order.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LongestMonotonicSubstring_5",
    "sat": "def sat(x: List[int], length=25, s=\"d#.=66EE*FKLRy<=L(X'NN3R(qXH'T$WX;Y\\\\j]^z^iahf\\\\8:jxI$Ydqy o<${\"):\n    \"\"\"\n    Remove as few characters as possible from s so that the characters of the remaining string are alphebetical.\n    Here x is the list of string indices that have not been deleted.\n    \"\"\"\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] >= 0 for i in range(length - 1))",
    "sols": [
      "def sol(length=25, s=\"d#.=66EE*FKLRy<=L(X'NN3R(qXH'T$WX;Y\\\\j]^z^iahf\\\\8:jxI$Ydqy o<${\"):  # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, -1))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[i][2] != -1:\n        i = dyn[i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "This is a form of the classic\n[Longest increasing subsequence](https://en.wikipedia.org/wiki/Longest_increasing_subsequence) problem\nwhere the goal is to find a substring with characters in sorted order.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LongestMonotonicSubstring_6",
    "sat": "def sat(x: List[int], length=0, s=\"wg.?i  WW=\"):\n    \"\"\"\n    Remove as few characters as possible from s so that the characters of the remaining string are alphebetical.\n    Here x is the list of string indices that have not been deleted.\n    \"\"\"\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] >= 0 for i in range(length - 1))",
    "sols": [
      "def sol(length=0, s=\"wg.?i  WW=\"):  # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, -1))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[i][2] != -1:\n        i = dyn[i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "This is a form of the classic\n[Longest increasing subsequence](https://en.wikipedia.org/wiki/Longest_increasing_subsequence) problem\nwhere the goal is to find a substring with characters in sorted order.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LongestMonotonicSubstring_7",
    "sat": "def sat(x: List[int], length=573, s=\"O    !!i\\\"\\\"9\\\"$\\\"\\\"\\\"5\\\"i\\\"\\\"####u##]2$)$$$G$$@$$&$2'$%o%%%%%%%g%%]P%a%&{&&Q&&&oG&&&&&yX&e&y''''QS(((*S(((e((_K)^)K'q)jx))i)****5**++6++++8,,$,4,!,D,,XO,#,,V---.r.../C//_///p/00Gd0nU0y01:S11111111:1322233334484TZu^4_4 q44555$515J555;r5667777777A7778889999h#=blt9::`::;Q_;;1;;x;gM<5<<U===M>`>>i>??@@@@j@@Q@A_A;AABB%rJBed BM,BCCCcCCXECC_CDDDtD#DDDEPkEwEEF<FFFdFFFFGGG\\\"GGDHHH5jHHHMHIIII- IIJJbKKKKKv+3KuKKLLLjLLLMMf+MMN{NNj;NNO+OOJTzOPPPi/QQQQQP\\\"RR>RRSSSS:SRSWSe.SS6UStX]r{S+STTTTTTTTaT>UU@AUUQUUU)bUsUUCeVheBVW1kWWWWWXX30XXXXmXXXoXYY+YYYZ)ZZ\\\\OW{@ZZZ[[[[[[[\\\\\\\\<\\\\o\\\\\\\\\\\\bv\\\\,[M\\\\M\\\\\\\\e]V]]]U^K^'^^^^M^^NJ__r___7_`8`o``5c`w``<aaaaaabbcRccmcc/oecccQcfcx*+YC?/cccdddddaej26eefxk:f/ff8g4he gggggWggp=ghhQhhe=h)hhhiikiiiiliwD9i$i-fibj^{jj`yjjj2j)j]jkkk<kQkkkkkO!`lOlcFol@mSmmmmmmnnnnnkyNloxooBEODoNEopppqq;qqqqwpr]#3`prVr`sCrrrssossaP\\\\st2ttttt))tuuPsuu+(u$uuuA0nuvvvzvvLmv`QvvwMw)wwxx#(@xxxxxWIr6xxJxu\\\"xQRyyyyyyhyiyRzzv7B$qzgzzkzzzz6zems{={Mh{{{{Tz{{\"):\n    \"\"\"\n    Remove as few characters as possible from s so that the characters of the remaining string are alphebetical.\n    Here x is the list of string indices that have not been deleted.\n    \"\"\"\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] >= 0 for i in range(length - 1))",
    "sols": [
      "def sol(length=573, s=\"O    !!i\\\"\\\"9\\\"$\\\"\\\"\\\"5\\\"i\\\"\\\"####u##]2$)$$$G$$@$$&$2'$%o%%%%%%%g%%]P%a%&{&&Q&&&oG&&&&&yX&e&y''''QS(((*S(((e((_K)^)K'q)jx))i)****5**++6++++8,,$,4,!,D,,XO,#,,V---.r.../C//_///p/00Gd0nU0y01:S11111111:1322233334484TZu^4_4 q44555$515J555;r5667777777A7778889999h#=blt9::`::;Q_;;1;;x;gM<5<<U===M>`>>i>??@@@@j@@Q@A_A;AABB%rJBed BM,BCCCcCCXECC_CDDDtD#DDDEPkEwEEF<FFFdFFFFGGG\\\"GGDHHH5jHHHMHIIII- IIJJbKKKKKv+3KuKKLLLjLLLMMf+MMN{NNj;NNO+OOJTzOPPPi/QQQQQP\\\"RR>RRSSSS:SRSWSe.SS6UStX]r{S+STTTTTTTTaT>UU@AUUQUUU)bUsUUCeVheBVW1kWWWWWXX30XXXXmXXXoXYY+YYYZ)ZZ\\\\OW{@ZZZ[[[[[[[\\\\\\\\<\\\\o\\\\\\\\\\\\bv\\\\,[M\\\\M\\\\\\\\e]V]]]U^K^'^^^^M^^NJ__r___7_`8`o``5c`w``<aaaaaabbcRccmcc/oecccQcfcx*+YC?/cccdddddaej26eefxk:f/ff8g4he gggggWggp=ghhQhhe=h)hhhiikiiiiliwD9i$i-fibj^{jj`yjjj2j)j]jkkk<kQkkkkkO!`lOlcFol@mSmmmmmmnnnnnkyNloxooBEODoNEopppqq;qqqqwpr]#3`prVr`sCrrrssossaP\\\\st2ttttt))tuuPsuu+(u$uuuA0nuvvvzvvLmv`QvvwMw)wwxx#(@xxxxxWIr6xxJxu\\\"xQRyyyyyyhyiyRzzv7B$qzgzzkzzzz6zems{={Mh{{{{Tz{{\"):  # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, -1))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[i][2] != -1:\n        i = dyn[i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "This is a form of the classic\n[Longest increasing subsequence](https://en.wikipedia.org/wiki/Longest_increasing_subsequence) problem\nwhere the goal is to find a substring with characters in sorted order.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LongestMonotonicSubstring_8",
    "sat": "def sat(x: List[int], length=4, s=\"7[^e\"):\n    \"\"\"\n    Remove as few characters as possible from s so that the characters of the remaining string are alphebetical.\n    Here x is the list of string indices that have not been deleted.\n    \"\"\"\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] >= 0 for i in range(length - 1))",
    "sols": [
      "def sol(length=4, s=\"7[^e\"):  # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, -1))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[i][2] != -1:\n        i = dyn[i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "This is a form of the classic\n[Longest increasing subsequence](https://en.wikipedia.org/wiki/Longest_increasing_subsequence) problem\nwhere the goal is to find a substring with characters in sorted order.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LongestMonotonicSubstring_9",
    "sat": "def sat(x: List[int], length=478, s=\" rgA!0*f\\\\D _Y  W1X !I#r!!!!\\\"\\\"@g\\\"$h\\\"\\\"D=_\\\"\\\"\\\"#$Pi$$q$#%%4+W%P%&&&6&&&f&''n'((-d-)/H);)$)))***91:*3o*>cPcQ***+k++qz`+_+<+r+,,--$2W$@-mS0--v--&H4;..m./t//v//ANml/////S/\\\\0zE0uq001cpE] 1111\\\\&1!12 2s3c1-2/22-Hqv3344455e@$555=&'Ng>)qUf;{46646de677)\\\\3t777sPWT7788899:Io:pK:;J;;;yp<;d_J;x;9;:;U;l<<*<===#===W=+>N>y>>.&>>6>6e\\\"???N(??z@Y@`us@@@W@AUA\\\"AAAABBBvBBC^CDD^D3v)EEE'tD?EE^`'YlE9uE3uFFCob7FPFGGHHt;aQHIH(0kHMIII,II:9WIIf.{LJJJJJKJKKut3wuKUK{HTKqKLgM MWsMqMMMMMmNN]aN{N%NNNOOO-7P?PPvP%P.QZ-@QjQkVQQ QxQRRR&S+b)Sa0S>SSSTS#zBSTTTTTTT`4)_ThTLUU/UU/{HXUV2VVVVVVIVVW'WWsI1DtW%W%WXZX` DXPYZmZZZrZQcZZ6[[[[!Ifql[G@7[[\\\\\\\\\\\\\\\\\\\\q]]+]]]]^^WNaul^^D__)__SC_M_`Q`PP````aO*7aObjW5ua\\\\aRaabbbbbbbbebbqXccj)c<cc\\\\ddddeeY'Rc]cJePvlte_e)*efJrf8ff{fggO`1ghC#h+hzhhh.hMh0iKiii_jjjjjj2kzk&kTkktkZ$kVyll3,lt%llCm*m,mmmnn9npMnnozRvooxoo>=oEG_ozppX>mppzppDCo(pOBA5pp7q6qqM>RqZqGJwq-rrr<rss>s;stttuuGuu4vTuruuuuGvv$vS1vvvvvvwH@mwxww^wgw{wwx%ibyyyByyybKWwyzEc+.fz{{EN{{&{{\"):\n    \"\"\"\n    Remove as few characters as possible from s so that the characters of the remaining string are alphebetical.\n    Here x is the list of string indices that have not been deleted.\n    \"\"\"\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] >= 0 for i in range(length - 1))",
    "sols": [
      "def sol(length=478, s=\" rgA!0*f\\\\D _Y  W1X !I#r!!!!\\\"\\\"@g\\\"$h\\\"\\\"D=_\\\"\\\"\\\"#$Pi$$q$#%%4+W%P%&&&6&&&f&''n'((-d-)/H);)$)))***91:*3o*>cPcQ***+k++qz`+_+<+r+,,--$2W$@-mS0--v--&H4;..m./t//v//ANml/////S/\\\\0zE0uq001cpE] 1111\\\\&1!12 2s3c1-2/22-Hqv3344455e@$555=&'Ng>)qUf;{46646de677)\\\\3t777sPWT7788899:Io:pK:;J;;;yp<;d_J;x;9;:;U;l<<*<===#===W=+>N>y>>.&>>6>6e\\\"???N(??z@Y@`us@@@W@AUA\\\"AAAABBBvBBC^CDD^D3v)EEE'tD?EE^`'YlE9uE3uFFCob7FPFGGHHt;aQHIH(0kHMIII,II:9WIIf.{LJJJJJKJKKut3wuKUK{HTKqKLgM MWsMqMMMMMmNN]aN{N%NNNOOO-7P?PPvP%P.QZ-@QjQkVQQ QxQRRR&S+b)Sa0S>SSSTS#zBSTTTTTTT`4)_ThTLUU/UU/{HXUV2VVVVVVIVVW'WWsI1DtW%W%WXZX` DXPYZmZZZrZQcZZ6[[[[!Ifql[G@7[[\\\\\\\\\\\\\\\\\\\\q]]+]]]]^^WNaul^^D__)__SC_M_`Q`PP````aO*7aObjW5ua\\\\aRaabbbbbbbbebbqXccj)c<cc\\\\ddddeeY'Rc]cJePvlte_e)*efJrf8ff{fggO`1ghC#h+hzhhh.hMh0iKiii_jjjjjj2kzk&kTkktkZ$kVyll3,lt%llCm*m,mmmnn9npMnnozRvooxoo>=oEG_ozppX>mppzppDCo(pOBA5pp7q6qqM>RqZqGJwq-rrr<rss>s;stttuuGuu4vTuruuuuGvv$vS1vvvvvvwH@mwxww^wgw{wwx%ibyyyByyybKWwyzEc+.fz{{EN{{&{{\"):  # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, -1))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[i][2] != -1:\n        i = dyn[i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "This is a form of the classic\n[Longest increasing subsequence](https://en.wikipedia.org/wiki/Longest_increasing_subsequence) problem\nwhere the goal is to find a substring with characters in sorted order.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LongestMonotonicSubstringTricky_0",
    "sat": "def sat(x: List[int], length=20, s=\"Dynamic programming solves this classic job-interview puzzle!!!\"):\n    \"\"\"Find the indices of the longest substring with characters in sorted order\"\"\"\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] for i in range(length - 1))",
    "sols": [
      "def sol(length=20, s=\"Dynamic programming solves this classic job-interview puzzle!!!\"):  # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(-n, n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, None))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[n + i][2] is not None:\n        i = dyn[n + i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "The same as the above problem, but with a twist!",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LongestMonotonicSubstringTricky_1",
    "sat": "def sat(x: List[int], length=535, s=\"RRRS  S !L!eSSSS!TTT+!TTTUU!!UU!UU\\\"U\\\"\\\"\\\"VVV\\\"\\\"\\\"VK#WW##gfW##X##6$$X$XX@$XXP%%%YY%+YY%&ZZ)%ZZ&#Z&[&[[[[\\\\'\\\\\\\\]\\\\\\\\]''']]']]]^^(^R^((^))^)^^*^_*_L____**;**_``*```++`+`+[+++``,m,,`,,-aa@aa[a-arb-b--b(vzbb-.b.6.ccc.cKcc.cc//c/cc//dddddd/0deeeee000e0f0ff0f01ff11f1<1gg;g12R2g22233gg33g333g3g445555566ghhh66799h9hhh9h999iEii/iYi::i::j:jvv:;;;;jj<j<<k===kkkk===ll=l=l>>l>ll0>l>m>m@mmm??0m^,?nn???n?sn@@oo@DobAAooAo7AAppppBqC$qqqqCCCCqqqqrDrrrrrrrDbrsDDDEsEs9asssfttEtttEEEtEEtFFtuuLFuuuFFFvF0FGvGGGvvvvRwwwwxGHxHHHx+HIxxIexxIIyyyPCyyyII,yIyyIzIJzJJQJzKzzKz{KK{{{{{[K{K{KK{?{KLLLLLLLMMM>NNNNNOOOOOOOOPPPQQQQQQQRRR\"):\n    \"\"\"Find the indices of the longest substring with characters in sorted order\"\"\"\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] for i in range(length - 1))",
    "sols": [
      "def sol(length=535, s=\"RRRS  S !L!eSSSS!TTT+!TTTUU!!UU!UU\\\"U\\\"\\\"\\\"VVV\\\"\\\"\\\"VK#WW##gfW##X##6$$X$XX@$XXP%%%YY%+YY%&ZZ)%ZZ&#Z&[&[[[[\\\\'\\\\\\\\]\\\\\\\\]''']]']]]^^(^R^((^))^)^^*^_*_L____**;**_``*```++`+`+[+++``,m,,`,,-aa@aa[a-arb-b--b(vzbb-.b.6.ccc.cKcc.cc//c/cc//dddddd/0deeeee000e0f0ff0f01ff11f1<1gg;g12R2g22233gg33g333g3g445555566ghhh66799h9hhh9h999iEii/iYi::i::j:jvv:;;;;jj<j<<k===kkkk===ll=l=l>>l>ll0>l>m>m@mmm??0m^,?nn???n?sn@@oo@DobAAooAo7AAppppBqC$qqqqCCCCqqqqrDrrrrrrrDbrsDDDEsEs9asssfttEtttEEEtEEtFFtuuLFuuuFFFvF0FGvGGGvvvvRwwwwxGHxHHHx+HIxxIexxIIyyyPCyyyII,yIyyIzIJzJJQJzKzzKz{KK{{{{{[K{K{KK{?{KLLLLLLLMMM>NNNNNOOOOOOOOPPPQQQQQQQRRR\"):  # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(-n, n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, None))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[n + i][2] is not None:\n        i = dyn[n + i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "The same as the above problem, but with a twist!",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LongestMonotonicSubstringTricky_2",
    "sat": "def sat(x: List[int], length=1, s=\"O!A{SeKv\"):\n    \"\"\"Find the indices of the longest substring with characters in sorted order\"\"\"\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] for i in range(length - 1))",
    "sols": [
      "def sol(length=1, s=\"O!A{SeKv\"):  # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(-n, n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, None))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[n + i][2] is not None:\n        i = dyn[n + i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "The same as the above problem, but with a twist!",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LongestMonotonicSubstringTricky_3",
    "sat": "def sat(x: List[int], length=61, s=\" OW##P%T'UW)X+X-YY]^_`bd/044e5egk7lm779:<m?D@ADnnpDEFIpNNOqqwxx\"):\n    \"\"\"Find the indices of the longest substring with characters in sorted order\"\"\"\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] for i in range(length - 1))",
    "sols": [
      "def sol(length=61, s=\" OW##P%T'UW)X+X-YY]^_`bd/044e5egk7lm779:<m?D@ADnnpDEFIpNNOqqwxx\"):  # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(-n, n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, None))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[n + i][2] is not None:\n        i = dyn[n + i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "The same as the above problem, but with a twist!",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LongestMonotonicSubstringTricky_4",
    "sat": "def sat(x: List[int], length=19, s=\"1>C>DmJh5\\\"Ju,\\\"Q8zJ_u-O-VfnVTZ?W'm=jq.\\\\l&%m$cU.nqv2\\\\**.o\\\">]FZ5owil>l*kIM wcLd<*UX`\\\"_u'DC3R$8wr;jT]CW\\\"F$QKeRPMzZY'U42&Km dRr8b$T3x)w2v,_k(dR,F:`=c$MjE_Kf/KCXFg^ueiO.U%S8_](:GF;`2`^O%eAqSRAHW0dYg5!u<ZV@usa`-<<ET@xZ)&<6=ogIhp9jJ/`$/_jEa-N$oZVT6#]^]x5u!$ Xk?g=TMwVGZqTU(OeH!Jbgz!9`%yxq(GN+@yD6RM1M#:geJpIPw1l{xxK!z'tXS5-S+vvE(nO:I_`l14Gz@U^.Ra73g!iH\\\\\\\"0{*>F@K'q>2HgCc^:baOy[,9vJtFWPAed2w_7zHLl&.x^:XLwwtS+Ocr#, *qXmo9Sp,Z>{l&ElT>RNZ:.5f6,yedMqH8?jA=_@oK;X\\\\pm>r0Il0+k\\\\,&'u*(S`]>u?(4M\\\\3=0 F<Jh?v`wz85A=?q3FUP<HiW[t0QB-Dx=e=ggmY29G4[HR!4i-*y@s$0)E'XPud6)gt(O[RWVf]ci,4.(:  8H[**k[g* T`z.Y2)Oq5`R8H$$joU/xfl*e4 \\\\z>*MS8wqj0(HwK?gvpuma{V5inBL\\\",39`%*r$uPi=%:s!<?{FCb-zILUAT?kdy\\\"B;sfYu#DoVp-'+]z:/c8eo2v&UAoeXEe:w#JZHKR\\\\3Xmxf'9jlHli*PTR-y`sdqRnv=;E$s]m!%I*`<*&.5N)wrI\\\"C=4^9RP5'9[5\\\"uG(4YU{3_aPHffi<E*+nVYQq37UP(P#wU9;p0Si.vyM1e?tXWZ9dRho1i!(we-<waQrvITH6vkTCG2 9hxMvtZ8QdR%WQ[B^0X1B;Vm&g/o=;YlD5[`Oh\"):\n    \"\"\"Find the indices of the longest substring with characters in sorted order\"\"\"\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] for i in range(length - 1))",
    "sols": [
      "def sol(length=19, s=\"1>C>DmJh5\\\"Ju,\\\"Q8zJ_u-O-VfnVTZ?W'm=jq.\\\\l&%m$cU.nqv2\\\\**.o\\\">]FZ5owil>l*kIM wcLd<*UX`\\\"_u'DC3R$8wr;jT]CW\\\"F$QKeRPMzZY'U42&Km dRr8b$T3x)w2v,_k(dR,F:`=c$MjE_Kf/KCXFg^ueiO.U%S8_](:GF;`2`^O%eAqSRAHW0dYg5!u<ZV@usa`-<<ET@xZ)&<6=ogIhp9jJ/`$/_jEa-N$oZVT6#]^]x5u!$ Xk?g=TMwVGZqTU(OeH!Jbgz!9`%yxq(GN+@yD6RM1M#:geJpIPw1l{xxK!z'tXS5-S+vvE(nO:I_`l14Gz@U^.Ra73g!iH\\\\\\\"0{*>F@K'q>2HgCc^:baOy[,9vJtFWPAed2w_7zHLl&.x^:XLwwtS+Ocr#, *qXmo9Sp,Z>{l&ElT>RNZ:.5f6,yedMqH8?jA=_@oK;X\\\\pm>r0Il0+k\\\\,&'u*(S`]>u?(4M\\\\3=0 F<Jh?v`wz85A=?q3FUP<HiW[t0QB-Dx=e=ggmY29G4[HR!4i-*y@s$0)E'XPud6)gt(O[RWVf]ci,4.(:  8H[**k[g* T`z.Y2)Oq5`R8H$$joU/xfl*e4 \\\\z>*MS8wqj0(HwK?gvpuma{V5inBL\\\",39`%*r$uPi=%:s!<?{FCb-zILUAT?kdy\\\"B;sfYu#DoVp-'+]z:/c8eo2v&UAoeXEe:w#JZHKR\\\\3Xmxf'9jlHli*PTR-y`sdqRnv=;E$s]m!%I*`<*&.5N)wrI\\\"C=4^9RP5'9[5\\\"uG(4YU{3_aPHffi<E*+nVYQq37UP(P#wU9;p0Si.vyM1e?tXWZ9dRho1i!(we-<waQrvITH6vkTCG2 9hxMvtZ8QdR%WQ[B^0X1B;Vm&g/o=;YlD5[`Oh\"):  # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(-n, n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, None))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[n + i][2] is not None:\n        i = dyn[n + i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "The same as the above problem, but with a twist!",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LongestMonotonicSubstringTricky_5",
    "sat": "def sat(x: List[int], length=12, s=\"E\\\" T%#h/=NfNV1mrFHB`e)V0$=A)$-L)AUjQtXR4h]p2.>-#:/PZ<,emFb\\\"ddFks2wZPQeA h)/PuHMP\\\"n.D=1Kb0-AsPDk]OKnGu*9,:b454H@m'1v%5 x56ao'vx=IET^UBRhnAl/K'%wCdw,Bq0sIn],H*hPId^]#Qt&K;xVW5QVo1]@IwSP=\\\\r=&0=mQRS('L:1X=L9Q#_ySSrV_^k6#IF&I!O2oDs9DYSp\\\"{,0j%oxHy,:%jFVAcS W8hC3),<znV\"):\n    \"\"\"Find the indices of the longest substring with characters in sorted order\"\"\"\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] for i in range(length - 1))",
    "sols": [
      "def sol(length=12, s=\"E\\\" T%#h/=NfNV1mrFHB`e)V0$=A)$-L)AUjQtXR4h]p2.>-#:/PZ<,emFb\\\"ddFks2wZPQeA h)/PuHMP\\\"n.D=1Kb0-AsPDk]OKnGu*9,:b454H@m'1v%5 x56ao'vx=IET^UBRhnAl/K'%wCdw,Bq0sIn],H*hPId^]#Qt&K;xVW5QVo1]@IwSP=\\\\r=&0=mQRS('L:1X=L9Q#_ySSrV_^k6#IF&I!O2oDs9DYSp\\\"{,0j%oxHy,:%jFVAcS W8hC3),<znV\"):  # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(-n, n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, None))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[n + i][2] is not None:\n        i = dyn[n + i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "The same as the above problem, but with a twist!",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LongestMonotonicSubstringTricky_6",
    "sat": "def sat(x: List[int], length=0, s=\"rvGNZ\"):\n    \"\"\"Find the indices of the longest substring with characters in sorted order\"\"\"\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] for i in range(length - 1))",
    "sols": [
      "def sol(length=0, s=\"rvGNZ\"):  # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(-n, n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, None))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[n + i][2] is not None:\n        i = dyn[n + i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "The same as the above problem, but with a twist!",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LongestMonotonicSubstringTricky_7",
    "sat": "def sat(x: List[int], length=2, s=\")H\"):\n    \"\"\"Find the indices of the longest substring with characters in sorted order\"\"\"\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] for i in range(length - 1))",
    "sols": [
      "def sol(length=2, s=\")H\"):  # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(-n, n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, None))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[n + i][2] is not None:\n        i = dyn[n + i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "The same as the above problem, but with a twist!",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LongestMonotonicSubstringTricky_8",
    "sat": "def sat(x: List[int], length=4, s=\"b0r<?X5\"):\n    \"\"\"Find the indices of the longest substring with characters in sorted order\"\"\"\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] for i in range(length - 1))",
    "sols": [
      "def sol(length=4, s=\"b0r<?X5\"):  # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(-n, n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, None))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[n + i][2] is not None:\n        i = dyn[n + i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "The same as the above problem, but with a twist!",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LongestMonotonicSubstringTricky_9",
    "sat": "def sat(x: List[int], length=6, s=\"S%T?Z(YI\"):\n    \"\"\"Find the indices of the longest substring with characters in sorted order\"\"\"\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] for i in range(length - 1))",
    "sols": [
      "def sol(length=6, s=\"S%T?Z(YI\"):  # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(-n, n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, None))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[n + i][2] is not None:\n        i = dyn[n + i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "The same as the above problem, but with a twist!",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "Quine_0",
    "sat": "def sat(quine: str):\n    \"\"\"Find a string that when evaluated as a Python expression is that string itself.\"\"\"\n    return eval(quine) == quine",
    "sols": [
      "def sol():\n    return \"(lambda x: f'({x})({chr(34)}{x}{chr(34)})')(\\\"lambda x: f'({x})({chr(34)}{x}{chr(34)})'\\\")\"",
      "def sol():  # thanks for this simple solution, GPT-3!\n    return 'quine'"
    ],
    "module": "classic_puzzles",
    "notes": "[Quine](https://en.wikipedia.org/wiki/Quine_%28computing%29)",
    "taint_date": "2021-4-26",
    "weight": 0.045454545454545456
  },
  {
    "name": "RevQuine_0",
    "sat": "def sat(rev_quine: str):\n    \"\"\"Find a string that, when reversed and evaluated gives you back that same string.\"\"\"\n    return eval(rev_quine[::-1]) == rev_quine",
    "sols": [
      "def sol():\n    return \"rev_quine\"[::-1]  # thanks GPT-3!"
    ],
    "module": "classic_puzzles",
    "notes": "Reverse [Quine](https://en.wikipedia.org/wiki/Quine_%28computing%29). The solution we give is from GPT3.",
    "taint_date": "2021-4-26",
    "weight": 0.045454545454545456
  },
  {
    "name": "BooleanPythagoreanTriples_0",
    "sat": "def sat(colors: List[int], n=100):\n    \"\"\"\n    Color the first n integers with one of two colors so that there is no monochromatic Pythagorean triple.\n    A monochromatic Pythagorean triple is a triple of numbers i, j, k such that i^2 + j^2 = k^2 that\n    are all assigned the same color. The input, colors, is a list of 0/1 colors of length >= n.\n    \"\"\"\n    assert set(colors) <= {0, 1} and len(colors) >= n\n    squares = {i ** 2: colors[i] for i in range(1, len(colors))}\n    return not any(c == d == squares.get(i + j) for i, c in squares.items() for j, d in squares.items())",
    "sols": [
      "def sol(n=100):\n    sqrt = {i * i: i for i in range(1, n)}\n    trips = [(sqrt[i], sqrt[j], sqrt[i + j]) for i in sqrt for j in sqrt if i < j and i + j in sqrt]\n    import random\n    random.seed(0)\n    sol = [random.randrange(2) for _ in range(n)]\n    done = False\n    while not done:\n        done = True\n        random.shuffle(trips)\n        for i, j, k in trips:\n            if sol[i] == sol[j] == sol[k]:\n                done = False\n                sol[random.choice([i, j, k])] = 1 - sol[i]\n    return sol"
    ],
    "module": "classic_puzzles",
    "notes": "[Boolean Pythagorean Triples Problem](https://en.wikipedia.org/wiki/Boolean_Pythagorean_triples_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "BooleanPythagoreanTriples_1",
    "sat": "def sat(colors: List[int], n=7824):\n    \"\"\"\n    Color the first n integers with one of two colors so that there is no monochromatic Pythagorean triple.\n    A monochromatic Pythagorean triple is a triple of numbers i, j, k such that i^2 + j^2 = k^2 that\n    are all assigned the same color. The input, colors, is a list of 0/1 colors of length >= n.\n    \"\"\"\n    assert set(colors) <= {0, 1} and len(colors) >= n\n    squares = {i ** 2: colors[i] for i in range(1, len(colors))}\n    return not any(c == d == squares.get(i + j) for i, c in squares.items() for j, d in squares.items())",
    "sols": [],
    "module": "classic_puzzles",
    "notes": "[Boolean Pythagorean Triples Problem](https://en.wikipedia.org/wiki/Boolean_Pythagorean_triples_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "BooleanPythagoreanTriples_2",
    "sat": "def sat(colors: List[int], n=0):\n    \"\"\"\n    Color the first n integers with one of two colors so that there is no monochromatic Pythagorean triple.\n    A monochromatic Pythagorean triple is a triple of numbers i, j, k such that i^2 + j^2 = k^2 that\n    are all assigned the same color. The input, colors, is a list of 0/1 colors of length >= n.\n    \"\"\"\n    assert set(colors) <= {0, 1} and len(colors) >= n\n    squares = {i ** 2: colors[i] for i in range(1, len(colors))}\n    return not any(c == d == squares.get(i + j) for i, c in squares.items() for j, d in squares.items())",
    "sols": [
      "def sol(n=0):\n    sqrt = {i * i: i for i in range(1, n)}\n    trips = [(sqrt[i], sqrt[j], sqrt[i + j]) for i in sqrt for j in sqrt if i < j and i + j in sqrt]\n    import random\n    random.seed(0)\n    sol = [random.randrange(2) for _ in range(n)]\n    done = False\n    while not done:\n        done = True\n        random.shuffle(trips)\n        for i, j, k in trips:\n            if sol[i] == sol[j] == sol[k]:\n                done = False\n                sol[random.choice([i, j, k])] = 1 - sol[i]\n    return sol"
    ],
    "module": "classic_puzzles",
    "notes": "[Boolean Pythagorean Triples Problem](https://en.wikipedia.org/wiki/Boolean_Pythagorean_triples_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "BooleanPythagoreanTriples_3",
    "sat": "def sat(colors: List[int], n=1):\n    \"\"\"\n    Color the first n integers with one of two colors so that there is no monochromatic Pythagorean triple.\n    A monochromatic Pythagorean triple is a triple of numbers i, j, k such that i^2 + j^2 = k^2 that\n    are all assigned the same color. The input, colors, is a list of 0/1 colors of length >= n.\n    \"\"\"\n    assert set(colors) <= {0, 1} and len(colors) >= n\n    squares = {i ** 2: colors[i] for i in range(1, len(colors))}\n    return not any(c == d == squares.get(i + j) for i, c in squares.items() for j, d in squares.items())",
    "sols": [
      "def sol(n=1):\n    sqrt = {i * i: i for i in range(1, n)}\n    trips = [(sqrt[i], sqrt[j], sqrt[i + j]) for i in sqrt for j in sqrt if i < j and i + j in sqrt]\n    import random\n    random.seed(0)\n    sol = [random.randrange(2) for _ in range(n)]\n    done = False\n    while not done:\n        done = True\n        random.shuffle(trips)\n        for i, j, k in trips:\n            if sol[i] == sol[j] == sol[k]:\n                done = False\n                sol[random.choice([i, j, k])] = 1 - sol[i]\n    return sol"
    ],
    "module": "classic_puzzles",
    "notes": "[Boolean Pythagorean Triples Problem](https://en.wikipedia.org/wiki/Boolean_Pythagorean_triples_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "BooleanPythagoreanTriples_4",
    "sat": "def sat(colors: List[int], n=2):\n    \"\"\"\n    Color the first n integers with one of two colors so that there is no monochromatic Pythagorean triple.\n    A monochromatic Pythagorean triple is a triple of numbers i, j, k such that i^2 + j^2 = k^2 that\n    are all assigned the same color. The input, colors, is a list of 0/1 colors of length >= n.\n    \"\"\"\n    assert set(colors) <= {0, 1} and len(colors) >= n\n    squares = {i ** 2: colors[i] for i in range(1, len(colors))}\n    return not any(c == d == squares.get(i + j) for i, c in squares.items() for j, d in squares.items())",
    "sols": [
      "def sol(n=2):\n    sqrt = {i * i: i for i in range(1, n)}\n    trips = [(sqrt[i], sqrt[j], sqrt[i + j]) for i in sqrt for j in sqrt if i < j and i + j in sqrt]\n    import random\n    random.seed(0)\n    sol = [random.randrange(2) for _ in range(n)]\n    done = False\n    while not done:\n        done = True\n        random.shuffle(trips)\n        for i, j, k in trips:\n            if sol[i] == sol[j] == sol[k]:\n                done = False\n                sol[random.choice([i, j, k])] = 1 - sol[i]\n    return sol"
    ],
    "module": "classic_puzzles",
    "notes": "[Boolean Pythagorean Triples Problem](https://en.wikipedia.org/wiki/Boolean_Pythagorean_triples_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "BooleanPythagoreanTriples_5",
    "sat": "def sat(colors: List[int], n=3):\n    \"\"\"\n    Color the first n integers with one of two colors so that there is no monochromatic Pythagorean triple.\n    A monochromatic Pythagorean triple is a triple of numbers i, j, k such that i^2 + j^2 = k^2 that\n    are all assigned the same color. The input, colors, is a list of 0/1 colors of length >= n.\n    \"\"\"\n    assert set(colors) <= {0, 1} and len(colors) >= n\n    squares = {i ** 2: colors[i] for i in range(1, len(colors))}\n    return not any(c == d == squares.get(i + j) for i, c in squares.items() for j, d in squares.items())",
    "sols": [
      "def sol(n=3):\n    sqrt = {i * i: i for i in range(1, n)}\n    trips = [(sqrt[i], sqrt[j], sqrt[i + j]) for i in sqrt for j in sqrt if i < j and i + j in sqrt]\n    import random\n    random.seed(0)\n    sol = [random.randrange(2) for _ in range(n)]\n    done = False\n    while not done:\n        done = True\n        random.shuffle(trips)\n        for i, j, k in trips:\n            if sol[i] == sol[j] == sol[k]:\n                done = False\n                sol[random.choice([i, j, k])] = 1 - sol[i]\n    return sol"
    ],
    "module": "classic_puzzles",
    "notes": "[Boolean Pythagorean Triples Problem](https://en.wikipedia.org/wiki/Boolean_Pythagorean_triples_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "BooleanPythagoreanTriples_6",
    "sat": "def sat(colors: List[int], n=4):\n    \"\"\"\n    Color the first n integers with one of two colors so that there is no monochromatic Pythagorean triple.\n    A monochromatic Pythagorean triple is a triple of numbers i, j, k such that i^2 + j^2 = k^2 that\n    are all assigned the same color. The input, colors, is a list of 0/1 colors of length >= n.\n    \"\"\"\n    assert set(colors) <= {0, 1} and len(colors) >= n\n    squares = {i ** 2: colors[i] for i in range(1, len(colors))}\n    return not any(c == d == squares.get(i + j) for i, c in squares.items() for j, d in squares.items())",
    "sols": [
      "def sol(n=4):\n    sqrt = {i * i: i for i in range(1, n)}\n    trips = [(sqrt[i], sqrt[j], sqrt[i + j]) for i in sqrt for j in sqrt if i < j and i + j in sqrt]\n    import random\n    random.seed(0)\n    sol = [random.randrange(2) for _ in range(n)]\n    done = False\n    while not done:\n        done = True\n        random.shuffle(trips)\n        for i, j, k in trips:\n            if sol[i] == sol[j] == sol[k]:\n                done = False\n                sol[random.choice([i, j, k])] = 1 - sol[i]\n    return sol"
    ],
    "module": "classic_puzzles",
    "notes": "[Boolean Pythagorean Triples Problem](https://en.wikipedia.org/wiki/Boolean_Pythagorean_triples_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "BooleanPythagoreanTriples_7",
    "sat": "def sat(colors: List[int], n=5):\n    \"\"\"\n    Color the first n integers with one of two colors so that there is no monochromatic Pythagorean triple.\n    A monochromatic Pythagorean triple is a triple of numbers i, j, k such that i^2 + j^2 = k^2 that\n    are all assigned the same color. The input, colors, is a list of 0/1 colors of length >= n.\n    \"\"\"\n    assert set(colors) <= {0, 1} and len(colors) >= n\n    squares = {i ** 2: colors[i] for i in range(1, len(colors))}\n    return not any(c == d == squares.get(i + j) for i, c in squares.items() for j, d in squares.items())",
    "sols": [
      "def sol(n=5):\n    sqrt = {i * i: i for i in range(1, n)}\n    trips = [(sqrt[i], sqrt[j], sqrt[i + j]) for i in sqrt for j in sqrt if i < j and i + j in sqrt]\n    import random\n    random.seed(0)\n    sol = [random.randrange(2) for _ in range(n)]\n    done = False\n    while not done:\n        done = True\n        random.shuffle(trips)\n        for i, j, k in trips:\n            if sol[i] == sol[j] == sol[k]:\n                done = False\n                sol[random.choice([i, j, k])] = 1 - sol[i]\n    return sol"
    ],
    "module": "classic_puzzles",
    "notes": "[Boolean Pythagorean Triples Problem](https://en.wikipedia.org/wiki/Boolean_Pythagorean_triples_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "BooleanPythagoreanTriples_8",
    "sat": "def sat(colors: List[int], n=6):\n    \"\"\"\n    Color the first n integers with one of two colors so that there is no monochromatic Pythagorean triple.\n    A monochromatic Pythagorean triple is a triple of numbers i, j, k such that i^2 + j^2 = k^2 that\n    are all assigned the same color. The input, colors, is a list of 0/1 colors of length >= n.\n    \"\"\"\n    assert set(colors) <= {0, 1} and len(colors) >= n\n    squares = {i ** 2: colors[i] for i in range(1, len(colors))}\n    return not any(c == d == squares.get(i + j) for i, c in squares.items() for j, d in squares.items())",
    "sols": [
      "def sol(n=6):\n    sqrt = {i * i: i for i in range(1, n)}\n    trips = [(sqrt[i], sqrt[j], sqrt[i + j]) for i in sqrt for j in sqrt if i < j and i + j in sqrt]\n    import random\n    random.seed(0)\n    sol = [random.randrange(2) for _ in range(n)]\n    done = False\n    while not done:\n        done = True\n        random.shuffle(trips)\n        for i, j, k in trips:\n            if sol[i] == sol[j] == sol[k]:\n                done = False\n                sol[random.choice([i, j, k])] = 1 - sol[i]\n    return sol"
    ],
    "module": "classic_puzzles",
    "notes": "[Boolean Pythagorean Triples Problem](https://en.wikipedia.org/wiki/Boolean_Pythagorean_triples_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "BooleanPythagoreanTriples_9",
    "sat": "def sat(colors: List[int], n=7):\n    \"\"\"\n    Color the first n integers with one of two colors so that there is no monochromatic Pythagorean triple.\n    A monochromatic Pythagorean triple is a triple of numbers i, j, k such that i^2 + j^2 = k^2 that\n    are all assigned the same color. The input, colors, is a list of 0/1 colors of length >= n.\n    \"\"\"\n    assert set(colors) <= {0, 1} and len(colors) >= n\n    squares = {i ** 2: colors[i] for i in range(1, len(colors))}\n    return not any(c == d == squares.get(i + j) for i, c in squares.items() for j, d in squares.items())",
    "sols": [
      "def sol(n=7):\n    sqrt = {i * i: i for i in range(1, n)}\n    trips = [(sqrt[i], sqrt[j], sqrt[i + j]) for i in sqrt for j in sqrt if i < j and i + j in sqrt]\n    import random\n    random.seed(0)\n    sol = [random.randrange(2) for _ in range(n)]\n    done = False\n    while not done:\n        done = True\n        random.shuffle(trips)\n        for i, j, k in trips:\n            if sol[i] == sol[j] == sol[k]:\n                done = False\n                sol[random.choice([i, j, k])] = 1 - sol[i]\n    return sol"
    ],
    "module": "classic_puzzles",
    "notes": "[Boolean Pythagorean Triples Problem](https://en.wikipedia.org/wiki/Boolean_Pythagorean_triples_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ClockAngle_0",
    "sat": "def sat(hands: List[int], target_angle=45):\n    \"\"\"Find clock hands = [hour, min] such that the angle is target_angle degrees.\"\"\"\n    hour, min = hands\n    return 0 < hour <= 12 and 0 <= min < 60 and ((60 * hour + min) - 12 * min) % 720 == 2 * target_angle",
    "sols": [
      "def sol(target_angle=45):\n    for hour in range(1, 13):\n        for min in range(60):\n            if ((60 * hour + min) - 12 * min) % 720 == 2 * target_angle:\n                return [hour, min]"
    ],
    "module": "classic_puzzles",
    "notes": "[Clock Angle Problem](https://en.wikipedia.org/wiki/Clock_angle_problem), easy variant",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ClockAngle_1",
    "sat": "def sat(hands: List[int], target_angle=30):\n    \"\"\"Find clock hands = [hour, min] such that the angle is target_angle degrees.\"\"\"\n    hour, min = hands\n    return 0 < hour <= 12 and 0 <= min < 60 and ((60 * hour + min) - 12 * min) % 720 == 2 * target_angle",
    "sols": [
      "def sol(target_angle=30):\n    for hour in range(1, 13):\n        for min in range(60):\n            if ((60 * hour + min) - 12 * min) % 720 == 2 * target_angle:\n                return [hour, min]"
    ],
    "module": "classic_puzzles",
    "notes": "[Clock Angle Problem](https://en.wikipedia.org/wiki/Clock_angle_problem), easy variant",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ClockAngle_2",
    "sat": "def sat(hands: List[int], target_angle=19):\n    \"\"\"Find clock hands = [hour, min] such that the angle is target_angle degrees.\"\"\"\n    hour, min = hands\n    return 0 < hour <= 12 and 0 <= min < 60 and ((60 * hour + min) - 12 * min) % 720 == 2 * target_angle",
    "sols": [
      "def sol(target_angle=19):\n    for hour in range(1, 13):\n        for min in range(60):\n            if ((60 * hour + min) - 12 * min) % 720 == 2 * target_angle:\n                return [hour, min]"
    ],
    "module": "classic_puzzles",
    "notes": "[Clock Angle Problem](https://en.wikipedia.org/wiki/Clock_angle_problem), easy variant",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ClockAngle_3",
    "sat": "def sat(hands: List[int], target_angle=8):\n    \"\"\"Find clock hands = [hour, min] such that the angle is target_angle degrees.\"\"\"\n    hour, min = hands\n    return 0 < hour <= 12 and 0 <= min < 60 and ((60 * hour + min) - 12 * min) % 720 == 2 * target_angle",
    "sols": [
      "def sol(target_angle=8):\n    for hour in range(1, 13):\n        for min in range(60):\n            if ((60 * hour + min) - 12 * min) % 720 == 2 * target_angle:\n                return [hour, min]"
    ],
    "module": "classic_puzzles",
    "notes": "[Clock Angle Problem](https://en.wikipedia.org/wiki/Clock_angle_problem), easy variant",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ClockAngle_4",
    "sat": "def sat(hands: List[int], target_angle=357):\n    \"\"\"Find clock hands = [hour, min] such that the angle is target_angle degrees.\"\"\"\n    hour, min = hands\n    return 0 < hour <= 12 and 0 <= min < 60 and ((60 * hour + min) - 12 * min) % 720 == 2 * target_angle",
    "sols": [
      "def sol(target_angle=357):\n    for hour in range(1, 13):\n        for min in range(60):\n            if ((60 * hour + min) - 12 * min) % 720 == 2 * target_angle:\n                return [hour, min]"
    ],
    "module": "classic_puzzles",
    "notes": "[Clock Angle Problem](https://en.wikipedia.org/wiki/Clock_angle_problem), easy variant",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ClockAngle_5",
    "sat": "def sat(hands: List[int], target_angle=346):\n    \"\"\"Find clock hands = [hour, min] such that the angle is target_angle degrees.\"\"\"\n    hour, min = hands\n    return 0 < hour <= 12 and 0 <= min < 60 and ((60 * hour + min) - 12 * min) % 720 == 2 * target_angle",
    "sols": [
      "def sol(target_angle=346):\n    for hour in range(1, 13):\n        for min in range(60):\n            if ((60 * hour + min) - 12 * min) % 720 == 2 * target_angle:\n                return [hour, min]"
    ],
    "module": "classic_puzzles",
    "notes": "[Clock Angle Problem](https://en.wikipedia.org/wiki/Clock_angle_problem), easy variant",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ClockAngle_6",
    "sat": "def sat(hands: List[int], target_angle=335):\n    \"\"\"Find clock hands = [hour, min] such that the angle is target_angle degrees.\"\"\"\n    hour, min = hands\n    return 0 < hour <= 12 and 0 <= min < 60 and ((60 * hour + min) - 12 * min) % 720 == 2 * target_angle",
    "sols": [
      "def sol(target_angle=335):\n    for hour in range(1, 13):\n        for min in range(60):\n            if ((60 * hour + min) - 12 * min) % 720 == 2 * target_angle:\n                return [hour, min]"
    ],
    "module": "classic_puzzles",
    "notes": "[Clock Angle Problem](https://en.wikipedia.org/wiki/Clock_angle_problem), easy variant",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ClockAngle_7",
    "sat": "def sat(hands: List[int], target_angle=324):\n    \"\"\"Find clock hands = [hour, min] such that the angle is target_angle degrees.\"\"\"\n    hour, min = hands\n    return 0 < hour <= 12 and 0 <= min < 60 and ((60 * hour + min) - 12 * min) % 720 == 2 * target_angle",
    "sols": [
      "def sol(target_angle=324):\n    for hour in range(1, 13):\n        for min in range(60):\n            if ((60 * hour + min) - 12 * min) % 720 == 2 * target_angle:\n                return [hour, min]"
    ],
    "module": "classic_puzzles",
    "notes": "[Clock Angle Problem](https://en.wikipedia.org/wiki/Clock_angle_problem), easy variant",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ClockAngle_8",
    "sat": "def sat(hands: List[int], target_angle=313):\n    \"\"\"Find clock hands = [hour, min] such that the angle is target_angle degrees.\"\"\"\n    hour, min = hands\n    return 0 < hour <= 12 and 0 <= min < 60 and ((60 * hour + min) - 12 * min) % 720 == 2 * target_angle",
    "sols": [
      "def sol(target_angle=313):\n    for hour in range(1, 13):\n        for min in range(60):\n            if ((60 * hour + min) - 12 * min) % 720 == 2 * target_angle:\n                return [hour, min]"
    ],
    "module": "classic_puzzles",
    "notes": "[Clock Angle Problem](https://en.wikipedia.org/wiki/Clock_angle_problem), easy variant",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ClockAngle_9",
    "sat": "def sat(hands: List[int], target_angle=302):\n    \"\"\"Find clock hands = [hour, min] such that the angle is target_angle degrees.\"\"\"\n    hour, min = hands\n    return 0 < hour <= 12 and 0 <= min < 60 and ((60 * hour + min) - 12 * min) % 720 == 2 * target_angle",
    "sols": [
      "def sol(target_angle=302):\n    for hour in range(1, 13):\n        for min in range(60):\n            if ((60 * hour + min) - 12 * min) % 720 == 2 * target_angle:\n                return [hour, min]"
    ],
    "module": "classic_puzzles",
    "notes": "[Clock Angle Problem](https://en.wikipedia.org/wiki/Clock_angle_problem), easy variant",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "Kirkman_0",
    "sat": "def sat(daygroups: List[List[List[int]]]):\n    \"\"\"\n    Arrange 15 people into groups of 3 each day for seven days so that no two people are in the same group twice.\n    \"\"\"\n    assert len(daygroups) == 7\n    assert all(len(groups) == 5 and {i for g in groups for i in g} == set(range(15)) for groups in daygroups)\n    assert all(len(g) == 3 for groups in daygroups for g in groups)\n    return len({(i, j) for groups in daygroups for g in groups for i in g for j in g}) == 15 * 15",
    "sols": [
      "def sol():\n    from itertools import combinations\n    import random\n    rand = random.Random(0)\n    days = [[list(range(15)) for _2 in range(2)] for _ in range(7)]  # each day is pi, inv\n    counts = {(i, j): (7 if j in range(k, k + 3) else 0)\n              for k in range(0, 15, 3)\n              for i in range(k, k + 3)\n              for j in range(15) if j != i\n              }\n\n    todos = [pair for pair, count in counts.items() if count == 0]\n    while True:\n        pair = rand.choice(todos)  # choose i and j to make next to each other on some day\n        if rand.randrange(2):\n            pair = pair[::-1]\n\n        a, u = pair\n        pi, inv = rand.choice(days)\n        assert pi[inv[a]] == a and pi[inv[u]] == u\n        bases = [3 * (inv[i] // 3) for i in pair]\n        (b, c), (v, w) = [[x for x in pi[b: b + 3] if x != i] for i, b in zip(pair, bases)]\n        if rand.randrange(2):\n            b, c, = c, b\n        # current (a, b, c) (u, v, w). consider swap of u with b to make (a, u, c) (b, v, w)\n\n        new_pairs = [(a, u), (c, u), (b, v), (b, w)]\n        old_pairs = [(u, v), (u, w), (b, a), (b, c)]\n        gained = sum(counts[p] == 0 for p in new_pairs)\n        lost = sum(counts[p] == 1 for p in old_pairs)\n        if rand.random() <= 100 ** (gained - lost):\n            for p in new_pairs:\n                counts[p] += 1\n                counts[p[::-1]] += 1\n            for p in old_pairs:\n                counts[p] -= 1\n                counts[p[::-1]] -= 1\n            pi[inv[b]], pi[inv[u]], inv[b], inv[u] = u, b, inv[u], inv[b]\n            todos = [pair for pair, count in counts.items() if count == 0]\n            if len(todos) == 0:\n                return [[pi[k:k + 3] for k in range(0, 15, 3)] for pi, _inv in days]"
    ],
    "module": "classic_puzzles",
    "notes": "[Kirkman's problem](https://en.wikipedia.org/wiki/Kirkman%27s_schoolgirl_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.045454545454545456
  },
  {
    "name": "MonkeyAndCoconuts_0",
    "sat": "def sat(n: int):\n    \"\"\"\n    Find the number of coconuts to solve the following riddle:\n        There is a pile of coconuts, owned by five men. One man divides the pile into five equal piles, giving the\n        one left over coconut to a passing monkey, and takes away his own share. The second man then repeats the\n        procedure, dividing the remaining pile into five and taking away his share, as do the third, fourth, and\n        fifth, each of them finding one coconut left over when dividing the pile by five, and giving it to a monkey.\n        Finally, the group divide the remaining coconuts into five equal piles: this time no coconuts are left over.\n        How many coconuts were there in the original pile?\n                                          Quoted from https://en.wikipedia.org/wiki/The_monkey_and_the_coconuts\n    \"\"\"\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1",
    "sols": [
      "def sol():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5"
    ],
    "module": "classic_puzzles",
    "notes": "[The Monkey and the Coconuts](https://en.wikipedia.org/wiki/The_monkey_and_the_coconuts)",
    "taint_date": "2021-4-26",
    "weight": 0.045454545454545456
  },
  {
    "name": "No3Colinear_0",
    "sat": "def sat(coords: List[List[int]], side=10, num_points=20):\n    \"\"\"Find num_points points in an side x side grid such that no three points are collinear.\"\"\"\n    for i1 in range(len(coords)):\n        x1, y1 = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            x2, y2 = coords[i2]\n            for i3 in range(i2):\n                x3, y3 = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for a, b in coords}) == len(coords) >= num_points",
    "sols": [
      "def sol(side=10, num_points=20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))"
    ],
    "module": "classic_puzzles",
    "notes": "[No three-in-a-line](https://en.wikipedia.org/wiki/No-three-in-line_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "No3Colinear_1",
    "sat": "def sat(coords: List[List[int]], side=0, num_points=0):\n    \"\"\"Find num_points points in an side x side grid such that no three points are collinear.\"\"\"\n    for i1 in range(len(coords)):\n        x1, y1 = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            x2, y2 = coords[i2]\n            for i3 in range(i2):\n                x3, y3 = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for a, b in coords}) == len(coords) >= num_points",
    "sols": [
      "def sol(side=0, num_points=0):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))"
    ],
    "module": "classic_puzzles",
    "notes": "[No three-in-a-line](https://en.wikipedia.org/wiki/No-three-in-line_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "No3Colinear_2",
    "sat": "def sat(coords: List[List[int]], side=1, num_points=1):\n    \"\"\"Find num_points points in an side x side grid such that no three points are collinear.\"\"\"\n    for i1 in range(len(coords)):\n        x1, y1 = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            x2, y2 = coords[i2]\n            for i3 in range(i2):\n                x3, y3 = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for a, b in coords}) == len(coords) >= num_points",
    "sols": [
      "def sol(side=1, num_points=1):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))"
    ],
    "module": "classic_puzzles",
    "notes": "[No three-in-a-line](https://en.wikipedia.org/wiki/No-three-in-line_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "No3Colinear_3",
    "sat": "def sat(coords: List[List[int]], side=2, num_points=4):\n    \"\"\"Find num_points points in an side x side grid such that no three points are collinear.\"\"\"\n    for i1 in range(len(coords)):\n        x1, y1 = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            x2, y2 = coords[i2]\n            for i3 in range(i2):\n                x3, y3 = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for a, b in coords}) == len(coords) >= num_points",
    "sols": [
      "def sol(side=2, num_points=4):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))"
    ],
    "module": "classic_puzzles",
    "notes": "[No three-in-a-line](https://en.wikipedia.org/wiki/No-three-in-line_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "No3Colinear_4",
    "sat": "def sat(coords: List[List[int]], side=3, num_points=6):\n    \"\"\"Find num_points points in an side x side grid such that no three points are collinear.\"\"\"\n    for i1 in range(len(coords)):\n        x1, y1 = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            x2, y2 = coords[i2]\n            for i3 in range(i2):\n                x3, y3 = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for a, b in coords}) == len(coords) >= num_points",
    "sols": [
      "def sol(side=3, num_points=6):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))"
    ],
    "module": "classic_puzzles",
    "notes": "[No three-in-a-line](https://en.wikipedia.org/wiki/No-three-in-line_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "No3Colinear_5",
    "sat": "def sat(coords: List[List[int]], side=4, num_points=8):\n    \"\"\"Find num_points points in an side x side grid such that no three points are collinear.\"\"\"\n    for i1 in range(len(coords)):\n        x1, y1 = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            x2, y2 = coords[i2]\n            for i3 in range(i2):\n                x3, y3 = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for a, b in coords}) == len(coords) >= num_points",
    "sols": [
      "def sol(side=4, num_points=8):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))"
    ],
    "module": "classic_puzzles",
    "notes": "[No three-in-a-line](https://en.wikipedia.org/wiki/No-three-in-line_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "No3Colinear_6",
    "sat": "def sat(coords: List[List[int]], side=5, num_points=10):\n    \"\"\"Find num_points points in an side x side grid such that no three points are collinear.\"\"\"\n    for i1 in range(len(coords)):\n        x1, y1 = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            x2, y2 = coords[i2]\n            for i3 in range(i2):\n                x3, y3 = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for a, b in coords}) == len(coords) >= num_points",
    "sols": [],
    "module": "classic_puzzles",
    "notes": "[No three-in-a-line](https://en.wikipedia.org/wiki/No-three-in-line_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "No3Colinear_7",
    "sat": "def sat(coords: List[List[int]], side=6, num_points=12):\n    \"\"\"Find num_points points in an side x side grid such that no three points are collinear.\"\"\"\n    for i1 in range(len(coords)):\n        x1, y1 = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            x2, y2 = coords[i2]\n            for i3 in range(i2):\n                x3, y3 = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for a, b in coords}) == len(coords) >= num_points",
    "sols": [],
    "module": "classic_puzzles",
    "notes": "[No three-in-a-line](https://en.wikipedia.org/wiki/No-three-in-line_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "No3Colinear_8",
    "sat": "def sat(coords: List[List[int]], side=7, num_points=14):\n    \"\"\"Find num_points points in an side x side grid such that no three points are collinear.\"\"\"\n    for i1 in range(len(coords)):\n        x1, y1 = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            x2, y2 = coords[i2]\n            for i3 in range(i2):\n                x3, y3 = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for a, b in coords}) == len(coords) >= num_points",
    "sols": [],
    "module": "classic_puzzles",
    "notes": "[No three-in-a-line](https://en.wikipedia.org/wiki/No-three-in-line_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "No3Colinear_9",
    "sat": "def sat(coords: List[List[int]], side=8, num_points=16):\n    \"\"\"Find num_points points in an side x side grid such that no three points are collinear.\"\"\"\n    for i1 in range(len(coords)):\n        x1, y1 = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            x2, y2 = coords[i2]\n            for i3 in range(i2):\n                x3, y3 = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for a, b in coords}) == len(coords) >= num_points",
    "sols": [],
    "module": "classic_puzzles",
    "notes": "[No three-in-a-line](https://en.wikipedia.org/wiki/No-three-in-line_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PostageStamp_0",
    "sat": "def sat(stamps: List[int], target=80, max_stamps=4, options=[10, 32, 8]):\n    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target",
    "sols": [
      "def sol(target=80, max_stamps=4, options=[10, 32, 8]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)"
    ],
    "module": "classic_puzzles",
    "notes": "[Postage stamp problem](https://en.wikipedia.org/wiki/Postage_stamp_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PostageStamp_1",
    "sat": "def sat(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]):\n    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target",
    "sols": [
      "def sol(target=271, max_stamps=8, options=[37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)"
    ],
    "module": "classic_puzzles",
    "notes": "[Postage stamp problem](https://en.wikipedia.org/wiki/Postage_stamp_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PostageStamp_2",
    "sat": "def sat(stamps: List[int], target=3, max_stamps=3, options=[18, 1, 43, 81]):\n    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target",
    "sols": [
      "def sol(target=3, max_stamps=3, options=[18, 1, 43, 81]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)"
    ],
    "module": "classic_puzzles",
    "notes": "[Postage stamp problem](https://en.wikipedia.org/wiki/Postage_stamp_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PostageStamp_3",
    "sat": "def sat(stamps: List[int], target=19, max_stamps=2, options=[19, 14, 81]):\n    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target",
    "sols": [
      "def sol(target=19, max_stamps=2, options=[19, 14, 81]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)"
    ],
    "module": "classic_puzzles",
    "notes": "[Postage stamp problem](https://en.wikipedia.org/wiki/Postage_stamp_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PostageStamp_4",
    "sat": "def sat(stamps: List[int], target=56, max_stamps=1, options=[25, 22, 8, 84, 60, 56, 54, 7, 8]):\n    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target",
    "sols": [
      "def sol(target=56, max_stamps=1, options=[25, 22, 8, 84, 60, 56, 54, 7, 8]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)"
    ],
    "module": "classic_puzzles",
    "notes": "[Postage stamp problem](https://en.wikipedia.org/wiki/Postage_stamp_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PostageStamp_5",
    "sat": "def sat(stamps: List[int], target=61, max_stamps=9, options=[23, 10, 38, 70, 23]):\n    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target",
    "sols": [
      "def sol(target=61, max_stamps=9, options=[23, 10, 38, 70, 23]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)"
    ],
    "module": "classic_puzzles",
    "notes": "[Postage stamp problem](https://en.wikipedia.org/wiki/Postage_stamp_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PostageStamp_6",
    "sat": "def sat(stamps: List[int], target=531, max_stamps=9, options=[70, 52, 32, 78, 93, 90, 38, 68]):\n    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target",
    "sols": [
      "def sol(target=531, max_stamps=9, options=[70, 52, 32, 78, 93, 90, 38, 68]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)"
    ],
    "module": "classic_puzzles",
    "notes": "[Postage stamp problem](https://en.wikipedia.org/wiki/Postage_stamp_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PostageStamp_7",
    "sat": "def sat(stamps: List[int], target=70, max_stamps=5, options=[70, 63, 29, 17, 39, 62, 11]):\n    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target",
    "sols": [
      "def sol(target=70, max_stamps=5, options=[70, 63, 29, 17, 39, 62, 11]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)"
    ],
    "module": "classic_puzzles",
    "notes": "[Postage stamp problem](https://en.wikipedia.org/wiki/Postage_stamp_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PostageStamp_8",
    "sat": "def sat(stamps: List[int], target=20, max_stamps=2, options=[9, 89, 46, 56, 27, 20, 78, 26]):\n    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target",
    "sols": [
      "def sol(target=20, max_stamps=2, options=[9, 89, 46, 56, 27, 20, 78, 26]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)"
    ],
    "module": "classic_puzzles",
    "notes": "[Postage stamp problem](https://en.wikipedia.org/wiki/Postage_stamp_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PostageStamp_9",
    "sat": "def sat(stamps: List[int], target=75, max_stamps=1, options=[75, 55, 27, 99, 61, 67, 27, 40]):\n    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target",
    "sols": [
      "def sol(target=75, max_stamps=1, options=[75, 55, 27, 99, 61, 67, 27, 40]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)"
    ],
    "module": "classic_puzzles",
    "notes": "[Postage stamp problem](https://en.wikipedia.org/wiki/Postage_stamp_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SquaringTheSquare_0",
    "sat": "def sat(xy_sides: List[List[int]]):\n    \"\"\"\n    Partition a square into smaller squares with unique side lengths. A perfect squared path has distinct sides.\n    xy_sides is a List of (x, y, side)\n    \"\"\"\n    n = max(x + side for x, y, side in xy_sides)\n    assert len({side for x, y, side in xy_sides}) == len(xy_sides) > 1\n    for x, y, s in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for x2, y2, s2 in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or y2 >= y + s or y2 + s2 <= y\n\n    return sum(side ** 2 for x, y, side in xy_sides) == n ** 2",
    "sols": [
      "def sol():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]"
    ],
    "module": "classic_puzzles",
    "notes": "[Squaring the square](https://en.wikipedia.org/wiki/Squaring_the_square)\nWikipedia gives a minimal [solution with 21 squares](https://en.wikipedia.org/wiki/Squaring_the_square)\ndue to Duijvestijn (1978):\n```python\n[[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\n```",
    "taint_date": "2021-4-26",
    "weight": 0.045454545454545456
  },
  {
    "name": "NecklaceSplit_0",
    "sat": "def sat(n: int, lace=\"bbbbrrbrbrbbrrrr\"):\n    \"\"\"\n    Find a split dividing the given red/blue necklace in half at n so that each piece has an equal number of\n    reds and blues.\n    \"\"\"\n    sub = lace[n: n + len(lace) // 2]\n    return n >= 0 and lace.count(\"r\") == 2 * sub.count(\"r\") and lace.count(\"b\") == 2 * sub.count(\"b\")",
    "sols": [
      "def sol(lace=\"bbbbrrbrbrbbrrrr\"):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)"
    ],
    "module": "classic_puzzles",
    "notes": "[Necklace Splitting Problem](https://en.wikipedia.org/wiki/Necklace_splitting_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "NecklaceSplit_1",
    "sat": "def sat(n: int, lace=\"rbbrrbbrbrbbbrrrbbrbrbrrbbrbbbbbbrrrrrrrrbrrrbbrbrrbbbrbbrrrbbrbbrrbrrbrbbrbbbbbbrbbbrbrbrrbrbbrbrrbbrrbrrbrrbrrbrbrbrrrbbrbrbbrrbbbbrrrrrbbrbrbrrbr\"):\n    \"\"\"\n    Find a split dividing the given red/blue necklace in half at n so that each piece has an equal number of\n    reds and blues.\n    \"\"\"\n    sub = lace[n: n + len(lace) // 2]\n    return n >= 0 and lace.count(\"r\") == 2 * sub.count(\"r\") and lace.count(\"b\") == 2 * sub.count(\"b\")",
    "sols": [
      "def sol(lace=\"rbbrrbbrbrbbbrrrbbrbrbrrbbrbbbbbbrrrrrrrrbrrrbbrbrrbbbrbbrrrbbrbbrrbrrbrbbrbbbbbbrbbbrbrbrrbrbbrbrrbbrrbrrbrrbrrbrbrbrrrbbrbrbbrrbbbbrrrrrbbrbrbrrbr\"):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)"
    ],
    "module": "classic_puzzles",
    "notes": "[Necklace Splitting Problem](https://en.wikipedia.org/wiki/Necklace_splitting_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "NecklaceSplit_2",
    "sat": "def sat(n: int, lace=\"brrrbrrbrbbbbbrrbbrr\"):\n    \"\"\"\n    Find a split dividing the given red/blue necklace in half at n so that each piece has an equal number of\n    reds and blues.\n    \"\"\"\n    sub = lace[n: n + len(lace) // 2]\n    return n >= 0 and lace.count(\"r\") == 2 * sub.count(\"r\") and lace.count(\"b\") == 2 * sub.count(\"b\")",
    "sols": [
      "def sol(lace=\"brrrbrrbrbbbbbrrbbrr\"):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)"
    ],
    "module": "classic_puzzles",
    "notes": "[Necklace Splitting Problem](https://en.wikipedia.org/wiki/Necklace_splitting_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "NecklaceSplit_3",
    "sat": "def sat(n: int, lace=\"bbbbrrbbbbrrbbrrrbbrrbbrrrrrrrbrbrbbbrrbrrrbbbbbbbrbrbrbbbbbbbrrbbrbbrbrrbrbrrbbbrrrrrbrrbbrrrbbrbrrrbbbbrbbbrrrrbrbrrbbrbrbrbbrrbrrrbrbrrbbbbbbrbrrrrbbrbbbrbrrbrbbrbrrbbbbrrrrrbrrrbbrrrrrrbrrrbrbbbrbbbrrrbbr\"):\n    \"\"\"\n    Find a split dividing the given red/blue necklace in half at n so that each piece has an equal number of\n    reds and blues.\n    \"\"\"\n    sub = lace[n: n + len(lace) // 2]\n    return n >= 0 and lace.count(\"r\") == 2 * sub.count(\"r\") and lace.count(\"b\") == 2 * sub.count(\"b\")",
    "sols": [
      "def sol(lace=\"bbbbrrbbbbrrbbrrrbbrrbbrrrrrrrbrbrbbbrrbrrrbbbbbbbrbrbrbbbbbbbrrbbrbbrbrrbrbrrbbbrrrrrbrrbbrrrbbrbrrrbbbbrbbbrrrrbrbrrbbrbrbrbbrrbrrrbrbrrbbbbbbrbrrrrbbrbbbrbrrbrbbrbrrbbbbrrrrrbrrrbbrrrrrrbrrrbrbbbrbbbrrrbbr\"):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)"
    ],
    "module": "classic_puzzles",
    "notes": "[Necklace Splitting Problem](https://en.wikipedia.org/wiki/Necklace_splitting_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "NecklaceSplit_4",
    "sat": "def sat(n: int, lace=\"brrbbbrbbrrbrrbbrrbrrrbbrbbrrrbrbrbrrrrbbrrrbrrbbbbrbbbrrbbrrrbbrbrbbbbbrrbrrbbr\"):\n    \"\"\"\n    Find a split dividing the given red/blue necklace in half at n so that each piece has an equal number of\n    reds and blues.\n    \"\"\"\n    sub = lace[n: n + len(lace) // 2]\n    return n >= 0 and lace.count(\"r\") == 2 * sub.count(\"r\") and lace.count(\"b\") == 2 * sub.count(\"b\")",
    "sols": [
      "def sol(lace=\"brrbbbrbbrrbrrbbrrbrrrbbrbbrrrbrbrbrrrrbbrrrbrrbbbbrbbbrrbbrrrbbrbrbbbbbrrbrrbbr\"):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)"
    ],
    "module": "classic_puzzles",
    "notes": "[Necklace Splitting Problem](https://en.wikipedia.org/wiki/Necklace_splitting_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "NecklaceSplit_5",
    "sat": "def sat(n: int, lace=\"rrbrbrbbrbrrbbrbbrrrbbrb\"):\n    \"\"\"\n    Find a split dividing the given red/blue necklace in half at n so that each piece has an equal number of\n    reds and blues.\n    \"\"\"\n    sub = lace[n: n + len(lace) // 2]\n    return n >= 0 and lace.count(\"r\") == 2 * sub.count(\"r\") and lace.count(\"b\") == 2 * sub.count(\"b\")",
    "sols": [
      "def sol(lace=\"rrbrbrbbrbrrbbrbbrrrbbrb\"):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)"
    ],
    "module": "classic_puzzles",
    "notes": "[Necklace Splitting Problem](https://en.wikipedia.org/wiki/Necklace_splitting_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "NecklaceSplit_6",
    "sat": "def sat(n: int, lace=\"brrrrbrrbbrrbrbbbrbb\"):\n    \"\"\"\n    Find a split dividing the given red/blue necklace in half at n so that each piece has an equal number of\n    reds and blues.\n    \"\"\"\n    sub = lace[n: n + len(lace) // 2]\n    return n >= 0 and lace.count(\"r\") == 2 * sub.count(\"r\") and lace.count(\"b\") == 2 * sub.count(\"b\")",
    "sols": [
      "def sol(lace=\"brrrrbrrbbrrbrbbbrbb\"):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)"
    ],
    "module": "classic_puzzles",
    "notes": "[Necklace Splitting Problem](https://en.wikipedia.org/wiki/Necklace_splitting_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "NecklaceSplit_7",
    "sat": "def sat(n: int, lace=\"brrrbbbr\"):\n    \"\"\"\n    Find a split dividing the given red/blue necklace in half at n so that each piece has an equal number of\n    reds and blues.\n    \"\"\"\n    sub = lace[n: n + len(lace) // 2]\n    return n >= 0 and lace.count(\"r\") == 2 * sub.count(\"r\") and lace.count(\"b\") == 2 * sub.count(\"b\")",
    "sols": [
      "def sol(lace=\"brrrbbbr\"):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)"
    ],
    "module": "classic_puzzles",
    "notes": "[Necklace Splitting Problem](https://en.wikipedia.org/wiki/Necklace_splitting_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "NecklaceSplit_8",
    "sat": "def sat(n: int, lace=\"rrbbbrbrbrrrbrbrbrrrrbrbbbbb\"):\n    \"\"\"\n    Find a split dividing the given red/blue necklace in half at n so that each piece has an equal number of\n    reds and blues.\n    \"\"\"\n    sub = lace[n: n + len(lace) // 2]\n    return n >= 0 and lace.count(\"r\") == 2 * sub.count(\"r\") and lace.count(\"b\") == 2 * sub.count(\"b\")",
    "sols": [
      "def sol(lace=\"rrbbbrbrbrrrbrbrbrrrrbrbbbbb\"):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)"
    ],
    "module": "classic_puzzles",
    "notes": "[Necklace Splitting Problem](https://en.wikipedia.org/wiki/Necklace_splitting_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "NecklaceSplit_9",
    "sat": "def sat(n: int, lace=\"rbbrbbbrbrrrrbbrbrrrbrrrrrbbbrbbrrrrrrrrbbrbbbbrbbbrbrrrbbrbrrrbbbbrrrbrrbrrrrrrbbrrbbbbrrrrrrbrbrbrrrrbbrrrbbbrbbrbbbbbbrbbbrbbbbrrbbrrrrrbbrbbbrrrrrbbrrbbrbrrrbbrbbrbbrrrrbbrbrrbrbbbrbbbrrrrbbrbbbrbrrbrbrbrbrrbrbbbrbbrrbrrrbbrrbrrbbbrrbbbrbrbrrbbrbrbbrrbbbbbrrrbbrbrbrbrbbrrbrbrbrrrrbrrrrbrbrrrrrrbrrrrrrbrbbrrbbrbrbbrrbrbrbrrbbbrbbbrbbbrrbrrbbbbbrbbbbbrrbrbbrbrrbrrbbrbbrrrbbbbbbrbbbbrbbrrbbrbrrrrrrrrrrbbbbbrrbbbbrbbbrbbrbbbbbbbbrrbrbbbrrrbbbrrrbbrbrbbrrrbbrbrbbrrbbrrrbbbrbrrrbbbrbbbrbbrbbrbbrrbrbbrbbbrbrbbrrrrbrrbrbrbrrrbbrrbbrbrrrrbbbrrrrrbrbbrbbrbrbrrrbrrbbbrrrbbbrbbrrrrbrrrrbrbbbrrrbrrbbrbrbrrbrrbbbrbbrbbrbrbrrrbrbrbrrrrrrrbbrrrrbbbrrbrbbbrrrrbrbrrrrrrbrbbbbbrbbbbrbbrbbbrbbrrrbbrrbrrbrrrrrbrbbbrrbbbbbbrbbbrrrbbbbbbrbrbbbbbrrbbrbrbrbbbrrrbrbbbrrbbbbrrrbrrbbrrrrbbbrbrrrrrbrbbbbbbrbrbrbbbrrbbrrrrbbrrbrrrbbrbbrbbbrrbbbbrrbrrbbrrrrbrrbrrrrrbrbbrbbrrrbrrrrbrbbrbbrrrrrbrrbrrbrrrbrrrbrrbbbrrbbbrbbrbbrrrbbrrbbrrbrrrrbbrrrrbrbrrbbrrrrrbbrrbrbrrbrbrbbbbbbbrrbbbrrbbrrbbrbrbrrrbrrbbbbrrrbrbbbbbrbbbrbrbbrrrbrrrbbrrrbrrrrrbbrrrbbrbbrbrbrbbbbrrbbrrrbrbrrbrbrrbrbrrbbbbbbbrbbbbrbrbbbrrbrrrrrrbbrrrrbrrrrrrbrrrrrbrrrbbrrrrbbbbbrbbbbrbrrbbrrrrrbrbbbrbbbrbbrrbrrbrrrbrbrrrrbrrbbbbrbrrrbbbbrrbbbrbbbrbrrrbbrbrbbbbrbrbrbrbbrrrbbbbrbrrrrbrrbrrrbbrrbrbrrbbbrrbbbrbrbbbbrbrrbbrrrbrbrrbbbrrbrrrbbbbbrbbrrbrrbbbrbrrrrrbrrrrbrrrbrbbrbbbrrrrbrbbrbrbbrbrbrbbbrbrbbrrbrrrbrrrrrbrbbbbbbbbrrbbrrbrbbrrbrbbbbbbrbbrrbbrrrbbrrbbbrrrbrbbrrbrrrbbrbbrbrrrbrbbrbbrrrbbbbrrrrbbrrbbrbbrrbrbrrrrrrrbbrrrbrbrbbrrrbrbrrrbrbbrrrrbrrbrbrbbrbbrrrrrbbrbbrrbrrrrbrbbrrbbrrbrrrrrrrrrbrrrrbbbrrbrbbrrbrrbbbrbrbrrrbrrbbbbbbbrrrbrrrrbrbrrbbbbrbrrrrrrbrrbrrrrrbrbbrrbbrrrrbbrbbrrrbrbrbrrbrrbrrbrrbbrrbbrbbrbbrbbbbbbbrbbrrbbrrrrbbbrrrrrbrbrbbrrbbbbrrrbbbrbrrbbbrrbbrrbbrrrrbrbbrbbrrrbbbbrbbbrrbbrbbbbbbbrrrrbrbrbrrrrbrbrbbrbrbrbrbbbrrbbrrbrbrrrbbrbbbbbbrbrbbbbbbbrbbrrbbrbrrbrrbbrbrbbrbrbrbrbbrbbrrbrrbrbrbrbrbrrrbrbbrrrrrrbbrbbrbbrrrrrbbrrbbrbbrrrrbrrbbbrbbrrbrbbrbbbbbbbbbbbbrrbrrrbrbrrrrbbbbbbrbbrrrrrbbbrrbrbrrbrrbrbrrbbbrbrrbrrrrrbbbbbbrrrrbbbbbrrbbbbrrbbbrbrrrbbbbrbbbrrbrbbbbbrrbbbbrrrbrrbbrbrbrrrrrrrbbbrrrrbbrrrrbrrrbrrrbbrbbrrbbbbbrbbbrbrbrrbbbrbrbrbrrrbbrrrrrbbbbrbbrrbrrbrbbbbbrrbrbrbrbbbbbrbrrrrbbrbbrrbbbrbrbbbbrbrbrbrbbbrbbbrbrrbbrbbbrbbbrrrrbrbbrbbrrrrbbbbbbbrbbrbrbrrrbbbrrbbbrbrbrrrbbbrrbbbbbbrbbrbrbbrrrrbbrrbbbbbrrbbbbbbbrrbrbbbbrrrbbrbrrbbbbrbrbbrrbrbbrbrrrrrrbbrbbbrbrbbrbrrrrbrrbbbrbrrbbrbrbbbbrrrrbrbrbbrrbrrbrrrbbbbbrbbrbrbrbbbbbrrbrrrbbbbbrrrbbrrrrbbrbbrrbbrbrbrbrbbrbbrrrrrrbrrbrbbrbrbrbrrrbbrbrbrbbrbbrrrbrrrrbrbbbrrrrrrrbrbrbbrbrrbbbrrbbbrrbrbrbrbrrrrrrrrrbrbbrbbrrbrrbbrrrrrbrbbrbbbbbrrbrbbbbbbrbbrrbrbrbbrrrbbbrrrrrbrbrrrrrrbbrrbrbbrrrbrbrbbbrbbrbbrbrbbrrbbbbbbbbbrrbbbrrbrbbbrrbrbbrrbbrrrrbrbrrbrbbrrbbrrrbrbbrrrbrrrbrrbbbbbbbrbrrbbrrbbrbrbbrrrbbrrbrrrbbrrbrrbbrbbbrrbbrrrrrrbrrrbrbbbbbbrbrbbrrbbbbbrbbrrbrrrbbrbrrbr\"):\n    \"\"\"\n    Find a split dividing the given red/blue necklace in half at n so that each piece has an equal number of\n    reds and blues.\n    \"\"\"\n    sub = lace[n: n + len(lace) // 2]\n    return n >= 0 and lace.count(\"r\") == 2 * sub.count(\"r\") and lace.count(\"b\") == 2 * sub.count(\"b\")",
    "sols": [
      "def sol(lace=\"rbbrbbbrbrrrrbbrbrrrbrrrrrbbbrbbrrrrrrrrbbrbbbbrbbbrbrrrbbrbrrrbbbbrrrbrrbrrrrrrbbrrbbbbrrrrrrbrbrbrrrrbbrrrbbbrbbrbbbbbbrbbbrbbbbrrbbrrrrrbbrbbbrrrrrbbrrbbrbrrrbbrbbrbbrrrrbbrbrrbrbbbrbbbrrrrbbrbbbrbrrbrbrbrbrrbrbbbrbbrrbrrrbbrrbrrbbbrrbbbrbrbrrbbrbrbbrrbbbbbrrrbbrbrbrbrbbrrbrbrbrrrrbrrrrbrbrrrrrrbrrrrrrbrbbrrbbrbrbbrrbrbrbrrbbbrbbbrbbbrrbrrbbbbbrbbbbbrrbrbbrbrrbrrbbrbbrrrbbbbbbrbbbbrbbrrbbrbrrrrrrrrrrbbbbbrrbbbbrbbbrbbrbbbbbbbbrrbrbbbrrrbbbrrrbbrbrbbrrrbbrbrbbrrbbrrrbbbrbrrrbbbrbbbrbbrbbrbbrrbrbbrbbbrbrbbrrrrbrrbrbrbrrrbbrrbbrbrrrrbbbrrrrrbrbbrbbrbrbrrrbrrbbbrrrbbbrbbrrrrbrrrrbrbbbrrrbrrbbrbrbrrbrrbbbrbbrbbrbrbrrrbrbrbrrrrrrrbbrrrrbbbrrbrbbbrrrrbrbrrrrrrbrbbbbbrbbbbrbbrbbbrbbrrrbbrrbrrbrrrrrbrbbbrrbbbbbbrbbbrrrbbbbbbrbrbbbbbrrbbrbrbrbbbrrrbrbbbrrbbbbrrrbrrbbrrrrbbbrbrrrrrbrbbbbbbrbrbrbbbrrbbrrrrbbrrbrrrbbrbbrbbbrrbbbbrrbrrbbrrrrbrrbrrrrrbrbbrbbrrrbrrrrbrbbrbbrrrrrbrrbrrbrrrbrrrbrrbbbrrbbbrbbrbbrrrbbrrbbrrbrrrrbbrrrrbrbrrbbrrrrrbbrrbrbrrbrbrbbbbbbbrrbbbrrbbrrbbrbrbrrrbrrbbbbrrrbrbbbbbrbbbrbrbbrrrbrrrbbrrrbrrrrrbbrrrbbrbbrbrbrbbbbrrbbrrrbrbrrbrbrrbrbrrbbbbbbbrbbbbrbrbbbrrbrrrrrrbbrrrrbrrrrrrbrrrrrbrrrbbrrrrbbbbbrbbbbrbrrbbrrrrrbrbbbrbbbrbbrrbrrbrrrbrbrrrrbrrbbbbrbrrrbbbbrrbbbrbbbrbrrrbbrbrbbbbrbrbrbrbbrrrbbbbrbrrrrbrrbrrrbbrrbrbrrbbbrrbbbrbrbbbbrbrrbbrrrbrbrrbbbrrbrrrbbbbbrbbrrbrrbbbrbrrrrrbrrrrbrrrbrbbrbbbrrrrbrbbrbrbbrbrbrbbbrbrbbrrbrrrbrrrrrbrbbbbbbbbrrbbrrbrbbrrbrbbbbbbrbbrrbbrrrbbrrbbbrrrbrbbrrbrrrbbrbbrbrrrbrbbrbbrrrbbbbrrrrbbrrbbrbbrrbrbrrrrrrrbbrrrbrbrbbrrrbrbrrrbrbbrrrrbrrbrbrbbrbbrrrrrbbrbbrrbrrrrbrbbrrbbrrbrrrrrrrrrbrrrrbbbrrbrbbrrbrrbbbrbrbrrrbrrbbbbbbbrrrbrrrrbrbrrbbbbrbrrrrrrbrrbrrrrrbrbbrrbbrrrrbbrbbrrrbrbrbrrbrrbrrbrrbbrrbbrbbrbbrbbbbbbbrbbrrbbrrrrbbbrrrrrbrbrbbrrbbbbrrrbbbrbrrbbbrrbbrrbbrrrrbrbbrbbrrrbbbbrbbbrrbbrbbbbbbbrrrrbrbrbrrrrbrbrbbrbrbrbrbbbrrbbrrbrbrrrbbrbbbbbbrbrbbbbbbbrbbrrbbrbrrbrrbbrbrbbrbrbrbrbbrbbrrbrrbrbrbrbrbrrrbrbbrrrrrrbbrbbrbbrrrrrbbrrbbrbbrrrrbrrbbbrbbrrbrbbrbbbbbbbbbbbbrrbrrrbrbrrrrbbbbbbrbbrrrrrbbbrrbrbrrbrrbrbrrbbbrbrrbrrrrrbbbbbbrrrrbbbbbrrbbbbrrbbbrbrrrbbbbrbbbrrbrbbbbbrrbbbbrrrbrrbbrbrbrrrrrrrbbbrrrrbbrrrrbrrrbrrrbbrbbrrbbbbbrbbbrbrbrrbbbrbrbrbrrrbbrrrrrbbbbrbbrrbrrbrbbbbbrrbrbrbrbbbbbrbrrrrbbrbbrrbbbrbrbbbbrbrbrbrbbbrbbbrbrrbbrbbbrbbbrrrrbrbbrbbrrrrbbbbbbbrbbrbrbrrrbbbrrbbbrbrbrrrbbbrrbbbbbbrbbrbrbbrrrrbbrrbbbbbrrbbbbbbbrrbrbbbbrrrbbrbrrbbbbrbrbbrrbrbbrbrrrrrrbbrbbbrbrbbrbrrrrbrrbbbrbrrbbrbrbbbbrrrrbrbrbbrrbrrbrrrbbbbbrbbrbrbrbbbbbrrbrrrbbbbbrrrbbrrrrbbrbbrrbbrbrbrbrbbrbbrrrrrrbrrbrbbrbrbrbrrrbbrbrbrbbrbbrrrbrrrrbrbbbrrrrrrrbrbrbbrbrrbbbrrbbbrrbrbrbrbrrrrrrrrrbrbbrbbrrbrrbbrrrrrbrbbrbbbbbrrbrbbbbbbrbbrrbrbrbbrrrbbbrrrrrbrbrrrrrrbbrrbrbbrrrbrbrbbbrbbrbbrbrbbrrbbbbbbbbbrrbbbrrbrbbbrrbrbbrrbbrrrrbrbrrbrbbrrbbrrrbrbbrrrbrrrbrrbbbbbbbrbrrbbrrbbrbrbbrrrbbrrbrrrbbrrbrrbbrbbbrrbbrrrrrrbrrrbrbbbbbbrbrbbrrbbbbbrbbrrbrrrbbrbrrbr\"):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)"
    ],
    "module": "classic_puzzles",
    "notes": "[Necklace Splitting Problem](https://en.wikipedia.org/wiki/Necklace_splitting_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PandigitalSquare_0",
    "sat": "def sat(n: int):\n    \"\"\"Find an integer whose square has all digits 0-9 once.\"\"\"\n    s = str(n * n)\n    for i in \"0123456789\":\n        assert s.count(i) == 1\n    return True",
    "sols": [
      "def sol():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n"
    ],
    "module": "classic_puzzles",
    "notes": "[Pandigital](https://en.wikipedia.org/wiki/Pandigital_number) Square",
    "taint_date": "2021-4-26",
    "weight": 0.045454545454545456
  },
  {
    "name": "AllPandigitalSquares_0",
    "sat": "def sat(nums: List[int]):\n    \"\"\"Find all 174 integers whose 10-digit square has all digits 0-9 just once.\"\"\"\n    return [sorted([int(s) for s in str(n * n)]) for n in set(nums)] == [list(range(10))] * 174",
    "sols": [
      "def sol():\n    return [i for i in range(-10 ** 5, 10 ** 5) if sorted([int(s) for s in str(i * i)]) == list(range(10))]"
    ],
    "module": "classic_puzzles",
    "notes": "All [Pandigital](https://en.wikipedia.org/wiki/Pandigital_number) Squares",
    "taint_date": "2021-4-26",
    "weight": 0.045454545454545456
  },
  {
    "name": "CardGame24_0",
    "sat": "def sat(expr: str, nums=[3, 7, 3, 7]):\n    \"\"\"Find a formula with two 3's and two 7's and + - * / (and parentheses) that evaluates to 24.\"\"\"\n    assert len(nums) == 4 and 1 <= min(nums) and max(nums) <= 13, \"hint: nums is a list of four ints in 1..13\"\n    expr = expr.replace(\" \", \"\")  # ignore whitespace\n    digits = \"\"\n    for i in range(len(expr)):\n        if i == 0 or expr[i - 1] in \"+*-/(\":\n            assert expr[i] in \"123456789(\", \"Expr cannot contain **, //, or unary -\"\n        assert expr[i] in \"1234567890()+-*/\", \"Expr can only contain `0123456789()+-*/`\"\n        digits += expr[i] if expr[i] in \"0123456789\" else \" \"\n    assert sorted(int(s) for s in digits.split()) == sorted(nums), \"Each number must occur exactly once\"\n    return abs(eval(expr) - 24.0) < 1e-6",
    "sols": [
      "def sol(nums=[3, 7, 3, 7]):\n    def helper(pairs):\n        if len(pairs) == 2:\n            (x, s), (y, t) = pairs\n            ans = {\n                x + y: f\"{s}+{t}\",\n                x - y: f\"{s}-({t})\",\n                y - x: f\"{t}-({s})\",\n                x * y: f\"({s})*({t})\"\n            }\n            if y != 0:\n                ans[x / y] = f\"({s})/({t})\"\n            if x != 0:\n                ans[y / x] = f\"({t})/({s})\"\n            return ans\n        ans = {y: t\n               for i in range(len(pairs))\n               for x_s in helper(pairs[:i] + pairs[i + 1:]).items()\n               for y, t in helper([x_s, pairs[i]]).items()}\n        if len(pairs) == 3:\n            return ans\n        ans.update({z: u\n                    for i in range(1, 4)\n                    for x_s in helper([pairs[0], pairs[i]]).items()\n                    for y_t in helper(pairs[1:i] + pairs[i + 1:]).items()\n                    for z, u in helper([x_s, y_t]).items()\n                    })\n        return ans\n\n    derivations = helper([(n, str(n)) for n in nums])\n    for x in derivations:\n        if abs(x - 24.0) < 1e-6:\n            return derivations[x]"
    ],
    "module": "classic_puzzles",
    "notes": "[24 Game](https://en.wikipedia.org/wiki/24_Game)\n\nIn this game one is given four numbers from the range 1-13 (Ace-King) and one needs to combine them with\n    + - * / (and parentheses)\nto make the number 24.\nThe solution to this tricky example is `7 * (3 + 3 / 7)`",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CardGame24_1",
    "sat": "def sat(expr: str, nums=[1, 3, 7, 13]):\n    \"\"\"Find a formula with two 3's and two 7's and + - * / (and parentheses) that evaluates to 24.\"\"\"\n    assert len(nums) == 4 and 1 <= min(nums) and max(nums) <= 13, \"hint: nums is a list of four ints in 1..13\"\n    expr = expr.replace(\" \", \"\")  # ignore whitespace\n    digits = \"\"\n    for i in range(len(expr)):\n        if i == 0 or expr[i - 1] in \"+*-/(\":\n            assert expr[i] in \"123456789(\", \"Expr cannot contain **, //, or unary -\"\n        assert expr[i] in \"1234567890()+-*/\", \"Expr can only contain `0123456789()+-*/`\"\n        digits += expr[i] if expr[i] in \"0123456789\" else \" \"\n    assert sorted(int(s) for s in digits.split()) == sorted(nums), \"Each number must occur exactly once\"\n    return abs(eval(expr) - 24.0) < 1e-6",
    "sols": [
      "def sol(nums=[1, 3, 7, 13]):\n    def helper(pairs):\n        if len(pairs) == 2:\n            (x, s), (y, t) = pairs\n            ans = {\n                x + y: f\"{s}+{t}\",\n                x - y: f\"{s}-({t})\",\n                y - x: f\"{t}-({s})\",\n                x * y: f\"({s})*({t})\"\n            }\n            if y != 0:\n                ans[x / y] = f\"({s})/({t})\"\n            if x != 0:\n                ans[y / x] = f\"({t})/({s})\"\n            return ans\n        ans = {y: t\n               for i in range(len(pairs))\n               for x_s in helper(pairs[:i] + pairs[i + 1:]).items()\n               for y, t in helper([x_s, pairs[i]]).items()}\n        if len(pairs) == 3:\n            return ans\n        ans.update({z: u\n                    for i in range(1, 4)\n                    for x_s in helper([pairs[0], pairs[i]]).items()\n                    for y_t in helper(pairs[1:i] + pairs[i + 1:]).items()\n                    for z, u in helper([x_s, y_t]).items()\n                    })\n        return ans\n\n    derivations = helper([(n, str(n)) for n in nums])\n    for x in derivations:\n        if abs(x - 24.0) < 1e-6:\n            return derivations[x]"
    ],
    "module": "classic_puzzles",
    "notes": "[24 Game](https://en.wikipedia.org/wiki/24_Game)\n\nIn this game one is given four numbers from the range 1-13 (Ace-King) and one needs to combine them with\n    + - * / (and parentheses)\nto make the number 24.\nThe solution to this tricky example is `7 * (3 + 3 / 7)`",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CardGame24_2",
    "sat": "def sat(expr: str, nums=[10, 7, 3, 1]):\n    \"\"\"Find a formula with two 3's and two 7's and + - * / (and parentheses) that evaluates to 24.\"\"\"\n    assert len(nums) == 4 and 1 <= min(nums) and max(nums) <= 13, \"hint: nums is a list of four ints in 1..13\"\n    expr = expr.replace(\" \", \"\")  # ignore whitespace\n    digits = \"\"\n    for i in range(len(expr)):\n        if i == 0 or expr[i - 1] in \"+*-/(\":\n            assert expr[i] in \"123456789(\", \"Expr cannot contain **, //, or unary -\"\n        assert expr[i] in \"1234567890()+-*/\", \"Expr can only contain `0123456789()+-*/`\"\n        digits += expr[i] if expr[i] in \"0123456789\" else \" \"\n    assert sorted(int(s) for s in digits.split()) == sorted(nums), \"Each number must occur exactly once\"\n    return abs(eval(expr) - 24.0) < 1e-6",
    "sols": [
      "def sol(nums=[10, 7, 3, 1]):\n    def helper(pairs):\n        if len(pairs) == 2:\n            (x, s), (y, t) = pairs\n            ans = {\n                x + y: f\"{s}+{t}\",\n                x - y: f\"{s}-({t})\",\n                y - x: f\"{t}-({s})\",\n                x * y: f\"({s})*({t})\"\n            }\n            if y != 0:\n                ans[x / y] = f\"({s})/({t})\"\n            if x != 0:\n                ans[y / x] = f\"({t})/({s})\"\n            return ans\n        ans = {y: t\n               for i in range(len(pairs))\n               for x_s in helper(pairs[:i] + pairs[i + 1:]).items()\n               for y, t in helper([x_s, pairs[i]]).items()}\n        if len(pairs) == 3:\n            return ans\n        ans.update({z: u\n                    for i in range(1, 4)\n                    for x_s in helper([pairs[0], pairs[i]]).items()\n                    for y_t in helper(pairs[1:i] + pairs[i + 1:]).items()\n                    for z, u in helper([x_s, y_t]).items()\n                    })\n        return ans\n\n    derivations = helper([(n, str(n)) for n in nums])\n    for x in derivations:\n        if abs(x - 24.0) < 1e-6:\n            return derivations[x]"
    ],
    "module": "classic_puzzles",
    "notes": "[24 Game](https://en.wikipedia.org/wiki/24_Game)\n\nIn this game one is given four numbers from the range 1-13 (Ace-King) and one needs to combine them with\n    + - * / (and parentheses)\nto make the number 24.\nThe solution to this tricky example is `7 * (3 + 3 / 7)`",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CardGame24_3",
    "sat": "def sat(expr: str, nums=[8, 3, 12, 1]):\n    \"\"\"Find a formula with two 3's and two 7's and + - * / (and parentheses) that evaluates to 24.\"\"\"\n    assert len(nums) == 4 and 1 <= min(nums) and max(nums) <= 13, \"hint: nums is a list of four ints in 1..13\"\n    expr = expr.replace(\" \", \"\")  # ignore whitespace\n    digits = \"\"\n    for i in range(len(expr)):\n        if i == 0 or expr[i - 1] in \"+*-/(\":\n            assert expr[i] in \"123456789(\", \"Expr cannot contain **, //, or unary -\"\n        assert expr[i] in \"1234567890()+-*/\", \"Expr can only contain `0123456789()+-*/`\"\n        digits += expr[i] if expr[i] in \"0123456789\" else \" \"\n    assert sorted(int(s) for s in digits.split()) == sorted(nums), \"Each number must occur exactly once\"\n    return abs(eval(expr) - 24.0) < 1e-6",
    "sols": [
      "def sol(nums=[8, 3, 12, 1]):\n    def helper(pairs):\n        if len(pairs) == 2:\n            (x, s), (y, t) = pairs\n            ans = {\n                x + y: f\"{s}+{t}\",\n                x - y: f\"{s}-({t})\",\n                y - x: f\"{t}-({s})\",\n                x * y: f\"({s})*({t})\"\n            }\n            if y != 0:\n                ans[x / y] = f\"({s})/({t})\"\n            if x != 0:\n                ans[y / x] = f\"({t})/({s})\"\n            return ans\n        ans = {y: t\n               for i in range(len(pairs))\n               for x_s in helper(pairs[:i] + pairs[i + 1:]).items()\n               for y, t in helper([x_s, pairs[i]]).items()}\n        if len(pairs) == 3:\n            return ans\n        ans.update({z: u\n                    for i in range(1, 4)\n                    for x_s in helper([pairs[0], pairs[i]]).items()\n                    for y_t in helper(pairs[1:i] + pairs[i + 1:]).items()\n                    for z, u in helper([x_s, y_t]).items()\n                    })\n        return ans\n\n    derivations = helper([(n, str(n)) for n in nums])\n    for x in derivations:\n        if abs(x - 24.0) < 1e-6:\n            return derivations[x]"
    ],
    "module": "classic_puzzles",
    "notes": "[24 Game](https://en.wikipedia.org/wiki/24_Game)\n\nIn this game one is given four numbers from the range 1-13 (Ace-King) and one needs to combine them with\n    + - * / (and parentheses)\nto make the number 24.\nThe solution to this tricky example is `7 * (3 + 3 / 7)`",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CardGame24_4",
    "sat": "def sat(expr: str, nums=[10, 12, 1, 7]):\n    \"\"\"Find a formula with two 3's and two 7's and + - * / (and parentheses) that evaluates to 24.\"\"\"\n    assert len(nums) == 4 and 1 <= min(nums) and max(nums) <= 13, \"hint: nums is a list of four ints in 1..13\"\n    expr = expr.replace(\" \", \"\")  # ignore whitespace\n    digits = \"\"\n    for i in range(len(expr)):\n        if i == 0 or expr[i - 1] in \"+*-/(\":\n            assert expr[i] in \"123456789(\", \"Expr cannot contain **, //, or unary -\"\n        assert expr[i] in \"1234567890()+-*/\", \"Expr can only contain `0123456789()+-*/`\"\n        digits += expr[i] if expr[i] in \"0123456789\" else \" \"\n    assert sorted(int(s) for s in digits.split()) == sorted(nums), \"Each number must occur exactly once\"\n    return abs(eval(expr) - 24.0) < 1e-6",
    "sols": [
      "def sol(nums=[10, 12, 1, 7]):\n    def helper(pairs):\n        if len(pairs) == 2:\n            (x, s), (y, t) = pairs\n            ans = {\n                x + y: f\"{s}+{t}\",\n                x - y: f\"{s}-({t})\",\n                y - x: f\"{t}-({s})\",\n                x * y: f\"({s})*({t})\"\n            }\n            if y != 0:\n                ans[x / y] = f\"({s})/({t})\"\n            if x != 0:\n                ans[y / x] = f\"({t})/({s})\"\n            return ans\n        ans = {y: t\n               for i in range(len(pairs))\n               for x_s in helper(pairs[:i] + pairs[i + 1:]).items()\n               for y, t in helper([x_s, pairs[i]]).items()}\n        if len(pairs) == 3:\n            return ans\n        ans.update({z: u\n                    for i in range(1, 4)\n                    for x_s in helper([pairs[0], pairs[i]]).items()\n                    for y_t in helper(pairs[1:i] + pairs[i + 1:]).items()\n                    for z, u in helper([x_s, y_t]).items()\n                    })\n        return ans\n\n    derivations = helper([(n, str(n)) for n in nums])\n    for x in derivations:\n        if abs(x - 24.0) < 1e-6:\n            return derivations[x]"
    ],
    "module": "classic_puzzles",
    "notes": "[24 Game](https://en.wikipedia.org/wiki/24_Game)\n\nIn this game one is given four numbers from the range 1-13 (Ace-King) and one needs to combine them with\n    + - * / (and parentheses)\nto make the number 24.\nThe solution to this tricky example is `7 * (3 + 3 / 7)`",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CardGame24_5",
    "sat": "def sat(expr: str, nums=[8, 12, 3, 5]):\n    \"\"\"Find a formula with two 3's and two 7's and + - * / (and parentheses) that evaluates to 24.\"\"\"\n    assert len(nums) == 4 and 1 <= min(nums) and max(nums) <= 13, \"hint: nums is a list of four ints in 1..13\"\n    expr = expr.replace(\" \", \"\")  # ignore whitespace\n    digits = \"\"\n    for i in range(len(expr)):\n        if i == 0 or expr[i - 1] in \"+*-/(\":\n            assert expr[i] in \"123456789(\", \"Expr cannot contain **, //, or unary -\"\n        assert expr[i] in \"1234567890()+-*/\", \"Expr can only contain `0123456789()+-*/`\"\n        digits += expr[i] if expr[i] in \"0123456789\" else \" \"\n    assert sorted(int(s) for s in digits.split()) == sorted(nums), \"Each number must occur exactly once\"\n    return abs(eval(expr) - 24.0) < 1e-6",
    "sols": [
      "def sol(nums=[8, 12, 3, 5]):\n    def helper(pairs):\n        if len(pairs) == 2:\n            (x, s), (y, t) = pairs\n            ans = {\n                x + y: f\"{s}+{t}\",\n                x - y: f\"{s}-({t})\",\n                y - x: f\"{t}-({s})\",\n                x * y: f\"({s})*({t})\"\n            }\n            if y != 0:\n                ans[x / y] = f\"({s})/({t})\"\n            if x != 0:\n                ans[y / x] = f\"({t})/({s})\"\n            return ans\n        ans = {y: t\n               for i in range(len(pairs))\n               for x_s in helper(pairs[:i] + pairs[i + 1:]).items()\n               for y, t in helper([x_s, pairs[i]]).items()}\n        if len(pairs) == 3:\n            return ans\n        ans.update({z: u\n                    for i in range(1, 4)\n                    for x_s in helper([pairs[0], pairs[i]]).items()\n                    for y_t in helper(pairs[1:i] + pairs[i + 1:]).items()\n                    for z, u in helper([x_s, y_t]).items()\n                    })\n        return ans\n\n    derivations = helper([(n, str(n)) for n in nums])\n    for x in derivations:\n        if abs(x - 24.0) < 1e-6:\n            return derivations[x]"
    ],
    "module": "classic_puzzles",
    "notes": "[24 Game](https://en.wikipedia.org/wiki/24_Game)\n\nIn this game one is given four numbers from the range 1-13 (Ace-King) and one needs to combine them with\n    + - * / (and parentheses)\nto make the number 24.\nThe solution to this tricky example is `7 * (3 + 3 / 7)`",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CardGame24_6",
    "sat": "def sat(expr: str, nums=[4, 2, 8, 3]):\n    \"\"\"Find a formula with two 3's and two 7's and + - * / (and parentheses) that evaluates to 24.\"\"\"\n    assert len(nums) == 4 and 1 <= min(nums) and max(nums) <= 13, \"hint: nums is a list of four ints in 1..13\"\n    expr = expr.replace(\" \", \"\")  # ignore whitespace\n    digits = \"\"\n    for i in range(len(expr)):\n        if i == 0 or expr[i - 1] in \"+*-/(\":\n            assert expr[i] in \"123456789(\", \"Expr cannot contain **, //, or unary -\"\n        assert expr[i] in \"1234567890()+-*/\", \"Expr can only contain `0123456789()+-*/`\"\n        digits += expr[i] if expr[i] in \"0123456789\" else \" \"\n    assert sorted(int(s) for s in digits.split()) == sorted(nums), \"Each number must occur exactly once\"\n    return abs(eval(expr) - 24.0) < 1e-6",
    "sols": [
      "def sol(nums=[4, 2, 8, 3]):\n    def helper(pairs):\n        if len(pairs) == 2:\n            (x, s), (y, t) = pairs\n            ans = {\n                x + y: f\"{s}+{t}\",\n                x - y: f\"{s}-({t})\",\n                y - x: f\"{t}-({s})\",\n                x * y: f\"({s})*({t})\"\n            }\n            if y != 0:\n                ans[x / y] = f\"({s})/({t})\"\n            if x != 0:\n                ans[y / x] = f\"({t})/({s})\"\n            return ans\n        ans = {y: t\n               for i in range(len(pairs))\n               for x_s in helper(pairs[:i] + pairs[i + 1:]).items()\n               for y, t in helper([x_s, pairs[i]]).items()}\n        if len(pairs) == 3:\n            return ans\n        ans.update({z: u\n                    for i in range(1, 4)\n                    for x_s in helper([pairs[0], pairs[i]]).items()\n                    for y_t in helper(pairs[1:i] + pairs[i + 1:]).items()\n                    for z, u in helper([x_s, y_t]).items()\n                    })\n        return ans\n\n    derivations = helper([(n, str(n)) for n in nums])\n    for x in derivations:\n        if abs(x - 24.0) < 1e-6:\n            return derivations[x]"
    ],
    "module": "classic_puzzles",
    "notes": "[24 Game](https://en.wikipedia.org/wiki/24_Game)\n\nIn this game one is given four numbers from the range 1-13 (Ace-King) and one needs to combine them with\n    + - * / (and parentheses)\nto make the number 24.\nThe solution to this tricky example is `7 * (3 + 3 / 7)`",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CardGame24_7",
    "sat": "def sat(expr: str, nums=[5, 1, 12, 2]):\n    \"\"\"Find a formula with two 3's and two 7's and + - * / (and parentheses) that evaluates to 24.\"\"\"\n    assert len(nums) == 4 and 1 <= min(nums) and max(nums) <= 13, \"hint: nums is a list of four ints in 1..13\"\n    expr = expr.replace(\" \", \"\")  # ignore whitespace\n    digits = \"\"\n    for i in range(len(expr)):\n        if i == 0 or expr[i - 1] in \"+*-/(\":\n            assert expr[i] in \"123456789(\", \"Expr cannot contain **, //, or unary -\"\n        assert expr[i] in \"1234567890()+-*/\", \"Expr can only contain `0123456789()+-*/`\"\n        digits += expr[i] if expr[i] in \"0123456789\" else \" \"\n    assert sorted(int(s) for s in digits.split()) == sorted(nums), \"Each number must occur exactly once\"\n    return abs(eval(expr) - 24.0) < 1e-6",
    "sols": [
      "def sol(nums=[5, 1, 12, 2]):\n    def helper(pairs):\n        if len(pairs) == 2:\n            (x, s), (y, t) = pairs\n            ans = {\n                x + y: f\"{s}+{t}\",\n                x - y: f\"{s}-({t})\",\n                y - x: f\"{t}-({s})\",\n                x * y: f\"({s})*({t})\"\n            }\n            if y != 0:\n                ans[x / y] = f\"({s})/({t})\"\n            if x != 0:\n                ans[y / x] = f\"({t})/({s})\"\n            return ans\n        ans = {y: t\n               for i in range(len(pairs))\n               for x_s in helper(pairs[:i] + pairs[i + 1:]).items()\n               for y, t in helper([x_s, pairs[i]]).items()}\n        if len(pairs) == 3:\n            return ans\n        ans.update({z: u\n                    for i in range(1, 4)\n                    for x_s in helper([pairs[0], pairs[i]]).items()\n                    for y_t in helper(pairs[1:i] + pairs[i + 1:]).items()\n                    for z, u in helper([x_s, y_t]).items()\n                    })\n        return ans\n\n    derivations = helper([(n, str(n)) for n in nums])\n    for x in derivations:\n        if abs(x - 24.0) < 1e-6:\n            return derivations[x]"
    ],
    "module": "classic_puzzles",
    "notes": "[24 Game](https://en.wikipedia.org/wiki/24_Game)\n\nIn this game one is given four numbers from the range 1-13 (Ace-King) and one needs to combine them with\n    + - * / (and parentheses)\nto make the number 24.\nThe solution to this tricky example is `7 * (3 + 3 / 7)`",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CardGame24_8",
    "sat": "def sat(expr: str, nums=[11, 13, 6, 2]):\n    \"\"\"Find a formula with two 3's and two 7's and + - * / (and parentheses) that evaluates to 24.\"\"\"\n    assert len(nums) == 4 and 1 <= min(nums) and max(nums) <= 13, \"hint: nums is a list of four ints in 1..13\"\n    expr = expr.replace(\" \", \"\")  # ignore whitespace\n    digits = \"\"\n    for i in range(len(expr)):\n        if i == 0 or expr[i - 1] in \"+*-/(\":\n            assert expr[i] in \"123456789(\", \"Expr cannot contain **, //, or unary -\"\n        assert expr[i] in \"1234567890()+-*/\", \"Expr can only contain `0123456789()+-*/`\"\n        digits += expr[i] if expr[i] in \"0123456789\" else \" \"\n    assert sorted(int(s) for s in digits.split()) == sorted(nums), \"Each number must occur exactly once\"\n    return abs(eval(expr) - 24.0) < 1e-6",
    "sols": [
      "def sol(nums=[11, 13, 6, 2]):\n    def helper(pairs):\n        if len(pairs) == 2:\n            (x, s), (y, t) = pairs\n            ans = {\n                x + y: f\"{s}+{t}\",\n                x - y: f\"{s}-({t})\",\n                y - x: f\"{t}-({s})\",\n                x * y: f\"({s})*({t})\"\n            }\n            if y != 0:\n                ans[x / y] = f\"({s})/({t})\"\n            if x != 0:\n                ans[y / x] = f\"({t})/({s})\"\n            return ans\n        ans = {y: t\n               for i in range(len(pairs))\n               for x_s in helper(pairs[:i] + pairs[i + 1:]).items()\n               for y, t in helper([x_s, pairs[i]]).items()}\n        if len(pairs) == 3:\n            return ans\n        ans.update({z: u\n                    for i in range(1, 4)\n                    for x_s in helper([pairs[0], pairs[i]]).items()\n                    for y_t in helper(pairs[1:i] + pairs[i + 1:]).items()\n                    for z, u in helper([x_s, y_t]).items()\n                    })\n        return ans\n\n    derivations = helper([(n, str(n)) for n in nums])\n    for x in derivations:\n        if abs(x - 24.0) < 1e-6:\n            return derivations[x]"
    ],
    "module": "classic_puzzles",
    "notes": "[24 Game](https://en.wikipedia.org/wiki/24_Game)\n\nIn this game one is given four numbers from the range 1-13 (Ace-King) and one needs to combine them with\n    + - * / (and parentheses)\nto make the number 24.\nThe solution to this tricky example is `7 * (3 + 3 / 7)`",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CardGame24_9",
    "sat": "def sat(expr: str, nums=[6, 6, 4, 8]):\n    \"\"\"Find a formula with two 3's and two 7's and + - * / (and parentheses) that evaluates to 24.\"\"\"\n    assert len(nums) == 4 and 1 <= min(nums) and max(nums) <= 13, \"hint: nums is a list of four ints in 1..13\"\n    expr = expr.replace(\" \", \"\")  # ignore whitespace\n    digits = \"\"\n    for i in range(len(expr)):\n        if i == 0 or expr[i - 1] in \"+*-/(\":\n            assert expr[i] in \"123456789(\", \"Expr cannot contain **, //, or unary -\"\n        assert expr[i] in \"1234567890()+-*/\", \"Expr can only contain `0123456789()+-*/`\"\n        digits += expr[i] if expr[i] in \"0123456789\" else \" \"\n    assert sorted(int(s) for s in digits.split()) == sorted(nums), \"Each number must occur exactly once\"\n    return abs(eval(expr) - 24.0) < 1e-6",
    "sols": [
      "def sol(nums=[6, 6, 4, 8]):\n    def helper(pairs):\n        if len(pairs) == 2:\n            (x, s), (y, t) = pairs\n            ans = {\n                x + y: f\"{s}+{t}\",\n                x - y: f\"{s}-({t})\",\n                y - x: f\"{t}-({s})\",\n                x * y: f\"({s})*({t})\"\n            }\n            if y != 0:\n                ans[x / y] = f\"({s})/({t})\"\n            if x != 0:\n                ans[y / x] = f\"({t})/({s})\"\n            return ans\n        ans = {y: t\n               for i in range(len(pairs))\n               for x_s in helper(pairs[:i] + pairs[i + 1:]).items()\n               for y, t in helper([x_s, pairs[i]]).items()}\n        if len(pairs) == 3:\n            return ans\n        ans.update({z: u\n                    for i in range(1, 4)\n                    for x_s in helper([pairs[0], pairs[i]]).items()\n                    for y_t in helper(pairs[1:i] + pairs[i + 1:]).items()\n                    for z, u in helper([x_s, y_t]).items()\n                    })\n        return ans\n\n    derivations = helper([(n, str(n)) for n in nums])\n    for x in derivations:\n        if abs(x - 24.0) < 1e-6:\n            return derivations[x]"
    ],
    "module": "classic_puzzles",
    "notes": "[24 Game](https://en.wikipedia.org/wiki/24_Game)\n\nIn this game one is given four numbers from the range 1-13 (Ace-King) and one needs to combine them with\n    + - * / (and parentheses)\nto make the number 24.\nThe solution to this tricky example is `7 * (3 + 3 / 7)`",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "Easy63_0",
    "sat": "def sat(s: str):\n    \"\"\"Find a formula using two 8s and two 1's and -+*/ that evaluates to 1.\"\"\"\n    return set(s) <= set(\"18-+*/\") and s.count(\"8\") == 2 and s.count(\"1\") == 1 and eval(s) == 63",
    "sols": [
      "def sol():\n    return \"8*8-1\""
    ],
    "module": "classic_puzzles",
    "notes": "An easy puzzle to make 63 using two 8's and one 1's.",
    "taint_date": "2021-4-26",
    "weight": 0.045454545454545456
  },
  {
    "name": "Harder63_0",
    "sat": "def sat(s: str):\n    \"\"\"Find an expression using two 8s and two 1's and -+*/ that evaluates to 1.\"\"\"\n    return set(s) <= set(\"18-+*/\") and s.count(\"8\") == 3 and s.count(\"1\") == 1 and eval(s) == 63",
    "sols": [
      "def sol():\n    return \"8*8-1**8\""
    ],
    "module": "classic_puzzles",
    "notes": "An harder puzzle to make 63 using three 8's and one 1's.",
    "taint_date": "2021-4-26",
    "weight": 0.045454545454545456
  },
  {
    "name": "WaterPouring_0",
    "sat": "def sat(moves: List[List[int]], capacities=[8, 5, 3], init=[8, 0, 0], goal=[4, 4, 0]):  # moves is list of [from, to] pairs\n    \"\"\"\n    Given an initial state of water quantities in jugs and jug capacities, find a sequence of moves (pouring\n    one jug into another until it is full or the first is empty) to reaches the given goal state.\n    \"\"\"\n    state = init.copy()\n\n    for [i, j] in moves:\n        assert min(i, j) >= 0, \"Indices must be non-negative\"\n        assert i != j, \"Cannot pour from same state to itself\"\n        n = min(capacities[j], state[i] + state[j])\n        state[i], state[j] = state[i] + state[j] - n, n\n\n    return state == goal",
    "sols": [
      "def sol(capacities=[8, 5, 3], init=[8, 0, 0], goal=[4, 4, 0]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "[Water pouring puzzle](https://en.wikipedia.org/w/index.php?title=Water_pouring_puzzle&oldid=985741928)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "WaterPouring_1",
    "sat": "def sat(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]):  # moves is list of [from, to] pairs\n    \"\"\"\n    Given an initial state of water quantities in jugs and jug capacities, find a sequence of moves (pouring\n    one jug into another until it is full or the first is empty) to reaches the given goal state.\n    \"\"\"\n    state = init.copy()\n\n    for [i, j] in moves:\n        assert min(i, j) >= 0, \"Indices must be non-negative\"\n        assert i != j, \"Cannot pour from same state to itself\"\n        n = min(capacities[j], state[i] + state[j])\n        state[i], state[j] = state[i] + state[j] - n, n\n\n    return state == goal",
    "sols": [
      "def sol(capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "[Water pouring puzzle](https://en.wikipedia.org/w/index.php?title=Water_pouring_puzzle&oldid=985741928)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "WaterPouring_2",
    "sat": "def sat(moves: List[List[int]], capacities=[357, 298, 492], init=[8, 284, 72], goal=[0, 0, 364]):  # moves is list of [from, to] pairs\n    \"\"\"\n    Given an initial state of water quantities in jugs and jug capacities, find a sequence of moves (pouring\n    one jug into another until it is full or the first is empty) to reaches the given goal state.\n    \"\"\"\n    state = init.copy()\n\n    for [i, j] in moves:\n        assert min(i, j) >= 0, \"Indices must be non-negative\"\n        assert i != j, \"Cannot pour from same state to itself\"\n        n = min(capacities[j], state[i] + state[j])\n        state[i], state[j] = state[i] + state[j] - n, n\n\n    return state == goal",
    "sols": [
      "def sol(capacities=[357, 298, 492], init=[8, 284, 72], goal=[0, 0, 364]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "[Water pouring puzzle](https://en.wikipedia.org/w/index.php?title=Water_pouring_puzzle&oldid=985741928)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "WaterPouring_3",
    "sat": "def sat(moves: List[List[int]], capacities=[511, 625, 553], init=[472, 153, 127], goal=[97, 625, 30]):  # moves is list of [from, to] pairs\n    \"\"\"\n    Given an initial state of water quantities in jugs and jug capacities, find a sequence of moves (pouring\n    one jug into another until it is full or the first is empty) to reaches the given goal state.\n    \"\"\"\n    state = init.copy()\n\n    for [i, j] in moves:\n        assert min(i, j) >= 0, \"Indices must be non-negative\"\n        assert i != j, \"Cannot pour from same state to itself\"\n        n = min(capacities[j], state[i] + state[j])\n        state[i], state[j] = state[i] + state[j] - n, n\n\n    return state == goal",
    "sols": [
      "def sol(capacities=[511, 625, 553], init=[472, 153, 127], goal=[97, 625, 30]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "[Water pouring puzzle](https://en.wikipedia.org/w/index.php?title=Water_pouring_puzzle&oldid=985741928)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "WaterPouring_4",
    "sat": "def sat(moves: List[List[int]], capacities=[86, 259, 281], init=[47, 18, 35], goal=[35, 0, 65]):  # moves is list of [from, to] pairs\n    \"\"\"\n    Given an initial state of water quantities in jugs and jug capacities, find a sequence of moves (pouring\n    one jug into another until it is full or the first is empty) to reaches the given goal state.\n    \"\"\"\n    state = init.copy()\n\n    for [i, j] in moves:\n        assert min(i, j) >= 0, \"Indices must be non-negative\"\n        assert i != j, \"Cannot pour from same state to itself\"\n        n = min(capacities[j], state[i] + state[j])\n        state[i], state[j] = state[i] + state[j] - n, n\n\n    return state == goal",
    "sols": [
      "def sol(capacities=[86, 259, 281], init=[47, 18, 35], goal=[35, 0, 65]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "[Water pouring puzzle](https://en.wikipedia.org/w/index.php?title=Water_pouring_puzzle&oldid=985741928)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "WaterPouring_5",
    "sat": "def sat(moves: List[List[int]], capacities=[920, 305, 890], init=[120, 139, 410], goal=[564, 105, 0]):  # moves is list of [from, to] pairs\n    \"\"\"\n    Given an initial state of water quantities in jugs and jug capacities, find a sequence of moves (pouring\n    one jug into another until it is full or the first is empty) to reaches the given goal state.\n    \"\"\"\n    state = init.copy()\n\n    for [i, j] in moves:\n        assert min(i, j) >= 0, \"Indices must be non-negative\"\n        assert i != j, \"Cannot pour from same state to itself\"\n        n = min(capacities[j], state[i] + state[j])\n        state[i], state[j] = state[i] + state[j] - n, n\n\n    return state == goal",
    "sols": [
      "def sol(capacities=[920, 305, 890], init=[120, 139, 410], goal=[564, 105, 0]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "[Water pouring puzzle](https://en.wikipedia.org/w/index.php?title=Water_pouring_puzzle&oldid=985741928)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "WaterPouring_6",
    "sat": "def sat(moves: List[List[int]], capacities=[325, 942, 32], init=[117, 164, 21], goal=[42, 260, 0]):  # moves is list of [from, to] pairs\n    \"\"\"\n    Given an initial state of water quantities in jugs and jug capacities, find a sequence of moves (pouring\n    one jug into another until it is full or the first is empty) to reaches the given goal state.\n    \"\"\"\n    state = init.copy()\n\n    for [i, j] in moves:\n        assert min(i, j) >= 0, \"Indices must be non-negative\"\n        assert i != j, \"Cannot pour from same state to itself\"\n        n = min(capacities[j], state[i] + state[j])\n        state[i], state[j] = state[i] + state[j] - n, n\n\n    return state == goal",
    "sols": [
      "def sol(capacities=[325, 942, 32], init=[117, 164, 21], goal=[42, 260, 0]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "[Water pouring puzzle](https://en.wikipedia.org/w/index.php?title=Water_pouring_puzzle&oldid=985741928)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "WaterPouring_7",
    "sat": "def sat(moves: List[List[int]], capacities=[302, 260, 629], init=[67, 27, 347], goal=[3, 0, 438]):  # moves is list of [from, to] pairs\n    \"\"\"\n    Given an initial state of water quantities in jugs and jug capacities, find a sequence of moves (pouring\n    one jug into another until it is full or the first is empty) to reaches the given goal state.\n    \"\"\"\n    state = init.copy()\n\n    for [i, j] in moves:\n        assert min(i, j) >= 0, \"Indices must be non-negative\"\n        assert i != j, \"Cannot pour from same state to itself\"\n        n = min(capacities[j], state[i] + state[j])\n        state[i], state[j] = state[i] + state[j] - n, n\n\n    return state == goal",
    "sols": [
      "def sol(capacities=[302, 260, 629], init=[67, 27, 347], goal=[3, 0, 438]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "[Water pouring puzzle](https://en.wikipedia.org/w/index.php?title=Water_pouring_puzzle&oldid=985741928)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "WaterPouring_8",
    "sat": "def sat(moves: List[List[int]], capacities=[448, 585, 364], init=[12, 101, 337], goal=[113, 0, 337]):  # moves is list of [from, to] pairs\n    \"\"\"\n    Given an initial state of water quantities in jugs and jug capacities, find a sequence of moves (pouring\n    one jug into another until it is full or the first is empty) to reaches the given goal state.\n    \"\"\"\n    state = init.copy()\n\n    for [i, j] in moves:\n        assert min(i, j) >= 0, \"Indices must be non-negative\"\n        assert i != j, \"Cannot pour from same state to itself\"\n        n = min(capacities[j], state[i] + state[j])\n        state[i], state[j] = state[i] + state[j] - n, n\n\n    return state == goal",
    "sols": [
      "def sol(capacities=[448, 585, 364], init=[12, 101, 337], goal=[113, 0, 337]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "[Water pouring puzzle](https://en.wikipedia.org/w/index.php?title=Water_pouring_puzzle&oldid=985741928)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "WaterPouring_9",
    "sat": "def sat(moves: List[List[int]], capacities=[151, 219, 555], init=[80, 74, 5], goal=[3, 0, 156]):  # moves is list of [from, to] pairs\n    \"\"\"\n    Given an initial state of water quantities in jugs and jug capacities, find a sequence of moves (pouring\n    one jug into another until it is full or the first is empty) to reaches the given goal state.\n    \"\"\"\n    state = init.copy()\n\n    for [i, j] in moves:\n        assert min(i, j) >= 0, \"Indices must be non-negative\"\n        assert i != j, \"Cannot pour from same state to itself\"\n        n = min(capacities[j], state[i] + state[j])\n        state[i], state[j] = state[i] + state[j] - n, n\n\n    return state == goal",
    "sols": [
      "def sol(capacities=[151, 219, 555], init=[80, 74, 5], goal=[3, 0, 156]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]"
    ],
    "module": "classic_puzzles",
    "notes": "[Water pouring puzzle](https://en.wikipedia.org/w/index.php?title=Water_pouring_puzzle&oldid=985741928)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "VerbalArithmetic_0",
    "sat": "def sat(li: List[int], words=['SEND', 'MORE', 'MONEY']):\n    \"\"\"\n    Find a list of integers corresponding to the given list of strings substituting a different digit for each\n    character, so that the last string corresponds to the sum of the previous numbers.\n    \"\"\"\n    assert len(li) == len(words) and all(i > 0 and len(str(i)) == len(w) for i, w in zip(li, words))\n    assert len({c for w in words for c in w}) == len({(d, c) for i, w in zip(li, words) for d, c in zip(str(i), w)})\n    return sum(li[:-1]) == li[-1]",
    "sols": [
      "def sol(words=['SEND', 'MORE', 'MONEY']):\n    pi = list(range(10))  # permutation\n    letters = []\n    order = {}\n    steps = []\n    tens = 1\n    for col in range(1, 1 + max(len(w) for w in words)):\n        for w in words:\n            is_tot = (w is words[-1])\n            if len(w) >= col:\n                c = w[-col]\n                if c in order:\n                    if is_tot:\n                        kind = \"check\"\n                    else:\n                        kind = \"seen\"\n                else:\n                    if is_tot:\n                        kind = \"derive\"\n                    else:\n                        kind = \"add\"\n                    order[c] = len(letters)\n                    letters.append(c)\n                steps.append((kind, order[c], tens))\n        tens *= 10\n\n    inits = [any(w[0] == c for w in words) for c in letters]\n\n    def helper(pos, delta):  # on success, returns True and pi has the correct values\n        if pos == len(steps):\n            return delta == 0\n\n        kind, i, tens = steps[pos]\n\n        if kind == \"seen\":\n            return helper(pos + 1, delta + tens * pi[i])\n\n        if kind == \"add\":\n            for j in range(i, 10):\n                if pi[j] != 0 or not inits[i]:  # not adding a leading 0\n                    pi[i], pi[j] = pi[j], pi[i]\n                    if helper(pos + 1, delta + tens * pi[i]):\n                        return True\n                    pi[i], pi[j] = pi[j], pi[i]\n            return False\n        if kind == \"check\":\n            delta -= tens * pi[i]\n            return (delta % (10 * tens)) == 0 and helper(pos + 1, delta)\n\n        assert kind == \"derive\"\n        digit = (delta % (10 * tens)) // tens\n        if digit == 0 and inits[i]:\n            return False  # would be a leading 0\n        j = pi.index(digit)\n        if j < i:\n            return False  # already used\n        pi[i], pi[j] = pi[j], pi[i]\n        if helper(pos + 1, delta - tens * digit):\n            return True\n        pi[i], pi[j] = pi[j], pi[i]\n        return False\n\n    assert helper(0, 0)\n    return [int(\"\".join(str(pi[order[c]]) for c in w)) for w in words]"
    ],
    "module": "classic_puzzles",
    "notes": "Find a substitution of digits for characters to make the numbers add up in a sum like this:\nSEND + MORE = MONEY\n\nThe first digit in any number cannot be 0. In this example the solution is `9567 + 1085 = 10652`.\nSee [Wikipedia article](https://en.wikipedia.org/wiki/Verbal_arithmetic)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "VerbalArithmetic_1",
    "sat": "def sat(li: List[int], words=['FORTY', 'TEN', 'TEN', 'SIXTY']):\n    \"\"\"\n    Find a list of integers corresponding to the given list of strings substituting a different digit for each\n    character, so that the last string corresponds to the sum of the previous numbers.\n    \"\"\"\n    assert len(li) == len(words) and all(i > 0 and len(str(i)) == len(w) for i, w in zip(li, words))\n    assert len({c for w in words for c in w}) == len({(d, c) for i, w in zip(li, words) for d, c in zip(str(i), w)})\n    return sum(li[:-1]) == li[-1]",
    "sols": [
      "def sol(words=['FORTY', 'TEN', 'TEN', 'SIXTY']):\n    pi = list(range(10))  # permutation\n    letters = []\n    order = {}\n    steps = []\n    tens = 1\n    for col in range(1, 1 + max(len(w) for w in words)):\n        for w in words:\n            is_tot = (w is words[-1])\n            if len(w) >= col:\n                c = w[-col]\n                if c in order:\n                    if is_tot:\n                        kind = \"check\"\n                    else:\n                        kind = \"seen\"\n                else:\n                    if is_tot:\n                        kind = \"derive\"\n                    else:\n                        kind = \"add\"\n                    order[c] = len(letters)\n                    letters.append(c)\n                steps.append((kind, order[c], tens))\n        tens *= 10\n\n    inits = [any(w[0] == c for w in words) for c in letters]\n\n    def helper(pos, delta):  # on success, returns True and pi has the correct values\n        if pos == len(steps):\n            return delta == 0\n\n        kind, i, tens = steps[pos]\n\n        if kind == \"seen\":\n            return helper(pos + 1, delta + tens * pi[i])\n\n        if kind == \"add\":\n            for j in range(i, 10):\n                if pi[j] != 0 or not inits[i]:  # not adding a leading 0\n                    pi[i], pi[j] = pi[j], pi[i]\n                    if helper(pos + 1, delta + tens * pi[i]):\n                        return True\n                    pi[i], pi[j] = pi[j], pi[i]\n            return False\n        if kind == \"check\":\n            delta -= tens * pi[i]\n            return (delta % (10 * tens)) == 0 and helper(pos + 1, delta)\n\n        assert kind == \"derive\"\n        digit = (delta % (10 * tens)) // tens\n        if digit == 0 and inits[i]:\n            return False  # would be a leading 0\n        j = pi.index(digit)\n        if j < i:\n            return False  # already used\n        pi[i], pi[j] = pi[j], pi[i]\n        if helper(pos + 1, delta - tens * digit):\n            return True\n        pi[i], pi[j] = pi[j], pi[i]\n        return False\n\n    assert helper(0, 0)\n    return [int(\"\".join(str(pi[order[c]]) for c in w)) for w in words]"
    ],
    "module": "classic_puzzles",
    "notes": "Find a substitution of digits for characters to make the numbers add up in a sum like this:\nSEND + MORE = MONEY\n\nThe first digit in any number cannot be 0. In this example the solution is `9567 + 1085 = 10652`.\nSee [Wikipedia article](https://en.wikipedia.org/wiki/Verbal_arithmetic)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "VerbalArithmetic_2",
    "sat": "def sat(li: List[int], words=['GREEN', 'ORANGE', 'COLORS']):\n    \"\"\"\n    Find a list of integers corresponding to the given list of strings substituting a different digit for each\n    character, so that the last string corresponds to the sum of the previous numbers.\n    \"\"\"\n    assert len(li) == len(words) and all(i > 0 and len(str(i)) == len(w) for i, w in zip(li, words))\n    assert len({c for w in words for c in w}) == len({(d, c) for i, w in zip(li, words) for d, c in zip(str(i), w)})\n    return sum(li[:-1]) == li[-1]",
    "sols": [
      "def sol(words=['GREEN', 'ORANGE', 'COLORS']):\n    pi = list(range(10))  # permutation\n    letters = []\n    order = {}\n    steps = []\n    tens = 1\n    for col in range(1, 1 + max(len(w) for w in words)):\n        for w in words:\n            is_tot = (w is words[-1])\n            if len(w) >= col:\n                c = w[-col]\n                if c in order:\n                    if is_tot:\n                        kind = \"check\"\n                    else:\n                        kind = \"seen\"\n                else:\n                    if is_tot:\n                        kind = \"derive\"\n                    else:\n                        kind = \"add\"\n                    order[c] = len(letters)\n                    letters.append(c)\n                steps.append((kind, order[c], tens))\n        tens *= 10\n\n    inits = [any(w[0] == c for w in words) for c in letters]\n\n    def helper(pos, delta):  # on success, returns True and pi has the correct values\n        if pos == len(steps):\n            return delta == 0\n\n        kind, i, tens = steps[pos]\n\n        if kind == \"seen\":\n            return helper(pos + 1, delta + tens * pi[i])\n\n        if kind == \"add\":\n            for j in range(i, 10):\n                if pi[j] != 0 or not inits[i]:  # not adding a leading 0\n                    pi[i], pi[j] = pi[j], pi[i]\n                    if helper(pos + 1, delta + tens * pi[i]):\n                        return True\n                    pi[i], pi[j] = pi[j], pi[i]\n            return False\n        if kind == \"check\":\n            delta -= tens * pi[i]\n            return (delta % (10 * tens)) == 0 and helper(pos + 1, delta)\n\n        assert kind == \"derive\"\n        digit = (delta % (10 * tens)) // tens\n        if digit == 0 and inits[i]:\n            return False  # would be a leading 0\n        j = pi.index(digit)\n        if j < i:\n            return False  # already used\n        pi[i], pi[j] = pi[j], pi[i]\n        if helper(pos + 1, delta - tens * digit):\n            return True\n        pi[i], pi[j] = pi[j], pi[i]\n        return False\n\n    assert helper(0, 0)\n    return [int(\"\".join(str(pi[order[c]]) for c in w)) for w in words]"
    ],
    "module": "classic_puzzles",
    "notes": "Find a substitution of digits for characters to make the numbers add up in a sum like this:\nSEND + MORE = MONEY\n\nThe first digit in any number cannot be 0. In this example the solution is `9567 + 1085 = 10652`.\nSee [Wikipedia article](https://en.wikipedia.org/wiki/Verbal_arithmetic)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "VerbalArithmetic_3",
    "sat": "def sat(li: List[int], words=['fqjb', 'awqw', 'lfll', 'fvvvb']):\n    \"\"\"\n    Find a list of integers corresponding to the given list of strings substituting a different digit for each\n    character, so that the last string corresponds to the sum of the previous numbers.\n    \"\"\"\n    assert len(li) == len(words) and all(i > 0 and len(str(i)) == len(w) for i, w in zip(li, words))\n    assert len({c for w in words for c in w}) == len({(d, c) for i, w in zip(li, words) for d, c in zip(str(i), w)})\n    return sum(li[:-1]) == li[-1]",
    "sols": [
      "def sol(words=['fqjb', 'awqw', 'lfll', 'fvvvb']):\n    pi = list(range(10))  # permutation\n    letters = []\n    order = {}\n    steps = []\n    tens = 1\n    for col in range(1, 1 + max(len(w) for w in words)):\n        for w in words:\n            is_tot = (w is words[-1])\n            if len(w) >= col:\n                c = w[-col]\n                if c in order:\n                    if is_tot:\n                        kind = \"check\"\n                    else:\n                        kind = \"seen\"\n                else:\n                    if is_tot:\n                        kind = \"derive\"\n                    else:\n                        kind = \"add\"\n                    order[c] = len(letters)\n                    letters.append(c)\n                steps.append((kind, order[c], tens))\n        tens *= 10\n\n    inits = [any(w[0] == c for w in words) for c in letters]\n\n    def helper(pos, delta):  # on success, returns True and pi has the correct values\n        if pos == len(steps):\n            return delta == 0\n\n        kind, i, tens = steps[pos]\n\n        if kind == \"seen\":\n            return helper(pos + 1, delta + tens * pi[i])\n\n        if kind == \"add\":\n            for j in range(i, 10):\n                if pi[j] != 0 or not inits[i]:  # not adding a leading 0\n                    pi[i], pi[j] = pi[j], pi[i]\n                    if helper(pos + 1, delta + tens * pi[i]):\n                        return True\n                    pi[i], pi[j] = pi[j], pi[i]\n            return False\n        if kind == \"check\":\n            delta -= tens * pi[i]\n            return (delta % (10 * tens)) == 0 and helper(pos + 1, delta)\n\n        assert kind == \"derive\"\n        digit = (delta % (10 * tens)) // tens\n        if digit == 0 and inits[i]:\n            return False  # would be a leading 0\n        j = pi.index(digit)\n        if j < i:\n            return False  # already used\n        pi[i], pi[j] = pi[j], pi[i]\n        if helper(pos + 1, delta - tens * digit):\n            return True\n        pi[i], pi[j] = pi[j], pi[i]\n        return False\n\n    assert helper(0, 0)\n    return [int(\"\".join(str(pi[order[c]]) for c in w)) for w in words]"
    ],
    "module": "classic_puzzles",
    "notes": "Find a substitution of digits for characters to make the numbers add up in a sum like this:\nSEND + MORE = MONEY\n\nThe first digit in any number cannot be 0. In this example the solution is `9567 + 1085 = 10652`.\nSee [Wikipedia article](https://en.wikipedia.org/wiki/Verbal_arithmetic)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "VerbalArithmetic_4",
    "sat": "def sat(li: List[int], words=['tnnq', 'sna', 'ajjc', 'isun', 'usub', 'caiun']):\n    \"\"\"\n    Find a list of integers corresponding to the given list of strings substituting a different digit for each\n    character, so that the last string corresponds to the sum of the previous numbers.\n    \"\"\"\n    assert len(li) == len(words) and all(i > 0 and len(str(i)) == len(w) for i, w in zip(li, words))\n    assert len({c for w in words for c in w}) == len({(d, c) for i, w in zip(li, words) for d, c in zip(str(i), w)})\n    return sum(li[:-1]) == li[-1]",
    "sols": [
      "def sol(words=['tnnq', 'sna', 'ajjc', 'isun', 'usub', 'caiun']):\n    pi = list(range(10))  # permutation\n    letters = []\n    order = {}\n    steps = []\n    tens = 1\n    for col in range(1, 1 + max(len(w) for w in words)):\n        for w in words:\n            is_tot = (w is words[-1])\n            if len(w) >= col:\n                c = w[-col]\n                if c in order:\n                    if is_tot:\n                        kind = \"check\"\n                    else:\n                        kind = \"seen\"\n                else:\n                    if is_tot:\n                        kind = \"derive\"\n                    else:\n                        kind = \"add\"\n                    order[c] = len(letters)\n                    letters.append(c)\n                steps.append((kind, order[c], tens))\n        tens *= 10\n\n    inits = [any(w[0] == c for w in words) for c in letters]\n\n    def helper(pos, delta):  # on success, returns True and pi has the correct values\n        if pos == len(steps):\n            return delta == 0\n\n        kind, i, tens = steps[pos]\n\n        if kind == \"seen\":\n            return helper(pos + 1, delta + tens * pi[i])\n\n        if kind == \"add\":\n            for j in range(i, 10):\n                if pi[j] != 0 or not inits[i]:  # not adding a leading 0\n                    pi[i], pi[j] = pi[j], pi[i]\n                    if helper(pos + 1, delta + tens * pi[i]):\n                        return True\n                    pi[i], pi[j] = pi[j], pi[i]\n            return False\n        if kind == \"check\":\n            delta -= tens * pi[i]\n            return (delta % (10 * tens)) == 0 and helper(pos + 1, delta)\n\n        assert kind == \"derive\"\n        digit = (delta % (10 * tens)) // tens\n        if digit == 0 and inits[i]:\n            return False  # would be a leading 0\n        j = pi.index(digit)\n        if j < i:\n            return False  # already used\n        pi[i], pi[j] = pi[j], pi[i]\n        if helper(pos + 1, delta - tens * digit):\n            return True\n        pi[i], pi[j] = pi[j], pi[i]\n        return False\n\n    assert helper(0, 0)\n    return [int(\"\".join(str(pi[order[c]]) for c in w)) for w in words]"
    ],
    "module": "classic_puzzles",
    "notes": "Find a substitution of digits for characters to make the numbers add up in a sum like this:\nSEND + MORE = MONEY\n\nThe first digit in any number cannot be 0. In this example the solution is `9567 + 1085 = 10652`.\nSee [Wikipedia article](https://en.wikipedia.org/wiki/Verbal_arithmetic)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "VerbalArithmetic_5",
    "sat": "def sat(li: List[int], words=['idix', 'izdw', 'ixxc', 'ddcw', 'rrxx', 'wxzc', 'ffxw', 'icfdv']):\n    \"\"\"\n    Find a list of integers corresponding to the given list of strings substituting a different digit for each\n    character, so that the last string corresponds to the sum of the previous numbers.\n    \"\"\"\n    assert len(li) == len(words) and all(i > 0 and len(str(i)) == len(w) for i, w in zip(li, words))\n    assert len({c for w in words for c in w}) == len({(d, c) for i, w in zip(li, words) for d, c in zip(str(i), w)})\n    return sum(li[:-1]) == li[-1]",
    "sols": [
      "def sol(words=['idix', 'izdw', 'ixxc', 'ddcw', 'rrxx', 'wxzc', 'ffxw', 'icfdv']):\n    pi = list(range(10))  # permutation\n    letters = []\n    order = {}\n    steps = []\n    tens = 1\n    for col in range(1, 1 + max(len(w) for w in words)):\n        for w in words:\n            is_tot = (w is words[-1])\n            if len(w) >= col:\n                c = w[-col]\n                if c in order:\n                    if is_tot:\n                        kind = \"check\"\n                    else:\n                        kind = \"seen\"\n                else:\n                    if is_tot:\n                        kind = \"derive\"\n                    else:\n                        kind = \"add\"\n                    order[c] = len(letters)\n                    letters.append(c)\n                steps.append((kind, order[c], tens))\n        tens *= 10\n\n    inits = [any(w[0] == c for w in words) for c in letters]\n\n    def helper(pos, delta):  # on success, returns True and pi has the correct values\n        if pos == len(steps):\n            return delta == 0\n\n        kind, i, tens = steps[pos]\n\n        if kind == \"seen\":\n            return helper(pos + 1, delta + tens * pi[i])\n\n        if kind == \"add\":\n            for j in range(i, 10):\n                if pi[j] != 0 or not inits[i]:  # not adding a leading 0\n                    pi[i], pi[j] = pi[j], pi[i]\n                    if helper(pos + 1, delta + tens * pi[i]):\n                        return True\n                    pi[i], pi[j] = pi[j], pi[i]\n            return False\n        if kind == \"check\":\n            delta -= tens * pi[i]\n            return (delta % (10 * tens)) == 0 and helper(pos + 1, delta)\n\n        assert kind == \"derive\"\n        digit = (delta % (10 * tens)) // tens\n        if digit == 0 and inits[i]:\n            return False  # would be a leading 0\n        j = pi.index(digit)\n        if j < i:\n            return False  # already used\n        pi[i], pi[j] = pi[j], pi[i]\n        if helper(pos + 1, delta - tens * digit):\n            return True\n        pi[i], pi[j] = pi[j], pi[i]\n        return False\n\n    assert helper(0, 0)\n    return [int(\"\".join(str(pi[order[c]]) for c in w)) for w in words]"
    ],
    "module": "classic_puzzles",
    "notes": "Find a substitution of digits for characters to make the numbers add up in a sum like this:\nSEND + MORE = MONEY\n\nThe first digit in any number cannot be 0. In this example the solution is `9567 + 1085 = 10652`.\nSee [Wikipedia article](https://en.wikipedia.org/wiki/Verbal_arithmetic)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "VerbalArithmetic_6",
    "sat": "def sat(li: List[int], words=['dbss', 'clla', 'wsqnv']):\n    \"\"\"\n    Find a list of integers corresponding to the given list of strings substituting a different digit for each\n    character, so that the last string corresponds to the sum of the previous numbers.\n    \"\"\"\n    assert len(li) == len(words) and all(i > 0 and len(str(i)) == len(w) for i, w in zip(li, words))\n    assert len({c for w in words for c in w}) == len({(d, c) for i, w in zip(li, words) for d, c in zip(str(i), w)})\n    return sum(li[:-1]) == li[-1]",
    "sols": [
      "def sol(words=['dbss', 'clla', 'wsqnv']):\n    pi = list(range(10))  # permutation\n    letters = []\n    order = {}\n    steps = []\n    tens = 1\n    for col in range(1, 1 + max(len(w) for w in words)):\n        for w in words:\n            is_tot = (w is words[-1])\n            if len(w) >= col:\n                c = w[-col]\n                if c in order:\n                    if is_tot:\n                        kind = \"check\"\n                    else:\n                        kind = \"seen\"\n                else:\n                    if is_tot:\n                        kind = \"derive\"\n                    else:\n                        kind = \"add\"\n                    order[c] = len(letters)\n                    letters.append(c)\n                steps.append((kind, order[c], tens))\n        tens *= 10\n\n    inits = [any(w[0] == c for w in words) for c in letters]\n\n    def helper(pos, delta):  # on success, returns True and pi has the correct values\n        if pos == len(steps):\n            return delta == 0\n\n        kind, i, tens = steps[pos]\n\n        if kind == \"seen\":\n            return helper(pos + 1, delta + tens * pi[i])\n\n        if kind == \"add\":\n            for j in range(i, 10):\n                if pi[j] != 0 or not inits[i]:  # not adding a leading 0\n                    pi[i], pi[j] = pi[j], pi[i]\n                    if helper(pos + 1, delta + tens * pi[i]):\n                        return True\n                    pi[i], pi[j] = pi[j], pi[i]\n            return False\n        if kind == \"check\":\n            delta -= tens * pi[i]\n            return (delta % (10 * tens)) == 0 and helper(pos + 1, delta)\n\n        assert kind == \"derive\"\n        digit = (delta % (10 * tens)) // tens\n        if digit == 0 and inits[i]:\n            return False  # would be a leading 0\n        j = pi.index(digit)\n        if j < i:\n            return False  # already used\n        pi[i], pi[j] = pi[j], pi[i]\n        if helper(pos + 1, delta - tens * digit):\n            return True\n        pi[i], pi[j] = pi[j], pi[i]\n        return False\n\n    assert helper(0, 0)\n    return [int(\"\".join(str(pi[order[c]]) for c in w)) for w in words]"
    ],
    "module": "classic_puzzles",
    "notes": "Find a substitution of digits for characters to make the numbers add up in a sum like this:\nSEND + MORE = MONEY\n\nThe first digit in any number cannot be 0. In this example the solution is `9567 + 1085 = 10652`.\nSee [Wikipedia article](https://en.wikipedia.org/wiki/Verbal_arithmetic)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "VerbalArithmetic_7",
    "sat": "def sat(li: List[int], words=['izko', 'yzyv', 'vyfy', 'ttvz', 'yikk', 'tfvf', 'vvfyf']):\n    \"\"\"\n    Find a list of integers corresponding to the given list of strings substituting a different digit for each\n    character, so that the last string corresponds to the sum of the previous numbers.\n    \"\"\"\n    assert len(li) == len(words) and all(i > 0 and len(str(i)) == len(w) for i, w in zip(li, words))\n    assert len({c for w in words for c in w}) == len({(d, c) for i, w in zip(li, words) for d, c in zip(str(i), w)})\n    return sum(li[:-1]) == li[-1]",
    "sols": [
      "def sol(words=['izko', 'yzyv', 'vyfy', 'ttvz', 'yikk', 'tfvf', 'vvfyf']):\n    pi = list(range(10))  # permutation\n    letters = []\n    order = {}\n    steps = []\n    tens = 1\n    for col in range(1, 1 + max(len(w) for w in words)):\n        for w in words:\n            is_tot = (w is words[-1])\n            if len(w) >= col:\n                c = w[-col]\n                if c in order:\n                    if is_tot:\n                        kind = \"check\"\n                    else:\n                        kind = \"seen\"\n                else:\n                    if is_tot:\n                        kind = \"derive\"\n                    else:\n                        kind = \"add\"\n                    order[c] = len(letters)\n                    letters.append(c)\n                steps.append((kind, order[c], tens))\n        tens *= 10\n\n    inits = [any(w[0] == c for w in words) for c in letters]\n\n    def helper(pos, delta):  # on success, returns True and pi has the correct values\n        if pos == len(steps):\n            return delta == 0\n\n        kind, i, tens = steps[pos]\n\n        if kind == \"seen\":\n            return helper(pos + 1, delta + tens * pi[i])\n\n        if kind == \"add\":\n            for j in range(i, 10):\n                if pi[j] != 0 or not inits[i]:  # not adding a leading 0\n                    pi[i], pi[j] = pi[j], pi[i]\n                    if helper(pos + 1, delta + tens * pi[i]):\n                        return True\n                    pi[i], pi[j] = pi[j], pi[i]\n            return False\n        if kind == \"check\":\n            delta -= tens * pi[i]\n            return (delta % (10 * tens)) == 0 and helper(pos + 1, delta)\n\n        assert kind == \"derive\"\n        digit = (delta % (10 * tens)) // tens\n        if digit == 0 and inits[i]:\n            return False  # would be a leading 0\n        j = pi.index(digit)\n        if j < i:\n            return False  # already used\n        pi[i], pi[j] = pi[j], pi[i]\n        if helper(pos + 1, delta - tens * digit):\n            return True\n        pi[i], pi[j] = pi[j], pi[i]\n        return False\n\n    assert helper(0, 0)\n    return [int(\"\".join(str(pi[order[c]]) for c in w)) for w in words]"
    ],
    "module": "classic_puzzles",
    "notes": "Find a substitution of digits for characters to make the numbers add up in a sum like this:\nSEND + MORE = MONEY\n\nThe first digit in any number cannot be 0. In this example the solution is `9567 + 1085 = 10652`.\nSee [Wikipedia article](https://en.wikipedia.org/wiki/Verbal_arithmetic)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "VerbalArithmetic_8",
    "sat": "def sat(li: List[int], words=['klkb', 'jckp', 'ggcs']):\n    \"\"\"\n    Find a list of integers corresponding to the given list of strings substituting a different digit for each\n    character, so that the last string corresponds to the sum of the previous numbers.\n    \"\"\"\n    assert len(li) == len(words) and all(i > 0 and len(str(i)) == len(w) for i, w in zip(li, words))\n    assert len({c for w in words for c in w}) == len({(d, c) for i, w in zip(li, words) for d, c in zip(str(i), w)})\n    return sum(li[:-1]) == li[-1]",
    "sols": [
      "def sol(words=['klkb', 'jckp', 'ggcs']):\n    pi = list(range(10))  # permutation\n    letters = []\n    order = {}\n    steps = []\n    tens = 1\n    for col in range(1, 1 + max(len(w) for w in words)):\n        for w in words:\n            is_tot = (w is words[-1])\n            if len(w) >= col:\n                c = w[-col]\n                if c in order:\n                    if is_tot:\n                        kind = \"check\"\n                    else:\n                        kind = \"seen\"\n                else:\n                    if is_tot:\n                        kind = \"derive\"\n                    else:\n                        kind = \"add\"\n                    order[c] = len(letters)\n                    letters.append(c)\n                steps.append((kind, order[c], tens))\n        tens *= 10\n\n    inits = [any(w[0] == c for w in words) for c in letters]\n\n    def helper(pos, delta):  # on success, returns True and pi has the correct values\n        if pos == len(steps):\n            return delta == 0\n\n        kind, i, tens = steps[pos]\n\n        if kind == \"seen\":\n            return helper(pos + 1, delta + tens * pi[i])\n\n        if kind == \"add\":\n            for j in range(i, 10):\n                if pi[j] != 0 or not inits[i]:  # not adding a leading 0\n                    pi[i], pi[j] = pi[j], pi[i]\n                    if helper(pos + 1, delta + tens * pi[i]):\n                        return True\n                    pi[i], pi[j] = pi[j], pi[i]\n            return False\n        if kind == \"check\":\n            delta -= tens * pi[i]\n            return (delta % (10 * tens)) == 0 and helper(pos + 1, delta)\n\n        assert kind == \"derive\"\n        digit = (delta % (10 * tens)) // tens\n        if digit == 0 and inits[i]:\n            return False  # would be a leading 0\n        j = pi.index(digit)\n        if j < i:\n            return False  # already used\n        pi[i], pi[j] = pi[j], pi[i]\n        if helper(pos + 1, delta - tens * digit):\n            return True\n        pi[i], pi[j] = pi[j], pi[i]\n        return False\n\n    assert helper(0, 0)\n    return [int(\"\".join(str(pi[order[c]]) for c in w)) for w in words]"
    ],
    "module": "classic_puzzles",
    "notes": "Find a substitution of digits for characters to make the numbers add up in a sum like this:\nSEND + MORE = MONEY\n\nThe first digit in any number cannot be 0. In this example the solution is `9567 + 1085 = 10652`.\nSee [Wikipedia article](https://en.wikipedia.org/wiki/Verbal_arithmetic)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "VerbalArithmetic_9",
    "sat": "def sat(li: List[int], words=['fccf', 'cffp', 'uuul']):\n    \"\"\"\n    Find a list of integers corresponding to the given list of strings substituting a different digit for each\n    character, so that the last string corresponds to the sum of the previous numbers.\n    \"\"\"\n    assert len(li) == len(words) and all(i > 0 and len(str(i)) == len(w) for i, w in zip(li, words))\n    assert len({c for w in words for c in w}) == len({(d, c) for i, w in zip(li, words) for d, c in zip(str(i), w)})\n    return sum(li[:-1]) == li[-1]",
    "sols": [
      "def sol(words=['fccf', 'cffp', 'uuul']):\n    pi = list(range(10))  # permutation\n    letters = []\n    order = {}\n    steps = []\n    tens = 1\n    for col in range(1, 1 + max(len(w) for w in words)):\n        for w in words:\n            is_tot = (w is words[-1])\n            if len(w) >= col:\n                c = w[-col]\n                if c in order:\n                    if is_tot:\n                        kind = \"check\"\n                    else:\n                        kind = \"seen\"\n                else:\n                    if is_tot:\n                        kind = \"derive\"\n                    else:\n                        kind = \"add\"\n                    order[c] = len(letters)\n                    letters.append(c)\n                steps.append((kind, order[c], tens))\n        tens *= 10\n\n    inits = [any(w[0] == c for w in words) for c in letters]\n\n    def helper(pos, delta):  # on success, returns True and pi has the correct values\n        if pos == len(steps):\n            return delta == 0\n\n        kind, i, tens = steps[pos]\n\n        if kind == \"seen\":\n            return helper(pos + 1, delta + tens * pi[i])\n\n        if kind == \"add\":\n            for j in range(i, 10):\n                if pi[j] != 0 or not inits[i]:  # not adding a leading 0\n                    pi[i], pi[j] = pi[j], pi[i]\n                    if helper(pos + 1, delta + tens * pi[i]):\n                        return True\n                    pi[i], pi[j] = pi[j], pi[i]\n            return False\n        if kind == \"check\":\n            delta -= tens * pi[i]\n            return (delta % (10 * tens)) == 0 and helper(pos + 1, delta)\n\n        assert kind == \"derive\"\n        digit = (delta % (10 * tens)) // tens\n        if digit == 0 and inits[i]:\n            return False  # would be a leading 0\n        j = pi.index(digit)\n        if j < i:\n            return False  # already used\n        pi[i], pi[j] = pi[j], pi[i]\n        if helper(pos + 1, delta - tens * digit):\n            return True\n        pi[i], pi[j] = pi[j], pi[i]\n        return False\n\n    assert helper(0, 0)\n    return [int(\"\".join(str(pi[order[c]]) for c in w)) for w in words]"
    ],
    "module": "classic_puzzles",
    "notes": "Find a substitution of digits for characters to make the numbers add up in a sum like this:\nSEND + MORE = MONEY\n\nThe first digit in any number cannot be 0. In this example the solution is `9567 + 1085 = 10652`.\nSee [Wikipedia article](https://en.wikipedia.org/wiki/Verbal_arithmetic)",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SlidingPuzzle_0",
    "sat": "def sat(moves: List[int], start=[[5, 0, 2, 3], [1, 9, 6, 7], [4, 14, 8, 11], [12, 13, 10, 15]]):\n    \"\"\"\n    In this puzzle, you are given a board like:\n    1 2 5\n    3 4 0\n    6 7 8\n\n    and your goal is to transform it to:\n    0 1 2\n    3 4 5\n    6 7 8\n\n    by a sequence of swaps with the 0 square (0 indicates blank). The starting configuration is given by a 2d list\n    of lists and the answer is represented by a list of integers indicating which number you swap with 0. In the\n    above example, an answer would be [1, 2, 5]\n    \"\"\"\n\n    locs = {i: [x, y] for y, row in enumerate(start) for x, i in enumerate(row)}  # locations, 0 stands for blank\n    for i in moves:\n        assert abs(locs[0][0] - locs[i][0]) + abs(locs[0][1] - locs[i][1]) == 1\n        locs[0], locs[i] = locs[i], locs[0]\n    return all(locs[i] == [i % len(start[0]), i // len(start)] for i in locs)",
    "sols": [
      "def sol(start=[[5, 0, 2, 3], [1, 9, 6, 7], [4, 14, 8, 11], [12, 13, 10, 15]]):\n    from collections import defaultdict\n    import math\n    d = len(start)\n    N = d * d\n    assert all(len(row) == d for row in start)\n\n    def get_state(\n            li):  # state is an integer with 4 bits for each slot and the last 4 bits indicate where the blank is\n        ans = 0\n        for i in li[::-1] + [li.index(0)]:\n            ans = (ans << 4) + i\n        return ans\n\n    start = get_state([i for row in start for i in row])\n    target = get_state(list(range(N)))\n\n    def h(state):  # manhattan distance\n        ans = 0\n        for i in range(N):\n            state = (state >> 4)\n            n = state & 15\n            if n != 0:\n                ans += abs(i % d - n % d) + abs(i // d - n // d)\n        return ans\n\n    g = defaultdict(lambda: math.inf)\n    g[start] = 0  # shortest p ath lengths\n    f = {start: h(start)}  # f[s] = g[s] + h(s)\n    backtrack = {}\n\n    todo = {start}\n    import heapq\n    heap = [(f[start], start)]\n\n    neighbors = [[i for i in [b - 1, b + 1, b + d, b - d] if i in range(N) and (b // d == i // d or b % d == i % d)]\n                 for b in range(N)]\n\n    def next_state(s, blank, i):\n        assert blank == (s & 15)\n        v = (s >> (4 * i + 4)) & 15\n        return s + (i - blank) + (v << (4 * blank + 4)) - (v << (4 * i + 4))\n\n    while todo:\n        (dist, s) = heapq.heappop(heap)\n        if f[s] < dist:\n            continue\n        if s == target:\n            # compute path\n            ans = []\n            while s != start:\n                s, i = backtrack[s]\n                ans.append((s >> (4 * i + 4)) & 15)\n            return ans[::-1]\n\n        todo.remove(s)\n\n        blank = s & 15\n        score = g[s] + 1\n        for i in neighbors[blank]:\n            s2 = next_state(s, blank, i)\n\n            if score < g[s2]:\n                # paths[s2] = paths[s] + [s[i]]\n                g[s2] = score\n                backtrack[s2] = (s, i)\n                score2 = score + h(s2)\n                f[s2] = score2\n                todo.add(s2)\n                heapq.heappush(heap, (score2, s2))"
    ],
    "module": "classic_puzzles",
    "notes": "[Sliding puzzle](https://en.wikipedia.org/wiki/15_puzzle)\nThe 3-, 8-, and 15-sliding puzzles are classic examples of A* search.\nThe problem is NP-hard but the puzzles can all be solved with A* and an efficient representation.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SlidingPuzzle_1",
    "sat": "def sat(moves: List[int], start=[[1, 5, 0], [3, 2, 8], [6, 4, 7]]):\n    \"\"\"\n    In this puzzle, you are given a board like:\n    1 2 5\n    3 4 0\n    6 7 8\n\n    and your goal is to transform it to:\n    0 1 2\n    3 4 5\n    6 7 8\n\n    by a sequence of swaps with the 0 square (0 indicates blank). The starting configuration is given by a 2d list\n    of lists and the answer is represented by a list of integers indicating which number you swap with 0. In the\n    above example, an answer would be [1, 2, 5]\n    \"\"\"\n\n    locs = {i: [x, y] for y, row in enumerate(start) for x, i in enumerate(row)}  # locations, 0 stands for blank\n    for i in moves:\n        assert abs(locs[0][0] - locs[i][0]) + abs(locs[0][1] - locs[i][1]) == 1\n        locs[0], locs[i] = locs[i], locs[0]\n    return all(locs[i] == [i % len(start[0]), i // len(start)] for i in locs)",
    "sols": [
      "def sol(start=[[1, 5, 0], [3, 2, 8], [6, 4, 7]]):\n    from collections import defaultdict\n    import math\n    d = len(start)\n    N = d * d\n    assert all(len(row) == d for row in start)\n\n    def get_state(\n            li):  # state is an integer with 4 bits for each slot and the last 4 bits indicate where the blank is\n        ans = 0\n        for i in li[::-1] + [li.index(0)]:\n            ans = (ans << 4) + i\n        return ans\n\n    start = get_state([i for row in start for i in row])\n    target = get_state(list(range(N)))\n\n    def h(state):  # manhattan distance\n        ans = 0\n        for i in range(N):\n            state = (state >> 4)\n            n = state & 15\n            if n != 0:\n                ans += abs(i % d - n % d) + abs(i // d - n // d)\n        return ans\n\n    g = defaultdict(lambda: math.inf)\n    g[start] = 0  # shortest p ath lengths\n    f = {start: h(start)}  # f[s] = g[s] + h(s)\n    backtrack = {}\n\n    todo = {start}\n    import heapq\n    heap = [(f[start], start)]\n\n    neighbors = [[i for i in [b - 1, b + 1, b + d, b - d] if i in range(N) and (b // d == i // d or b % d == i % d)]\n                 for b in range(N)]\n\n    def next_state(s, blank, i):\n        assert blank == (s & 15)\n        v = (s >> (4 * i + 4)) & 15\n        return s + (i - blank) + (v << (4 * blank + 4)) - (v << (4 * i + 4))\n\n    while todo:\n        (dist, s) = heapq.heappop(heap)\n        if f[s] < dist:\n            continue\n        if s == target:\n            # compute path\n            ans = []\n            while s != start:\n                s, i = backtrack[s]\n                ans.append((s >> (4 * i + 4)) & 15)\n            return ans[::-1]\n\n        todo.remove(s)\n\n        blank = s & 15\n        score = g[s] + 1\n        for i in neighbors[blank]:\n            s2 = next_state(s, blank, i)\n\n            if score < g[s2]:\n                # paths[s2] = paths[s] + [s[i]]\n                g[s2] = score\n                backtrack[s2] = (s, i)\n                score2 = score + h(s2)\n                f[s2] = score2\n                todo.add(s2)\n                heapq.heappush(heap, (score2, s2))"
    ],
    "module": "classic_puzzles",
    "notes": "[Sliding puzzle](https://en.wikipedia.org/wiki/15_puzzle)\nThe 3-, 8-, and 15-sliding puzzles are classic examples of A* search.\nThe problem is NP-hard but the puzzles can all be solved with A* and an efficient representation.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SlidingPuzzle_2",
    "sat": "def sat(moves: List[int], start=[[6, 0, 3], [7, 1, 4], [8, 2, 5]]):\n    \"\"\"\n    In this puzzle, you are given a board like:\n    1 2 5\n    3 4 0\n    6 7 8\n\n    and your goal is to transform it to:\n    0 1 2\n    3 4 5\n    6 7 8\n\n    by a sequence of swaps with the 0 square (0 indicates blank). The starting configuration is given by a 2d list\n    of lists and the answer is represented by a list of integers indicating which number you swap with 0. In the\n    above example, an answer would be [1, 2, 5]\n    \"\"\"\n\n    locs = {i: [x, y] for y, row in enumerate(start) for x, i in enumerate(row)}  # locations, 0 stands for blank\n    for i in moves:\n        assert abs(locs[0][0] - locs[i][0]) + abs(locs[0][1] - locs[i][1]) == 1\n        locs[0], locs[i] = locs[i], locs[0]\n    return all(locs[i] == [i % len(start[0]), i // len(start)] for i in locs)",
    "sols": [
      "def sol(start=[[6, 0, 3], [7, 1, 4], [8, 2, 5]]):\n    from collections import defaultdict\n    import math\n    d = len(start)\n    N = d * d\n    assert all(len(row) == d for row in start)\n\n    def get_state(\n            li):  # state is an integer with 4 bits for each slot and the last 4 bits indicate where the blank is\n        ans = 0\n        for i in li[::-1] + [li.index(0)]:\n            ans = (ans << 4) + i\n        return ans\n\n    start = get_state([i for row in start for i in row])\n    target = get_state(list(range(N)))\n\n    def h(state):  # manhattan distance\n        ans = 0\n        for i in range(N):\n            state = (state >> 4)\n            n = state & 15\n            if n != 0:\n                ans += abs(i % d - n % d) + abs(i // d - n // d)\n        return ans\n\n    g = defaultdict(lambda: math.inf)\n    g[start] = 0  # shortest p ath lengths\n    f = {start: h(start)}  # f[s] = g[s] + h(s)\n    backtrack = {}\n\n    todo = {start}\n    import heapq\n    heap = [(f[start], start)]\n\n    neighbors = [[i for i in [b - 1, b + 1, b + d, b - d] if i in range(N) and (b // d == i // d or b % d == i % d)]\n                 for b in range(N)]\n\n    def next_state(s, blank, i):\n        assert blank == (s & 15)\n        v = (s >> (4 * i + 4)) & 15\n        return s + (i - blank) + (v << (4 * blank + 4)) - (v << (4 * i + 4))\n\n    while todo:\n        (dist, s) = heapq.heappop(heap)\n        if f[s] < dist:\n            continue\n        if s == target:\n            # compute path\n            ans = []\n            while s != start:\n                s, i = backtrack[s]\n                ans.append((s >> (4 * i + 4)) & 15)\n            return ans[::-1]\n\n        todo.remove(s)\n\n        blank = s & 15\n        score = g[s] + 1\n        for i in neighbors[blank]:\n            s2 = next_state(s, blank, i)\n\n            if score < g[s2]:\n                # paths[s2] = paths[s] + [s[i]]\n                g[s2] = score\n                backtrack[s2] = (s, i)\n                score2 = score + h(s2)\n                f[s2] = score2\n                todo.add(s2)\n                heapq.heappush(heap, (score2, s2))"
    ],
    "module": "classic_puzzles",
    "notes": "[Sliding puzzle](https://en.wikipedia.org/wiki/15_puzzle)\nThe 3-, 8-, and 15-sliding puzzles are classic examples of A* search.\nThe problem is NP-hard but the puzzles can all be solved with A* and an efficient representation.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SlidingPuzzle_3",
    "sat": "def sat(moves: List[int], start=[[0, 1], [2, 3]]):\n    \"\"\"\n    In this puzzle, you are given a board like:\n    1 2 5\n    3 4 0\n    6 7 8\n\n    and your goal is to transform it to:\n    0 1 2\n    3 4 5\n    6 7 8\n\n    by a sequence of swaps with the 0 square (0 indicates blank). The starting configuration is given by a 2d list\n    of lists and the answer is represented by a list of integers indicating which number you swap with 0. In the\n    above example, an answer would be [1, 2, 5]\n    \"\"\"\n\n    locs = {i: [x, y] for y, row in enumerate(start) for x, i in enumerate(row)}  # locations, 0 stands for blank\n    for i in moves:\n        assert abs(locs[0][0] - locs[i][0]) + abs(locs[0][1] - locs[i][1]) == 1\n        locs[0], locs[i] = locs[i], locs[0]\n    return all(locs[i] == [i % len(start[0]), i // len(start)] for i in locs)",
    "sols": [
      "def sol(start=[[0, 1], [2, 3]]):\n    from collections import defaultdict\n    import math\n    d = len(start)\n    N = d * d\n    assert all(len(row) == d for row in start)\n\n    def get_state(\n            li):  # state is an integer with 4 bits for each slot and the last 4 bits indicate where the blank is\n        ans = 0\n        for i in li[::-1] + [li.index(0)]:\n            ans = (ans << 4) + i\n        return ans\n\n    start = get_state([i for row in start for i in row])\n    target = get_state(list(range(N)))\n\n    def h(state):  # manhattan distance\n        ans = 0\n        for i in range(N):\n            state = (state >> 4)\n            n = state & 15\n            if n != 0:\n                ans += abs(i % d - n % d) + abs(i // d - n // d)\n        return ans\n\n    g = defaultdict(lambda: math.inf)\n    g[start] = 0  # shortest p ath lengths\n    f = {start: h(start)}  # f[s] = g[s] + h(s)\n    backtrack = {}\n\n    todo = {start}\n    import heapq\n    heap = [(f[start], start)]\n\n    neighbors = [[i for i in [b - 1, b + 1, b + d, b - d] if i in range(N) and (b // d == i // d or b % d == i % d)]\n                 for b in range(N)]\n\n    def next_state(s, blank, i):\n        assert blank == (s & 15)\n        v = (s >> (4 * i + 4)) & 15\n        return s + (i - blank) + (v << (4 * blank + 4)) - (v << (4 * i + 4))\n\n    while todo:\n        (dist, s) = heapq.heappop(heap)\n        if f[s] < dist:\n            continue\n        if s == target:\n            # compute path\n            ans = []\n            while s != start:\n                s, i = backtrack[s]\n                ans.append((s >> (4 * i + 4)) & 15)\n            return ans[::-1]\n\n        todo.remove(s)\n\n        blank = s & 15\n        score = g[s] + 1\n        for i in neighbors[blank]:\n            s2 = next_state(s, blank, i)\n\n            if score < g[s2]:\n                # paths[s2] = paths[s] + [s[i]]\n                g[s2] = score\n                backtrack[s2] = (s, i)\n                score2 = score + h(s2)\n                f[s2] = score2\n                todo.add(s2)\n                heapq.heappush(heap, (score2, s2))"
    ],
    "module": "classic_puzzles",
    "notes": "[Sliding puzzle](https://en.wikipedia.org/wiki/15_puzzle)\nThe 3-, 8-, and 15-sliding puzzles are classic examples of A* search.\nThe problem is NP-hard but the puzzles can all be solved with A* and an efficient representation.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SlidingPuzzle_4",
    "sat": "def sat(moves: List[int], start=[[2, 1], [0, 3]]):\n    \"\"\"\n    In this puzzle, you are given a board like:\n    1 2 5\n    3 4 0\n    6 7 8\n\n    and your goal is to transform it to:\n    0 1 2\n    3 4 5\n    6 7 8\n\n    by a sequence of swaps with the 0 square (0 indicates blank). The starting configuration is given by a 2d list\n    of lists and the answer is represented by a list of integers indicating which number you swap with 0. In the\n    above example, an answer would be [1, 2, 5]\n    \"\"\"\n\n    locs = {i: [x, y] for y, row in enumerate(start) for x, i in enumerate(row)}  # locations, 0 stands for blank\n    for i in moves:\n        assert abs(locs[0][0] - locs[i][0]) + abs(locs[0][1] - locs[i][1]) == 1\n        locs[0], locs[i] = locs[i], locs[0]\n    return all(locs[i] == [i % len(start[0]), i // len(start)] for i in locs)",
    "sols": [
      "def sol(start=[[2, 1], [0, 3]]):\n    from collections import defaultdict\n    import math\n    d = len(start)\n    N = d * d\n    assert all(len(row) == d for row in start)\n\n    def get_state(\n            li):  # state is an integer with 4 bits for each slot and the last 4 bits indicate where the blank is\n        ans = 0\n        for i in li[::-1] + [li.index(0)]:\n            ans = (ans << 4) + i\n        return ans\n\n    start = get_state([i for row in start for i in row])\n    target = get_state(list(range(N)))\n\n    def h(state):  # manhattan distance\n        ans = 0\n        for i in range(N):\n            state = (state >> 4)\n            n = state & 15\n            if n != 0:\n                ans += abs(i % d - n % d) + abs(i // d - n // d)\n        return ans\n\n    g = defaultdict(lambda: math.inf)\n    g[start] = 0  # shortest p ath lengths\n    f = {start: h(start)}  # f[s] = g[s] + h(s)\n    backtrack = {}\n\n    todo = {start}\n    import heapq\n    heap = [(f[start], start)]\n\n    neighbors = [[i for i in [b - 1, b + 1, b + d, b - d] if i in range(N) and (b // d == i // d or b % d == i % d)]\n                 for b in range(N)]\n\n    def next_state(s, blank, i):\n        assert blank == (s & 15)\n        v = (s >> (4 * i + 4)) & 15\n        return s + (i - blank) + (v << (4 * blank + 4)) - (v << (4 * i + 4))\n\n    while todo:\n        (dist, s) = heapq.heappop(heap)\n        if f[s] < dist:\n            continue\n        if s == target:\n            # compute path\n            ans = []\n            while s != start:\n                s, i = backtrack[s]\n                ans.append((s >> (4 * i + 4)) & 15)\n            return ans[::-1]\n\n        todo.remove(s)\n\n        blank = s & 15\n        score = g[s] + 1\n        for i in neighbors[blank]:\n            s2 = next_state(s, blank, i)\n\n            if score < g[s2]:\n                # paths[s2] = paths[s] + [s[i]]\n                g[s2] = score\n                backtrack[s2] = (s, i)\n                score2 = score + h(s2)\n                f[s2] = score2\n                todo.add(s2)\n                heapq.heappush(heap, (score2, s2))"
    ],
    "module": "classic_puzzles",
    "notes": "[Sliding puzzle](https://en.wikipedia.org/wiki/15_puzzle)\nThe 3-, 8-, and 15-sliding puzzles are classic examples of A* search.\nThe problem is NP-hard but the puzzles can all be solved with A* and an efficient representation.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SlidingPuzzle_5",
    "sat": "def sat(moves: List[int], start=[[8, 0, 3, 7], [9, 4, 2, 15], [5, 6, 1, 11], [12, 10, 13, 14]]):\n    \"\"\"\n    In this puzzle, you are given a board like:\n    1 2 5\n    3 4 0\n    6 7 8\n\n    and your goal is to transform it to:\n    0 1 2\n    3 4 5\n    6 7 8\n\n    by a sequence of swaps with the 0 square (0 indicates blank). The starting configuration is given by a 2d list\n    of lists and the answer is represented by a list of integers indicating which number you swap with 0. In the\n    above example, an answer would be [1, 2, 5]\n    \"\"\"\n\n    locs = {i: [x, y] for y, row in enumerate(start) for x, i in enumerate(row)}  # locations, 0 stands for blank\n    for i in moves:\n        assert abs(locs[0][0] - locs[i][0]) + abs(locs[0][1] - locs[i][1]) == 1\n        locs[0], locs[i] = locs[i], locs[0]\n    return all(locs[i] == [i % len(start[0]), i // len(start)] for i in locs)",
    "sols": [
      "def sol(start=[[8, 0, 3, 7], [9, 4, 2, 15], [5, 6, 1, 11], [12, 10, 13, 14]]):\n    from collections import defaultdict\n    import math\n    d = len(start)\n    N = d * d\n    assert all(len(row) == d for row in start)\n\n    def get_state(\n            li):  # state is an integer with 4 bits for each slot and the last 4 bits indicate where the blank is\n        ans = 0\n        for i in li[::-1] + [li.index(0)]:\n            ans = (ans << 4) + i\n        return ans\n\n    start = get_state([i for row in start for i in row])\n    target = get_state(list(range(N)))\n\n    def h(state):  # manhattan distance\n        ans = 0\n        for i in range(N):\n            state = (state >> 4)\n            n = state & 15\n            if n != 0:\n                ans += abs(i % d - n % d) + abs(i // d - n // d)\n        return ans\n\n    g = defaultdict(lambda: math.inf)\n    g[start] = 0  # shortest p ath lengths\n    f = {start: h(start)}  # f[s] = g[s] + h(s)\n    backtrack = {}\n\n    todo = {start}\n    import heapq\n    heap = [(f[start], start)]\n\n    neighbors = [[i for i in [b - 1, b + 1, b + d, b - d] if i in range(N) and (b // d == i // d or b % d == i % d)]\n                 for b in range(N)]\n\n    def next_state(s, blank, i):\n        assert blank == (s & 15)\n        v = (s >> (4 * i + 4)) & 15\n        return s + (i - blank) + (v << (4 * blank + 4)) - (v << (4 * i + 4))\n\n    while todo:\n        (dist, s) = heapq.heappop(heap)\n        if f[s] < dist:\n            continue\n        if s == target:\n            # compute path\n            ans = []\n            while s != start:\n                s, i = backtrack[s]\n                ans.append((s >> (4 * i + 4)) & 15)\n            return ans[::-1]\n\n        todo.remove(s)\n\n        blank = s & 15\n        score = g[s] + 1\n        for i in neighbors[blank]:\n            s2 = next_state(s, blank, i)\n\n            if score < g[s2]:\n                # paths[s2] = paths[s] + [s[i]]\n                g[s2] = score\n                backtrack[s2] = (s, i)\n                score2 = score + h(s2)\n                f[s2] = score2\n                todo.add(s2)\n                heapq.heappush(heap, (score2, s2))"
    ],
    "module": "classic_puzzles",
    "notes": "[Sliding puzzle](https://en.wikipedia.org/wiki/15_puzzle)\nThe 3-, 8-, and 15-sliding puzzles are classic examples of A* search.\nThe problem is NP-hard but the puzzles can all be solved with A* and an efficient representation.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SlidingPuzzle_6",
    "sat": "def sat(moves: List[int], start=[[3, 1, 2], [4, 7, 0], [6, 8, 5]]):\n    \"\"\"\n    In this puzzle, you are given a board like:\n    1 2 5\n    3 4 0\n    6 7 8\n\n    and your goal is to transform it to:\n    0 1 2\n    3 4 5\n    6 7 8\n\n    by a sequence of swaps with the 0 square (0 indicates blank). The starting configuration is given by a 2d list\n    of lists and the answer is represented by a list of integers indicating which number you swap with 0. In the\n    above example, an answer would be [1, 2, 5]\n    \"\"\"\n\n    locs = {i: [x, y] for y, row in enumerate(start) for x, i in enumerate(row)}  # locations, 0 stands for blank\n    for i in moves:\n        assert abs(locs[0][0] - locs[i][0]) + abs(locs[0][1] - locs[i][1]) == 1\n        locs[0], locs[i] = locs[i], locs[0]\n    return all(locs[i] == [i % len(start[0]), i // len(start)] for i in locs)",
    "sols": [
      "def sol(start=[[3, 1, 2], [4, 7, 0], [6, 8, 5]]):\n    from collections import defaultdict\n    import math\n    d = len(start)\n    N = d * d\n    assert all(len(row) == d for row in start)\n\n    def get_state(\n            li):  # state is an integer with 4 bits for each slot and the last 4 bits indicate where the blank is\n        ans = 0\n        for i in li[::-1] + [li.index(0)]:\n            ans = (ans << 4) + i\n        return ans\n\n    start = get_state([i for row in start for i in row])\n    target = get_state(list(range(N)))\n\n    def h(state):  # manhattan distance\n        ans = 0\n        for i in range(N):\n            state = (state >> 4)\n            n = state & 15\n            if n != 0:\n                ans += abs(i % d - n % d) + abs(i // d - n // d)\n        return ans\n\n    g = defaultdict(lambda: math.inf)\n    g[start] = 0  # shortest p ath lengths\n    f = {start: h(start)}  # f[s] = g[s] + h(s)\n    backtrack = {}\n\n    todo = {start}\n    import heapq\n    heap = [(f[start], start)]\n\n    neighbors = [[i for i in [b - 1, b + 1, b + d, b - d] if i in range(N) and (b // d == i // d or b % d == i % d)]\n                 for b in range(N)]\n\n    def next_state(s, blank, i):\n        assert blank == (s & 15)\n        v = (s >> (4 * i + 4)) & 15\n        return s + (i - blank) + (v << (4 * blank + 4)) - (v << (4 * i + 4))\n\n    while todo:\n        (dist, s) = heapq.heappop(heap)\n        if f[s] < dist:\n            continue\n        if s == target:\n            # compute path\n            ans = []\n            while s != start:\n                s, i = backtrack[s]\n                ans.append((s >> (4 * i + 4)) & 15)\n            return ans[::-1]\n\n        todo.remove(s)\n\n        blank = s & 15\n        score = g[s] + 1\n        for i in neighbors[blank]:\n            s2 = next_state(s, blank, i)\n\n            if score < g[s2]:\n                # paths[s2] = paths[s] + [s[i]]\n                g[s2] = score\n                backtrack[s2] = (s, i)\n                score2 = score + h(s2)\n                f[s2] = score2\n                todo.add(s2)\n                heapq.heappush(heap, (score2, s2))"
    ],
    "module": "classic_puzzles",
    "notes": "[Sliding puzzle](https://en.wikipedia.org/wiki/15_puzzle)\nThe 3-, 8-, and 15-sliding puzzles are classic examples of A* search.\nThe problem is NP-hard but the puzzles can all be solved with A* and an efficient representation.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SlidingPuzzle_7",
    "sat": "def sat(moves: List[int], start=[[1, 5, 2, 3], [8, 4, 10, 7], [6, 0, 9, 11], [12, 13, 14, 15]]):\n    \"\"\"\n    In this puzzle, you are given a board like:\n    1 2 5\n    3 4 0\n    6 7 8\n\n    and your goal is to transform it to:\n    0 1 2\n    3 4 5\n    6 7 8\n\n    by a sequence of swaps with the 0 square (0 indicates blank). The starting configuration is given by a 2d list\n    of lists and the answer is represented by a list of integers indicating which number you swap with 0. In the\n    above example, an answer would be [1, 2, 5]\n    \"\"\"\n\n    locs = {i: [x, y] for y, row in enumerate(start) for x, i in enumerate(row)}  # locations, 0 stands for blank\n    for i in moves:\n        assert abs(locs[0][0] - locs[i][0]) + abs(locs[0][1] - locs[i][1]) == 1\n        locs[0], locs[i] = locs[i], locs[0]\n    return all(locs[i] == [i % len(start[0]), i // len(start)] for i in locs)",
    "sols": [
      "def sol(start=[[1, 5, 2, 3], [8, 4, 10, 7], [6, 0, 9, 11], [12, 13, 14, 15]]):\n    from collections import defaultdict\n    import math\n    d = len(start)\n    N = d * d\n    assert all(len(row) == d for row in start)\n\n    def get_state(\n            li):  # state is an integer with 4 bits for each slot and the last 4 bits indicate where the blank is\n        ans = 0\n        for i in li[::-1] + [li.index(0)]:\n            ans = (ans << 4) + i\n        return ans\n\n    start = get_state([i for row in start for i in row])\n    target = get_state(list(range(N)))\n\n    def h(state):  # manhattan distance\n        ans = 0\n        for i in range(N):\n            state = (state >> 4)\n            n = state & 15\n            if n != 0:\n                ans += abs(i % d - n % d) + abs(i // d - n // d)\n        return ans\n\n    g = defaultdict(lambda: math.inf)\n    g[start] = 0  # shortest p ath lengths\n    f = {start: h(start)}  # f[s] = g[s] + h(s)\n    backtrack = {}\n\n    todo = {start}\n    import heapq\n    heap = [(f[start], start)]\n\n    neighbors = [[i for i in [b - 1, b + 1, b + d, b - d] if i in range(N) and (b // d == i // d or b % d == i % d)]\n                 for b in range(N)]\n\n    def next_state(s, blank, i):\n        assert blank == (s & 15)\n        v = (s >> (4 * i + 4)) & 15\n        return s + (i - blank) + (v << (4 * blank + 4)) - (v << (4 * i + 4))\n\n    while todo:\n        (dist, s) = heapq.heappop(heap)\n        if f[s] < dist:\n            continue\n        if s == target:\n            # compute path\n            ans = []\n            while s != start:\n                s, i = backtrack[s]\n                ans.append((s >> (4 * i + 4)) & 15)\n            return ans[::-1]\n\n        todo.remove(s)\n\n        blank = s & 15\n        score = g[s] + 1\n        for i in neighbors[blank]:\n            s2 = next_state(s, blank, i)\n\n            if score < g[s2]:\n                # paths[s2] = paths[s] + [s[i]]\n                g[s2] = score\n                backtrack[s2] = (s, i)\n                score2 = score + h(s2)\n                f[s2] = score2\n                todo.add(s2)\n                heapq.heappush(heap, (score2, s2))"
    ],
    "module": "classic_puzzles",
    "notes": "[Sliding puzzle](https://en.wikipedia.org/wiki/15_puzzle)\nThe 3-, 8-, and 15-sliding puzzles are classic examples of A* search.\nThe problem is NP-hard but the puzzles can all be solved with A* and an efficient representation.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SlidingPuzzle_8",
    "sat": "def sat(moves: List[int], start=[[3, 2, 5], [4, 1, 8], [0, 6, 7]]):\n    \"\"\"\n    In this puzzle, you are given a board like:\n    1 2 5\n    3 4 0\n    6 7 8\n\n    and your goal is to transform it to:\n    0 1 2\n    3 4 5\n    6 7 8\n\n    by a sequence of swaps with the 0 square (0 indicates blank). The starting configuration is given by a 2d list\n    of lists and the answer is represented by a list of integers indicating which number you swap with 0. In the\n    above example, an answer would be [1, 2, 5]\n    \"\"\"\n\n    locs = {i: [x, y] for y, row in enumerate(start) for x, i in enumerate(row)}  # locations, 0 stands for blank\n    for i in moves:\n        assert abs(locs[0][0] - locs[i][0]) + abs(locs[0][1] - locs[i][1]) == 1\n        locs[0], locs[i] = locs[i], locs[0]\n    return all(locs[i] == [i % len(start[0]), i // len(start)] for i in locs)",
    "sols": [
      "def sol(start=[[3, 2, 5], [4, 1, 8], [0, 6, 7]]):\n    from collections import defaultdict\n    import math\n    d = len(start)\n    N = d * d\n    assert all(len(row) == d for row in start)\n\n    def get_state(\n            li):  # state is an integer with 4 bits for each slot and the last 4 bits indicate where the blank is\n        ans = 0\n        for i in li[::-1] + [li.index(0)]:\n            ans = (ans << 4) + i\n        return ans\n\n    start = get_state([i for row in start for i in row])\n    target = get_state(list(range(N)))\n\n    def h(state):  # manhattan distance\n        ans = 0\n        for i in range(N):\n            state = (state >> 4)\n            n = state & 15\n            if n != 0:\n                ans += abs(i % d - n % d) + abs(i // d - n // d)\n        return ans\n\n    g = defaultdict(lambda: math.inf)\n    g[start] = 0  # shortest p ath lengths\n    f = {start: h(start)}  # f[s] = g[s] + h(s)\n    backtrack = {}\n\n    todo = {start}\n    import heapq\n    heap = [(f[start], start)]\n\n    neighbors = [[i for i in [b - 1, b + 1, b + d, b - d] if i in range(N) and (b // d == i // d or b % d == i % d)]\n                 for b in range(N)]\n\n    def next_state(s, blank, i):\n        assert blank == (s & 15)\n        v = (s >> (4 * i + 4)) & 15\n        return s + (i - blank) + (v << (4 * blank + 4)) - (v << (4 * i + 4))\n\n    while todo:\n        (dist, s) = heapq.heappop(heap)\n        if f[s] < dist:\n            continue\n        if s == target:\n            # compute path\n            ans = []\n            while s != start:\n                s, i = backtrack[s]\n                ans.append((s >> (4 * i + 4)) & 15)\n            return ans[::-1]\n\n        todo.remove(s)\n\n        blank = s & 15\n        score = g[s] + 1\n        for i in neighbors[blank]:\n            s2 = next_state(s, blank, i)\n\n            if score < g[s2]:\n                # paths[s2] = paths[s] + [s[i]]\n                g[s2] = score\n                backtrack[s2] = (s, i)\n                score2 = score + h(s2)\n                f[s2] = score2\n                todo.add(s2)\n                heapq.heappush(heap, (score2, s2))"
    ],
    "module": "classic_puzzles",
    "notes": "[Sliding puzzle](https://en.wikipedia.org/wiki/15_puzzle)\nThe 3-, 8-, and 15-sliding puzzles are classic examples of A* search.\nThe problem is NP-hard but the puzzles can all be solved with A* and an efficient representation.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SlidingPuzzle_9",
    "sat": "def sat(moves: List[int], start=[[2, 8, 4], [5, 0, 3], [1, 6, 7]]):\n    \"\"\"\n    In this puzzle, you are given a board like:\n    1 2 5\n    3 4 0\n    6 7 8\n\n    and your goal is to transform it to:\n    0 1 2\n    3 4 5\n    6 7 8\n\n    by a sequence of swaps with the 0 square (0 indicates blank). The starting configuration is given by a 2d list\n    of lists and the answer is represented by a list of integers indicating which number you swap with 0. In the\n    above example, an answer would be [1, 2, 5]\n    \"\"\"\n\n    locs = {i: [x, y] for y, row in enumerate(start) for x, i in enumerate(row)}  # locations, 0 stands for blank\n    for i in moves:\n        assert abs(locs[0][0] - locs[i][0]) + abs(locs[0][1] - locs[i][1]) == 1\n        locs[0], locs[i] = locs[i], locs[0]\n    return all(locs[i] == [i % len(start[0]), i // len(start)] for i in locs)",
    "sols": [
      "def sol(start=[[2, 8, 4], [5, 0, 3], [1, 6, 7]]):\n    from collections import defaultdict\n    import math\n    d = len(start)\n    N = d * d\n    assert all(len(row) == d for row in start)\n\n    def get_state(\n            li):  # state is an integer with 4 bits for each slot and the last 4 bits indicate where the blank is\n        ans = 0\n        for i in li[::-1] + [li.index(0)]:\n            ans = (ans << 4) + i\n        return ans\n\n    start = get_state([i for row in start for i in row])\n    target = get_state(list(range(N)))\n\n    def h(state):  # manhattan distance\n        ans = 0\n        for i in range(N):\n            state = (state >> 4)\n            n = state & 15\n            if n != 0:\n                ans += abs(i % d - n % d) + abs(i // d - n // d)\n        return ans\n\n    g = defaultdict(lambda: math.inf)\n    g[start] = 0  # shortest p ath lengths\n    f = {start: h(start)}  # f[s] = g[s] + h(s)\n    backtrack = {}\n\n    todo = {start}\n    import heapq\n    heap = [(f[start], start)]\n\n    neighbors = [[i for i in [b - 1, b + 1, b + d, b - d] if i in range(N) and (b // d == i // d or b % d == i % d)]\n                 for b in range(N)]\n\n    def next_state(s, blank, i):\n        assert blank == (s & 15)\n        v = (s >> (4 * i + 4)) & 15\n        return s + (i - blank) + (v << (4 * blank + 4)) - (v << (4 * i + 4))\n\n    while todo:\n        (dist, s) = heapq.heappop(heap)\n        if f[s] < dist:\n            continue\n        if s == target:\n            # compute path\n            ans = []\n            while s != start:\n                s, i = backtrack[s]\n                ans.append((s >> (4 * i + 4)) & 15)\n            return ans[::-1]\n\n        todo.remove(s)\n\n        blank = s & 15\n        score = g[s] + 1\n        for i in neighbors[blank]:\n            s2 = next_state(s, blank, i)\n\n            if score < g[s2]:\n                # paths[s2] = paths[s] + [s[i]]\n                g[s2] = score\n                backtrack[s2] = (s, i)\n                score2 = score + h(s2)\n                f[s2] = score2\n                todo.add(s2)\n                heapq.heappush(heap, (score2, s2))"
    ],
    "module": "classic_puzzles",
    "notes": "[Sliding puzzle](https://en.wikipedia.org/wiki/15_puzzle)\nThe 3-, 8-, and 15-sliding puzzles are classic examples of A* search.\nThe problem is NP-hard but the puzzles can all be solved with A* and an efficient representation.",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "FindCloseElements_0",
    "sat": "def sat(pair: List[float], nums=[0.17, 21.3, 5.0, 9.0, 11.0, 4.99, 17.0, 17.0, 12.4, 6.8]):\n    \"\"\"\n    Given a list of numbers, find the two closest distinct numbers in the list.\n\n    Sample Input:\n    [1.2, 5.23, 0.89, 21.0, 5.28, 1.2]\n\n    Sample Output:\n    [5.23, 5.28]\n    \"\"\"\n    a, b = pair\n    assert a in nums and b in nums\n    return abs(a - b) == min({abs(x - y) for x in nums for y in nums} - {0})",
    "sols": [
      "def sol(nums=[0.17, 21.3, 5.0, 9.0, 11.0, 4.99, 17.0, 17.0, 12.4, 6.8]):\n    s = sorted(set(nums))\n    return min([[a, b] for a, b in zip(s, s[1:])], key=lambda x: x[1] - x[0])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#0",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindCloseElements_1",
    "sat": "def sat(pair: List[float], nums=[-3.027185809375565, -6.642297851887924, -6.773598672960938, 8.692593210252113, 4.9144452253248225, -6.773598672960938, -9.228605102488878]):\n    \"\"\"\n    Given a list of numbers, find the two closest distinct numbers in the list.\n\n    Sample Input:\n    [1.2, 5.23, 0.89, 21.0, 5.28, 1.2]\n\n    Sample Output:\n    [5.23, 5.28]\n    \"\"\"\n    a, b = pair\n    assert a in nums and b in nums\n    return abs(a - b) == min({abs(x - y) for x in nums for y in nums} - {0})",
    "sols": [
      "def sol(nums=[-3.027185809375565, -6.642297851887924, -6.773598672960938, 8.692593210252113, 4.9144452253248225, -6.773598672960938, -9.228605102488878]):\n    s = sorted(set(nums))\n    return min([[a, b] for a, b in zip(s, s[1:])], key=lambda x: x[1] - x[0])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#0",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindCloseElements_2",
    "sat": "def sat(pair: List[float], nums=[-1.5625078353699955, 3.6482553468598375, -2.6412688082759868, -0.511423740751141, -2.6412688082759868, 5.648091691238367]):\n    \"\"\"\n    Given a list of numbers, find the two closest distinct numbers in the list.\n\n    Sample Input:\n    [1.2, 5.23, 0.89, 21.0, 5.28, 1.2]\n\n    Sample Output:\n    [5.23, 5.28]\n    \"\"\"\n    a, b = pair\n    assert a in nums and b in nums\n    return abs(a - b) == min({abs(x - y) for x in nums for y in nums} - {0})",
    "sols": [
      "def sol(nums=[-1.5625078353699955, 3.6482553468598375, -2.6412688082759868, -0.511423740751141, -2.6412688082759868, 5.648091691238367]):\n    s = sorted(set(nums))\n    return min([[a, b] for a, b in zip(s, s[1:])], key=lambda x: x[1] - x[0])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#0",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindCloseElements_3",
    "sat": "def sat(pair: List[float], nums=[4.183381104176473, 1.6210985169040963, 1.6210985169040963]):\n    \"\"\"\n    Given a list of numbers, find the two closest distinct numbers in the list.\n\n    Sample Input:\n    [1.2, 5.23, 0.89, 21.0, 5.28, 1.2]\n\n    Sample Output:\n    [5.23, 5.28]\n    \"\"\"\n    a, b = pair\n    assert a in nums and b in nums\n    return abs(a - b) == min({abs(x - y) for x in nums for y in nums} - {0})",
    "sols": [
      "def sol(nums=[4.183381104176473, 1.6210985169040963, 1.6210985169040963]):\n    s = sorted(set(nums))\n    return min([[a, b] for a, b in zip(s, s[1:])], key=lambda x: x[1] - x[0])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#0",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindCloseElements_4",
    "sat": "def sat(pair: List[float], nums=[2.3934380222903258, -7.674333581672553, 2.3934380222903258]):\n    \"\"\"\n    Given a list of numbers, find the two closest distinct numbers in the list.\n\n    Sample Input:\n    [1.2, 5.23, 0.89, 21.0, 5.28, 1.2]\n\n    Sample Output:\n    [5.23, 5.28]\n    \"\"\"\n    a, b = pair\n    assert a in nums and b in nums\n    return abs(a - b) == min({abs(x - y) for x in nums for y in nums} - {0})",
    "sols": [
      "def sol(nums=[2.3934380222903258, -7.674333581672553, 2.3934380222903258]):\n    s = sorted(set(nums))\n    return min([[a, b] for a, b in zip(s, s[1:])], key=lambda x: x[1] - x[0])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#0",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindCloseElements_5",
    "sat": "def sat(pair: List[float], nums=[4.4066248039776, 2.2695696407128008, 4.4066248039776, 8.896776165217684, -2.1082490303294303, 3.6982209062203317]):\n    \"\"\"\n    Given a list of numbers, find the two closest distinct numbers in the list.\n\n    Sample Input:\n    [1.2, 5.23, 0.89, 21.0, 5.28, 1.2]\n\n    Sample Output:\n    [5.23, 5.28]\n    \"\"\"\n    a, b = pair\n    assert a in nums and b in nums\n    return abs(a - b) == min({abs(x - y) for x in nums for y in nums} - {0})",
    "sols": [
      "def sol(nums=[4.4066248039776, 2.2695696407128008, 4.4066248039776, 8.896776165217684, -2.1082490303294303, 3.6982209062203317]):\n    s = sorted(set(nums))\n    return min([[a, b] for a, b in zip(s, s[1:])], key=lambda x: x[1] - x[0])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#0",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindCloseElements_6",
    "sat": "def sat(pair: List[float], nums=[-5.348817893106599, 6.577244972670922, -3.306658224381504, 9.304306848774289, -5.348817893106599, 5.566413077192129]):\n    \"\"\"\n    Given a list of numbers, find the two closest distinct numbers in the list.\n\n    Sample Input:\n    [1.2, 5.23, 0.89, 21.0, 5.28, 1.2]\n\n    Sample Output:\n    [5.23, 5.28]\n    \"\"\"\n    a, b = pair\n    assert a in nums and b in nums\n    return abs(a - b) == min({abs(x - y) for x in nums for y in nums} - {0})",
    "sols": [
      "def sol(nums=[-5.348817893106599, 6.577244972670922, -3.306658224381504, 9.304306848774289, -5.348817893106599, 5.566413077192129]):\n    s = sorted(set(nums))\n    return min([[a, b] for a, b in zip(s, s[1:])], key=lambda x: x[1] - x[0])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#0",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindCloseElements_7",
    "sat": "def sat(pair: List[float], nums=[2.1353360138897983, 2.1353360138897983, -6.715603996279675]):\n    \"\"\"\n    Given a list of numbers, find the two closest distinct numbers in the list.\n\n    Sample Input:\n    [1.2, 5.23, 0.89, 21.0, 5.28, 1.2]\n\n    Sample Output:\n    [5.23, 5.28]\n    \"\"\"\n    a, b = pair\n    assert a in nums and b in nums\n    return abs(a - b) == min({abs(x - y) for x in nums for y in nums} - {0})",
    "sols": [
      "def sol(nums=[2.1353360138897983, 2.1353360138897983, -6.715603996279675]):\n    s = sorted(set(nums))\n    return min([[a, b] for a, b in zip(s, s[1:])], key=lambda x: x[1] - x[0])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#0",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindCloseElements_8",
    "sat": "def sat(pair: List[float], nums=[-3.302805356460694, -0.9275606055184937, 0.8435888675003671, -1.0213115593616848, 1.6677218153667184, 0.8435888675003671, -0.4235691659037357]):\n    \"\"\"\n    Given a list of numbers, find the two closest distinct numbers in the list.\n\n    Sample Input:\n    [1.2, 5.23, 0.89, 21.0, 5.28, 1.2]\n\n    Sample Output:\n    [5.23, 5.28]\n    \"\"\"\n    a, b = pair\n    assert a in nums and b in nums\n    return abs(a - b) == min({abs(x - y) for x in nums for y in nums} - {0})",
    "sols": [
      "def sol(nums=[-3.302805356460694, -0.9275606055184937, 0.8435888675003671, -1.0213115593616848, 1.6677218153667184, 0.8435888675003671, -0.4235691659037357]):\n    s = sorted(set(nums))\n    return min([[a, b] for a, b in zip(s, s[1:])], key=lambda x: x[1] - x[0])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#0",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindCloseElements_9",
    "sat": "def sat(pair: List[float], nums=[-6.506446563143804, 1.442971309818974, -9.035414427546307, -5.396252925967609, -1.211336273420379, -9.06894227453712, 1.092136912296377, 1.092136912296377, 0.08234740859202105]):\n    \"\"\"\n    Given a list of numbers, find the two closest distinct numbers in the list.\n\n    Sample Input:\n    [1.2, 5.23, 0.89, 21.0, 5.28, 1.2]\n\n    Sample Output:\n    [5.23, 5.28]\n    \"\"\"\n    a, b = pair\n    assert a in nums and b in nums\n    return abs(a - b) == min({abs(x - y) for x in nums for y in nums} - {0})",
    "sols": [
      "def sol(nums=[-6.506446563143804, 1.442971309818974, -9.035414427546307, -5.396252925967609, -1.211336273420379, -9.06894227453712, 1.092136912296377, 1.092136912296377, 0.08234740859202105]):\n    s = sorted(set(nums))\n    return min([[a, b] for a, b in zip(s, s[1:])], key=lambda x: x[1] - x[0])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#0",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SeparateParenGroups_0",
    "sat": "def sat(ls: List[str], combined=\"() (()) ((() () ())) (() )\"):\n    \"\"\"\n    Given a string consisting of whitespace and groups of matched parentheses, split it\n    into groups of perfectly matched parentheses without any whitespace.\n\n    Sample Input:\n    '( ()) ((()()())) (()) ()'\n\n    Sample Output:\n    ['(())', '((()()()))', '(())', '()']\n    \"\"\"\n    assert ''.join(ls) == combined.replace(' ', '')\n    for s in ls:  # check that s is not further divisible\n        depth = 0\n        for c in s[:-1]:\n            if c == '(':\n                depth += 1\n            else:\n                assert c == ')'\n                depth -= 1\n                assert depth >= 1\n        assert depth == 1 and s[-1] == ')'\n    return True",
    "sols": [
      "def sol(combined=\"() (()) ((() () ())) (() )\"):\n    cur = ''\n    ans = []\n    depth = 0\n    for c in combined.replace(' ', ''):\n        cur += c\n        if c == '(':\n            depth += 1\n        else:\n            assert c == ')'\n            depth -= 1\n            if depth == 0:\n                ans.append(cur)\n                cur = ''\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#1",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SeparateParenGroups_1",
    "sat": "def sat(ls: List[str], combined=\"()  () \"):\n    \"\"\"\n    Given a string consisting of whitespace and groups of matched parentheses, split it\n    into groups of perfectly matched parentheses without any whitespace.\n\n    Sample Input:\n    '( ()) ((()()())) (()) ()'\n\n    Sample Output:\n    ['(())', '((()()()))', '(())', '()']\n    \"\"\"\n    assert ''.join(ls) == combined.replace(' ', '')\n    for s in ls:  # check that s is not further divisible\n        depth = 0\n        for c in s[:-1]:\n            if c == '(':\n                depth += 1\n            else:\n                assert c == ')'\n                depth -= 1\n                assert depth >= 1\n        assert depth == 1 and s[-1] == ')'\n    return True",
    "sols": [
      "def sol(combined=\"()  () \"):\n    cur = ''\n    ans = []\n    depth = 0\n    for c in combined.replace(' ', ''):\n        cur += c\n        if c == '(':\n            depth += 1\n        else:\n            assert c == ')'\n            depth -= 1\n            if depth == 0:\n                ans.append(cur)\n                cur = ''\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#1",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SeparateParenGroups_2",
    "sat": "def sat(ls: List[str], combined=\" ((((() ())( ( ))())))   \"):\n    \"\"\"\n    Given a string consisting of whitespace and groups of matched parentheses, split it\n    into groups of perfectly matched parentheses without any whitespace.\n\n    Sample Input:\n    '( ()) ((()()())) (()) ()'\n\n    Sample Output:\n    ['(())', '((()()()))', '(())', '()']\n    \"\"\"\n    assert ''.join(ls) == combined.replace(' ', '')\n    for s in ls:  # check that s is not further divisible\n        depth = 0\n        for c in s[:-1]:\n            if c == '(':\n                depth += 1\n            else:\n                assert c == ')'\n                depth -= 1\n                assert depth >= 1\n        assert depth == 1 and s[-1] == ')'\n    return True",
    "sols": [
      "def sol(combined=\" ((((() ())( ( ))())))   \"):\n    cur = ''\n    ans = []\n    depth = 0\n    for c in combined.replace(' ', ''):\n        cur += c\n        if c == '(':\n            depth += 1\n        else:\n            assert c == ')'\n            depth -= 1\n            if depth == 0:\n                ans.append(cur)\n                cur = ''\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#1",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SeparateParenGroups_3",
    "sat": "def sat(ls: List[str], combined=\"()   \"):\n    \"\"\"\n    Given a string consisting of whitespace and groups of matched parentheses, split it\n    into groups of perfectly matched parentheses without any whitespace.\n\n    Sample Input:\n    '( ()) ((()()())) (()) ()'\n\n    Sample Output:\n    ['(())', '((()()()))', '(())', '()']\n    \"\"\"\n    assert ''.join(ls) == combined.replace(' ', '')\n    for s in ls:  # check that s is not further divisible\n        depth = 0\n        for c in s[:-1]:\n            if c == '(':\n                depth += 1\n            else:\n                assert c == ')'\n                depth -= 1\n                assert depth >= 1\n        assert depth == 1 and s[-1] == ')'\n    return True",
    "sols": [
      "def sol(combined=\"()   \"):\n    cur = ''\n    ans = []\n    depth = 0\n    for c in combined.replace(' ', ''):\n        cur += c\n        if c == '(':\n            depth += 1\n        else:\n            assert c == ')'\n            depth -= 1\n            if depth == 0:\n                ans.append(cur)\n                cur = ''\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#1",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SeparateParenGroups_4",
    "sat": "def sat(ls: List[str], combined=\"(() )(( )()  ) ((( (()))(()(()() ( )( ()) )( ( )( )) (() )) )()) (( ))    \"):\n    \"\"\"\n    Given a string consisting of whitespace and groups of matched parentheses, split it\n    into groups of perfectly matched parentheses without any whitespace.\n\n    Sample Input:\n    '( ()) ((()()())) (()) ()'\n\n    Sample Output:\n    ['(())', '((()()()))', '(())', '()']\n    \"\"\"\n    assert ''.join(ls) == combined.replace(' ', '')\n    for s in ls:  # check that s is not further divisible\n        depth = 0\n        for c in s[:-1]:\n            if c == '(':\n                depth += 1\n            else:\n                assert c == ')'\n                depth -= 1\n                assert depth >= 1\n        assert depth == 1 and s[-1] == ')'\n    return True",
    "sols": [
      "def sol(combined=\"(() )(( )()  ) ((( (()))(()(()() ( )( ()) )( ( )( )) (() )) )()) (( ))    \"):\n    cur = ''\n    ans = []\n    depth = 0\n    for c in combined.replace(' ', ''):\n        cur += c\n        if c == '(':\n            depth += 1\n        else:\n            assert c == ')'\n            depth -= 1\n            if depth == 0:\n                ans.append(cur)\n                cur = ''\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#1",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SeparateParenGroups_5",
    "sat": "def sat(ls: List[str], combined=\" \"):\n    \"\"\"\n    Given a string consisting of whitespace and groups of matched parentheses, split it\n    into groups of perfectly matched parentheses without any whitespace.\n\n    Sample Input:\n    '( ()) ((()()())) (()) ()'\n\n    Sample Output:\n    ['(())', '((()()()))', '(())', '()']\n    \"\"\"\n    assert ''.join(ls) == combined.replace(' ', '')\n    for s in ls:  # check that s is not further divisible\n        depth = 0\n        for c in s[:-1]:\n            if c == '(':\n                depth += 1\n            else:\n                assert c == ')'\n                depth -= 1\n                assert depth >= 1\n        assert depth == 1 and s[-1] == ')'\n    return True",
    "sols": [
      "def sol(combined=\" \"):\n    cur = ''\n    ans = []\n    depth = 0\n    for c in combined.replace(' ', ''):\n        cur += c\n        if c == '(':\n            depth += 1\n        else:\n            assert c == ')'\n            depth -= 1\n            if depth == 0:\n                ans.append(cur)\n                cur = ''\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#1",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SeparateParenGroups_6",
    "sat": "def sat(ls: List[str], combined=\"\"):\n    \"\"\"\n    Given a string consisting of whitespace and groups of matched parentheses, split it\n    into groups of perfectly matched parentheses without any whitespace.\n\n    Sample Input:\n    '( ()) ((()()())) (()) ()'\n\n    Sample Output:\n    ['(())', '((()()()))', '(())', '()']\n    \"\"\"\n    assert ''.join(ls) == combined.replace(' ', '')\n    for s in ls:  # check that s is not further divisible\n        depth = 0\n        for c in s[:-1]:\n            if c == '(':\n                depth += 1\n            else:\n                assert c == ')'\n                depth -= 1\n                assert depth >= 1\n        assert depth == 1 and s[-1] == ')'\n    return True",
    "sols": [
      "def sol(combined=\"\"):\n    cur = ''\n    ans = []\n    depth = 0\n    for c in combined.replace(' ', ''):\n        cur += c\n        if c == '(':\n            depth += 1\n        else:\n            assert c == ')'\n            depth -= 1\n            if depth == 0:\n                ans.append(cur)\n                cur = ''\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#1",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SeparateParenGroups_7",
    "sat": "def sat(ls: List[str], combined=\"  ((()()() )) \"):\n    \"\"\"\n    Given a string consisting of whitespace and groups of matched parentheses, split it\n    into groups of perfectly matched parentheses without any whitespace.\n\n    Sample Input:\n    '( ()) ((()()())) (()) ()'\n\n    Sample Output:\n    ['(())', '((()()()))', '(())', '()']\n    \"\"\"\n    assert ''.join(ls) == combined.replace(' ', '')\n    for s in ls:  # check that s is not further divisible\n        depth = 0\n        for c in s[:-1]:\n            if c == '(':\n                depth += 1\n            else:\n                assert c == ')'\n                depth -= 1\n                assert depth >= 1\n        assert depth == 1 and s[-1] == ')'\n    return True",
    "sols": [
      "def sol(combined=\"  ((()()() )) \"):\n    cur = ''\n    ans = []\n    depth = 0\n    for c in combined.replace(' ', ''):\n        cur += c\n        if c == '(':\n            depth += 1\n        else:\n            assert c == ')'\n            depth -= 1\n            if depth == 0:\n                ans.append(cur)\n                cur = ''\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#1",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SeparateParenGroups_8",
    "sat": "def sat(ls: List[str], combined=\" ()()\"):\n    \"\"\"\n    Given a string consisting of whitespace and groups of matched parentheses, split it\n    into groups of perfectly matched parentheses without any whitespace.\n\n    Sample Input:\n    '( ()) ((()()())) (()) ()'\n\n    Sample Output:\n    ['(())', '((()()()))', '(())', '()']\n    \"\"\"\n    assert ''.join(ls) == combined.replace(' ', '')\n    for s in ls:  # check that s is not further divisible\n        depth = 0\n        for c in s[:-1]:\n            if c == '(':\n                depth += 1\n            else:\n                assert c == ')'\n                depth -= 1\n                assert depth >= 1\n        assert depth == 1 and s[-1] == ')'\n    return True",
    "sols": [
      "def sol(combined=\" ()()\"):\n    cur = ''\n    ans = []\n    depth = 0\n    for c in combined.replace(' ', ''):\n        cur += c\n        if c == '(':\n            depth += 1\n        else:\n            assert c == ')'\n            depth -= 1\n            if depth == 0:\n                ans.append(cur)\n                cur = ''\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#1",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SeparateParenGroups_9",
    "sat": "def sat(ls: List[str], combined=\" ()  (   )(()) () ()  (()(())) \"):\n    \"\"\"\n    Given a string consisting of whitespace and groups of matched parentheses, split it\n    into groups of perfectly matched parentheses without any whitespace.\n\n    Sample Input:\n    '( ()) ((()()())) (()) ()'\n\n    Sample Output:\n    ['(())', '((()()()))', '(())', '()']\n    \"\"\"\n    assert ''.join(ls) == combined.replace(' ', '')\n    for s in ls:  # check that s is not further divisible\n        depth = 0\n        for c in s[:-1]:\n            if c == '(':\n                depth += 1\n            else:\n                assert c == ')'\n                depth -= 1\n                assert depth >= 1\n        assert depth == 1 and s[-1] == ')'\n    return True",
    "sols": [
      "def sol(combined=\" ()  (   )(()) () ()  (()(())) \"):\n    cur = ''\n    ans = []\n    depth = 0\n    for c in combined.replace(' ', ''):\n        cur += c\n        if c == '(':\n            depth += 1\n        else:\n            assert c == ')'\n            depth -= 1\n            if depth == 0:\n                ans.append(cur)\n                cur = ''\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#1",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Frac_0",
    "sat": "def sat(x: float, v=523.12892):\n    \"\"\"\n    Given a floating point number, find its fractional part.\n\n    Sample Input:\n    4.175\n\n    Sample Output:\n    0.175\n    \"\"\"\n    return 0 <= x < 1 and (v - x).is_integer()",
    "sols": [
      "def sol(v=523.12892):\n    return v % 1.0"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#2",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Frac_1",
    "sat": "def sat(x: float, v=93.86070917102649):\n    \"\"\"\n    Given a floating point number, find its fractional part.\n\n    Sample Input:\n    4.175\n\n    Sample Output:\n    0.175\n    \"\"\"\n    return 0 <= x < 1 and (v - x).is_integer()",
    "sols": [
      "def sol(v=93.86070917102649):\n    return v % 1.0"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#2",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Frac_2",
    "sat": "def sat(x: float, v=-6.770237138115334):\n    \"\"\"\n    Given a floating point number, find its fractional part.\n\n    Sample Input:\n    4.175\n\n    Sample Output:\n    0.175\n    \"\"\"\n    return 0 <= x < 1 and (v - x).is_integer()",
    "sols": [
      "def sol(v=-6.770237138115334):\n    return v % 1.0"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#2",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Frac_3",
    "sat": "def sat(x: float, v=61.58244309946389):\n    \"\"\"\n    Given a floating point number, find its fractional part.\n\n    Sample Input:\n    4.175\n\n    Sample Output:\n    0.175\n    \"\"\"\n    return 0 <= x < 1 and (v - x).is_integer()",
    "sols": [
      "def sol(v=61.58244309946389):\n    return v % 1.0"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#2",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Frac_4",
    "sat": "def sat(x: float, v=-80.9341003381162):\n    \"\"\"\n    Given a floating point number, find its fractional part.\n\n    Sample Input:\n    4.175\n\n    Sample Output:\n    0.175\n    \"\"\"\n    return 0 <= x < 1 and (v - x).is_integer()",
    "sols": [
      "def sol(v=-80.9341003381162):\n    return v % 1.0"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#2",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Frac_5",
    "sat": "def sat(x: float, v=45.312150343581436):\n    \"\"\"\n    Given a floating point number, find its fractional part.\n\n    Sample Input:\n    4.175\n\n    Sample Output:\n    0.175\n    \"\"\"\n    return 0 <= x < 1 and (v - x).is_integer()",
    "sols": [
      "def sol(v=45.312150343581436):\n    return v % 1.0"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#2",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Frac_6",
    "sat": "def sat(x: float, v=30.586879862686033):\n    \"\"\"\n    Given a floating point number, find its fractional part.\n\n    Sample Input:\n    4.175\n\n    Sample Output:\n    0.175\n    \"\"\"\n    return 0 <= x < 1 and (v - x).is_integer()",
    "sols": [
      "def sol(v=30.586879862686033):\n    return v % 1.0"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#2",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Frac_7",
    "sat": "def sat(x: float, v=88.37052850394048):\n    \"\"\"\n    Given a floating point number, find its fractional part.\n\n    Sample Input:\n    4.175\n\n    Sample Output:\n    0.175\n    \"\"\"\n    return 0 <= x < 1 and (v - x).is_integer()",
    "sols": [
      "def sol(v=88.37052850394048):\n    return v % 1.0"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#2",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Frac_8",
    "sat": "def sat(x: float, v=-31.50107826533474):\n    \"\"\"\n    Given a floating point number, find its fractional part.\n\n    Sample Input:\n    4.175\n\n    Sample Output:\n    0.175\n    \"\"\"\n    return 0 <= x < 1 and (v - x).is_integer()",
    "sols": [
      "def sol(v=-31.50107826533474):\n    return v % 1.0"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#2",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Frac_9",
    "sat": "def sat(x: float, v=43.984488185382816):\n    \"\"\"\n    Given a floating point number, find its fractional part.\n\n    Sample Input:\n    4.175\n\n    Sample Output:\n    0.175\n    \"\"\"\n    return 0 <= x < 1 and (v - x).is_integer()",
    "sols": [
      "def sol(v=43.984488185382816):\n    return v % 1.0"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#2",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FirstNegCumulative_0",
    "sat": "def sat(n: int, balances=[2, 7, -2, 4, 3, -15, 10, -45, 3]):\n    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals, find the *first* negative balance.\n\n    Sample Input:\n    [12, -5, 3, -99, 14, 88, -99]\n\n    Sample Output:\n    -89\n    \"\"\"\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return total == n",
    "sols": [
      "def sol(balances=[2, 7, -2, 4, 3, -15, 10, -45, 3]):\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return total\n    assert False, \"should not reach here\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FirstNegCumulative_1",
    "sat": "def sat(n: int, balances=[-1500518832, 928669978, -8834236111, 5315367227, 9459906565]):\n    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals, find the *first* negative balance.\n\n    Sample Input:\n    [12, -5, 3, -99, 14, 88, -99]\n\n    Sample Output:\n    -89\n    \"\"\"\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return total == n",
    "sols": [
      "def sol(balances=[-1500518832, 928669978, -8834236111, 5315367227, 9459906565]):\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return total\n    assert False, \"should not reach here\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FirstNegCumulative_2",
    "sat": "def sat(n: int, balances=[-922459571, 980368404, 2797206106, -8743339029, 1937237746]):\n    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals, find the *first* negative balance.\n\n    Sample Input:\n    [12, -5, 3, -99, 14, 88, -99]\n\n    Sample Output:\n    -89\n    \"\"\"\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return total == n",
    "sols": [
      "def sol(balances=[-922459571, 980368404, 2797206106, -8743339029, 1937237746]):\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return total\n    assert False, \"should not reach here\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FirstNegCumulative_3",
    "sat": "def sat(n: int, balances=[448159544, -6977868670, 3754789071, -9574236851, 5272792525, 5148246274]):\n    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals, find the *first* negative balance.\n\n    Sample Input:\n    [12, -5, 3, -99, 14, 88, -99]\n\n    Sample Output:\n    -89\n    \"\"\"\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return total == n",
    "sols": [
      "def sol(balances=[448159544, -6977868670, 3754789071, -9574236851, 5272792525, 5148246274]):\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return total\n    assert False, \"should not reach here\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FirstNegCumulative_4",
    "sat": "def sat(n: int, balances=[1626500291, 1679296308, -5081016101]):\n    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals, find the *first* negative balance.\n\n    Sample Input:\n    [12, -5, 3, -99, 14, 88, -99]\n\n    Sample Output:\n    -89\n    \"\"\"\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return total == n",
    "sols": [
      "def sol(balances=[1626500291, 1679296308, -5081016101]):\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return total\n    assert False, \"should not reach here\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FirstNegCumulative_5",
    "sat": "def sat(n: int, balances=[-4649290429, -8794342387, 9104512615, 8943500651, -9334877156, -8549860005, 7833776489]):\n    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals, find the *first* negative balance.\n\n    Sample Input:\n    [12, -5, 3, -99, 14, 88, -99]\n\n    Sample Output:\n    -89\n    \"\"\"\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return total == n",
    "sols": [
      "def sol(balances=[-4649290429, -8794342387, 9104512615, 8943500651, -9334877156, -8549860005, 7833776489]):\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return total\n    assert False, \"should not reach here\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FirstNegCumulative_6",
    "sat": "def sat(n: int, balances=[7722681537, 535145192, -1822889532, 1811860043, -7700960933, -1026876, -8774841983]):\n    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals, find the *first* negative balance.\n\n    Sample Input:\n    [12, -5, 3, -99, 14, 88, -99]\n\n    Sample Output:\n    -89\n    \"\"\"\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return total == n",
    "sols": [
      "def sol(balances=[7722681537, 535145192, -1822889532, 1811860043, -7700960933, -1026876, -8774841983]):\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return total\n    assert False, \"should not reach here\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FirstNegCumulative_7",
    "sat": "def sat(n: int, balances=[-3123263915, 8869957317, -7753864907, 4997669326, -8808060783]):\n    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals, find the *first* negative balance.\n\n    Sample Input:\n    [12, -5, 3, -99, 14, 88, -99]\n\n    Sample Output:\n    -89\n    \"\"\"\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return total == n",
    "sols": [
      "def sol(balances=[-3123263915, 8869957317, -7753864907, 4997669326, -8808060783]):\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return total\n    assert False, \"should not reach here\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FirstNegCumulative_8",
    "sat": "def sat(n: int, balances=[1847102451, -3353379777, -6456882318, 4952475033, -8953446440, 3180335566, -3990317955, 9933690368]):\n    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals, find the *first* negative balance.\n\n    Sample Input:\n    [12, -5, 3, -99, 14, 88, -99]\n\n    Sample Output:\n    -89\n    \"\"\"\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return total == n",
    "sols": [
      "def sol(balances=[1847102451, -3353379777, -6456882318, 4952475033, -8953446440, 3180335566, -3990317955, 9933690368]):\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return total\n    assert False, \"should not reach here\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FirstNegCumulative_9",
    "sat": "def sat(n: int, balances=[-3749703246]):\n    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals, find the *first* negative balance.\n\n    Sample Input:\n    [12, -5, 3, -99, 14, 88, -99]\n\n    Sample Output:\n    -89\n    \"\"\"\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return total == n",
    "sols": [
      "def sol(balances=[-3749703246]):\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return total\n    assert False, \"should not reach here\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NegCumulative_Trivial_0",
    "sat": "def sat(neg: bool, balances=[2, 7, -2, 4, 3, -15, 10, -45, 3]):\n    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals,\n    determine if the cumulative sum is negative.\n\n    Sample Input:\n    [12, -5, 3, -99, 14, 88, -99]\n\n    Sample Output:\n    True\n    \"\"\"\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return neg == True\n    return neg == False",
    "sols": [
      "def sol(balances=[2, 7, -2, 4, 3, -15, 10, -45, 3]):\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return True\n    return False"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3\n(see also FirstNegCumulative above which is not as trivial)\nThis version is a more direct translation of the problem but it can of course\nbe solved trivially just by trying both neg=True and neg=False",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NegCumulative_Trivial_1",
    "sat": "def sat(neg: bool, balances=[-5726556876, 9548457927, 4941492228, -8994209538, -506068440, -2469653530, -7098230219, -6476076828]):\n    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals,\n    determine if the cumulative sum is negative.\n\n    Sample Input:\n    [12, -5, 3, -99, 14, 88, -99]\n\n    Sample Output:\n    True\n    \"\"\"\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return neg == True\n    return neg == False",
    "sols": [
      "def sol(balances=[-5726556876, 9548457927, 4941492228, -8994209538, -506068440, -2469653530, -7098230219, -6476076828]):\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return True\n    return False"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3\n(see also FirstNegCumulative above which is not as trivial)\nThis version is a more direct translation of the problem but it can of course\nbe solved trivially just by trying both neg=True and neg=False",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NegCumulative_Trivial_2",
    "sat": "def sat(neg: bool, balances=[2523951572, 6693551682, -7050983998, -4495920585, 317504362, 2624005806, 1194371655, 2703815919, 7744962937]):\n    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals,\n    determine if the cumulative sum is negative.\n\n    Sample Input:\n    [12, -5, 3, -99, 14, 88, -99]\n\n    Sample Output:\n    True\n    \"\"\"\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return neg == True\n    return neg == False",
    "sols": [
      "def sol(balances=[2523951572, 6693551682, -7050983998, -4495920585, 317504362, 2624005806, 1194371655, 2703815919, 7744962937]):\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return True\n    return False"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3\n(see also FirstNegCumulative above which is not as trivial)\nThis version is a more direct translation of the problem but it can of course\nbe solved trivially just by trying both neg=True and neg=False",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NegCumulative_Trivial_3",
    "sat": "def sat(neg: bool, balances=[-1878150679, -7949120352, 6516381435, 5264967595, 4238494390, -836898764, -375886643]):\n    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals,\n    determine if the cumulative sum is negative.\n\n    Sample Input:\n    [12, -5, 3, -99, 14, 88, -99]\n\n    Sample Output:\n    True\n    \"\"\"\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return neg == True\n    return neg == False",
    "sols": [
      "def sol(balances=[-1878150679, -7949120352, 6516381435, 5264967595, 4238494390, -836898764, -375886643]):\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return True\n    return False"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3\n(see also FirstNegCumulative above which is not as trivial)\nThis version is a more direct translation of the problem but it can of course\nbe solved trivially just by trying both neg=True and neg=False",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NegCumulative_Trivial_4",
    "sat": "def sat(neg: bool, balances=[8512974517, -9578250052, -9393561543]):\n    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals,\n    determine if the cumulative sum is negative.\n\n    Sample Input:\n    [12, -5, 3, -99, 14, 88, -99]\n\n    Sample Output:\n    True\n    \"\"\"\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return neg == True\n    return neg == False",
    "sols": [
      "def sol(balances=[8512974517, -9578250052, -9393561543]):\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return True\n    return False"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3\n(see also FirstNegCumulative above which is not as trivial)\nThis version is a more direct translation of the problem but it can of course\nbe solved trivially just by trying both neg=True and neg=False",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NegCumulative_Trivial_5",
    "sat": "def sat(neg: bool, balances=[819198943, -8374129350, -340163677, 9027664863, 9887500029, -5880699598, -9800801952]):\n    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals,\n    determine if the cumulative sum is negative.\n\n    Sample Input:\n    [12, -5, 3, -99, 14, 88, -99]\n\n    Sample Output:\n    True\n    \"\"\"\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return neg == True\n    return neg == False",
    "sols": [
      "def sol(balances=[819198943, -8374129350, -340163677, 9027664863, 9887500029, -5880699598, -9800801952]):\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return True\n    return False"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3\n(see also FirstNegCumulative above which is not as trivial)\nThis version is a more direct translation of the problem but it can of course\nbe solved trivially just by trying both neg=True and neg=False",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NegCumulative_Trivial_6",
    "sat": "def sat(neg: bool, balances=[-9105594770, 1654568161]):\n    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals,\n    determine if the cumulative sum is negative.\n\n    Sample Input:\n    [12, -5, 3, -99, 14, 88, -99]\n\n    Sample Output:\n    True\n    \"\"\"\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return neg == True\n    return neg == False",
    "sols": [
      "def sol(balances=[-9105594770, 1654568161]):\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return True\n    return False"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3\n(see also FirstNegCumulative above which is not as trivial)\nThis version is a more direct translation of the problem but it can of course\nbe solved trivially just by trying both neg=True and neg=False",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NegCumulative_Trivial_7",
    "sat": "def sat(neg: bool, balances=[-4862413860, 8641354599, 760678303, -3887959811, 5787629016, -1622695410, 5978993091, 4424705778, 1277707228, -118370707]):\n    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals,\n    determine if the cumulative sum is negative.\n\n    Sample Input:\n    [12, -5, 3, -99, 14, 88, -99]\n\n    Sample Output:\n    True\n    \"\"\"\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return neg == True\n    return neg == False",
    "sols": [
      "def sol(balances=[-4862413860, 8641354599, 760678303, -3887959811, 5787629016, -1622695410, 5978993091, 4424705778, 1277707228, -118370707]):\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return True\n    return False"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3\n(see also FirstNegCumulative above which is not as trivial)\nThis version is a more direct translation of the problem but it can of course\nbe solved trivially just by trying both neg=True and neg=False",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NegCumulative_Trivial_8",
    "sat": "def sat(neg: bool, balances=[-7626026514]):\n    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals,\n    determine if the cumulative sum is negative.\n\n    Sample Input:\n    [12, -5, 3, -99, 14, 88, -99]\n\n    Sample Output:\n    True\n    \"\"\"\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return neg == True\n    return neg == False",
    "sols": [
      "def sol(balances=[-7626026514]):\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return True\n    return False"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3\n(see also FirstNegCumulative above which is not as trivial)\nThis version is a more direct translation of the problem but it can of course\nbe solved trivially just by trying both neg=True and neg=False",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NegCumulative_Trivial_9",
    "sat": "def sat(neg: bool, balances=[-431873320, -2316140651, 4629536217, 4014691442, 7097054761, -4557385606, -649758226, -9684230077, -1626687917]):\n    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals,\n    determine if the cumulative sum is negative.\n\n    Sample Input:\n    [12, -5, 3, -99, 14, 88, -99]\n\n    Sample Output:\n    True\n    \"\"\"\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return neg == True\n    return neg == False",
    "sols": [
      "def sol(balances=[-431873320, -2316140651, 4629536217, 4014691442, 7097054761, -4557385606, -649758226, -9684230077, -1626687917]):\n    total = 0\n    for b in balances:\n        total += b\n        if total < 0:\n            return True\n    return False"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3\n(see also FirstNegCumulative above which is not as trivial)\nThis version is a more direct translation of the problem but it can of course\nbe solved trivially just by trying both neg=True and neg=False",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MinSquaredDeviation_0",
    "sat": "def sat(x: float, nums=[12, -2, 14, 3, -15, 10, -45, 3, 30]):\n    \"\"\"\n    Given a list of numbers, find x that minimizes mean squared deviation.\n\n    Sample Input:\n    [4, -5, 17, -9, 14, 108, -9]\n\n    Sample Output:\n    17.14285\n    \"\"\"\n    return sum((n - x) ** 2 for n in nums) <= sum((m - n) ** 2 for m in nums for n in nums) * 0.501 / len(nums)",
    "sols": [
      "def sol(nums=[12, -2, 14, 3, -15, 10, -45, 3, 30]):\n    return sum(nums) / len(nums)  # mean minimizes mean squared deviation"
    ],
    "module": "human_eval",
    "notes": "Loosely inspired by [HumanEval](https://github.com/openai/human-eval) \\#4\n\nThe HumanEval problem was simply to compute the mean absolute deviation. This problem is more interesting.\nIt requires minimizing the sum of squared deviations, which turns out to be the mean `mu`. Moreover, if\n`mu` is the mean of the numbers then a simple calculation shows that:\n\n`sum((mu - n) ** 2 for n in nums) == sum((m - n) ** 2 for m in nums for n in nums) / (2 * len(nums))`\n\nWe use 0.501 rather than 1/2 to deal with rounding errors.",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MinSquaredDeviation_1",
    "sat": "def sat(x: float, nums=[-4800207686, 8371827478, -2589023797, -7433412105, -6597577390, -3672395364, 4220954653, -4921325759]):\n    \"\"\"\n    Given a list of numbers, find x that minimizes mean squared deviation.\n\n    Sample Input:\n    [4, -5, 17, -9, 14, 108, -9]\n\n    Sample Output:\n    17.14285\n    \"\"\"\n    return sum((n - x) ** 2 for n in nums) <= sum((m - n) ** 2 for m in nums for n in nums) * 0.501 / len(nums)",
    "sols": [
      "def sol(nums=[-4800207686, 8371827478, -2589023797, -7433412105, -6597577390, -3672395364, 4220954653, -4921325759]):\n    return sum(nums) / len(nums)  # mean minimizes mean squared deviation"
    ],
    "module": "human_eval",
    "notes": "Loosely inspired by [HumanEval](https://github.com/openai/human-eval) \\#4\n\nThe HumanEval problem was simply to compute the mean absolute deviation. This problem is more interesting.\nIt requires minimizing the sum of squared deviations, which turns out to be the mean `mu`. Moreover, if\n`mu` is the mean of the numbers then a simple calculation shows that:\n\n`sum((mu - n) ** 2 for n in nums) == sum((m - n) ** 2 for m in nums for n in nums) / (2 * len(nums))`\n\nWe use 0.501 rather than 1/2 to deal with rounding errors.",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MinSquaredDeviation_2",
    "sat": "def sat(x: float, nums=[-6451896480, 1412633776, -5942452034]):\n    \"\"\"\n    Given a list of numbers, find x that minimizes mean squared deviation.\n\n    Sample Input:\n    [4, -5, 17, -9, 14, 108, -9]\n\n    Sample Output:\n    17.14285\n    \"\"\"\n    return sum((n - x) ** 2 for n in nums) <= sum((m - n) ** 2 for m in nums for n in nums) * 0.501 / len(nums)",
    "sols": [
      "def sol(nums=[-6451896480, 1412633776, -5942452034]):\n    return sum(nums) / len(nums)  # mean minimizes mean squared deviation"
    ],
    "module": "human_eval",
    "notes": "Loosely inspired by [HumanEval](https://github.com/openai/human-eval) \\#4\n\nThe HumanEval problem was simply to compute the mean absolute deviation. This problem is more interesting.\nIt requires minimizing the sum of squared deviations, which turns out to be the mean `mu`. Moreover, if\n`mu` is the mean of the numbers then a simple calculation shows that:\n\n`sum((mu - n) ** 2 for n in nums) == sum((m - n) ** 2 for m in nums for n in nums) / (2 * len(nums))`\n\nWe use 0.501 rather than 1/2 to deal with rounding errors.",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MinSquaredDeviation_3",
    "sat": "def sat(x: float, nums=[8987893300, -829914892, 9470797463, 7249764363, -1364686955, 7237801639, 9599744595, 8505349699, -5635739184]):\n    \"\"\"\n    Given a list of numbers, find x that minimizes mean squared deviation.\n\n    Sample Input:\n    [4, -5, 17, -9, 14, 108, -9]\n\n    Sample Output:\n    17.14285\n    \"\"\"\n    return sum((n - x) ** 2 for n in nums) <= sum((m - n) ** 2 for m in nums for n in nums) * 0.501 / len(nums)",
    "sols": [
      "def sol(nums=[8987893300, -829914892, 9470797463, 7249764363, -1364686955, 7237801639, 9599744595, 8505349699, -5635739184]):\n    return sum(nums) / len(nums)  # mean minimizes mean squared deviation"
    ],
    "module": "human_eval",
    "notes": "Loosely inspired by [HumanEval](https://github.com/openai/human-eval) \\#4\n\nThe HumanEval problem was simply to compute the mean absolute deviation. This problem is more interesting.\nIt requires minimizing the sum of squared deviations, which turns out to be the mean `mu`. Moreover, if\n`mu` is the mean of the numbers then a simple calculation shows that:\n\n`sum((mu - n) ** 2 for n in nums) == sum((m - n) ** 2 for m in nums for n in nums) / (2 * len(nums))`\n\nWe use 0.501 rather than 1/2 to deal with rounding errors.",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MinSquaredDeviation_4",
    "sat": "def sat(x: float, nums=[7654638423, 4318192515, 747918779, 5017757184, -8266662968, -6056081845, 2102077564, -5930492836, 6820929042, 9536461987]):\n    \"\"\"\n    Given a list of numbers, find x that minimizes mean squared deviation.\n\n    Sample Input:\n    [4, -5, 17, -9, 14, 108, -9]\n\n    Sample Output:\n    17.14285\n    \"\"\"\n    return sum((n - x) ** 2 for n in nums) <= sum((m - n) ** 2 for m in nums for n in nums) * 0.501 / len(nums)",
    "sols": [
      "def sol(nums=[7654638423, 4318192515, 747918779, 5017757184, -8266662968, -6056081845, 2102077564, -5930492836, 6820929042, 9536461987]):\n    return sum(nums) / len(nums)  # mean minimizes mean squared deviation"
    ],
    "module": "human_eval",
    "notes": "Loosely inspired by [HumanEval](https://github.com/openai/human-eval) \\#4\n\nThe HumanEval problem was simply to compute the mean absolute deviation. This problem is more interesting.\nIt requires minimizing the sum of squared deviations, which turns out to be the mean `mu`. Moreover, if\n`mu` is the mean of the numbers then a simple calculation shows that:\n\n`sum((mu - n) ** 2 for n in nums) == sum((m - n) ** 2 for m in nums for n in nums) / (2 * len(nums))`\n\nWe use 0.501 rather than 1/2 to deal with rounding errors.",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MinSquaredDeviation_5",
    "sat": "def sat(x: float, nums=[8278843947, -924991709, -5422865408, -8116212764, 6689640576, 5117206777]):\n    \"\"\"\n    Given a list of numbers, find x that minimizes mean squared deviation.\n\n    Sample Input:\n    [4, -5, 17, -9, 14, 108, -9]\n\n    Sample Output:\n    17.14285\n    \"\"\"\n    return sum((n - x) ** 2 for n in nums) <= sum((m - n) ** 2 for m in nums for n in nums) * 0.501 / len(nums)",
    "sols": [
      "def sol(nums=[8278843947, -924991709, -5422865408, -8116212764, 6689640576, 5117206777]):\n    return sum(nums) / len(nums)  # mean minimizes mean squared deviation"
    ],
    "module": "human_eval",
    "notes": "Loosely inspired by [HumanEval](https://github.com/openai/human-eval) \\#4\n\nThe HumanEval problem was simply to compute the mean absolute deviation. This problem is more interesting.\nIt requires minimizing the sum of squared deviations, which turns out to be the mean `mu`. Moreover, if\n`mu` is the mean of the numbers then a simple calculation shows that:\n\n`sum((mu - n) ** 2 for n in nums) == sum((m - n) ** 2 for m in nums for n in nums) / (2 * len(nums))`\n\nWe use 0.501 rather than 1/2 to deal with rounding errors.",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MinSquaredDeviation_6",
    "sat": "def sat(x: float, nums=[8689960251]):\n    \"\"\"\n    Given a list of numbers, find x that minimizes mean squared deviation.\n\n    Sample Input:\n    [4, -5, 17, -9, 14, 108, -9]\n\n    Sample Output:\n    17.14285\n    \"\"\"\n    return sum((n - x) ** 2 for n in nums) <= sum((m - n) ** 2 for m in nums for n in nums) * 0.501 / len(nums)",
    "sols": [
      "def sol(nums=[8689960251]):\n    return sum(nums) / len(nums)  # mean minimizes mean squared deviation"
    ],
    "module": "human_eval",
    "notes": "Loosely inspired by [HumanEval](https://github.com/openai/human-eval) \\#4\n\nThe HumanEval problem was simply to compute the mean absolute deviation. This problem is more interesting.\nIt requires minimizing the sum of squared deviations, which turns out to be the mean `mu`. Moreover, if\n`mu` is the mean of the numbers then a simple calculation shows that:\n\n`sum((mu - n) ** 2 for n in nums) == sum((m - n) ** 2 for m in nums for n in nums) / (2 * len(nums))`\n\nWe use 0.501 rather than 1/2 to deal with rounding errors.",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MinSquaredDeviation_7",
    "sat": "def sat(x: float, nums=[-4016405599, 9692018006, -418854640, -2637200183]):\n    \"\"\"\n    Given a list of numbers, find x that minimizes mean squared deviation.\n\n    Sample Input:\n    [4, -5, 17, -9, 14, 108, -9]\n\n    Sample Output:\n    17.14285\n    \"\"\"\n    return sum((n - x) ** 2 for n in nums) <= sum((m - n) ** 2 for m in nums for n in nums) * 0.501 / len(nums)",
    "sols": [
      "def sol(nums=[-4016405599, 9692018006, -418854640, -2637200183]):\n    return sum(nums) / len(nums)  # mean minimizes mean squared deviation"
    ],
    "module": "human_eval",
    "notes": "Loosely inspired by [HumanEval](https://github.com/openai/human-eval) \\#4\n\nThe HumanEval problem was simply to compute the mean absolute deviation. This problem is more interesting.\nIt requires minimizing the sum of squared deviations, which turns out to be the mean `mu`. Moreover, if\n`mu` is the mean of the numbers then a simple calculation shows that:\n\n`sum((mu - n) ** 2 for n in nums) == sum((m - n) ** 2 for m in nums for n in nums) / (2 * len(nums))`\n\nWe use 0.501 rather than 1/2 to deal with rounding errors.",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MinSquaredDeviation_8",
    "sat": "def sat(x: float, nums=[-2336285685, -5415733392, 360863620, -9036443154, -3810903569]):\n    \"\"\"\n    Given a list of numbers, find x that minimizes mean squared deviation.\n\n    Sample Input:\n    [4, -5, 17, -9, 14, 108, -9]\n\n    Sample Output:\n    17.14285\n    \"\"\"\n    return sum((n - x) ** 2 for n in nums) <= sum((m - n) ** 2 for m in nums for n in nums) * 0.501 / len(nums)",
    "sols": [
      "def sol(nums=[-2336285685, -5415733392, 360863620, -9036443154, -3810903569]):\n    return sum(nums) / len(nums)  # mean minimizes mean squared deviation"
    ],
    "module": "human_eval",
    "notes": "Loosely inspired by [HumanEval](https://github.com/openai/human-eval) \\#4\n\nThe HumanEval problem was simply to compute the mean absolute deviation. This problem is more interesting.\nIt requires minimizing the sum of squared deviations, which turns out to be the mean `mu`. Moreover, if\n`mu` is the mean of the numbers then a simple calculation shows that:\n\n`sum((mu - n) ** 2 for n in nums) == sum((m - n) ** 2 for m in nums for n in nums) / (2 * len(nums))`\n\nWe use 0.501 rather than 1/2 to deal with rounding errors.",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MinSquaredDeviation_9",
    "sat": "def sat(x: float, nums=[-211025577]):\n    \"\"\"\n    Given a list of numbers, find x that minimizes mean squared deviation.\n\n    Sample Input:\n    [4, -5, 17, -9, 14, 108, -9]\n\n    Sample Output:\n    17.14285\n    \"\"\"\n    return sum((n - x) ** 2 for n in nums) <= sum((m - n) ** 2 for m in nums for n in nums) * 0.501 / len(nums)",
    "sols": [
      "def sol(nums=[-211025577]):\n    return sum(nums) / len(nums)  # mean minimizes mean squared deviation"
    ],
    "module": "human_eval",
    "notes": "Loosely inspired by [HumanEval](https://github.com/openai/human-eval) \\#4\n\nThe HumanEval problem was simply to compute the mean absolute deviation. This problem is more interesting.\nIt requires minimizing the sum of squared deviations, which turns out to be the mean `mu`. Moreover, if\n`mu` is the mean of the numbers then a simple calculation shows that:\n\n`sum((mu - n) ** 2 for n in nums) == sum((m - n) ** 2 for m in nums for n in nums) / (2 * len(nums))`\n\nWe use 0.501 rather than 1/2 to deal with rounding errors.",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Intersperse_0",
    "sat": "def sat(li: List[int], nums=[12, 23, -2, 5, 0], sep=4):\n    \"\"\"\n    Given a list of numbers and a number to inject, create a list containing that number in between each pair of\n    adjacent numbers.\n\n    Sample Input:\n    [8, 14, 21, 17, 9, -5], 3\n\n    Sample Output:\n    [8, 3, 14, 3, 21, 3, 17, 3, 9, 3, -5]\n    \"\"\"\n    assert len(li) == max(0, len(nums) * 2 - 1)\n    for i, n in enumerate(nums):\n        assert li[2 * i] == n\n        if i > 0:\n            assert li[2 * i - 1] == sep\n    return True",
    "sols": [
      "def sol(nums=[12, 23, -2, 5, 0], sep=4):\n    ans = [sep] * (2 * len(nums) - 1)\n    ans[::2] = nums\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#5\n\nThe one-liner version is `li[::2] == nums and li[1::2] == [sep] * (len(li) - 1)`",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Intersperse_1",
    "sat": "def sat(li: List[int], nums: List[int]=[], sep=23):\n    \"\"\"\n    Given a list of numbers and a number to inject, create a list containing that number in between each pair of\n    adjacent numbers.\n\n    Sample Input:\n    [8, 14, 21, 17, 9, -5], 3\n\n    Sample Output:\n    [8, 3, 14, 3, 21, 3, 17, 3, 9, 3, -5]\n    \"\"\"\n    assert len(li) == max(0, len(nums) * 2 - 1)\n    for i, n in enumerate(nums):\n        assert li[2 * i] == n\n        if i > 0:\n            assert li[2 * i - 1] == sep\n    return True",
    "sols": [
      "def sol(nums=[], sep=23):\n    ans = [sep] * (2 * len(nums) - 1)\n    ans[::2] = nums\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#5\n\nThe one-liner version is `li[::2] == nums and li[1::2] == [sep] * (len(li) - 1)`",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Intersperse_2",
    "sat": "def sat(li: List[int], nums=[90, 23, 0, 0, 36, 61, 73], sep=14):\n    \"\"\"\n    Given a list of numbers and a number to inject, create a list containing that number in between each pair of\n    adjacent numbers.\n\n    Sample Input:\n    [8, 14, 21, 17, 9, -5], 3\n\n    Sample Output:\n    [8, 3, 14, 3, 21, 3, 17, 3, 9, 3, -5]\n    \"\"\"\n    assert len(li) == max(0, len(nums) * 2 - 1)\n    for i, n in enumerate(nums):\n        assert li[2 * i] == n\n        if i > 0:\n            assert li[2 * i - 1] == sep\n    return True",
    "sols": [
      "def sol(nums=[90, 23, 0, 0, 36, 61, 73], sep=14):\n    ans = [sep] * (2 * len(nums) - 1)\n    ans[::2] = nums\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#5\n\nThe one-liner version is `li[::2] == nums and li[1::2] == [sep] * (len(li) - 1)`",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Intersperse_3",
    "sat": "def sat(li: List[int], nums=[41, 60, 18, 34, 31], sep=2):\n    \"\"\"\n    Given a list of numbers and a number to inject, create a list containing that number in between each pair of\n    adjacent numbers.\n\n    Sample Input:\n    [8, 14, 21, 17, 9, -5], 3\n\n    Sample Output:\n    [8, 3, 14, 3, 21, 3, 17, 3, 9, 3, -5]\n    \"\"\"\n    assert len(li) == max(0, len(nums) * 2 - 1)\n    for i, n in enumerate(nums):\n        assert li[2 * i] == n\n        if i > 0:\n            assert li[2 * i - 1] == sep\n    return True",
    "sols": [
      "def sol(nums=[41, 60, 18, 34, 31], sep=2):\n    ans = [sep] * (2 * len(nums) - 1)\n    ans[::2] = nums\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#5\n\nThe one-liner version is `li[::2] == nums and li[1::2] == [sep] * (len(li) - 1)`",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Intersperse_4",
    "sat": "def sat(li: List[int], nums=[39, 94, 99, 46, 93], sep=25):\n    \"\"\"\n    Given a list of numbers and a number to inject, create a list containing that number in between each pair of\n    adjacent numbers.\n\n    Sample Input:\n    [8, 14, 21, 17, 9, -5], 3\n\n    Sample Output:\n    [8, 3, 14, 3, 21, 3, 17, 3, 9, 3, -5]\n    \"\"\"\n    assert len(li) == max(0, len(nums) * 2 - 1)\n    for i, n in enumerate(nums):\n        assert li[2 * i] == n\n        if i > 0:\n            assert li[2 * i - 1] == sep\n    return True",
    "sols": [
      "def sol(nums=[39, 94, 99, 46, 93], sep=25):\n    ans = [sep] * (2 * len(nums) - 1)\n    ans[::2] = nums\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#5\n\nThe one-liner version is `li[::2] == nums and li[1::2] == [sep] * (len(li) - 1)`",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Intersperse_5",
    "sat": "def sat(li: List[int], nums=[10, 0, 18, 39, 23, 43, 2, 1, 32], sep=43):\n    \"\"\"\n    Given a list of numbers and a number to inject, create a list containing that number in between each pair of\n    adjacent numbers.\n\n    Sample Input:\n    [8, 14, 21, 17, 9, -5], 3\n\n    Sample Output:\n    [8, 3, 14, 3, 21, 3, 17, 3, 9, 3, -5]\n    \"\"\"\n    assert len(li) == max(0, len(nums) * 2 - 1)\n    for i, n in enumerate(nums):\n        assert li[2 * i] == n\n        if i > 0:\n            assert li[2 * i - 1] == sep\n    return True",
    "sols": [
      "def sol(nums=[10, 0, 18, 39, 23, 43, 2, 1, 32], sep=43):\n    ans = [sep] * (2 * len(nums) - 1)\n    ans[::2] = nums\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#5\n\nThe one-liner version is `li[::2] == nums and li[1::2] == [sep] * (len(li) - 1)`",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Intersperse_6",
    "sat": "def sat(li: List[int], nums: List[int]=[], sep=15):\n    \"\"\"\n    Given a list of numbers and a number to inject, create a list containing that number in between each pair of\n    adjacent numbers.\n\n    Sample Input:\n    [8, 14, 21, 17, 9, -5], 3\n\n    Sample Output:\n    [8, 3, 14, 3, 21, 3, 17, 3, 9, 3, -5]\n    \"\"\"\n    assert len(li) == max(0, len(nums) * 2 - 1)\n    for i, n in enumerate(nums):\n        assert li[2 * i] == n\n        if i > 0:\n            assert li[2 * i - 1] == sep\n    return True",
    "sols": [
      "def sol(nums=[], sep=15):\n    ans = [sep] * (2 * len(nums) - 1)\n    ans[::2] = nums\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#5\n\nThe one-liner version is `li[::2] == nums and li[1::2] == [sep] * (len(li) - 1)`",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Intersperse_7",
    "sat": "def sat(li: List[int], nums=[0, 48, 23, 5], sep=84):\n    \"\"\"\n    Given a list of numbers and a number to inject, create a list containing that number in between each pair of\n    adjacent numbers.\n\n    Sample Input:\n    [8, 14, 21, 17, 9, -5], 3\n\n    Sample Output:\n    [8, 3, 14, 3, 21, 3, 17, 3, 9, 3, -5]\n    \"\"\"\n    assert len(li) == max(0, len(nums) * 2 - 1)\n    for i, n in enumerate(nums):\n        assert li[2 * i] == n\n        if i > 0:\n            assert li[2 * i - 1] == sep\n    return True",
    "sols": [
      "def sol(nums=[0, 48, 23, 5], sep=84):\n    ans = [sep] * (2 * len(nums) - 1)\n    ans[::2] = nums\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#5\n\nThe one-liner version is `li[::2] == nums and li[1::2] == [sep] * (len(li) - 1)`",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Intersperse_8",
    "sat": "def sat(li: List[int], nums=[55], sep=89):\n    \"\"\"\n    Given a list of numbers and a number to inject, create a list containing that number in between each pair of\n    adjacent numbers.\n\n    Sample Input:\n    [8, 14, 21, 17, 9, -5], 3\n\n    Sample Output:\n    [8, 3, 14, 3, 21, 3, 17, 3, 9, 3, -5]\n    \"\"\"\n    assert len(li) == max(0, len(nums) * 2 - 1)\n    for i, n in enumerate(nums):\n        assert li[2 * i] == n\n        if i > 0:\n            assert li[2 * i - 1] == sep\n    return True",
    "sols": [
      "def sol(nums=[55], sep=89):\n    ans = [sep] * (2 * len(nums) - 1)\n    ans[::2] = nums\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#5\n\nThe one-liner version is `li[::2] == nums and li[1::2] == [sep] * (len(li) - 1)`",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Intersperse_9",
    "sat": "def sat(li: List[int], nums=[14, 45, 87, 21, 33], sep=15):\n    \"\"\"\n    Given a list of numbers and a number to inject, create a list containing that number in between each pair of\n    adjacent numbers.\n\n    Sample Input:\n    [8, 14, 21, 17, 9, -5], 3\n\n    Sample Output:\n    [8, 3, 14, 3, 21, 3, 17, 3, 9, 3, -5]\n    \"\"\"\n    assert len(li) == max(0, len(nums) * 2 - 1)\n    for i, n in enumerate(nums):\n        assert li[2 * i] == n\n        if i > 0:\n            assert li[2 * i - 1] == sep\n    return True",
    "sols": [
      "def sol(nums=[14, 45, 87, 21, 33], sep=15):\n    ans = [sep] * (2 * len(nums) - 1)\n    ans[::2] = nums\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#5\n\nThe one-liner version is `li[::2] == nums and li[1::2] == [sep] * (len(li) - 1)`",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DeepestParens_0",
    "sat": "def sat(depths: List[int], parens=\"() (()) ((()()())) (())\"):\n    \"\"\"\n    Given a string consisting of groups of matched nested parentheses separated by parentheses,\n    compute the depth of each group.\n\n    Sample Input:\n    '(()) ((()()())) (()) ()'\n\n    Sample Output:\n    [2, 3, 2, 1]\n    \"\"\"\n    groups = parens.split()\n    for depth, group in zip(depths, groups):\n        budget = depth\n        success = False\n        for c in group:\n            if c == '(':\n                budget -= 1\n                if budget == 0:\n                    success = True\n                assert budget >= 0\n            else:\n                assert c == ')'\n                budget += 1\n        assert success\n\n    return len(groups) == len(depths)",
    "sols": [
      "def sol(parens=\"() (()) ((()()())) (())\"):\n    def max_depth(s):\n        m = 0\n        depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                m = max(m, depth)\n            else:\n                assert c == ')'\n                depth -= 1\n        assert depth == 0\n        return m\n\n    return [max_depth(s) for s in parens.split()]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#6",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DeepestParens_1",
    "sat": "def sat(depths: List[int], parens=\"\"):\n    \"\"\"\n    Given a string consisting of groups of matched nested parentheses separated by parentheses,\n    compute the depth of each group.\n\n    Sample Input:\n    '(()) ((()()())) (()) ()'\n\n    Sample Output:\n    [2, 3, 2, 1]\n    \"\"\"\n    groups = parens.split()\n    for depth, group in zip(depths, groups):\n        budget = depth\n        success = False\n        for c in group:\n            if c == '(':\n                budget -= 1\n                if budget == 0:\n                    success = True\n                assert budget >= 0\n            else:\n                assert c == ')'\n                budget += 1\n        assert success\n\n    return len(groups) == len(depths)",
    "sols": [
      "def sol(parens=\"\"):\n    def max_depth(s):\n        m = 0\n        depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                m = max(m, depth)\n            else:\n                assert c == ')'\n                depth -= 1\n        assert depth == 0\n        return m\n\n    return [max_depth(s) for s in parens.split()]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#6",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DeepestParens_2",
    "sat": "def sat(depths: List[int], parens=\"(()) (((()(((()())()())))))(())()\"):\n    \"\"\"\n    Given a string consisting of groups of matched nested parentheses separated by parentheses,\n    compute the depth of each group.\n\n    Sample Input:\n    '(()) ((()()())) (()) ()'\n\n    Sample Output:\n    [2, 3, 2, 1]\n    \"\"\"\n    groups = parens.split()\n    for depth, group in zip(depths, groups):\n        budget = depth\n        success = False\n        for c in group:\n            if c == '(':\n                budget -= 1\n                if budget == 0:\n                    success = True\n                assert budget >= 0\n            else:\n                assert c == ')'\n                budget += 1\n        assert success\n\n    return len(groups) == len(depths)",
    "sols": [
      "def sol(parens=\"(()) (((()(((()())()())))))(())()\"):\n    def max_depth(s):\n        m = 0\n        depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                m = max(m, depth)\n            else:\n                assert c == ')'\n                depth -= 1\n        assert depth == 0\n        return m\n\n    return [max_depth(s) for s in parens.split()]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#6",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DeepestParens_3",
    "sat": "def sat(depths: List[int], parens=\"(()) ()()(()())() () ()(())() ()((()))\"):\n    \"\"\"\n    Given a string consisting of groups of matched nested parentheses separated by parentheses,\n    compute the depth of each group.\n\n    Sample Input:\n    '(()) ((()()())) (()) ()'\n\n    Sample Output:\n    [2, 3, 2, 1]\n    \"\"\"\n    groups = parens.split()\n    for depth, group in zip(depths, groups):\n        budget = depth\n        success = False\n        for c in group:\n            if c == '(':\n                budget -= 1\n                if budget == 0:\n                    success = True\n                assert budget >= 0\n            else:\n                assert c == ')'\n                budget += 1\n        assert success\n\n    return len(groups) == len(depths)",
    "sols": [
      "def sol(parens=\"(()) ()()(()())() () ()(())() ()((()))\"):\n    def max_depth(s):\n        m = 0\n        depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                m = max(m, depth)\n            else:\n                assert c == ')'\n                depth -= 1\n        assert depth == 0\n        return m\n\n    return [max_depth(s) for s in parens.split()]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#6",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DeepestParens_4",
    "sat": "def sat(depths: List[int], parens=\"()()(())()(())\"):\n    \"\"\"\n    Given a string consisting of groups of matched nested parentheses separated by parentheses,\n    compute the depth of each group.\n\n    Sample Input:\n    '(()) ((()()())) (()) ()'\n\n    Sample Output:\n    [2, 3, 2, 1]\n    \"\"\"\n    groups = parens.split()\n    for depth, group in zip(depths, groups):\n        budget = depth\n        success = False\n        for c in group:\n            if c == '(':\n                budget -= 1\n                if budget == 0:\n                    success = True\n                assert budget >= 0\n            else:\n                assert c == ')'\n                budget += 1\n        assert success\n\n    return len(groups) == len(depths)",
    "sols": [
      "def sol(parens=\"()()(())()(())\"):\n    def max_depth(s):\n        m = 0\n        depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                m = max(m, depth)\n            else:\n                assert c == ')'\n                depth -= 1\n        assert depth == 0\n        return m\n\n    return [max_depth(s) for s in parens.split()]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#6",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DeepestParens_5",
    "sat": "def sat(depths: List[int], parens=\"()() ()()(()(()(())))()() ()()((())())((()))(())()()(()) ()()\"):\n    \"\"\"\n    Given a string consisting of groups of matched nested parentheses separated by parentheses,\n    compute the depth of each group.\n\n    Sample Input:\n    '(()) ((()()())) (()) ()'\n\n    Sample Output:\n    [2, 3, 2, 1]\n    \"\"\"\n    groups = parens.split()\n    for depth, group in zip(depths, groups):\n        budget = depth\n        success = False\n        for c in group:\n            if c == '(':\n                budget -= 1\n                if budget == 0:\n                    success = True\n                assert budget >= 0\n            else:\n                assert c == ')'\n                budget += 1\n        assert success\n\n    return len(groups) == len(depths)",
    "sols": [
      "def sol(parens=\"()() ()()(()(()(())))()() ()()((())())((()))(())()()(()) ()()\"):\n    def max_depth(s):\n        m = 0\n        depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                m = max(m, depth)\n            else:\n                assert c == ')'\n                depth -= 1\n        assert depth == 0\n        return m\n\n    return [max_depth(s) for s in parens.split()]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#6",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DeepestParens_6",
    "sat": "def sat(depths: List[int], parens=\"() ()(())((()()()())) ()()() ()(()())()()()(()((()))(((())(()))()))()()\"):\n    \"\"\"\n    Given a string consisting of groups of matched nested parentheses separated by parentheses,\n    compute the depth of each group.\n\n    Sample Input:\n    '(()) ((()()())) (()) ()'\n\n    Sample Output:\n    [2, 3, 2, 1]\n    \"\"\"\n    groups = parens.split()\n    for depth, group in zip(depths, groups):\n        budget = depth\n        success = False\n        for c in group:\n            if c == '(':\n                budget -= 1\n                if budget == 0:\n                    success = True\n                assert budget >= 0\n            else:\n                assert c == ')'\n                budget += 1\n        assert success\n\n    return len(groups) == len(depths)",
    "sols": [
      "def sol(parens=\"() ()(())((()()()())) ()()() ()(()())()()()(()((()))(((())(()))()))()()\"):\n    def max_depth(s):\n        m = 0\n        depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                m = max(m, depth)\n            else:\n                assert c == ')'\n                depth -= 1\n        assert depth == 0\n        return m\n\n    return [max_depth(s) for s in parens.split()]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#6",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DeepestParens_7",
    "sat": "def sat(depths: List[int], parens=\"()(((((()()()())))()(()()(()()))))() (())\"):\n    \"\"\"\n    Given a string consisting of groups of matched nested parentheses separated by parentheses,\n    compute the depth of each group.\n\n    Sample Input:\n    '(()) ((()()())) (()) ()'\n\n    Sample Output:\n    [2, 3, 2, 1]\n    \"\"\"\n    groups = parens.split()\n    for depth, group in zip(depths, groups):\n        budget = depth\n        success = False\n        for c in group:\n            if c == '(':\n                budget -= 1\n                if budget == 0:\n                    success = True\n                assert budget >= 0\n            else:\n                assert c == ')'\n                budget += 1\n        assert success\n\n    return len(groups) == len(depths)",
    "sols": [
      "def sol(parens=\"()(((((()()()())))()(()()(()()))))() (())\"):\n    def max_depth(s):\n        m = 0\n        depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                m = max(m, depth)\n            else:\n                assert c == ')'\n                depth -= 1\n        assert depth == 0\n        return m\n\n    return [max_depth(s) for s in parens.split()]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#6",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DeepestParens_8",
    "sat": "def sat(depths: List[int], parens=\"(())(())()(()(()))(())(()) ()()(()()(())()()(()))()(())()()()()(())\"):\n    \"\"\"\n    Given a string consisting of groups of matched nested parentheses separated by parentheses,\n    compute the depth of each group.\n\n    Sample Input:\n    '(()) ((()()())) (()) ()'\n\n    Sample Output:\n    [2, 3, 2, 1]\n    \"\"\"\n    groups = parens.split()\n    for depth, group in zip(depths, groups):\n        budget = depth\n        success = False\n        for c in group:\n            if c == '(':\n                budget -= 1\n                if budget == 0:\n                    success = True\n                assert budget >= 0\n            else:\n                assert c == ')'\n                budget += 1\n        assert success\n\n    return len(groups) == len(depths)",
    "sols": [
      "def sol(parens=\"(())(())()(()(()))(())(()) ()()(()()(())()()(()))()(())()()()()(())\"):\n    def max_depth(s):\n        m = 0\n        depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                m = max(m, depth)\n            else:\n                assert c == ')'\n                depth -= 1\n        assert depth == 0\n        return m\n\n    return [max_depth(s) for s in parens.split()]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#6",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DeepestParens_9",
    "sat": "def sat(depths: List[int], parens=\"()((((()((())(())(())))())((()))))()() ()()((()(())))(()())((()))()\"):\n    \"\"\"\n    Given a string consisting of groups of matched nested parentheses separated by parentheses,\n    compute the depth of each group.\n\n    Sample Input:\n    '(()) ((()()())) (()) ()'\n\n    Sample Output:\n    [2, 3, 2, 1]\n    \"\"\"\n    groups = parens.split()\n    for depth, group in zip(depths, groups):\n        budget = depth\n        success = False\n        for c in group:\n            if c == '(':\n                budget -= 1\n                if budget == 0:\n                    success = True\n                assert budget >= 0\n            else:\n                assert c == ')'\n                budget += 1\n        assert success\n\n    return len(groups) == len(depths)",
    "sols": [
      "def sol(parens=\"()((((()((())(())(())))())((()))))()() ()()((()(())))(()())((()))()\"):\n    def max_depth(s):\n        m = 0\n        depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                m = max(m, depth)\n            else:\n                assert c == ')'\n                depth -= 1\n        assert depth == 0\n        return m\n\n    return [max_depth(s) for s in parens.split()]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#6",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindContainers_0",
    "sat": "def sat(containers: List[str], strings=['cat', 'dog', 'shatter', 'bear', 'at', 'ta'], substring=\"at\"):\n    \"\"\"\n    Find the strings in a list containing a given substring\n\n    Sample Input:\n    ['cat', 'dog', 'bear'], 'a'\n\n    Sample Output:\n    ['cat', 'bear']\n    \"\"\"\n    i = 0\n    for s in strings:\n        if substring in s:\n            assert containers[i] == s\n            i += 1\n    return i == len(containers)",
    "sols": [
      "def sol(strings=['cat', 'dog', 'shatter', 'bear', 'at', 'ta'], substring=\"at\"):\n    return [s for s in strings if substring in s]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#7",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindContainers_1",
    "sat": "def sat(containers: List[str], strings=['ty', 'jy', 'jsesnicy'], substring=\"ses\"):\n    \"\"\"\n    Find the strings in a list containing a given substring\n\n    Sample Input:\n    ['cat', 'dog', 'bear'], 'a'\n\n    Sample Output:\n    ['cat', 'bear']\n    \"\"\"\n    i = 0\n    for s in strings:\n        if substring in s:\n            assert containers[i] == s\n            i += 1\n    return i == len(containers)",
    "sols": [
      "def sol(strings=['ty', 'jy', 'jsesnicy'], substring=\"ses\"):\n    return [s for s in strings if substring in s]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#7",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindContainers_2",
    "sat": "def sat(containers: List[str], strings=['rgyjo', 'tipu', 'mulut', 'wutgypepu'], substring=\"gy\"):\n    \"\"\"\n    Find the strings in a list containing a given substring\n\n    Sample Input:\n    ['cat', 'dog', 'bear'], 'a'\n\n    Sample Output:\n    ['cat', 'bear']\n    \"\"\"\n    i = 0\n    for s in strings:\n        if substring in s:\n            assert containers[i] == s\n            i += 1\n    return i == len(containers)",
    "sols": [
      "def sol(strings=['rgyjo', 'tipu', 'mulut', 'wutgypepu'], substring=\"gy\"):\n    return [s for s in strings if substring in s]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#7",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindContainers_3",
    "sat": "def sat(containers: List[str], strings: List[str]=[], substring=\"ve\"):\n    \"\"\"\n    Find the strings in a list containing a given substring\n\n    Sample Input:\n    ['cat', 'dog', 'bear'], 'a'\n\n    Sample Output:\n    ['cat', 'bear']\n    \"\"\"\n    i = 0\n    for s in strings:\n        if substring in s:\n            assert containers[i] == s\n            i += 1\n    return i == len(containers)",
    "sols": [
      "def sol(strings=[], substring=\"ve\"):\n    return [s for s in strings if substring in s]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#7",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindContainers_4",
    "sat": "def sat(containers: List[str], strings=['te', 'dmmo', ''], substring=\"m\"):\n    \"\"\"\n    Find the strings in a list containing a given substring\n\n    Sample Input:\n    ['cat', 'dog', 'bear'], 'a'\n\n    Sample Output:\n    ['cat', 'bear']\n    \"\"\"\n    i = 0\n    for s in strings:\n        if substring in s:\n            assert containers[i] == s\n            i += 1\n    return i == len(containers)",
    "sols": [
      "def sol(strings=['te', 'dmmo', ''], substring=\"m\"):\n    return [s for s in strings if substring in s]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#7",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindContainers_5",
    "sat": "def sat(containers: List[str], strings: List[str]=[], substring=\"n\"):\n    \"\"\"\n    Find the strings in a list containing a given substring\n\n    Sample Input:\n    ['cat', 'dog', 'bear'], 'a'\n\n    Sample Output:\n    ['cat', 'bear']\n    \"\"\"\n    i = 0\n    for s in strings:\n        if substring in s:\n            assert containers[i] == s\n            i += 1\n    return i == len(containers)",
    "sols": [
      "def sol(strings=[], substring=\"n\"):\n    return [s for s in strings if substring in s]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#7",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindContainers_6",
    "sat": "def sat(containers: List[str], strings=['', 'josevg', 'hose'], substring=\"g\"):\n    \"\"\"\n    Find the strings in a list containing a given substring\n\n    Sample Input:\n    ['cat', 'dog', 'bear'], 'a'\n\n    Sample Output:\n    ['cat', 'bear']\n    \"\"\"\n    i = 0\n    for s in strings:\n        if substring in s:\n            assert containers[i] == s\n            i += 1\n    return i == len(containers)",
    "sols": [
      "def sol(strings=['', 'josevg', 'hose'], substring=\"g\"):\n    return [s for s in strings if substring in s]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#7",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindContainers_7",
    "sat": "def sat(containers: List[str], strings: List[str]=[], substring=\"ka\"):\n    \"\"\"\n    Find the strings in a list containing a given substring\n\n    Sample Input:\n    ['cat', 'dog', 'bear'], 'a'\n\n    Sample Output:\n    ['cat', 'bear']\n    \"\"\"\n    i = 0\n    for s in strings:\n        if substring in s:\n            assert containers[i] == s\n            i += 1\n    return i == len(containers)",
    "sols": [
      "def sol(strings=[], substring=\"ka\"):\n    return [s for s in strings if substring in s]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#7",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindContainers_8",
    "sat": "def sat(containers: List[str], strings: List[str]=[], substring=\"bo\"):\n    \"\"\"\n    Find the strings in a list containing a given substring\n\n    Sample Input:\n    ['cat', 'dog', 'bear'], 'a'\n\n    Sample Output:\n    ['cat', 'bear']\n    \"\"\"\n    i = 0\n    for s in strings:\n        if substring in s:\n            assert containers[i] == s\n            i += 1\n    return i == len(containers)",
    "sols": [
      "def sol(strings=[], substring=\"bo\"):\n    return [s for s in strings if substring in s]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#7",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindContainers_9",
    "sat": "def sat(containers: List[str], strings=['cy', 'vyju'], substring=\"\"):\n    \"\"\"\n    Find the strings in a list containing a given substring\n\n    Sample Input:\n    ['cat', 'dog', 'bear'], 'a'\n\n    Sample Output:\n    ['cat', 'bear']\n    \"\"\"\n    i = 0\n    for s in strings:\n        if substring in s:\n            assert containers[i] == s\n            i += 1\n    return i == len(containers)",
    "sols": [
      "def sol(strings=['cy', 'vyju'], substring=\"\"):\n    return [s for s in strings if substring in s]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#7",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SumProduct_0",
    "sat": "def sat(nums: List[int], tot=14, prod=99):\n    \"\"\"\n    Find a list of numbers with a given sum and a given product.\n\n    Sample Input:\n    12, 32\n\n    Sample Output:\n    [2, 8, 2]\n    \"\"\"\n    assert sum(nums) == tot\n    p = 1\n    for n in nums:\n        p *= n\n    return p == prod",
    "sols": [
      "def sol(tot=14, prod=99):\n    ans = [prod]\n    while sum(ans) > tot:\n        ans += [-1, -1]\n    ans += [1] * (tot - sum(ans))\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SumProduct_1",
    "sat": "def sat(nums: List[int], tot=-81, prod=13):\n    \"\"\"\n    Find a list of numbers with a given sum and a given product.\n\n    Sample Input:\n    12, 32\n\n    Sample Output:\n    [2, 8, 2]\n    \"\"\"\n    assert sum(nums) == tot\n    p = 1\n    for n in nums:\n        p *= n\n    return p == prod",
    "sols": [
      "def sol(tot=-81, prod=13):\n    ans = [prod]\n    while sum(ans) > tot:\n        ans += [-1, -1]\n    ans += [1] * (tot - sum(ans))\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SumProduct_2",
    "sat": "def sat(nums: List[int], tot=96, prod=-44):\n    \"\"\"\n    Find a list of numbers with a given sum and a given product.\n\n    Sample Input:\n    12, 32\n\n    Sample Output:\n    [2, 8, 2]\n    \"\"\"\n    assert sum(nums) == tot\n    p = 1\n    for n in nums:\n        p *= n\n    return p == prod",
    "sols": [
      "def sol(tot=96, prod=-44):\n    ans = [prod]\n    while sum(ans) > tot:\n        ans += [-1, -1]\n    ans += [1] * (tot - sum(ans))\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SumProduct_3",
    "sat": "def sat(nums: List[int], tot=86, prod=24):\n    \"\"\"\n    Find a list of numbers with a given sum and a given product.\n\n    Sample Input:\n    12, 32\n\n    Sample Output:\n    [2, 8, 2]\n    \"\"\"\n    assert sum(nums) == tot\n    p = 1\n    for n in nums:\n        p *= n\n    return p == prod",
    "sols": [
      "def sol(tot=86, prod=24):\n    ans = [prod]\n    while sum(ans) > tot:\n        ans += [-1, -1]\n    ans += [1] * (tot - sum(ans))\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SumProduct_4",
    "sat": "def sat(nums: List[int], tot=-16, prod=3):\n    \"\"\"\n    Find a list of numbers with a given sum and a given product.\n\n    Sample Input:\n    12, 32\n\n    Sample Output:\n    [2, 8, 2]\n    \"\"\"\n    assert sum(nums) == tot\n    p = 1\n    for n in nums:\n        p *= n\n    return p == prod",
    "sols": [
      "def sol(tot=-16, prod=3):\n    ans = [prod]\n    while sum(ans) > tot:\n        ans += [-1, -1]\n    ans += [1] * (tot - sum(ans))\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SumProduct_5",
    "sat": "def sat(nums: List[int], tot=16, prod=27):\n    \"\"\"\n    Find a list of numbers with a given sum and a given product.\n\n    Sample Input:\n    12, 32\n\n    Sample Output:\n    [2, 8, 2]\n    \"\"\"\n    assert sum(nums) == tot\n    p = 1\n    for n in nums:\n        p *= n\n    return p == prod",
    "sols": [
      "def sol(tot=16, prod=27):\n    ans = [prod]\n    while sum(ans) > tot:\n        ans += [-1, -1]\n    ans += [1] * (tot - sum(ans))\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SumProduct_6",
    "sat": "def sat(nums: List[int], tot=35, prod=-43):\n    \"\"\"\n    Find a list of numbers with a given sum and a given product.\n\n    Sample Input:\n    12, 32\n\n    Sample Output:\n    [2, 8, 2]\n    \"\"\"\n    assert sum(nums) == tot\n    p = 1\n    for n in nums:\n        p *= n\n    return p == prod",
    "sols": [
      "def sol(tot=35, prod=-43):\n    ans = [prod]\n    while sum(ans) > tot:\n        ans += [-1, -1]\n    ans += [1] * (tot - sum(ans))\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SumProduct_7",
    "sat": "def sat(nums: List[int], tot=-64, prod=-1):\n    \"\"\"\n    Find a list of numbers with a given sum and a given product.\n\n    Sample Input:\n    12, 32\n\n    Sample Output:\n    [2, 8, 2]\n    \"\"\"\n    assert sum(nums) == tot\n    p = 1\n    for n in nums:\n        p *= n\n    return p == prod",
    "sols": [
      "def sol(tot=-64, prod=-1):\n    ans = [prod]\n    while sum(ans) > tot:\n        ans += [-1, -1]\n    ans += [1] * (tot - sum(ans))\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SumProduct_8",
    "sat": "def sat(nums: List[int], tot=83, prod=-48):\n    \"\"\"\n    Find a list of numbers with a given sum and a given product.\n\n    Sample Input:\n    12, 32\n\n    Sample Output:\n    [2, 8, 2]\n    \"\"\"\n    assert sum(nums) == tot\n    p = 1\n    for n in nums:\n        p *= n\n    return p == prod",
    "sols": [
      "def sol(tot=83, prod=-48):\n    ans = [prod]\n    while sum(ans) > tot:\n        ans += [-1, -1]\n    ans += [1] * (tot - sum(ans))\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SumProduct_9",
    "sat": "def sat(nums: List[int], tot=39, prod=-73):\n    \"\"\"\n    Find a list of numbers with a given sum and a given product.\n\n    Sample Input:\n    12, 32\n\n    Sample Output:\n    [2, 8, 2]\n    \"\"\"\n    assert sum(nums) == tot\n    p = 1\n    for n in nums:\n        p *= n\n    return p == prod",
    "sols": [
      "def sol(tot=39, prod=-73):\n    ans = [prod]\n    while sum(ans) > tot:\n        ans += [-1, -1]\n    ans += [1] * (tot - sum(ans))\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SumProduct_Trivial_0",
    "sat": "def sat(sum_prod: List[int], nums=[1, 3, 2, -6, 19]):\n    \"\"\"\n    Find the sum and product of a list of numbers.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [12, 32]\n    \"\"\"\n    p = 1\n    for n in nums:\n        p *= n\n    return sum_prod == [sum(nums), p]",
    "sols": [
      "def sol(nums=[1, 3, 2, -6, 19]):\n    p = 1\n    for n in nums:\n        p *= n\n    return [sum(nums), p]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SumProduct_Trivial_1",
    "sat": "def sat(sum_prod: List[int], nums=[55, -65]):\n    \"\"\"\n    Find the sum and product of a list of numbers.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [12, 32]\n    \"\"\"\n    p = 1\n    for n in nums:\n        p *= n\n    return sum_prod == [sum(nums), p]",
    "sols": [
      "def sol(nums=[55, -65]):\n    p = 1\n    for n in nums:\n        p *= n\n    return [sum(nums), p]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SumProduct_Trivial_2",
    "sat": "def sat(sum_prod: List[int], nums=[-31]):\n    \"\"\"\n    Find the sum and product of a list of numbers.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [12, 32]\n    \"\"\"\n    p = 1\n    for n in nums:\n        p *= n\n    return sum_prod == [sum(nums), p]",
    "sols": [
      "def sol(nums=[-31]):\n    p = 1\n    for n in nums:\n        p *= n\n    return [sum(nums), p]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SumProduct_Trivial_3",
    "sat": "def sat(sum_prod: List[int], nums=[29]):\n    \"\"\"\n    Find the sum and product of a list of numbers.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [12, 32]\n    \"\"\"\n    p = 1\n    for n in nums:\n        p *= n\n    return sum_prod == [sum(nums), p]",
    "sols": [
      "def sol(nums=[29]):\n    p = 1\n    for n in nums:\n        p *= n\n    return [sum(nums), p]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SumProduct_Trivial_4",
    "sat": "def sat(sum_prod: List[int], nums=[-78, 20]):\n    \"\"\"\n    Find the sum and product of a list of numbers.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [12, 32]\n    \"\"\"\n    p = 1\n    for n in nums:\n        p *= n\n    return sum_prod == [sum(nums), p]",
    "sols": [
      "def sol(nums=[-78, 20]):\n    p = 1\n    for n in nums:\n        p *= n\n    return [sum(nums), p]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SumProduct_Trivial_5",
    "sat": "def sat(sum_prod: List[int], nums=[-26]):\n    \"\"\"\n    Find the sum and product of a list of numbers.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [12, 32]\n    \"\"\"\n    p = 1\n    for n in nums:\n        p *= n\n    return sum_prod == [sum(nums), p]",
    "sols": [
      "def sol(nums=[-26]):\n    p = 1\n    for n in nums:\n        p *= n\n    return [sum(nums), p]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SumProduct_Trivial_6",
    "sat": "def sat(sum_prod: List[int], nums=[-68, 0]):\n    \"\"\"\n    Find the sum and product of a list of numbers.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [12, 32]\n    \"\"\"\n    p = 1\n    for n in nums:\n        p *= n\n    return sum_prod == [sum(nums), p]",
    "sols": [
      "def sol(nums=[-68, 0]):\n    p = 1\n    for n in nums:\n        p *= n\n    return [sum(nums), p]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SumProduct_Trivial_7",
    "sat": "def sat(sum_prod: List[int], nums=[-33, 58, -22]):\n    \"\"\"\n    Find the sum and product of a list of numbers.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [12, 32]\n    \"\"\"\n    p = 1\n    for n in nums:\n        p *= n\n    return sum_prod == [sum(nums), p]",
    "sols": [
      "def sol(nums=[-33, 58, -22]):\n    p = 1\n    for n in nums:\n        p *= n\n    return [sum(nums), p]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SumProduct_Trivial_8",
    "sat": "def sat(sum_prod: List[int], nums=[-63, -12]):\n    \"\"\"\n    Find the sum and product of a list of numbers.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [12, 32]\n    \"\"\"\n    p = 1\n    for n in nums:\n        p *= n\n    return sum_prod == [sum(nums), p]",
    "sols": [
      "def sol(nums=[-63, -12]):\n    p = 1\n    for n in nums:\n        p *= n\n    return [sum(nums), p]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SumProduct_Trivial_9",
    "sat": "def sat(sum_prod: List[int], nums=[81]):\n    \"\"\"\n    Find the sum and product of a list of numbers.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [12, 32]\n    \"\"\"\n    p = 1\n    for n in nums:\n        p *= n\n    return sum_prod == [sum(nums), p]",
    "sols": [
      "def sol(nums=[81]):\n    p = 1\n    for n in nums:\n        p *= n\n    return [sum(nums), p]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "RollingMax_0",
    "sat": "def sat(maxes: List[int], nums=[1, 4, 3, -6, 19]):\n    \"\"\"\n    Find a list whose ith element is the maximum of the first i elements of the input list.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [2, 8, 8]\n    \"\"\"\n    assert len(maxes) == len(nums)\n    for i in range(len(nums)):\n        if i > 0:\n            assert maxes[i] == max(maxes[i - 1], nums[i])\n        else:\n            assert maxes[0] == nums[0]\n    return True",
    "sols": [
      "def sol(nums=[1, 4, 3, -6, 19]):\n    return [max(nums[:i]) for i in range(1, len(nums) + 1)]",
      "def sol(nums=[1, 4, 3, -6, 19]):\n    ans = []\n    if nums:\n        m = nums[0]\n        for n in nums:\n            m = max(n, m)\n            ans.append(m)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#9",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "RollingMax_1",
    "sat": "def sat(maxes: List[int], nums=[-15, -6]):\n    \"\"\"\n    Find a list whose ith element is the maximum of the first i elements of the input list.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [2, 8, 8]\n    \"\"\"\n    assert len(maxes) == len(nums)\n    for i in range(len(nums)):\n        if i > 0:\n            assert maxes[i] == max(maxes[i - 1], nums[i])\n        else:\n            assert maxes[0] == nums[0]\n    return True",
    "sols": [
      "def sol(nums=[-15, -6]):\n    return [max(nums[:i]) for i in range(1, len(nums) + 1)]",
      "def sol(nums=[-15, -6]):\n    ans = []\n    if nums:\n        m = nums[0]\n        for n in nums:\n            m = max(n, m)\n            ans.append(m)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#9",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "RollingMax_2",
    "sat": "def sat(maxes: List[int], nums: List[int]=[]):\n    \"\"\"\n    Find a list whose ith element is the maximum of the first i elements of the input list.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [2, 8, 8]\n    \"\"\"\n    assert len(maxes) == len(nums)\n    for i in range(len(nums)):\n        if i > 0:\n            assert maxes[i] == max(maxes[i - 1], nums[i])\n        else:\n            assert maxes[0] == nums[0]\n    return True",
    "sols": [
      "def sol(nums=[]):\n    return [max(nums[:i]) for i in range(1, len(nums) + 1)]",
      "def sol(nums=[]):\n    ans = []\n    if nums:\n        m = nums[0]\n        for n in nums:\n            m = max(n, m)\n            ans.append(m)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#9",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "RollingMax_3",
    "sat": "def sat(maxes: List[int], nums=[-100, 14, -45, 92, 36, -68, -40]):\n    \"\"\"\n    Find a list whose ith element is the maximum of the first i elements of the input list.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [2, 8, 8]\n    \"\"\"\n    assert len(maxes) == len(nums)\n    for i in range(len(nums)):\n        if i > 0:\n            assert maxes[i] == max(maxes[i - 1], nums[i])\n        else:\n            assert maxes[0] == nums[0]\n    return True",
    "sols": [
      "def sol(nums=[-100, 14, -45, 92, 36, -68, -40]):\n    return [max(nums[:i]) for i in range(1, len(nums) + 1)]",
      "def sol(nums=[-100, 14, -45, 92, 36, -68, -40]):\n    ans = []\n    if nums:\n        m = nums[0]\n        for n in nums:\n            m = max(n, m)\n            ans.append(m)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#9",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "RollingMax_4",
    "sat": "def sat(maxes: List[int], nums=[23, -34, 96]):\n    \"\"\"\n    Find a list whose ith element is the maximum of the first i elements of the input list.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [2, 8, 8]\n    \"\"\"\n    assert len(maxes) == len(nums)\n    for i in range(len(nums)):\n        if i > 0:\n            assert maxes[i] == max(maxes[i - 1], nums[i])\n        else:\n            assert maxes[0] == nums[0]\n    return True",
    "sols": [
      "def sol(nums=[23, -34, 96]):\n    return [max(nums[:i]) for i in range(1, len(nums) + 1)]",
      "def sol(nums=[23, -34, 96]):\n    ans = []\n    if nums:\n        m = nums[0]\n        for n in nums:\n            m = max(n, m)\n            ans.append(m)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#9",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "RollingMax_5",
    "sat": "def sat(maxes: List[int], nums=[-43, -97, 47, -57, 36, 18, 63]):\n    \"\"\"\n    Find a list whose ith element is the maximum of the first i elements of the input list.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [2, 8, 8]\n    \"\"\"\n    assert len(maxes) == len(nums)\n    for i in range(len(nums)):\n        if i > 0:\n            assert maxes[i] == max(maxes[i - 1], nums[i])\n        else:\n            assert maxes[0] == nums[0]\n    return True",
    "sols": [
      "def sol(nums=[-43, -97, 47, -57, 36, 18, 63]):\n    return [max(nums[:i]) for i in range(1, len(nums) + 1)]",
      "def sol(nums=[-43, -97, 47, -57, 36, 18, 63]):\n    ans = []\n    if nums:\n        m = nums[0]\n        for n in nums:\n            m = max(n, m)\n            ans.append(m)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#9",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "RollingMax_6",
    "sat": "def sat(maxes: List[int], nums=[75, -70, -21, 79, 4]):\n    \"\"\"\n    Find a list whose ith element is the maximum of the first i elements of the input list.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [2, 8, 8]\n    \"\"\"\n    assert len(maxes) == len(nums)\n    for i in range(len(nums)):\n        if i > 0:\n            assert maxes[i] == max(maxes[i - 1], nums[i])\n        else:\n            assert maxes[0] == nums[0]\n    return True",
    "sols": [
      "def sol(nums=[75, -70, -21, 79, 4]):\n    return [max(nums[:i]) for i in range(1, len(nums) + 1)]",
      "def sol(nums=[75, -70, -21, 79, 4]):\n    ans = []\n    if nums:\n        m = nums[0]\n        for n in nums:\n            m = max(n, m)\n            ans.append(m)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#9",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "RollingMax_7",
    "sat": "def sat(maxes: List[int], nums=[-83, -60, -63, -19, 66, 43, -27]):\n    \"\"\"\n    Find a list whose ith element is the maximum of the first i elements of the input list.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [2, 8, 8]\n    \"\"\"\n    assert len(maxes) == len(nums)\n    for i in range(len(nums)):\n        if i > 0:\n            assert maxes[i] == max(maxes[i - 1], nums[i])\n        else:\n            assert maxes[0] == nums[0]\n    return True",
    "sols": [
      "def sol(nums=[-83, -60, -63, -19, 66, 43, -27]):\n    return [max(nums[:i]) for i in range(1, len(nums) + 1)]",
      "def sol(nums=[-83, -60, -63, -19, 66, 43, -27]):\n    ans = []\n    if nums:\n        m = nums[0]\n        for n in nums:\n            m = max(n, m)\n            ans.append(m)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#9",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "RollingMax_8",
    "sat": "def sat(maxes: List[int], nums=[30, 84, 70]):\n    \"\"\"\n    Find a list whose ith element is the maximum of the first i elements of the input list.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [2, 8, 8]\n    \"\"\"\n    assert len(maxes) == len(nums)\n    for i in range(len(nums)):\n        if i > 0:\n            assert maxes[i] == max(maxes[i - 1], nums[i])\n        else:\n            assert maxes[0] == nums[0]\n    return True",
    "sols": [
      "def sol(nums=[30, 84, 70]):\n    return [max(nums[:i]) for i in range(1, len(nums) + 1)]",
      "def sol(nums=[30, 84, 70]):\n    ans = []\n    if nums:\n        m = nums[0]\n        for n in nums:\n            m = max(n, m)\n            ans.append(m)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#9",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "RollingMax_9",
    "sat": "def sat(maxes: List[int], nums=[9, 52, -2, -76, 53, 39, -70, 30]):\n    \"\"\"\n    Find a list whose ith element is the maximum of the first i elements of the input list.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [2, 8, 8]\n    \"\"\"\n    assert len(maxes) == len(nums)\n    for i in range(len(nums)):\n        if i > 0:\n            assert maxes[i] == max(maxes[i - 1], nums[i])\n        else:\n            assert maxes[0] == nums[0]\n    return True",
    "sols": [
      "def sol(nums=[9, 52, -2, -76, 53, 39, -70, 30]):\n    return [max(nums[:i]) for i in range(1, len(nums) + 1)]",
      "def sol(nums=[9, 52, -2, -76, 53, 39, -70, 30]):\n    ans = []\n    if nums:\n        m = nums[0]\n        for n in nums:\n            m = max(n, m)\n            ans.append(m)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#9",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PalindromeStartingWith_0",
    "sat": "def sat(ans: str, s=\"so easy\", length=13):\n    \"\"\"\n    Find a palindrome of a given length starting with a given string.\n\n    Sample Input:\n    \"foo\", 4\n\n    Sample Output:\n    \"foof\"\n    \"\"\"\n    return ans == ans[::-1] and len(ans) == length and ans.startswith(s)",
    "sols": [
      "def sol(s=\"so easy\", length=13):\n    return s[:length // 2] + ' ' * (length - len(s) * 2) + s[:(length + 1) // 2][::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PalindromeStartingWith_1",
    "sat": "def sat(ans: str, s=\"bababab\", length=11):\n    \"\"\"\n    Find a palindrome of a given length starting with a given string.\n\n    Sample Input:\n    \"foo\", 4\n\n    Sample Output:\n    \"foof\"\n    \"\"\"\n    return ans == ans[::-1] and len(ans) == length and ans.startswith(s)",
    "sols": [
      "def sol(s=\"bababab\", length=11):\n    return s[:length // 2] + ' ' * (length - len(s) * 2) + s[:(length + 1) // 2][::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PalindromeStartingWith_2",
    "sat": "def sat(ans: str, s=\"abab\", length=22):\n    \"\"\"\n    Find a palindrome of a given length starting with a given string.\n\n    Sample Input:\n    \"foo\", 4\n\n    Sample Output:\n    \"foof\"\n    \"\"\"\n    return ans == ans[::-1] and len(ans) == length and ans.startswith(s)",
    "sols": [
      "def sol(s=\"abab\", length=22):\n    return s[:length // 2] + ' ' * (length - len(s) * 2) + s[:(length + 1) // 2][::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PalindromeStartingWith_3",
    "sat": "def sat(ans: str, s=\"b\", length=8):\n    \"\"\"\n    Find a palindrome of a given length starting with a given string.\n\n    Sample Input:\n    \"foo\", 4\n\n    Sample Output:\n    \"foof\"\n    \"\"\"\n    return ans == ans[::-1] and len(ans) == length and ans.startswith(s)",
    "sols": [
      "def sol(s=\"b\", length=8):\n    return s[:length // 2] + ' ' * (length - len(s) * 2) + s[:(length + 1) // 2][::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PalindromeStartingWith_4",
    "sat": "def sat(ans: str, s=\"aabb\", length=6):\n    \"\"\"\n    Find a palindrome of a given length starting with a given string.\n\n    Sample Input:\n    \"foo\", 4\n\n    Sample Output:\n    \"foof\"\n    \"\"\"\n    return ans == ans[::-1] and len(ans) == length and ans.startswith(s)",
    "sols": [
      "def sol(s=\"aabb\", length=6):\n    return s[:length // 2] + ' ' * (length - len(s) * 2) + s[:(length + 1) // 2][::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PalindromeStartingWith_5",
    "sat": "def sat(ans: str, s=\"b\", length=17):\n    \"\"\"\n    Find a palindrome of a given length starting with a given string.\n\n    Sample Input:\n    \"foo\", 4\n\n    Sample Output:\n    \"foof\"\n    \"\"\"\n    return ans == ans[::-1] and len(ans) == length and ans.startswith(s)",
    "sols": [
      "def sol(s=\"b\", length=17):\n    return s[:length // 2] + ' ' * (length - len(s) * 2) + s[:(length + 1) // 2][::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PalindromeStartingWith_6",
    "sat": "def sat(ans: str, s=\"baaabaaa\", length=14):\n    \"\"\"\n    Find a palindrome of a given length starting with a given string.\n\n    Sample Input:\n    \"foo\", 4\n\n    Sample Output:\n    \"foof\"\n    \"\"\"\n    return ans == ans[::-1] and len(ans) == length and ans.startswith(s)",
    "sols": [
      "def sol(s=\"baaabaaa\", length=14):\n    return s[:length // 2] + ' ' * (length - len(s) * 2) + s[:(length + 1) // 2][::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PalindromeStartingWith_7",
    "sat": "def sat(ans: str, s=\"bb\", length=5):\n    \"\"\"\n    Find a palindrome of a given length starting with a given string.\n\n    Sample Input:\n    \"foo\", 4\n\n    Sample Output:\n    \"foof\"\n    \"\"\"\n    return ans == ans[::-1] and len(ans) == length and ans.startswith(s)",
    "sols": [
      "def sol(s=\"bb\", length=5):\n    return s[:length // 2] + ' ' * (length - len(s) * 2) + s[:(length + 1) // 2][::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PalindromeStartingWith_8",
    "sat": "def sat(ans: str, s=\"baaabbbbababb\", length=19):\n    \"\"\"\n    Find a palindrome of a given length starting with a given string.\n\n    Sample Input:\n    \"foo\", 4\n\n    Sample Output:\n    \"foof\"\n    \"\"\"\n    return ans == ans[::-1] and len(ans) == length and ans.startswith(s)",
    "sols": [
      "def sol(s=\"baaabbbbababb\", length=19):\n    return s[:length // 2] + ' ' * (length - len(s) * 2) + s[:(length + 1) // 2][::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PalindromeStartingWith_9",
    "sat": "def sat(ans: str, s=\"abbba\", length=11):\n    \"\"\"\n    Find a palindrome of a given length starting with a given string.\n\n    Sample Input:\n    \"foo\", 4\n\n    Sample Output:\n    \"foof\"\n    \"\"\"\n    return ans == ans[::-1] and len(ans) == length and ans.startswith(s)",
    "sols": [
      "def sol(s=\"abbba\", length=11):\n    return s[:length // 2] + ' ' * (length - len(s) * 2) + s[:(length + 1) // 2][::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PalindromeContaining_0",
    "sat": "def sat(ans: str, s=\"so easy\", length=20):\n    \"\"\"\n    Find a palindrome of a given length containing a given string.\n\n    Sample Input:\n    \"abba\", 6\n\n    Sample Output:\n    \"cabbac\"\n    \"\"\"\n    return ans == ans[::-1] and len(ans) == length and s in ans",
    "sols": [
      "def sol(s=\"so easy\", length=20):\n    ls = list(s)\n    for i in range(length - len(s) + 1):\n        arr = ['x'] * length\n        arr[i:i + len(s)] = ls\n        a = length - i - 1\n        b = length - (i + len(s)) - 1\n        if b == -1:\n            b = None\n        arr[a:b:-1] = ls\n        if arr == arr[::-1]:\n            ans = \"\".join(arr)\n            if s in ans:\n                return ans\n    assert False, \"shouldn't reach here\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PalindromeContaining_1",
    "sat": "def sat(ans: str, s=\"aabbab\", length=12):\n    \"\"\"\n    Find a palindrome of a given length containing a given string.\n\n    Sample Input:\n    \"abba\", 6\n\n    Sample Output:\n    \"cabbac\"\n    \"\"\"\n    return ans == ans[::-1] and len(ans) == length and s in ans",
    "sols": [
      "def sol(s=\"aabbab\", length=12):\n    ls = list(s)\n    for i in range(length - len(s) + 1):\n        arr = ['x'] * length\n        arr[i:i + len(s)] = ls\n        a = length - i - 1\n        b = length - (i + len(s)) - 1\n        if b == -1:\n            b = None\n        arr[a:b:-1] = ls\n        if arr == arr[::-1]:\n            ans = \"\".join(arr)\n            if s in ans:\n                return ans\n    assert False, \"shouldn't reach here\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PalindromeContaining_2",
    "sat": "def sat(ans: str, s=\"bbb\", length=27):\n    \"\"\"\n    Find a palindrome of a given length containing a given string.\n\n    Sample Input:\n    \"abba\", 6\n\n    Sample Output:\n    \"cabbac\"\n    \"\"\"\n    return ans == ans[::-1] and len(ans) == length and s in ans",
    "sols": [
      "def sol(s=\"bbb\", length=27):\n    ls = list(s)\n    for i in range(length - len(s) + 1):\n        arr = ['x'] * length\n        arr[i:i + len(s)] = ls\n        a = length - i - 1\n        b = length - (i + len(s)) - 1\n        if b == -1:\n            b = None\n        arr[a:b:-1] = ls\n        if arr == arr[::-1]:\n            ans = \"\".join(arr)\n            if s in ans:\n                return ans\n    assert False, \"shouldn't reach here\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PalindromeContaining_3",
    "sat": "def sat(ans: str, s=\"bb\", length=38):\n    \"\"\"\n    Find a palindrome of a given length containing a given string.\n\n    Sample Input:\n    \"abba\", 6\n\n    Sample Output:\n    \"cabbac\"\n    \"\"\"\n    return ans == ans[::-1] and len(ans) == length and s in ans",
    "sols": [
      "def sol(s=\"bb\", length=38):\n    ls = list(s)\n    for i in range(length - len(s) + 1):\n        arr = ['x'] * length\n        arr[i:i + len(s)] = ls\n        a = length - i - 1\n        b = length - (i + len(s)) - 1\n        if b == -1:\n            b = None\n        arr[a:b:-1] = ls\n        if arr == arr[::-1]:\n            ans = \"\".join(arr)\n            if s in ans:\n                return ans\n    assert False, \"shouldn't reach here\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PalindromeContaining_4",
    "sat": "def sat(ans: str, s=\"\", length=0):\n    \"\"\"\n    Find a palindrome of a given length containing a given string.\n\n    Sample Input:\n    \"abba\", 6\n\n    Sample Output:\n    \"cabbac\"\n    \"\"\"\n    return ans == ans[::-1] and len(ans) == length and s in ans",
    "sols": [
      "def sol(s=\"\", length=0):\n    ls = list(s)\n    for i in range(length - len(s) + 1):\n        arr = ['x'] * length\n        arr[i:i + len(s)] = ls\n        a = length - i - 1\n        b = length - (i + len(s)) - 1\n        if b == -1:\n            b = None\n        arr[a:b:-1] = ls\n        if arr == arr[::-1]:\n            ans = \"\".join(arr)\n            if s in ans:\n                return ans\n    assert False, \"shouldn't reach here\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PalindromeContaining_5",
    "sat": "def sat(ans: str, s=\"bab\", length=24):\n    \"\"\"\n    Find a palindrome of a given length containing a given string.\n\n    Sample Input:\n    \"abba\", 6\n\n    Sample Output:\n    \"cabbac\"\n    \"\"\"\n    return ans == ans[::-1] and len(ans) == length and s in ans",
    "sols": [
      "def sol(s=\"bab\", length=24):\n    ls = list(s)\n    for i in range(length - len(s) + 1):\n        arr = ['x'] * length\n        arr[i:i + len(s)] = ls\n        a = length - i - 1\n        b = length - (i + len(s)) - 1\n        if b == -1:\n            b = None\n        arr[a:b:-1] = ls\n        if arr == arr[::-1]:\n            ans = \"\".join(arr)\n            if s in ans:\n                return ans\n    assert False, \"shouldn't reach here\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PalindromeContaining_6",
    "sat": "def sat(ans: str, s=\"bbaababbbb\", length=26):\n    \"\"\"\n    Find a palindrome of a given length containing a given string.\n\n    Sample Input:\n    \"abba\", 6\n\n    Sample Output:\n    \"cabbac\"\n    \"\"\"\n    return ans == ans[::-1] and len(ans) == length and s in ans",
    "sols": [
      "def sol(s=\"bbaababbbb\", length=26):\n    ls = list(s)\n    for i in range(length - len(s) + 1):\n        arr = ['x'] * length\n        arr[i:i + len(s)] = ls\n        a = length - i - 1\n        b = length - (i + len(s)) - 1\n        if b == -1:\n            b = None\n        arr[a:b:-1] = ls\n        if arr == arr[::-1]:\n            ans = \"\".join(arr)\n            if s in ans:\n                return ans\n    assert False, \"shouldn't reach here\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PalindromeContaining_7",
    "sat": "def sat(ans: str, s=\"abbba\", length=23):\n    \"\"\"\n    Find a palindrome of a given length containing a given string.\n\n    Sample Input:\n    \"abba\", 6\n\n    Sample Output:\n    \"cabbac\"\n    \"\"\"\n    return ans == ans[::-1] and len(ans) == length and s in ans",
    "sols": [
      "def sol(s=\"abbba\", length=23):\n    ls = list(s)\n    for i in range(length - len(s) + 1):\n        arr = ['x'] * length\n        arr[i:i + len(s)] = ls\n        a = length - i - 1\n        b = length - (i + len(s)) - 1\n        if b == -1:\n            b = None\n        arr[a:b:-1] = ls\n        if arr == arr[::-1]:\n            ans = \"\".join(arr)\n            if s in ans:\n                return ans\n    assert False, \"shouldn't reach here\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PalindromeContaining_8",
    "sat": "def sat(ans: str, s=\"bbbaaa\", length=33):\n    \"\"\"\n    Find a palindrome of a given length containing a given string.\n\n    Sample Input:\n    \"abba\", 6\n\n    Sample Output:\n    \"cabbac\"\n    \"\"\"\n    return ans == ans[::-1] and len(ans) == length and s in ans",
    "sols": [
      "def sol(s=\"bbbaaa\", length=33):\n    ls = list(s)\n    for i in range(length - len(s) + 1):\n        arr = ['x'] * length\n        arr[i:i + len(s)] = ls\n        a = length - i - 1\n        b = length - (i + len(s)) - 1\n        if b == -1:\n            b = None\n        arr[a:b:-1] = ls\n        if arr == arr[::-1]:\n            ans = \"\".join(arr)\n            if s in ans:\n                return ans\n    assert False, \"shouldn't reach here\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PalindromeContaining_9",
    "sat": "def sat(ans: str, s=\"bbab\", length=9):\n    \"\"\"\n    Find a palindrome of a given length containing a given string.\n\n    Sample Input:\n    \"abba\", 6\n\n    Sample Output:\n    \"cabbac\"\n    \"\"\"\n    return ans == ans[::-1] and len(ans) == length and s in ans",
    "sols": [
      "def sol(s=\"bbab\", length=9):\n    ls = list(s)\n    for i in range(length - len(s) + 1):\n        arr = ['x'] * length\n        arr[i:i + len(s)] = ls\n        a = length - i - 1\n        b = length - (i + len(s)) - 1\n        if b == -1:\n            b = None\n        arr[a:b:-1] = ls\n        if arr == arr[::-1]:\n            ans = \"\".join(arr)\n            if s in ans:\n                return ans\n    assert False, \"shouldn't reach here\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BinaryStrXOR_0",
    "sat": "def sat(str_num: str, nums=['100011101100001', '100101100101110']):\n    \"\"\"\n    Find a the XOR of two given strings interpreted as binary numbers.\n\n    Sample Input:\n    \"0001\", \"1011\"\n\n    Sample Output:\n    \"1010\"\n    \"\"\"\n    a, b = nums\n    return int(str_num, 2) == int(a, 2) ^ int(b, 2)",
    "sols": [
      "def sol(nums=['100011101100001', '100101100101110']):\n    a, b = nums\n    ans = int(a, 2) ^ int(b, 2)\n    return format(ans, \"b\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#11",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BinaryStrXOR_1",
    "sat": "def sat(str_num: str, nums=['1101101111', '11001100']):\n    \"\"\"\n    Find a the XOR of two given strings interpreted as binary numbers.\n\n    Sample Input:\n    \"0001\", \"1011\"\n\n    Sample Output:\n    \"1010\"\n    \"\"\"\n    a, b = nums\n    return int(str_num, 2) == int(a, 2) ^ int(b, 2)",
    "sols": [
      "def sol(nums=['1101101111', '11001100']):\n    a, b = nums\n    ans = int(a, 2) ^ int(b, 2)\n    return format(ans, \"b\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#11",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BinaryStrXOR_2",
    "sat": "def sat(str_num: str, nums=['11011111', '1101001110']):\n    \"\"\"\n    Find a the XOR of two given strings interpreted as binary numbers.\n\n    Sample Input:\n    \"0001\", \"1011\"\n\n    Sample Output:\n    \"1010\"\n    \"\"\"\n    a, b = nums\n    return int(str_num, 2) == int(a, 2) ^ int(b, 2)",
    "sols": [
      "def sol(nums=['11011111', '1101001110']):\n    a, b = nums\n    ans = int(a, 2) ^ int(b, 2)\n    return format(ans, \"b\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#11",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BinaryStrXOR_3",
    "sat": "def sat(str_num: str, nums=['100000001', '1010001001']):\n    \"\"\"\n    Find a the XOR of two given strings interpreted as binary numbers.\n\n    Sample Input:\n    \"0001\", \"1011\"\n\n    Sample Output:\n    \"1010\"\n    \"\"\"\n    a, b = nums\n    return int(str_num, 2) == int(a, 2) ^ int(b, 2)",
    "sols": [
      "def sol(nums=['100000001', '1010001001']):\n    a, b = nums\n    ans = int(a, 2) ^ int(b, 2)\n    return format(ans, \"b\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#11",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BinaryStrXOR_4",
    "sat": "def sat(str_num: str, nums=['10010110', '10000']):\n    \"\"\"\n    Find a the XOR of two given strings interpreted as binary numbers.\n\n    Sample Input:\n    \"0001\", \"1011\"\n\n    Sample Output:\n    \"1010\"\n    \"\"\"\n    a, b = nums\n    return int(str_num, 2) == int(a, 2) ^ int(b, 2)",
    "sols": [
      "def sol(nums=['10010110', '10000']):\n    a, b = nums\n    ans = int(a, 2) ^ int(b, 2)\n    return format(ans, \"b\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#11",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BinaryStrXOR_5",
    "sat": "def sat(str_num: str, nums=['111010100', '111110101']):\n    \"\"\"\n    Find a the XOR of two given strings interpreted as binary numbers.\n\n    Sample Input:\n    \"0001\", \"1011\"\n\n    Sample Output:\n    \"1010\"\n    \"\"\"\n    a, b = nums\n    return int(str_num, 2) == int(a, 2) ^ int(b, 2)",
    "sols": [
      "def sol(nums=['111010100', '111110101']):\n    a, b = nums\n    ans = int(a, 2) ^ int(b, 2)\n    return format(ans, \"b\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#11",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BinaryStrXOR_6",
    "sat": "def sat(str_num: str, nums=['1010111111', '11111010']):\n    \"\"\"\n    Find a the XOR of two given strings interpreted as binary numbers.\n\n    Sample Input:\n    \"0001\", \"1011\"\n\n    Sample Output:\n    \"1010\"\n    \"\"\"\n    a, b = nums\n    return int(str_num, 2) == int(a, 2) ^ int(b, 2)",
    "sols": [
      "def sol(nums=['1010111111', '11111010']):\n    a, b = nums\n    ans = int(a, 2) ^ int(b, 2)\n    return format(ans, \"b\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#11",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BinaryStrXOR_7",
    "sat": "def sat(str_num: str, nums=['1011010010', '110100']):\n    \"\"\"\n    Find a the XOR of two given strings interpreted as binary numbers.\n\n    Sample Input:\n    \"0001\", \"1011\"\n\n    Sample Output:\n    \"1010\"\n    \"\"\"\n    a, b = nums\n    return int(str_num, 2) == int(a, 2) ^ int(b, 2)",
    "sols": [
      "def sol(nums=['1011010010', '110100']):\n    a, b = nums\n    ans = int(a, 2) ^ int(b, 2)\n    return format(ans, \"b\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#11",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BinaryStrXOR_8",
    "sat": "def sat(str_num: str, nums=['1000101111', '110110011']):\n    \"\"\"\n    Find a the XOR of two given strings interpreted as binary numbers.\n\n    Sample Input:\n    \"0001\", \"1011\"\n\n    Sample Output:\n    \"1010\"\n    \"\"\"\n    a, b = nums\n    return int(str_num, 2) == int(a, 2) ^ int(b, 2)",
    "sols": [
      "def sol(nums=['1000101111', '110110011']):\n    a, b = nums\n    ans = int(a, 2) ^ int(b, 2)\n    return format(ans, \"b\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#11",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BinaryStrXOR_9",
    "sat": "def sat(str_num: str, nums=['1000110', '1101101100']):\n    \"\"\"\n    Find a the XOR of two given strings interpreted as binary numbers.\n\n    Sample Input:\n    \"0001\", \"1011\"\n\n    Sample Output:\n    \"1010\"\n    \"\"\"\n    a, b = nums\n    return int(str_num, 2) == int(a, 2) ^ int(b, 2)",
    "sols": [
      "def sol(nums=['1000110', '1101101100']):\n    a, b = nums\n    ans = int(a, 2) ^ int(b, 2)\n    return format(ans, \"b\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#11",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LongestStr_0",
    "sat": "def sat(ans: str, words=['these', 'are', 'some', 'pretty', 'long', 'words']):\n    \"\"\"\n    Find the longest of a list of strings\n\n    Sample Input:\n    [\"cat\", \"dog\", \"sheep\", \"chimp\"]\n\n    Sample Output:\n    \"sheep\"\n    \"\"\"\n    return ans in words and all(len(ans) >= len(w) for w in words)",
    "sols": [
      "def sol(words=['these', 'are', 'some', 'pretty', 'long', 'words']):\n    return max(words, key=len)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#12",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LongestStr_1",
    "sat": "def sat(ans: str, words=['suquojurethy', 'zetenejubichicyj', 'dyzeroquyxipyfe']):\n    \"\"\"\n    Find the longest of a list of strings\n\n    Sample Input:\n    [\"cat\", \"dog\", \"sheep\", \"chimp\"]\n\n    Sample Output:\n    \"sheep\"\n    \"\"\"\n    return ans in words and all(len(ans) >= len(w) for w in words)",
    "sols": [
      "def sol(words=['suquojurethy', 'zetenejubichicyj', 'dyzeroquyxipyfe']):\n    return max(words, key=len)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#12",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LongestStr_2",
    "sat": "def sat(ans: str, words=['thusisequiw', 'tevozequetextupetha', 'texterut', 'zopuhesofowyk', 'chajokapechunekizic', 'hefuhyjiwakifyma', 'thopebom', 'pah']):\n    \"\"\"\n    Find the longest of a list of strings\n\n    Sample Input:\n    [\"cat\", \"dog\", \"sheep\", \"chimp\"]\n\n    Sample Output:\n    \"sheep\"\n    \"\"\"\n    return ans in words and all(len(ans) >= len(w) for w in words)",
    "sols": [
      "def sol(words=['thusisequiw', 'tevozequetextupetha', 'texterut', 'zopuhesofowyk', 'chajokapechunekizic', 'hefuhyjiwakifyma', 'thopebom', 'pah']):\n    return max(words, key=len)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#12",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LongestStr_3",
    "sat": "def sat(ans: str, words=['melo', 'zoj', 'wujololyfytew', 'barivitextyte', 'decipywiduvaq', 'ruty', 'gekusoduz']):\n    \"\"\"\n    Find the longest of a list of strings\n\n    Sample Input:\n    [\"cat\", \"dog\", \"sheep\", \"chimp\"]\n\n    Sample Output:\n    \"sheep\"\n    \"\"\"\n    return ans in words and all(len(ans) >= len(w) for w in words)",
    "sols": [
      "def sol(words=['melo', 'zoj', 'wujololyfytew', 'barivitextyte', 'decipywiduvaq', 'ruty', 'gekusoduz']):\n    return max(words, key=len)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#12",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LongestStr_4",
    "sat": "def sat(ans: str, words=['quicydynigatha', 'pethiquifegosych', 'jixotextoxa', 'pe', 'xona', 'cifuco', 'gyrejypifam']):\n    \"\"\"\n    Find the longest of a list of strings\n\n    Sample Input:\n    [\"cat\", \"dog\", \"sheep\", \"chimp\"]\n\n    Sample Output:\n    \"sheep\"\n    \"\"\"\n    return ans in words and all(len(ans) >= len(w) for w in words)",
    "sols": [
      "def sol(words=['quicydynigatha', 'pethiquifegosych', 'jixotextoxa', 'pe', 'xona', 'cifuco', 'gyrejypifam']):\n    return max(words, key=len)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#12",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LongestStr_5",
    "sat": "def sat(ans: str, words=['dyhurynorikus', 'zyfisaxuxi']):\n    \"\"\"\n    Find the longest of a list of strings\n\n    Sample Input:\n    [\"cat\", \"dog\", \"sheep\", \"chimp\"]\n\n    Sample Output:\n    \"sheep\"\n    \"\"\"\n    return ans in words and all(len(ans) >= len(w) for w in words)",
    "sols": [
      "def sol(words=['dyhurynorikus', 'zyfisaxuxi']):\n    return max(words, key=len)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#12",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LongestStr_6",
    "sat": "def sat(ans: str, words=['gyt', 'ny', 'venokafyliwycho', 'tidemu', 'jipenuwe', 'juquoxusedochichago', 'hakidyzagi', 'kisegitext']):\n    \"\"\"\n    Find the longest of a list of strings\n\n    Sample Input:\n    [\"cat\", \"dog\", \"sheep\", \"chimp\"]\n\n    Sample Output:\n    \"sheep\"\n    \"\"\"\n    return ans in words and all(len(ans) >= len(w) for w in words)",
    "sols": [
      "def sol(words=['gyt', 'ny', 'venokafyliwycho', 'tidemu', 'jipenuwe', 'juquoxusedochichago', 'hakidyzagi', 'kisegitext']):\n    return max(words, key=len)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#12",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LongestStr_7",
    "sat": "def sat(ans: str, words=['lojisa', 'wucepytaw', 'tyhithos', 'kyruhidanu', 'conyxize', 'gufowocucitextocohu', 'chucu', 'cithukex', 'chimetho']):\n    \"\"\"\n    Find the longest of a list of strings\n\n    Sample Input:\n    [\"cat\", \"dog\", \"sheep\", \"chimp\"]\n\n    Sample Output:\n    \"sheep\"\n    \"\"\"\n    return ans in words and all(len(ans) >= len(w) for w in words)",
    "sols": [
      "def sol(words=['lojisa', 'wucepytaw', 'tyhithos', 'kyruhidanu', 'conyxize', 'gufowocucitextocohu', 'chucu', 'cithukex', 'chimetho']):\n    return max(words, key=len)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#12",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LongestStr_8",
    "sat": "def sat(ans: str, words=['juvowymifib', 'nycowocacofyvahavura', 'je', 'lagurichutexten', 'zidothezovitex', 'dathokulotextixemag', 'warilylubykyg', 'chesarecikathymithot', 'kimewichujymap']):\n    \"\"\"\n    Find the longest of a list of strings\n\n    Sample Input:\n    [\"cat\", \"dog\", \"sheep\", \"chimp\"]\n\n    Sample Output:\n    \"sheep\"\n    \"\"\"\n    return ans in words and all(len(ans) >= len(w) for w in words)",
    "sols": [
      "def sol(words=['juvowymifib', 'nycowocacofyvahavura', 'je', 'lagurichutexten', 'zidothezovitex', 'dathokulotextixemag', 'warilylubykyg', 'chesarecikathymithot', 'kimewichujymap']):\n    return max(words, key=len)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#12",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LongestStr_9",
    "sat": "def sat(ans: str, words=['gofyhafucochilixisu', 'textafiquade', 'me', 'fasuquyjodinachyl', 'textipamadeh', 'gofuthofequez', 'co']):\n    \"\"\"\n    Find the longest of a list of strings\n\n    Sample Input:\n    [\"cat\", \"dog\", \"sheep\", \"chimp\"]\n\n    Sample Output:\n    \"sheep\"\n    \"\"\"\n    return ans in words and all(len(ans) >= len(w) for w in words)",
    "sols": [
      "def sol(words=['gofyhafucochilixisu', 'textafiquade', 'me', 'fasuquyjodinachyl', 'textipamadeh', 'gofuthofequez', 'co']):\n    return max(words, key=len)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#12",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CertifiedGCD_0",
    "sat": "def sat(ans: List[int], m=1408862, n=2113293):\n    \"\"\"\n    Find the greatest common divisor of two integers m, n and a certificate a, b such that m*a + n*b = gcd\n\n    Sample Input:\n    20, 30\n\n    Sample Output:\n    10, -1, 1\n    \"\"\"\n    gcd, a, b = ans\n    return m % gcd == n % gcd == 0 and a * m + b * n == gcd and gcd > 0",
    "sols": [
      "def sol(m=1408862, n=2113293):\n    \"\"\"\n    Derivation of solution below\n    Recursive solution guarantees a * (big % small) + b * small == gcd\n    Let d = big // small so (big % small) == big - small * d\n    gives a * (big - small * d) + b * small == gcd\n    or equivalently (b - a * d) * small + a * big == gcd\n    \"\"\"\n\n    def gcd_cert(small, big):\n        \"\"\"Returns gcd, a, b, such that small * a + big * b == gcd\"\"\"\n        assert 0 < small <= big\n        if big % small == 0:\n            return [small, 1, 0]\n        gcd, a, b = gcd_cert(big % small, small)\n        return [gcd, b - a * (big // small), a]\n\n    if m < n:\n        return gcd_cert(m, n)\n    gcd, a, b = gcd_cert(n, m)\n    return [gcd, b, a]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#13",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CertifiedGCD_1",
    "sat": "def sat(ans: List[int], m=2642408, n=828886):\n    \"\"\"\n    Find the greatest common divisor of two integers m, n and a certificate a, b such that m*a + n*b = gcd\n\n    Sample Input:\n    20, 30\n\n    Sample Output:\n    10, -1, 1\n    \"\"\"\n    gcd, a, b = ans\n    return m % gcd == n % gcd == 0 and a * m + b * n == gcd and gcd > 0",
    "sols": [
      "def sol(m=2642408, n=828886):\n    \"\"\"\n    Derivation of solution below\n    Recursive solution guarantees a * (big % small) + b * small == gcd\n    Let d = big // small so (big % small) == big - small * d\n    gives a * (big - small * d) + b * small == gcd\n    or equivalently (b - a * d) * small + a * big == gcd\n    \"\"\"\n\n    def gcd_cert(small, big):\n        \"\"\"Returns gcd, a, b, such that small * a + big * b == gcd\"\"\"\n        assert 0 < small <= big\n        if big % small == 0:\n            return [small, 1, 0]\n        gcd, a, b = gcd_cert(big % small, small)\n        return [gcd, b - a * (big // small), a]\n\n    if m < n:\n        return gcd_cert(m, n)\n    gcd, a, b = gcd_cert(n, m)\n    return [gcd, b, a]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#13",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CertifiedGCD_2",
    "sat": "def sat(ans: List[int], m=184428, n=105545439738):\n    \"\"\"\n    Find the greatest common divisor of two integers m, n and a certificate a, b such that m*a + n*b = gcd\n\n    Sample Input:\n    20, 30\n\n    Sample Output:\n    10, -1, 1\n    \"\"\"\n    gcd, a, b = ans\n    return m % gcd == n % gcd == 0 and a * m + b * n == gcd and gcd > 0",
    "sols": [
      "def sol(m=184428, n=105545439738):\n    \"\"\"\n    Derivation of solution below\n    Recursive solution guarantees a * (big % small) + b * small == gcd\n    Let d = big // small so (big % small) == big - small * d\n    gives a * (big - small * d) + b * small == gcd\n    or equivalently (b - a * d) * small + a * big == gcd\n    \"\"\"\n\n    def gcd_cert(small, big):\n        \"\"\"Returns gcd, a, b, such that small * a + big * b == gcd\"\"\"\n        assert 0 < small <= big\n        if big % small == 0:\n            return [small, 1, 0]\n        gcd, a, b = gcd_cert(big % small, small)\n        return [gcd, b - a * (big // small), a]\n\n    if m < n:\n        return gcd_cert(m, n)\n    gcd, a, b = gcd_cert(n, m)\n    return [gcd, b, a]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#13",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CertifiedGCD_3",
    "sat": "def sat(ans: List[int], m=3956548155, n=103530):\n    \"\"\"\n    Find the greatest common divisor of two integers m, n and a certificate a, b such that m*a + n*b = gcd\n\n    Sample Input:\n    20, 30\n\n    Sample Output:\n    10, -1, 1\n    \"\"\"\n    gcd, a, b = ans\n    return m % gcd == n % gcd == 0 and a * m + b * n == gcd and gcd > 0",
    "sols": [
      "def sol(m=3956548155, n=103530):\n    \"\"\"\n    Derivation of solution below\n    Recursive solution guarantees a * (big % small) + b * small == gcd\n    Let d = big // small so (big % small) == big - small * d\n    gives a * (big - small * d) + b * small == gcd\n    or equivalently (b - a * d) * small + a * big == gcd\n    \"\"\"\n\n    def gcd_cert(small, big):\n        \"\"\"Returns gcd, a, b, such that small * a + big * b == gcd\"\"\"\n        assert 0 < small <= big\n        if big % small == 0:\n            return [small, 1, 0]\n        gcd, a, b = gcd_cert(big % small, small)\n        return [gcd, b - a * (big // small), a]\n\n    if m < n:\n        return gcd_cert(m, n)\n    gcd, a, b = gcd_cert(n, m)\n    return [gcd, b, a]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#13",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CertifiedGCD_4",
    "sat": "def sat(ans: List[int], m=101920, n=55199657760):\n    \"\"\"\n    Find the greatest common divisor of two integers m, n and a certificate a, b such that m*a + n*b = gcd\n\n    Sample Input:\n    20, 30\n\n    Sample Output:\n    10, -1, 1\n    \"\"\"\n    gcd, a, b = ans\n    return m % gcd == n % gcd == 0 and a * m + b * n == gcd and gcd > 0",
    "sols": [
      "def sol(m=101920, n=55199657760):\n    \"\"\"\n    Derivation of solution below\n    Recursive solution guarantees a * (big % small) + b * small == gcd\n    Let d = big // small so (big % small) == big - small * d\n    gives a * (big - small * d) + b * small == gcd\n    or equivalently (b - a * d) * small + a * big == gcd\n    \"\"\"\n\n    def gcd_cert(small, big):\n        \"\"\"Returns gcd, a, b, such that small * a + big * b == gcd\"\"\"\n        assert 0 < small <= big\n        if big % small == 0:\n            return [small, 1, 0]\n        gcd, a, b = gcd_cert(big % small, small)\n        return [gcd, b - a * (big // small), a]\n\n    if m < n:\n        return gcd_cert(m, n)\n    gcd, a, b = gcd_cert(n, m)\n    return [gcd, b, a]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#13",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CertifiedGCD_5",
    "sat": "def sat(ans: List[int], m=49824, n=2529):\n    \"\"\"\n    Find the greatest common divisor of two integers m, n and a certificate a, b such that m*a + n*b = gcd\n\n    Sample Input:\n    20, 30\n\n    Sample Output:\n    10, -1, 1\n    \"\"\"\n    gcd, a, b = ans\n    return m % gcd == n % gcd == 0 and a * m + b * n == gcd and gcd > 0",
    "sols": [
      "def sol(m=49824, n=2529):\n    \"\"\"\n    Derivation of solution below\n    Recursive solution guarantees a * (big % small) + b * small == gcd\n    Let d = big // small so (big % small) == big - small * d\n    gives a * (big - small * d) + b * small == gcd\n    or equivalently (b - a * d) * small + a * big == gcd\n    \"\"\"\n\n    def gcd_cert(small, big):\n        \"\"\"Returns gcd, a, b, such that small * a + big * b == gcd\"\"\"\n        assert 0 < small <= big\n        if big % small == 0:\n            return [small, 1, 0]\n        gcd, a, b = gcd_cert(big % small, small)\n        return [gcd, b - a * (big // small), a]\n\n    if m < n:\n        return gcd_cert(m, n)\n    gcd, a, b = gcd_cert(n, m)\n    return [gcd, b, a]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#13",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CertifiedGCD_6",
    "sat": "def sat(ans: List[int], m=72928, n=5936):\n    \"\"\"\n    Find the greatest common divisor of two integers m, n and a certificate a, b such that m*a + n*b = gcd\n\n    Sample Input:\n    20, 30\n\n    Sample Output:\n    10, -1, 1\n    \"\"\"\n    gcd, a, b = ans\n    return m % gcd == n % gcd == 0 and a * m + b * n == gcd and gcd > 0",
    "sols": [
      "def sol(m=72928, n=5936):\n    \"\"\"\n    Derivation of solution below\n    Recursive solution guarantees a * (big % small) + b * small == gcd\n    Let d = big // small so (big % small) == big - small * d\n    gives a * (big - small * d) + b * small == gcd\n    or equivalently (b - a * d) * small + a * big == gcd\n    \"\"\"\n\n    def gcd_cert(small, big):\n        \"\"\"Returns gcd, a, b, such that small * a + big * b == gcd\"\"\"\n        assert 0 < small <= big\n        if big % small == 0:\n            return [small, 1, 0]\n        gcd, a, b = gcd_cert(big % small, small)\n        return [gcd, b - a * (big // small), a]\n\n    if m < n:\n        return gcd_cert(m, n)\n    gcd, a, b = gcd_cert(n, m)\n    return [gcd, b, a]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#13",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CertifiedGCD_7",
    "sat": "def sat(ans: List[int], m=412417661, n=42859041):\n    \"\"\"\n    Find the greatest common divisor of two integers m, n and a certificate a, b such that m*a + n*b = gcd\n\n    Sample Input:\n    20, 30\n\n    Sample Output:\n    10, -1, 1\n    \"\"\"\n    gcd, a, b = ans\n    return m % gcd == n % gcd == 0 and a * m + b * n == gcd and gcd > 0",
    "sols": [
      "def sol(m=412417661, n=42859041):\n    \"\"\"\n    Derivation of solution below\n    Recursive solution guarantees a * (big % small) + b * small == gcd\n    Let d = big // small so (big % small) == big - small * d\n    gives a * (big - small * d) + b * small == gcd\n    or equivalently (b - a * d) * small + a * big == gcd\n    \"\"\"\n\n    def gcd_cert(small, big):\n        \"\"\"Returns gcd, a, b, such that small * a + big * b == gcd\"\"\"\n        assert 0 < small <= big\n        if big % small == 0:\n            return [small, 1, 0]\n        gcd, a, b = gcd_cert(big % small, small)\n        return [gcd, b - a * (big // small), a]\n\n    if m < n:\n        return gcd_cert(m, n)\n    gcd, a, b = gcd_cert(n, m)\n    return [gcd, b, a]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#13",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CertifiedGCD_8",
    "sat": "def sat(ans: List[int], m=787285255, n=5204635750010320):\n    \"\"\"\n    Find the greatest common divisor of two integers m, n and a certificate a, b such that m*a + n*b = gcd\n\n    Sample Input:\n    20, 30\n\n    Sample Output:\n    10, -1, 1\n    \"\"\"\n    gcd, a, b = ans\n    return m % gcd == n % gcd == 0 and a * m + b * n == gcd and gcd > 0",
    "sols": [
      "def sol(m=787285255, n=5204635750010320):\n    \"\"\"\n    Derivation of solution below\n    Recursive solution guarantees a * (big % small) + b * small == gcd\n    Let d = big // small so (big % small) == big - small * d\n    gives a * (big - small * d) + b * small == gcd\n    or equivalently (b - a * d) * small + a * big == gcd\n    \"\"\"\n\n    def gcd_cert(small, big):\n        \"\"\"Returns gcd, a, b, such that small * a + big * b == gcd\"\"\"\n        assert 0 < small <= big\n        if big % small == 0:\n            return [small, 1, 0]\n        gcd, a, b = gcd_cert(big % small, small)\n        return [gcd, b - a * (big // small), a]\n\n    if m < n:\n        return gcd_cert(m, n)\n    gcd, a, b = gcd_cert(n, m)\n    return [gcd, b, a]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#13",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CertifiedGCD_9",
    "sat": "def sat(ans: List[int], m=4244155816, n=3199315930):\n    \"\"\"\n    Find the greatest common divisor of two integers m, n and a certificate a, b such that m*a + n*b = gcd\n\n    Sample Input:\n    20, 30\n\n    Sample Output:\n    10, -1, 1\n    \"\"\"\n    gcd, a, b = ans\n    return m % gcd == n % gcd == 0 and a * m + b * n == gcd and gcd > 0",
    "sols": [
      "def sol(m=4244155816, n=3199315930):\n    \"\"\"\n    Derivation of solution below\n    Recursive solution guarantees a * (big % small) + b * small == gcd\n    Let d = big // small so (big % small) == big - small * d\n    gives a * (big - small * d) + b * small == gcd\n    or equivalently (b - a * d) * small + a * big == gcd\n    \"\"\"\n\n    def gcd_cert(small, big):\n        \"\"\"Returns gcd, a, b, such that small * a + big * b == gcd\"\"\"\n        assert 0 < small <= big\n        if big % small == 0:\n            return [small, 1, 0]\n        gcd, a, b = gcd_cert(big % small, small)\n        return [gcd, b - a * (big // small), a]\n\n    if m < n:\n        return gcd_cert(m, n)\n    gcd, a, b = gcd_cert(n, m)\n    return [gcd, b, a]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#13",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "AllPrefixes_0",
    "sat": "def sat(prefixes: List[str], s=\"donesezichethofalij\"):\n    \"\"\"\n    Find all prefixes of a given string\n\n    Sample Input:\n    \"aabcd\"\n\n    Sample Output:\n    [\"\", \"a\", \"aa\", \"aab\", \"aabc\", \"aabcd\"]\n    \"\"\"\n    return all(s.startswith(p) for p in prefixes) and len(set(prefixes)) > len(s)",
    "sols": [
      "def sol(s=\"donesezichethofalij\"):\n    return [s[:i] for i in range(len(s) + 1)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#14",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "AllPrefixes_1",
    "sat": "def sat(prefixes: List[str], s=\"vuf\"):\n    \"\"\"\n    Find all prefixes of a given string\n\n    Sample Input:\n    \"aabcd\"\n\n    Sample Output:\n    [\"\", \"a\", \"aa\", \"aab\", \"aabc\", \"aabcd\"]\n    \"\"\"\n    return all(s.startswith(p) for p in prefixes) and len(set(prefixes)) > len(s)",
    "sols": [
      "def sol(s=\"vuf\"):\n    return [s[:i] for i in range(len(s) + 1)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#14",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "AllPrefixes_2",
    "sat": "def sat(prefixes: List[str], s=\"t\"):\n    \"\"\"\n    Find all prefixes of a given string\n\n    Sample Input:\n    \"aabcd\"\n\n    Sample Output:\n    [\"\", \"a\", \"aa\", \"aab\", \"aabc\", \"aabcd\"]\n    \"\"\"\n    return all(s.startswith(p) for p in prefixes) and len(set(prefixes)) > len(s)",
    "sols": [
      "def sol(s=\"t\"):\n    return [s[:i] for i in range(len(s) + 1)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#14",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "AllPrefixes_3",
    "sat": "def sat(prefixes: List[str], s=\"qu\"):\n    \"\"\"\n    Find all prefixes of a given string\n\n    Sample Input:\n    \"aabcd\"\n\n    Sample Output:\n    [\"\", \"a\", \"aa\", \"aab\", \"aabc\", \"aabcd\"]\n    \"\"\"\n    return all(s.startswith(p) for p in prefixes) and len(set(prefixes)) > len(s)",
    "sols": [
      "def sol(s=\"qu\"):\n    return [s[:i] for i in range(len(s) + 1)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#14",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "AllPrefixes_4",
    "sat": "def sat(prefixes: List[str], s=\"dugethixuneku\"):\n    \"\"\"\n    Find all prefixes of a given string\n\n    Sample Input:\n    \"aabcd\"\n\n    Sample Output:\n    [\"\", \"a\", \"aa\", \"aab\", \"aabc\", \"aabcd\"]\n    \"\"\"\n    return all(s.startswith(p) for p in prefixes) and len(set(prefixes)) > len(s)",
    "sols": [
      "def sol(s=\"dugethixuneku\"):\n    return [s[:i] for i in range(len(s) + 1)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#14",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "AllPrefixes_5",
    "sat": "def sat(prefixes: List[str], s=\"xetijidixuwat\"):\n    \"\"\"\n    Find all prefixes of a given string\n\n    Sample Input:\n    \"aabcd\"\n\n    Sample Output:\n    [\"\", \"a\", \"aa\", \"aab\", \"aabc\", \"aabcd\"]\n    \"\"\"\n    return all(s.startswith(p) for p in prefixes) and len(set(prefixes)) > len(s)",
    "sols": [
      "def sol(s=\"xetijidixuwat\"):\n    return [s[:i] for i in range(len(s) + 1)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#14",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "AllPrefixes_6",
    "sat": "def sat(prefixes: List[str], s=\"tilyxut\"):\n    \"\"\"\n    Find all prefixes of a given string\n\n    Sample Input:\n    \"aabcd\"\n\n    Sample Output:\n    [\"\", \"a\", \"aa\", \"aab\", \"aabc\", \"aabcd\"]\n    \"\"\"\n    return all(s.startswith(p) for p in prefixes) and len(set(prefixes)) > len(s)",
    "sols": [
      "def sol(s=\"tilyxut\"):\n    return [s[:i] for i in range(len(s) + 1)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#14",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "AllPrefixes_7",
    "sat": "def sat(prefixes: List[str], s=\"zami\"):\n    \"\"\"\n    Find all prefixes of a given string\n\n    Sample Input:\n    \"aabcd\"\n\n    Sample Output:\n    [\"\", \"a\", \"aa\", \"aab\", \"aabc\", \"aabcd\"]\n    \"\"\"\n    return all(s.startswith(p) for p in prefixes) and len(set(prefixes)) > len(s)",
    "sols": [
      "def sol(s=\"zami\"):\n    return [s[:i] for i in range(len(s) + 1)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#14",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "AllPrefixes_8",
    "sat": "def sat(prefixes: List[str], s=\"joxach\"):\n    \"\"\"\n    Find all prefixes of a given string\n\n    Sample Input:\n    \"aabcd\"\n\n    Sample Output:\n    [\"\", \"a\", \"aa\", \"aab\", \"aabc\", \"aabcd\"]\n    \"\"\"\n    return all(s.startswith(p) for p in prefixes) and len(set(prefixes)) > len(s)",
    "sols": [
      "def sol(s=\"joxach\"):\n    return [s[:i] for i in range(len(s) + 1)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#14",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "AllPrefixes_9",
    "sat": "def sat(prefixes: List[str], s=\"juch\"):\n    \"\"\"\n    Find all prefixes of a given string\n\n    Sample Input:\n    \"aabcd\"\n\n    Sample Output:\n    [\"\", \"a\", \"aa\", \"aab\", \"aabc\", \"aabcd\"]\n    \"\"\"\n    return all(s.startswith(p) for p in prefixes) and len(set(prefixes)) > len(s)",
    "sols": [
      "def sol(s=\"juch\"):\n    return [s[:i] for i in range(len(s) + 1)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#14",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SpaceyRange_0",
    "sat": "def sat(ans: str, n=15):\n    \"\"\"\n    Find a string consisting of the non-negative integers up to n inclusive\n\n    Sample Input:\n    4\n\n    Sample Output:\n    '0 1 2 3 4'\n    \"\"\"\n    return [int(i) for i in ans.split(' ')] == list(range(n + 1))",
    "sols": [
      "def sol(n=15):\n    return ' '.join(str(i) for i in range(n + 1))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#15",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SpaceyRange_1",
    "sat": "def sat(ans: str, n=54635):\n    \"\"\"\n    Find a string consisting of the non-negative integers up to n inclusive\n\n    Sample Input:\n    4\n\n    Sample Output:\n    '0 1 2 3 4'\n    \"\"\"\n    return [int(i) for i in ans.split(' ')] == list(range(n + 1))",
    "sols": [
      "def sol(n=54635):\n    return ' '.join(str(i) for i in range(n + 1))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#15",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SpaceyRange_2",
    "sat": "def sat(ans: str, n=83):\n    \"\"\"\n    Find a string consisting of the non-negative integers up to n inclusive\n\n    Sample Input:\n    4\n\n    Sample Output:\n    '0 1 2 3 4'\n    \"\"\"\n    return [int(i) for i in ans.split(' ')] == list(range(n + 1))",
    "sols": [
      "def sol(n=83):\n    return ' '.join(str(i) for i in range(n + 1))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#15",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SpaceyRange_3",
    "sat": "def sat(ans: str, n=99847):\n    \"\"\"\n    Find a string consisting of the non-negative integers up to n inclusive\n\n    Sample Input:\n    4\n\n    Sample Output:\n    '0 1 2 3 4'\n    \"\"\"\n    return [int(i) for i in ans.split(' ')] == list(range(n + 1))",
    "sols": [
      "def sol(n=99847):\n    return ' '.join(str(i) for i in range(n + 1))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#15",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SpaceyRange_4",
    "sat": "def sat(ans: str, n=18215):\n    \"\"\"\n    Find a string consisting of the non-negative integers up to n inclusive\n\n    Sample Input:\n    4\n\n    Sample Output:\n    '0 1 2 3 4'\n    \"\"\"\n    return [int(i) for i in ans.split(' ')] == list(range(n + 1))",
    "sols": [
      "def sol(n=18215):\n    return ' '.join(str(i) for i in range(n + 1))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#15",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SpaceyRange_5",
    "sat": "def sat(ans: str, n=97292):\n    \"\"\"\n    Find a string consisting of the non-negative integers up to n inclusive\n\n    Sample Input:\n    4\n\n    Sample Output:\n    '0 1 2 3 4'\n    \"\"\"\n    return [int(i) for i in ans.split(' ')] == list(range(n + 1))",
    "sols": [
      "def sol(n=97292):\n    return ' '.join(str(i) for i in range(n + 1))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#15",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SpaceyRange_6",
    "sat": "def sat(ans: str, n=74968):\n    \"\"\"\n    Find a string consisting of the non-negative integers up to n inclusive\n\n    Sample Input:\n    4\n\n    Sample Output:\n    '0 1 2 3 4'\n    \"\"\"\n    return [int(i) for i in ans.split(' ')] == list(range(n + 1))",
    "sols": [
      "def sol(n=74968):\n    return ' '.join(str(i) for i in range(n + 1))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#15",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SpaceyRange_7",
    "sat": "def sat(ans: str, n=14815):\n    \"\"\"\n    Find a string consisting of the non-negative integers up to n inclusive\n\n    Sample Input:\n    4\n\n    Sample Output:\n    '0 1 2 3 4'\n    \"\"\"\n    return [int(i) for i in ans.split(' ')] == list(range(n + 1))",
    "sols": [
      "def sol(n=14815):\n    return ' '.join(str(i) for i in range(n + 1))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#15",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SpaceyRange_8",
    "sat": "def sat(ans: str, n=86905):\n    \"\"\"\n    Find a string consisting of the non-negative integers up to n inclusive\n\n    Sample Input:\n    4\n\n    Sample Output:\n    '0 1 2 3 4'\n    \"\"\"\n    return [int(i) for i in ans.split(' ')] == list(range(n + 1))",
    "sols": [
      "def sol(n=86905):\n    return ' '.join(str(i) for i in range(n + 1))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#15",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SpaceyRange_9",
    "sat": "def sat(ans: str, n=79126):\n    \"\"\"\n    Find a string consisting of the non-negative integers up to n inclusive\n\n    Sample Input:\n    4\n\n    Sample Output:\n    '0 1 2 3 4'\n    \"\"\"\n    return [int(i) for i in ans.split(' ')] == list(range(n + 1))",
    "sols": [
      "def sol(n=79126):\n    return ' '.join(str(i) for i in range(n + 1))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#15",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DistinctChars_0",
    "sat": "def sat(ans: List[str], s=\"The quick brown fox jumps over the lazy dog!\", n=28):\n    \"\"\"\n    Find the set of distinct characters in a string, ignoring case\n\n    Sample Input:\n    'HELlo', 4\n\n    Sample Output:\n    ['h', 'e', 'l', 'o']\n    \"\"\"\n    assert all(ans.count(c.lower()) == 1 for c in s)\n    assert all(c == c.lower() for c in ans)\n    assert all(c in s.lower() for c in ans)\n    return True",
    "sols": [
      "def sol(s=\"The quick brown fox jumps over the lazy dog!\", n=28):\n    return list(set(s.lower()))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#16",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DistinctChars_1",
    "sat": "def sat(ans: List[str], s=\"Iu]K,>Q8w\", n=9):\n    \"\"\"\n    Find the set of distinct characters in a string, ignoring case\n\n    Sample Input:\n    'HELlo', 4\n\n    Sample Output:\n    ['h', 'e', 'l', 'o']\n    \"\"\"\n    assert all(ans.count(c.lower()) == 1 for c in s)\n    assert all(c == c.lower() for c in ans)\n    assert all(c in s.lower() for c in ans)\n    return True",
    "sols": [
      "def sol(s=\"Iu]K,>Q8w\", n=9):\n    return list(set(s.lower()))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#16",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DistinctChars_2",
    "sat": "def sat(ans: List[str], s=\"JrUCk=ek&q^xBuvtm\", n=15):\n    \"\"\"\n    Find the set of distinct characters in a string, ignoring case\n\n    Sample Input:\n    'HELlo', 4\n\n    Sample Output:\n    ['h', 'e', 'l', 'o']\n    \"\"\"\n    assert all(ans.count(c.lower()) == 1 for c in s)\n    assert all(c == c.lower() for c in ans)\n    assert all(c in s.lower() for c in ans)\n    return True",
    "sols": [
      "def sol(s=\"JrUCk=ek&q^xBuvtm\", n=15):\n    return list(set(s.lower()))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#16",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DistinctChars_3",
    "sat": "def sat(ans: List[str], s=\"V-wKeN\", n=6):\n    \"\"\"\n    Find the set of distinct characters in a string, ignoring case\n\n    Sample Input:\n    'HELlo', 4\n\n    Sample Output:\n    ['h', 'e', 'l', 'o']\n    \"\"\"\n    assert all(ans.count(c.lower()) == 1 for c in s)\n    assert all(c == c.lower() for c in ans)\n    assert all(c in s.lower() for c in ans)\n    return True",
    "sols": [
      "def sol(s=\"V-wKeN\", n=6):\n    return list(set(s.lower()))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#16",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DistinctChars_4",
    "sat": "def sat(ans: List[str], s=\"F;J*qHN.^YC\", n=11):\n    \"\"\"\n    Find the set of distinct characters in a string, ignoring case\n\n    Sample Input:\n    'HELlo', 4\n\n    Sample Output:\n    ['h', 'e', 'l', 'o']\n    \"\"\"\n    assert all(ans.count(c.lower()) == 1 for c in s)\n    assert all(c == c.lower() for c in ans)\n    assert all(c in s.lower() for c in ans)\n    return True",
    "sols": [
      "def sol(s=\"F;J*qHN.^YC\", n=11):\n    return list(set(s.lower()))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#16",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DistinctChars_5",
    "sat": "def sat(ans: List[str], s=\">w8uGPtY<F@&H(\", n=14):\n    \"\"\"\n    Find the set of distinct characters in a string, ignoring case\n\n    Sample Input:\n    'HELlo', 4\n\n    Sample Output:\n    ['h', 'e', 'l', 'o']\n    \"\"\"\n    assert all(ans.count(c.lower()) == 1 for c in s)\n    assert all(c == c.lower() for c in ans)\n    assert all(c in s.lower() for c in ans)\n    return True",
    "sols": [
      "def sol(s=\">w8uGPtY<F@&H(\", n=14):\n    return list(set(s.lower()))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#16",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DistinctChars_6",
    "sat": "def sat(ans: List[str], s=\"Qc@\", n=3):\n    \"\"\"\n    Find the set of distinct characters in a string, ignoring case\n\n    Sample Input:\n    'HELlo', 4\n\n    Sample Output:\n    ['h', 'e', 'l', 'o']\n    \"\"\"\n    assert all(ans.count(c.lower()) == 1 for c in s)\n    assert all(c == c.lower() for c in ans)\n    assert all(c in s.lower() for c in ans)\n    return True",
    "sols": [
      "def sol(s=\"Qc@\", n=3):\n    return list(set(s.lower()))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#16",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DistinctChars_7",
    "sat": "def sat(ans: List[str], s=\"9TnB:|,G1jP3iF;c\", n=16):\n    \"\"\"\n    Find the set of distinct characters in a string, ignoring case\n\n    Sample Input:\n    'HELlo', 4\n\n    Sample Output:\n    ['h', 'e', 'l', 'o']\n    \"\"\"\n    assert all(ans.count(c.lower()) == 1 for c in s)\n    assert all(c == c.lower() for c in ans)\n    assert all(c in s.lower() for c in ans)\n    return True",
    "sols": [
      "def sol(s=\"9TnB:|,G1jP3iF;c\", n=16):\n    return list(set(s.lower()))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#16",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DistinctChars_8",
    "sat": "def sat(ans: List[str], s=\"VYPY4ME#-+=wXwcWfu1\", n=16):\n    \"\"\"\n    Find the set of distinct characters in a string, ignoring case\n\n    Sample Input:\n    'HELlo', 4\n\n    Sample Output:\n    ['h', 'e', 'l', 'o']\n    \"\"\"\n    assert all(ans.count(c.lower()) == 1 for c in s)\n    assert all(c == c.lower() for c in ans)\n    assert all(c in s.lower() for c in ans)\n    return True",
    "sols": [
      "def sol(s=\"VYPY4ME#-+=wXwcWfu1\", n=16):\n    return list(set(s.lower()))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#16",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DistinctChars_9",
    "sat": "def sat(ans: List[str], s=\"R3vudd I\", n=7):\n    \"\"\"\n    Find the set of distinct characters in a string, ignoring case\n\n    Sample Input:\n    'HELlo', 4\n\n    Sample Output:\n    ['h', 'e', 'l', 'o']\n    \"\"\"\n    assert all(ans.count(c.lower()) == 1 for c in s)\n    assert all(c == c.lower() for c in ans)\n    assert all(c in s.lower() for c in ans)\n    return True",
    "sols": [
      "def sol(s=\"R3vudd I\", n=7):\n    return list(set(s.lower()))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#16",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ParseMusic_0",
    "sat": "def sat(beats: List[int], score=\"o o o| o| .| .| .| o| o| o o o| .|\"):\n    \"\"\"\n    Parse a string of notes to beats, 'o'=4, 'o|'=2, '.|'=1\n\n    Example input:\n    'o o .| o|'\n\n    Example output:\n    [4, 4, 1, 2]\n    \"\"\"\n    return \" \".join({1: '.|', 2: 'o|', 4: 'o'}[b] for b in beats) == score",
    "sols": [
      "def sol(score=\"o o o| o| .| .| .| o| o| o o o| .|\"):\n    mapping = {'.|': 1, 'o|': 2, 'o': 4}\n    return [mapping[note] for note in score.split()]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#17",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ParseMusic_1",
    "sat": "def sat(beats: List[int], score=\".| o .| o| o| o| o| .| o o\"):\n    \"\"\"\n    Parse a string of notes to beats, 'o'=4, 'o|'=2, '.|'=1\n\n    Example input:\n    'o o .| o|'\n\n    Example output:\n    [4, 4, 1, 2]\n    \"\"\"\n    return \" \".join({1: '.|', 2: 'o|', 4: 'o'}[b] for b in beats) == score",
    "sols": [
      "def sol(score=\".| o .| o| o| o| o| .| o o\"):\n    mapping = {'.|': 1, 'o|': 2, 'o': 4}\n    return [mapping[note] for note in score.split()]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#17",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ParseMusic_2",
    "sat": "def sat(beats: List[int], score=\"o| .| .| .| .| o| o .| o| o| o\"):\n    \"\"\"\n    Parse a string of notes to beats, 'o'=4, 'o|'=2, '.|'=1\n\n    Example input:\n    'o o .| o|'\n\n    Example output:\n    [4, 4, 1, 2]\n    \"\"\"\n    return \" \".join({1: '.|', 2: 'o|', 4: 'o'}[b] for b in beats) == score",
    "sols": [
      "def sol(score=\"o| .| .| .| .| o| o .| o| o| o\"):\n    mapping = {'.|': 1, 'o|': 2, 'o': 4}\n    return [mapping[note] for note in score.split()]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#17",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ParseMusic_3",
    "sat": "def sat(beats: List[int], score=\".| o|\"):\n    \"\"\"\n    Parse a string of notes to beats, 'o'=4, 'o|'=2, '.|'=1\n\n    Example input:\n    'o o .| o|'\n\n    Example output:\n    [4, 4, 1, 2]\n    \"\"\"\n    return \" \".join({1: '.|', 2: 'o|', 4: 'o'}[b] for b in beats) == score",
    "sols": [
      "def sol(score=\".| o|\"):\n    mapping = {'.|': 1, 'o|': 2, 'o': 4}\n    return [mapping[note] for note in score.split()]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#17",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ParseMusic_4",
    "sat": "def sat(beats: List[int], score=\"\"):\n    \"\"\"\n    Parse a string of notes to beats, 'o'=4, 'o|'=2, '.|'=1\n\n    Example input:\n    'o o .| o|'\n\n    Example output:\n    [4, 4, 1, 2]\n    \"\"\"\n    return \" \".join({1: '.|', 2: 'o|', 4: 'o'}[b] for b in beats) == score",
    "sols": [
      "def sol(score=\"\"):\n    mapping = {'.|': 1, 'o|': 2, 'o': 4}\n    return [mapping[note] for note in score.split()]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#17",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ParseMusic_5",
    "sat": "def sat(beats: List[int], score=\".| o o .| o o\"):\n    \"\"\"\n    Parse a string of notes to beats, 'o'=4, 'o|'=2, '.|'=1\n\n    Example input:\n    'o o .| o|'\n\n    Example output:\n    [4, 4, 1, 2]\n    \"\"\"\n    return \" \".join({1: '.|', 2: 'o|', 4: 'o'}[b] for b in beats) == score",
    "sols": [
      "def sol(score=\".| o o .| o o\"):\n    mapping = {'.|': 1, 'o|': 2, 'o': 4}\n    return [mapping[note] for note in score.split()]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#17",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ParseMusic_6",
    "sat": "def sat(beats: List[int], score=\"o o| .| .| o o| .| .| o o .|\"):\n    \"\"\"\n    Parse a string of notes to beats, 'o'=4, 'o|'=2, '.|'=1\n\n    Example input:\n    'o o .| o|'\n\n    Example output:\n    [4, 4, 1, 2]\n    \"\"\"\n    return \" \".join({1: '.|', 2: 'o|', 4: 'o'}[b] for b in beats) == score",
    "sols": [
      "def sol(score=\"o o| .| .| o o| .| .| o o .|\"):\n    mapping = {'.|': 1, 'o|': 2, 'o': 4}\n    return [mapping[note] for note in score.split()]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#17",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ParseMusic_7",
    "sat": "def sat(beats: List[int], score=\"o| o o| o\"):\n    \"\"\"\n    Parse a string of notes to beats, 'o'=4, 'o|'=2, '.|'=1\n\n    Example input:\n    'o o .| o|'\n\n    Example output:\n    [4, 4, 1, 2]\n    \"\"\"\n    return \" \".join({1: '.|', 2: 'o|', 4: 'o'}[b] for b in beats) == score",
    "sols": [
      "def sol(score=\"o| o o| o\"):\n    mapping = {'.|': 1, 'o|': 2, 'o': 4}\n    return [mapping[note] for note in score.split()]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#17",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ParseMusic_8",
    "sat": "def sat(beats: List[int], score=\".| o| o| o|\"):\n    \"\"\"\n    Parse a string of notes to beats, 'o'=4, 'o|'=2, '.|'=1\n\n    Example input:\n    'o o .| o|'\n\n    Example output:\n    [4, 4, 1, 2]\n    \"\"\"\n    return \" \".join({1: '.|', 2: 'o|', 4: 'o'}[b] for b in beats) == score",
    "sols": [
      "def sol(score=\".| o| o| o|\"):\n    mapping = {'.|': 1, 'o|': 2, 'o': 4}\n    return [mapping[note] for note in score.split()]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#17",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ParseMusic_9",
    "sat": "def sat(beats: List[int], score=\"o| o o o| o| .| o o| o| o| o|\"):\n    \"\"\"\n    Parse a string of notes to beats, 'o'=4, 'o|'=2, '.|'=1\n\n    Example input:\n    'o o .| o|'\n\n    Example output:\n    [4, 4, 1, 2]\n    \"\"\"\n    return \" \".join({1: '.|', 2: 'o|', 4: 'o'}[b] for b in beats) == score",
    "sols": [
      "def sol(score=\"o| o o o| o| .| o o| o| o| o|\"):\n    mapping = {'.|': 1, 'o|': 2, 'o': 4}\n    return [mapping[note] for note in score.split()]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#17",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "OverlappingCount_0",
    "sat": "def sat(ans: List[int], s=\"Bananannanaannanaanananananana\", sub=\"anan\", count=7):\n    \"\"\"\n    Find occurrences of a substring in a parent string *including overlaps*\n\n    Sample Input:\n    'helllo', 'll'\n\n    Sample Output:\n    [2, 3]\n    \"\"\"\n    return all(sub == s[i:i + len(sub)] and i >= 0 for i in ans) and len(set(ans)) >= count",
    "sols": [
      "def sol(s=\"Bananannanaannanaanananananana\", sub=\"anan\", count=7):\n    ans = []\n    for i in range(len(s) + 1):\n        if s[i:i + len(sub)] == sub:\n            ans.append(i)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#18",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "OverlappingCount_1",
    "sat": "def sat(ans: List[int], s=\"halidykugadobezebothidububawuvejiquitextyrequamobythynethojahyquutatextoquuzilu\", sub=\"ne\", count=1):\n    \"\"\"\n    Find occurrences of a substring in a parent string *including overlaps*\n\n    Sample Input:\n    'helllo', 'll'\n\n    Sample Output:\n    [2, 3]\n    \"\"\"\n    return all(sub == s[i:i + len(sub)] and i >= 0 for i in ans) and len(set(ans)) >= count",
    "sols": [
      "def sol(s=\"halidykugadobezebothidububawuvejiquitextyrequamobythynethojahyquutatextoquuzilu\", sub=\"ne\", count=1):\n    ans = []\n    for i in range(len(s) + 1):\n        if s[i:i + len(sub)] == sub:\n            ans.append(i)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#18",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "OverlappingCount_2",
    "sat": "def sat(ans: List[int], s=\"sutapifitextidavyjedakotextopogonudy\", sub=\"te\", count=2):\n    \"\"\"\n    Find occurrences of a substring in a parent string *including overlaps*\n\n    Sample Input:\n    'helllo', 'll'\n\n    Sample Output:\n    [2, 3]\n    \"\"\"\n    return all(sub == s[i:i + len(sub)] and i >= 0 for i in ans) and len(set(ans)) >= count",
    "sols": [
      "def sol(s=\"sutapifitextidavyjedakotextopogonudy\", sub=\"te\", count=2):\n    ans = []\n    for i in range(len(s) + 1):\n        if s[i:i + len(sub)] == sub:\n            ans.append(i)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#18",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "OverlappingCount_3",
    "sat": "def sat(ans: List[int], s=\"fizyquohachoromuxuquatextidemihithacazynytytextukozarahuwyfuchyquyhidadytext\", sub=\"quohach\", count=1):\n    \"\"\"\n    Find occurrences of a substring in a parent string *including overlaps*\n\n    Sample Input:\n    'helllo', 'll'\n\n    Sample Output:\n    [2, 3]\n    \"\"\"\n    return all(sub == s[i:i + len(sub)] and i >= 0 for i in ans) and len(set(ans)) >= count",
    "sols": [
      "def sol(s=\"fizyquohachoromuxuquatextidemihithacazynytytextukozarahuwyfuchyquyhidadytext\", sub=\"quohach\", count=1):\n    ans = []\n    for i in range(len(s) + 1):\n        if s[i:i + len(sub)] == sub:\n            ans.append(i)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#18",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "OverlappingCount_4",
    "sat": "def sat(ans: List[int], s=\"wutextega\", sub=\"xtega\", count=1):\n    \"\"\"\n    Find occurrences of a substring in a parent string *including overlaps*\n\n    Sample Input:\n    'helllo', 'll'\n\n    Sample Output:\n    [2, 3]\n    \"\"\"\n    return all(sub == s[i:i + len(sub)] and i >= 0 for i in ans) and len(set(ans)) >= count",
    "sols": [
      "def sol(s=\"wutextega\", sub=\"xtega\", count=1):\n    ans = []\n    for i in range(len(s) + 1):\n        if s[i:i + len(sub)] == sub:\n            ans.append(i)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#18",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "OverlappingCount_5",
    "sat": "def sat(ans: List[int], s=\"mithathewyjewawohywegetogybijikuwyki\", sub=\"mithathewyjewawohywegetogybijik\", count=1):\n    \"\"\"\n    Find occurrences of a substring in a parent string *including overlaps*\n\n    Sample Input:\n    'helllo', 'll'\n\n    Sample Output:\n    [2, 3]\n    \"\"\"\n    return all(sub == s[i:i + len(sub)] and i >= 0 for i in ans) and len(set(ans)) >= count",
    "sols": [
      "def sol(s=\"mithathewyjewawohywegetogybijikuwyki\", sub=\"mithathewyjewawohywegetogybijik\", count=1):\n    ans = []\n    for i in range(len(s) + 1):\n        if s[i:i + len(sub)] == sub:\n            ans.append(i)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#18",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "OverlappingCount_6",
    "sat": "def sat(ans: List[int], s=\"thuwygithofythalujohotextyvudykyfowanaxetextyjosytextiroxisyhatextobijozynypym\", sub=\"textiro\", count=1):\n    \"\"\"\n    Find occurrences of a substring in a parent string *including overlaps*\n\n    Sample Input:\n    'helllo', 'll'\n\n    Sample Output:\n    [2, 3]\n    \"\"\"\n    return all(sub == s[i:i + len(sub)] and i >= 0 for i in ans) and len(set(ans)) >= count",
    "sols": [
      "def sol(s=\"thuwygithofythalujohotextyvudykyfowanaxetextyjosytextiroxisyhatextobijozynypym\", sub=\"textiro\", count=1):\n    ans = []\n    for i in range(len(s) + 1):\n        if s[i:i + len(sub)] == sub:\n            ans.append(i)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#18",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "OverlappingCount_7",
    "sat": "def sat(ans: List[int], s=\"chuzuwiguditonibethazejeluthydyludetextivosidathiwahasac\", sub=\"udetextiv\", count=1):\n    \"\"\"\n    Find occurrences of a substring in a parent string *including overlaps*\n\n    Sample Input:\n    'helllo', 'll'\n\n    Sample Output:\n    [2, 3]\n    \"\"\"\n    return all(sub == s[i:i + len(sub)] and i >= 0 for i in ans) and len(set(ans)) >= count",
    "sols": [
      "def sol(s=\"chuzuwiguditonibethazejeluthydyludetextivosidathiwahasac\", sub=\"udetextiv\", count=1):\n    ans = []\n    for i in range(len(s) + 1):\n        if s[i:i + len(sub)] == sub:\n            ans.append(i)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#18",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "OverlappingCount_8",
    "sat": "def sat(ans: List[int], s=\"fyvefyvybubukutextithiboquyjahedarihuwyvumenasatychutextyfarasyz\", sub=\"vefyvybubu\", count=1):\n    \"\"\"\n    Find occurrences of a substring in a parent string *including overlaps*\n\n    Sample Input:\n    'helllo', 'll'\n\n    Sample Output:\n    [2, 3]\n    \"\"\"\n    return all(sub == s[i:i + len(sub)] and i >= 0 for i in ans) and len(set(ans)) >= count",
    "sols": [
      "def sol(s=\"fyvefyvybubukutextithiboquyjahedarihuwyvumenasatychutextyfarasyz\", sub=\"vefyvybubu\", count=1):\n    ans = []\n    for i in range(len(s) + 1):\n        if s[i:i + len(sub)] == sub:\n            ans.append(i)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#18",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "OverlappingCount_9",
    "sat": "def sat(ans: List[int], s=\"jenedequugasitojepurivajymaquebanusuxoturarulivethecuchynywoduzuwizythichirowokepevuwy\", sub=\"dequugasitojepurivajymaquebanusuxot\", count=1):\n    \"\"\"\n    Find occurrences of a substring in a parent string *including overlaps*\n\n    Sample Input:\n    'helllo', 'll'\n\n    Sample Output:\n    [2, 3]\n    \"\"\"\n    return all(sub == s[i:i + len(sub)] and i >= 0 for i in ans) and len(set(ans)) >= count",
    "sols": [
      "def sol(s=\"jenedequugasitojepurivajymaquebanusuxoturarulivethecuchynywoduzuwizythichirowokepevuwy\", sub=\"dequugasitojepurivajymaquebanusuxot\", count=1):\n    ans = []\n    for i in range(len(s) + 1):\n        if s[i:i + len(sub)] == sub:\n            ans.append(i)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#18",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SortNumbers_0",
    "sat": "def sat(ans: str, s=\"six one four three two nine eight\"):\n    \"\"\"\n    Sort numbers based on strings\n\n    Sample input\n    ---\n    \"six one four\"\n\n    Sample output\n    ---\n    \"one four six\"\n    \"\"\"\n    nums = 'zero one two three four five six seven eight nine'.split()\n    return [nums.index(x) for x in ans.split(\" \")] == sorted([nums.index(x) for x in s.split(\" \")])",
    "sols": [
      "def sol(s=\"six one four three two nine eight\"):\n    nums = 'zero one two three four five six seven eight nine'.split()\n    arr = [nums.index(x) for x in s.split()]\n    arr.sort()\n    ans = \" \".join([nums[i] for i in arr])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#19",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SortNumbers_1",
    "sat": "def sat(ans: str, s=\"nine two four nine zero six six eight\"):\n    \"\"\"\n    Sort numbers based on strings\n\n    Sample input\n    ---\n    \"six one four\"\n\n    Sample output\n    ---\n    \"one four six\"\n    \"\"\"\n    nums = 'zero one two three four five six seven eight nine'.split()\n    return [nums.index(x) for x in ans.split(\" \")] == sorted([nums.index(x) for x in s.split(\" \")])",
    "sols": [
      "def sol(s=\"nine two four nine zero six six eight\"):\n    nums = 'zero one two three four five six seven eight nine'.split()\n    arr = [nums.index(x) for x in s.split()]\n    arr.sort()\n    ans = \" \".join([nums[i] for i in arr])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#19",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SortNumbers_2",
    "sat": "def sat(ans: str, s=\"nine six two\"):\n    \"\"\"\n    Sort numbers based on strings\n\n    Sample input\n    ---\n    \"six one four\"\n\n    Sample output\n    ---\n    \"one four six\"\n    \"\"\"\n    nums = 'zero one two three four five six seven eight nine'.split()\n    return [nums.index(x) for x in ans.split(\" \")] == sorted([nums.index(x) for x in s.split(\" \")])",
    "sols": [
      "def sol(s=\"nine six two\"):\n    nums = 'zero one two three four five six seven eight nine'.split()\n    arr = [nums.index(x) for x in s.split()]\n    arr.sort()\n    ans = \" \".join([nums[i] for i in arr])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#19",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SortNumbers_3",
    "sat": "def sat(ans: str, s=\"five nine four eight\"):\n    \"\"\"\n    Sort numbers based on strings\n\n    Sample input\n    ---\n    \"six one four\"\n\n    Sample output\n    ---\n    \"one four six\"\n    \"\"\"\n    nums = 'zero one two three four five six seven eight nine'.split()\n    return [nums.index(x) for x in ans.split(\" \")] == sorted([nums.index(x) for x in s.split(\" \")])",
    "sols": [
      "def sol(s=\"five nine four eight\"):\n    nums = 'zero one two three four five six seven eight nine'.split()\n    arr = [nums.index(x) for x in s.split()]\n    arr.sort()\n    ans = \" \".join([nums[i] for i in arr])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#19",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SortNumbers_4",
    "sat": "def sat(ans: str, s=\"seven eight seven zero zero five one\"):\n    \"\"\"\n    Sort numbers based on strings\n\n    Sample input\n    ---\n    \"six one four\"\n\n    Sample output\n    ---\n    \"one four six\"\n    \"\"\"\n    nums = 'zero one two three four five six seven eight nine'.split()\n    return [nums.index(x) for x in ans.split(\" \")] == sorted([nums.index(x) for x in s.split(\" \")])",
    "sols": [
      "def sol(s=\"seven eight seven zero zero five one\"):\n    nums = 'zero one two three four five six seven eight nine'.split()\n    arr = [nums.index(x) for x in s.split()]\n    arr.sort()\n    ans = \" \".join([nums[i] for i in arr])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#19",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SortNumbers_5",
    "sat": "def sat(ans: str, s=\"two nine one\"):\n    \"\"\"\n    Sort numbers based on strings\n\n    Sample input\n    ---\n    \"six one four\"\n\n    Sample output\n    ---\n    \"one four six\"\n    \"\"\"\n    nums = 'zero one two three four five six seven eight nine'.split()\n    return [nums.index(x) for x in ans.split(\" \")] == sorted([nums.index(x) for x in s.split(\" \")])",
    "sols": [
      "def sol(s=\"two nine one\"):\n    nums = 'zero one two three four five six seven eight nine'.split()\n    arr = [nums.index(x) for x in s.split()]\n    arr.sort()\n    ans = \" \".join([nums[i] for i in arr])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#19",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SortNumbers_6",
    "sat": "def sat(ans: str, s=\"nine two three one\"):\n    \"\"\"\n    Sort numbers based on strings\n\n    Sample input\n    ---\n    \"six one four\"\n\n    Sample output\n    ---\n    \"one four six\"\n    \"\"\"\n    nums = 'zero one two three four five six seven eight nine'.split()\n    return [nums.index(x) for x in ans.split(\" \")] == sorted([nums.index(x) for x in s.split(\" \")])",
    "sols": [
      "def sol(s=\"nine two three one\"):\n    nums = 'zero one two three four five six seven eight nine'.split()\n    arr = [nums.index(x) for x in s.split()]\n    arr.sort()\n    ans = \" \".join([nums[i] for i in arr])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#19",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SortNumbers_7",
    "sat": "def sat(ans: str, s=\"nine zero seven one\"):\n    \"\"\"\n    Sort numbers based on strings\n\n    Sample input\n    ---\n    \"six one four\"\n\n    Sample output\n    ---\n    \"one four six\"\n    \"\"\"\n    nums = 'zero one two three four five six seven eight nine'.split()\n    return [nums.index(x) for x in ans.split(\" \")] == sorted([nums.index(x) for x in s.split(\" \")])",
    "sols": [
      "def sol(s=\"nine zero seven one\"):\n    nums = 'zero one two three four five six seven eight nine'.split()\n    arr = [nums.index(x) for x in s.split()]\n    arr.sort()\n    ans = \" \".join([nums[i] for i in arr])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#19",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SortNumbers_8",
    "sat": "def sat(ans: str, s=\"two eight three one\"):\n    \"\"\"\n    Sort numbers based on strings\n\n    Sample input\n    ---\n    \"six one four\"\n\n    Sample output\n    ---\n    \"one four six\"\n    \"\"\"\n    nums = 'zero one two three four five six seven eight nine'.split()\n    return [nums.index(x) for x in ans.split(\" \")] == sorted([nums.index(x) for x in s.split(\" \")])",
    "sols": [
      "def sol(s=\"two eight three one\"):\n    nums = 'zero one two three four five six seven eight nine'.split()\n    arr = [nums.index(x) for x in s.split()]\n    arr.sort()\n    ans = \" \".join([nums[i] for i in arr])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#19",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SortNumbers_9",
    "sat": "def sat(ans: str, s=\"zero zero six four two nine seven two\"):\n    \"\"\"\n    Sort numbers based on strings\n\n    Sample input\n    ---\n    \"six one four\"\n\n    Sample output\n    ---\n    \"one four six\"\n    \"\"\"\n    nums = 'zero one two three four five six seven eight nine'.split()\n    return [nums.index(x) for x in ans.split(\" \")] == sorted([nums.index(x) for x in s.split(\" \")])",
    "sols": [
      "def sol(s=\"zero zero six four two nine seven two\"):\n    nums = 'zero one two three four five six seven eight nine'.split()\n    arr = [nums.index(x) for x in s.split()]\n    arr.sort()\n    ans = \" \".join([nums[i] for i in arr])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#19",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindClosePair_0",
    "sat": "def sat(inds: List[int], nums=[0.31, 21.3, 5.0, 9.0, 11.0, 5.01, 17.2]):\n    \"\"\"\n    Given a list of numbers, find the indices of the closest pair.\n\n    Sample Input:\n    [1.2, 5.25, 0.89, 21.0, 5.23]\n\n    Sample Output:\n    [4, 1]\n    \"\"\"\n    a, b = inds\n    assert a != b and a >= 0 and b >= 0\n    for i in range(len(nums)):\n        for j in range(i):\n            assert abs(nums[i] - nums[j]) >= abs(nums[b] - nums[a])\n    return True",
    "sols": [
      "def sol(nums=[0.31, 21.3, 5.0, 9.0, 11.0, 5.01, 17.2]):\n    best = [0, 1]\n    best_score = abs(nums[1] - nums[0])\n    for i in range(len(nums)):\n        for j in range(i):\n            score = abs(nums[i] - nums[j])\n            if score < best_score:\n                best_score = score\n                best = [i, j]\n    return best"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#20",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindClosePair_1",
    "sat": "def sat(inds: List[int], nums=[-7.587461542549912, 0.7494004368541578, 2.0142388071411013, -1.552072793834526, 0.44845194836415025]):\n    \"\"\"\n    Given a list of numbers, find the indices of the closest pair.\n\n    Sample Input:\n    [1.2, 5.25, 0.89, 21.0, 5.23]\n\n    Sample Output:\n    [4, 1]\n    \"\"\"\n    a, b = inds\n    assert a != b and a >= 0 and b >= 0\n    for i in range(len(nums)):\n        for j in range(i):\n            assert abs(nums[i] - nums[j]) >= abs(nums[b] - nums[a])\n    return True",
    "sols": [
      "def sol(nums=[-7.587461542549912, 0.7494004368541578, 2.0142388071411013, -1.552072793834526, 0.44845194836415025]):\n    best = [0, 1]\n    best_score = abs(nums[1] - nums[0])\n    for i in range(len(nums)):\n        for j in range(i):\n            score = abs(nums[i] - nums[j])\n            if score < best_score:\n                best_score = score\n                best = [i, j]\n    return best"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#20",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindClosePair_2",
    "sat": "def sat(inds: List[int], nums=[-5.253924550449174, 7.798134742325132, 2.84274998450722, -5.355403889716619, -8.14069894708204, 6.276599656475899]):\n    \"\"\"\n    Given a list of numbers, find the indices of the closest pair.\n\n    Sample Input:\n    [1.2, 5.25, 0.89, 21.0, 5.23]\n\n    Sample Output:\n    [4, 1]\n    \"\"\"\n    a, b = inds\n    assert a != b and a >= 0 and b >= 0\n    for i in range(len(nums)):\n        for j in range(i):\n            assert abs(nums[i] - nums[j]) >= abs(nums[b] - nums[a])\n    return True",
    "sols": [
      "def sol(nums=[-5.253924550449174, 7.798134742325132, 2.84274998450722, -5.355403889716619, -8.14069894708204, 6.276599656475899]):\n    best = [0, 1]\n    best_score = abs(nums[1] - nums[0])\n    for i in range(len(nums)):\n        for j in range(i):\n            score = abs(nums[i] - nums[j])\n            if score < best_score:\n                best_score = score\n                best = [i, j]\n    return best"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#20",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindClosePair_3",
    "sat": "def sat(inds: List[int], nums=[8.647950767409466, 6.069423836495417, 8.647950767409466, -4.483139827348948, 7.822521892934297, 6.339621174459673]):\n    \"\"\"\n    Given a list of numbers, find the indices of the closest pair.\n\n    Sample Input:\n    [1.2, 5.25, 0.89, 21.0, 5.23]\n\n    Sample Output:\n    [4, 1]\n    \"\"\"\n    a, b = inds\n    assert a != b and a >= 0 and b >= 0\n    for i in range(len(nums)):\n        for j in range(i):\n            assert abs(nums[i] - nums[j]) >= abs(nums[b] - nums[a])\n    return True",
    "sols": [
      "def sol(nums=[8.647950767409466, 6.069423836495417, 8.647950767409466, -4.483139827348948, 7.822521892934297, 6.339621174459673]):\n    best = [0, 1]\n    best_score = abs(nums[1] - nums[0])\n    for i in range(len(nums)):\n        for j in range(i):\n            score = abs(nums[i] - nums[j])\n            if score < best_score:\n                best_score = score\n                best = [i, j]\n    return best"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#20",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindClosePair_4",
    "sat": "def sat(inds: List[int], nums=[-2.4491102095531385, -2.4896924424294635]):\n    \"\"\"\n    Given a list of numbers, find the indices of the closest pair.\n\n    Sample Input:\n    [1.2, 5.25, 0.89, 21.0, 5.23]\n\n    Sample Output:\n    [4, 1]\n    \"\"\"\n    a, b = inds\n    assert a != b and a >= 0 and b >= 0\n    for i in range(len(nums)):\n        for j in range(i):\n            assert abs(nums[i] - nums[j]) >= abs(nums[b] - nums[a])\n    return True",
    "sols": [
      "def sol(nums=[-2.4491102095531385, -2.4896924424294635]):\n    best = [0, 1]\n    best_score = abs(nums[1] - nums[0])\n    for i in range(len(nums)):\n        for j in range(i):\n            score = abs(nums[i] - nums[j])\n            if score < best_score:\n                best_score = score\n                best = [i, j]\n    return best"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#20",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindClosePair_5",
    "sat": "def sat(inds: List[int], nums=[-8.082651039738817, -2.1796380954088495, 4.106279687689776, 0.7459644370884906, -8.082651039738817, 4.6095776259083205, 3.443196970691549, -8.013347713995714, -6.090245321476226]):\n    \"\"\"\n    Given a list of numbers, find the indices of the closest pair.\n\n    Sample Input:\n    [1.2, 5.25, 0.89, 21.0, 5.23]\n\n    Sample Output:\n    [4, 1]\n    \"\"\"\n    a, b = inds\n    assert a != b and a >= 0 and b >= 0\n    for i in range(len(nums)):\n        for j in range(i):\n            assert abs(nums[i] - nums[j]) >= abs(nums[b] - nums[a])\n    return True",
    "sols": [
      "def sol(nums=[-8.082651039738817, -2.1796380954088495, 4.106279687689776, 0.7459644370884906, -8.082651039738817, 4.6095776259083205, 3.443196970691549, -8.013347713995714, -6.090245321476226]):\n    best = [0, 1]\n    best_score = abs(nums[1] - nums[0])\n    for i in range(len(nums)):\n        for j in range(i):\n            score = abs(nums[i] - nums[j])\n            if score < best_score:\n                best_score = score\n                best = [i, j]\n    return best"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#20",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindClosePair_6",
    "sat": "def sat(inds: List[int], nums=[-5.868311478572554, 1.0255817495874666, -0.48146436470143783, -8.719114868610834, -2.546592710919011, 6.984709299746932, -8.719114868610834]):\n    \"\"\"\n    Given a list of numbers, find the indices of the closest pair.\n\n    Sample Input:\n    [1.2, 5.25, 0.89, 21.0, 5.23]\n\n    Sample Output:\n    [4, 1]\n    \"\"\"\n    a, b = inds\n    assert a != b and a >= 0 and b >= 0\n    for i in range(len(nums)):\n        for j in range(i):\n            assert abs(nums[i] - nums[j]) >= abs(nums[b] - nums[a])\n    return True",
    "sols": [
      "def sol(nums=[-5.868311478572554, 1.0255817495874666, -0.48146436470143783, -8.719114868610834, -2.546592710919011, 6.984709299746932, -8.719114868610834]):\n    best = [0, 1]\n    best_score = abs(nums[1] - nums[0])\n    for i in range(len(nums)):\n        for j in range(i):\n            score = abs(nums[i] - nums[j])\n            if score < best_score:\n                best_score = score\n                best = [i, j]\n    return best"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#20",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindClosePair_7",
    "sat": "def sat(inds: List[int], nums=[-5.929135491582849, 0.5739637962348372, -5.842640975319499, 2.8780645795448834, 1.141967164242601, 5.849932734803803]):\n    \"\"\"\n    Given a list of numbers, find the indices of the closest pair.\n\n    Sample Input:\n    [1.2, 5.25, 0.89, 21.0, 5.23]\n\n    Sample Output:\n    [4, 1]\n    \"\"\"\n    a, b = inds\n    assert a != b and a >= 0 and b >= 0\n    for i in range(len(nums)):\n        for j in range(i):\n            assert abs(nums[i] - nums[j]) >= abs(nums[b] - nums[a])\n    return True",
    "sols": [
      "def sol(nums=[-5.929135491582849, 0.5739637962348372, -5.842640975319499, 2.8780645795448834, 1.141967164242601, 5.849932734803803]):\n    best = [0, 1]\n    best_score = abs(nums[1] - nums[0])\n    for i in range(len(nums)):\n        for j in range(i):\n            score = abs(nums[i] - nums[j])\n            if score < best_score:\n                best_score = score\n                best = [i, j]\n    return best"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#20",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindClosePair_8",
    "sat": "def sat(inds: List[int], nums=[-8.259939280965725, -2.9794224251564927, -9.680648238419254, 4.993052399256307, 1.0520613702799402, -0.18016079989077127, -7.0402708590960605]):\n    \"\"\"\n    Given a list of numbers, find the indices of the closest pair.\n\n    Sample Input:\n    [1.2, 5.25, 0.89, 21.0, 5.23]\n\n    Sample Output:\n    [4, 1]\n    \"\"\"\n    a, b = inds\n    assert a != b and a >= 0 and b >= 0\n    for i in range(len(nums)):\n        for j in range(i):\n            assert abs(nums[i] - nums[j]) >= abs(nums[b] - nums[a])\n    return True",
    "sols": [
      "def sol(nums=[-8.259939280965725, -2.9794224251564927, -9.680648238419254, 4.993052399256307, 1.0520613702799402, -0.18016079989077127, -7.0402708590960605]):\n    best = [0, 1]\n    best_score = abs(nums[1] - nums[0])\n    for i in range(len(nums)):\n        for j in range(i):\n            score = abs(nums[i] - nums[j])\n            if score < best_score:\n                best_score = score\n                best = [i, j]\n    return best"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#20",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindClosePair_9",
    "sat": "def sat(inds: List[int], nums=[8.523993458434084, 6.9285605230649345, 9.798173831208977, 6.246343191245856]):\n    \"\"\"\n    Given a list of numbers, find the indices of the closest pair.\n\n    Sample Input:\n    [1.2, 5.25, 0.89, 21.0, 5.23]\n\n    Sample Output:\n    [4, 1]\n    \"\"\"\n    a, b = inds\n    assert a != b and a >= 0 and b >= 0\n    for i in range(len(nums)):\n        for j in range(i):\n            assert abs(nums[i] - nums[j]) >= abs(nums[b] - nums[a])\n    return True",
    "sols": [
      "def sol(nums=[8.523993458434084, 6.9285605230649345, 9.798173831208977, 6.246343191245856]):\n    best = [0, 1]\n    best_score = abs(nums[1] - nums[0])\n    for i in range(len(nums)):\n        for j in range(i):\n            score = abs(nums[i] - nums[j])\n            if score < best_score:\n                best_score = score\n                best = [i, j]\n    return best"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#20",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Rescale_0",
    "sat": "def sat(ans: List[float], nums=[13.0, 17.0, 17.0, 15.5, 2.94]):\n    \"\"\"\n    Rescale and shift numbers so that they cover the range [0, 1]\n\n    Sample input\n    ---\n    [18.5, 17.0, 18.0, 19.0, 18.0]\n\n    Sample output\n    ---\n    [0.75, 0.0, 0.5, 1.0, 0.5]\n    \"\"\"\n    assert min(ans) == 0.0 and max(ans) == 1.0\n    a = min(nums)\n    b = max(nums)\n    for i in range(len(nums)):\n        x = a + (b - a) * ans[i]\n        assert abs(nums[i] - x) < 1e-6\n    return True",
    "sols": [
      "def sol(nums=[13.0, 17.0, 17.0, 15.5, 2.94]):\n    nums = nums.copy()\n\n    a = min(nums)\n    b = max(nums)\n    if b - a == 0:\n        return [0.0] + [1.0] * (len(nums) - 1)\n    for i in range(len(nums)):\n        nums[i] = (nums[i] - a) / (b - a)\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#21",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Rescale_1",
    "sat": "def sat(ans: List[float], nums=[939.7119884829771, 939.7119884829771, 939.7119884829771]):\n    \"\"\"\n    Rescale and shift numbers so that they cover the range [0, 1]\n\n    Sample input\n    ---\n    [18.5, 17.0, 18.0, 19.0, 18.0]\n\n    Sample output\n    ---\n    [0.75, 0.0, 0.5, 1.0, 0.5]\n    \"\"\"\n    assert min(ans) == 0.0 and max(ans) == 1.0\n    a = min(nums)\n    b = max(nums)\n    for i in range(len(nums)):\n        x = a + (b - a) * ans[i]\n        assert abs(nums[i] - x) < 1e-6\n    return True",
    "sols": [
      "def sol(nums=[939.7119884829771, 939.7119884829771, 939.7119884829771]):\n    nums = nums.copy()\n\n    a = min(nums)\n    b = max(nums)\n    if b - a == 0:\n        return [0.0] + [1.0] * (len(nums) - 1)\n    for i in range(len(nums)):\n        nums[i] = (nums[i] - a) / (b - a)\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#21",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Rescale_2",
    "sat": "def sat(ans: List[float], nums=[0.4458061970026967, -3.9939008694208376, -1.0757147773525169, 0.3895998276095692, 2.0191942234485825, -0.23989163788911685, -0.003822778565885754, -0.8237835423706446, -0.08413275419390705]):\n    \"\"\"\n    Rescale and shift numbers so that they cover the range [0, 1]\n\n    Sample input\n    ---\n    [18.5, 17.0, 18.0, 19.0, 18.0]\n\n    Sample output\n    ---\n    [0.75, 0.0, 0.5, 1.0, 0.5]\n    \"\"\"\n    assert min(ans) == 0.0 and max(ans) == 1.0\n    a = min(nums)\n    b = max(nums)\n    for i in range(len(nums)):\n        x = a + (b - a) * ans[i]\n        assert abs(nums[i] - x) < 1e-6\n    return True",
    "sols": [
      "def sol(nums=[0.4458061970026967, -3.9939008694208376, -1.0757147773525169, 0.3895998276095692, 2.0191942234485825, -0.23989163788911685, -0.003822778565885754, -0.8237835423706446, -0.08413275419390705]):\n    nums = nums.copy()\n\n    a = min(nums)\n    b = max(nums)\n    if b - a == 0:\n        return [0.0] + [1.0] * (len(nums) - 1)\n    for i in range(len(nums)):\n        nums[i] = (nums[i] - a) / (b - a)\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#21",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Rescale_3",
    "sat": "def sat(ans: List[float], nums=[1.7162662285160908, -0.5573868669921508, -11.304736303883987, 1.166009156041828, 2.1833750395727782, 4.274594378665487, -0.45875107135742743, 0.0046661656727550556, 0.8537569786748028]):\n    \"\"\"\n    Rescale and shift numbers so that they cover the range [0, 1]\n\n    Sample input\n    ---\n    [18.5, 17.0, 18.0, 19.0, 18.0]\n\n    Sample output\n    ---\n    [0.75, 0.0, 0.5, 1.0, 0.5]\n    \"\"\"\n    assert min(ans) == 0.0 and max(ans) == 1.0\n    a = min(nums)\n    b = max(nums)\n    for i in range(len(nums)):\n        x = a + (b - a) * ans[i]\n        assert abs(nums[i] - x) < 1e-6\n    return True",
    "sols": [
      "def sol(nums=[1.7162662285160908, -0.5573868669921508, -11.304736303883987, 1.166009156041828, 2.1833750395727782, 4.274594378665487, -0.45875107135742743, 0.0046661656727550556, 0.8537569786748028]):\n    nums = nums.copy()\n\n    a = min(nums)\n    b = max(nums)\n    if b - a == 0:\n        return [0.0] + [1.0] * (len(nums) - 1)\n    for i in range(len(nums)):\n        nums[i] = (nums[i] - a) / (b - a)\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#21",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Rescale_4",
    "sat": "def sat(ans: List[float], nums=[23.976551109194304, 1.4655002766247416]):\n    \"\"\"\n    Rescale and shift numbers so that they cover the range [0, 1]\n\n    Sample input\n    ---\n    [18.5, 17.0, 18.0, 19.0, 18.0]\n\n    Sample output\n    ---\n    [0.75, 0.0, 0.5, 1.0, 0.5]\n    \"\"\"\n    assert min(ans) == 0.0 and max(ans) == 1.0\n    a = min(nums)\n    b = max(nums)\n    for i in range(len(nums)):\n        x = a + (b - a) * ans[i]\n        assert abs(nums[i] - x) < 1e-6\n    return True",
    "sols": [
      "def sol(nums=[23.976551109194304, 1.4655002766247416]):\n    nums = nums.copy()\n\n    a = min(nums)\n    b = max(nums)\n    if b - a == 0:\n        return [0.0] + [1.0] * (len(nums) - 1)\n    for i in range(len(nums)):\n        nums[i] = (nums[i] - a) / (b - a)\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#21",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Rescale_5",
    "sat": "def sat(ans: List[float], nums=[-0.20862246204171445, 0.05294154132456167, 0.016123530706202354, 6.197867322546757, 0.29262163929309337, 0.31523018392351926, -17.4249446756191]):\n    \"\"\"\n    Rescale and shift numbers so that they cover the range [0, 1]\n\n    Sample input\n    ---\n    [18.5, 17.0, 18.0, 19.0, 18.0]\n\n    Sample output\n    ---\n    [0.75, 0.0, 0.5, 1.0, 0.5]\n    \"\"\"\n    assert min(ans) == 0.0 and max(ans) == 1.0\n    a = min(nums)\n    b = max(nums)\n    for i in range(len(nums)):\n        x = a + (b - a) * ans[i]\n        assert abs(nums[i] - x) < 1e-6\n    return True",
    "sols": [
      "def sol(nums=[-0.20862246204171445, 0.05294154132456167, 0.016123530706202354, 6.197867322546757, 0.29262163929309337, 0.31523018392351926, -17.4249446756191]):\n    nums = nums.copy()\n\n    a = min(nums)\n    b = max(nums)\n    if b - a == 0:\n        return [0.0] + [1.0] * (len(nums) - 1)\n    for i in range(len(nums)):\n        nums[i] = (nums[i] - a) / (b - a)\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#21",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Rescale_6",
    "sat": "def sat(ans: List[float], nums=[-9.416872416234026, -9.416872416234026, -9.416872416234026, -9.416872416234026, -9.416872416234026]):\n    \"\"\"\n    Rescale and shift numbers so that they cover the range [0, 1]\n\n    Sample input\n    ---\n    [18.5, 17.0, 18.0, 19.0, 18.0]\n\n    Sample output\n    ---\n    [0.75, 0.0, 0.5, 1.0, 0.5]\n    \"\"\"\n    assert min(ans) == 0.0 and max(ans) == 1.0\n    a = min(nums)\n    b = max(nums)\n    for i in range(len(nums)):\n        x = a + (b - a) * ans[i]\n        assert abs(nums[i] - x) < 1e-6\n    return True",
    "sols": [
      "def sol(nums=[-9.416872416234026, -9.416872416234026, -9.416872416234026, -9.416872416234026, -9.416872416234026]):\n    nums = nums.copy()\n\n    a = min(nums)\n    b = max(nums)\n    if b - a == 0:\n        return [0.0] + [1.0] * (len(nums) - 1)\n    for i in range(len(nums)):\n        nums[i] = (nums[i] - a) / (b - a)\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#21",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Rescale_7",
    "sat": "def sat(ans: List[float], nums=[0.09507773060329765, 35.254227199767776, -0.8495046934861326, -1.3071941395674544, -27.189689345325718, 0.07456337687780305]):\n    \"\"\"\n    Rescale and shift numbers so that they cover the range [0, 1]\n\n    Sample input\n    ---\n    [18.5, 17.0, 18.0, 19.0, 18.0]\n\n    Sample output\n    ---\n    [0.75, 0.0, 0.5, 1.0, 0.5]\n    \"\"\"\n    assert min(ans) == 0.0 and max(ans) == 1.0\n    a = min(nums)\n    b = max(nums)\n    for i in range(len(nums)):\n        x = a + (b - a) * ans[i]\n        assert abs(nums[i] - x) < 1e-6\n    return True",
    "sols": [
      "def sol(nums=[0.09507773060329765, 35.254227199767776, -0.8495046934861326, -1.3071941395674544, -27.189689345325718, 0.07456337687780305]):\n    nums = nums.copy()\n\n    a = min(nums)\n    b = max(nums)\n    if b - a == 0:\n        return [0.0] + [1.0] * (len(nums) - 1)\n    for i in range(len(nums)):\n        nums[i] = (nums[i] - a) / (b - a)\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#21",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Rescale_8",
    "sat": "def sat(ans: List[float], nums=[-0.006094754025173528, -20.803949792068924]):\n    \"\"\"\n    Rescale and shift numbers so that they cover the range [0, 1]\n\n    Sample input\n    ---\n    [18.5, 17.0, 18.0, 19.0, 18.0]\n\n    Sample output\n    ---\n    [0.75, 0.0, 0.5, 1.0, 0.5]\n    \"\"\"\n    assert min(ans) == 0.0 and max(ans) == 1.0\n    a = min(nums)\n    b = max(nums)\n    for i in range(len(nums)):\n        x = a + (b - a) * ans[i]\n        assert abs(nums[i] - x) < 1e-6\n    return True",
    "sols": [
      "def sol(nums=[-0.006094754025173528, -20.803949792068924]):\n    nums = nums.copy()\n\n    a = min(nums)\n    b = max(nums)\n    if b - a == 0:\n        return [0.0] + [1.0] * (len(nums) - 1)\n    for i in range(len(nums)):\n        nums[i] = (nums[i] - a) / (b - a)\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#21",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Rescale_9",
    "sat": "def sat(ans: List[float], nums=[-0.355905418290736, 0.05411257346218109, 1.7487376393683114, 99.45981917106087, -1.3667663252187854, -0.4692956518571772, -0.4807581622245894, -0.0206470670379509]):\n    \"\"\"\n    Rescale and shift numbers so that they cover the range [0, 1]\n\n    Sample input\n    ---\n    [18.5, 17.0, 18.0, 19.0, 18.0]\n\n    Sample output\n    ---\n    [0.75, 0.0, 0.5, 1.0, 0.5]\n    \"\"\"\n    assert min(ans) == 0.0 and max(ans) == 1.0\n    a = min(nums)\n    b = max(nums)\n    for i in range(len(nums)):\n        x = a + (b - a) * ans[i]\n        assert abs(nums[i] - x) < 1e-6\n    return True",
    "sols": [
      "def sol(nums=[-0.355905418290736, 0.05411257346218109, 1.7487376393683114, 99.45981917106087, -1.3667663252187854, -0.4692956518571772, -0.4807581622245894, -0.0206470670379509]):\n    nums = nums.copy()\n\n    a = min(nums)\n    b = max(nums)\n    if b - a == 0:\n        return [0.0] + [1.0] * (len(nums) - 1)\n    for i in range(len(nums)):\n        nums[i] = (nums[i] - a) / (b - a)\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#21",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FilterInts_0",
    "sat": "def sat(indexes: List[int], li=['Hello', '5', '10', 'bye'], num=2):\n    \"\"\"\n    Find the indices of valid python integers in a list of strings\n\n    Sample input\n    ---\n    [\"18.5\", \"-1\", \"2+2\", \"7\", \"foo\"]\n\n    Sample output\n    ---\n    [1, 3]\n    \"\"\"\n    [int(li[i]) for i in indexes]\n    return len(set(indexes)) >= num and min(indexes) >= 0",
    "sols": [
      "def sol(li=['Hello', '5', '10', 'bye'], num=2):\n    ans = []\n    for i in range(len(li)):\n        try:\n            int(li[i])\n            ans.append(i)\n        except:\n            pass\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#22",
    "taint_date": "2021-7-7",
    "weight": 0.010416666666666666
  },
  {
    "name": "StrLength_0",
    "sat": "def sat(length: int, s=\"pneumonoultramicroscopicsilicovolcanoconiosis\"):\n    \"\"\"\n    Find the length of a non-empty string\n\n    Sample input\n    ---\n    \"foo\"\n\n    Sample output\n    ---\n    3\n    \"\"\"\n    try:\n        s[length]\n    except IndexError:\n        s[length - 1]\n        return True",
    "sols": [
      "def sol(s=\"pneumonoultramicroscopicsilicovolcanoconiosis\"):\n    return len(s)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#23",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "StrLength_1",
    "sat": "def sat(length: int, s=\"=i\"):\n    \"\"\"\n    Find the length of a non-empty string\n\n    Sample input\n    ---\n    \"foo\"\n\n    Sample output\n    ---\n    3\n    \"\"\"\n    try:\n        s[length]\n    except IndexError:\n        s[length - 1]\n        return True",
    "sols": [
      "def sol(s=\"=i\"):\n    return len(s)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#23",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "StrLength_2",
    "sat": "def sat(length: int, s=\"&?Jq 2aNHt\"):\n    \"\"\"\n    Find the length of a non-empty string\n\n    Sample input\n    ---\n    \"foo\"\n\n    Sample output\n    ---\n    3\n    \"\"\"\n    try:\n        s[length]\n    except IndexError:\n        s[length - 1]\n        return True",
    "sols": [
      "def sol(s=\"&?Jq 2aNHt\"):\n    return len(s)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#23",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "StrLength_3",
    "sat": "def sat(length: int, s=\"?uCcQht\"):\n    \"\"\"\n    Find the length of a non-empty string\n\n    Sample input\n    ---\n    \"foo\"\n\n    Sample output\n    ---\n    3\n    \"\"\"\n    try:\n        s[length]\n    except IndexError:\n        s[length - 1]\n        return True",
    "sols": [
      "def sol(s=\"?uCcQht\"):\n    return len(s)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#23",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "StrLength_4",
    "sat": "def sat(length: int, s=\"e>8=4jZNfhZl3&Mko-MfWd<^QR Vf7:2M\"):\n    \"\"\"\n    Find the length of a non-empty string\n\n    Sample input\n    ---\n    \"foo\"\n\n    Sample output\n    ---\n    3\n    \"\"\"\n    try:\n        s[length]\n    except IndexError:\n        s[length - 1]\n        return True",
    "sols": [
      "def sol(s=\"e>8=4jZNfhZl3&Mko-MfWd<^QR Vf7:2M\"):\n    return len(s)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#23",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "StrLength_5",
    "sat": "def sat(length: int, s=\"]Y,G2U4ur-7X,T@(Gv$:Y0^C,-$+xM9$X2,*90|\"):\n    \"\"\"\n    Find the length of a non-empty string\n\n    Sample input\n    ---\n    \"foo\"\n\n    Sample output\n    ---\n    3\n    \"\"\"\n    try:\n        s[length]\n    except IndexError:\n        s[length - 1]\n        return True",
    "sols": [
      "def sol(s=\"]Y,G2U4ur-7X,T@(Gv$:Y0^C,-$+xM9$X2,*90|\"):\n    return len(s)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#23",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "StrLength_6",
    "sat": "def sat(length: int, s=\"+>&?Qa%yLWZA2nBDQ8i)zvVWT\"):\n    \"\"\"\n    Find the length of a non-empty string\n\n    Sample input\n    ---\n    \"foo\"\n\n    Sample output\n    ---\n    3\n    \"\"\"\n    try:\n        s[length]\n    except IndexError:\n        s[length - 1]\n        return True",
    "sols": [
      "def sol(s=\"+>&?Qa%yLWZA2nBDQ8i)zvVWT\"):\n    return len(s)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#23",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "StrLength_7",
    "sat": "def sat(length: int, s=\"Ly+NcKgOvg3J)\"):\n    \"\"\"\n    Find the length of a non-empty string\n\n    Sample input\n    ---\n    \"foo\"\n\n    Sample output\n    ---\n    3\n    \"\"\"\n    try:\n        s[length]\n    except IndexError:\n        s[length - 1]\n        return True",
    "sols": [
      "def sol(s=\"Ly+NcKgOvg3J)\"):\n    return len(s)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#23",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "StrLength_8",
    "sat": "def sat(length: int, s=\"s$0^cow)Q917uY\"):\n    \"\"\"\n    Find the length of a non-empty string\n\n    Sample input\n    ---\n    \"foo\"\n\n    Sample output\n    ---\n    3\n    \"\"\"\n    try:\n        s[length]\n    except IndexError:\n        s[length - 1]\n        return True",
    "sols": [
      "def sol(s=\"s$0^cow)Q917uY\"):\n    return len(s)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#23",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "StrLength_9",
    "sat": "def sat(length: int, s=\"ZSA$sIKe|pz@|[<kk,h[eFCiD#xxN7*G*Ic\"):\n    \"\"\"\n    Find the length of a non-empty string\n\n    Sample input\n    ---\n    \"foo\"\n\n    Sample output\n    ---\n    3\n    \"\"\"\n    try:\n        s[length]\n    except IndexError:\n        s[length - 1]\n        return True",
    "sols": [
      "def sol(s=\"ZSA$sIKe|pz@|[<kk,h[eFCiD#xxN7*G*Ic\"):\n    return len(s)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#23",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LargestDivisor_0",
    "sat": "def sat(d: int, n=123456):\n    \"\"\"\n    Find the largest integer divisor of a number n that is less than n\n\n    Sample input\n    ---\n    1000\n\n    Sample output\n    ---\n    500\n    \"\"\"\n    return n % d == 0 and d < n and all(n % e for e in range(d + 1, n))",
    "sols": [
      "def sol(n=123456):\n    return next(d for d in range(n - 1, 0, -1) if n % d == 0)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#24",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LargestDivisor_1",
    "sat": "def sat(d: int, n=17836):\n    \"\"\"\n    Find the largest integer divisor of a number n that is less than n\n\n    Sample input\n    ---\n    1000\n\n    Sample output\n    ---\n    500\n    \"\"\"\n    return n % d == 0 and d < n and all(n % e for e in range(d + 1, n))",
    "sols": [
      "def sol(n=17836):\n    return next(d for d in range(n - 1, 0, -1) if n % d == 0)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#24",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LargestDivisor_2",
    "sat": "def sat(d: int, n=71793):\n    \"\"\"\n    Find the largest integer divisor of a number n that is less than n\n\n    Sample input\n    ---\n    1000\n\n    Sample output\n    ---\n    500\n    \"\"\"\n    return n % d == 0 and d < n and all(n % e for e in range(d + 1, n))",
    "sols": [
      "def sol(n=71793):\n    return next(d for d in range(n - 1, 0, -1) if n % d == 0)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#24",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LargestDivisor_3",
    "sat": "def sat(d: int, n=15466):\n    \"\"\"\n    Find the largest integer divisor of a number n that is less than n\n\n    Sample input\n    ---\n    1000\n\n    Sample output\n    ---\n    500\n    \"\"\"\n    return n % d == 0 and d < n and all(n % e for e in range(d + 1, n))",
    "sols": [
      "def sol(n=15466):\n    return next(d for d in range(n - 1, 0, -1) if n % d == 0)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#24",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LargestDivisor_4",
    "sat": "def sat(d: int, n=57567):\n    \"\"\"\n    Find the largest integer divisor of a number n that is less than n\n\n    Sample input\n    ---\n    1000\n\n    Sample output\n    ---\n    500\n    \"\"\"\n    return n % d == 0 and d < n and all(n % e for e in range(d + 1, n))",
    "sols": [
      "def sol(n=57567):\n    return next(d for d in range(n - 1, 0, -1) if n % d == 0)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#24",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LargestDivisor_5",
    "sat": "def sat(d: int, n=24150):\n    \"\"\"\n    Find the largest integer divisor of a number n that is less than n\n\n    Sample input\n    ---\n    1000\n\n    Sample output\n    ---\n    500\n    \"\"\"\n    return n % d == 0 and d < n and all(n % e for e in range(d + 1, n))",
    "sols": [
      "def sol(n=24150):\n    return next(d for d in range(n - 1, 0, -1) if n % d == 0)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#24",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LargestDivisor_6",
    "sat": "def sat(d: int, n=57873):\n    \"\"\"\n    Find the largest integer divisor of a number n that is less than n\n\n    Sample input\n    ---\n    1000\n\n    Sample output\n    ---\n    500\n    \"\"\"\n    return n % d == 0 and d < n and all(n % e for e in range(d + 1, n))",
    "sols": [
      "def sol(n=57873):\n    return next(d for d in range(n - 1, 0, -1) if n % d == 0)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#24",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LargestDivisor_7",
    "sat": "def sat(d: int, n=81147):\n    \"\"\"\n    Find the largest integer divisor of a number n that is less than n\n\n    Sample input\n    ---\n    1000\n\n    Sample output\n    ---\n    500\n    \"\"\"\n    return n % d == 0 and d < n and all(n % e for e in range(d + 1, n))",
    "sols": [
      "def sol(n=81147):\n    return next(d for d in range(n - 1, 0, -1) if n % d == 0)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#24",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LargestDivisor_8",
    "sat": "def sat(d: int, n=41448):\n    \"\"\"\n    Find the largest integer divisor of a number n that is less than n\n\n    Sample input\n    ---\n    1000\n\n    Sample output\n    ---\n    500\n    \"\"\"\n    return n % d == 0 and d < n and all(n % e for e in range(d + 1, n))",
    "sols": [
      "def sol(n=41448):\n    return next(d for d in range(n - 1, 0, -1) if n % d == 0)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#24",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LargestDivisor_9",
    "sat": "def sat(d: int, n=80924):\n    \"\"\"\n    Find the largest integer divisor of a number n that is less than n\n\n    Sample input\n    ---\n    1000\n\n    Sample output\n    ---\n    500\n    \"\"\"\n    return n % d == 0 and d < n and all(n % e for e in range(d + 1, n))",
    "sols": [
      "def sol(n=80924):\n    return next(d for d in range(n - 1, 0, -1) if n % d == 0)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#24",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PrimeFactorization_0",
    "sat": "def sat(factors: List[int], n=123456, num_factors=8):\n    \"\"\"\n    Factor number n into a given number of non-trivial factors\n\n    Sample input\n    ---\n    1000, 6\n\n    Sample output\n    ---\n    [2, 2, 2, 5, 5, 5]\n    \"\"\"\n    assert len(factors) == num_factors\n    prod = 1\n    for d in factors:\n        prod *= d\n        assert d > 1\n    return prod == n",
    "sols": [
      "def sol(n=123456, num_factors=8):\n    if num_factors == 0:\n        return []\n    if num_factors == 1:\n        return [n]\n    ans = []\n    for d in range(2, n):\n        while n % d == 0:\n            n //= d\n            ans.append(d)\n            if len(ans) == num_factors - 1:\n                ans.append(n)\n                return ans\n    assert False"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#25",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PrimeFactorization_1",
    "sat": "def sat(factors: List[int], n=1339030, num_factors=6):\n    \"\"\"\n    Factor number n into a given number of non-trivial factors\n\n    Sample input\n    ---\n    1000, 6\n\n    Sample output\n    ---\n    [2, 2, 2, 5, 5, 5]\n    \"\"\"\n    assert len(factors) == num_factors\n    prod = 1\n    for d in factors:\n        prod *= d\n        assert d > 1\n    return prod == n",
    "sols": [
      "def sol(n=1339030, num_factors=6):\n    if num_factors == 0:\n        return []\n    if num_factors == 1:\n        return [n]\n    ans = []\n    for d in range(2, n):\n        while n % d == 0:\n            n //= d\n            ans.append(d)\n            if len(ans) == num_factors - 1:\n                ans.append(n)\n                return ans\n    assert False"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#25",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PrimeFactorization_2",
    "sat": "def sat(factors: List[int], n=141752, num_factors=6):\n    \"\"\"\n    Factor number n into a given number of non-trivial factors\n\n    Sample input\n    ---\n    1000, 6\n\n    Sample output\n    ---\n    [2, 2, 2, 5, 5, 5]\n    \"\"\"\n    assert len(factors) == num_factors\n    prod = 1\n    for d in factors:\n        prod *= d\n        assert d > 1\n    return prod == n",
    "sols": [
      "def sol(n=141752, num_factors=6):\n    if num_factors == 0:\n        return []\n    if num_factors == 1:\n        return [n]\n    ans = []\n    for d in range(2, n):\n        while n % d == 0:\n            n //= d\n            ans.append(d)\n            if len(ans) == num_factors - 1:\n                ans.append(n)\n                return ans\n    assert False"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#25",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PrimeFactorization_3",
    "sat": "def sat(factors: List[int], n=33088, num_factors=8):\n    \"\"\"\n    Factor number n into a given number of non-trivial factors\n\n    Sample input\n    ---\n    1000, 6\n\n    Sample output\n    ---\n    [2, 2, 2, 5, 5, 5]\n    \"\"\"\n    assert len(factors) == num_factors\n    prod = 1\n    for d in factors:\n        prod *= d\n        assert d > 1\n    return prod == n",
    "sols": [
      "def sol(n=33088, num_factors=8):\n    if num_factors == 0:\n        return []\n    if num_factors == 1:\n        return [n]\n    ans = []\n    for d in range(2, n):\n        while n % d == 0:\n            n //= d\n            ans.append(d)\n            if len(ans) == num_factors - 1:\n                ans.append(n)\n                return ans\n    assert False"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#25",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PrimeFactorization_4",
    "sat": "def sat(factors: List[int], n=2375171125400, num_factors=12):\n    \"\"\"\n    Factor number n into a given number of non-trivial factors\n\n    Sample input\n    ---\n    1000, 6\n\n    Sample output\n    ---\n    [2, 2, 2, 5, 5, 5]\n    \"\"\"\n    assert len(factors) == num_factors\n    prod = 1\n    for d in factors:\n        prod *= d\n        assert d > 1\n    return prod == n",
    "sols": [
      "def sol(n=2375171125400, num_factors=12):\n    if num_factors == 0:\n        return []\n    if num_factors == 1:\n        return [n]\n    ans = []\n    for d in range(2, n):\n        while n % d == 0:\n            n //= d\n            ans.append(d)\n            if len(ans) == num_factors - 1:\n                ans.append(n)\n                return ans\n    assert False"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#25",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PrimeFactorization_5",
    "sat": "def sat(factors: List[int], n=199424, num_factors=10):\n    \"\"\"\n    Factor number n into a given number of non-trivial factors\n\n    Sample input\n    ---\n    1000, 6\n\n    Sample output\n    ---\n    [2, 2, 2, 5, 5, 5]\n    \"\"\"\n    assert len(factors) == num_factors\n    prod = 1\n    for d in factors:\n        prod *= d\n        assert d > 1\n    return prod == n",
    "sols": [
      "def sol(n=199424, num_factors=10):\n    if num_factors == 0:\n        return []\n    if num_factors == 1:\n        return [n]\n    ans = []\n    for d in range(2, n):\n        while n % d == 0:\n            n //= d\n            ans.append(d)\n            if len(ans) == num_factors - 1:\n                ans.append(n)\n                return ans\n    assert False"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#25",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PrimeFactorization_6",
    "sat": "def sat(factors: List[int], n=12498304, num_factors=11):\n    \"\"\"\n    Factor number n into a given number of non-trivial factors\n\n    Sample input\n    ---\n    1000, 6\n\n    Sample output\n    ---\n    [2, 2, 2, 5, 5, 5]\n    \"\"\"\n    assert len(factors) == num_factors\n    prod = 1\n    for d in factors:\n        prod *= d\n        assert d > 1\n    return prod == n",
    "sols": [
      "def sol(n=12498304, num_factors=11):\n    if num_factors == 0:\n        return []\n    if num_factors == 1:\n        return [n]\n    ans = []\n    for d in range(2, n):\n        while n % d == 0:\n            n //= d\n            ans.append(d)\n            if len(ans) == num_factors - 1:\n                ans.append(n)\n                return ans\n    assert False"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#25",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PrimeFactorization_7",
    "sat": "def sat(factors: List[int], n=132, num_factors=4):\n    \"\"\"\n    Factor number n into a given number of non-trivial factors\n\n    Sample input\n    ---\n    1000, 6\n\n    Sample output\n    ---\n    [2, 2, 2, 5, 5, 5]\n    \"\"\"\n    assert len(factors) == num_factors\n    prod = 1\n    for d in factors:\n        prod *= d\n        assert d > 1\n    return prod == n",
    "sols": [
      "def sol(n=132, num_factors=4):\n    if num_factors == 0:\n        return []\n    if num_factors == 1:\n        return [n]\n    ans = []\n    for d in range(2, n):\n        while n % d == 0:\n            n //= d\n            ans.append(d)\n            if len(ans) == num_factors - 1:\n                ans.append(n)\n                return ans\n    assert False"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#25",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PrimeFactorization_8",
    "sat": "def sat(factors: List[int], n=2156933870, num_factors=8):\n    \"\"\"\n    Factor number n into a given number of non-trivial factors\n\n    Sample input\n    ---\n    1000, 6\n\n    Sample output\n    ---\n    [2, 2, 2, 5, 5, 5]\n    \"\"\"\n    assert len(factors) == num_factors\n    prod = 1\n    for d in factors:\n        prod *= d\n        assert d > 1\n    return prod == n",
    "sols": [
      "def sol(n=2156933870, num_factors=8):\n    if num_factors == 0:\n        return []\n    if num_factors == 1:\n        return [n]\n    ans = []\n    for d in range(2, n):\n        while n % d == 0:\n            n //= d\n            ans.append(d)\n            if len(ans) == num_factors - 1:\n                ans.append(n)\n                return ans\n    assert False"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#25",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PrimeFactorization_9",
    "sat": "def sat(factors: List[int], n=129685248, num_factors=14):\n    \"\"\"\n    Factor number n into a given number of non-trivial factors\n\n    Sample input\n    ---\n    1000, 6\n\n    Sample output\n    ---\n    [2, 2, 2, 5, 5, 5]\n    \"\"\"\n    assert len(factors) == num_factors\n    prod = 1\n    for d in factors:\n        prod *= d\n        assert d > 1\n    return prod == n",
    "sols": [
      "def sol(n=129685248, num_factors=14):\n    if num_factors == 0:\n        return []\n    if num_factors == 1:\n        return [n]\n    ans = []\n    for d in range(2, n):\n        while n % d == 0:\n            n //= d\n            ans.append(d)\n            if len(ans) == num_factors - 1:\n                ans.append(n)\n                return ans\n    assert False"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#25",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Dedup_0",
    "sat": "def sat(ans: List[int], li=[2, 19, 2, 53, 1, 1, 2, 44, 17, 0, 19, 31]):\n    \"\"\"\n    Remove duplicates from a list of integers, preserving order\n\n    Sample input\n    ---\n    [1, 3, 2, 9, 2, 1, 55]\n\n    Sample output\n    ---\n    [1, 3, 2, 9, 55]\n    \"\"\"\n    return set(ans) == set(li) and all(li.index(ans[i]) < li.index(ans[i + 1]) for i in range(len(ans) - 1))",
    "sols": [
      "def sol(li=[2, 19, 2, 53, 1, 1, 2, 44, 17, 0, 19, 31]):\n    seen = set()\n    ans = []\n    for n in li:\n        if n not in seen:\n            ans.append(n)\n            seen.add(n)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#26",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Dedup_1",
    "sat": "def sat(ans: List[int], li=[3, 3, 7, 9, 7, 2, 9, 4, 1]):\n    \"\"\"\n    Remove duplicates from a list of integers, preserving order\n\n    Sample input\n    ---\n    [1, 3, 2, 9, 2, 1, 55]\n\n    Sample output\n    ---\n    [1, 3, 2, 9, 55]\n    \"\"\"\n    return set(ans) == set(li) and all(li.index(ans[i]) < li.index(ans[i + 1]) for i in range(len(ans) - 1))",
    "sols": [
      "def sol(li=[3, 3, 7, 9, 7, 2, 9, 4, 1]):\n    seen = set()\n    ans = []\n    for n in li:\n        if n not in seen:\n            ans.append(n)\n            seen.add(n)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#26",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Dedup_2",
    "sat": "def sat(ans: List[int], li=[3, 9, 8, 9, 3, 5, 1, 3, 5]):\n    \"\"\"\n    Remove duplicates from a list of integers, preserving order\n\n    Sample input\n    ---\n    [1, 3, 2, 9, 2, 1, 55]\n\n    Sample output\n    ---\n    [1, 3, 2, 9, 55]\n    \"\"\"\n    return set(ans) == set(li) and all(li.index(ans[i]) < li.index(ans[i + 1]) for i in range(len(ans) - 1))",
    "sols": [
      "def sol(li=[3, 9, 8, 9, 3, 5, 1, 3, 5]):\n    seen = set()\n    ans = []\n    for n in li:\n        if n not in seen:\n            ans.append(n)\n            seen.add(n)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#26",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Dedup_3",
    "sat": "def sat(ans: List[int], li=[3, 8, 2, 1, 1, 7, 7, 7, 5, 5, 5, 9, 3, 7, 7]):\n    \"\"\"\n    Remove duplicates from a list of integers, preserving order\n\n    Sample input\n    ---\n    [1, 3, 2, 9, 2, 1, 55]\n\n    Sample output\n    ---\n    [1, 3, 2, 9, 55]\n    \"\"\"\n    return set(ans) == set(li) and all(li.index(ans[i]) < li.index(ans[i + 1]) for i in range(len(ans) - 1))",
    "sols": [
      "def sol(li=[3, 8, 2, 1, 1, 7, 7, 7, 5, 5, 5, 9, 3, 7, 7]):\n    seen = set()\n    ans = []\n    for n in li:\n        if n not in seen:\n            ans.append(n)\n            seen.add(n)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#26",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Dedup_4",
    "sat": "def sat(ans: List[int], li=[0, 3, 3, 2, 7, 0, 0, 6, 2, 4, 4, 5]):\n    \"\"\"\n    Remove duplicates from a list of integers, preserving order\n\n    Sample input\n    ---\n    [1, 3, 2, 9, 2, 1, 55]\n\n    Sample output\n    ---\n    [1, 3, 2, 9, 55]\n    \"\"\"\n    return set(ans) == set(li) and all(li.index(ans[i]) < li.index(ans[i + 1]) for i in range(len(ans) - 1))",
    "sols": [
      "def sol(li=[0, 3, 3, 2, 7, 0, 0, 6, 2, 4, 4, 5]):\n    seen = set()\n    ans = []\n    for n in li:\n        if n not in seen:\n            ans.append(n)\n            seen.add(n)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#26",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Dedup_5",
    "sat": "def sat(ans: List[int], li=[5, 6, 6, 1, 7, 3, 6, 1, 8]):\n    \"\"\"\n    Remove duplicates from a list of integers, preserving order\n\n    Sample input\n    ---\n    [1, 3, 2, 9, 2, 1, 55]\n\n    Sample output\n    ---\n    [1, 3, 2, 9, 55]\n    \"\"\"\n    return set(ans) == set(li) and all(li.index(ans[i]) < li.index(ans[i + 1]) for i in range(len(ans) - 1))",
    "sols": [
      "def sol(li=[5, 6, 6, 1, 7, 3, 6, 1, 8]):\n    seen = set()\n    ans = []\n    for n in li:\n        if n not in seen:\n            ans.append(n)\n            seen.add(n)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#26",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Dedup_6",
    "sat": "def sat(ans: List[int], li=[7, 5, 6, 8, 4, 7, 1, 7, 6, 3, 5, 0, 8, 9, 1]):\n    \"\"\"\n    Remove duplicates from a list of integers, preserving order\n\n    Sample input\n    ---\n    [1, 3, 2, 9, 2, 1, 55]\n\n    Sample output\n    ---\n    [1, 3, 2, 9, 55]\n    \"\"\"\n    return set(ans) == set(li) and all(li.index(ans[i]) < li.index(ans[i + 1]) for i in range(len(ans) - 1))",
    "sols": [
      "def sol(li=[7, 5, 6, 8, 4, 7, 1, 7, 6, 3, 5, 0, 8, 9, 1]):\n    seen = set()\n    ans = []\n    for n in li:\n        if n not in seen:\n            ans.append(n)\n            seen.add(n)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#26",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Dedup_7",
    "sat": "def sat(ans: List[int], li=[9, 4, 7, 7, 5, 4, 4, 3, 1, 6, 7, 1, 7, 9, 9, 0, 0]):\n    \"\"\"\n    Remove duplicates from a list of integers, preserving order\n\n    Sample input\n    ---\n    [1, 3, 2, 9, 2, 1, 55]\n\n    Sample output\n    ---\n    [1, 3, 2, 9, 55]\n    \"\"\"\n    return set(ans) == set(li) and all(li.index(ans[i]) < li.index(ans[i + 1]) for i in range(len(ans) - 1))",
    "sols": [
      "def sol(li=[9, 4, 7, 7, 5, 4, 4, 3, 1, 6, 7, 1, 7, 9, 9, 0, 0]):\n    seen = set()\n    ans = []\n    for n in li:\n        if n not in seen:\n            ans.append(n)\n            seen.add(n)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#26",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Dedup_8",
    "sat": "def sat(ans: List[int], li=[0, 3, 7, 3, 2, 4, 0, 3, 8, 8, 0, 9, 1, 8, 0, 7]):\n    \"\"\"\n    Remove duplicates from a list of integers, preserving order\n\n    Sample input\n    ---\n    [1, 3, 2, 9, 2, 1, 55]\n\n    Sample output\n    ---\n    [1, 3, 2, 9, 55]\n    \"\"\"\n    return set(ans) == set(li) and all(li.index(ans[i]) < li.index(ans[i + 1]) for i in range(len(ans) - 1))",
    "sols": [
      "def sol(li=[0, 3, 7, 3, 2, 4, 0, 3, 8, 8, 0, 9, 1, 8, 0, 7]):\n    seen = set()\n    ans = []\n    for n in li:\n        if n not in seen:\n            ans.append(n)\n            seen.add(n)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#26",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Dedup_9",
    "sat": "def sat(ans: List[int], li=[9, 1]):\n    \"\"\"\n    Remove duplicates from a list of integers, preserving order\n\n    Sample input\n    ---\n    [1, 3, 2, 9, 2, 1, 55]\n\n    Sample output\n    ---\n    [1, 3, 2, 9, 55]\n    \"\"\"\n    return set(ans) == set(li) and all(li.index(ans[i]) < li.index(ans[i + 1]) for i in range(len(ans) - 1))",
    "sols": [
      "def sol(li=[9, 1]):\n    seen = set()\n    ans = []\n    for n in li:\n        if n not in seen:\n            ans.append(n)\n            seen.add(n)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#26",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FlipCase_0",
    "sat": "def sat(ans: str, s=\"FlIp ME!\"):\n    \"\"\"\n    Flip case\n\n    Sample input\n    ---\n    'cAt'\n\n    Sample output\n    ---\n    'CaT'\n    \"\"\"\n    return len(ans) == len(s) and all({c, d} == {d.upper(), d.lower()} for c, d in zip(ans, s))",
    "sols": [
      "def sol(s=\"FlIp ME!\"):\n    return \"\".join(c.lower() if c.upper() == c else c.upper() for c in s)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#27",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FlipCase_1",
    "sat": "def sat(ans: str, s=\"mKC(K2.a!Z|>sv3izC3!\"):\n    \"\"\"\n    Flip case\n\n    Sample input\n    ---\n    'cAt'\n\n    Sample output\n    ---\n    'CaT'\n    \"\"\"\n    return len(ans) == len(s) and all({c, d} == {d.upper(), d.lower()} for c, d in zip(ans, s))",
    "sols": [
      "def sol(s=\"mKC(K2.a!Z|>sv3izC3!\"):\n    return \"\".join(c.lower() if c.upper() == c else c.upper() for c in s)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#27",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FlipCase_2",
    "sat": "def sat(ans: str, s=\"K a&3 tE 1tSG B3v3y(\"):\n    \"\"\"\n    Flip case\n\n    Sample input\n    ---\n    'cAt'\n\n    Sample output\n    ---\n    'CaT'\n    \"\"\"\n    return len(ans) == len(s) and all({c, d} == {d.upper(), d.lower()} for c, d in zip(ans, s))",
    "sols": [
      "def sol(s=\"K a&3 tE 1tSG B3v3y(\"):\n    return \"\".join(c.lower() if c.upper() == c else c.upper() for c in s)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#27",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FlipCase_3",
    "sat": "def sat(ans: str, s=\"Sb31E#e<@3u\"):\n    \"\"\"\n    Flip case\n\n    Sample input\n    ---\n    'cAt'\n\n    Sample output\n    ---\n    'CaT'\n    \"\"\"\n    return len(ans) == len(s) and all({c, d} == {d.upper(), d.lower()} for c, d in zip(ans, s))",
    "sols": [
      "def sol(s=\"Sb31E#e<@3u\"):\n    return \"\".join(c.lower() if c.upper() == c else c.upper() for c in s)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#27",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FlipCase_4",
    "sat": "def sat(ans: str, s=\"q Y*.zv? !3B3::/3%F3\"):\n    \"\"\"\n    Flip case\n\n    Sample input\n    ---\n    'cAt'\n\n    Sample output\n    ---\n    'CaT'\n    \"\"\"\n    return len(ans) == len(s) and all({c, d} == {d.upper(), d.lower()} for c, d in zip(ans, s))",
    "sols": [
      "def sol(s=\"q Y*.zv? !3B3::/3%F3\"):\n    return \"\".join(c.lower() if c.upper() == c else c.upper() for c in s)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#27",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FlipCase_5",
    "sat": "def sat(ans: str, s=\"m&za [r!g!! W/\"):\n    \"\"\"\n    Flip case\n\n    Sample input\n    ---\n    'cAt'\n\n    Sample output\n    ---\n    'CaT'\n    \"\"\"\n    return len(ans) == len(s) and all({c, d} == {d.upper(), d.lower()} for c, d in zip(ans, s))",
    "sols": [
      "def sol(s=\"m&za [r!g!! W/\"):\n    return \"\".join(c.lower() if c.upper() == c else c.upper() for c in s)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#27",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FlipCase_6",
    "sat": "def sat(ans: str, s=\"SH\"):\n    \"\"\"\n    Flip case\n\n    Sample input\n    ---\n    'cAt'\n\n    Sample output\n    ---\n    'CaT'\n    \"\"\"\n    return len(ans) == len(s) and all({c, d} == {d.upper(), d.lower()} for c, d in zip(ans, s))",
    "sols": [
      "def sol(s=\"SH\"):\n    return \"\".join(c.lower() if c.upper() == c else c.upper() for c in s)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#27",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FlipCase_7",
    "sat": "def sat(ans: str, s=\"!nD2IE^y@X-<=k, \"):\n    \"\"\"\n    Flip case\n\n    Sample input\n    ---\n    'cAt'\n\n    Sample output\n    ---\n    'CaT'\n    \"\"\"\n    return len(ans) == len(s) and all({c, d} == {d.upper(), d.lower()} for c, d in zip(ans, s))",
    "sols": [
      "def sol(s=\"!nD2IE^y@X-<=k, \"):\n    return \"\".join(c.lower() if c.upper() == c else c.upper() for c in s)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#27",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FlipCase_8",
    "sat": "def sat(ans: str, s=\"ZuUB(mM1QOW( 3Mv!\"):\n    \"\"\"\n    Flip case\n\n    Sample input\n    ---\n    'cAt'\n\n    Sample output\n    ---\n    'CaT'\n    \"\"\"\n    return len(ans) == len(s) and all({c, d} == {d.upper(), d.lower()} for c, d in zip(ans, s))",
    "sols": [
      "def sol(s=\"ZuUB(mM1QOW( 3Mv!\"):\n    return \"\".join(c.lower() if c.upper() == c else c.upper() for c in s)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#27",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FlipCase_9",
    "sat": "def sat(ans: str, s=\" so&% ;3D:fj.1&) 3\"):\n    \"\"\"\n    Flip case\n\n    Sample input\n    ---\n    'cAt'\n\n    Sample output\n    ---\n    'CaT'\n    \"\"\"\n    return len(ans) == len(s) and all({c, d} == {d.upper(), d.lower()} for c, d in zip(ans, s))",
    "sols": [
      "def sol(s=\" so&% ;3D:fj.1&) 3\"):\n    return \"\".join(c.lower() if c.upper() == c else c.upper() for c in s)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#27",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CatStrings_0",
    "sat": "def sat(cat: str, strings=['Will', 'i', 'am', 'Now', 'here']):\n    \"\"\"\n    Concatenate a list of strings\n\n    Sample input\n    ---\n    ['cat', 'dog', 'bird']\n\n    Sample output\n    ---\n    'catdogbird'\n    \"\"\"\n    i = 0\n    for s in strings:\n        for c in s:\n            assert cat[i] == c\n            i += 1\n    return i == len(cat)",
    "sols": [
      "def sol(strings=['Will', 'i', 'am', 'Now', 'here']):\n    return \"\".join(strings)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#28",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CatStrings_1",
    "sat": "def sat(cat: str, strings=['dufe', 'keret', 'kothihisedatextumuva', 'pe', 'sicelynyzysukydew', 'zu', 'kathubaki']):\n    \"\"\"\n    Concatenate a list of strings\n\n    Sample input\n    ---\n    ['cat', 'dog', 'bird']\n\n    Sample output\n    ---\n    'catdogbird'\n    \"\"\"\n    i = 0\n    for s in strings:\n        for c in s:\n            assert cat[i] == c\n            i += 1\n    return i == len(cat)",
    "sols": [
      "def sol(strings=['dufe', 'keret', 'kothihisedatextumuva', 'pe', 'sicelynyzysukydew', 'zu', 'kathubaki']):\n    return \"\".join(strings)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#28",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CatStrings_2",
    "sat": "def sat(cat: str, strings: List[str]=[]):\n    \"\"\"\n    Concatenate a list of strings\n\n    Sample input\n    ---\n    ['cat', 'dog', 'bird']\n\n    Sample output\n    ---\n    'catdogbird'\n    \"\"\"\n    i = 0\n    for s in strings:\n        for c in s:\n            assert cat[i] == c\n            i += 1\n    return i == len(cat)",
    "sols": [
      "def sol(strings=[]):\n    return \"\".join(strings)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#28",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CatStrings_3",
    "sat": "def sat(cat: str, strings=['c', 'vawumich', 'textucagidyhikomuro', 'wuchiquusojahoz', 'l']):\n    \"\"\"\n    Concatenate a list of strings\n\n    Sample input\n    ---\n    ['cat', 'dog', 'bird']\n\n    Sample output\n    ---\n    'catdogbird'\n    \"\"\"\n    i = 0\n    for s in strings:\n        for c in s:\n            assert cat[i] == c\n            i += 1\n    return i == len(cat)",
    "sols": [
      "def sol(strings=['c', 'vawumich', 'textucagidyhikomuro', 'wuchiquusojahoz', 'l']):\n    return \"\".join(strings)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#28",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CatStrings_4",
    "sat": "def sat(cat: str, strings=['s', 'nutext', 'quoxezenukowyho', 'botidyhu', 'kicethytextithybaqu']):\n    \"\"\"\n    Concatenate a list of strings\n\n    Sample input\n    ---\n    ['cat', 'dog', 'bird']\n\n    Sample output\n    ---\n    'catdogbird'\n    \"\"\"\n    i = 0\n    for s in strings:\n        for c in s:\n            assert cat[i] == c\n            i += 1\n    return i == len(cat)",
    "sols": [
      "def sol(strings=['s', 'nutext', 'quoxezenukowyho', 'botidyhu', 'kicethytextithybaqu']):\n    return \"\".join(strings)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#28",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CatStrings_5",
    "sat": "def sat(cat: str, strings=['ki']):\n    \"\"\"\n    Concatenate a list of strings\n\n    Sample input\n    ---\n    ['cat', 'dog', 'bird']\n\n    Sample output\n    ---\n    'catdogbird'\n    \"\"\"\n    i = 0\n    for s in strings:\n        for c in s:\n            assert cat[i] == c\n            i += 1\n    return i == len(cat)",
    "sols": [
      "def sol(strings=['ki']):\n    return \"\".join(strings)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#28",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CatStrings_6",
    "sat": "def sat(cat: str, strings=['naj', 'thochif', 'poliw', 'gegylikipesepadogu', 'rixezy', 'borurocuvojitogu', 'kicu', 'gebacad', 'coxyxadypiz']):\n    \"\"\"\n    Concatenate a list of strings\n\n    Sample input\n    ---\n    ['cat', 'dog', 'bird']\n\n    Sample output\n    ---\n    'catdogbird'\n    \"\"\"\n    i = 0\n    for s in strings:\n        for c in s:\n            assert cat[i] == c\n            i += 1\n    return i == len(cat)",
    "sols": [
      "def sol(strings=['naj', 'thochif', 'poliw', 'gegylikipesepadogu', 'rixezy', 'borurocuvojitogu', 'kicu', 'gebacad', 'coxyxadypiz']):\n    return \"\".join(strings)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#28",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CatStrings_7",
    "sat": "def sat(cat: str, strings=['r', 'kiluginowula', 'getoz', 'huliquebusyni', 'kafyryziquuf']):\n    \"\"\"\n    Concatenate a list of strings\n\n    Sample input\n    ---\n    ['cat', 'dog', 'bird']\n\n    Sample output\n    ---\n    'catdogbird'\n    \"\"\"\n    i = 0\n    for s in strings:\n        for c in s:\n            assert cat[i] == c\n            i += 1\n    return i == len(cat)",
    "sols": [
      "def sol(strings=['r', 'kiluginowula', 'getoz', 'huliquebusyni', 'kafyryziquuf']):\n    return \"\".join(strings)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#28",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CatStrings_8",
    "sat": "def sat(cat: str, strings=['tijythog', 'rysichofap', 'tofylu', 'fujujufuvexuwuwywo']):\n    \"\"\"\n    Concatenate a list of strings\n\n    Sample input\n    ---\n    ['cat', 'dog', 'bird']\n\n    Sample output\n    ---\n    'catdogbird'\n    \"\"\"\n    i = 0\n    for s in strings:\n        for c in s:\n            assert cat[i] == c\n            i += 1\n    return i == len(cat)",
    "sols": [
      "def sol(strings=['tijythog', 'rysichofap', 'tofylu', 'fujujufuvexuwuwywo']):\n    return \"\".join(strings)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#28",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CatStrings_9",
    "sat": "def sat(cat: str, strings=['bi', 'pevyny', 'bunyxawutextopywesu', 'wucequuhizodysuthe', 'je', 'diwymiso', 'cofoxad', 'wy']):\n    \"\"\"\n    Concatenate a list of strings\n\n    Sample input\n    ---\n    ['cat', 'dog', 'bird']\n\n    Sample output\n    ---\n    'catdogbird'\n    \"\"\"\n    i = 0\n    for s in strings:\n        for c in s:\n            assert cat[i] == c\n            i += 1\n    return i == len(cat)",
    "sols": [
      "def sol(strings=['bi', 'pevyny', 'bunyxawutextopywesu', 'wucequuhizodysuthe', 'je', 'diwymiso', 'cofoxad', 'wy']):\n    return \"\".join(strings)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#28",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindExtensions_0",
    "sat": "def sat(extensions: List[str], strings=['cat', 'dog', 'shatter', 'donut', 'at', 'todo'], prefix=\"do\"):\n    \"\"\"\n    Find the strings in a list starting with a given prefix\n\n    Sample Input:\n    ['cat', 'car', 'fear', 'center'], 'ca'\n\n    Sample Output:\n    ['cat', 'car']\n    \"\"\"\n    i = 0\n    for s in strings:\n        if s.startswith(prefix):\n            assert extensions[i] == s\n            i += 1\n    return i == len(extensions)",
    "sols": [
      "def sol(strings=['cat', 'dog', 'shatter', 'donut', 'at', 'todo'], prefix=\"do\"):\n    return [s for s in strings if s.startswith(prefix)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#29",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindExtensions_1",
    "sat": "def sat(extensions: List[str], strings=['cot', 'z'], prefix=\"ca\"):\n    \"\"\"\n    Find the strings in a list starting with a given prefix\n\n    Sample Input:\n    ['cat', 'car', 'fear', 'center'], 'ca'\n\n    Sample Output:\n    ['cat', 'car']\n    \"\"\"\n    i = 0\n    for s in strings:\n        if s.startswith(prefix):\n            assert extensions[i] == s\n            i += 1\n    return i == len(extensions)",
    "sols": [
      "def sol(strings=['cot', 'z'], prefix=\"ca\"):\n    return [s for s in strings if s.startswith(prefix)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#29",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindExtensions_2",
    "sat": "def sat(extensions: List[str], strings=['jof', 'thibi'], prefix=\"le\"):\n    \"\"\"\n    Find the strings in a list starting with a given prefix\n\n    Sample Input:\n    ['cat', 'car', 'fear', 'center'], 'ca'\n\n    Sample Output:\n    ['cat', 'car']\n    \"\"\"\n    i = 0\n    for s in strings:\n        if s.startswith(prefix):\n            assert extensions[i] == s\n            i += 1\n    return i == len(extensions)",
    "sols": [
      "def sol(strings=['jof', 'thibi'], prefix=\"le\"):\n    return [s for s in strings if s.startswith(prefix)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#29",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindExtensions_3",
    "sat": "def sat(extensions: List[str], strings=['t'], prefix=\"t\"):\n    \"\"\"\n    Find the strings in a list starting with a given prefix\n\n    Sample Input:\n    ['cat', 'car', 'fear', 'center'], 'ca'\n\n    Sample Output:\n    ['cat', 'car']\n    \"\"\"\n    i = 0\n    for s in strings:\n        if s.startswith(prefix):\n            assert extensions[i] == s\n            i += 1\n    return i == len(extensions)",
    "sols": [
      "def sol(strings=['t'], prefix=\"t\"):\n    return [s for s in strings if s.startswith(prefix)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#29",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindExtensions_4",
    "sat": "def sat(extensions: List[str], strings=['cpud', 'cpal', 'cv', 'cchut'], prefix=\"c\"):\n    \"\"\"\n    Find the strings in a list starting with a given prefix\n\n    Sample Input:\n    ['cat', 'car', 'fear', 'center'], 'ca'\n\n    Sample Output:\n    ['cat', 'car']\n    \"\"\"\n    i = 0\n    for s in strings:\n        if s.startswith(prefix):\n            assert extensions[i] == s\n            i += 1\n    return i == len(extensions)",
    "sols": [
      "def sol(strings=['cpud', 'cpal', 'cv', 'cchut'], prefix=\"c\"):\n    return [s for s in strings if s.startswith(prefix)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#29",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindExtensions_5",
    "sat": "def sat(extensions: List[str], strings=['tuju', 'woze', 'text', 'mymy', 'chi'], prefix=\"g\"):\n    \"\"\"\n    Find the strings in a list starting with a given prefix\n\n    Sample Input:\n    ['cat', 'car', 'fear', 'center'], 'ca'\n\n    Sample Output:\n    ['cat', 'car']\n    \"\"\"\n    i = 0\n    for s in strings:\n        if s.startswith(prefix):\n            assert extensions[i] == s\n            i += 1\n    return i == len(extensions)",
    "sols": [
      "def sol(strings=['tuju', 'woze', 'text', 'mymy', 'chi'], prefix=\"g\"):\n    return [s for s in strings if s.startswith(prefix)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#29",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindExtensions_6",
    "sat": "def sat(extensions: List[str], strings=['kudar', 'g', 'zex'], prefix=\"\"):\n    \"\"\"\n    Find the strings in a list starting with a given prefix\n\n    Sample Input:\n    ['cat', 'car', 'fear', 'center'], 'ca'\n\n    Sample Output:\n    ['cat', 'car']\n    \"\"\"\n    i = 0\n    for s in strings:\n        if s.startswith(prefix):\n            assert extensions[i] == s\n            i += 1\n    return i == len(extensions)",
    "sols": [
      "def sol(strings=['kudar', 'g', 'zex'], prefix=\"\"):\n    return [s for s in strings if s.startswith(prefix)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#29",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindExtensions_7",
    "sat": "def sat(extensions: List[str], strings=['v'], prefix=\"\"):\n    \"\"\"\n    Find the strings in a list starting with a given prefix\n\n    Sample Input:\n    ['cat', 'car', 'fear', 'center'], 'ca'\n\n    Sample Output:\n    ['cat', 'car']\n    \"\"\"\n    i = 0\n    for s in strings:\n        if s.startswith(prefix):\n            assert extensions[i] == s\n            i += 1\n    return i == len(extensions)",
    "sols": [
      "def sol(strings=['v'], prefix=\"\"):\n    return [s for s in strings if s.startswith(prefix)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#29",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindExtensions_8",
    "sat": "def sat(extensions: List[str], strings=['', 'fi'], prefix=\"\"):\n    \"\"\"\n    Find the strings in a list starting with a given prefix\n\n    Sample Input:\n    ['cat', 'car', 'fear', 'center'], 'ca'\n\n    Sample Output:\n    ['cat', 'car']\n    \"\"\"\n    i = 0\n    for s in strings:\n        if s.startswith(prefix):\n            assert extensions[i] == s\n            i += 1\n    return i == len(extensions)",
    "sols": [
      "def sol(strings=['', 'fi'], prefix=\"\"):\n    return [s for s in strings if s.startswith(prefix)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#29",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindExtensions_9",
    "sat": "def sat(extensions: List[str], strings=['di', 'tabo'], prefix=\"n\"):\n    \"\"\"\n    Find the strings in a list starting with a given prefix\n\n    Sample Input:\n    ['cat', 'car', 'fear', 'center'], 'ca'\n\n    Sample Output:\n    ['cat', 'car']\n    \"\"\"\n    i = 0\n    for s in strings:\n        if s.startswith(prefix):\n            assert extensions[i] == s\n            i += 1\n    return i == len(extensions)",
    "sols": [
      "def sol(strings=['di', 'tabo'], prefix=\"n\"):\n    return [s for s in strings if s.startswith(prefix)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#29",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindPositives_0",
    "sat": "def sat(positives: List[int], nums=[2, 2342, -2, 32, -8, -5, 2342, 0, -9, 44, 11]):\n    \"\"\"\n    Find the positive integers in a list\n\n    Sample Input:\n    [-1, 3, 19, -2, 0, 44, 0, 44, 11]\n\n    Sample Output:\n    [3, 19, 44, 44, 11]\n    \"\"\"\n    stack = positives[::-1]\n    for n in nums:\n        assert n <= 0 or n == stack.pop()\n    return stack == []",
    "sols": [
      "def sol(nums=[2, 2342, -2, 32, -8, -5, 2342, 0, -9, 44, 11]):\n    return [i for i in nums if i > 0]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#30",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindPositives_1",
    "sat": "def sat(positives: List[int], nums=[53, 33, 73, 47, 35, 24, 56, 89, 85]):\n    \"\"\"\n    Find the positive integers in a list\n\n    Sample Input:\n    [-1, 3, 19, -2, 0, 44, 0, 44, 11]\n\n    Sample Output:\n    [3, 19, 44, 44, 11]\n    \"\"\"\n    stack = positives[::-1]\n    for n in nums:\n        assert n <= 0 or n == stack.pop()\n    return stack == []",
    "sols": [
      "def sol(nums=[53, 33, 73, 47, 35, 24, 56, 89, 85]):\n    return [i for i in nums if i > 0]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#30",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindPositives_2",
    "sat": "def sat(positives: List[int], nums=[61, -64, -11, -3, -96, -69, -18, -99, 87]):\n    \"\"\"\n    Find the positive integers in a list\n\n    Sample Input:\n    [-1, 3, 19, -2, 0, 44, 0, 44, 11]\n\n    Sample Output:\n    [3, 19, 44, 44, 11]\n    \"\"\"\n    stack = positives[::-1]\n    for n in nums:\n        assert n <= 0 or n == stack.pop()\n    return stack == []",
    "sols": [
      "def sol(nums=[61, -64, -11, -3, -96, -69, -18, -99, 87]):\n    return [i for i in nums if i > 0]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#30",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindPositives_3",
    "sat": "def sat(positives: List[int], nums=[62, 3, -84]):\n    \"\"\"\n    Find the positive integers in a list\n\n    Sample Input:\n    [-1, 3, 19, -2, 0, 44, 0, 44, 11]\n\n    Sample Output:\n    [3, 19, 44, 44, 11]\n    \"\"\"\n    stack = positives[::-1]\n    for n in nums:\n        assert n <= 0 or n == stack.pop()\n    return stack == []",
    "sols": [
      "def sol(nums=[62, 3, -84]):\n    return [i for i in nums if i > 0]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#30",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindPositives_4",
    "sat": "def sat(positives: List[int], nums: List[int]=[]):\n    \"\"\"\n    Find the positive integers in a list\n\n    Sample Input:\n    [-1, 3, 19, -2, 0, 44, 0, 44, 11]\n\n    Sample Output:\n    [3, 19, 44, 44, 11]\n    \"\"\"\n    stack = positives[::-1]\n    for n in nums:\n        assert n <= 0 or n == stack.pop()\n    return stack == []",
    "sols": [
      "def sol(nums=[]):\n    return [i for i in nums if i > 0]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#30",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindPositives_5",
    "sat": "def sat(positives: List[int], nums=[-99, -55, -11, -28]):\n    \"\"\"\n    Find the positive integers in a list\n\n    Sample Input:\n    [-1, 3, 19, -2, 0, 44, 0, 44, 11]\n\n    Sample Output:\n    [3, 19, 44, 44, 11]\n    \"\"\"\n    stack = positives[::-1]\n    for n in nums:\n        assert n <= 0 or n == stack.pop()\n    return stack == []",
    "sols": [
      "def sol(nums=[-99, -55, -11, -28]):\n    return [i for i in nums if i > 0]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#30",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindPositives_6",
    "sat": "def sat(positives: List[int], nums=[78, -40, -84, -80, 14, 37, -63, -31, 80]):\n    \"\"\"\n    Find the positive integers in a list\n\n    Sample Input:\n    [-1, 3, 19, -2, 0, 44, 0, 44, 11]\n\n    Sample Output:\n    [3, 19, 44, 44, 11]\n    \"\"\"\n    stack = positives[::-1]\n    for n in nums:\n        assert n <= 0 or n == stack.pop()\n    return stack == []",
    "sols": [
      "def sol(nums=[78, -40, -84, -80, 14, 37, -63, -31, 80]):\n    return [i for i in nums if i > 0]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#30",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindPositives_7",
    "sat": "def sat(positives: List[int], nums=[-61, -38, -65, 23, -27, -49]):\n    \"\"\"\n    Find the positive integers in a list\n\n    Sample Input:\n    [-1, 3, 19, -2, 0, 44, 0, 44, 11]\n\n    Sample Output:\n    [3, 19, 44, 44, 11]\n    \"\"\"\n    stack = positives[::-1]\n    for n in nums:\n        assert n <= 0 or n == stack.pop()\n    return stack == []",
    "sols": [
      "def sol(nums=[-61, -38, -65, 23, -27, -49]):\n    return [i for i in nums if i > 0]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#30",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindPositives_8",
    "sat": "def sat(positives: List[int], nums=[-41, 24]):\n    \"\"\"\n    Find the positive integers in a list\n\n    Sample Input:\n    [-1, 3, 19, -2, 0, 44, 0, 44, 11]\n\n    Sample Output:\n    [3, 19, 44, 44, 11]\n    \"\"\"\n    stack = positives[::-1]\n    for n in nums:\n        assert n <= 0 or n == stack.pop()\n    return stack == []",
    "sols": [
      "def sol(nums=[-41, 24]):\n    return [i for i in nums if i > 0]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#30",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindPositives_9",
    "sat": "def sat(positives: List[int], nums=[-90, 65, 13, -70, 45, 20]):\n    \"\"\"\n    Find the positive integers in a list\n\n    Sample Input:\n    [-1, 3, 19, -2, 0, 44, 0, 44, 11]\n\n    Sample Output:\n    [3, 19, 44, 44, 11]\n    \"\"\"\n    stack = positives[::-1]\n    for n in nums:\n        assert n <= 0 or n == stack.pop()\n    return stack == []",
    "sols": [
      "def sol(nums=[-90, 65, 13, -70, 45, 20]):\n    return [i for i in nums if i > 0]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#30",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FermatComposite_0",
    "sat": "def sat(certificate: int, n=1449):\n    \"\"\"\n    Find a Fermat composite certificate for a number n > 1\n\n    Sample Input:\n    1469\n\n    Sample Output:\n    3  # because (3 ** 1468) % 1469 != 1\n    \"\"\"\n    return pow(certificate, n - 1, n) > 1",
    "sols": [
      "def sol(n=1449):\n    return next(i for i in range(2, n) if pow(i, n - 1, n) > 1)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#31",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FermatComposite_1",
    "sat": "def sat(certificate: int, n=124188003):\n    \"\"\"\n    Find a Fermat composite certificate for a number n > 1\n\n    Sample Input:\n    1469\n\n    Sample Output:\n    3  # because (3 ** 1468) % 1469 != 1\n    \"\"\"\n    return pow(certificate, n - 1, n) > 1",
    "sols": [
      "def sol(n=124188003):\n    return next(i for i in range(2, n) if pow(i, n - 1, n) > 1)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#31",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FermatComposite_2",
    "sat": "def sat(certificate: int, n=1126002225):\n    \"\"\"\n    Find a Fermat composite certificate for a number n > 1\n\n    Sample Input:\n    1469\n\n    Sample Output:\n    3  # because (3 ** 1468) % 1469 != 1\n    \"\"\"\n    return pow(certificate, n - 1, n) > 1",
    "sols": [
      "def sol(n=1126002225):\n    return next(i for i in range(2, n) if pow(i, n - 1, n) > 1)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#31",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FermatComposite_3",
    "sat": "def sat(certificate: int, n=2013505):\n    \"\"\"\n    Find a Fermat composite certificate for a number n > 1\n\n    Sample Input:\n    1469\n\n    Sample Output:\n    3  # because (3 ** 1468) % 1469 != 1\n    \"\"\"\n    return pow(certificate, n - 1, n) > 1",
    "sols": [
      "def sol(n=2013505):\n    return next(i for i in range(2, n) if pow(i, n - 1, n) > 1)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#31",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FermatComposite_4",
    "sat": "def sat(certificate: int, n=1541294115):\n    \"\"\"\n    Find a Fermat composite certificate for a number n > 1\n\n    Sample Input:\n    1469\n\n    Sample Output:\n    3  # because (3 ** 1468) % 1469 != 1\n    \"\"\"\n    return pow(certificate, n - 1, n) > 1",
    "sols": [
      "def sol(n=1541294115):\n    return next(i for i in range(2, n) if pow(i, n - 1, n) > 1)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#31",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FermatComposite_5",
    "sat": "def sat(certificate: int, n=2199642509):\n    \"\"\"\n    Find a Fermat composite certificate for a number n > 1\n\n    Sample Input:\n    1469\n\n    Sample Output:\n    3  # because (3 ** 1468) % 1469 != 1\n    \"\"\"\n    return pow(certificate, n - 1, n) > 1",
    "sols": [
      "def sol(n=2199642509):\n    return next(i for i in range(2, n) if pow(i, n - 1, n) > 1)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#31",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FermatComposite_6",
    "sat": "def sat(certificate: int, n=3795573951):\n    \"\"\"\n    Find a Fermat composite certificate for a number n > 1\n\n    Sample Input:\n    1469\n\n    Sample Output:\n    3  # because (3 ** 1468) % 1469 != 1\n    \"\"\"\n    return pow(certificate, n - 1, n) > 1",
    "sols": [
      "def sol(n=3795573951):\n    return next(i for i in range(2, n) if pow(i, n - 1, n) > 1)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#31",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FermatComposite_7",
    "sat": "def sat(certificate: int, n=1212062763):\n    \"\"\"\n    Find a Fermat composite certificate for a number n > 1\n\n    Sample Input:\n    1469\n\n    Sample Output:\n    3  # because (3 ** 1468) % 1469 != 1\n    \"\"\"\n    return pow(certificate, n - 1, n) > 1",
    "sols": [
      "def sol(n=1212062763):\n    return next(i for i in range(2, n) if pow(i, n - 1, n) > 1)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#31",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FermatComposite_8",
    "sat": "def sat(certificate: int, n=1298716900):\n    \"\"\"\n    Find a Fermat composite certificate for a number n > 1\n\n    Sample Input:\n    1469\n\n    Sample Output:\n    3  # because (3 ** 1468) % 1469 != 1\n    \"\"\"\n    return pow(certificate, n - 1, n) > 1",
    "sols": [
      "def sol(n=1298716900):\n    return next(i for i in range(2, n) if pow(i, n - 1, n) > 1)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#31",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FermatComposite_9",
    "sat": "def sat(certificate: int, n=1025499501):\n    \"\"\"\n    Find a Fermat composite certificate for a number n > 1\n\n    Sample Input:\n    1469\n\n    Sample Output:\n    3  # because (3 ** 1468) % 1469 != 1\n    \"\"\"\n    return pow(certificate, n - 1, n) > 1",
    "sols": [
      "def sol(n=1025499501):\n    return next(i for i in range(2, n) if pow(i, n - 1, n) > 1)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#31",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "OddDegreePolynomialRoot_0",
    "sat": "def sat(root: float, coeffs=[1, 2, 3, 17]):\n    \"\"\"\n    Find a real root of an odd degree polynomial from its coefficients\n\n    Sample Input:\n    [1, 0, 8]\n\n    Sample Output:\n    -2.0  # 1*(-2.0)^3 + 8 == 0\n    \"\"\"\n    return abs(sum(coeff * (root ** i) for i, coeff in enumerate(coeffs))) < 1e-4",
    "sols": [
      "def sol(coeffs=[1, 2, 3, 17]):\n    def p(x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(coeffs))\n\n    for attempt in range(100):\n        a, b = -(10 ** attempt), (10 ** attempt)\n        p_a, p_b = p(a), p(b)\n        while p_a * p_b <= 0:\n            mid = (a + b) / 2\n            p_mid = p(mid)\n            if abs(p_mid) < 1e-4:\n                return mid\n            assert mid not in [a, b]\n            if p_mid * p_a > 0:\n                a, p_a = mid, p_mid\n            else:\n                b, p_b = mid, p_mid\n\n    assert False, \"Root finder failed on 100 attempts\""
    ],
    "module": "human_eval",
    "notes": "Polynomials of odd degree always have a real solution.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#32",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "OddDegreePolynomialRoot_1",
    "sat": "def sat(root: float, coeffs=[-1, -5, 4, -8, 3, -1, 0, 7]):\n    \"\"\"\n    Find a real root of an odd degree polynomial from its coefficients\n\n    Sample Input:\n    [1, 0, 8]\n\n    Sample Output:\n    -2.0  # 1*(-2.0)^3 + 8 == 0\n    \"\"\"\n    return abs(sum(coeff * (root ** i) for i, coeff in enumerate(coeffs))) < 1e-4",
    "sols": [
      "def sol(coeffs=[-1, -5, 4, -8, 3, -1, 0, 7]):\n    def p(x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(coeffs))\n\n    for attempt in range(100):\n        a, b = -(10 ** attempt), (10 ** attempt)\n        p_a, p_b = p(a), p(b)\n        while p_a * p_b <= 0:\n            mid = (a + b) / 2\n            p_mid = p(mid)\n            if abs(p_mid) < 1e-4:\n                return mid\n            assert mid not in [a, b]\n            if p_mid * p_a > 0:\n                a, p_a = mid, p_mid\n            else:\n                b, p_b = mid, p_mid\n\n    assert False, \"Root finder failed on 100 attempts\""
    ],
    "module": "human_eval",
    "notes": "Polynomials of odd degree always have a real solution.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#32",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "OddDegreePolynomialRoot_2",
    "sat": "def sat(root: float, coeffs=[7, 1]):\n    \"\"\"\n    Find a real root of an odd degree polynomial from its coefficients\n\n    Sample Input:\n    [1, 0, 8]\n\n    Sample Output:\n    -2.0  # 1*(-2.0)^3 + 8 == 0\n    \"\"\"\n    return abs(sum(coeff * (root ** i) for i, coeff in enumerate(coeffs))) < 1e-4",
    "sols": [
      "def sol(coeffs=[7, 1]):\n    def p(x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(coeffs))\n\n    for attempt in range(100):\n        a, b = -(10 ** attempt), (10 ** attempt)\n        p_a, p_b = p(a), p(b)\n        while p_a * p_b <= 0:\n            mid = (a + b) / 2\n            p_mid = p(mid)\n            if abs(p_mid) < 1e-4:\n                return mid\n            assert mid not in [a, b]\n            if p_mid * p_a > 0:\n                a, p_a = mid, p_mid\n            else:\n                b, p_b = mid, p_mid\n\n    assert False, \"Root finder failed on 100 attempts\""
    ],
    "module": "human_eval",
    "notes": "Polynomials of odd degree always have a real solution.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#32",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "OddDegreePolynomialRoot_3",
    "sat": "def sat(root: float, coeffs=[1, 4, 1, -7, 5, 0, -10, -9, 4, 9]):\n    \"\"\"\n    Find a real root of an odd degree polynomial from its coefficients\n\n    Sample Input:\n    [1, 0, 8]\n\n    Sample Output:\n    -2.0  # 1*(-2.0)^3 + 8 == 0\n    \"\"\"\n    return abs(sum(coeff * (root ** i) for i, coeff in enumerate(coeffs))) < 1e-4",
    "sols": [
      "def sol(coeffs=[1, 4, 1, -7, 5, 0, -10, -9, 4, 9]):\n    def p(x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(coeffs))\n\n    for attempt in range(100):\n        a, b = -(10 ** attempt), (10 ** attempt)\n        p_a, p_b = p(a), p(b)\n        while p_a * p_b <= 0:\n            mid = (a + b) / 2\n            p_mid = p(mid)\n            if abs(p_mid) < 1e-4:\n                return mid\n            assert mid not in [a, b]\n            if p_mid * p_a > 0:\n                a, p_a = mid, p_mid\n            else:\n                b, p_b = mid, p_mid\n\n    assert False, \"Root finder failed on 100 attempts\""
    ],
    "module": "human_eval",
    "notes": "Polynomials of odd degree always have a real solution.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#32",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "OddDegreePolynomialRoot_4",
    "sat": "def sat(root: float, coeffs=[7, 8]):\n    \"\"\"\n    Find a real root of an odd degree polynomial from its coefficients\n\n    Sample Input:\n    [1, 0, 8]\n\n    Sample Output:\n    -2.0  # 1*(-2.0)^3 + 8 == 0\n    \"\"\"\n    return abs(sum(coeff * (root ** i) for i, coeff in enumerate(coeffs))) < 1e-4",
    "sols": [
      "def sol(coeffs=[7, 8]):\n    def p(x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(coeffs))\n\n    for attempt in range(100):\n        a, b = -(10 ** attempt), (10 ** attempt)\n        p_a, p_b = p(a), p(b)\n        while p_a * p_b <= 0:\n            mid = (a + b) / 2\n            p_mid = p(mid)\n            if abs(p_mid) < 1e-4:\n                return mid\n            assert mid not in [a, b]\n            if p_mid * p_a > 0:\n                a, p_a = mid, p_mid\n            else:\n                b, p_b = mid, p_mid\n\n    assert False, \"Root finder failed on 100 attempts\""
    ],
    "module": "human_eval",
    "notes": "Polynomials of odd degree always have a real solution.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#32",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "OddDegreePolynomialRoot_5",
    "sat": "def sat(root: float, coeffs=[-4, 2]):\n    \"\"\"\n    Find a real root of an odd degree polynomial from its coefficients\n\n    Sample Input:\n    [1, 0, 8]\n\n    Sample Output:\n    -2.0  # 1*(-2.0)^3 + 8 == 0\n    \"\"\"\n    return abs(sum(coeff * (root ** i) for i, coeff in enumerate(coeffs))) < 1e-4",
    "sols": [
      "def sol(coeffs=[-4, 2]):\n    def p(x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(coeffs))\n\n    for attempt in range(100):\n        a, b = -(10 ** attempt), (10 ** attempt)\n        p_a, p_b = p(a), p(b)\n        while p_a * p_b <= 0:\n            mid = (a + b) / 2\n            p_mid = p(mid)\n            if abs(p_mid) < 1e-4:\n                return mid\n            assert mid not in [a, b]\n            if p_mid * p_a > 0:\n                a, p_a = mid, p_mid\n            else:\n                b, p_b = mid, p_mid\n\n    assert False, \"Root finder failed on 100 attempts\""
    ],
    "module": "human_eval",
    "notes": "Polynomials of odd degree always have a real solution.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#32",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "OddDegreePolynomialRoot_6",
    "sat": "def sat(root: float, coeffs=[-6, 2, 4, -3, -4, 3, 2, 3, -3, 6]):\n    \"\"\"\n    Find a real root of an odd degree polynomial from its coefficients\n\n    Sample Input:\n    [1, 0, 8]\n\n    Sample Output:\n    -2.0  # 1*(-2.0)^3 + 8 == 0\n    \"\"\"\n    return abs(sum(coeff * (root ** i) for i, coeff in enumerate(coeffs))) < 1e-4",
    "sols": [
      "def sol(coeffs=[-6, 2, 4, -3, -4, 3, 2, 3, -3, 6]):\n    def p(x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(coeffs))\n\n    for attempt in range(100):\n        a, b = -(10 ** attempt), (10 ** attempt)\n        p_a, p_b = p(a), p(b)\n        while p_a * p_b <= 0:\n            mid = (a + b) / 2\n            p_mid = p(mid)\n            if abs(p_mid) < 1e-4:\n                return mid\n            assert mid not in [a, b]\n            if p_mid * p_a > 0:\n                a, p_a = mid, p_mid\n            else:\n                b, p_b = mid, p_mid\n\n    assert False, \"Root finder failed on 100 attempts\""
    ],
    "module": "human_eval",
    "notes": "Polynomials of odd degree always have a real solution.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#32",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "OddDegreePolynomialRoot_7",
    "sat": "def sat(root: float, coeffs=[9, -7, -9, -9, 0, 1, 0, 4]):\n    \"\"\"\n    Find a real root of an odd degree polynomial from its coefficients\n\n    Sample Input:\n    [1, 0, 8]\n\n    Sample Output:\n    -2.0  # 1*(-2.0)^3 + 8 == 0\n    \"\"\"\n    return abs(sum(coeff * (root ** i) for i, coeff in enumerate(coeffs))) < 1e-4",
    "sols": [
      "def sol(coeffs=[9, -7, -9, -9, 0, 1, 0, 4]):\n    def p(x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(coeffs))\n\n    for attempt in range(100):\n        a, b = -(10 ** attempt), (10 ** attempt)\n        p_a, p_b = p(a), p(b)\n        while p_a * p_b <= 0:\n            mid = (a + b) / 2\n            p_mid = p(mid)\n            if abs(p_mid) < 1e-4:\n                return mid\n            assert mid not in [a, b]\n            if p_mid * p_a > 0:\n                a, p_a = mid, p_mid\n            else:\n                b, p_b = mid, p_mid\n\n    assert False, \"Root finder failed on 100 attempts\""
    ],
    "module": "human_eval",
    "notes": "Polynomials of odd degree always have a real solution.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#32",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "OddDegreePolynomialRoot_8",
    "sat": "def sat(root: float, coeffs=[1, 0, -9, 9, -7, -4, -2, 3, -9, 9]):\n    \"\"\"\n    Find a real root of an odd degree polynomial from its coefficients\n\n    Sample Input:\n    [1, 0, 8]\n\n    Sample Output:\n    -2.0  # 1*(-2.0)^3 + 8 == 0\n    \"\"\"\n    return abs(sum(coeff * (root ** i) for i, coeff in enumerate(coeffs))) < 1e-4",
    "sols": [
      "def sol(coeffs=[1, 0, -9, 9, -7, -4, -2, 3, -9, 9]):\n    def p(x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(coeffs))\n\n    for attempt in range(100):\n        a, b = -(10 ** attempt), (10 ** attempt)\n        p_a, p_b = p(a), p(b)\n        while p_a * p_b <= 0:\n            mid = (a + b) / 2\n            p_mid = p(mid)\n            if abs(p_mid) < 1e-4:\n                return mid\n            assert mid not in [a, b]\n            if p_mid * p_a > 0:\n                a, p_a = mid, p_mid\n            else:\n                b, p_b = mid, p_mid\n\n    assert False, \"Root finder failed on 100 attempts\""
    ],
    "module": "human_eval",
    "notes": "Polynomials of odd degree always have a real solution.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#32",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "OddDegreePolynomialRoot_9",
    "sat": "def sat(root: float, coeffs=[5, -8, 3, -2, -9, -6, 9, 2]):\n    \"\"\"\n    Find a real root of an odd degree polynomial from its coefficients\n\n    Sample Input:\n    [1, 0, 8]\n\n    Sample Output:\n    -2.0  # 1*(-2.0)^3 + 8 == 0\n    \"\"\"\n    return abs(sum(coeff * (root ** i) for i, coeff in enumerate(coeffs))) < 1e-4",
    "sols": [
      "def sol(coeffs=[5, -8, 3, -2, -9, -6, 9, 2]):\n    def p(x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(coeffs))\n\n    for attempt in range(100):\n        a, b = -(10 ** attempt), (10 ** attempt)\n        p_a, p_b = p(a), p(b)\n        while p_a * p_b <= 0:\n            mid = (a + b) / 2\n            p_mid = p(mid)\n            if abs(p_mid) < 1e-4:\n                return mid\n            assert mid not in [a, b]\n            if p_mid * p_a > 0:\n                a, p_a = mid, p_mid\n            else:\n                b, p_b = mid, p_mid\n\n    assert False, \"Root finder failed on 100 attempts\""
    ],
    "module": "human_eval",
    "notes": "Polynomials of odd degree always have a real solution.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#32",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TwoThirdsSorted_0",
    "sat": "def sat(li: List[int], orig=[1, -2, 3, 17, 8, 4, 12, 3, 18, 5, -29, 0, 0]):\n    \"\"\"\n    Start with a list of integers, keep every third element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [8, 0, 2, 2, 4, 8, 1, 8, 9, 3]\n    \"\"\"\n    assert orig[::3] == li[::3], \"Keep every third entry fixed\"\n    assert sorted(li) == sorted(orig), \"Not even a permutation\"\n    assert all(li[i] <= li[i + 1] for i in range(1, len(li) - 1, 3))\n    assert all(li[i] <= li[i + 2] for i in range(2, len(li) - 2, 3))\n    return True",
    "sols": [
      "def sol(orig=[1, -2, 3, 17, 8, 4, 12, 3, 18, 5, -29, 0, 0]):\n    n = len(orig)\n    your_list = orig[::3]\n    sub = orig[:]\n    for i in range(int((len(sub) + 2) / 3)):\n        sub.pop((2 * i))\n    sub = sorted(sub)\n    answ = []\n    for i in range(int(n / 3)):\n        answ.append(your_list[i])\n        answ.append(sub[i * 2])\n        answ.append(sub[i * 2 + 1])\n    if n % 3 == 1:\n        answ.append(your_list[-1])\n    if n % 3 == 2:\n        answ.append(your_list[-1])\n        answ.append(sub[-1])\n    return answ"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#33",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TwoThirdsSorted_1",
    "sat": "def sat(li: List[int], orig=[-10, 9, 0, -6, 0, -7, -2, 4, 8, 2, 3, -9, -8, 9, -4, -4]):\n    \"\"\"\n    Start with a list of integers, keep every third element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [8, 0, 2, 2, 4, 8, 1, 8, 9, 3]\n    \"\"\"\n    assert orig[::3] == li[::3], \"Keep every third entry fixed\"\n    assert sorted(li) == sorted(orig), \"Not even a permutation\"\n    assert all(li[i] <= li[i + 1] for i in range(1, len(li) - 1, 3))\n    assert all(li[i] <= li[i + 2] for i in range(2, len(li) - 2, 3))\n    return True",
    "sols": [
      "def sol(orig=[-10, 9, 0, -6, 0, -7, -2, 4, 8, 2, 3, -9, -8, 9, -4, -4]):\n    n = len(orig)\n    your_list = orig[::3]\n    sub = orig[:]\n    for i in range(int((len(sub) + 2) / 3)):\n        sub.pop((2 * i))\n    sub = sorted(sub)\n    answ = []\n    for i in range(int(n / 3)):\n        answ.append(your_list[i])\n        answ.append(sub[i * 2])\n        answ.append(sub[i * 2 + 1])\n    if n % 3 == 1:\n        answ.append(your_list[-1])\n    if n % 3 == 2:\n        answ.append(your_list[-1])\n        answ.append(sub[-1])\n    return answ"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#33",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TwoThirdsSorted_2",
    "sat": "def sat(li: List[int], orig=[0, 7, -3, -3, 2, 2, 5, -9, -9]):\n    \"\"\"\n    Start with a list of integers, keep every third element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [8, 0, 2, 2, 4, 8, 1, 8, 9, 3]\n    \"\"\"\n    assert orig[::3] == li[::3], \"Keep every third entry fixed\"\n    assert sorted(li) == sorted(orig), \"Not even a permutation\"\n    assert all(li[i] <= li[i + 1] for i in range(1, len(li) - 1, 3))\n    assert all(li[i] <= li[i + 2] for i in range(2, len(li) - 2, 3))\n    return True",
    "sols": [
      "def sol(orig=[0, 7, -3, -3, 2, 2, 5, -9, -9]):\n    n = len(orig)\n    your_list = orig[::3]\n    sub = orig[:]\n    for i in range(int((len(sub) + 2) / 3)):\n        sub.pop((2 * i))\n    sub = sorted(sub)\n    answ = []\n    for i in range(int(n / 3)):\n        answ.append(your_list[i])\n        answ.append(sub[i * 2])\n        answ.append(sub[i * 2 + 1])\n    if n % 3 == 1:\n        answ.append(your_list[-1])\n    if n % 3 == 2:\n        answ.append(your_list[-1])\n        answ.append(sub[-1])\n    return answ"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#33",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TwoThirdsSorted_3",
    "sat": "def sat(li: List[int], orig=[-1, -1, 0, 6, 3, -1, 4, -1, 1, 9, -4, -1, 6, 4, -7, -4, 1]):\n    \"\"\"\n    Start with a list of integers, keep every third element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [8, 0, 2, 2, 4, 8, 1, 8, 9, 3]\n    \"\"\"\n    assert orig[::3] == li[::3], \"Keep every third entry fixed\"\n    assert sorted(li) == sorted(orig), \"Not even a permutation\"\n    assert all(li[i] <= li[i + 1] for i in range(1, len(li) - 1, 3))\n    assert all(li[i] <= li[i + 2] for i in range(2, len(li) - 2, 3))\n    return True",
    "sols": [
      "def sol(orig=[-1, -1, 0, 6, 3, -1, 4, -1, 1, 9, -4, -1, 6, 4, -7, -4, 1]):\n    n = len(orig)\n    your_list = orig[::3]\n    sub = orig[:]\n    for i in range(int((len(sub) + 2) / 3)):\n        sub.pop((2 * i))\n    sub = sorted(sub)\n    answ = []\n    for i in range(int(n / 3)):\n        answ.append(your_list[i])\n        answ.append(sub[i * 2])\n        answ.append(sub[i * 2 + 1])\n    if n % 3 == 1:\n        answ.append(your_list[-1])\n    if n % 3 == 2:\n        answ.append(your_list[-1])\n        answ.append(sub[-1])\n    return answ"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#33",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TwoThirdsSorted_4",
    "sat": "def sat(li: List[int], orig: List[int]=[]):\n    \"\"\"\n    Start with a list of integers, keep every third element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [8, 0, 2, 2, 4, 8, 1, 8, 9, 3]\n    \"\"\"\n    assert orig[::3] == li[::3], \"Keep every third entry fixed\"\n    assert sorted(li) == sorted(orig), \"Not even a permutation\"\n    assert all(li[i] <= li[i + 1] for i in range(1, len(li) - 1, 3))\n    assert all(li[i] <= li[i + 2] for i in range(2, len(li) - 2, 3))\n    return True",
    "sols": [
      "def sol(orig=[]):\n    n = len(orig)\n    your_list = orig[::3]\n    sub = orig[:]\n    for i in range(int((len(sub) + 2) / 3)):\n        sub.pop((2 * i))\n    sub = sorted(sub)\n    answ = []\n    for i in range(int(n / 3)):\n        answ.append(your_list[i])\n        answ.append(sub[i * 2])\n        answ.append(sub[i * 2 + 1])\n    if n % 3 == 1:\n        answ.append(your_list[-1])\n    if n % 3 == 2:\n        answ.append(your_list[-1])\n        answ.append(sub[-1])\n    return answ"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#33",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TwoThirdsSorted_5",
    "sat": "def sat(li: List[int], orig=[-4, -4, 7, 6, 0, -6, -9, 9]):\n    \"\"\"\n    Start with a list of integers, keep every third element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [8, 0, 2, 2, 4, 8, 1, 8, 9, 3]\n    \"\"\"\n    assert orig[::3] == li[::3], \"Keep every third entry fixed\"\n    assert sorted(li) == sorted(orig), \"Not even a permutation\"\n    assert all(li[i] <= li[i + 1] for i in range(1, len(li) - 1, 3))\n    assert all(li[i] <= li[i + 2] for i in range(2, len(li) - 2, 3))\n    return True",
    "sols": [
      "def sol(orig=[-4, -4, 7, 6, 0, -6, -9, 9]):\n    n = len(orig)\n    your_list = orig[::3]\n    sub = orig[:]\n    for i in range(int((len(sub) + 2) / 3)):\n        sub.pop((2 * i))\n    sub = sorted(sub)\n    answ = []\n    for i in range(int(n / 3)):\n        answ.append(your_list[i])\n        answ.append(sub[i * 2])\n        answ.append(sub[i * 2 + 1])\n    if n % 3 == 1:\n        answ.append(your_list[-1])\n    if n % 3 == 2:\n        answ.append(your_list[-1])\n        answ.append(sub[-1])\n    return answ"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#33",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TwoThirdsSorted_6",
    "sat": "def sat(li: List[int], orig=[-10, -3, -5, 5, 8, -7, -4, -5, -9, -6, -6, -3]):\n    \"\"\"\n    Start with a list of integers, keep every third element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [8, 0, 2, 2, 4, 8, 1, 8, 9, 3]\n    \"\"\"\n    assert orig[::3] == li[::3], \"Keep every third entry fixed\"\n    assert sorted(li) == sorted(orig), \"Not even a permutation\"\n    assert all(li[i] <= li[i + 1] for i in range(1, len(li) - 1, 3))\n    assert all(li[i] <= li[i + 2] for i in range(2, len(li) - 2, 3))\n    return True",
    "sols": [
      "def sol(orig=[-10, -3, -5, 5, 8, -7, -4, -5, -9, -6, -6, -3]):\n    n = len(orig)\n    your_list = orig[::3]\n    sub = orig[:]\n    for i in range(int((len(sub) + 2) / 3)):\n        sub.pop((2 * i))\n    sub = sorted(sub)\n    answ = []\n    for i in range(int(n / 3)):\n        answ.append(your_list[i])\n        answ.append(sub[i * 2])\n        answ.append(sub[i * 2 + 1])\n    if n % 3 == 1:\n        answ.append(your_list[-1])\n    if n % 3 == 2:\n        answ.append(your_list[-1])\n        answ.append(sub[-1])\n    return answ"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#33",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TwoThirdsSorted_7",
    "sat": "def sat(li: List[int], orig=[0, 7, -8, -2]):\n    \"\"\"\n    Start with a list of integers, keep every third element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [8, 0, 2, 2, 4, 8, 1, 8, 9, 3]\n    \"\"\"\n    assert orig[::3] == li[::3], \"Keep every third entry fixed\"\n    assert sorted(li) == sorted(orig), \"Not even a permutation\"\n    assert all(li[i] <= li[i + 1] for i in range(1, len(li) - 1, 3))\n    assert all(li[i] <= li[i + 2] for i in range(2, len(li) - 2, 3))\n    return True",
    "sols": [
      "def sol(orig=[0, 7, -8, -2]):\n    n = len(orig)\n    your_list = orig[::3]\n    sub = orig[:]\n    for i in range(int((len(sub) + 2) / 3)):\n        sub.pop((2 * i))\n    sub = sorted(sub)\n    answ = []\n    for i in range(int(n / 3)):\n        answ.append(your_list[i])\n        answ.append(sub[i * 2])\n        answ.append(sub[i * 2 + 1])\n    if n % 3 == 1:\n        answ.append(your_list[-1])\n    if n % 3 == 2:\n        answ.append(your_list[-1])\n        answ.append(sub[-1])\n    return answ"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#33",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TwoThirdsSorted_8",
    "sat": "def sat(li: List[int], orig=[-7, 8]):\n    \"\"\"\n    Start with a list of integers, keep every third element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [8, 0, 2, 2, 4, 8, 1, 8, 9, 3]\n    \"\"\"\n    assert orig[::3] == li[::3], \"Keep every third entry fixed\"\n    assert sorted(li) == sorted(orig), \"Not even a permutation\"\n    assert all(li[i] <= li[i + 1] for i in range(1, len(li) - 1, 3))\n    assert all(li[i] <= li[i + 2] for i in range(2, len(li) - 2, 3))\n    return True",
    "sols": [
      "def sol(orig=[-7, 8]):\n    n = len(orig)\n    your_list = orig[::3]\n    sub = orig[:]\n    for i in range(int((len(sub) + 2) / 3)):\n        sub.pop((2 * i))\n    sub = sorted(sub)\n    answ = []\n    for i in range(int(n / 3)):\n        answ.append(your_list[i])\n        answ.append(sub[i * 2])\n        answ.append(sub[i * 2 + 1])\n    if n % 3 == 1:\n        answ.append(your_list[-1])\n    if n % 3 == 2:\n        answ.append(your_list[-1])\n        answ.append(sub[-1])\n    return answ"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#33",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TwoThirdsSorted_9",
    "sat": "def sat(li: List[int], orig=[1, 1, 6, 0, -8, -3, 8, -4, -1, 8, 2, -6, -8, -10, 4, 4, -10]):\n    \"\"\"\n    Start with a list of integers, keep every third element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [8, 0, 2, 2, 4, 8, 1, 8, 9, 3]\n    \"\"\"\n    assert orig[::3] == li[::3], \"Keep every third entry fixed\"\n    assert sorted(li) == sorted(orig), \"Not even a permutation\"\n    assert all(li[i] <= li[i + 1] for i in range(1, len(li) - 1, 3))\n    assert all(li[i] <= li[i + 2] for i in range(2, len(li) - 2, 3))\n    return True",
    "sols": [
      "def sol(orig=[1, 1, 6, 0, -8, -3, 8, -4, -1, 8, 2, -6, -8, -10, 4, 4, -10]):\n    n = len(orig)\n    your_list = orig[::3]\n    sub = orig[:]\n    for i in range(int((len(sub) + 2) / 3)):\n        sub.pop((2 * i))\n    sub = sorted(sub)\n    answ = []\n    for i in range(int(n / 3)):\n        answ.append(your_list[i])\n        answ.append(sub[i * 2])\n        answ.append(sub[i * 2 + 1])\n    if n % 3 == 1:\n        answ.append(your_list[-1])\n    if n % 3 == 2:\n        answ.append(your_list[-1])\n        answ.append(sub[-1])\n    return answ"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#33",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "UniqueSorted_0",
    "sat": "def sat(li: List[int], orig=[1, 1, 3, 2, 0, 8, 32, -4, 0]):\n    \"\"\"\n    Find an increasing sequence consisting of the elements of the original list.\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 4, -2, 8, 3]\n\n    Sample Output:\n    [-2, 0, 2, 3, 4, 7, 8, 9]\n    \"\"\"\n    for i in range(len(li) - 1):\n        assert li[i] < li[i + 1]\n        assert li[i] in orig\n    for n in orig:\n        assert n in li\n    return True",
    "sols": [
      "def sol(orig=[1, 1, 3, 2, 0, 8, 32, -4, 0]):\n    my_list = sorted(set(orig))\n    return my_list"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#34",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "UniqueSorted_1",
    "sat": "def sat(li: List[int], orig=[-9, 1, -5, 6, -1, 3, 5, 8, -10, -2, 3, -9, -10]):\n    \"\"\"\n    Find an increasing sequence consisting of the elements of the original list.\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 4, -2, 8, 3]\n\n    Sample Output:\n    [-2, 0, 2, 3, 4, 7, 8, 9]\n    \"\"\"\n    for i in range(len(li) - 1):\n        assert li[i] < li[i + 1]\n        assert li[i] in orig\n    for n in orig:\n        assert n in li\n    return True",
    "sols": [
      "def sol(orig=[-9, 1, -5, 6, -1, 3, 5, 8, -10, -2, 3, -9, -10]):\n    my_list = sorted(set(orig))\n    return my_list"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#34",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "UniqueSorted_2",
    "sat": "def sat(li: List[int], orig=[-3, 7, 9, -10, -10, 5, 2, 8]):\n    \"\"\"\n    Find an increasing sequence consisting of the elements of the original list.\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 4, -2, 8, 3]\n\n    Sample Output:\n    [-2, 0, 2, 3, 4, 7, 8, 9]\n    \"\"\"\n    for i in range(len(li) - 1):\n        assert li[i] < li[i + 1]\n        assert li[i] in orig\n    for n in orig:\n        assert n in li\n    return True",
    "sols": [
      "def sol(orig=[-3, 7, 9, -10, -10, 5, 2, 8]):\n    my_list = sorted(set(orig))\n    return my_list"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#34",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "UniqueSorted_3",
    "sat": "def sat(li: List[int], orig=[-6]):\n    \"\"\"\n    Find an increasing sequence consisting of the elements of the original list.\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 4, -2, 8, 3]\n\n    Sample Output:\n    [-2, 0, 2, 3, 4, 7, 8, 9]\n    \"\"\"\n    for i in range(len(li) - 1):\n        assert li[i] < li[i + 1]\n        assert li[i] in orig\n    for n in orig:\n        assert n in li\n    return True",
    "sols": [
      "def sol(orig=[-6]):\n    my_list = sorted(set(orig))\n    return my_list"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#34",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "UniqueSorted_4",
    "sat": "def sat(li: List[int], orig=[1, -5, 6, 2, -7, -6, 5, -5, 3, 7, 4, -10, -2, 3, 7, 9, -3, 8, 7]):\n    \"\"\"\n    Find an increasing sequence consisting of the elements of the original list.\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 4, -2, 8, 3]\n\n    Sample Output:\n    [-2, 0, 2, 3, 4, 7, 8, 9]\n    \"\"\"\n    for i in range(len(li) - 1):\n        assert li[i] < li[i + 1]\n        assert li[i] in orig\n    for n in orig:\n        assert n in li\n    return True",
    "sols": [
      "def sol(orig=[1, -5, 6, 2, -7, -6, 5, -5, 3, 7, 4, -10, -2, 3, 7, 9, -3, 8, 7]):\n    my_list = sorted(set(orig))\n    return my_list"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#34",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "UniqueSorted_5",
    "sat": "def sat(li: List[int], orig=[-6, 2, 4, -3, -5, 5, -8, -9, 3, -7, 7, 6, 8]):\n    \"\"\"\n    Find an increasing sequence consisting of the elements of the original list.\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 4, -2, 8, 3]\n\n    Sample Output:\n    [-2, 0, 2, 3, 4, 7, 8, 9]\n    \"\"\"\n    for i in range(len(li) - 1):\n        assert li[i] < li[i + 1]\n        assert li[i] in orig\n    for n in orig:\n        assert n in li\n    return True",
    "sols": [
      "def sol(orig=[-6, 2, 4, -3, -5, 5, -8, -9, 3, -7, 7, 6, 8]):\n    my_list = sorted(set(orig))\n    return my_list"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#34",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "UniqueSorted_6",
    "sat": "def sat(li: List[int], orig=[9, -10, 4, 5, 2, -10, -10, 7, 4, 5, 8, -5, -10, -6, 4]):\n    \"\"\"\n    Find an increasing sequence consisting of the elements of the original list.\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 4, -2, 8, 3]\n\n    Sample Output:\n    [-2, 0, 2, 3, 4, 7, 8, 9]\n    \"\"\"\n    for i in range(len(li) - 1):\n        assert li[i] < li[i + 1]\n        assert li[i] in orig\n    for n in orig:\n        assert n in li\n    return True",
    "sols": [
      "def sol(orig=[9, -10, 4, 5, 2, -10, -10, 7, 4, 5, 8, -5, -10, -6, 4]):\n    my_list = sorted(set(orig))\n    return my_list"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#34",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "UniqueSorted_7",
    "sat": "def sat(li: List[int], orig=[0, -10, 8]):\n    \"\"\"\n    Find an increasing sequence consisting of the elements of the original list.\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 4, -2, 8, 3]\n\n    Sample Output:\n    [-2, 0, 2, 3, 4, 7, 8, 9]\n    \"\"\"\n    for i in range(len(li) - 1):\n        assert li[i] < li[i + 1]\n        assert li[i] in orig\n    for n in orig:\n        assert n in li\n    return True",
    "sols": [
      "def sol(orig=[0, -10, 8]):\n    my_list = sorted(set(orig))\n    return my_list"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#34",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "UniqueSorted_8",
    "sat": "def sat(li: List[int], orig=[-8, -7, 9, 8, -3, 4, -10, -4, 3, 1, -8, 5, -10, -2, 3]):\n    \"\"\"\n    Find an increasing sequence consisting of the elements of the original list.\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 4, -2, 8, 3]\n\n    Sample Output:\n    [-2, 0, 2, 3, 4, 7, 8, 9]\n    \"\"\"\n    for i in range(len(li) - 1):\n        assert li[i] < li[i + 1]\n        assert li[i] in orig\n    for n in orig:\n        assert n in li\n    return True",
    "sols": [
      "def sol(orig=[-8, -7, 9, 8, -3, 4, -10, -4, 3, 1, -8, 5, -10, -2, 3]):\n    my_list = sorted(set(orig))\n    return my_list"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#34",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "UniqueSorted_9",
    "sat": "def sat(li: List[int], orig=[3, 8, -8, -2, -10, -3, 8]):\n    \"\"\"\n    Find an increasing sequence consisting of the elements of the original list.\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 4, -2, 8, 3]\n\n    Sample Output:\n    [-2, 0, 2, 3, 4, 7, 8, 9]\n    \"\"\"\n    for i in range(len(li) - 1):\n        assert li[i] < li[i + 1]\n        assert li[i] in orig\n    for n in orig:\n        assert n in li\n    return True",
    "sols": [
      "def sol(orig=[3, 8, -8, -2, -10, -3, 8]):\n    my_list = sorted(set(orig))\n    return my_list"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#34",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MaxInt_0",
    "sat": "def sat(m: int, hello=[1, 31, 3, 2, 0, 18, 32, -4, 2, -1000, 35, 35, 21, 18, 2, 60]):\n    \"\"\"\n    Find the largest integer in a sequence\n\n    Sample Input:\n    [8, 0, 1, 4, 9, 3, 4, -2, 8, 3]\n\n    Sample Output:\n    9\n    \"\"\"\n    return m in hello and not any(m < i for i in hello)",
    "sols": [
      "def sol(hello=[1, 31, 3, 2, 0, 18, 32, -4, 2, -1000, 35, 35, 21, 18, 2, 60]):\n    return max(hello)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#35",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MaxInt_1",
    "sat": "def sat(m: int, hello=[2, 2, 2, -4, -2, -5, -4, 0, -5, -10, 1, -1, -1, 2]):\n    \"\"\"\n    Find the largest integer in a sequence\n\n    Sample Input:\n    [8, 0, 1, 4, 9, 3, 4, -2, 8, 3]\n\n    Sample Output:\n    9\n    \"\"\"\n    return m in hello and not any(m < i for i in hello)",
    "sols": [
      "def sol(hello=[2, 2, 2, -4, -2, -5, -4, 0, -5, -10, 1, -1, -1, 2]):\n    return max(hello)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#35",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MaxInt_2",
    "sat": "def sat(m: int, hello=[8, -1, -8, 1, -10]):\n    \"\"\"\n    Find the largest integer in a sequence\n\n    Sample Input:\n    [8, 0, 1, 4, 9, 3, 4, -2, 8, 3]\n\n    Sample Output:\n    9\n    \"\"\"\n    return m in hello and not any(m < i for i in hello)",
    "sols": [
      "def sol(hello=[8, -1, -8, 1, -10]):\n    return max(hello)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#35",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MaxInt_3",
    "sat": "def sat(m: int, hello=[-8, 1, 9, 4, 4, 0, -1, 8, 2, 3, 5, 9, 2, -1, 9]):\n    \"\"\"\n    Find the largest integer in a sequence\n\n    Sample Input:\n    [8, 0, 1, 4, 9, 3, 4, -2, 8, 3]\n\n    Sample Output:\n    9\n    \"\"\"\n    return m in hello and not any(m < i for i in hello)",
    "sols": [
      "def sol(hello=[-8, 1, 9, 4, 4, 0, -1, 8, 2, 3, 5, 9, 2, -1, 9]):\n    return max(hello)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#35",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MaxInt_4",
    "sat": "def sat(m: int, hello=[5, 2, -10, -2, -4, 2, 3, -5, 9, 0]):\n    \"\"\"\n    Find the largest integer in a sequence\n\n    Sample Input:\n    [8, 0, 1, 4, 9, 3, 4, -2, 8, 3]\n\n    Sample Output:\n    9\n    \"\"\"\n    return m in hello and not any(m < i for i in hello)",
    "sols": [
      "def sol(hello=[5, 2, -10, -2, -4, 2, 3, -5, 9, 0]):\n    return max(hello)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#35",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MaxInt_5",
    "sat": "def sat(m: int, hello=[-10, -4, 0, 2, -5]):\n    \"\"\"\n    Find the largest integer in a sequence\n\n    Sample Input:\n    [8, 0, 1, 4, 9, 3, 4, -2, 8, 3]\n\n    Sample Output:\n    9\n    \"\"\"\n    return m in hello and not any(m < i for i in hello)",
    "sols": [
      "def sol(hello=[-10, -4, 0, 2, -5]):\n    return max(hello)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#35",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MaxInt_6",
    "sat": "def sat(m: int, hello=[5, 0]):\n    \"\"\"\n    Find the largest integer in a sequence\n\n    Sample Input:\n    [8, 0, 1, 4, 9, 3, 4, -2, 8, 3]\n\n    Sample Output:\n    9\n    \"\"\"\n    return m in hello and not any(m < i for i in hello)",
    "sols": [
      "def sol(hello=[5, 0]):\n    return max(hello)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#35",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MaxInt_7",
    "sat": "def sat(m: int, hello=[-5, 0, -8, 0, -7, -4, -8, -4, -10, -2, -3, 7, -9]):\n    \"\"\"\n    Find the largest integer in a sequence\n\n    Sample Input:\n    [8, 0, 1, 4, 9, 3, 4, -2, 8, 3]\n\n    Sample Output:\n    9\n    \"\"\"\n    return m in hello and not any(m < i for i in hello)",
    "sols": [
      "def sol(hello=[-5, 0, -8, 0, -7, -4, -8, -4, -10, -2, -3, 7, -9]):\n    return max(hello)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#35",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MaxInt_8",
    "sat": "def sat(m: int, hello=[2, -4, 1, 7, -8, -8, -2, 3, 1, 3, 2, -6, -3, -10, -6, -7, -9]):\n    \"\"\"\n    Find the largest integer in a sequence\n\n    Sample Input:\n    [8, 0, 1, 4, 9, 3, 4, -2, 8, 3]\n\n    Sample Output:\n    9\n    \"\"\"\n    return m in hello and not any(m < i for i in hello)",
    "sols": [
      "def sol(hello=[2, -4, 1, 7, -8, -8, -2, 3, 1, 3, 2, -6, -3, -10, -6, -7, -9]):\n    return max(hello)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#35",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MaxInt_9",
    "sat": "def sat(m: int, hello=[3, 7, 3, 0, -5, 3, -5, 8, 5, -7, -3, -8, 7, -9, -9, 3]):\n    \"\"\"\n    Find the largest integer in a sequence\n\n    Sample Input:\n    [8, 0, 1, 4, 9, 3, 4, -2, 8, 3]\n\n    Sample Output:\n    9\n    \"\"\"\n    return m in hello and not any(m < i for i in hello)",
    "sols": [
      "def sol(hello=[3, 7, 3, 0, -5, 3, -5, 8, 5, -7, -3, -8, 7, -9, -9, 3]):\n    return max(hello)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#35",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SevenElevenThirteen_0",
    "sat": "def sat(li: List[List[int]], n=19723, lower=1000):\n    \"\"\"\n    Find all 7's in integers less than n that are divisible by 11 or 13\n\n    Sample Input:\n    79, 3\n\n    Sample Output:\n    [[77, 0], [77, 1], [78, 0]]\n    \"\"\"\n    assert len({(i, j) for i, j in li}) >= lower, \"not enough 7's (ignoring duplicates)\"\n    return all(str(i)[j] == '7' and (i % 11 == 0 or i % 13 == 0) and 0 <= i < n and 0 <= j for i, j in li)",
    "sols": [
      "def sol(n=19723, lower=1000):\n    return [[i, j] for i in range(n) if (i % 11 == 0 or i % 13 == 0) for j, c in enumerate(str(i)) if c == '7']"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#36",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SevenElevenThirteen_1",
    "sat": "def sat(li: List[List[int]], n=5, lower=0):\n    \"\"\"\n    Find all 7's in integers less than n that are divisible by 11 or 13\n\n    Sample Input:\n    79, 3\n\n    Sample Output:\n    [[77, 0], [77, 1], [78, 0]]\n    \"\"\"\n    assert len({(i, j) for i, j in li}) >= lower, \"not enough 7's (ignoring duplicates)\"\n    return all(str(i)[j] == '7' and (i % 11 == 0 or i % 13 == 0) and 0 <= i < n and 0 <= j for i, j in li)",
    "sols": [
      "def sol(n=5, lower=0):\n    return [[i, j] for i in range(n) if (i % 11 == 0 or i % 13 == 0) for j, c in enumerate(str(i)) if c == '7']"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#36",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SevenElevenThirteen_2",
    "sat": "def sat(li: List[List[int]], n=8, lower=0):\n    \"\"\"\n    Find all 7's in integers less than n that are divisible by 11 or 13\n\n    Sample Input:\n    79, 3\n\n    Sample Output:\n    [[77, 0], [77, 1], [78, 0]]\n    \"\"\"\n    assert len({(i, j) for i, j in li}) >= lower, \"not enough 7's (ignoring duplicates)\"\n    return all(str(i)[j] == '7' and (i % 11 == 0 or i % 13 == 0) and 0 <= i < n and 0 <= j for i, j in li)",
    "sols": [
      "def sol(n=8, lower=0):\n    return [[i, j] for i in range(n) if (i % 11 == 0 or i % 13 == 0) for j, c in enumerate(str(i)) if c == '7']"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#36",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SevenElevenThirteen_3",
    "sat": "def sat(li: List[List[int]], n=11, lower=0):\n    \"\"\"\n    Find all 7's in integers less than n that are divisible by 11 or 13\n\n    Sample Input:\n    79, 3\n\n    Sample Output:\n    [[77, 0], [77, 1], [78, 0]]\n    \"\"\"\n    assert len({(i, j) for i, j in li}) >= lower, \"not enough 7's (ignoring duplicates)\"\n    return all(str(i)[j] == '7' and (i % 11 == 0 or i % 13 == 0) and 0 <= i < n and 0 <= j for i, j in li)",
    "sols": [
      "def sol(n=11, lower=0):\n    return [[i, j] for i in range(n) if (i % 11 == 0 or i % 13 == 0) for j, c in enumerate(str(i)) if c == '7']"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#36",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SevenElevenThirteen_4",
    "sat": "def sat(li: List[List[int]], n=19, lower=0):\n    \"\"\"\n    Find all 7's in integers less than n that are divisible by 11 or 13\n\n    Sample Input:\n    79, 3\n\n    Sample Output:\n    [[77, 0], [77, 1], [78, 0]]\n    \"\"\"\n    assert len({(i, j) for i, j in li}) >= lower, \"not enough 7's (ignoring duplicates)\"\n    return all(str(i)[j] == '7' and (i % 11 == 0 or i % 13 == 0) and 0 <= i < n and 0 <= j for i, j in li)",
    "sols": [
      "def sol(n=19, lower=0):\n    return [[i, j] for i in range(n) if (i % 11 == 0 or i % 13 == 0) for j, c in enumerate(str(i)) if c == '7']"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#36",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SevenElevenThirteen_5",
    "sat": "def sat(li: List[List[int]], n=21, lower=0):\n    \"\"\"\n    Find all 7's in integers less than n that are divisible by 11 or 13\n\n    Sample Input:\n    79, 3\n\n    Sample Output:\n    [[77, 0], [77, 1], [78, 0]]\n    \"\"\"\n    assert len({(i, j) for i, j in li}) >= lower, \"not enough 7's (ignoring duplicates)\"\n    return all(str(i)[j] == '7' and (i % 11 == 0 or i % 13 == 0) and 0 <= i < n and 0 <= j for i, j in li)",
    "sols": [
      "def sol(n=21, lower=0):\n    return [[i, j] for i in range(n) if (i % 11 == 0 or i % 13 == 0) for j, c in enumerate(str(i)) if c == '7']"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#36",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SevenElevenThirteen_6",
    "sat": "def sat(li: List[List[int]], n=29, lower=0):\n    \"\"\"\n    Find all 7's in integers less than n that are divisible by 11 or 13\n\n    Sample Input:\n    79, 3\n\n    Sample Output:\n    [[77, 0], [77, 1], [78, 0]]\n    \"\"\"\n    assert len({(i, j) for i, j in li}) >= lower, \"not enough 7's (ignoring duplicates)\"\n    return all(str(i)[j] == '7' and (i % 11 == 0 or i % 13 == 0) and 0 <= i < n and 0 <= j for i, j in li)",
    "sols": [
      "def sol(n=29, lower=0):\n    return [[i, j] for i in range(n) if (i % 11 == 0 or i % 13 == 0) for j, c in enumerate(str(i)) if c == '7']"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#36",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SevenElevenThirteen_7",
    "sat": "def sat(li: List[List[int]], n=31, lower=0):\n    \"\"\"\n    Find all 7's in integers less than n that are divisible by 11 or 13\n\n    Sample Input:\n    79, 3\n\n    Sample Output:\n    [[77, 0], [77, 1], [78, 0]]\n    \"\"\"\n    assert len({(i, j) for i, j in li}) >= lower, \"not enough 7's (ignoring duplicates)\"\n    return all(str(i)[j] == '7' and (i % 11 == 0 or i % 13 == 0) and 0 <= i < n and 0 <= j for i, j in li)",
    "sols": [
      "def sol(n=31, lower=0):\n    return [[i, j] for i in range(n) if (i % 11 == 0 or i % 13 == 0) for j, c in enumerate(str(i)) if c == '7']"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#36",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SevenElevenThirteen_8",
    "sat": "def sat(li: List[List[int]], n=42, lower=0):\n    \"\"\"\n    Find all 7's in integers less than n that are divisible by 11 or 13\n\n    Sample Input:\n    79, 3\n\n    Sample Output:\n    [[77, 0], [77, 1], [78, 0]]\n    \"\"\"\n    assert len({(i, j) for i, j in li}) >= lower, \"not enough 7's (ignoring duplicates)\"\n    return all(str(i)[j] == '7' and (i % 11 == 0 or i % 13 == 0) and 0 <= i < n and 0 <= j for i, j in li)",
    "sols": [
      "def sol(n=42, lower=0):\n    return [[i, j] for i in range(n) if (i % 11 == 0 or i % 13 == 0) for j, c in enumerate(str(i)) if c == '7']"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#36",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SevenElevenThirteen_9",
    "sat": "def sat(li: List[List[int]], n=44, lower=0):\n    \"\"\"\n    Find all 7's in integers less than n that are divisible by 11 or 13\n\n    Sample Input:\n    79, 3\n\n    Sample Output:\n    [[77, 0], [77, 1], [78, 0]]\n    \"\"\"\n    assert len({(i, j) for i, j in li}) >= lower, \"not enough 7's (ignoring duplicates)\"\n    return all(str(i)[j] == '7' and (i % 11 == 0 or i % 13 == 0) and 0 <= i < n and 0 <= j for i, j in li)",
    "sols": [
      "def sol(n=44, lower=0):\n    return [[i, j] for i in range(n) if (i % 11 == 0 or i % 13 == 0) for j, c in enumerate(str(i)) if c == '7']"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#36",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HalfSorted_0",
    "sat": "def sat(li: List[int], orig=[1, 6, 3, 41, 19, 4, 12, 3, 18, 5, -29, 0, 19521]):\n    \"\"\"\n    Start with a list of integers, keep every other element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [1, 0, 2, 2, 4, 8, 8, 8, 9, 3]\n    \"\"\"\n    return orig[1::2] == li[1::2] and li[::2] == sorted(orig[::2])",
    "sols": [
      "def sol(orig=[1, 6, 3, 41, 19, 4, 12, 3, 18, 5, -29, 0, 19521]):\n    n = len(orig)\n    odds = orig[1::2]\n    evens = sorted(orig[::2])\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        if i < len(odds):\n            ans.append(odds[i])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#37",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HalfSorted_1",
    "sat": "def sat(li: List[int], orig=[-1, -9, 7, 8, -8, 2, -7]):\n    \"\"\"\n    Start with a list of integers, keep every other element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [1, 0, 2, 2, 4, 8, 8, 8, 9, 3]\n    \"\"\"\n    return orig[1::2] == li[1::2] and li[::2] == sorted(orig[::2])",
    "sols": [
      "def sol(orig=[-1, -9, 7, 8, -8, 2, -7]):\n    n = len(orig)\n    odds = orig[1::2]\n    evens = sorted(orig[::2])\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        if i < len(odds):\n            ans.append(odds[i])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#37",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HalfSorted_2",
    "sat": "def sat(li: List[int], orig=[4, -3, -8]):\n    \"\"\"\n    Start with a list of integers, keep every other element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [1, 0, 2, 2, 4, 8, 8, 8, 9, 3]\n    \"\"\"\n    return orig[1::2] == li[1::2] and li[::2] == sorted(orig[::2])",
    "sols": [
      "def sol(orig=[4, -3, -8]):\n    n = len(orig)\n    odds = orig[1::2]\n    evens = sorted(orig[::2])\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        if i < len(odds):\n            ans.append(odds[i])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#37",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HalfSorted_3",
    "sat": "def sat(li: List[int], orig=[3, 6, -7, 1, 2, -10, 6, -8, -9, -9, 6, -7, 7, -6, 1, 4, -8, -1, 8]):\n    \"\"\"\n    Start with a list of integers, keep every other element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [1, 0, 2, 2, 4, 8, 8, 8, 9, 3]\n    \"\"\"\n    return orig[1::2] == li[1::2] and li[::2] == sorted(orig[::2])",
    "sols": [
      "def sol(orig=[3, 6, -7, 1, 2, -10, 6, -8, -9, -9, 6, -7, 7, -6, 1, 4, -8, -1, 8]):\n    n = len(orig)\n    odds = orig[1::2]\n    evens = sorted(orig[::2])\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        if i < len(odds):\n            ans.append(odds[i])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#37",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HalfSorted_4",
    "sat": "def sat(li: List[int], orig=[-7, 6, 8, 8, -3, -5, -6, -5, 6, 7, 5, 7, -9, 9, -7, 4, -8, 8, -9]):\n    \"\"\"\n    Start with a list of integers, keep every other element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [1, 0, 2, 2, 4, 8, 8, 8, 9, 3]\n    \"\"\"\n    return orig[1::2] == li[1::2] and li[::2] == sorted(orig[::2])",
    "sols": [
      "def sol(orig=[-7, 6, 8, 8, -3, -5, -6, -5, 6, 7, 5, 7, -9, 9, -7, 4, -8, 8, -9]):\n    n = len(orig)\n    odds = orig[1::2]\n    evens = sorted(orig[::2])\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        if i < len(odds):\n            ans.append(odds[i])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#37",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HalfSorted_5",
    "sat": "def sat(li: List[int], orig=[9, 4, 9, 2, 3, -3, 1, -1, -9, 9]):\n    \"\"\"\n    Start with a list of integers, keep every other element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [1, 0, 2, 2, 4, 8, 8, 8, 9, 3]\n    \"\"\"\n    return orig[1::2] == li[1::2] and li[::2] == sorted(orig[::2])",
    "sols": [
      "def sol(orig=[9, 4, 9, 2, 3, -3, 1, -1, -9, 9]):\n    n = len(orig)\n    odds = orig[1::2]\n    evens = sorted(orig[::2])\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        if i < len(odds):\n            ans.append(odds[i])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#37",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HalfSorted_6",
    "sat": "def sat(li: List[int], orig=[-6, -10, -2]):\n    \"\"\"\n    Start with a list of integers, keep every other element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [1, 0, 2, 2, 4, 8, 8, 8, 9, 3]\n    \"\"\"\n    return orig[1::2] == li[1::2] and li[::2] == sorted(orig[::2])",
    "sols": [
      "def sol(orig=[-6, -10, -2]):\n    n = len(orig)\n    odds = orig[1::2]\n    evens = sorted(orig[::2])\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        if i < len(odds):\n            ans.append(odds[i])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#37",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HalfSorted_7",
    "sat": "def sat(li: List[int], orig=[9, 8, 8, -6, 7, 5, -7, 0, 0, 1, 0]):\n    \"\"\"\n    Start with a list of integers, keep every other element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [1, 0, 2, 2, 4, 8, 8, 8, 9, 3]\n    \"\"\"\n    return orig[1::2] == li[1::2] and li[::2] == sorted(orig[::2])",
    "sols": [
      "def sol(orig=[9, 8, 8, -6, 7, 5, -7, 0, 0, 1, 0]):\n    n = len(orig)\n    odds = orig[1::2]\n    evens = sorted(orig[::2])\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        if i < len(odds):\n            ans.append(odds[i])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#37",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HalfSorted_8",
    "sat": "def sat(li: List[int], orig=[9, -9, -6, 5, 1, -3, 1, 4, -6, -5, 8, -7, 0, 7, 9, 8, 2, -2, 1]):\n    \"\"\"\n    Start with a list of integers, keep every other element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [1, 0, 2, 2, 4, 8, 8, 8, 9, 3]\n    \"\"\"\n    return orig[1::2] == li[1::2] and li[::2] == sorted(orig[::2])",
    "sols": [
      "def sol(orig=[9, -9, -6, 5, 1, -3, 1, 4, -6, -5, 8, -7, 0, 7, 9, 8, 2, -2, 1]):\n    n = len(orig)\n    odds = orig[1::2]\n    evens = sorted(orig[::2])\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        if i < len(odds):\n            ans.append(odds[i])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#37",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HalfSorted_9",
    "sat": "def sat(li: List[int], orig=[1, 5, -4, 9]):\n    \"\"\"\n    Start with a list of integers, keep every other element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [1, 0, 2, 2, 4, 8, 8, 8, 9, 3]\n    \"\"\"\n    return orig[1::2] == li[1::2] and li[::2] == sorted(orig[::2])",
    "sols": [
      "def sol(orig=[1, 5, -4, 9]):\n    n = len(orig)\n    odds = orig[1::2]\n    evens = sorted(orig[::2])\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        if i < len(odds):\n            ans.append(odds[i])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#37",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ThreeCycle_0",
    "sat": "def sat(s: str, target=\"Hello world\"):\n    \"\"\"\n    Given a target string, find a string s such that when each group of three consecutive characters is cycled\n    forward one character, you achieve the target string.\n    \"\"\"\n\n    def cycle3(trip):\n        return trip if len(trip) != 3 else trip[2] + trip[:2]\n\n    return target == \"\".join(cycle3(s[i: i + 3]) for i in range(0, len(s), 3))",
    "sols": [
      "def sol(target=\"Hello world\"):\n    def un_cycle3(trip):\n        return trip if len(trip) != 3 else trip[1:3] + trip[0]\n\n    return \"\".join(un_cycle3(target[i: i + 3]) for i in range(0, len(target), 3))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#38",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ThreeCycle_1",
    "sat": "def sat(s: str, target=\"rugetytextirocuterup\"):\n    \"\"\"\n    Given a target string, find a string s such that when each group of three consecutive characters is cycled\n    forward one character, you achieve the target string.\n    \"\"\"\n\n    def cycle3(trip):\n        return trip if len(trip) != 3 else trip[2] + trip[:2]\n\n    return target == \"\".join(cycle3(s[i: i + 3]) for i in range(0, len(s), 3))",
    "sols": [
      "def sol(target=\"rugetytextirocuterup\"):\n    def un_cycle3(trip):\n        return trip if len(trip) != 3 else trip[1:3] + trip[0]\n\n    return \"\".join(un_cycle3(target[i: i + 3]) for i in range(0, len(target), 3))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#38",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ThreeCycle_2",
    "sat": "def sat(s: str, target=\"torusajidapaficiretoh\"):\n    \"\"\"\n    Given a target string, find a string s such that when each group of three consecutive characters is cycled\n    forward one character, you achieve the target string.\n    \"\"\"\n\n    def cycle3(trip):\n        return trip if len(trip) != 3 else trip[2] + trip[:2]\n\n    return target == \"\".join(cycle3(s[i: i + 3]) for i in range(0, len(s), 3))",
    "sols": [
      "def sol(target=\"torusajidapaficiretoh\"):\n    def un_cycle3(trip):\n        return trip if len(trip) != 3 else trip[1:3] + trip[0]\n\n    return \"\".join(un_cycle3(target[i: i + 3]) for i in range(0, len(target), 3))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#38",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ThreeCycle_3",
    "sat": "def sat(s: str, target=\"quitextaf\"):\n    \"\"\"\n    Given a target string, find a string s such that when each group of three consecutive characters is cycled\n    forward one character, you achieve the target string.\n    \"\"\"\n\n    def cycle3(trip):\n        return trip if len(trip) != 3 else trip[2] + trip[:2]\n\n    return target == \"\".join(cycle3(s[i: i + 3]) for i in range(0, len(s), 3))",
    "sols": [
      "def sol(target=\"quitextaf\"):\n    def un_cycle3(trip):\n        return trip if len(trip) != 3 else trip[1:3] + trip[0]\n\n    return \"\".join(un_cycle3(target[i: i + 3]) for i in range(0, len(target), 3))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#38",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ThreeCycle_4",
    "sat": "def sat(s: str, target=\"thoqui\"):\n    \"\"\"\n    Given a target string, find a string s such that when each group of three consecutive characters is cycled\n    forward one character, you achieve the target string.\n    \"\"\"\n\n    def cycle3(trip):\n        return trip if len(trip) != 3 else trip[2] + trip[:2]\n\n    return target == \"\".join(cycle3(s[i: i + 3]) for i in range(0, len(s), 3))",
    "sols": [
      "def sol(target=\"thoqui\"):\n    def un_cycle3(trip):\n        return trip if len(trip) != 3 else trip[1:3] + trip[0]\n\n    return \"\".join(un_cycle3(target[i: i + 3]) for i in range(0, len(target), 3))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#38",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ThreeCycle_5",
    "sat": "def sat(s: str, target=\"voxahowymoxitizikexyw\"):\n    \"\"\"\n    Given a target string, find a string s such that when each group of three consecutive characters is cycled\n    forward one character, you achieve the target string.\n    \"\"\"\n\n    def cycle3(trip):\n        return trip if len(trip) != 3 else trip[2] + trip[:2]\n\n    return target == \"\".join(cycle3(s[i: i + 3]) for i in range(0, len(s), 3))",
    "sols": [
      "def sol(target=\"voxahowymoxitizikexyw\"):\n    def un_cycle3(trip):\n        return trip if len(trip) != 3 else trip[1:3] + trip[0]\n\n    return \"\".join(un_cycle3(target[i: i + 3]) for i in range(0, len(target), 3))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#38",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ThreeCycle_6",
    "sat": "def sat(s: str, target=\"fosajolehavichuchigythohatextu\"):\n    \"\"\"\n    Given a target string, find a string s such that when each group of three consecutive characters is cycled\n    forward one character, you achieve the target string.\n    \"\"\"\n\n    def cycle3(trip):\n        return trip if len(trip) != 3 else trip[2] + trip[:2]\n\n    return target == \"\".join(cycle3(s[i: i + 3]) for i in range(0, len(s), 3))",
    "sols": [
      "def sol(target=\"fosajolehavichuchigythohatextu\"):\n    def un_cycle3(trip):\n        return trip if len(trip) != 3 else trip[1:3] + trip[0]\n\n    return \"\".join(un_cycle3(target[i: i + 3]) for i in range(0, len(target), 3))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#38",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ThreeCycle_7",
    "sat": "def sat(s: str, target=\"viju\"):\n    \"\"\"\n    Given a target string, find a string s such that when each group of three consecutive characters is cycled\n    forward one character, you achieve the target string.\n    \"\"\"\n\n    def cycle3(trip):\n        return trip if len(trip) != 3 else trip[2] + trip[:2]\n\n    return target == \"\".join(cycle3(s[i: i + 3]) for i in range(0, len(s), 3))",
    "sols": [
      "def sol(target=\"viju\"):\n    def un_cycle3(trip):\n        return trip if len(trip) != 3 else trip[1:3] + trip[0]\n\n    return \"\".join(un_cycle3(target[i: i + 3]) for i in range(0, len(target), 3))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#38",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ThreeCycle_8",
    "sat": "def sat(s: str, target=\"muwexigethefuhesipa\"):\n    \"\"\"\n    Given a target string, find a string s such that when each group of three consecutive characters is cycled\n    forward one character, you achieve the target string.\n    \"\"\"\n\n    def cycle3(trip):\n        return trip if len(trip) != 3 else trip[2] + trip[:2]\n\n    return target == \"\".join(cycle3(s[i: i + 3]) for i in range(0, len(s), 3))",
    "sols": [
      "def sol(target=\"muwexigethefuhesipa\"):\n    def un_cycle3(trip):\n        return trip if len(trip) != 3 else trip[1:3] + trip[0]\n\n    return \"\".join(un_cycle3(target[i: i + 3]) for i in range(0, len(target), 3))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#38",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ThreeCycle_9",
    "sat": "def sat(s: str, target=\"guquythyratextun\"):\n    \"\"\"\n    Given a target string, find a string s such that when each group of three consecutive characters is cycled\n    forward one character, you achieve the target string.\n    \"\"\"\n\n    def cycle3(trip):\n        return trip if len(trip) != 3 else trip[2] + trip[:2]\n\n    return target == \"\".join(cycle3(s[i: i + 3]) for i in range(0, len(s), 3))",
    "sols": [
      "def sol(target=\"guquythyratextun\"):\n    def un_cycle3(trip):\n        return trip if len(trip) != 3 else trip[1:3] + trip[0]\n\n    return \"\".join(un_cycle3(target[i: i + 3]) for i in range(0, len(target), 3))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#38",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PrimeFib_0",
    "sat": "def sat(n: int, lower=123456):\n    \"\"\"\n    Find a prime Fibonacci number bigger than a certain threshold, using Ira Gessel's test for Fibonacci numbers.\n    \"\"\"\n    assert any((i ** 0.5).is_integer() for i in [5 * n * n - 4, 5 * n * n + 4]), \"n must be a Fibonacci number\"\n    assert all(n % i for i in range(2, int(n ** 0.5) + 1)), \"n must be prime\"\n    return n > lower",
    "sols": [
      "def sol(lower=123456):\n    m, n = 2, 3\n    while True:\n        m, n = n, (m + n)\n        if n > lower and all(n % i for i in range(2, int(n ** 0.5) + 1)):\n            return n"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#39\n\nIra Gessel observed that n is a Fibonacci number if and if either 5 n^2 - 4 or 5 n^2 + 4 is a perfect square",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PrimeFib_1",
    "sat": "def sat(n: int, lower=3):\n    \"\"\"\n    Find a prime Fibonacci number bigger than a certain threshold, using Ira Gessel's test for Fibonacci numbers.\n    \"\"\"\n    assert any((i ** 0.5).is_integer() for i in [5 * n * n - 4, 5 * n * n + 4]), \"n must be a Fibonacci number\"\n    assert all(n % i for i in range(2, int(n ** 0.5) + 1)), \"n must be prime\"\n    return n > lower",
    "sols": [
      "def sol(lower=3):\n    m, n = 2, 3\n    while True:\n        m, n = n, (m + n)\n        if n > lower and all(n % i for i in range(2, int(n ** 0.5) + 1)):\n            return n"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#39\n\nIra Gessel observed that n is a Fibonacci number if and if either 5 n^2 - 4 or 5 n^2 + 4 is a perfect square",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PrimeFib_2",
    "sat": "def sat(n: int, lower=458):\n    \"\"\"\n    Find a prime Fibonacci number bigger than a certain threshold, using Ira Gessel's test for Fibonacci numbers.\n    \"\"\"\n    assert any((i ** 0.5).is_integer() for i in [5 * n * n - 4, 5 * n * n + 4]), \"n must be a Fibonacci number\"\n    assert all(n % i for i in range(2, int(n ** 0.5) + 1)), \"n must be prime\"\n    return n > lower",
    "sols": [
      "def sol(lower=458):\n    m, n = 2, 3\n    while True:\n        m, n = n, (m + n)\n        if n > lower and all(n % i for i in range(2, int(n ** 0.5) + 1)):\n            return n"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#39\n\nIra Gessel observed that n is a Fibonacci number if and if either 5 n^2 - 4 or 5 n^2 + 4 is a perfect square",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PrimeFib_3",
    "sat": "def sat(n: int, lower=384):\n    \"\"\"\n    Find a prime Fibonacci number bigger than a certain threshold, using Ira Gessel's test for Fibonacci numbers.\n    \"\"\"\n    assert any((i ** 0.5).is_integer() for i in [5 * n * n - 4, 5 * n * n + 4]), \"n must be a Fibonacci number\"\n    assert all(n % i for i in range(2, int(n ** 0.5) + 1)), \"n must be prime\"\n    return n > lower",
    "sols": [
      "def sol(lower=384):\n    m, n = 2, 3\n    while True:\n        m, n = n, (m + n)\n        if n > lower and all(n % i for i in range(2, int(n ** 0.5) + 1)):\n            return n"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#39\n\nIra Gessel observed that n is a Fibonacci number if and if either 5 n^2 - 4 or 5 n^2 + 4 is a perfect square",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PrimeFib_4",
    "sat": "def sat(n: int, lower=4):\n    \"\"\"\n    Find a prime Fibonacci number bigger than a certain threshold, using Ira Gessel's test for Fibonacci numbers.\n    \"\"\"\n    assert any((i ** 0.5).is_integer() for i in [5 * n * n - 4, 5 * n * n + 4]), \"n must be a Fibonacci number\"\n    assert all(n % i for i in range(2, int(n ** 0.5) + 1)), \"n must be prime\"\n    return n > lower",
    "sols": [
      "def sol(lower=4):\n    m, n = 2, 3\n    while True:\n        m, n = n, (m + n)\n        if n > lower and all(n % i for i in range(2, int(n ** 0.5) + 1)):\n            return n"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#39\n\nIra Gessel observed that n is a Fibonacci number if and if either 5 n^2 - 4 or 5 n^2 + 4 is a perfect square",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PrimeFib_5",
    "sat": "def sat(n: int, lower=1781):\n    \"\"\"\n    Find a prime Fibonacci number bigger than a certain threshold, using Ira Gessel's test for Fibonacci numbers.\n    \"\"\"\n    assert any((i ** 0.5).is_integer() for i in [5 * n * n - 4, 5 * n * n + 4]), \"n must be a Fibonacci number\"\n    assert all(n % i for i in range(2, int(n ** 0.5) + 1)), \"n must be prime\"\n    return n > lower",
    "sols": [
      "def sol(lower=1781):\n    m, n = 2, 3\n    while True:\n        m, n = n, (m + n)\n        if n > lower and all(n % i for i in range(2, int(n ** 0.5) + 1)):\n            return n"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#39\n\nIra Gessel observed that n is a Fibonacci number if and if either 5 n^2 - 4 or 5 n^2 + 4 is a perfect square",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PrimeFib_6",
    "sat": "def sat(n: int, lower=346):\n    \"\"\"\n    Find a prime Fibonacci number bigger than a certain threshold, using Ira Gessel's test for Fibonacci numbers.\n    \"\"\"\n    assert any((i ** 0.5).is_integer() for i in [5 * n * n - 4, 5 * n * n + 4]), \"n must be a Fibonacci number\"\n    assert all(n % i for i in range(2, int(n ** 0.5) + 1)), \"n must be prime\"\n    return n > lower",
    "sols": [
      "def sol(lower=346):\n    m, n = 2, 3\n    while True:\n        m, n = n, (m + n)\n        if n > lower and all(n % i for i in range(2, int(n ** 0.5) + 1)):\n            return n"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#39\n\nIra Gessel observed that n is a Fibonacci number if and if either 5 n^2 - 4 or 5 n^2 + 4 is a perfect square",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PrimeFib_7",
    "sat": "def sat(n: int, lower=14):\n    \"\"\"\n    Find a prime Fibonacci number bigger than a certain threshold, using Ira Gessel's test for Fibonacci numbers.\n    \"\"\"\n    assert any((i ** 0.5).is_integer() for i in [5 * n * n - 4, 5 * n * n + 4]), \"n must be a Fibonacci number\"\n    assert all(n % i for i in range(2, int(n ** 0.5) + 1)), \"n must be prime\"\n    return n > lower",
    "sols": [
      "def sol(lower=14):\n    m, n = 2, 3\n    while True:\n        m, n = n, (m + n)\n        if n > lower and all(n % i for i in range(2, int(n ** 0.5) + 1)):\n            return n"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#39\n\nIra Gessel observed that n is a Fibonacci number if and if either 5 n^2 - 4 or 5 n^2 + 4 is a perfect square",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PrimeFib_8",
    "sat": "def sat(n: int, lower=2802):\n    \"\"\"\n    Find a prime Fibonacci number bigger than a certain threshold, using Ira Gessel's test for Fibonacci numbers.\n    \"\"\"\n    assert any((i ** 0.5).is_integer() for i in [5 * n * n - 4, 5 * n * n + 4]), \"n must be a Fibonacci number\"\n    assert all(n % i for i in range(2, int(n ** 0.5) + 1)), \"n must be prime\"\n    return n > lower",
    "sols": [
      "def sol(lower=2802):\n    m, n = 2, 3\n    while True:\n        m, n = n, (m + n)\n        if n > lower and all(n % i for i in range(2, int(n ** 0.5) + 1)):\n            return n"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#39\n\nIra Gessel observed that n is a Fibonacci number if and if either 5 n^2 - 4 or 5 n^2 + 4 is a perfect square",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PrimeFib_9",
    "sat": "def sat(n: int, lower=224):\n    \"\"\"\n    Find a prime Fibonacci number bigger than a certain threshold, using Ira Gessel's test for Fibonacci numbers.\n    \"\"\"\n    assert any((i ** 0.5).is_integer() for i in [5 * n * n - 4, 5 * n * n + 4]), \"n must be a Fibonacci number\"\n    assert all(n % i for i in range(2, int(n ** 0.5) + 1)), \"n must be prime\"\n    return n > lower",
    "sols": [
      "def sol(lower=224):\n    m, n = 2, 3\n    while True:\n        m, n = n, (m + n)\n        if n > lower and all(n % i for i in range(2, int(n ** 0.5) + 1)):\n            return n"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#39\n\nIra Gessel observed that n is a Fibonacci number if and if either 5 n^2 - 4 or 5 n^2 + 4 is a perfect square",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TripleZeroSum_0",
    "sat": "def sat(inds: List[int], nums=[12, -10452, 18242, 10440]):\n    \"\"\"\n    Find the indices of three numbers that sum to 0 in a list.\n    \"\"\"\n    return len(inds) == 3 and sum(nums[i] for i in inds) == 0 and min(inds) >= 0",
    "sols": [
      "def sol(nums=[12, -10452, 18242, 10440]):\n    assert len(nums) == 4\n    n = sum(nums)\n    for i in range(4):\n        if nums[i] == n:\n            return [j for j in range(4) if j != i]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#40",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TripleZeroSum_1",
    "sat": "def sat(inds: List[int], nums=[72, -169, -65, 97]):\n    \"\"\"\n    Find the indices of three numbers that sum to 0 in a list.\n    \"\"\"\n    return len(inds) == 3 and sum(nums[i] for i in inds) == 0 and min(inds) >= 0",
    "sols": [
      "def sol(nums=[72, -169, -65, 97]):\n    assert len(nums) == 4\n    n = sum(nums)\n    for i in range(4):\n        if nums[i] == n:\n            return [j for j in range(4) if j != i]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#40",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TripleZeroSum_2",
    "sat": "def sat(inds: List[int], nums=[3, 63, 66, -69]):\n    \"\"\"\n    Find the indices of three numbers that sum to 0 in a list.\n    \"\"\"\n    return len(inds) == 3 and sum(nums[i] for i in inds) == 0 and min(inds) >= 0",
    "sols": [
      "def sol(nums=[3, 63, 66, -69]):\n    assert len(nums) == 4\n    n = sum(nums)\n    for i in range(4):\n        if nums[i] == n:\n            return [j for j in range(4) if j != i]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#40",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TripleZeroSum_3",
    "sat": "def sat(inds: List[int], nums=[-34, -34, 68, 12]):\n    \"\"\"\n    Find the indices of three numbers that sum to 0 in a list.\n    \"\"\"\n    return len(inds) == 3 and sum(nums[i] for i in inds) == 0 and min(inds) >= 0",
    "sols": [
      "def sol(nums=[-34, -34, 68, 12]):\n    assert len(nums) == 4\n    n = sum(nums)\n    for i in range(4):\n        if nums[i] == n:\n            return [j for j in range(4) if j != i]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#40",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TripleZeroSum_4",
    "sat": "def sat(inds: List[int], nums=[71, -74, -57, -14]):\n    \"\"\"\n    Find the indices of three numbers that sum to 0 in a list.\n    \"\"\"\n    return len(inds) == 3 and sum(nums[i] for i in inds) == 0 and min(inds) >= 0",
    "sols": [
      "def sol(nums=[71, -74, -57, -14]):\n    assert len(nums) == 4\n    n = sum(nums)\n    for i in range(4):\n        if nums[i] == n:\n            return [j for j in range(4) if j != i]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#40",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TripleZeroSum_5",
    "sat": "def sat(inds: List[int], nums=[17, -57, -54, 40]):\n    \"\"\"\n    Find the indices of three numbers that sum to 0 in a list.\n    \"\"\"\n    return len(inds) == 3 and sum(nums[i] for i in inds) == 0 and min(inds) >= 0",
    "sols": [
      "def sol(nums=[17, -57, -54, 40]):\n    assert len(nums) == 4\n    n = sum(nums)\n    for i in range(4):\n        if nums[i] == n:\n            return [j for j in range(4) if j != i]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#40",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TripleZeroSum_6",
    "sat": "def sat(inds: List[int], nums=[-51, 61, -72, 123]):\n    \"\"\"\n    Find the indices of three numbers that sum to 0 in a list.\n    \"\"\"\n    return len(inds) == 3 and sum(nums[i] for i in inds) == 0 and min(inds) >= 0",
    "sols": [
      "def sol(nums=[-51, 61, -72, 123]):\n    assert len(nums) == 4\n    n = sum(nums)\n    for i in range(4):\n        if nums[i] == n:\n            return [j for j in range(4) if j != i]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#40",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TripleZeroSum_7",
    "sat": "def sat(inds: List[int], nums=[20, 21, -62, 42]):\n    \"\"\"\n    Find the indices of three numbers that sum to 0 in a list.\n    \"\"\"\n    return len(inds) == 3 and sum(nums[i] for i in inds) == 0 and min(inds) >= 0",
    "sols": [
      "def sol(nums=[20, 21, -62, 42]):\n    assert len(nums) == 4\n    n = sum(nums)\n    for i in range(4):\n        if nums[i] == n:\n            return [j for j in range(4) if j != i]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#40",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TripleZeroSum_8",
    "sat": "def sat(inds: List[int], nums=[-18, 88, 1, 17]):\n    \"\"\"\n    Find the indices of three numbers that sum to 0 in a list.\n    \"\"\"\n    return len(inds) == 3 and sum(nums[i] for i in inds) == 0 and min(inds) >= 0",
    "sols": [
      "def sol(nums=[-18, 88, 1, 17]):\n    assert len(nums) == 4\n    n = sum(nums)\n    for i in range(4):\n        if nums[i] == n:\n            return [j for j in range(4) if j != i]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#40",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TripleZeroSum_9",
    "sat": "def sat(inds: List[int], nums=[65, -85, 20, 54]):\n    \"\"\"\n    Find the indices of three numbers that sum to 0 in a list.\n    \"\"\"\n    return len(inds) == 3 and sum(nums[i] for i in inds) == 0 and min(inds) >= 0",
    "sols": [
      "def sol(nums=[65, -85, 20, 54]):\n    assert len(nums) == 4\n    n = sum(nums)\n    for i in range(4):\n        if nums[i] == n:\n            return [j for j in range(4) if j != i]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#40",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NumPasses_0",
    "sat": "def sat(count: int, n=981):\n    \"\"\"\n    Given n cars traveling East and n cars traveling West on a road, how many passings will there be?\n    A passing is when one car passes another. The East-bound cars all begin further West than the West-bound cars.\n    \"\"\"\n    for i in range(n):\n        for j in range(n):\n            count -= 1\n    return count == 0",
    "sols": [
      "def sol(n=981):\n    return n ** 2"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#41",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NumPasses_1",
    "sat": "def sat(count: int, n=123):\n    \"\"\"\n    Given n cars traveling East and n cars traveling West on a road, how many passings will there be?\n    A passing is when one car passes another. The East-bound cars all begin further West than the West-bound cars.\n    \"\"\"\n    for i in range(n):\n        for j in range(n):\n            count -= 1\n    return count == 0",
    "sols": [
      "def sol(n=123):\n    return n ** 2"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#41",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NumPasses_2",
    "sat": "def sat(count: int, n=239):\n    \"\"\"\n    Given n cars traveling East and n cars traveling West on a road, how many passings will there be?\n    A passing is when one car passes another. The East-bound cars all begin further West than the West-bound cars.\n    \"\"\"\n    for i in range(n):\n        for j in range(n):\n            count -= 1\n    return count == 0",
    "sols": [
      "def sol(n=239):\n    return n ** 2"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#41",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NumPasses_3",
    "sat": "def sat(count: int, n=378):\n    \"\"\"\n    Given n cars traveling East and n cars traveling West on a road, how many passings will there be?\n    A passing is when one car passes another. The East-bound cars all begin further West than the West-bound cars.\n    \"\"\"\n    for i in range(n):\n        for j in range(n):\n            count -= 1\n    return count == 0",
    "sols": [
      "def sol(n=378):\n    return n ** 2"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#41",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NumPasses_4",
    "sat": "def sat(count: int, n=501):\n    \"\"\"\n    Given n cars traveling East and n cars traveling West on a road, how many passings will there be?\n    A passing is when one car passes another. The East-bound cars all begin further West than the West-bound cars.\n    \"\"\"\n    for i in range(n):\n        for j in range(n):\n            count -= 1\n    return count == 0",
    "sols": [
      "def sol(n=501):\n    return n ** 2"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#41",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NumPasses_5",
    "sat": "def sat(count: int, n=948):\n    \"\"\"\n    Given n cars traveling East and n cars traveling West on a road, how many passings will there be?\n    A passing is when one car passes another. The East-bound cars all begin further West than the West-bound cars.\n    \"\"\"\n    for i in range(n):\n        for j in range(n):\n            count -= 1\n    return count == 0",
    "sols": [
      "def sol(n=948):\n    return n ** 2"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#41",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NumPasses_6",
    "sat": "def sat(count: int, n=118):\n    \"\"\"\n    Given n cars traveling East and n cars traveling West on a road, how many passings will there be?\n    A passing is when one car passes another. The East-bound cars all begin further West than the West-bound cars.\n    \"\"\"\n    for i in range(n):\n        for j in range(n):\n            count -= 1\n    return count == 0",
    "sols": [
      "def sol(n=118):\n    return n ** 2"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#41",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NumPasses_7",
    "sat": "def sat(count: int, n=915):\n    \"\"\"\n    Given n cars traveling East and n cars traveling West on a road, how many passings will there be?\n    A passing is when one car passes another. The East-bound cars all begin further West than the West-bound cars.\n    \"\"\"\n    for i in range(n):\n        for j in range(n):\n            count -= 1\n    return count == 0",
    "sols": [
      "def sol(n=915):\n    return n ** 2"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#41",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NumPasses_8",
    "sat": "def sat(count: int, n=141):\n    \"\"\"\n    Given n cars traveling East and n cars traveling West on a road, how many passings will there be?\n    A passing is when one car passes another. The East-bound cars all begin further West than the West-bound cars.\n    \"\"\"\n    for i in range(n):\n        for j in range(n):\n            count -= 1\n    return count == 0",
    "sols": [
      "def sol(n=141):\n    return n ** 2"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#41",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NumPasses_9",
    "sat": "def sat(count: int, n=687):\n    \"\"\"\n    Given n cars traveling East and n cars traveling West on a road, how many passings will there be?\n    A passing is when one car passes another. The East-bound cars all begin further West than the West-bound cars.\n    \"\"\"\n    for i in range(n):\n        for j in range(n):\n            count -= 1\n    return count == 0",
    "sols": [
      "def sol(n=687):\n    return n ** 2"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#41",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ListInc_0",
    "sat": "def sat(new_list: List[int], old_list=[321, 12, 532, 129, 9, -12, 4, 56, 90, 0]):\n    \"\"\"\n    Decrement each element of new_list by 1 and check that it's old_list\n    \"\"\"\n    return [i - 1 for i in new_list] == old_list",
    "sols": [
      "def sol(old_list=[321, 12, 532, 129, 9, -12, 4, 56, 90, 0]):\n    return [i + 1 for i in old_list]"
    ],
    "module": "human_eval",
    "notes": "Increment each element of a list by 1\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#42",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ListInc_1",
    "sat": "def sat(new_list: List[int], old_list=[18, 29, 40]):\n    \"\"\"\n    Decrement each element of new_list by 1 and check that it's old_list\n    \"\"\"\n    return [i - 1 for i in new_list] == old_list",
    "sols": [
      "def sol(old_list=[18, 29, 40]):\n    return [i + 1 for i in old_list]"
    ],
    "module": "human_eval",
    "notes": "Increment each element of a list by 1\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#42",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ListInc_2",
    "sat": "def sat(new_list: List[int], old_list=[43, 64, 73, 30, 47]):\n    \"\"\"\n    Decrement each element of new_list by 1 and check that it's old_list\n    \"\"\"\n    return [i - 1 for i in new_list] == old_list",
    "sols": [
      "def sol(old_list=[43, 64, 73, 30, 47]):\n    return [i + 1 for i in old_list]"
    ],
    "module": "human_eval",
    "notes": "Increment each element of a list by 1\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#42",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ListInc_3",
    "sat": "def sat(new_list: List[int], old_list=[43, 9, 49, 93, 36, 47, 48, 38, 12]):\n    \"\"\"\n    Decrement each element of new_list by 1 and check that it's old_list\n    \"\"\"\n    return [i - 1 for i in new_list] == old_list",
    "sols": [
      "def sol(old_list=[43, 9, 49, 93, 36, 47, 48, 38, 12]):\n    return [i + 1 for i in old_list]"
    ],
    "module": "human_eval",
    "notes": "Increment each element of a list by 1\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#42",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ListInc_4",
    "sat": "def sat(new_list: List[int], old_list=[45, 55, 71, 78, 54]):\n    \"\"\"\n    Decrement each element of new_list by 1 and check that it's old_list\n    \"\"\"\n    return [i - 1 for i in new_list] == old_list",
    "sols": [
      "def sol(old_list=[45, 55, 71, 78, 54]):\n    return [i + 1 for i in old_list]"
    ],
    "module": "human_eval",
    "notes": "Increment each element of a list by 1\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#42",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ListInc_5",
    "sat": "def sat(new_list: List[int], old_list=[36, 88, 17, 62, 5, 81, 22, 0, 36]):\n    \"\"\"\n    Decrement each element of new_list by 1 and check that it's old_list\n    \"\"\"\n    return [i - 1 for i in new_list] == old_list",
    "sols": [
      "def sol(old_list=[36, 88, 17, 62, 5, 81, 22, 0, 36]):\n    return [i + 1 for i in old_list]"
    ],
    "module": "human_eval",
    "notes": "Increment each element of a list by 1\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#42",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ListInc_6",
    "sat": "def sat(new_list: List[int], old_list=[50, 46, 40]):\n    \"\"\"\n    Decrement each element of new_list by 1 and check that it's old_list\n    \"\"\"\n    return [i - 1 for i in new_list] == old_list",
    "sols": [
      "def sol(old_list=[50, 46, 40]):\n    return [i + 1 for i in old_list]"
    ],
    "module": "human_eval",
    "notes": "Increment each element of a list by 1\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#42",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ListInc_7",
    "sat": "def sat(new_list: List[int], old_list=[50, 21, 18, 15]):\n    \"\"\"\n    Decrement each element of new_list by 1 and check that it's old_list\n    \"\"\"\n    return [i - 1 for i in new_list] == old_list",
    "sols": [
      "def sol(old_list=[50, 21, 18, 15]):\n    return [i + 1 for i in old_list]"
    ],
    "module": "human_eval",
    "notes": "Increment each element of a list by 1\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#42",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ListInc_8",
    "sat": "def sat(new_list: List[int], old_list=[23, 45]):\n    \"\"\"\n    Decrement each element of new_list by 1 and check that it's old_list\n    \"\"\"\n    return [i - 1 for i in new_list] == old_list",
    "sols": [
      "def sol(old_list=[23, 45]):\n    return [i + 1 for i in old_list]"
    ],
    "module": "human_eval",
    "notes": "Increment each element of a list by 1\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#42",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ListInc_9",
    "sat": "def sat(new_list: List[int], old_list=[95, 46, 45, 42]):\n    \"\"\"\n    Decrement each element of new_list by 1 and check that it's old_list\n    \"\"\"\n    return [i - 1 for i in new_list] == old_list",
    "sols": [
      "def sol(old_list=[95, 46, 45, 42]):\n    return [i + 1 for i in old_list]"
    ],
    "module": "human_eval",
    "notes": "Increment each element of a list by 1\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#42",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PairZeroSum_0",
    "sat": "def sat(inds: List[int], nums=[12, -10452, 18242, 10440, 81, 241, 525, -18242, 91, 20]):\n    \"\"\"\n    Find the indices of two numbers that sum to 0 in a list.\n    \"\"\"\n    a, b = inds\n    return nums[a] + nums[b] == 0",
    "sols": [
      "def sol(nums=[12, -10452, 18242, 10440, 81, 241, 525, -18242, 91, 20]):\n    s = set(nums)\n    for i in s:\n        if -i in s:\n            return [nums.index(i), nums.index(-i)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#43",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PairZeroSum_1",
    "sat": "def sat(inds: List[int], nums=[50, 33, 12, -13, 65, -39, -12, -72, -61, -38, -58, -88, 70, -82, -80, 27, 68, 89, -57, 15, -33, 93, 57, -91, 60, -72, -19, -12, 70, -35, 53, -21, -19, 66, 58, 76, -92, 64, 52, -21, 29, -61, -10, 50, -88, 17, 0, -50, 52, -87, 9, -95, 59, 23, 69, -34, 73, -39, 15, 17, 37, -83, -31, 13, -33, 6, -27, -45, -15, -78, 74, 92, 56, -52, 44, -9, -22, 27, -94, -17, 5, -82, -40, 22, -91, 10, 57, 13, -41, -93, -40, -42, 28, -3, 82]):\n    \"\"\"\n    Find the indices of two numbers that sum to 0 in a list.\n    \"\"\"\n    a, b = inds\n    return nums[a] + nums[b] == 0",
    "sols": [
      "def sol(nums=[50, 33, 12, -13, 65, -39, -12, -72, -61, -38, -58, -88, 70, -82, -80, 27, 68, 89, -57, 15, -33, 93, 57, -91, 60, -72, -19, -12, 70, -35, 53, -21, -19, 66, 58, 76, -92, 64, 52, -21, 29, -61, -10, 50, -88, 17, 0, -50, 52, -87, 9, -95, 59, 23, 69, -34, 73, -39, 15, 17, 37, -83, -31, 13, -33, 6, -27, -45, -15, -78, 74, 92, 56, -52, 44, -9, -22, 27, -94, -17, 5, -82, -40, 22, -91, 10, 57, 13, -41, -93, -40, -42, 28, -3, 82]):\n    s = set(nums)\n    for i in s:\n        if -i in s:\n            return [nums.index(i), nums.index(-i)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#43",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PairZeroSum_2",
    "sat": "def sat(inds: List[int], nums=[18, -81, 7, -48, -14, 88, -34, 29, 72, 16, 38, -29, 53, -52, 16, 31, 65, 1, -77, 24, -73, 8, 78, -13, -96, 29, -3, 45, -44, 98, 9, -89, -50, 46, -88, 89, -93, 98, -83, -3, -17, 72, 25, 18, 88, -32, -37, -26, 69, -39, 62, 64, 41, 58, 29, 33, -65, -13, 61, 41, -90, -79, -94, -81, 40, 46, -78, -13, -44, 9, 42, -90, 94, -19, 5, -33, 33, -60, 80, -40, -64, 19, -92, 62, -12, -58, 89, -50, -82, -32, 65, 82, -49, 80, -71, 68, -17, 26, 6, -61]):\n    \"\"\"\n    Find the indices of two numbers that sum to 0 in a list.\n    \"\"\"\n    a, b = inds\n    return nums[a] + nums[b] == 0",
    "sols": [
      "def sol(nums=[18, -81, 7, -48, -14, 88, -34, 29, 72, 16, 38, -29, 53, -52, 16, 31, 65, 1, -77, 24, -73, 8, 78, -13, -96, 29, -3, 45, -44, 98, 9, -89, -50, 46, -88, 89, -93, 98, -83, -3, -17, 72, 25, 18, 88, -32, -37, -26, 69, -39, 62, 64, 41, 58, 29, 33, -65, -13, 61, 41, -90, -79, -94, -81, 40, 46, -78, -13, -44, 9, 42, -90, 94, -19, 5, -33, 33, -60, 80, -40, -64, 19, -92, 62, -12, -58, 89, -50, -82, -32, 65, 82, -49, 80, -71, 68, -17, 26, 6, -61]):\n    s = set(nums)\n    for i in s:\n        if -i in s:\n            return [nums.index(i), nums.index(-i)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#43",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PairZeroSum_3",
    "sat": "def sat(inds: List[int], nums=[61, 13, 32, -67, -29, 6, 65, 82, -36, -90, -3, -53, -80, 52, -20, 14, -58, 1, 14, 88, 90, -76, -83, 47, -20, -26, 5, 71, 29, -51, -6, 38, -42, -48, 9, -74, -37, -86, -31, -63, -45, -74, -40, 23, -16, 24, -6, -93, -46, -42, -4, -85, -91, 71, -72, 11, -33, 33, -82, -67, -34, -60, 89, 60, 26, -12, -92, 42, -92, -58, -37, 9, -38, 54, 34, 25, 85, -65, -79, 33, -52, -72, -80, -76, -39, 24, -2, 40, -53, -14, 8, 21, 7, 46, -88, -67]):\n    \"\"\"\n    Find the indices of two numbers that sum to 0 in a list.\n    \"\"\"\n    a, b = inds\n    return nums[a] + nums[b] == 0",
    "sols": [
      "def sol(nums=[61, 13, 32, -67, -29, 6, 65, 82, -36, -90, -3, -53, -80, 52, -20, 14, -58, 1, 14, 88, 90, -76, -83, 47, -20, -26, 5, 71, 29, -51, -6, 38, -42, -48, 9, -74, -37, -86, -31, -63, -45, -74, -40, 23, -16, 24, -6, -93, -46, -42, -4, -85, -91, 71, -72, 11, -33, 33, -82, -67, -34, -60, 89, 60, 26, -12, -92, 42, -92, -58, -37, 9, -38, 54, 34, 25, 85, -65, -79, 33, -52, -72, -80, -76, -39, 24, -2, 40, -53, -14, 8, 21, 7, 46, -88, -67]):\n    s = set(nums)\n    for i in s:\n        if -i in s:\n            return [nums.index(i), nums.index(-i)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#43",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PairZeroSum_4",
    "sat": "def sat(inds: List[int], nums=[4, -4, -4, -3, 3, 1]):\n    \"\"\"\n    Find the indices of two numbers that sum to 0 in a list.\n    \"\"\"\n    a, b = inds\n    return nums[a] + nums[b] == 0",
    "sols": [
      "def sol(nums=[4, -4, -4, -3, 3, 1]):\n    s = set(nums)\n    for i in s:\n        if -i in s:\n            return [nums.index(i), nums.index(-i)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#43",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PairZeroSum_5",
    "sat": "def sat(inds: List[int], nums=[49, -15, -56, -2, -48, 27, -22, -20, 62, -43, 64, 9, -5, 0, -64, -44, -64, -56, -28, 18, 0, 64, -11, 42, -62, -2, -35, -41, 0, -20, 30, 16, -57, 38, -46, 23, 46, -49, 40, -16, 33, 62, -66, 58, 36, 39, -20, -41, 62, -5, 22, -51, -14, 7, 37, 7, 55, 10, 38, -25, -28, -28, 63, -21, 36, -48]):\n    \"\"\"\n    Find the indices of two numbers that sum to 0 in a list.\n    \"\"\"\n    a, b = inds\n    return nums[a] + nums[b] == 0",
    "sols": [
      "def sol(nums=[49, -15, -56, -2, -48, 27, -22, -20, 62, -43, 64, 9, -5, 0, -64, -44, -64, -56, -28, 18, 0, 64, -11, 42, -62, -2, -35, -41, 0, -20, 30, 16, -57, 38, -46, 23, 46, -49, 40, -16, 33, 62, -66, 58, 36, 39, -20, -41, 62, -5, 22, -51, -14, 7, 37, 7, 55, 10, 38, -25, -28, -28, 63, -21, 36, -48]):\n    s = set(nums)\n    for i in s:\n        if -i in s:\n            return [nums.index(i), nums.index(-i)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#43",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PairZeroSum_6",
    "sat": "def sat(inds: List[int], nums=[13, 42, -1, 17, -39, 1, -1, 29, -54, -36, 21, -58, 18, 53, -31, 27, -52, 15, 22, -48, 6, 10, -18, -51, 15, 4, 62, 37, -34, -11, 13, 41, -56, 48, 65, -39, 30, 54, -50, 18, 41, 63, 34, -35, 47, -44, -56, -29, -9, 29, -31, 12, 36, 30, 22, -32, 59, 11, -18, 29, 10, -20, 49, 27, 17, 31, 36]):\n    \"\"\"\n    Find the indices of two numbers that sum to 0 in a list.\n    \"\"\"\n    a, b = inds\n    return nums[a] + nums[b] == 0",
    "sols": [
      "def sol(nums=[13, 42, -1, 17, -39, 1, -1, 29, -54, -36, 21, -58, 18, 53, -31, 27, -52, 15, 22, -48, 6, 10, -18, -51, 15, 4, 62, 37, -34, -11, 13, 41, -56, 48, 65, -39, 30, 54, -50, 18, 41, 63, 34, -35, 47, -44, -56, -29, -9, 29, -31, 12, 36, 30, 22, -32, 59, 11, -18, 29, 10, -20, 49, 27, 17, 31, 36]):\n    s = set(nums)\n    for i in s:\n        if -i in s:\n            return [nums.index(i), nums.index(-i)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#43",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PairZeroSum_7",
    "sat": "def sat(inds: List[int], nums=[3, -1, -3, 3, 1, 2]):\n    \"\"\"\n    Find the indices of two numbers that sum to 0 in a list.\n    \"\"\"\n    a, b = inds\n    return nums[a] + nums[b] == 0",
    "sols": [
      "def sol(nums=[3, -1, -3, 3, 1, 2]):\n    s = set(nums)\n    for i in s:\n        if -i in s:\n            return [nums.index(i), nums.index(-i)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#43",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PairZeroSum_8",
    "sat": "def sat(inds: List[int], nums=[-15, -25, 7, 30, -19, 14, 4, -18, 9, 15, -23, -6, -24, 33, -7, -1, -30, -30, 16, 2, 22, -17, 9, 4, 32, 20, 22, 26, -33, -18, -28, -30, 0, 5]):\n    \"\"\"\n    Find the indices of two numbers that sum to 0 in a list.\n    \"\"\"\n    a, b = inds\n    return nums[a] + nums[b] == 0",
    "sols": [
      "def sol(nums=[-15, -25, 7, 30, -19, 14, 4, -18, 9, 15, -23, -6, -24, 33, -7, -1, -30, -30, 16, 2, 22, -17, 9, 4, 32, 20, 22, 26, -33, -18, -28, -30, 0, 5]):\n    s = set(nums)\n    for i in s:\n        if -i in s:\n            return [nums.index(i), nums.index(-i)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#43",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "PairZeroSum_9",
    "sat": "def sat(inds: List[int], nums=[-17, -64, -34, 66, -44, -70, -15, 6, -20, -65, -66, 40, -2, -54, -37, 0, -58, -32, -51, 16, -52, -39, 53, 34, -54, -67, -26, 53, 13, 53, -63, -45, 30, -67, 39, 62, 38, 10, -26, 48, 36, 59, -50, 15, -36, -29, -25, 46, 1, -36, -54, 43, -22, -50, 33, -67, -35, 28, -65, -4, 20, -22, 52, 36, 48, -67, 61, -63, 29, 19, 48]):\n    \"\"\"\n    Find the indices of two numbers that sum to 0 in a list.\n    \"\"\"\n    a, b = inds\n    return nums[a] + nums[b] == 0",
    "sols": [
      "def sol(nums=[-17, -64, -34, 66, -44, -70, -15, 6, -20, -65, -66, 40, -2, -54, -37, 0, -58, -32, -51, 16, -52, -39, 53, 34, -54, -67, -26, 53, 13, 53, -63, -45, 30, -67, 39, 62, 38, 10, -26, 48, 36, 59, -50, 15, -36, -29, -25, 46, 1, -36, -54, 43, -22, -50, 33, -67, -35, 28, -65, -4, 20, -22, 52, 36, 48, -67, 61, -63, 29, 19, 48]):\n    s = set(nums)\n    for i in s:\n        if -i in s:\n            return [nums.index(i), nums.index(-i)]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#43",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ChangeBase_0",
    "sat": "def sat(s: str, n=142, base=7):\n    \"\"\"\n    Write n in the given base as a string\n    \"\"\"\n    return int(s, base) == n",
    "sols": [
      "def sol(n=142, base=7):\n    assert 2 <= base <= 10\n    ans = \"\"\n    while n:\n        ans = str(n % base) + ans\n        n //= base\n    return ans or \"0\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#44",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ChangeBase_1",
    "sat": "def sat(s: str, n=85328, base=2):\n    \"\"\"\n    Write n in the given base as a string\n    \"\"\"\n    return int(s, base) == n",
    "sols": [
      "def sol(n=85328, base=2):\n    assert 2 <= base <= 10\n    ans = \"\"\n    while n:\n        ans = str(n % base) + ans\n        n //= base\n    return ans or \"0\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#44",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ChangeBase_2",
    "sat": "def sat(s: str, n=9576751, base=10):\n    \"\"\"\n    Write n in the given base as a string\n    \"\"\"\n    return int(s, base) == n",
    "sols": [
      "def sol(n=9576751, base=10):\n    assert 2 <= base <= 10\n    ans = \"\"\n    while n:\n        ans = str(n % base) + ans\n        n //= base\n    return ans or \"0\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#44",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ChangeBase_3",
    "sat": "def sat(s: str, n=5160280, base=5):\n    \"\"\"\n    Write n in the given base as a string\n    \"\"\"\n    return int(s, base) == n",
    "sols": [
      "def sol(n=5160280, base=5):\n    assert 2 <= base <= 10\n    ans = \"\"\n    while n:\n        ans = str(n % base) + ans\n        n //= base\n    return ans or \"0\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#44",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ChangeBase_4",
    "sat": "def sat(s: str, n=4884658, base=6):\n    \"\"\"\n    Write n in the given base as a string\n    \"\"\"\n    return int(s, base) == n",
    "sols": [
      "def sol(n=4884658, base=6):\n    assert 2 <= base <= 10\n    ans = \"\"\n    while n:\n        ans = str(n % base) + ans\n        n //= base\n    return ans or \"0\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#44",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ChangeBase_5",
    "sat": "def sat(s: str, n=6477511, base=4):\n    \"\"\"\n    Write n in the given base as a string\n    \"\"\"\n    return int(s, base) == n",
    "sols": [
      "def sol(n=6477511, base=4):\n    assert 2 <= base <= 10\n    ans = \"\"\n    while n:\n        ans = str(n % base) + ans\n        n //= base\n    return ans or \"0\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#44",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ChangeBase_6",
    "sat": "def sat(s: str, n=5450297, base=6):\n    \"\"\"\n    Write n in the given base as a string\n    \"\"\"\n    return int(s, base) == n",
    "sols": [
      "def sol(n=5450297, base=6):\n    assert 2 <= base <= 10\n    ans = \"\"\n    while n:\n        ans = str(n % base) + ans\n        n //= base\n    return ans or \"0\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#44",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ChangeBase_7",
    "sat": "def sat(s: str, n=9133628, base=8):\n    \"\"\"\n    Write n in the given base as a string\n    \"\"\"\n    return int(s, base) == n",
    "sols": [
      "def sol(n=9133628, base=8):\n    assert 2 <= base <= 10\n    ans = \"\"\n    while n:\n        ans = str(n % base) + ans\n        n //= base\n    return ans or \"0\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#44",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ChangeBase_8",
    "sat": "def sat(s: str, n=6334815, base=2):\n    \"\"\"\n    Write n in the given base as a string\n    \"\"\"\n    return int(s, base) == n",
    "sols": [
      "def sol(n=6334815, base=2):\n    assert 2 <= base <= 10\n    ans = \"\"\n    while n:\n        ans = str(n % base) + ans\n        n //= base\n    return ans or \"0\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#44",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ChangeBase_9",
    "sat": "def sat(s: str, n=983031, base=4):\n    \"\"\"\n    Write n in the given base as a string\n    \"\"\"\n    return int(s, base) == n",
    "sols": [
      "def sol(n=983031, base=4):\n    assert 2 <= base <= 10\n    ans = \"\"\n    while n:\n        ans = str(n % base) + ans\n        n //= base\n    return ans or \"0\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#44",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TriangleArea_0",
    "sat": "def sat(height: int, area=1319098728582, base=45126):\n    \"\"\"\n    Find the height of a triangle given the area and base. It is guaranteed that the answer is an integer.\n    \"\"\"\n    return base * height == 2 * area",
    "sols": [
      "def sol(area=1319098728582, base=45126):\n    return (2 * area) // base"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#45",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TriangleArea_1",
    "sat": "def sat(height: int, area=2642925075, base=211434006):\n    \"\"\"\n    Find the height of a triangle given the area and base. It is guaranteed that the answer is an integer.\n    \"\"\"\n    return base * height == 2 * area",
    "sols": [
      "def sol(area=2642925075, base=211434006):\n    return (2 * area) // base"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#45",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TriangleArea_2",
    "sat": "def sat(height: int, area=5529468804, base=18936537):\n    \"\"\"\n    Find the height of a triangle given the area and base. It is guaranteed that the answer is an integer.\n    \"\"\"\n    return base * height == 2 * area",
    "sols": [
      "def sol(area=5529468804, base=18936537):\n    return (2 * area) // base"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#45",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TriangleArea_3",
    "sat": "def sat(height: int, area=1238452500, base=600):\n    \"\"\"\n    Find the height of a triangle given the area and base. It is guaranteed that the answer is an integer.\n    \"\"\"\n    return base * height == 2 * area",
    "sols": [
      "def sol(area=1238452500, base=600):\n    return (2 * area) // base"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#45",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TriangleArea_4",
    "sat": "def sat(height: int, area=32576448, base=147072):\n    \"\"\"\n    Find the height of a triangle given the area and base. It is guaranteed that the answer is an integer.\n    \"\"\"\n    return base * height == 2 * area",
    "sols": [
      "def sol(area=32576448, base=147072):\n    return (2 * area) // base"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#45",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TriangleArea_5",
    "sat": "def sat(height: int, area=119486825710953, base=75837061):\n    \"\"\"\n    Find the height of a triangle given the area and base. It is guaranteed that the answer is an integer.\n    \"\"\"\n    return base * height == 2 * area",
    "sols": [
      "def sol(area=119486825710953, base=75837061):\n    return (2 * area) // base"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#45",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TriangleArea_6",
    "sat": "def sat(height: int, area=39092406128640, base=891342):\n    \"\"\"\n    Find the height of a triangle given the area and base. It is guaranteed that the answer is an integer.\n    \"\"\"\n    return base * height == 2 * area",
    "sols": [
      "def sol(area=39092406128640, base=891342):\n    return (2 * area) // base"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#45",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TriangleArea_7",
    "sat": "def sat(height: int, area=16292784, base=8):\n    \"\"\"\n    Find the height of a triangle given the area and base. It is guaranteed that the answer is an integer.\n    \"\"\"\n    return base * height == 2 * area",
    "sols": [
      "def sol(area=16292784, base=8):\n    return (2 * area) // base"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#45",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TriangleArea_8",
    "sat": "def sat(height: int, area=64728, base=5394):\n    \"\"\"\n    Find the height of a triangle given the area and base. It is guaranteed that the answer is an integer.\n    \"\"\"\n    return base * height == 2 * area",
    "sols": [
      "def sol(area=64728, base=5394):\n    return (2 * area) // base"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#45",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "TriangleArea_9",
    "sat": "def sat(height: int, area=758884, base=758884):\n    \"\"\"\n    Find the height of a triangle given the area and base. It is guaranteed that the answer is an integer.\n    \"\"\"\n    return base * height == 2 * area",
    "sols": [
      "def sol(area=758884, base=758884):\n    return (2 * area) // base"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#45",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fib4_0",
    "sat": "def sat(init: List[int], target=2021):\n    \"\"\"\n    Define a four-wise Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    four. Given a target number, find an initial four numbers such that the 100th number in the sequence is the\n    given target number.\n    \"\"\"\n    a, b, c, d = init\n    for i in range(99):\n        a, b, c, d = b, c, d, (a + b + c + d)\n    return a == target",
    "sols": [
      "def sol(target=2021):\n    nums = [target, 0, 0, 0]\n    for i in range(99):\n        x = nums[3] - sum(nums[:3])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:3]\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#46\n\nAlmost identical to problem 63",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fib4_1",
    "sat": "def sat(init: List[int], target=56):\n    \"\"\"\n    Define a four-wise Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    four. Given a target number, find an initial four numbers such that the 100th number in the sequence is the\n    given target number.\n    \"\"\"\n    a, b, c, d = init\n    for i in range(99):\n        a, b, c, d = b, c, d, (a + b + c + d)\n    return a == target",
    "sols": [
      "def sol(target=56):\n    nums = [target, 0, 0, 0]\n    for i in range(99):\n        x = nums[3] - sum(nums[:3])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:3]\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#46\n\nAlmost identical to problem 63",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fib4_2",
    "sat": "def sat(init: List[int], target=58965):\n    \"\"\"\n    Define a four-wise Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    four. Given a target number, find an initial four numbers such that the 100th number in the sequence is the\n    given target number.\n    \"\"\"\n    a, b, c, d = init\n    for i in range(99):\n        a, b, c, d = b, c, d, (a + b + c + d)\n    return a == target",
    "sols": [
      "def sol(target=58965):\n    nums = [target, 0, 0, 0]\n    for i in range(99):\n        x = nums[3] - sum(nums[:3])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:3]\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#46\n\nAlmost identical to problem 63",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fib4_3",
    "sat": "def sat(init: List[int], target=501192137):\n    \"\"\"\n    Define a four-wise Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    four. Given a target number, find an initial four numbers such that the 100th number in the sequence is the\n    given target number.\n    \"\"\"\n    a, b, c, d = init\n    for i in range(99):\n        a, b, c, d = b, c, d, (a + b + c + d)\n    return a == target",
    "sols": [
      "def sol(target=501192137):\n    nums = [target, 0, 0, 0]\n    for i in range(99):\n        x = nums[3] - sum(nums[:3])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:3]\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#46\n\nAlmost identical to problem 63",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fib4_4",
    "sat": "def sat(init: List[int], target=0):\n    \"\"\"\n    Define a four-wise Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    four. Given a target number, find an initial four numbers such that the 100th number in the sequence is the\n    given target number.\n    \"\"\"\n    a, b, c, d = init\n    for i in range(99):\n        a, b, c, d = b, c, d, (a + b + c + d)\n    return a == target",
    "sols": [
      "def sol(target=0):\n    nums = [target, 0, 0, 0]\n    for i in range(99):\n        x = nums[3] - sum(nums[:3])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:3]\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#46\n\nAlmost identical to problem 63",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fib4_5",
    "sat": "def sat(init: List[int], target=42):\n    \"\"\"\n    Define a four-wise Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    four. Given a target number, find an initial four numbers such that the 100th number in the sequence is the\n    given target number.\n    \"\"\"\n    a, b, c, d = init\n    for i in range(99):\n        a, b, c, d = b, c, d, (a + b + c + d)\n    return a == target",
    "sols": [
      "def sol(target=42):\n    nums = [target, 0, 0, 0]\n    for i in range(99):\n        x = nums[3] - sum(nums[:3])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:3]\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#46\n\nAlmost identical to problem 63",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fib4_6",
    "sat": "def sat(init: List[int], target=4240):\n    \"\"\"\n    Define a four-wise Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    four. Given a target number, find an initial four numbers such that the 100th number in the sequence is the\n    given target number.\n    \"\"\"\n    a, b, c, d = init\n    for i in range(99):\n        a, b, c, d = b, c, d, (a + b + c + d)\n    return a == target",
    "sols": [
      "def sol(target=4240):\n    nums = [target, 0, 0, 0]\n    for i in range(99):\n        x = nums[3] - sum(nums[:3])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:3]\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#46\n\nAlmost identical to problem 63",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fib4_7",
    "sat": "def sat(init: List[int], target=399934):\n    \"\"\"\n    Define a four-wise Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    four. Given a target number, find an initial four numbers such that the 100th number in the sequence is the\n    given target number.\n    \"\"\"\n    a, b, c, d = init\n    for i in range(99):\n        a, b, c, d = b, c, d, (a + b + c + d)\n    return a == target",
    "sols": [
      "def sol(target=399934):\n    nums = [target, 0, 0, 0]\n    for i in range(99):\n        x = nums[3] - sum(nums[:3])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:3]\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#46\n\nAlmost identical to problem 63",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fib4_8",
    "sat": "def sat(init: List[int], target=23):\n    \"\"\"\n    Define a four-wise Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    four. Given a target number, find an initial four numbers such that the 100th number in the sequence is the\n    given target number.\n    \"\"\"\n    a, b, c, d = init\n    for i in range(99):\n        a, b, c, d = b, c, d, (a + b + c + d)\n    return a == target",
    "sols": [
      "def sol(target=23):\n    nums = [target, 0, 0, 0]\n    for i in range(99):\n        x = nums[3] - sum(nums[:3])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:3]\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#46\n\nAlmost identical to problem 63",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fib4_9",
    "sat": "def sat(init: List[int], target=7246):\n    \"\"\"\n    Define a four-wise Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    four. Given a target number, find an initial four numbers such that the 100th number in the sequence is the\n    given target number.\n    \"\"\"\n    a, b, c, d = init\n    for i in range(99):\n        a, b, c, d = b, c, d, (a + b + c + d)\n    return a == target",
    "sols": [
      "def sol(target=7246):\n    nums = [target, 0, 0, 0]\n    for i in range(99):\n        x = nums[3] - sum(nums[:3])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:3]\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#46\n\nAlmost identical to problem 63",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Median_0",
    "sat": "def sat(x: int, nums=[132666041, 237412, 28141, -12, 11939, 912414, 17], upper=133658965):\n    \"\"\"\n    Find an integer that minimizes the sum of absolute deviations with respect to the given numbers.\n    \"\"\"\n    dev = sum(n - x for n in nums)\n    return dev <= upper",
    "sols": [
      "def sol(nums=[132666041, 237412, 28141, -12, 11939, 912414, 17], upper=133658965):\n    return sorted(nums)[len(nums) // 2] if nums else 0"
    ],
    "module": "human_eval",
    "notes": "One definition of the median is a number that minimizes the sum of absolute deviations.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#47",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Median_1",
    "sat": "def sat(x: int, nums=[-8813279918, 7464351342, 8037181984, 8564600186, 660800781], upper=-21408102335):\n    \"\"\"\n    Find an integer that minimizes the sum of absolute deviations with respect to the given numbers.\n    \"\"\"\n    dev = sum(n - x for n in nums)\n    return dev <= upper",
    "sols": [
      "def sol(nums=[-8813279918, 7464351342, 8037181984, 8564600186, 660800781], upper=-21408102335):\n    return sorted(nums)[len(nums) // 2] if nums else 0"
    ],
    "module": "human_eval",
    "notes": "One definition of the median is a number that minimizes the sum of absolute deviations.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#47",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Median_2",
    "sat": "def sat(x: int, nums: List[int]=[], upper=0):\n    \"\"\"\n    Find an integer that minimizes the sum of absolute deviations with respect to the given numbers.\n    \"\"\"\n    dev = sum(n - x for n in nums)\n    return dev <= upper",
    "sols": [
      "def sol(nums=[], upper=0):\n    return sorted(nums)[len(nums) // 2] if nums else 0"
    ],
    "module": "human_eval",
    "notes": "One definition of the median is a number that minimizes the sum of absolute deviations.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#47",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Median_3",
    "sat": "def sat(x: int, nums=[-2350083760, -34560579, 3780403495, -9390708907, 2424237816, -6782611896, 624505871], upper=-11486893907):\n    \"\"\"\n    Find an integer that minimizes the sum of absolute deviations with respect to the given numbers.\n    \"\"\"\n    dev = sum(n - x for n in nums)\n    return dev <= upper",
    "sols": [
      "def sol(nums=[-2350083760, -34560579, 3780403495, -9390708907, 2424237816, -6782611896, 624505871], upper=-11486893907):\n    return sorted(nums)[len(nums) // 2] if nums else 0"
    ],
    "module": "human_eval",
    "notes": "One definition of the median is a number that minimizes the sum of absolute deviations.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#47",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Median_4",
    "sat": "def sat(x: int, nums=[-2410166269, 5887293672], upper=-8297459941):\n    \"\"\"\n    Find an integer that minimizes the sum of absolute deviations with respect to the given numbers.\n    \"\"\"\n    dev = sum(n - x for n in nums)\n    return dev <= upper",
    "sols": [
      "def sol(nums=[-2410166269, 5887293672], upper=-8297459941):\n    return sorted(nums)[len(nums) // 2] if nums else 0"
    ],
    "module": "human_eval",
    "notes": "One definition of the median is a number that minimizes the sum of absolute deviations.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#47",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Median_5",
    "sat": "def sat(x: int, nums=[7181762824, -6196901361, -9836188944, 1494714769, -6298689522], upper=17329204571):\n    \"\"\"\n    Find an integer that minimizes the sum of absolute deviations with respect to the given numbers.\n    \"\"\"\n    dev = sum(n - x for n in nums)\n    return dev <= upper",
    "sols": [
      "def sol(nums=[7181762824, -6196901361, -9836188944, 1494714769, -6298689522], upper=17329204571):\n    return sorted(nums)[len(nums) // 2] if nums else 0"
    ],
    "module": "human_eval",
    "notes": "One definition of the median is a number that minimizes the sum of absolute deviations.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#47",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Median_6",
    "sat": "def sat(x: int, nums=[-813919846, -7460196291, -4979209752, 3451032105, -4515455690, -1468222643, -2282443079, 2507230870, -1394848407], upper=-3742028946):\n    \"\"\"\n    Find an integer that minimizes the sum of absolute deviations with respect to the given numbers.\n    \"\"\"\n    dev = sum(n - x for n in nums)\n    return dev <= upper",
    "sols": [
      "def sol(nums=[-813919846, -7460196291, -4979209752, 3451032105, -4515455690, -1468222643, -2282443079, 2507230870, -1394848407], upper=-3742028946):\n    return sorted(nums)[len(nums) // 2] if nums else 0"
    ],
    "module": "human_eval",
    "notes": "One definition of the median is a number that minimizes the sum of absolute deviations.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#47",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Median_7",
    "sat": "def sat(x: int, nums=[5736689555, 4568815891, -8581717225], upper=-11982659452):\n    \"\"\"\n    Find an integer that minimizes the sum of absolute deviations with respect to the given numbers.\n    \"\"\"\n    dev = sum(n - x for n in nums)\n    return dev <= upper",
    "sols": [
      "def sol(nums=[5736689555, 4568815891, -8581717225], upper=-11982659452):\n    return sorted(nums)[len(nums) // 2] if nums else 0"
    ],
    "module": "human_eval",
    "notes": "One definition of the median is a number that minimizes the sum of absolute deviations.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#47",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Median_8",
    "sat": "def sat(x: int, nums=[2201065329, 8265157512, -3861797625], upper=1229229):\n    \"\"\"\n    Find an integer that minimizes the sum of absolute deviations with respect to the given numbers.\n    \"\"\"\n    dev = sum(n - x for n in nums)\n    return dev <= upper",
    "sols": [
      "def sol(nums=[2201065329, 8265157512, -3861797625], upper=1229229):\n    return sorted(nums)[len(nums) // 2] if nums else 0"
    ],
    "module": "human_eval",
    "notes": "One definition of the median is a number that minimizes the sum of absolute deviations.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#47",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Median_9",
    "sat": "def sat(x: int, nums=[893018778, 2566796999, -5875031056, -6953766816, -6769023651, 5634632881, -447705230], upper=-7817141485):\n    \"\"\"\n    Find an integer that minimizes the sum of absolute deviations with respect to the given numbers.\n    \"\"\"\n    dev = sum(n - x for n in nums)\n    return dev <= upper",
    "sols": [
      "def sol(nums=[893018778, 2566796999, -5875031056, -6953766816, -6769023651, 5634632881, -447705230], upper=-7817141485):\n    return sorted(nums)[len(nums) // 2] if nums else 0"
    ],
    "module": "human_eval",
    "notes": "One definition of the median is a number that minimizes the sum of absolute deviations.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#47",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Palindrome_Trivial_0",
    "sat": "def sat(p: bool, s=\"This problem is trivial but common\"):\n    \"\"\"\n    Test whether the given string is a palindrome\n    \"\"\"\n    return p == (s == s[::-1])",
    "sols": [
      "def sol(s=\"This problem is trivial but common\"):\n    return s == s[::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#48",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Palindrome_Trivial_1",
    "sat": "def sat(p: bool, s=\"borulathoquinych\"):\n    \"\"\"\n    Test whether the given string is a palindrome\n    \"\"\"\n    return p == (s == s[::-1])",
    "sols": [
      "def sol(s=\"borulathoquinych\"):\n    return s == s[::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#48",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Palindrome_Trivial_2",
    "sat": "def sat(p: bool, s=\"vetextilyfuhachetextxetehcahufylitxetev\"):\n    \"\"\"\n    Test whether the given string is a palindrome\n    \"\"\"\n    return p == (s == s[::-1])",
    "sols": [
      "def sol(s=\"vetextilyfuhachetextxetehcahufylitxetev\"):\n    return s == s[::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#48",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Palindrome_Trivial_3",
    "sat": "def sat(p: bool, s=\"gavotextesuhyzocop\"):\n    \"\"\"\n    Test whether the given string is a palindrome\n    \"\"\"\n    return p == (s == s[::-1])",
    "sols": [
      "def sol(s=\"gavotextesuhyzocop\"):\n    return s == s[::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#48",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Palindrome_Trivial_4",
    "sat": "def sat(p: bool, s=\"cyvetextybbytxetevyc\"):\n    \"\"\"\n    Test whether the given string is a palindrome\n    \"\"\"\n    return p == (s == s[::-1])",
    "sols": [
      "def sol(s=\"cyvetextybbytxetevyc\"):\n    return s == s[::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#48",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Palindrome_Trivial_5",
    "sat": "def sat(p: bool, s=\"ticuwakyt\"):\n    \"\"\"\n    Test whether the given string is a palindrome\n    \"\"\"\n    return p == (s == s[::-1])",
    "sols": [
      "def sol(s=\"ticuwakyt\"):\n    return s == s[::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#48",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Palindrome_Trivial_6",
    "sat": "def sat(p: bool, s=\"laxigawuzerequuluuqerezuwagixal\"):\n    \"\"\"\n    Test whether the given string is a palindrome\n    \"\"\"\n    return p == (s == s[::-1])",
    "sols": [
      "def sol(s=\"laxigawuzerequuluuqerezuwagixal\"):\n    return s == s[::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#48",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Palindrome_Trivial_7",
    "sat": "def sat(p: bool, s=\"chigegibumubigegihc\"):\n    \"\"\"\n    Test whether the given string is a palindrome\n    \"\"\"\n    return p == (s == s[::-1])",
    "sols": [
      "def sol(s=\"chigegibumubigegihc\"):\n    return s == s[::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#48",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Palindrome_Trivial_8",
    "sat": "def sat(p: bool, s=\"re\"):\n    \"\"\"\n    Test whether the given string is a palindrome\n    \"\"\"\n    return p == (s == s[::-1])",
    "sols": [
      "def sol(s=\"re\"):\n    return s == s[::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#48",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Palindrome_Trivial_9",
    "sat": "def sat(p: bool, s=\"dofebulukyfyt\"):\n    \"\"\"\n    Test whether the given string is a palindrome\n    \"\"\"\n    return p == (s == s[::-1])",
    "sols": [
      "def sol(s=\"dofebulukyfyt\"):\n    return s == s[::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#48",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LittleFermat_0",
    "sat": "def sat(exp_poly: List[int], d=74152093423, poly=[1, 6, 3, 1, 0, 4, 4]):\n    \"\"\"\n    Fermat's little theorem implies that any polynomial can be written equivalently as a degree p-1\n    polynomial (mod p).\n    Given the p coefficients of a polynomial poly, compute a polynomial equivalent to poly^d (mod p).\n    \"\"\"\n    p = len(poly)\n    assert p > 2 and all(p % i for i in range(2, p)), \"Hint: p is a prime > 2\"\n\n    def val(coeffs, n):  # evaluate polynomial mod p\n        return sum(c * pow(n, i, p) for i, c in enumerate(coeffs)) % p\n\n    return all(val(exp_poly, n) == pow(val(poly, n), d, p) for n in range(p))",
    "sols": [
      "def sol(d=74152093423, poly=[1, 6, 3, 1, 0, 4, 4]):\n    \"\"\"\n    Use repeated squaring to exponentiate polynomial\n    \"\"\"\n    p = len(poly)\n\n    def prod(poly1, poly2):  # multiply two polynomials mod p\n        ans = [0] * p\n        for i, a in enumerate(poly1):\n            for j, b in enumerate(poly2):\n                e = (i + j) % (p - 1)\n                if e == 0 and i + j > 1:\n                    e = p - 1\n                ans[e] = (ans[e] + a * b) % p\n        return ans\n\n    ans = [1] + [0] * (p - 1)\n    while d:\n        if d % 2:\n            ans = prod(ans, poly)\n        poly = prod(poly, poly)\n        d //= 2\n    # for i in range(d):\n    #     ans = prod(ans, poly)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Harder but loosely inspired by [HumanEval](https://github.com/openai/human-eval) \\#49",
    "taint_date": "2021-7-7",
    "weight": 0.010416666666666666
  },
  {
    "name": "ShiftChars_0",
    "sat": "def sat(orig: str, result=\"Hello, world!\", shift=7):\n    \"\"\"\n    Find a string which, when each character is shifted (ascii incremented) by shift, gives the result.\n    \"\"\"\n    n = len(result)\n    assert len(orig) == n\n    return all(ord(orig[i]) + shift == ord(result[i]) for i in range(n))",
    "sols": [
      "def sol(result=\"Hello, world!\", shift=7):\n    return \"\".join(chr(ord(c) - shift) for c in result)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#50",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ShiftChars_1",
    "sat": "def sat(orig: str, result=\"rupomykecykynuric\", shift=-9):\n    \"\"\"\n    Find a string which, when each character is shifted (ascii incremented) by shift, gives the result.\n    \"\"\"\n    n = len(result)\n    assert len(orig) == n\n    return all(ord(orig[i]) + shift == ord(result[i]) for i in range(n))",
    "sols": [
      "def sol(result=\"rupomykecykynuric\", shift=-9):\n    return \"\".join(chr(ord(c) - shift) for c in result)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#50",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ShiftChars_2",
    "sat": "def sat(orig: str, result=\"vicyza\", shift=7):\n    \"\"\"\n    Find a string which, when each character is shifted (ascii incremented) by shift, gives the result.\n    \"\"\"\n    n = len(result)\n    assert len(orig) == n\n    return all(ord(orig[i]) + shift == ord(result[i]) for i in range(n))",
    "sols": [
      "def sol(result=\"vicyza\", shift=7):\n    return \"\".join(chr(ord(c) - shift) for c in result)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#50",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ShiftChars_3",
    "sat": "def sat(orig: str, result=\"nihyzatijyjoke\", shift=8):\n    \"\"\"\n    Find a string which, when each character is shifted (ascii incremented) by shift, gives the result.\n    \"\"\"\n    n = len(result)\n    assert len(orig) == n\n    return all(ord(orig[i]) + shift == ord(result[i]) for i in range(n))",
    "sols": [
      "def sol(result=\"nihyzatijyjoke\", shift=8):\n    return \"\".join(chr(ord(c) - shift) for c in result)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#50",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ShiftChars_4",
    "sat": "def sat(orig: str, result=\"tuthijotext\", shift=6):\n    \"\"\"\n    Find a string which, when each character is shifted (ascii incremented) by shift, gives the result.\n    \"\"\"\n    n = len(result)\n    assert len(orig) == n\n    return all(ord(orig[i]) + shift == ord(result[i]) for i in range(n))",
    "sols": [
      "def sol(result=\"tuthijotext\", shift=6):\n    return \"\".join(chr(ord(c) - shift) for c in result)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#50",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ShiftChars_5",
    "sat": "def sat(orig: str, result=\"thoroxugubu\", shift=7):\n    \"\"\"\n    Find a string which, when each character is shifted (ascii incremented) by shift, gives the result.\n    \"\"\"\n    n = len(result)\n    assert len(orig) == n\n    return all(ord(orig[i]) + shift == ord(result[i]) for i in range(n))",
    "sols": [
      "def sol(result=\"thoroxugubu\", shift=7):\n    return \"\".join(chr(ord(c) - shift) for c in result)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#50",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ShiftChars_6",
    "sat": "def sat(orig: str, result=\"tuzovizijykuquaza\", shift=-11):\n    \"\"\"\n    Find a string which, when each character is shifted (ascii incremented) by shift, gives the result.\n    \"\"\"\n    n = len(result)\n    assert len(orig) == n\n    return all(ord(orig[i]) + shift == ord(result[i]) for i in range(n))",
    "sols": [
      "def sol(result=\"tuzovizijykuquaza\", shift=-11):\n    return \"\".join(chr(ord(c) - shift) for c in result)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#50",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ShiftChars_7",
    "sat": "def sat(orig: str, result=\"textazecizexefih\", shift=4):\n    \"\"\"\n    Find a string which, when each character is shifted (ascii incremented) by shift, gives the result.\n    \"\"\"\n    n = len(result)\n    assert len(orig) == n\n    return all(ord(orig[i]) + shift == ord(result[i]) for i in range(n))",
    "sols": [
      "def sol(result=\"textazecizexefih\", shift=4):\n    return \"\".join(chr(ord(c) - shift) for c in result)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#50",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ShiftChars_8",
    "sat": "def sat(orig: str, result=\"cobesybogaluminotex\", shift=-3):\n    \"\"\"\n    Find a string which, when each character is shifted (ascii incremented) by shift, gives the result.\n    \"\"\"\n    n = len(result)\n    assert len(orig) == n\n    return all(ord(orig[i]) + shift == ord(result[i]) for i in range(n))",
    "sols": [
      "def sol(result=\"cobesybogaluminotex\", shift=-3):\n    return \"\".join(chr(ord(c) - shift) for c in result)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#50",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ShiftChars_9",
    "sat": "def sat(orig: str, result=\"zenunely\", shift=-3):\n    \"\"\"\n    Find a string which, when each character is shifted (ascii incremented) by shift, gives the result.\n    \"\"\"\n    n = len(result)\n    assert len(orig) == n\n    return all(ord(orig[i]) + shift == ord(result[i]) for i in range(n))",
    "sols": [
      "def sol(result=\"zenunely\", shift=-3):\n    return \"\".join(chr(ord(c) - shift) for c in result)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#50",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "RemoveVowels_0",
    "sat": "def sat(txt: str, text=\"Hello, world!\"):\n    \"\"\"\n    Remove the vowels from the original string.\n    \"\"\"\n    n = 0\n    for c in text:\n        if c.lower() not in \"aeiou\":\n            assert txt[n] == c\n            n += 1\n    assert n == len(txt)\n    return True",
    "sols": [
      "def sol(text=\"Hello, world!\"):\n    return \"\".join(c for c in text if c.lower() not in \"aeiou\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#51",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "RemoveVowels_1",
    "sat": "def sat(txt: str, text=\"GUSUXeGePUJibAqUojo\"):\n    \"\"\"\n    Remove the vowels from the original string.\n    \"\"\"\n    n = 0\n    for c in text:\n        if c.lower() not in \"aeiou\":\n            assert txt[n] == c\n            n += 1\n    assert n == len(txt)\n    return True",
    "sols": [
      "def sol(text=\"GUSUXeGePUJibAqUojo\"):\n    return \"\".join(c for c in text if c.lower() not in \"aeiou\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#51",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "RemoveVowels_2",
    "sat": "def sat(txt: str, text=\"CAsaVyVOTHobAHEwIhI\"):\n    \"\"\"\n    Remove the vowels from the original string.\n    \"\"\"\n    n = 0\n    for c in text:\n        if c.lower() not in \"aeiou\":\n            assert txt[n] == c\n            n += 1\n    assert n == len(txt)\n    return True",
    "sols": [
      "def sol(text=\"CAsaVyVOTHobAHEwIhI\"):\n    return \"\".join(c for c in text if c.lower() not in \"aeiou\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#51",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "RemoveVowels_3",
    "sat": "def sat(txt: str, text=\"TeX\"):\n    \"\"\"\n    Remove the vowels from the original string.\n    \"\"\"\n    n = 0\n    for c in text:\n        if c.lower() not in \"aeiou\":\n            assert txt[n] == c\n            n += 1\n    assert n == len(txt)\n    return True",
    "sols": [
      "def sol(text=\"TeX\"):\n    return \"\".join(c for c in text if c.lower() not in \"aeiou\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#51",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "RemoveVowels_4",
    "sat": "def sat(txt: str, text=\"Q\"):\n    \"\"\"\n    Remove the vowels from the original string.\n    \"\"\"\n    n = 0\n    for c in text:\n        if c.lower() not in \"aeiou\":\n            assert txt[n] == c\n            n += 1\n    assert n == len(txt)\n    return True",
    "sols": [
      "def sol(text=\"Q\"):\n    return \"\".join(c for c in text if c.lower() not in \"aeiou\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#51",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "RemoveVowels_5",
    "sat": "def sat(txt: str, text=\"somavyth\"):\n    \"\"\"\n    Remove the vowels from the original string.\n    \"\"\"\n    n = 0\n    for c in text:\n        if c.lower() not in \"aeiou\":\n            assert txt[n] == c\n            n += 1\n    assert n == len(txt)\n    return True",
    "sols": [
      "def sol(text=\"somavyth\"):\n    return \"\".join(c for c in text if c.lower() not in \"aeiou\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#51",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "RemoveVowels_6",
    "sat": "def sat(txt: str, text=\"T\"):\n    \"\"\"\n    Remove the vowels from the original string.\n    \"\"\"\n    n = 0\n    for c in text:\n        if c.lower() not in \"aeiou\":\n            assert txt[n] == c\n            n += 1\n    assert n == len(txt)\n    return True",
    "sols": [
      "def sol(text=\"T\"):\n    return \"\".join(c for c in text if c.lower() not in \"aeiou\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#51",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "RemoveVowels_7",
    "sat": "def sat(txt: str, text=\"kEPigaS\"):\n    \"\"\"\n    Remove the vowels from the original string.\n    \"\"\"\n    n = 0\n    for c in text:\n        if c.lower() not in \"aeiou\":\n            assert txt[n] == c\n            n += 1\n    assert n == len(txt)\n    return True",
    "sols": [
      "def sol(text=\"kEPigaS\"):\n    return \"\".join(c for c in text if c.lower() not in \"aeiou\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#51",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "RemoveVowels_8",
    "sat": "def sat(txt: str, text=\"tEXTUzugumaxoFUBAtyJ\"):\n    \"\"\"\n    Remove the vowels from the original string.\n    \"\"\"\n    n = 0\n    for c in text:\n        if c.lower() not in \"aeiou\":\n            assert txt[n] == c\n            n += 1\n    assert n == len(txt)\n    return True",
    "sols": [
      "def sol(text=\"tEXTUzugumaxoFUBAtyJ\"):\n    return \"\".join(c for c in text if c.lower() not in \"aeiou\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#51",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "RemoveVowels_9",
    "sat": "def sat(txt: str, text=\"kyHatexTEWuTeXtetH\"):\n    \"\"\"\n    Remove the vowels from the original string.\n    \"\"\"\n    n = 0\n    for c in text:\n        if c.lower() not in \"aeiou\":\n            assert txt[n] == c\n            n += 1\n    assert n == len(txt)\n    return True",
    "sols": [
      "def sol(text=\"kyHatexTEWuTeXtetH\"):\n    return \"\".join(c for c in text if c.lower() not in \"aeiou\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#51",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BelowThreshold_0",
    "sat": "def sat(indexes: List[int], nums=[0, 2, 17, 4, 4213, 322, 102, 29, 15, 39, 55], thresh=100):\n    \"\"\"\n    Find the indexes of numbers below a given threshold\n    \"\"\"\n    j = 0\n    for i, n in enumerate(nums):\n        if n < thresh:\n            assert indexes[j] == i\n            j += 1\n    assert j == len(indexes)\n    return True",
    "sols": [
      "def sol(nums=[0, 2, 17, 4, 4213, 322, 102, 29, 15, 39, 55], thresh=100):\n    return [i for i, n in enumerate(nums) if n < thresh]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#52",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BelowThreshold_1",
    "sat": "def sat(indexes: List[int], nums=[35, -96, -51, 7, 56, 0], thresh=-30):\n    \"\"\"\n    Find the indexes of numbers below a given threshold\n    \"\"\"\n    j = 0\n    for i, n in enumerate(nums):\n        if n < thresh:\n            assert indexes[j] == i\n            j += 1\n    assert j == len(indexes)\n    return True",
    "sols": [
      "def sol(nums=[35, -96, -51, 7, 56, 0], thresh=-30):\n    return [i for i, n in enumerate(nums) if n < thresh]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#52",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BelowThreshold_2",
    "sat": "def sat(indexes: List[int], nums=[-20, 45], thresh=91):\n    \"\"\"\n    Find the indexes of numbers below a given threshold\n    \"\"\"\n    j = 0\n    for i, n in enumerate(nums):\n        if n < thresh:\n            assert indexes[j] == i\n            j += 1\n    assert j == len(indexes)\n    return True",
    "sols": [
      "def sol(nums=[-20, 45], thresh=91):\n    return [i for i, n in enumerate(nums) if n < thresh]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#52",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BelowThreshold_3",
    "sat": "def sat(indexes: List[int], nums=[84, 56, 13], thresh=-80):\n    \"\"\"\n    Find the indexes of numbers below a given threshold\n    \"\"\"\n    j = 0\n    for i, n in enumerate(nums):\n        if n < thresh:\n            assert indexes[j] == i\n            j += 1\n    assert j == len(indexes)\n    return True",
    "sols": [
      "def sol(nums=[84, 56, 13], thresh=-80):\n    return [i for i, n in enumerate(nums) if n < thresh]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#52",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BelowThreshold_4",
    "sat": "def sat(indexes: List[int], nums=[3, -70, -88, 38], thresh=95):\n    \"\"\"\n    Find the indexes of numbers below a given threshold\n    \"\"\"\n    j = 0\n    for i, n in enumerate(nums):\n        if n < thresh:\n            assert indexes[j] == i\n            j += 1\n    assert j == len(indexes)\n    return True",
    "sols": [
      "def sol(nums=[3, -70, -88, 38], thresh=95):\n    return [i for i, n in enumerate(nums) if n < thresh]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#52",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BelowThreshold_5",
    "sat": "def sat(indexes: List[int], nums=[79, 12, 23, 19, -55, 82], thresh=93):\n    \"\"\"\n    Find the indexes of numbers below a given threshold\n    \"\"\"\n    j = 0\n    for i, n in enumerate(nums):\n        if n < thresh:\n            assert indexes[j] == i\n            j += 1\n    assert j == len(indexes)\n    return True",
    "sols": [
      "def sol(nums=[79, 12, 23, 19, -55, 82], thresh=93):\n    return [i for i, n in enumerate(nums) if n < thresh]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#52",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BelowThreshold_6",
    "sat": "def sat(indexes: List[int], nums=[13, 8, 94, -63, 74], thresh=34):\n    \"\"\"\n    Find the indexes of numbers below a given threshold\n    \"\"\"\n    j = 0\n    for i, n in enumerate(nums):\n        if n < thresh:\n            assert indexes[j] == i\n            j += 1\n    assert j == len(indexes)\n    return True",
    "sols": [
      "def sol(nums=[13, 8, 94, -63, 74], thresh=34):\n    return [i for i, n in enumerate(nums) if n < thresh]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#52",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BelowThreshold_7",
    "sat": "def sat(indexes: List[int], nums=[-88, 79, 57, 35, -68, -17, 2, 26, 62], thresh=3):\n    \"\"\"\n    Find the indexes of numbers below a given threshold\n    \"\"\"\n    j = 0\n    for i, n in enumerate(nums):\n        if n < thresh:\n            assert indexes[j] == i\n            j += 1\n    assert j == len(indexes)\n    return True",
    "sols": [
      "def sol(nums=[-88, 79, 57, 35, -68, -17, 2, 26, 62], thresh=3):\n    return [i for i, n in enumerate(nums) if n < thresh]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#52",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BelowThreshold_8",
    "sat": "def sat(indexes: List[int], nums=[42, 0, 11, -76, -7], thresh=95):\n    \"\"\"\n    Find the indexes of numbers below a given threshold\n    \"\"\"\n    j = 0\n    for i, n in enumerate(nums):\n        if n < thresh:\n            assert indexes[j] == i\n            j += 1\n    assert j == len(indexes)\n    return True",
    "sols": [
      "def sol(nums=[42, 0, 11, -76, -7], thresh=95):\n    return [i for i, n in enumerate(nums) if n < thresh]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#52",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BelowThreshold_9",
    "sat": "def sat(indexes: List[int], nums=[95, 2, 24, 79, 50, -34], thresh=-16):\n    \"\"\"\n    Find the indexes of numbers below a given threshold\n    \"\"\"\n    j = 0\n    for i, n in enumerate(nums):\n        if n < thresh:\n            assert indexes[j] == i\n            j += 1\n    assert j == len(indexes)\n    return True",
    "sols": [
      "def sol(nums=[95, 2, 24, 79, 50, -34], thresh=-16):\n    return [i for i, n in enumerate(nums) if n < thresh]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#52",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ListTotal_0",
    "sat": "def sat(n: int, nums=[10, 42, 17, 9, 1315182, 184, 102, 29, 15, 39, 755]):\n    \"\"\"\n    Find the indexes of numbers below a given threshold\n    \"\"\"\n    return sum(nums + [-n]) == 0",
    "sols": [
      "def sol(nums=[10, 42, 17, 9, 1315182, 184, 102, 29, 15, 39, 755]):\n    return sum(nums)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#53",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ListTotal_1",
    "sat": "def sat(n: int, nums=[40388491, -864787067, 862143530, 604555885, -81302113, 717834573]):\n    \"\"\"\n    Find the indexes of numbers below a given threshold\n    \"\"\"\n    return sum(nums + [-n]) == 0",
    "sols": [
      "def sol(nums=[40388491, -864787067, 862143530, 604555885, -81302113, 717834573]):\n    return sum(nums)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#53",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ListTotal_2",
    "sat": "def sat(n: int, nums=[-93, 35, -95, -7, -85, 2]):\n    \"\"\"\n    Find the indexes of numbers below a given threshold\n    \"\"\"\n    return sum(nums + [-n]) == 0",
    "sols": [
      "def sol(nums=[-93, 35, -95, -7, -85, 2]):\n    return sum(nums)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#53",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ListTotal_3",
    "sat": "def sat(n: int, nums=[-2040052, -6582681, -6604315, 1042475, 7287312, 8050849, 5566992, 4332017]):\n    \"\"\"\n    Find the indexes of numbers below a given threshold\n    \"\"\"\n    return sum(nums + [-n]) == 0",
    "sols": [
      "def sol(nums=[-2040052, -6582681, -6604315, 1042475, 7287312, 8050849, 5566992, 4332017]):\n    return sum(nums)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#53",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ListTotal_4",
    "sat": "def sat(n: int, nums=[-1, -1, -1, -1, 0, 0]):\n    \"\"\"\n    Find the indexes of numbers below a given threshold\n    \"\"\"\n    return sum(nums + [-n]) == 0",
    "sols": [
      "def sol(nums=[-1, -1, -1, -1, 0, 0]):\n    return sum(nums)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#53",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ListTotal_5",
    "sat": "def sat(n: int, nums=[8480076, -2044490, -3518775, 6254135, -2176636, -3207066, -1171264, -5667232, -2034335]):\n    \"\"\"\n    Find the indexes of numbers below a given threshold\n    \"\"\"\n    return sum(nums + [-n]) == 0",
    "sols": [
      "def sol(nums=[8480076, -2044490, -3518775, 6254135, -2176636, -3207066, -1171264, -5667232, -2034335]):\n    return sum(nums)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#53",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ListTotal_6",
    "sat": "def sat(n: int, nums=[816723, -837994, 763030, 531661, 233110, 368982, -402524, -778055]):\n    \"\"\"\n    Find the indexes of numbers below a given threshold\n    \"\"\"\n    return sum(nums + [-n]) == 0",
    "sols": [
      "def sol(nums=[816723, -837994, 763030, 531661, 233110, 368982, -402524, -778055]):\n    return sum(nums)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#53",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ListTotal_7",
    "sat": "def sat(n: int, nums=[-93268, -30697, -46621, 93237, 45694, -17686, -53086, -58002, 20887]):\n    \"\"\"\n    Find the indexes of numbers below a given threshold\n    \"\"\"\n    return sum(nums + [-n]) == 0",
    "sols": [
      "def sol(nums=[-93268, -30697, -46621, 93237, 45694, -17686, -53086, -58002, 20887]):\n    return sum(nums)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#53",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ListTotal_8",
    "sat": "def sat(n: int, nums=[-561191, 671034, 635510, 896023, -403700]):\n    \"\"\"\n    Find the indexes of numbers below a given threshold\n    \"\"\"\n    return sum(nums + [-n]) == 0",
    "sols": [
      "def sol(nums=[-561191, 671034, 635510, 896023, -403700]):\n    return sum(nums)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#53",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ListTotal_9",
    "sat": "def sat(n: int, nums=[42964, 85505, 53484, -98381, 67885, -85981, -53393]):\n    \"\"\"\n    Find the indexes of numbers below a given threshold\n    \"\"\"\n    return sum(nums + [-n]) == 0",
    "sols": [
      "def sol(nums=[42964, 85505, 53484, -98381, 67885, -85981, -53393]):\n    return sum(nums)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#53",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DiffChars_0",
    "sat": "def sat(c: str, a=\"the quick brown fox jumped over the lazy dog\", b=\"how vexingly quick daft zebras jump\"):\n    \"\"\"\n    Find a character in one string that is not in the other.\n    \"\"\"\n    return (c in a) != (c in b)",
    "sols": [
      "def sol(a=\"the quick brown fox jumped over the lazy dog\", b=\"how vexingly quick daft zebras jump\"):\n    return sorted(set(a).symmetric_difference(b))[0]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#54",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DiffChars_1",
    "sat": "def sat(c: str, a=\"jyhud\", b=\"nexysezomevus\"):\n    \"\"\"\n    Find a character in one string that is not in the other.\n    \"\"\"\n    return (c in a) != (c in b)",
    "sols": [
      "def sol(a=\"jyhud\", b=\"nexysezomevus\"):\n    return sorted(set(a).symmetric_difference(b))[0]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#54",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DiffChars_2",
    "sat": "def sat(c: str, a=\"vofawawumovisajuryt\", b=\"t\"):\n    \"\"\"\n    Find a character in one string that is not in the other.\n    \"\"\"\n    return (c in a) != (c in b)",
    "sols": [
      "def sol(a=\"vofawawumovisajuryt\", b=\"t\"):\n    return sorted(set(a).symmetric_difference(b))[0]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#54",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DiffChars_3",
    "sat": "def sat(c: str, a=\"textuzaxoch\", b=\"acehmottuxxz\"):\n    \"\"\"\n    Find a character in one string that is not in the other.\n    \"\"\"\n    return (c in a) != (c in b)",
    "sols": [
      "def sol(a=\"textuzaxoch\", b=\"acehmottuxxz\"):\n    return sorted(set(a).symmetric_difference(b))[0]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#54",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DiffChars_4",
    "sat": "def sat(c: str, a=\"quytextila\", b=\"mydyhopakokinavo\"):\n    \"\"\"\n    Find a character in one string that is not in the other.\n    \"\"\"\n    return (c in a) != (c in b)",
    "sols": [
      "def sol(a=\"quytextila\", b=\"mydyhopakokinavo\"):\n    return sorted(set(a).symmetric_difference(b))[0]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#54",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DiffChars_5",
    "sat": "def sat(c: str, a=\"danodelutibi\", b=\"abddeiilmnotu\"):\n    \"\"\"\n    Find a character in one string that is not in the other.\n    \"\"\"\n    return (c in a) != (c in b)",
    "sols": [
      "def sol(a=\"danodelutibi\", b=\"abddeiilmnotu\"):\n    return sorted(set(a).symmetric_difference(b))[0]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#54",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DiffChars_6",
    "sat": "def sat(c: str, a=\"tajexofyrytepudeko\", b=\"adeeefjkmooprttuxyy\"):\n    \"\"\"\n    Find a character in one string that is not in the other.\n    \"\"\"\n    return (c in a) != (c in b)",
    "sols": [
      "def sol(a=\"tajexofyrytepudeko\", b=\"adeeefjkmooprttuxyy\"):\n    return sorted(set(a).symmetric_difference(b))[0]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#54",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DiffChars_7",
    "sat": "def sat(c: str, a=\"xewutarugasevusadofy\", b=\"chedyvychegetex\"):\n    \"\"\"\n    Find a character in one string that is not in the other.\n    \"\"\"\n    return (c in a) != (c in b)",
    "sols": [
      "def sol(a=\"xewutarugasevusadofy\", b=\"chedyvychegetex\"):\n    return sorted(set(a).symmetric_difference(b))[0]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#54",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DiffChars_8",
    "sat": "def sat(c: str, a=\"cech\", b=\"ccehm\"):\n    \"\"\"\n    Find a character in one string that is not in the other.\n    \"\"\"\n    return (c in a) != (c in b)",
    "sols": [
      "def sol(a=\"cech\", b=\"ccehm\"):\n    return sorted(set(a).symmetric_difference(b))[0]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#54",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DiffChars_9",
    "sat": "def sat(c: str, a=\"mic\", b=\"w\"):\n    \"\"\"\n    Find a character in one string that is not in the other.\n    \"\"\"\n    return (c in a) != (c in b)",
    "sols": [
      "def sol(a=\"mic\", b=\"w\"):\n    return sorted(set(a).symmetric_difference(b))[0]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#54",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fibonacci_0",
    "sat": "def sat(nums: List[int], n=1402):\n    \"\"\"\n    Find the first n Fibonacci numbers\n    \"\"\"\n    return nums[0] == nums[1] == 1 and all(nums[i + 2] == nums[i + 1] + nums[i] for i in range(n - 2))",
    "sols": [
      "def sol(n=1402):\n    ans = [1, 1]\n    while len(ans) < n:\n        ans.append(ans[-1] + ans[-2])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#55",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fibonacci_1",
    "sat": "def sat(nums: List[int], n=537):\n    \"\"\"\n    Find the first n Fibonacci numbers\n    \"\"\"\n    return nums[0] == nums[1] == 1 and all(nums[i + 2] == nums[i + 1] + nums[i] for i in range(n - 2))",
    "sols": [
      "def sol(n=537):\n    ans = [1, 1]\n    while len(ans) < n:\n        ans.append(ans[-1] + ans[-2])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#55",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fibonacci_2",
    "sat": "def sat(nums: List[int], n=6968):\n    \"\"\"\n    Find the first n Fibonacci numbers\n    \"\"\"\n    return nums[0] == nums[1] == 1 and all(nums[i + 2] == nums[i + 1] + nums[i] for i in range(n - 2))",
    "sols": [
      "def sol(n=6968):\n    ans = [1, 1]\n    while len(ans) < n:\n        ans.append(ans[-1] + ans[-2])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#55",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fibonacci_3",
    "sat": "def sat(nums: List[int], n=5585):\n    \"\"\"\n    Find the first n Fibonacci numbers\n    \"\"\"\n    return nums[0] == nums[1] == 1 and all(nums[i + 2] == nums[i + 1] + nums[i] for i in range(n - 2))",
    "sols": [
      "def sol(n=5585):\n    ans = [1, 1]\n    while len(ans) < n:\n        ans.append(ans[-1] + ans[-2])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#55",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fibonacci_4",
    "sat": "def sat(nums: List[int], n=7277):\n    \"\"\"\n    Find the first n Fibonacci numbers\n    \"\"\"\n    return nums[0] == nums[1] == 1 and all(nums[i + 2] == nums[i + 1] + nums[i] for i in range(n - 2))",
    "sols": [
      "def sol(n=7277):\n    ans = [1, 1]\n    while len(ans) < n:\n        ans.append(ans[-1] + ans[-2])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#55",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fibonacci_5",
    "sat": "def sat(nums: List[int], n=10803):\n    \"\"\"\n    Find the first n Fibonacci numbers\n    \"\"\"\n    return nums[0] == nums[1] == 1 and all(nums[i + 2] == nums[i + 1] + nums[i] for i in range(n - 2))",
    "sols": [
      "def sol(n=10803):\n    ans = [1, 1]\n    while len(ans) < n:\n        ans.append(ans[-1] + ans[-2])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#55",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fibonacci_6",
    "sat": "def sat(nums: List[int], n=3106):\n    \"\"\"\n    Find the first n Fibonacci numbers\n    \"\"\"\n    return nums[0] == nums[1] == 1 and all(nums[i + 2] == nums[i + 1] + nums[i] for i in range(n - 2))",
    "sols": [
      "def sol(n=3106):\n    ans = [1, 1]\n    while len(ans) < n:\n        ans.append(ans[-1] + ans[-2])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#55",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fibonacci_7",
    "sat": "def sat(nums: List[int], n=4915):\n    \"\"\"\n    Find the first n Fibonacci numbers\n    \"\"\"\n    return nums[0] == nums[1] == 1 and all(nums[i + 2] == nums[i + 1] + nums[i] for i in range(n - 2))",
    "sols": [
      "def sol(n=4915):\n    ans = [1, 1]\n    while len(ans) < n:\n        ans.append(ans[-1] + ans[-2])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#55",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fibonacci_8",
    "sat": "def sat(nums: List[int], n=7009):\n    \"\"\"\n    Find the first n Fibonacci numbers\n    \"\"\"\n    return nums[0] == nums[1] == 1 and all(nums[i + 2] == nums[i + 1] + nums[i] for i in range(n - 2))",
    "sols": [
      "def sol(n=7009):\n    ans = [1, 1]\n    while len(ans) < n:\n        ans.append(ans[-1] + ans[-2])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#55",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fibonacci_9",
    "sat": "def sat(nums: List[int], n=2052):\n    \"\"\"\n    Find the first n Fibonacci numbers\n    \"\"\"\n    return nums[0] == nums[1] == 1 and all(nums[i + 2] == nums[i + 1] + nums[i] for i in range(n - 2))",
    "sols": [
      "def sol(n=2052):\n    ans = [1, 1]\n    while len(ans) < n:\n        ans.append(ans[-1] + ans[-2])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#55",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MatchBrackets_0",
    "sat": "def sat(matches: List[int], brackets=\"<<>><<<><>><<>>>\"):\n    \"\"\"\n    Find the index of the matching brackets for each character in the string\n    \"\"\"\n    for i in range(len(brackets)):\n        j = matches[i]\n        c = brackets[i]\n        assert brackets[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(brackets)",
    "sols": [
      "def sol(brackets=\"<<>><<<><>><<>>>\"):\n    matches = [-1] * len(brackets)\n    opens = []\n    for i, c in enumerate(brackets):\n        if c == \"<\":\n            opens.append(i)\n        else:\n            assert c == \">\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#56",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MatchBrackets_1",
    "sat": "def sat(matches: List[int], brackets=\"<><><><><<>><<<><><<>>>><><><>\"):\n    \"\"\"\n    Find the index of the matching brackets for each character in the string\n    \"\"\"\n    for i in range(len(brackets)):\n        j = matches[i]\n        c = brackets[i]\n        assert brackets[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(brackets)",
    "sols": [
      "def sol(brackets=\"<><><><><<>><<<><><<>>>><><><>\"):\n    matches = [-1] * len(brackets)\n    opens = []\n    for i, c in enumerate(brackets):\n        if c == \"<\":\n            opens.append(i)\n        else:\n            assert c == \">\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#56",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MatchBrackets_2",
    "sat": "def sat(matches: List[int], brackets=\"<><><<<>><<<<><>>><<>><>>><>\"):\n    \"\"\"\n    Find the index of the matching brackets for each character in the string\n    \"\"\"\n    for i in range(len(brackets)):\n        j = matches[i]\n        c = brackets[i]\n        assert brackets[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(brackets)",
    "sols": [
      "def sol(brackets=\"<><><<<>><<<<><>>><<>><>>><>\"):\n    matches = [-1] * len(brackets)\n    opens = []\n    for i, c in enumerate(brackets):\n        if c == \"<\":\n            opens.append(i)\n        else:\n            assert c == \">\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#56",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MatchBrackets_3",
    "sat": "def sat(matches: List[int], brackets=\"<><><><><<><><<><>>><><<>><><<>><><><><<<>><>><>\"):\n    \"\"\"\n    Find the index of the matching brackets for each character in the string\n    \"\"\"\n    for i in range(len(brackets)):\n        j = matches[i]\n        c = brackets[i]\n        assert brackets[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(brackets)",
    "sols": [
      "def sol(brackets=\"<><><><><<><><<><>>><><<>><><<>><><><><<<>><>><>\"):\n    matches = [-1] * len(brackets)\n    opens = []\n    for i, c in enumerate(brackets):\n        if c == \"<\":\n            opens.append(i)\n        else:\n            assert c == \">\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#56",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MatchBrackets_4",
    "sat": "def sat(matches: List[int], brackets=\"<<<<<>>>>><><><<>>\"):\n    \"\"\"\n    Find the index of the matching brackets for each character in the string\n    \"\"\"\n    for i in range(len(brackets)):\n        j = matches[i]\n        c = brackets[i]\n        assert brackets[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(brackets)",
    "sols": [
      "def sol(brackets=\"<<<<<>>>>><><><<>>\"):\n    matches = [-1] * len(brackets)\n    opens = []\n    for i, c in enumerate(brackets):\n        if c == \"<\":\n            opens.append(i)\n        else:\n            assert c == \">\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#56",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MatchBrackets_5",
    "sat": "def sat(matches: List[int], brackets=\"<>\"):\n    \"\"\"\n    Find the index of the matching brackets for each character in the string\n    \"\"\"\n    for i in range(len(brackets)):\n        j = matches[i]\n        c = brackets[i]\n        assert brackets[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(brackets)",
    "sols": [
      "def sol(brackets=\"<>\"):\n    matches = [-1] * len(brackets)\n    opens = []\n    for i, c in enumerate(brackets):\n        if c == \"<\":\n            opens.append(i)\n        else:\n            assert c == \">\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#56",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MatchBrackets_6",
    "sat": "def sat(matches: List[int], brackets=\"<><<<<><>>>><><><><<>><>\"):\n    \"\"\"\n    Find the index of the matching brackets for each character in the string\n    \"\"\"\n    for i in range(len(brackets)):\n        j = matches[i]\n        c = brackets[i]\n        assert brackets[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(brackets)",
    "sols": [
      "def sol(brackets=\"<><<<<><>>>><><><><<>><>\"):\n    matches = [-1] * len(brackets)\n    opens = []\n    for i, c in enumerate(brackets):\n        if c == \"<\":\n            opens.append(i)\n        else:\n            assert c == \">\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#56",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MatchBrackets_7",
    "sat": "def sat(matches: List[int], brackets=\"\"):\n    \"\"\"\n    Find the index of the matching brackets for each character in the string\n    \"\"\"\n    for i in range(len(brackets)):\n        j = matches[i]\n        c = brackets[i]\n        assert brackets[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(brackets)",
    "sols": [
      "def sol(brackets=\"\"):\n    matches = [-1] * len(brackets)\n    opens = []\n    for i, c in enumerate(brackets):\n        if c == \"<\":\n            opens.append(i)\n        else:\n            assert c == \">\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#56",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MatchBrackets_8",
    "sat": "def sat(matches: List[int], brackets=\"<><><><<><>><><><>\"):\n    \"\"\"\n    Find the index of the matching brackets for each character in the string\n    \"\"\"\n    for i in range(len(brackets)):\n        j = matches[i]\n        c = brackets[i]\n        assert brackets[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(brackets)",
    "sols": [
      "def sol(brackets=\"<><><><<><>><><><>\"):\n    matches = [-1] * len(brackets)\n    opens = []\n    for i, c in enumerate(brackets):\n        if c == \"<\":\n            opens.append(i)\n        else:\n            assert c == \">\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#56",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MatchBrackets_9",
    "sat": "def sat(matches: List[int], brackets=\"<><><<><>><<<<>>><>><><><<<<><>>>>\"):\n    \"\"\"\n    Find the index of the matching brackets for each character in the string\n    \"\"\"\n    for i in range(len(brackets)):\n        j = matches[i]\n        c = brackets[i]\n        assert brackets[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(brackets)",
    "sols": [
      "def sol(brackets=\"<><><<><>><<<<>>><>><><><<<<><>>>>\"):\n    matches = [-1] * len(brackets)\n    opens = []\n    for i, c in enumerate(brackets):\n        if c == \"<\":\n            opens.append(i)\n        else:\n            assert c == \">\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#56",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Monotonic_0",
    "sat": "def sat(direction: str, nums=[2, 4, 17, 29, 31, 1000, 416629]):\n    \"\"\"\n    Determine the direction ('increasing' or 'decreasing') of monotonic sequence nums\n    \"\"\"\n    if direction == \"increasing\":\n        return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n    if direction == \"decreasing\":\n        return all(nums[i + 1] < nums[i] for i in range(len(nums) - 1))",
    "sols": [
      "def sol(nums=[2, 4, 17, 29, 31, 1000, 416629]):\n    return \"increasing\" if len(nums) > 1 and nums[1] > nums[0] else \"decreasing\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#57",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Monotonic_1",
    "sat": "def sat(direction: str, nums=[540, 713, 887, 964]):\n    \"\"\"\n    Determine the direction ('increasing' or 'decreasing') of monotonic sequence nums\n    \"\"\"\n    if direction == \"increasing\":\n        return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n    if direction == \"decreasing\":\n        return all(nums[i + 1] < nums[i] for i in range(len(nums) - 1))",
    "sols": [
      "def sol(nums=[540, 713, 887, 964]):\n    return \"increasing\" if len(nums) > 1 and nums[1] > nums[0] else \"decreasing\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#57",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Monotonic_2",
    "sat": "def sat(direction: str, nums=[764, 291, 171]):\n    \"\"\"\n    Determine the direction ('increasing' or 'decreasing') of monotonic sequence nums\n    \"\"\"\n    if direction == \"increasing\":\n        return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n    if direction == \"decreasing\":\n        return all(nums[i + 1] < nums[i] for i in range(len(nums) - 1))",
    "sols": [
      "def sol(nums=[764, 291, 171]):\n    return \"increasing\" if len(nums) > 1 and nums[1] > nums[0] else \"decreasing\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#57",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Monotonic_3",
    "sat": "def sat(direction: str, nums=[74, 168, 229, 302, 430, 450, 481, 783]):\n    \"\"\"\n    Determine the direction ('increasing' or 'decreasing') of monotonic sequence nums\n    \"\"\"\n    if direction == \"increasing\":\n        return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n    if direction == \"decreasing\":\n        return all(nums[i + 1] < nums[i] for i in range(len(nums) - 1))",
    "sols": [
      "def sol(nums=[74, 168, 229, 302, 430, 450, 481, 783]):\n    return \"increasing\" if len(nums) > 1 and nums[1] > nums[0] else \"decreasing\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#57",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Monotonic_4",
    "sat": "def sat(direction: str, nums=[826, 784, 726, 537, 536, 392, 250, 241, 161]):\n    \"\"\"\n    Determine the direction ('increasing' or 'decreasing') of monotonic sequence nums\n    \"\"\"\n    if direction == \"increasing\":\n        return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n    if direction == \"decreasing\":\n        return all(nums[i + 1] < nums[i] for i in range(len(nums) - 1))",
    "sols": [
      "def sol(nums=[826, 784, 726, 537, 536, 392, 250, 241, 161]):\n    return \"increasing\" if len(nums) > 1 and nums[1] > nums[0] else \"decreasing\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#57",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Monotonic_5",
    "sat": "def sat(direction: str, nums=[691, 546, 98]):\n    \"\"\"\n    Determine the direction ('increasing' or 'decreasing') of monotonic sequence nums\n    \"\"\"\n    if direction == \"increasing\":\n        return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n    if direction == \"decreasing\":\n        return all(nums[i + 1] < nums[i] for i in range(len(nums) - 1))",
    "sols": [
      "def sol(nums=[691, 546, 98]):\n    return \"increasing\" if len(nums) > 1 and nums[1] > nums[0] else \"decreasing\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#57",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Monotonic_6",
    "sat": "def sat(direction: str, nums=[41, 155, 181, 511, 537, 935]):\n    \"\"\"\n    Determine the direction ('increasing' or 'decreasing') of monotonic sequence nums\n    \"\"\"\n    if direction == \"increasing\":\n        return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n    if direction == \"decreasing\":\n        return all(nums[i + 1] < nums[i] for i in range(len(nums) - 1))",
    "sols": [
      "def sol(nums=[41, 155, 181, 511, 537, 935]):\n    return \"increasing\" if len(nums) > 1 and nums[1] > nums[0] else \"decreasing\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#57",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Monotonic_7",
    "sat": "def sat(direction: str, nums=[706, 667, 504, 35]):\n    \"\"\"\n    Determine the direction ('increasing' or 'decreasing') of monotonic sequence nums\n    \"\"\"\n    if direction == \"increasing\":\n        return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n    if direction == \"decreasing\":\n        return all(nums[i + 1] < nums[i] for i in range(len(nums) - 1))",
    "sols": [
      "def sol(nums=[706, 667, 504, 35]):\n    return \"increasing\" if len(nums) > 1 and nums[1] > nums[0] else \"decreasing\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#57",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Monotonic_8",
    "sat": "def sat(direction: str, nums=[829, 677, 599, 494, 493, 344, 247, 194, 141]):\n    \"\"\"\n    Determine the direction ('increasing' or 'decreasing') of monotonic sequence nums\n    \"\"\"\n    if direction == \"increasing\":\n        return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n    if direction == \"decreasing\":\n        return all(nums[i + 1] < nums[i] for i in range(len(nums) - 1))",
    "sols": [
      "def sol(nums=[829, 677, 599, 494, 493, 344, 247, 194, 141]):\n    return \"increasing\" if len(nums) > 1 and nums[1] > nums[0] else \"decreasing\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#57",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Monotonic_9",
    "sat": "def sat(direction: str, nums=[989, 968, 526, 437, 340, 234, 163, 159, 15]):\n    \"\"\"\n    Determine the direction ('increasing' or 'decreasing') of monotonic sequence nums\n    \"\"\"\n    if direction == \"increasing\":\n        return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n    if direction == \"decreasing\":\n        return all(nums[i + 1] < nums[i] for i in range(len(nums) - 1))",
    "sols": [
      "def sol(nums=[989, 968, 526, 437, 340, 234, 163, 159, 15]):\n    return \"increasing\" if len(nums) > 1 and nums[1] > nums[0] else \"decreasing\""
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#57",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CommonNumbers_0",
    "sat": "def sat(common: List[int], a=[2, 416629, 2, 4, 17, 29, 31, 1000], b=[31, 2, 4, 17, 29, 41205]):\n    \"\"\"\n    Find numbers common to a and b\n    \"\"\"\n    return all((i in common) == (i in a and i in b) for i in a + b + common)",
    "sols": [
      "def sol(a=[2, 416629, 2, 4, 17, 29, 31, 1000], b=[31, 2, 4, 17, 29, 41205]):\n    return sorted(set(a).intersection(set(b)))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#58",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CommonNumbers_1",
    "sat": "def sat(common: List[int], a=[824, 853, 392, 835, 225, 96], b=[73, 534, 705, 376, 376, 965, 404, 976]):\n    \"\"\"\n    Find numbers common to a and b\n    \"\"\"\n    return all((i in common) == (i in a and i in b) for i in a + b + common)",
    "sols": [
      "def sol(a=[824, 853, 392, 835, 225, 96], b=[73, 534, 705, 376, 376, 965, 404, 976]):\n    return sorted(set(a).intersection(set(b)))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#58",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CommonNumbers_2",
    "sat": "def sat(common: List[int], a=[338, 882, 92, 234], b=[993, 977, 403]):\n    \"\"\"\n    Find numbers common to a and b\n    \"\"\"\n    return all((i in common) == (i in a and i in b) for i in a + b + common)",
    "sols": [
      "def sol(a=[338, 882, 92, 234], b=[993, 977, 403]):\n    return sorted(set(a).intersection(set(b)))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#58",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CommonNumbers_3",
    "sat": "def sat(common: List[int], a=[950, 299, 581, 222, 490, 758, 58, 76, 808, 814], b=[790, 200, 814, 851, 902, 490, 581, 808, 950, 343, 758]):\n    \"\"\"\n    Find numbers common to a and b\n    \"\"\"\n    return all((i in common) == (i in a and i in b) for i in a + b + common)",
    "sols": [
      "def sol(a=[950, 299, 581, 222, 490, 758, 58, 76, 808, 814], b=[790, 200, 814, 851, 902, 490, 581, 808, 950, 343, 758]):\n    return sorted(set(a).intersection(set(b)))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#58",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CommonNumbers_4",
    "sat": "def sat(common: List[int], a=[452, 318, 348, 995, 733, 874, 699], b=[733, 348, 614, 874, 699, 995, 318, 167, 452]):\n    \"\"\"\n    Find numbers common to a and b\n    \"\"\"\n    return all((i in common) == (i in a and i in b) for i in a + b + common)",
    "sols": [
      "def sol(a=[452, 318, 348, 995, 733, 874, 699], b=[733, 348, 614, 874, 699, 995, 318, 167, 452]):\n    return sorted(set(a).intersection(set(b)))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#58",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CommonNumbers_5",
    "sat": "def sat(common: List[int], a=[262, 756, 961, 787, 301, 855, 157, 111, 120, 978, 285, 626, 324], b=[111, 262, 285, 132, 71, 301, 90, 322, 494, 557, 324]):\n    \"\"\"\n    Find numbers common to a and b\n    \"\"\"\n    return all((i in common) == (i in a and i in b) for i in a + b + common)",
    "sols": [
      "def sol(a=[262, 756, 961, 787, 301, 855, 157, 111, 120, 978, 285, 626, 324], b=[111, 262, 285, 132, 71, 301, 90, 322, 494, 557, 324]):\n    return sorted(set(a).intersection(set(b)))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#58",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CommonNumbers_6",
    "sat": "def sat(common: List[int], a=[746, 210, 79, 55, 209, 111, 730, 422, 224, 211, 165, 953, 454, 688, 329, 742, 583], b=[56, 739, 895, 176, 688, 746, 111, 583, 329, 79, 478, 431, 209, 980, 503, 165]):\n    \"\"\"\n    Find numbers common to a and b\n    \"\"\"\n    return all((i in common) == (i in a and i in b) for i in a + b + common)",
    "sols": [
      "def sol(a=[746, 210, 79, 55, 209, 111, 730, 422, 224, 211, 165, 953, 454, 688, 329, 742, 583], b=[56, 739, 895, 176, 688, 746, 111, 583, 329, 79, 478, 431, 209, 980, 503, 165]):\n    return sorted(set(a).intersection(set(b)))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#58",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CommonNumbers_7",
    "sat": "def sat(common: List[int], a=[836, 636, 440], b=[440, 183, 836]):\n    \"\"\"\n    Find numbers common to a and b\n    \"\"\"\n    return all((i in common) == (i in a and i in b) for i in a + b + common)",
    "sols": [
      "def sol(a=[836, 636, 440], b=[440, 183, 836]):\n    return sorted(set(a).intersection(set(b)))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#58",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CommonNumbers_8",
    "sat": "def sat(common: List[int], a=[254, 308, 416, 771, 539, 286, 743, 226, 245], b=[414, 846, 446, 253]):\n    \"\"\"\n    Find numbers common to a and b\n    \"\"\"\n    return all((i in common) == (i in a and i in b) for i in a + b + common)",
    "sols": [
      "def sol(a=[254, 308, 416, 771, 539, 286, 743, 226, 245], b=[414, 846, 446, 253]):\n    return sorted(set(a).intersection(set(b)))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#58",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CommonNumbers_9",
    "sat": "def sat(common: List[int], a=[675, 549, 565, 460, 699, 265, 262, 82, 989], b=[565, 781, 549, 675, 265, 994, 262, 82, 18, 308, 837, 699, 460, 989]):\n    \"\"\"\n    Find numbers common to a and b\n    \"\"\"\n    return all((i in common) == (i in a and i in b) for i in a + b + common)",
    "sols": [
      "def sol(a=[675, 549, 565, 460, 699, 265, 262, 82, 989], b=[565, 781, 549, 675, 265, 994, 262, 82, 18, 308, 837, 699, 460, 989]):\n    return sorted(set(a).intersection(set(b)))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#58",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LargestPrimeFactor_0",
    "sat": "def sat(p: int, n=101076):\n    \"\"\"\n    Find the largest prime factor of n.\n    \"\"\"\n\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return is_prime(p) and n % p == 0 and p > 0 and all(n % i or not is_prime(i) for i in range(p + 1, n))",
    "sols": [
      "def sol(n=101076):\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return next(n // i for i in range(1, n) if n % i == 0 and is_prime(n // i))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#59",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LargestPrimeFactor_1",
    "sat": "def sat(p: int, n=15132):\n    \"\"\"\n    Find the largest prime factor of n.\n    \"\"\"\n\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return is_prime(p) and n % p == 0 and p > 0 and all(n % i or not is_prime(i) for i in range(p + 1, n))",
    "sols": [
      "def sol(n=15132):\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return next(n // i for i in range(1, n) if n % i == 0 and is_prime(n // i))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#59",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LargestPrimeFactor_2",
    "sat": "def sat(p: int, n=22184):\n    \"\"\"\n    Find the largest prime factor of n.\n    \"\"\"\n\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return is_prime(p) and n % p == 0 and p > 0 and all(n % i or not is_prime(i) for i in range(p + 1, n))",
    "sols": [
      "def sol(n=22184):\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return next(n // i for i in range(1, n) if n % i == 0 and is_prime(n // i))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#59",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LargestPrimeFactor_3",
    "sat": "def sat(p: int, n=70875):\n    \"\"\"\n    Find the largest prime factor of n.\n    \"\"\"\n\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return is_prime(p) and n % p == 0 and p > 0 and all(n % i or not is_prime(i) for i in range(p + 1, n))",
    "sols": [
      "def sol(n=70875):\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return next(n // i for i in range(1, n) if n % i == 0 and is_prime(n // i))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#59",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LargestPrimeFactor_4",
    "sat": "def sat(p: int, n=63088):\n    \"\"\"\n    Find the largest prime factor of n.\n    \"\"\"\n\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return is_prime(p) and n % p == 0 and p > 0 and all(n % i or not is_prime(i) for i in range(p + 1, n))",
    "sols": [
      "def sol(n=63088):\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return next(n // i for i in range(1, n) if n % i == 0 and is_prime(n // i))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#59",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LargestPrimeFactor_5",
    "sat": "def sat(p: int, n=51223):\n    \"\"\"\n    Find the largest prime factor of n.\n    \"\"\"\n\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return is_prime(p) and n % p == 0 and p > 0 and all(n % i or not is_prime(i) for i in range(p + 1, n))",
    "sols": [
      "def sol(n=51223):\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return next(n // i for i in range(1, n) if n % i == 0 and is_prime(n // i))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#59",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LargestPrimeFactor_6",
    "sat": "def sat(p: int, n=85167):\n    \"\"\"\n    Find the largest prime factor of n.\n    \"\"\"\n\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return is_prime(p) and n % p == 0 and p > 0 and all(n % i or not is_prime(i) for i in range(p + 1, n))",
    "sols": [
      "def sol(n=85167):\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return next(n // i for i in range(1, n) if n % i == 0 and is_prime(n // i))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#59",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LargestPrimeFactor_7",
    "sat": "def sat(p: int, n=58405):\n    \"\"\"\n    Find the largest prime factor of n.\n    \"\"\"\n\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return is_prime(p) and n % p == 0 and p > 0 and all(n % i or not is_prime(i) for i in range(p + 1, n))",
    "sols": [
      "def sol(n=58405):\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return next(n // i for i in range(1, n) if n % i == 0 and is_prime(n // i))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#59",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LargestPrimeFactor_8",
    "sat": "def sat(p: int, n=69200):\n    \"\"\"\n    Find the largest prime factor of n.\n    \"\"\"\n\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return is_prime(p) and n % p == 0 and p > 0 and all(n % i or not is_prime(i) for i in range(p + 1, n))",
    "sols": [
      "def sol(n=69200):\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return next(n // i for i in range(1, n) if n % i == 0 and is_prime(n // i))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#59",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "LargestPrimeFactor_9",
    "sat": "def sat(p: int, n=86522):\n    \"\"\"\n    Find the largest prime factor of n.\n    \"\"\"\n\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return is_prime(p) and n % p == 0 and p > 0 and all(n % i or not is_prime(i) for i in range(p + 1, n))",
    "sols": [
      "def sol(n=86522):\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return next(n // i for i in range(1, n) if n % i == 0 and is_prime(n // i))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#59",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CumulativeSums_0",
    "sat": "def sat(sums: List[int], n=104):\n    \"\"\"\n    Find the sums of the integers from 1 to n\n    \"\"\"\n    return all(sums[i + 1] - sums[i] == i for i in range(n)) and sums[0] == 0",
    "sols": [
      "def sol(n=104):\n    ans = [0]\n    for i in range(n):\n        ans.append(ans[-1] + i)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#60",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CumulativeSums_1",
    "sat": "def sat(sums: List[int], n=19891):\n    \"\"\"\n    Find the sums of the integers from 1 to n\n    \"\"\"\n    return all(sums[i + 1] - sums[i] == i for i in range(n)) and sums[0] == 0",
    "sols": [
      "def sol(n=19891):\n    ans = [0]\n    for i in range(n):\n        ans.append(ans[-1] + i)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#60",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CumulativeSums_2",
    "sat": "def sat(sums: List[int], n=11023):\n    \"\"\"\n    Find the sums of the integers from 1 to n\n    \"\"\"\n    return all(sums[i + 1] - sums[i] == i for i in range(n)) and sums[0] == 0",
    "sols": [
      "def sol(n=11023):\n    ans = [0]\n    for i in range(n):\n        ans.append(ans[-1] + i)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#60",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CumulativeSums_3",
    "sat": "def sat(sums: List[int], n=10840):\n    \"\"\"\n    Find the sums of the integers from 1 to n\n    \"\"\"\n    return all(sums[i + 1] - sums[i] == i for i in range(n)) and sums[0] == 0",
    "sols": [
      "def sol(n=10840):\n    ans = [0]\n    for i in range(n):\n        ans.append(ans[-1] + i)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#60",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CumulativeSums_4",
    "sat": "def sat(sums: List[int], n=14049):\n    \"\"\"\n    Find the sums of the integers from 1 to n\n    \"\"\"\n    return all(sums[i + 1] - sums[i] == i for i in range(n)) and sums[0] == 0",
    "sols": [
      "def sol(n=14049):\n    ans = [0]\n    for i in range(n):\n        ans.append(ans[-1] + i)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#60",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CumulativeSums_5",
    "sat": "def sat(sums: List[int], n=11990):\n    \"\"\"\n    Find the sums of the integers from 1 to n\n    \"\"\"\n    return all(sums[i + 1] - sums[i] == i for i in range(n)) and sums[0] == 0",
    "sols": [
      "def sol(n=11990):\n    ans = [0]\n    for i in range(n):\n        ans.append(ans[-1] + i)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#60",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CumulativeSums_6",
    "sat": "def sat(sums: List[int], n=10416):\n    \"\"\"\n    Find the sums of the integers from 1 to n\n    \"\"\"\n    return all(sums[i + 1] - sums[i] == i for i in range(n)) and sums[0] == 0",
    "sols": [
      "def sol(n=10416):\n    ans = [0]\n    for i in range(n):\n        ans.append(ans[-1] + i)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#60",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CumulativeSums_7",
    "sat": "def sat(sums: List[int], n=17813):\n    \"\"\"\n    Find the sums of the integers from 1 to n\n    \"\"\"\n    return all(sums[i + 1] - sums[i] == i for i in range(n)) and sums[0] == 0",
    "sols": [
      "def sol(n=17813):\n    ans = [0]\n    for i in range(n):\n        ans.append(ans[-1] + i)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#60",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CumulativeSums_8",
    "sat": "def sat(sums: List[int], n=18684):\n    \"\"\"\n    Find the sums of the integers from 1 to n\n    \"\"\"\n    return all(sums[i + 1] - sums[i] == i for i in range(n)) and sums[0] == 0",
    "sols": [
      "def sol(n=18684):\n    ans = [0]\n    for i in range(n):\n        ans.append(ans[-1] + i)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#60",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CumulativeSums_9",
    "sat": "def sat(sums: List[int], n=6333):\n    \"\"\"\n    Find the sums of the integers from 1 to n\n    \"\"\"\n    return all(sums[i + 1] - sums[i] == i for i in range(n)) and sums[0] == 0",
    "sols": [
      "def sol(n=6333):\n    ans = [0]\n    for i in range(n):\n        ans.append(ans[-1] + i)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#60",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ParenDepth_0",
    "sat": "def sat(matches: List[int], parens=\"((())()(()()))(())\"):\n    \"\"\"\n    Find the index of the matching parentheses for each character in the string\n    \"\"\"\n    for i, (j, c) in enumerate(zip(matches, parens)):\n        assert parens[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(parens)",
    "sols": [
      "def sol(parens=\"((())()(()()))(())\"):\n    matches = [-1] * len(parens)\n    opens = []\n    for i, c in enumerate(parens):\n        if c == \"(\":\n            opens.append(i)\n        else:\n            assert c == \")\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#61\n\nNote that problems 61 and 56 are essentially the same",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ParenDepth_1",
    "sat": "def sat(matches: List[int], parens=\"\"):\n    \"\"\"\n    Find the index of the matching parentheses for each character in the string\n    \"\"\"\n    for i, (j, c) in enumerate(zip(matches, parens)):\n        assert parens[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(parens)",
    "sols": [
      "def sol(parens=\"\"):\n    matches = [-1] * len(parens)\n    opens = []\n    for i, c in enumerate(parens):\n        if c == \"(\":\n            opens.append(i)\n        else:\n            assert c == \")\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#61\n\nNote that problems 61 and 56 are essentially the same",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ParenDepth_2",
    "sat": "def sat(matches: List[int], parens=\"()\"):\n    \"\"\"\n    Find the index of the matching parentheses for each character in the string\n    \"\"\"\n    for i, (j, c) in enumerate(zip(matches, parens)):\n        assert parens[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(parens)",
    "sols": [
      "def sol(parens=\"()\"):\n    matches = [-1] * len(parens)\n    opens = []\n    for i, c in enumerate(parens):\n        if c == \"(\":\n            opens.append(i)\n        else:\n            assert c == \")\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#61\n\nNote that problems 61 and 56 are essentially the same",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ParenDepth_3",
    "sat": "def sat(matches: List[int], parens=\"((()(())))\"):\n    \"\"\"\n    Find the index of the matching parentheses for each character in the string\n    \"\"\"\n    for i, (j, c) in enumerate(zip(matches, parens)):\n        assert parens[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(parens)",
    "sols": [
      "def sol(parens=\"((()(())))\"):\n    matches = [-1] * len(parens)\n    opens = []\n    for i, c in enumerate(parens):\n        if c == \"(\":\n            opens.append(i)\n        else:\n            assert c == \")\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#61\n\nNote that problems 61 and 56 are essentially the same",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ParenDepth_4",
    "sat": "def sat(matches: List[int], parens=\"(())\"):\n    \"\"\"\n    Find the index of the matching parentheses for each character in the string\n    \"\"\"\n    for i, (j, c) in enumerate(zip(matches, parens)):\n        assert parens[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(parens)",
    "sols": [
      "def sol(parens=\"(())\"):\n    matches = [-1] * len(parens)\n    opens = []\n    for i, c in enumerate(parens):\n        if c == \"(\":\n            opens.append(i)\n        else:\n            assert c == \")\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#61\n\nNote that problems 61 and 56 are essentially the same",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ParenDepth_5",
    "sat": "def sat(matches: List[int], parens=\"()()(())\"):\n    \"\"\"\n    Find the index of the matching parentheses for each character in the string\n    \"\"\"\n    for i, (j, c) in enumerate(zip(matches, parens)):\n        assert parens[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(parens)",
    "sols": [
      "def sol(parens=\"()()(())\"):\n    matches = [-1] * len(parens)\n    opens = []\n    for i, c in enumerate(parens):\n        if c == \"(\":\n            opens.append(i)\n        else:\n            assert c == \")\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#61\n\nNote that problems 61 and 56 are essentially the same",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ParenDepth_6",
    "sat": "def sat(matches: List[int], parens=\"(())()\"):\n    \"\"\"\n    Find the index of the matching parentheses for each character in the string\n    \"\"\"\n    for i, (j, c) in enumerate(zip(matches, parens)):\n        assert parens[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(parens)",
    "sols": [
      "def sol(parens=\"(())()\"):\n    matches = [-1] * len(parens)\n    opens = []\n    for i, c in enumerate(parens):\n        if c == \"(\":\n            opens.append(i)\n        else:\n            assert c == \")\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#61\n\nNote that problems 61 and 56 are essentially the same",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ParenDepth_7",
    "sat": "def sat(matches: List[int], parens=\"()()()\"):\n    \"\"\"\n    Find the index of the matching parentheses for each character in the string\n    \"\"\"\n    for i, (j, c) in enumerate(zip(matches, parens)):\n        assert parens[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(parens)",
    "sols": [
      "def sol(parens=\"()()()\"):\n    matches = [-1] * len(parens)\n    opens = []\n    for i, c in enumerate(parens):\n        if c == \"(\":\n            opens.append(i)\n        else:\n            assert c == \")\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#61\n\nNote that problems 61 and 56 are essentially the same",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ParenDepth_8",
    "sat": "def sat(matches: List[int], parens=\"()(()(()()))\"):\n    \"\"\"\n    Find the index of the matching parentheses for each character in the string\n    \"\"\"\n    for i, (j, c) in enumerate(zip(matches, parens)):\n        assert parens[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(parens)",
    "sols": [
      "def sol(parens=\"()(()(()()))\"):\n    matches = [-1] * len(parens)\n    opens = []\n    for i, c in enumerate(parens):\n        if c == \"(\":\n            opens.append(i)\n        else:\n            assert c == \")\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#61\n\nNote that problems 61 and 56 are essentially the same",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ParenDepth_9",
    "sat": "def sat(matches: List[int], parens=\"(())()()()()(())\"):\n    \"\"\"\n    Find the index of the matching parentheses for each character in the string\n    \"\"\"\n    for i, (j, c) in enumerate(zip(matches, parens)):\n        assert parens[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(parens)",
    "sols": [
      "def sol(parens=\"(())()()()()(())\"):\n    matches = [-1] * len(parens)\n    opens = []\n    for i, c in enumerate(parens):\n        if c == \"(\":\n            opens.append(i)\n        else:\n            assert c == \")\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#61\n\nNote that problems 61 and 56 are essentially the same",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Derivative_0",
    "sat": "def sat(derivative: List[int], poly=[2, 1, 0, 4, 19, 231, 0, 5]):\n    \"\"\"\n    Find the derivative of the given polynomial, with coefficients in order of increasing degree\n    \"\"\"\n\n    def val(poly, x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(poly))\n\n    return all(abs(val(poly, x + 1e-8) - val(poly, x) - 1e-8 * val(derivative, x)) < 1e-4 for x in range(len(poly)))",
    "sols": [
      "def sol(poly=[2, 1, 0, 4, 19, 231, 0, 5]):\n    return [i * poly[i] for i in range(1, len(poly))]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#62",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Derivative_1",
    "sat": "def sat(derivative: List[int], poly=[6, -7, -8, 3]):\n    \"\"\"\n    Find the derivative of the given polynomial, with coefficients in order of increasing degree\n    \"\"\"\n\n    def val(poly, x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(poly))\n\n    return all(abs(val(poly, x + 1e-8) - val(poly, x) - 1e-8 * val(derivative, x)) < 1e-4 for x in range(len(poly)))",
    "sols": [
      "def sol(poly=[6, -7, -8, 3]):\n    return [i * poly[i] for i in range(1, len(poly))]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#62",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Derivative_2",
    "sat": "def sat(derivative: List[int], poly=[-5, 5, -6, 7]):\n    \"\"\"\n    Find the derivative of the given polynomial, with coefficients in order of increasing degree\n    \"\"\"\n\n    def val(poly, x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(poly))\n\n    return all(abs(val(poly, x + 1e-8) - val(poly, x) - 1e-8 * val(derivative, x)) < 1e-4 for x in range(len(poly)))",
    "sols": [
      "def sol(poly=[-5, 5, -6, 7]):\n    return [i * poly[i] for i in range(1, len(poly))]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#62",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Derivative_3",
    "sat": "def sat(derivative: List[int], poly=[-8, 2, 1, -8, 9, -10, -2, -7, -10]):\n    \"\"\"\n    Find the derivative of the given polynomial, with coefficients in order of increasing degree\n    \"\"\"\n\n    def val(poly, x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(poly))\n\n    return all(abs(val(poly, x + 1e-8) - val(poly, x) - 1e-8 * val(derivative, x)) < 1e-4 for x in range(len(poly)))",
    "sols": [
      "def sol(poly=[-8, 2, 1, -8, 9, -10, -2, -7, -10]):\n    return [i * poly[i] for i in range(1, len(poly))]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#62",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Derivative_4",
    "sat": "def sat(derivative: List[int], poly=[5, -1, -4, -2, 7, -9, 3, 9]):\n    \"\"\"\n    Find the derivative of the given polynomial, with coefficients in order of increasing degree\n    \"\"\"\n\n    def val(poly, x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(poly))\n\n    return all(abs(val(poly, x + 1e-8) - val(poly, x) - 1e-8 * val(derivative, x)) < 1e-4 for x in range(len(poly)))",
    "sols": [
      "def sol(poly=[5, -1, -4, -2, 7, -9, 3, 9]):\n    return [i * poly[i] for i in range(1, len(poly))]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#62",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Derivative_5",
    "sat": "def sat(derivative: List[int], poly=[4, -2, 1]):\n    \"\"\"\n    Find the derivative of the given polynomial, with coefficients in order of increasing degree\n    \"\"\"\n\n    def val(poly, x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(poly))\n\n    return all(abs(val(poly, x + 1e-8) - val(poly, x) - 1e-8 * val(derivative, x)) < 1e-4 for x in range(len(poly)))",
    "sols": [
      "def sol(poly=[4, -2, 1]):\n    return [i * poly[i] for i in range(1, len(poly))]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#62",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Derivative_6",
    "sat": "def sat(derivative: List[int], poly=[-10, -3, -4]):\n    \"\"\"\n    Find the derivative of the given polynomial, with coefficients in order of increasing degree\n    \"\"\"\n\n    def val(poly, x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(poly))\n\n    return all(abs(val(poly, x + 1e-8) - val(poly, x) - 1e-8 * val(derivative, x)) < 1e-4 for x in range(len(poly)))",
    "sols": [
      "def sol(poly=[-10, -3, -4]):\n    return [i * poly[i] for i in range(1, len(poly))]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#62",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Derivative_7",
    "sat": "def sat(derivative: List[int], poly=[-3]):\n    \"\"\"\n    Find the derivative of the given polynomial, with coefficients in order of increasing degree\n    \"\"\"\n\n    def val(poly, x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(poly))\n\n    return all(abs(val(poly, x + 1e-8) - val(poly, x) - 1e-8 * val(derivative, x)) < 1e-4 for x in range(len(poly)))",
    "sols": [
      "def sol(poly=[-3]):\n    return [i * poly[i] for i in range(1, len(poly))]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#62",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Derivative_8",
    "sat": "def sat(derivative: List[int], poly=[3, -7, -10, -1, 6, -9, 0]):\n    \"\"\"\n    Find the derivative of the given polynomial, with coefficients in order of increasing degree\n    \"\"\"\n\n    def val(poly, x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(poly))\n\n    return all(abs(val(poly, x + 1e-8) - val(poly, x) - 1e-8 * val(derivative, x)) < 1e-4 for x in range(len(poly)))",
    "sols": [
      "def sol(poly=[3, -7, -10, -1, 6, -9, 0]):\n    return [i * poly[i] for i in range(1, len(poly))]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#62",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Derivative_9",
    "sat": "def sat(derivative: List[int], poly=[-1, -8, -4]):\n    \"\"\"\n    Find the derivative of the given polynomial, with coefficients in order of increasing degree\n    \"\"\"\n\n    def val(poly, x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(poly))\n\n    return all(abs(val(poly, x + 1e-8) - val(poly, x) - 1e-8 * val(derivative, x)) < 1e-4 for x in range(len(poly)))",
    "sols": [
      "def sol(poly=[-1, -8, -4]):\n    return [i * poly[i] for i in range(1, len(poly))]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#62",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fib3_0",
    "sat": "def sat(init: List[int], target=124156):\n    \"\"\"\n    Define a triple-Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    three. Given a target number, find an initial triple such that the 17th number in the sequence is the\n    given target number.\n    \"\"\"\n    a, b, c = init\n    for i in range(16):\n        a, b, c = b, c, (a + b + c)\n    return a == target",
    "sols": [
      "def sol(target=124156):\n    nums = [target, 0, 0]\n    for i in range(16):\n        x = nums[-1] - sum(nums[:-1])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:-1]\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#63\n\nAlmost identical to problem 46",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fib3_1",
    "sat": "def sat(init: List[int], target=4050):\n    \"\"\"\n    Define a triple-Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    three. Given a target number, find an initial triple such that the 17th number in the sequence is the\n    given target number.\n    \"\"\"\n    a, b, c = init\n    for i in range(16):\n        a, b, c = b, c, (a + b + c)\n    return a == target",
    "sols": [
      "def sol(target=4050):\n    nums = [target, 0, 0]\n    for i in range(16):\n        x = nums[-1] - sum(nums[:-1])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:-1]\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#63\n\nAlmost identical to problem 46",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fib3_2",
    "sat": "def sat(init: List[int], target=0):\n    \"\"\"\n    Define a triple-Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    three. Given a target number, find an initial triple such that the 17th number in the sequence is the\n    given target number.\n    \"\"\"\n    a, b, c = init\n    for i in range(16):\n        a, b, c = b, c, (a + b + c)\n    return a == target",
    "sols": [
      "def sol(target=0):\n    nums = [target, 0, 0]\n    for i in range(16):\n        x = nums[-1] - sum(nums[:-1])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:-1]\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#63\n\nAlmost identical to problem 46",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fib3_3",
    "sat": "def sat(init: List[int], target=4644):\n    \"\"\"\n    Define a triple-Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    three. Given a target number, find an initial triple such that the 17th number in the sequence is the\n    given target number.\n    \"\"\"\n    a, b, c = init\n    for i in range(16):\n        a, b, c = b, c, (a + b + c)\n    return a == target",
    "sols": [
      "def sol(target=4644):\n    nums = [target, 0, 0]\n    for i in range(16):\n        x = nums[-1] - sum(nums[:-1])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:-1]\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#63\n\nAlmost identical to problem 46",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fib3_4",
    "sat": "def sat(init: List[int], target=3):\n    \"\"\"\n    Define a triple-Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    three. Given a target number, find an initial triple such that the 17th number in the sequence is the\n    given target number.\n    \"\"\"\n    a, b, c = init\n    for i in range(16):\n        a, b, c = b, c, (a + b + c)\n    return a == target",
    "sols": [
      "def sol(target=3):\n    nums = [target, 0, 0]\n    for i in range(16):\n        x = nums[-1] - sum(nums[:-1])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:-1]\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#63\n\nAlmost identical to problem 46",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fib3_5",
    "sat": "def sat(init: List[int], target=1124):\n    \"\"\"\n    Define a triple-Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    three. Given a target number, find an initial triple such that the 17th number in the sequence is the\n    given target number.\n    \"\"\"\n    a, b, c = init\n    for i in range(16):\n        a, b, c = b, c, (a + b + c)\n    return a == target",
    "sols": [
      "def sol(target=1124):\n    nums = [target, 0, 0]\n    for i in range(16):\n        x = nums[-1] - sum(nums[:-1])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:-1]\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#63\n\nAlmost identical to problem 46",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fib3_6",
    "sat": "def sat(init: List[int], target=583):\n    \"\"\"\n    Define a triple-Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    three. Given a target number, find an initial triple such that the 17th number in the sequence is the\n    given target number.\n    \"\"\"\n    a, b, c = init\n    for i in range(16):\n        a, b, c = b, c, (a + b + c)\n    return a == target",
    "sols": [
      "def sol(target=583):\n    nums = [target, 0, 0]\n    for i in range(16):\n        x = nums[-1] - sum(nums[:-1])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:-1]\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#63\n\nAlmost identical to problem 46",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fib3_7",
    "sat": "def sat(init: List[int], target=79):\n    \"\"\"\n    Define a triple-Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    three. Given a target number, find an initial triple such that the 17th number in the sequence is the\n    given target number.\n    \"\"\"\n    a, b, c = init\n    for i in range(16):\n        a, b, c = b, c, (a + b + c)\n    return a == target",
    "sols": [
      "def sol(target=79):\n    nums = [target, 0, 0]\n    for i in range(16):\n        x = nums[-1] - sum(nums[:-1])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:-1]\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#63\n\nAlmost identical to problem 46",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fib3_8",
    "sat": "def sat(init: List[int], target=3745):\n    \"\"\"\n    Define a triple-Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    three. Given a target number, find an initial triple such that the 17th number in the sequence is the\n    given target number.\n    \"\"\"\n    a, b, c = init\n    for i in range(16):\n        a, b, c = b, c, (a + b + c)\n    return a == target",
    "sols": [
      "def sol(target=3745):\n    nums = [target, 0, 0]\n    for i in range(16):\n        x = nums[-1] - sum(nums[:-1])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:-1]\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#63\n\nAlmost identical to problem 46",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Fib3_9",
    "sat": "def sat(init: List[int], target=22):\n    \"\"\"\n    Define a triple-Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    three. Given a target number, find an initial triple such that the 17th number in the sequence is the\n    given target number.\n    \"\"\"\n    a, b, c = init\n    for i in range(16):\n        a, b, c = b, c, (a + b + c)\n    return a == target",
    "sols": [
      "def sol(target=22):\n    nums = [target, 0, 0]\n    for i in range(16):\n        x = nums[-1] - sum(nums[:-1])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:-1]\n    return nums"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#63\n\nAlmost identical to problem 46",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindVowels_0",
    "sat": "def sat(vowels: str, text=\"Hello, world!\"):\n    \"\"\"\n    Find the vowels from the original string.\n    \"\"\"\n    i = 0\n    for j, c in enumerate(text):\n        if c.lower() in \"aeiou\" or c.lower() == 'y' and j == len(text) - 1:\n            assert vowels[i] == c\n            i += 1\n    return i == len(vowels)",
    "sols": [
      "def sol(text=\"Hello, world!\"):\n    return \"\".join(c for c in text if c.lower() in \"aeiou\") + (text[-1] if text[-1].lower() == \"y\" else \"\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#64",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindVowels_1",
    "sat": "def sat(vowels: str, text=\"rifyXajAhevIchiDu\"):\n    \"\"\"\n    Find the vowels from the original string.\n    \"\"\"\n    i = 0\n    for j, c in enumerate(text):\n        if c.lower() in \"aeiou\" or c.lower() == 'y' and j == len(text) - 1:\n            assert vowels[i] == c\n            i += 1\n    return i == len(vowels)",
    "sols": [
      "def sol(text=\"rifyXajAhevIchiDu\"):\n    return \"\".join(c for c in text if c.lower() in \"aeiou\") + (text[-1] if text[-1].lower() == \"y\" else \"\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#64",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindVowels_2",
    "sat": "def sat(vowels: str, text=\"fakYmAjEhEJU\"):\n    \"\"\"\n    Find the vowels from the original string.\n    \"\"\"\n    i = 0\n    for j, c in enumerate(text):\n        if c.lower() in \"aeiou\" or c.lower() == 'y' and j == len(text) - 1:\n            assert vowels[i] == c\n            i += 1\n    return i == len(vowels)",
    "sols": [
      "def sol(text=\"fakYmAjEhEJU\"):\n    return \"\".join(c for c in text if c.lower() in \"aeiou\") + (text[-1] if text[-1].lower() == \"y\" else \"\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#64",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindVowels_3",
    "sat": "def sat(vowels: str, text=\"TexTAkOQ\"):\n    \"\"\"\n    Find the vowels from the original string.\n    \"\"\"\n    i = 0\n    for j, c in enumerate(text):\n        if c.lower() in \"aeiou\" or c.lower() == 'y' and j == len(text) - 1:\n            assert vowels[i] == c\n            i += 1\n    return i == len(vowels)",
    "sols": [
      "def sol(text=\"TexTAkOQ\"):\n    return \"\".join(c for c in text if c.lower() in \"aeiou\") + (text[-1] if text[-1].lower() == \"y\" else \"\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#64",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindVowels_4",
    "sat": "def sat(vowels: str, text=\"jIGIbYcHetYn\"):\n    \"\"\"\n    Find the vowels from the original string.\n    \"\"\"\n    i = 0\n    for j, c in enumerate(text):\n        if c.lower() in \"aeiou\" or c.lower() == 'y' and j == len(text) - 1:\n            assert vowels[i] == c\n            i += 1\n    return i == len(vowels)",
    "sols": [
      "def sol(text=\"jIGIbYcHetYn\"):\n    return \"\".join(c for c in text if c.lower() in \"aeiou\") + (text[-1] if text[-1].lower() == \"y\" else \"\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#64",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindVowels_5",
    "sat": "def sat(vowels: str, text=\"TEbolOWUZ\"):\n    \"\"\"\n    Find the vowels from the original string.\n    \"\"\"\n    i = 0\n    for j, c in enumerate(text):\n        if c.lower() in \"aeiou\" or c.lower() == 'y' and j == len(text) - 1:\n            assert vowels[i] == c\n            i += 1\n    return i == len(vowels)",
    "sols": [
      "def sol(text=\"TEbolOWUZ\"):\n    return \"\".join(c for c in text if c.lower() in \"aeiou\") + (text[-1] if text[-1].lower() == \"y\" else \"\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#64",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindVowels_6",
    "sat": "def sat(vowels: str, text=\"seViThoXupyfUDeFiQ\"):\n    \"\"\"\n    Find the vowels from the original string.\n    \"\"\"\n    i = 0\n    for j, c in enumerate(text):\n        if c.lower() in \"aeiou\" or c.lower() == 'y' and j == len(text) - 1:\n            assert vowels[i] == c\n            i += 1\n    return i == len(vowels)",
    "sols": [
      "def sol(text=\"seViThoXupyfUDeFiQ\"):\n    return \"\".join(c for c in text if c.lower() in \"aeiou\") + (text[-1] if text[-1].lower() == \"y\" else \"\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#64",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindVowels_7",
    "sat": "def sat(vowels: str, text=\"qUApAcOLe\"):\n    \"\"\"\n    Find the vowels from the original string.\n    \"\"\"\n    i = 0\n    for j, c in enumerate(text):\n        if c.lower() in \"aeiou\" or c.lower() == 'y' and j == len(text) - 1:\n            assert vowels[i] == c\n            i += 1\n    return i == len(vowels)",
    "sols": [
      "def sol(text=\"qUApAcOLe\"):\n    return \"\".join(c for c in text if c.lower() in \"aeiou\") + (text[-1] if text[-1].lower() == \"y\" else \"\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#64",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindVowels_8",
    "sat": "def sat(vowels: str, text=\"TeXTiTUDixy\"):\n    \"\"\"\n    Find the vowels from the original string.\n    \"\"\"\n    i = 0\n    for j, c in enumerate(text):\n        if c.lower() in \"aeiou\" or c.lower() == 'y' and j == len(text) - 1:\n            assert vowels[i] == c\n            i += 1\n    return i == len(vowels)",
    "sols": [
      "def sol(text=\"TeXTiTUDixy\"):\n    return \"\".join(c for c in text if c.lower() in \"aeiou\") + (text[-1] if text[-1].lower() == \"y\" else \"\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#64",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindVowels_9",
    "sat": "def sat(vowels: str, text=\"NiG\"):\n    \"\"\"\n    Find the vowels from the original string.\n    \"\"\"\n    i = 0\n    for j, c in enumerate(text):\n        if c.lower() in \"aeiou\" or c.lower() == 'y' and j == len(text) - 1:\n            assert vowels[i] == c\n            i += 1\n    return i == len(vowels)",
    "sols": [
      "def sol(text=\"NiG\"):\n    return \"\".join(c for c in text if c.lower() in \"aeiou\") + (text[-1] if text[-1].lower() == \"y\" else \"\")"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#64",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CircularShiftNum_0",
    "sat": "def sat(shifted: str, n=124582369835, shift=3):\n    \"\"\"\n    Shift the decimal digits n places to the left, wrapping the extra digits around. If shift > the number of\n    digits of n, reverse the string.\n    \"\"\"\n    if shift > len(str(n)):\n        return n == int(shifted[::-1])\n    return n == int(shifted[-shift:] + shifted[:-shift])",
    "sols": [
      "def sol(n=124582369835, shift=3):\n    s = str(n)\n    if shift > len(s):\n        return s[::-1]\n    return s[shift:] + s[:shift]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#65",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CircularShiftNum_1",
    "sat": "def sat(shifted: str, n=6852918492, shift=12):\n    \"\"\"\n    Shift the decimal digits n places to the left, wrapping the extra digits around. If shift > the number of\n    digits of n, reverse the string.\n    \"\"\"\n    if shift > len(str(n)):\n        return n == int(shifted[::-1])\n    return n == int(shifted[-shift:] + shifted[:-shift])",
    "sols": [
      "def sol(n=6852918492, shift=12):\n    s = str(n)\n    if shift > len(s):\n        return s[::-1]\n    return s[shift:] + s[:shift]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#65",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CircularShiftNum_2",
    "sat": "def sat(shifted: str, n=32928510691049616, shift=28):\n    \"\"\"\n    Shift the decimal digits n places to the left, wrapping the extra digits around. If shift > the number of\n    digits of n, reverse the string.\n    \"\"\"\n    if shift > len(str(n)):\n        return n == int(shifted[::-1])\n    return n == int(shifted[-shift:] + shifted[:-shift])",
    "sols": [
      "def sol(n=32928510691049616, shift=28):\n    s = str(n)\n    if shift > len(s):\n        return s[::-1]\n    return s[shift:] + s[:shift]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#65",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CircularShiftNum_3",
    "sat": "def sat(shifted: str, n=237, shift=26):\n    \"\"\"\n    Shift the decimal digits n places to the left, wrapping the extra digits around. If shift > the number of\n    digits of n, reverse the string.\n    \"\"\"\n    if shift > len(str(n)):\n        return n == int(shifted[::-1])\n    return n == int(shifted[-shift:] + shifted[:-shift])",
    "sols": [
      "def sol(n=237, shift=26):\n    s = str(n)\n    if shift > len(s):\n        return s[::-1]\n    return s[shift:] + s[:shift]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#65",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CircularShiftNum_4",
    "sat": "def sat(shifted: str, n=6, shift=26):\n    \"\"\"\n    Shift the decimal digits n places to the left, wrapping the extra digits around. If shift > the number of\n    digits of n, reverse the string.\n    \"\"\"\n    if shift > len(str(n)):\n        return n == int(shifted[::-1])\n    return n == int(shifted[-shift:] + shifted[:-shift])",
    "sols": [
      "def sol(n=6, shift=26):\n    s = str(n)\n    if shift > len(s):\n        return s[::-1]\n    return s[shift:] + s[:shift]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#65",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CircularShiftNum_5",
    "sat": "def sat(shifted: str, n=87805754, shift=4):\n    \"\"\"\n    Shift the decimal digits n places to the left, wrapping the extra digits around. If shift > the number of\n    digits of n, reverse the string.\n    \"\"\"\n    if shift > len(str(n)):\n        return n == int(shifted[::-1])\n    return n == int(shifted[-shift:] + shifted[:-shift])",
    "sols": [
      "def sol(n=87805754, shift=4):\n    s = str(n)\n    if shift > len(s):\n        return s[::-1]\n    return s[shift:] + s[:shift]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#65",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CircularShiftNum_6",
    "sat": "def sat(shifted: str, n=3211412876, shift=5):\n    \"\"\"\n    Shift the decimal digits n places to the left, wrapping the extra digits around. If shift > the number of\n    digits of n, reverse the string.\n    \"\"\"\n    if shift > len(str(n)):\n        return n == int(shifted[::-1])\n    return n == int(shifted[-shift:] + shifted[:-shift])",
    "sols": [
      "def sol(n=3211412876, shift=5):\n    s = str(n)\n    if shift > len(s):\n        return s[::-1]\n    return s[shift:] + s[:shift]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#65",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CircularShiftNum_7",
    "sat": "def sat(shifted: str, n=0, shift=12):\n    \"\"\"\n    Shift the decimal digits n places to the left, wrapping the extra digits around. If shift > the number of\n    digits of n, reverse the string.\n    \"\"\"\n    if shift > len(str(n)):\n        return n == int(shifted[::-1])\n    return n == int(shifted[-shift:] + shifted[:-shift])",
    "sols": [
      "def sol(n=0, shift=12):\n    s = str(n)\n    if shift > len(s):\n        return s[::-1]\n    return s[shift:] + s[:shift]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#65",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CircularShiftNum_8",
    "sat": "def sat(shifted: str, n=754948761, shift=18):\n    \"\"\"\n    Shift the decimal digits n places to the left, wrapping the extra digits around. If shift > the number of\n    digits of n, reverse the string.\n    \"\"\"\n    if shift > len(str(n)):\n        return n == int(shifted[::-1])\n    return n == int(shifted[-shift:] + shifted[:-shift])",
    "sols": [
      "def sol(n=754948761, shift=18):\n    s = str(n)\n    if shift > len(s):\n        return s[::-1]\n    return s[shift:] + s[:shift]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#65",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CircularShiftNum_9",
    "sat": "def sat(shifted: str, n=8661, shift=14):\n    \"\"\"\n    Shift the decimal digits n places to the left, wrapping the extra digits around. If shift > the number of\n    digits of n, reverse the string.\n    \"\"\"\n    if shift > len(str(n)):\n        return n == int(shifted[::-1])\n    return n == int(shifted[-shift:] + shifted[:-shift])",
    "sols": [
      "def sol(n=8661, shift=14):\n    s = str(n)\n    if shift > len(s):\n        return s[::-1]\n    return s[shift:] + s[:shift]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#65",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CharSum_0",
    "sat": "def sat(tot: int, s=\"Add ME uP AND YOU WILL GET A BIG NUMBER!\"):\n    \"\"\"\n    Compute the sum of the ASCII values of the upper-case characters in the string.\n    \"\"\"\n    for c in s:\n        if c.isupper():\n            tot -= ord(c)\n    return tot == 0",
    "sols": [
      "def sol(s=\"Add ME uP AND YOU WILL GET A BIG NUMBER!\"):\n    return sum(ord(c) for c in s if c.isupper())"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#66",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CharSum_1",
    "sat": "def sat(tot: int, s=\"VRkmX=(1oF#l\"):\n    \"\"\"\n    Compute the sum of the ASCII values of the upper-case characters in the string.\n    \"\"\"\n    for c in s:\n        if c.isupper():\n            tot -= ord(c)\n    return tot == 0",
    "sols": [
      "def sol(s=\"VRkmX=(1oF#l\"):\n    return sum(ord(c) for c in s if c.isupper())"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#66",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CharSum_2",
    "sat": "def sat(tot: int, s=\"*?sAJJ;FY8c!7zFwA\"):\n    \"\"\"\n    Compute the sum of the ASCII values of the upper-case characters in the string.\n    \"\"\"\n    for c in s:\n        if c.isupper():\n            tot -= ord(c)\n    return tot == 0",
    "sols": [
      "def sol(s=\"*?sAJJ;FY8c!7zFwA\"):\n    return sum(ord(c) for c in s if c.isupper())"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#66",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CharSum_3",
    "sat": "def sat(tot: int, s=\"Vmv%e8d3P\"):\n    \"\"\"\n    Compute the sum of the ASCII values of the upper-case characters in the string.\n    \"\"\"\n    for c in s:\n        if c.isupper():\n            tot -= ord(c)\n    return tot == 0",
    "sols": [
      "def sol(s=\"Vmv%e8d3P\"):\n    return sum(ord(c) for c in s if c.isupper())"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#66",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CharSum_4",
    "sat": "def sat(tot: int, s=\"K8B\"):\n    \"\"\"\n    Compute the sum of the ASCII values of the upper-case characters in the string.\n    \"\"\"\n    for c in s:\n        if c.isupper():\n            tot -= ord(c)\n    return tot == 0",
    "sols": [
      "def sol(s=\"K8B\"):\n    return sum(ord(c) for c in s if c.isupper())"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#66",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CharSum_5",
    "sat": "def sat(tot: int, s=\"/u%@\"):\n    \"\"\"\n    Compute the sum of the ASCII values of the upper-case characters in the string.\n    \"\"\"\n    for c in s:\n        if c.isupper():\n            tot -= ord(c)\n    return tot == 0",
    "sols": [
      "def sol(s=\"/u%@\"):\n    return sum(ord(c) for c in s if c.isupper())"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#66",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CharSum_6",
    "sat": "def sat(tot: int, s=\"$|Om9UQ(Q\"):\n    \"\"\"\n    Compute the sum of the ASCII values of the upper-case characters in the string.\n    \"\"\"\n    for c in s:\n        if c.isupper():\n            tot -= ord(c)\n    return tot == 0",
    "sols": [
      "def sol(s=\"$|Om9UQ(Q\"):\n    return sum(ord(c) for c in s if c.isupper())"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#66",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CharSum_7",
    "sat": "def sat(tot: int, s=\"Z]SOPL2\"):\n    \"\"\"\n    Compute the sum of the ASCII values of the upper-case characters in the string.\n    \"\"\"\n    for c in s:\n        if c.isupper():\n            tot -= ord(c)\n    return tot == 0",
    "sols": [
      "def sol(s=\"Z]SOPL2\"):\n    return sum(ord(c) for c in s if c.isupper())"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#66",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CharSum_8",
    "sat": "def sat(tot: int, s=\"H;>7pR;RNj\"):\n    \"\"\"\n    Compute the sum of the ASCII values of the upper-case characters in the string.\n    \"\"\"\n    for c in s:\n        if c.isupper():\n            tot -= ord(c)\n    return tot == 0",
    "sols": [
      "def sol(s=\"H;>7pR;RNj\"):\n    return sum(ord(c) for c in s if c.isupper())"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#66",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CharSum_9",
    "sat": "def sat(tot: int, s=\"P5kSxb2thSWa\"):\n    \"\"\"\n    Compute the sum of the ASCII values of the upper-case characters in the string.\n    \"\"\"\n    for c in s:\n        if c.isupper():\n            tot -= ord(c)\n    return tot == 0",
    "sols": [
      "def sol(s=\"P5kSxb2thSWa\"):\n    return sum(ord(c) for c in s if c.isupper())"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#66",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MissingBananas_0",
    "sat": "def sat(bananas: int, bowl=\"5024 apples and 12189 oranges\", total=12491241):\n    \"\"\"\n    Determine how many bananas are necessary to reach a certain total amount of fruit\n    \"\"\"\n    bowl += f\" and {bananas} bananas\"\n    return sum([int(s) for s in bowl.split() if s.isdigit()]) == total",
    "sols": [
      "def sol(bowl=\"5024 apples and 12189 oranges\", total=12491241):\n    apples, oranges = [int(s) for s in bowl.split() if s.isdigit()]\n    return total - apples - oranges"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#67",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MissingBananas_1",
    "sat": "def sat(bananas: int, bowl=\"7 apples and 9 oranges\", total=21):\n    \"\"\"\n    Determine how many bananas are necessary to reach a certain total amount of fruit\n    \"\"\"\n    bowl += f\" and {bananas} bananas\"\n    return sum([int(s) for s in bowl.split() if s.isdigit()]) == total",
    "sols": [
      "def sol(bowl=\"7 apples and 9 oranges\", total=21):\n    apples, oranges = [int(s) for s in bowl.split() if s.isdigit()]\n    return total - apples - oranges"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#67",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MissingBananas_2",
    "sat": "def sat(bananas: int, bowl=\"508738582 apples and 346410095 oranges\", total=1452490389):\n    \"\"\"\n    Determine how many bananas are necessary to reach a certain total amount of fruit\n    \"\"\"\n    bowl += f\" and {bananas} bananas\"\n    return sum([int(s) for s in bowl.split() if s.isdigit()]) == total",
    "sols": [
      "def sol(bowl=\"508738582 apples and 346410095 oranges\", total=1452490389):\n    apples, oranges = [int(s) for s in bowl.split() if s.isdigit()]\n    return total - apples - oranges"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#67",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MissingBananas_3",
    "sat": "def sat(bananas: int, bowl=\"28767 apples and 49488 oranges\", total=112303):\n    \"\"\"\n    Determine how many bananas are necessary to reach a certain total amount of fruit\n    \"\"\"\n    bowl += f\" and {bananas} bananas\"\n    return sum([int(s) for s in bowl.split() if s.isdigit()]) == total",
    "sols": [
      "def sol(bowl=\"28767 apples and 49488 oranges\", total=112303):\n    apples, oranges = [int(s) for s in bowl.split() if s.isdigit()]\n    return total - apples - oranges"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#67",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MissingBananas_4",
    "sat": "def sat(bananas: int, bowl=\"29991 apples and 99737 oranges\", total=155600):\n    \"\"\"\n    Determine how many bananas are necessary to reach a certain total amount of fruit\n    \"\"\"\n    bowl += f\" and {bananas} bananas\"\n    return sum([int(s) for s in bowl.split() if s.isdigit()]) == total",
    "sols": [
      "def sol(bowl=\"29991 apples and 99737 oranges\", total=155600):\n    apples, oranges = [int(s) for s in bowl.split() if s.isdigit()]\n    return total - apples - oranges"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#67",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MissingBananas_5",
    "sat": "def sat(bananas: int, bowl=\"6 apples and 1 oranges\", total=14):\n    \"\"\"\n    Determine how many bananas are necessary to reach a certain total amount of fruit\n    \"\"\"\n    bowl += f\" and {bananas} bananas\"\n    return sum([int(s) for s in bowl.split() if s.isdigit()]) == total",
    "sols": [
      "def sol(bowl=\"6 apples and 1 oranges\", total=14):\n    apples, oranges = [int(s) for s in bowl.split() if s.isdigit()]\n    return total - apples - oranges"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#67",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MissingBananas_6",
    "sat": "def sat(bananas: int, bowl=\"0 apples and 8 oranges\", total=10):\n    \"\"\"\n    Determine how many bananas are necessary to reach a certain total amount of fruit\n    \"\"\"\n    bowl += f\" and {bananas} bananas\"\n    return sum([int(s) for s in bowl.split() if s.isdigit()]) == total",
    "sols": [
      "def sol(bowl=\"0 apples and 8 oranges\", total=10):\n    apples, oranges = [int(s) for s in bowl.split() if s.isdigit()]\n    return total - apples - oranges"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#67",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MissingBananas_7",
    "sat": "def sat(bananas: int, bowl=\"51265 apples and 15404 oranges\", total=113126):\n    \"\"\"\n    Determine how many bananas are necessary to reach a certain total amount of fruit\n    \"\"\"\n    bowl += f\" and {bananas} bananas\"\n    return sum([int(s) for s in bowl.split() if s.isdigit()]) == total",
    "sols": [
      "def sol(bowl=\"51265 apples and 15404 oranges\", total=113126):\n    apples, oranges = [int(s) for s in bowl.split() if s.isdigit()]\n    return total - apples - oranges"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#67",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MissingBananas_8",
    "sat": "def sat(bananas: int, bowl=\"7 apples and 4 oranges\", total=20):\n    \"\"\"\n    Determine how many bananas are necessary to reach a certain total amount of fruit\n    \"\"\"\n    bowl += f\" and {bananas} bananas\"\n    return sum([int(s) for s in bowl.split() if s.isdigit()]) == total",
    "sols": [
      "def sol(bowl=\"7 apples and 4 oranges\", total=20):\n    apples, oranges = [int(s) for s in bowl.split() if s.isdigit()]\n    return total - apples - oranges"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#67",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "MissingBananas_9",
    "sat": "def sat(bananas: int, bowl=\"34370 apples and 10603 oranges\", total=76203):\n    \"\"\"\n    Determine how many bananas are necessary to reach a certain total amount of fruit\n    \"\"\"\n    bowl += f\" and {bananas} bananas\"\n    return sum([int(s) for s in bowl.split() if s.isdigit()]) == total",
    "sols": [
      "def sol(bowl=\"34370 apples and 10603 oranges\", total=76203):\n    apples, oranges = [int(s) for s in bowl.split() if s.isdigit()]\n    return total - apples - oranges"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#67",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SmallestEven_0",
    "sat": "def sat(val_index: List[int], nums=[125123, 422323, 141, 5325, 812152, 9, 42145, 5313, 421, 812152]):\n    \"\"\"\n    Given an array of nums representing a branch on a binary tree, find the minimum even value and its index.\n    In the case of a tie, return the smallest index. If there are no even numbers, the answer is [].\n    \"\"\"\n    if val_index == []:\n        return all(n % 2 == 1 for n in nums)\n    v, i = val_index\n    assert v % 2 == 0\n    return all(n > v or n % 2 == 1 for n in nums[:i]) and all(n >= v or n % 2 == 1 for n in nums[i:])",
    "sols": [
      "def sol(nums=[125123, 422323, 141, 5325, 812152, 9, 42145, 5313, 421, 812152]):\n    if any(n % 2 == 0 for n in nums):\n        return min([v, i] for i, v in enumerate(nums) if v % 2 == 0)\n    else:\n        return []"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#68",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SmallestEven_1",
    "sat": "def sat(val_index: List[int], nums=[38940, 7988, 78915]):\n    \"\"\"\n    Given an array of nums representing a branch on a binary tree, find the minimum even value and its index.\n    In the case of a tie, return the smallest index. If there are no even numbers, the answer is [].\n    \"\"\"\n    if val_index == []:\n        return all(n % 2 == 1 for n in nums)\n    v, i = val_index\n    assert v % 2 == 0\n    return all(n > v or n % 2 == 1 for n in nums[:i]) and all(n >= v or n % 2 == 1 for n in nums[i:])",
    "sols": [
      "def sol(nums=[38940, 7988, 78915]):\n    if any(n % 2 == 0 for n in nums):\n        return min([v, i] for i, v in enumerate(nums) if v % 2 == 0)\n    else:\n        return []"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#68",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SmallestEven_2",
    "sat": "def sat(val_index: List[int], nums=[26392632, 33805163]):\n    \"\"\"\n    Given an array of nums representing a branch on a binary tree, find the minimum even value and its index.\n    In the case of a tie, return the smallest index. If there are no even numbers, the answer is [].\n    \"\"\"\n    if val_index == []:\n        return all(n % 2 == 1 for n in nums)\n    v, i = val_index\n    assert v % 2 == 0\n    return all(n > v or n % 2 == 1 for n in nums[:i]) and all(n >= v or n % 2 == 1 for n in nums[i:])",
    "sols": [
      "def sol(nums=[26392632, 33805163]):\n    if any(n % 2 == 0 for n in nums):\n        return min([v, i] for i, v in enumerate(nums) if v % 2 == 0)\n    else:\n        return []"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#68",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SmallestEven_3",
    "sat": "def sat(val_index: List[int], nums=[744557286]):\n    \"\"\"\n    Given an array of nums representing a branch on a binary tree, find the minimum even value and its index.\n    In the case of a tie, return the smallest index. If there are no even numbers, the answer is [].\n    \"\"\"\n    if val_index == []:\n        return all(n % 2 == 1 for n in nums)\n    v, i = val_index\n    assert v % 2 == 0\n    return all(n > v or n % 2 == 1 for n in nums[:i]) and all(n >= v or n % 2 == 1 for n in nums[i:])",
    "sols": [
      "def sol(nums=[744557286]):\n    if any(n % 2 == 0 for n in nums):\n        return min([v, i] for i, v in enumerate(nums) if v % 2 == 0)\n    else:\n        return []"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#68",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SmallestEven_4",
    "sat": "def sat(val_index: List[int], nums=[4512821, 7022753, 5506558]):\n    \"\"\"\n    Given an array of nums representing a branch on a binary tree, find the minimum even value and its index.\n    In the case of a tie, return the smallest index. If there are no even numbers, the answer is [].\n    \"\"\"\n    if val_index == []:\n        return all(n % 2 == 1 for n in nums)\n    v, i = val_index\n    assert v % 2 == 0\n    return all(n > v or n % 2 == 1 for n in nums[:i]) and all(n >= v or n % 2 == 1 for n in nums[i:])",
    "sols": [
      "def sol(nums=[4512821, 7022753, 5506558]):\n    if any(n % 2 == 0 for n in nums):\n        return min([v, i] for i, v in enumerate(nums) if v % 2 == 0)\n    else:\n        return []"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#68",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SmallestEven_5",
    "sat": "def sat(val_index: List[int], nums=[188, 858, 456]):\n    \"\"\"\n    Given an array of nums representing a branch on a binary tree, find the minimum even value and its index.\n    In the case of a tie, return the smallest index. If there are no even numbers, the answer is [].\n    \"\"\"\n    if val_index == []:\n        return all(n % 2 == 1 for n in nums)\n    v, i = val_index\n    assert v % 2 == 0\n    return all(n > v or n % 2 == 1 for n in nums[:i]) and all(n >= v or n % 2 == 1 for n in nums[i:])",
    "sols": [
      "def sol(nums=[188, 858, 456]):\n    if any(n % 2 == 0 for n in nums):\n        return min([v, i] for i, v in enumerate(nums) if v % 2 == 0)\n    else:\n        return []"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#68",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SmallestEven_6",
    "sat": "def sat(val_index: List[int], nums=[0, 0, 0]):\n    \"\"\"\n    Given an array of nums representing a branch on a binary tree, find the minimum even value and its index.\n    In the case of a tie, return the smallest index. If there are no even numbers, the answer is [].\n    \"\"\"\n    if val_index == []:\n        return all(n % 2 == 1 for n in nums)\n    v, i = val_index\n    assert v % 2 == 0\n    return all(n > v or n % 2 == 1 for n in nums[:i]) and all(n >= v or n % 2 == 1 for n in nums[i:])",
    "sols": [
      "def sol(nums=[0, 0, 0]):\n    if any(n % 2 == 0 for n in nums):\n        return min([v, i] for i, v in enumerate(nums) if v % 2 == 0)\n    else:\n        return []"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#68",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SmallestEven_7",
    "sat": "def sat(val_index: List[int], nums=[0, 0, 0, 0]):\n    \"\"\"\n    Given an array of nums representing a branch on a binary tree, find the minimum even value and its index.\n    In the case of a tie, return the smallest index. If there are no even numbers, the answer is [].\n    \"\"\"\n    if val_index == []:\n        return all(n % 2 == 1 for n in nums)\n    v, i = val_index\n    assert v % 2 == 0\n    return all(n > v or n % 2 == 1 for n in nums[:i]) and all(n >= v or n % 2 == 1 for n in nums[i:])",
    "sols": [
      "def sol(nums=[0, 0, 0, 0]):\n    if any(n % 2 == 0 for n in nums):\n        return min([v, i] for i, v in enumerate(nums) if v % 2 == 0)\n    else:\n        return []"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#68",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SmallestEven_8",
    "sat": "def sat(val_index: List[int], nums: List[int]=[]):\n    \"\"\"\n    Given an array of nums representing a branch on a binary tree, find the minimum even value and its index.\n    In the case of a tie, return the smallest index. If there are no even numbers, the answer is [].\n    \"\"\"\n    if val_index == []:\n        return all(n % 2 == 1 for n in nums)\n    v, i = val_index\n    assert v % 2 == 0\n    return all(n > v or n % 2 == 1 for n in nums[:i]) and all(n >= v or n % 2 == 1 for n in nums[i:])",
    "sols": [
      "def sol(nums=[]):\n    if any(n % 2 == 0 for n in nums):\n        return min([v, i] for i, v in enumerate(nums) if v % 2 == 0)\n    else:\n        return []"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#68",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SmallestEven_9",
    "sat": "def sat(val_index: List[int], nums=[4284152, 5395517, 619081]):\n    \"\"\"\n    Given an array of nums representing a branch on a binary tree, find the minimum even value and its index.\n    In the case of a tie, return the smallest index. If there are no even numbers, the answer is [].\n    \"\"\"\n    if val_index == []:\n        return all(n % 2 == 1 for n in nums)\n    v, i = val_index\n    assert v % 2 == 0\n    return all(n > v or n % 2 == 1 for n in nums[:i]) and all(n >= v or n % 2 == 1 for n in nums[i:])",
    "sols": [
      "def sol(nums=[4284152, 5395517, 619081]):\n    if any(n % 2 == 0 for n in nums):\n        return min([v, i] for i, v in enumerate(nums) if v % 2 == 0)\n    else:\n        return []"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#68",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "GreatestHIndex_0",
    "sat": "def sat(h: int, seq=[3, 1, 4, 17, 5, 17, 2, 1, 41, 32, 2, 5, 5, 5, 5]):\n    \"\"\"\n    Find the h-index, the largest positive number h such that that h occurs in the sequence at least h times.\n    h = -1 if there is no such positive number.\n    \"\"\"\n    for i in seq:\n        assert not (i > 0 and i > h and seq.count(i) >= i)\n    return h == -1 or seq.count(h) >= h > 0",
    "sols": [
      "def sol(seq=[3, 1, 4, 17, 5, 17, 2, 1, 41, 32, 2, 5, 5, 5, 5]):\n    return max([-1] + [i for i in seq if i > 0 and seq.count(i) >= i])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#69",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "GreatestHIndex_1",
    "sat": "def sat(h: int, seq=[5, 5, 4, 4, 0, 1, 3, 7, 2, 1, 0, 1, 8, 7, 2, 7, 4, 5, 2, 7, 5, 1, 9, 4, 7, 6, 3, 0, 1, 0, 6, 8, 0, 8, 9, 8, 3, 9, 4, 4, 4, 3, 8, 9, 5, 2, 5, 7, 9, 6, 2, 3, 0, 6, 0, 7, 8, 2, 2, 5, 1, 6, 1, 7, 8, 7, 6, 7]):\n    \"\"\"\n    Find the h-index, the largest positive number h such that that h occurs in the sequence at least h times.\n    h = -1 if there is no such positive number.\n    \"\"\"\n    for i in seq:\n        assert not (i > 0 and i > h and seq.count(i) >= i)\n    return h == -1 or seq.count(h) >= h > 0",
    "sols": [
      "def sol(seq=[5, 5, 4, 4, 0, 1, 3, 7, 2, 1, 0, 1, 8, 7, 2, 7, 4, 5, 2, 7, 5, 1, 9, 4, 7, 6, 3, 0, 1, 0, 6, 8, 0, 8, 9, 8, 3, 9, 4, 4, 4, 3, 8, 9, 5, 2, 5, 7, 9, 6, 2, 3, 0, 6, 0, 7, 8, 2, 2, 5, 1, 6, 1, 7, 8, 7, 6, 7]):\n    return max([-1] + [i for i in seq if i > 0 and seq.count(i) >= i])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#69",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "GreatestHIndex_2",
    "sat": "def sat(h: int, seq=[3, 9, 0, 8, 2, 9, 6, 1, 8, 3, 5, 5, 4, 9, 0, 1, 0, 3, 4, 8, 7, 2, 4, 7, 1, 1, 7, 2, 1, 4, 1, 0]):\n    \"\"\"\n    Find the h-index, the largest positive number h such that that h occurs in the sequence at least h times.\n    h = -1 if there is no such positive number.\n    \"\"\"\n    for i in seq:\n        assert not (i > 0 and i > h and seq.count(i) >= i)\n    return h == -1 or seq.count(h) >= h > 0",
    "sols": [
      "def sol(seq=[3, 9, 0, 8, 2, 9, 6, 1, 8, 3, 5, 5, 4, 9, 0, 1, 0, 3, 4, 8, 7, 2, 4, 7, 1, 1, 7, 2, 1, 4, 1, 0]):\n    return max([-1] + [i for i in seq if i > 0 and seq.count(i) >= i])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#69",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "GreatestHIndex_3",
    "sat": "def sat(h: int, seq=[7, 4, 1, 8, 6, 6, 6, 8, 5, 5, 8, 3, 0, 7, 2, 7, 2, 4, 5, 8, 6, 1, 1, 0, 0, 8, 8, 1, 5, 2, 1, 1, 7, 1, 3, 5, 6, 1, 7, 9, 6, 2, 6, 4, 7, 4, 3, 1, 2, 3, 9, 7, 7, 1, 7, 8, 6, 5, 9, 1, 6, 3, 4, 2, 4, 1, 7, 6, 3, 2, 5, 6, 1, 3, 9, 4, 9, 6, 9, 8, 1, 2, 3, 8]):\n    \"\"\"\n    Find the h-index, the largest positive number h such that that h occurs in the sequence at least h times.\n    h = -1 if there is no such positive number.\n    \"\"\"\n    for i in seq:\n        assert not (i > 0 and i > h and seq.count(i) >= i)\n    return h == -1 or seq.count(h) >= h > 0",
    "sols": [
      "def sol(seq=[7, 4, 1, 8, 6, 6, 6, 8, 5, 5, 8, 3, 0, 7, 2, 7, 2, 4, 5, 8, 6, 1, 1, 0, 0, 8, 8, 1, 5, 2, 1, 1, 7, 1, 3, 5, 6, 1, 7, 9, 6, 2, 6, 4, 7, 4, 3, 1, 2, 3, 9, 7, 7, 1, 7, 8, 6, 5, 9, 1, 6, 3, 4, 2, 4, 1, 7, 6, 3, 2, 5, 6, 1, 3, 9, 4, 9, 6, 9, 8, 1, 2, 3, 8]):\n    return max([-1] + [i for i in seq if i > 0 and seq.count(i) >= i])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#69",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "GreatestHIndex_4",
    "sat": "def sat(h: int, seq=[1, 2, 6, 2]):\n    \"\"\"\n    Find the h-index, the largest positive number h such that that h occurs in the sequence at least h times.\n    h = -1 if there is no such positive number.\n    \"\"\"\n    for i in seq:\n        assert not (i > 0 and i > h and seq.count(i) >= i)\n    return h == -1 or seq.count(h) >= h > 0",
    "sols": [
      "def sol(seq=[1, 2, 6, 2]):\n    return max([-1] + [i for i in seq if i > 0 and seq.count(i) >= i])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#69",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "GreatestHIndex_5",
    "sat": "def sat(h: int, seq=[0, 6, 9, 5, 9, 0, 8, 8, 5, 6, 7, 1, 5, 6, 6, 0, 1, 8, 0, 9, 6, 2, 4, 0, 8, 1, 6, 3, 9]):\n    \"\"\"\n    Find the h-index, the largest positive number h such that that h occurs in the sequence at least h times.\n    h = -1 if there is no such positive number.\n    \"\"\"\n    for i in seq:\n        assert not (i > 0 and i > h and seq.count(i) >= i)\n    return h == -1 or seq.count(h) >= h > 0",
    "sols": [
      "def sol(seq=[0, 6, 9, 5, 9, 0, 8, 8, 5, 6, 7, 1, 5, 6, 6, 0, 1, 8, 0, 9, 6, 2, 4, 0, 8, 1, 6, 3, 9]):\n    return max([-1] + [i for i in seq if i > 0 and seq.count(i) >= i])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#69",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "GreatestHIndex_6",
    "sat": "def sat(h: int, seq=[9, 5, 2, 6, 2, 7, 9, 1, 8, 7, 4, 1, 2, 2, 5, 5, 6, 9, 4, 1, 1, 0, 0, 3, 1, 0, 5, 0, 6, 7, 0, 4, 3, 5, 5, 3, 5, 3, 9, 9, 8, 9, 2, 0, 2, 5, 3, 4, 3, 8, 7, 6, 8, 5, 6, 0, 7, 5, 3, 5, 9, 9, 9, 7, 2, 9, 0, 9, 2, 8, 4, 1, 7, 4, 2, 1, 3, 0, 6, 5, 1, 4, 2, 5, 8, 1, 4, 9, 3, 7, 7, 3]):\n    \"\"\"\n    Find the h-index, the largest positive number h such that that h occurs in the sequence at least h times.\n    h = -1 if there is no such positive number.\n    \"\"\"\n    for i in seq:\n        assert not (i > 0 and i > h and seq.count(i) >= i)\n    return h == -1 or seq.count(h) >= h > 0",
    "sols": [
      "def sol(seq=[9, 5, 2, 6, 2, 7, 9, 1, 8, 7, 4, 1, 2, 2, 5, 5, 6, 9, 4, 1, 1, 0, 0, 3, 1, 0, 5, 0, 6, 7, 0, 4, 3, 5, 5, 3, 5, 3, 9, 9, 8, 9, 2, 0, 2, 5, 3, 4, 3, 8, 7, 6, 8, 5, 6, 0, 7, 5, 3, 5, 9, 9, 9, 7, 2, 9, 0, 9, 2, 8, 4, 1, 7, 4, 2, 1, 3, 0, 6, 5, 1, 4, 2, 5, 8, 1, 4, 9, 3, 7, 7, 3]):\n    return max([-1] + [i for i in seq if i > 0 and seq.count(i) >= i])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#69",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "GreatestHIndex_7",
    "sat": "def sat(h: int, seq=[6, 2, 0, 5, 6, 8, 5, 3, 5, 7, 0, 4, 7, 8, 0, 7, 3, 5, 3, 7, 6, 9, 8, 4, 5, 6, 6, 0, 5, 3, 5, 1, 3, 5, 4, 4, 1, 3, 2, 3, 0, 0, 2, 5, 8, 3, 5, 5, 6, 1, 8, 1, 8, 0, 0, 6, 7, 7, 8, 5, 1, 3, 5, 7, 3, 4, 1, 2, 5, 7, 8, 6, 1, 7, 0, 9, 4, 5, 6, 4, 3, 4, 0, 5, 8, 6, 7, 4, 8, 5, 9]):\n    \"\"\"\n    Find the h-index, the largest positive number h such that that h occurs in the sequence at least h times.\n    h = -1 if there is no such positive number.\n    \"\"\"\n    for i in seq:\n        assert not (i > 0 and i > h and seq.count(i) >= i)\n    return h == -1 or seq.count(h) >= h > 0",
    "sols": [
      "def sol(seq=[6, 2, 0, 5, 6, 8, 5, 3, 5, 7, 0, 4, 7, 8, 0, 7, 3, 5, 3, 7, 6, 9, 8, 4, 5, 6, 6, 0, 5, 3, 5, 1, 3, 5, 4, 4, 1, 3, 2, 3, 0, 0, 2, 5, 8, 3, 5, 5, 6, 1, 8, 1, 8, 0, 0, 6, 7, 7, 8, 5, 1, 3, 5, 7, 3, 4, 1, 2, 5, 7, 8, 6, 1, 7, 0, 9, 4, 5, 6, 4, 3, 4, 0, 5, 8, 6, 7, 4, 8, 5, 9]):\n    return max([-1] + [i for i in seq if i > 0 and seq.count(i) >= i])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#69",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "GreatestHIndex_8",
    "sat": "def sat(h: int, seq=[7, 2, 1, 0, 1, 4, 9, 0, 4, 8, 7, 2, 5, 1, 9, 1, 4]):\n    \"\"\"\n    Find the h-index, the largest positive number h such that that h occurs in the sequence at least h times.\n    h = -1 if there is no such positive number.\n    \"\"\"\n    for i in seq:\n        assert not (i > 0 and i > h and seq.count(i) >= i)\n    return h == -1 or seq.count(h) >= h > 0",
    "sols": [
      "def sol(seq=[7, 2, 1, 0, 1, 4, 9, 0, 4, 8, 7, 2, 5, 1, 9, 1, 4]):\n    return max([-1] + [i for i in seq if i > 0 and seq.count(i) >= i])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#69",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "GreatestHIndex_9",
    "sat": "def sat(h: int, seq=[0, 3, 8, 4, 3, 4, 3, 8, 3, 7, 3, 2, 7, 6, 9, 2, 4, 8, 9, 4, 8, 1, 3, 3, 1, 7, 6, 1, 3, 8, 0, 3, 2, 8, 3, 4, 0, 9, 9, 8, 4, 2, 5, 1, 6, 8, 0, 3, 5, 3, 3, 3, 0, 0, 5, 6, 8, 3, 7, 4, 7, 0, 0, 6, 3, 1, 9, 7, 0, 3, 1, 1, 6, 1, 6, 2, 4, 8, 0, 9, 4, 3, 9, 5, 2]):\n    \"\"\"\n    Find the h-index, the largest positive number h such that that h occurs in the sequence at least h times.\n    h = -1 if there is no such positive number.\n    \"\"\"\n    for i in seq:\n        assert not (i > 0 and i > h and seq.count(i) >= i)\n    return h == -1 or seq.count(h) >= h > 0",
    "sols": [
      "def sol(seq=[0, 3, 8, 4, 3, 4, 3, 8, 3, 7, 3, 2, 7, 6, 9, 2, 4, 8, 9, 4, 8, 1, 3, 3, 1, 7, 6, 1, 3, 8, 0, 3, 2, 8, 3, 4, 0, 9, 9, 8, 4, 2, 5, 1, 6, 8, 0, 3, 5, 3, 3, 3, 0, 0, 5, 6, 8, 3, 7, 4, 7, 0, 0, 6, 3, 1, 9, 7, 0, 3, 1, 1, 6, 1, 6, 2, 4, 8, 0, 9, 4, 3, 9, 5, 2]):\n    return max([-1] + [i for i in seq if i > 0 and seq.count(i) >= i])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#69",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "StrangeSort_0",
    "sat": "def sat(strange: List[int], li=[30, 12, 42, 717, 45, 317, 200, -1, 491, 32, 15]):\n    \"\"\"\n    Find the following strange sort of li: the first element is the smallest, the second is the largest of the\n    remaining, the third is the smallest of the remaining, the fourth is the smallest of the remaining, etc.\n    \"\"\"\n    if len(li) < 2:\n        return strange == li\n    bounds = strange[:2]  # lower, upper\n    for i, n in enumerate(strange):\n        assert bounds[0] <= n <= bounds[1]\n        bounds[i % 2] = n\n    return sorted(strange) == sorted(li)  # permutation check",
    "sols": [
      "def sol(li=[30, 12, 42, 717, 45, 317, 200, -1, 491, 32, 15]):\n    s = sorted(li)\n    i = 0\n    j = len(li) - 1\n    ans = []\n    while i <= j:\n        if len(ans) % 2:\n            ans.append(s[j])\n            j -= 1\n        else:\n            ans.append(s[i])\n            i += 1\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#70",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "StrangeSort_1",
    "sat": "def sat(strange: List[int], li=[8, 4, 1, 2, 6, 5, 3, 9, 3, 5, 9, 6, 3, 9, 6]):\n    \"\"\"\n    Find the following strange sort of li: the first element is the smallest, the second is the largest of the\n    remaining, the third is the smallest of the remaining, the fourth is the smallest of the remaining, etc.\n    \"\"\"\n    if len(li) < 2:\n        return strange == li\n    bounds = strange[:2]  # lower, upper\n    for i, n in enumerate(strange):\n        assert bounds[0] <= n <= bounds[1]\n        bounds[i % 2] = n\n    return sorted(strange) == sorted(li)  # permutation check",
    "sols": [
      "def sol(li=[8, 4, 1, 2, 6, 5, 3, 9, 3, 5, 9, 6, 3, 9, 6]):\n    s = sorted(li)\n    i = 0\n    j = len(li) - 1\n    ans = []\n    while i <= j:\n        if len(ans) % 2:\n            ans.append(s[j])\n            j -= 1\n        else:\n            ans.append(s[i])\n            i += 1\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#70",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "StrangeSort_2",
    "sat": "def sat(strange: List[int], li=[7, 5, 5, 6, 2, 9, 6, 4, 2]):\n    \"\"\"\n    Find the following strange sort of li: the first element is the smallest, the second is the largest of the\n    remaining, the third is the smallest of the remaining, the fourth is the smallest of the remaining, etc.\n    \"\"\"\n    if len(li) < 2:\n        return strange == li\n    bounds = strange[:2]  # lower, upper\n    for i, n in enumerate(strange):\n        assert bounds[0] <= n <= bounds[1]\n        bounds[i % 2] = n\n    return sorted(strange) == sorted(li)  # permutation check",
    "sols": [
      "def sol(li=[7, 5, 5, 6, 2, 9, 6, 4, 2]):\n    s = sorted(li)\n    i = 0\n    j = len(li) - 1\n    ans = []\n    while i <= j:\n        if len(ans) % 2:\n            ans.append(s[j])\n            j -= 1\n        else:\n            ans.append(s[i])\n            i += 1\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#70",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "StrangeSort_3",
    "sat": "def sat(strange: List[int], li=[9, 9, 1]):\n    \"\"\"\n    Find the following strange sort of li: the first element is the smallest, the second is the largest of the\n    remaining, the third is the smallest of the remaining, the fourth is the smallest of the remaining, etc.\n    \"\"\"\n    if len(li) < 2:\n        return strange == li\n    bounds = strange[:2]  # lower, upper\n    for i, n in enumerate(strange):\n        assert bounds[0] <= n <= bounds[1]\n        bounds[i % 2] = n\n    return sorted(strange) == sorted(li)  # permutation check",
    "sols": [
      "def sol(li=[9, 9, 1]):\n    s = sorted(li)\n    i = 0\n    j = len(li) - 1\n    ans = []\n    while i <= j:\n        if len(ans) % 2:\n            ans.append(s[j])\n            j -= 1\n        else:\n            ans.append(s[i])\n            i += 1\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#70",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "StrangeSort_4",
    "sat": "def sat(strange: List[int], li=[3, 2, 3, 1]):\n    \"\"\"\n    Find the following strange sort of li: the first element is the smallest, the second is the largest of the\n    remaining, the third is the smallest of the remaining, the fourth is the smallest of the remaining, etc.\n    \"\"\"\n    if len(li) < 2:\n        return strange == li\n    bounds = strange[:2]  # lower, upper\n    for i, n in enumerate(strange):\n        assert bounds[0] <= n <= bounds[1]\n        bounds[i % 2] = n\n    return sorted(strange) == sorted(li)  # permutation check",
    "sols": [
      "def sol(li=[3, 2, 3, 1]):\n    s = sorted(li)\n    i = 0\n    j = len(li) - 1\n    ans = []\n    while i <= j:\n        if len(ans) % 2:\n            ans.append(s[j])\n            j -= 1\n        else:\n            ans.append(s[i])\n            i += 1\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#70",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "StrangeSort_5",
    "sat": "def sat(strange: List[int], li=[4, 1, 7, 6, 6, 1, 0, 8, 3]):\n    \"\"\"\n    Find the following strange sort of li: the first element is the smallest, the second is the largest of the\n    remaining, the third is the smallest of the remaining, the fourth is the smallest of the remaining, etc.\n    \"\"\"\n    if len(li) < 2:\n        return strange == li\n    bounds = strange[:2]  # lower, upper\n    for i, n in enumerate(strange):\n        assert bounds[0] <= n <= bounds[1]\n        bounds[i % 2] = n\n    return sorted(strange) == sorted(li)  # permutation check",
    "sols": [
      "def sol(li=[4, 1, 7, 6, 6, 1, 0, 8, 3]):\n    s = sorted(li)\n    i = 0\n    j = len(li) - 1\n    ans = []\n    while i <= j:\n        if len(ans) % 2:\n            ans.append(s[j])\n            j -= 1\n        else:\n            ans.append(s[i])\n            i += 1\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#70",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "StrangeSort_6",
    "sat": "def sat(strange: List[int], li=[8, 0, 5, 3, 3, 9, 6, 1, 5, 1, 4, 5, 7, 0]):\n    \"\"\"\n    Find the following strange sort of li: the first element is the smallest, the second is the largest of the\n    remaining, the third is the smallest of the remaining, the fourth is the smallest of the remaining, etc.\n    \"\"\"\n    if len(li) < 2:\n        return strange == li\n    bounds = strange[:2]  # lower, upper\n    for i, n in enumerate(strange):\n        assert bounds[0] <= n <= bounds[1]\n        bounds[i % 2] = n\n    return sorted(strange) == sorted(li)  # permutation check",
    "sols": [
      "def sol(li=[8, 0, 5, 3, 3, 9, 6, 1, 5, 1, 4, 5, 7, 0]):\n    s = sorted(li)\n    i = 0\n    j = len(li) - 1\n    ans = []\n    while i <= j:\n        if len(ans) % 2:\n            ans.append(s[j])\n            j -= 1\n        else:\n            ans.append(s[i])\n            i += 1\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#70",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "StrangeSort_7",
    "sat": "def sat(strange: List[int], li=[7, 4, 8, 1, 5, 7, 2, 4, 3, 8, 6, 6, 1, 2, 0, 1, 8, 5]):\n    \"\"\"\n    Find the following strange sort of li: the first element is the smallest, the second is the largest of the\n    remaining, the third is the smallest of the remaining, the fourth is the smallest of the remaining, etc.\n    \"\"\"\n    if len(li) < 2:\n        return strange == li\n    bounds = strange[:2]  # lower, upper\n    for i, n in enumerate(strange):\n        assert bounds[0] <= n <= bounds[1]\n        bounds[i % 2] = n\n    return sorted(strange) == sorted(li)  # permutation check",
    "sols": [
      "def sol(li=[7, 4, 8, 1, 5, 7, 2, 4, 3, 8, 6, 6, 1, 2, 0, 1, 8, 5]):\n    s = sorted(li)\n    i = 0\n    j = len(li) - 1\n    ans = []\n    while i <= j:\n        if len(ans) % 2:\n            ans.append(s[j])\n            j -= 1\n        else:\n            ans.append(s[i])\n            i += 1\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#70",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "StrangeSort_8",
    "sat": "def sat(strange: List[int], li=[5, 0, 2, 3, 8, 7, 2, 7, 1, 7, 0, 8, 3, 7]):\n    \"\"\"\n    Find the following strange sort of li: the first element is the smallest, the second is the largest of the\n    remaining, the third is the smallest of the remaining, the fourth is the smallest of the remaining, etc.\n    \"\"\"\n    if len(li) < 2:\n        return strange == li\n    bounds = strange[:2]  # lower, upper\n    for i, n in enumerate(strange):\n        assert bounds[0] <= n <= bounds[1]\n        bounds[i % 2] = n\n    return sorted(strange) == sorted(li)  # permutation check",
    "sols": [
      "def sol(li=[5, 0, 2, 3, 8, 7, 2, 7, 1, 7, 0, 8, 3, 7]):\n    s = sorted(li)\n    i = 0\n    j = len(li) - 1\n    ans = []\n    while i <= j:\n        if len(ans) % 2:\n            ans.append(s[j])\n            j -= 1\n        else:\n            ans.append(s[i])\n            i += 1\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#70",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "StrangeSort_9",
    "sat": "def sat(strange: List[int], li=[1, 5]):\n    \"\"\"\n    Find the following strange sort of li: the first element is the smallest, the second is the largest of the\n    remaining, the third is the smallest of the remaining, the fourth is the smallest of the remaining, etc.\n    \"\"\"\n    if len(li) < 2:\n        return strange == li\n    bounds = strange[:2]  # lower, upper\n    for i, n in enumerate(strange):\n        assert bounds[0] <= n <= bounds[1]\n        bounds[i % 2] = n\n    return sorted(strange) == sorted(li)  # permutation check",
    "sols": [
      "def sol(li=[1, 5]):\n    s = sorted(li)\n    i = 0\n    j = len(li) - 1\n    ans = []\n    while i <= j:\n        if len(ans) % 2:\n            ans.append(s[j])\n            j -= 1\n        else:\n            ans.append(s[i])\n            i += 1\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#70",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HeronTriangle_0",
    "sat": "def sat(coords: List[List[float]], sides=[8.9, 10.8, 17.0]):\n    \"\"\"\n    Find the coordinates of a triangle with the given side lengths\n    \"\"\"\n    assert len(coords) == 3\n    sides2 = [((x - x2) ** 2 + (y - y2) ** 2) ** 0.5 for i, (x, y) in enumerate(coords) for x2, y2 in coords[:i]]\n    return all(abs(a - b) < 1e-6 for a, b in zip(sorted(sides), sorted(sides2)))",
    "sols": [
      "def sol(sides=[8.9, 10.8, 17.0]):\n    a, b, c = sorted(sides)\n\n    s = sum(sides) / 2  # semi-perimeter\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5  # Heron's formula\n\n    y = 2 * area / a  # height\n    x = (c ** 2 - y ** 2) ** 0.5\n    return [[0.0, 0.0], [a, 0.0], [x, y]]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#71\n\nThat problem essentially asks for Heron's formula for the area of a triangle in terms of its three sides.\nIn our version, we consider the related problem (also solved by Heron's formula) of finding 2d coordinates\nof a triangle with the given sides. If one knows the area, this is a straightforward calculation.",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HeronTriangle_1",
    "sat": "def sat(coords: List[List[float]], sides=[24.408110376178705, 32.72365349973282, 48.81696744586911]):\n    \"\"\"\n    Find the coordinates of a triangle with the given side lengths\n    \"\"\"\n    assert len(coords) == 3\n    sides2 = [((x - x2) ** 2 + (y - y2) ** 2) ** 0.5 for i, (x, y) in enumerate(coords) for x2, y2 in coords[:i]]\n    return all(abs(a - b) < 1e-6 for a, b in zip(sorted(sides), sorted(sides2)))",
    "sols": [
      "def sol(sides=[24.408110376178705, 32.72365349973282, 48.81696744586911]):\n    a, b, c = sorted(sides)\n\n    s = sum(sides) / 2  # semi-perimeter\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5  # Heron's formula\n\n    y = 2 * area / a  # height\n    x = (c ** 2 - y ** 2) ** 0.5\n    return [[0.0, 0.0], [a, 0.0], [x, y]]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#71\n\nThat problem essentially asks for Heron's formula for the area of a triangle in terms of its three sides.\nIn our version, we consider the related problem (also solved by Heron's formula) of finding 2d coordinates\nof a triangle with the given sides. If one knows the area, this is a straightforward calculation.",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HeronTriangle_2",
    "sat": "def sat(coords: List[List[float]], sides=[27.451864724831378, 71.73620497337176, 72.2364568008756]):\n    \"\"\"\n    Find the coordinates of a triangle with the given side lengths\n    \"\"\"\n    assert len(coords) == 3\n    sides2 = [((x - x2) ** 2 + (y - y2) ** 2) ** 0.5 for i, (x, y) in enumerate(coords) for x2, y2 in coords[:i]]\n    return all(abs(a - b) < 1e-6 for a, b in zip(sorted(sides), sorted(sides2)))",
    "sols": [
      "def sol(sides=[27.451864724831378, 71.73620497337176, 72.2364568008756]):\n    a, b, c = sorted(sides)\n\n    s = sum(sides) / 2  # semi-perimeter\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5  # Heron's formula\n\n    y = 2 * area / a  # height\n    x = (c ** 2 - y ** 2) ** 0.5\n    return [[0.0, 0.0], [a, 0.0], [x, y]]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#71\n\nThat problem essentially asks for Heron's formula for the area of a triangle in terms of its three sides.\nIn our version, we consider the related problem (also solved by Heron's formula) of finding 2d coordinates\nof a triangle with the given sides. If one knows the area, this is a straightforward calculation.",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HeronTriangle_3",
    "sat": "def sat(coords: List[List[float]], sides=[22.39325953731467, 22.640876224877417, 32.23640648363397]):\n    \"\"\"\n    Find the coordinates of a triangle with the given side lengths\n    \"\"\"\n    assert len(coords) == 3\n    sides2 = [((x - x2) ** 2 + (y - y2) ** 2) ** 0.5 for i, (x, y) in enumerate(coords) for x2, y2 in coords[:i]]\n    return all(abs(a - b) < 1e-6 for a, b in zip(sorted(sides), sorted(sides2)))",
    "sols": [
      "def sol(sides=[22.39325953731467, 22.640876224877417, 32.23640648363397]):\n    a, b, c = sorted(sides)\n\n    s = sum(sides) / 2  # semi-perimeter\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5  # Heron's formula\n\n    y = 2 * area / a  # height\n    x = (c ** 2 - y ** 2) ** 0.5\n    return [[0.0, 0.0], [a, 0.0], [x, y]]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#71\n\nThat problem essentially asks for Heron's formula for the area of a triangle in terms of its three sides.\nIn our version, we consider the related problem (also solved by Heron's formula) of finding 2d coordinates\nof a triangle with the given sides. If one knows the area, this is a straightforward calculation.",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HeronTriangle_4",
    "sat": "def sat(coords: List[List[float]], sides=[45.986905476840235, 79.97976343909342, 86.26149779271437]):\n    \"\"\"\n    Find the coordinates of a triangle with the given side lengths\n    \"\"\"\n    assert len(coords) == 3\n    sides2 = [((x - x2) ** 2 + (y - y2) ** 2) ** 0.5 for i, (x, y) in enumerate(coords) for x2, y2 in coords[:i]]\n    return all(abs(a - b) < 1e-6 for a, b in zip(sorted(sides), sorted(sides2)))",
    "sols": [
      "def sol(sides=[45.986905476840235, 79.97976343909342, 86.26149779271437]):\n    a, b, c = sorted(sides)\n\n    s = sum(sides) / 2  # semi-perimeter\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5  # Heron's formula\n\n    y = 2 * area / a  # height\n    x = (c ** 2 - y ** 2) ** 0.5\n    return [[0.0, 0.0], [a, 0.0], [x, y]]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#71\n\nThat problem essentially asks for Heron's formula for the area of a triangle in terms of its three sides.\nIn our version, we consider the related problem (also solved by Heron's formula) of finding 2d coordinates\nof a triangle with the given sides. If one knows the area, this is a straightforward calculation.",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HeronTriangle_5",
    "sat": "def sat(coords: List[List[float]], sides=[47.58430703197168, 53.39824554295512, 55.14396112642643]):\n    \"\"\"\n    Find the coordinates of a triangle with the given side lengths\n    \"\"\"\n    assert len(coords) == 3\n    sides2 = [((x - x2) ** 2 + (y - y2) ** 2) ** 0.5 for i, (x, y) in enumerate(coords) for x2, y2 in coords[:i]]\n    return all(abs(a - b) < 1e-6 for a, b in zip(sorted(sides), sorted(sides2)))",
    "sols": [
      "def sol(sides=[47.58430703197168, 53.39824554295512, 55.14396112642643]):\n    a, b, c = sorted(sides)\n\n    s = sum(sides) / 2  # semi-perimeter\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5  # Heron's formula\n\n    y = 2 * area / a  # height\n    x = (c ** 2 - y ** 2) ** 0.5\n    return [[0.0, 0.0], [a, 0.0], [x, y]]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#71\n\nThat problem essentially asks for Heron's formula for the area of a triangle in terms of its three sides.\nIn our version, we consider the related problem (also solved by Heron's formula) of finding 2d coordinates\nof a triangle with the given sides. If one knows the area, this is a straightforward calculation.",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HeronTriangle_6",
    "sat": "def sat(coords: List[List[float]], sides=[35.15644335694104, 95.16020924540317, 95.63478613900968]):\n    \"\"\"\n    Find the coordinates of a triangle with the given side lengths\n    \"\"\"\n    assert len(coords) == 3\n    sides2 = [((x - x2) ** 2 + (y - y2) ** 2) ** 0.5 for i, (x, y) in enumerate(coords) for x2, y2 in coords[:i]]\n    return all(abs(a - b) < 1e-6 for a, b in zip(sorted(sides), sorted(sides2)))",
    "sols": [
      "def sol(sides=[35.15644335694104, 95.16020924540317, 95.63478613900968]):\n    a, b, c = sorted(sides)\n\n    s = sum(sides) / 2  # semi-perimeter\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5  # Heron's formula\n\n    y = 2 * area / a  # height\n    x = (c ** 2 - y ** 2) ** 0.5\n    return [[0.0, 0.0], [a, 0.0], [x, y]]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#71\n\nThat problem essentially asks for Heron's formula for the area of a triangle in terms of its three sides.\nIn our version, we consider the related problem (also solved by Heron's formula) of finding 2d coordinates\nof a triangle with the given sides. If one knows the area, this is a straightforward calculation.",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HeronTriangle_7",
    "sat": "def sat(coords: List[List[float]], sides=[15.601937582817616, 94.88845582815345, 95.23131597676459]):\n    \"\"\"\n    Find the coordinates of a triangle with the given side lengths\n    \"\"\"\n    assert len(coords) == 3\n    sides2 = [((x - x2) ** 2 + (y - y2) ** 2) ** 0.5 for i, (x, y) in enumerate(coords) for x2, y2 in coords[:i]]\n    return all(abs(a - b) < 1e-6 for a, b in zip(sorted(sides), sorted(sides2)))",
    "sols": [
      "def sol(sides=[15.601937582817616, 94.88845582815345, 95.23131597676459]):\n    a, b, c = sorted(sides)\n\n    s = sum(sides) / 2  # semi-perimeter\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5  # Heron's formula\n\n    y = 2 * area / a  # height\n    x = (c ** 2 - y ** 2) ** 0.5\n    return [[0.0, 0.0], [a, 0.0], [x, y]]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#71\n\nThat problem essentially asks for Heron's formula for the area of a triangle in terms of its three sides.\nIn our version, we consider the related problem (also solved by Heron's formula) of finding 2d coordinates\nof a triangle with the given sides. If one knows the area, this is a straightforward calculation.",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HeronTriangle_8",
    "sat": "def sat(coords: List[List[float]], sides=[20.075279677943957, 70.098045976397, 75.48834201037654]):\n    \"\"\"\n    Find the coordinates of a triangle with the given side lengths\n    \"\"\"\n    assert len(coords) == 3\n    sides2 = [((x - x2) ** 2 + (y - y2) ** 2) ** 0.5 for i, (x, y) in enumerate(coords) for x2, y2 in coords[:i]]\n    return all(abs(a - b) < 1e-6 for a, b in zip(sorted(sides), sorted(sides2)))",
    "sols": [
      "def sol(sides=[20.075279677943957, 70.098045976397, 75.48834201037654]):\n    a, b, c = sorted(sides)\n\n    s = sum(sides) / 2  # semi-perimeter\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5  # Heron's formula\n\n    y = 2 * area / a  # height\n    x = (c ** 2 - y ** 2) ** 0.5\n    return [[0.0, 0.0], [a, 0.0], [x, y]]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#71\n\nThat problem essentially asks for Heron's formula for the area of a triangle in terms of its three sides.\nIn our version, we consider the related problem (also solved by Heron's formula) of finding 2d coordinates\nof a triangle with the given sides. If one knows the area, this is a straightforward calculation.",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HeronTriangle_9",
    "sat": "def sat(coords: List[List[float]], sides=[29.867371594577985, 50.49694745645177, 59.658324661506455]):\n    \"\"\"\n    Find the coordinates of a triangle with the given side lengths\n    \"\"\"\n    assert len(coords) == 3\n    sides2 = [((x - x2) ** 2 + (y - y2) ** 2) ** 0.5 for i, (x, y) in enumerate(coords) for x2, y2 in coords[:i]]\n    return all(abs(a - b) < 1e-6 for a, b in zip(sorted(sides), sorted(sides2)))",
    "sols": [
      "def sol(sides=[29.867371594577985, 50.49694745645177, 59.658324661506455]):\n    a, b, c = sorted(sides)\n\n    s = sum(sides) / 2  # semi-perimeter\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5  # Heron's formula\n\n    y = 2 * area / a  # height\n    x = (c ** 2 - y ** 2) ** 0.5\n    return [[0.0, 0.0], [a, 0.0], [x, y]]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#71\n\nThat problem essentially asks for Heron's formula for the area of a triangle in terms of its three sides.\nIn our version, we consider the related problem (also solved by Heron's formula) of finding 2d coordinates\nof a triangle with the given sides. If one knows the area, this is a straightforward calculation.",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "InvestigateCrash_0",
    "sat": "def sat(problem: int, weights=[1, 2, 5, 2, 1, 17], max_weight=100):\n    \"\"\"\n    An object will \"fly\" if its weights are a palindrome and sum to <= max_weight. The given object won't fly.\n    You have to determine why. Find index where the weights aren't a palindrome or -1 if weights are too big.\n    \"\"\"\n    if problem == -1:\n        return sum(weights) > max_weight\n    return weights[problem] != weights[- 1 - problem]",
    "sols": [
      "def sol(weights=[1, 2, 5, 2, 1, 17], max_weight=100):\n    if sum(weights) > max_weight:\n        return -1\n    return next(i for i, w in enumerate(weights) if weights[-i - 1] != weights[i])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#72",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "InvestigateCrash_1",
    "sat": "def sat(problem: int, weights=[17, 97, 77, 13, 13, 77, 13, 17], max_weight=314):\n    \"\"\"\n    An object will \"fly\" if its weights are a palindrome and sum to <= max_weight. The given object won't fly.\n    You have to determine why. Find index where the weights aren't a palindrome or -1 if weights are too big.\n    \"\"\"\n    if problem == -1:\n        return sum(weights) > max_weight\n    return weights[problem] != weights[- 1 - problem]",
    "sols": [
      "def sol(weights=[17, 97, 77, 13, 13, 77, 13, 17], max_weight=314):\n    if sum(weights) > max_weight:\n        return -1\n    return next(i for i, w in enumerate(weights) if weights[-i - 1] != weights[i])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#72",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "InvestigateCrash_2",
    "sat": "def sat(problem: int, weights=[51, 23, 10, 4, 7, 56, 12, 4, 10, 23, 51], max_weight=276):\n    \"\"\"\n    An object will \"fly\" if its weights are a palindrome and sum to <= max_weight. The given object won't fly.\n    You have to determine why. Find index where the weights aren't a palindrome or -1 if weights are too big.\n    \"\"\"\n    if problem == -1:\n        return sum(weights) > max_weight\n    return weights[problem] != weights[- 1 - problem]",
    "sols": [
      "def sol(weights=[51, 23, 10, 4, 7, 56, 12, 4, 10, 23, 51], max_weight=276):\n    if sum(weights) > max_weight:\n        return -1\n    return next(i for i, w in enumerate(weights) if weights[-i - 1] != weights[i])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#72",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "InvestigateCrash_3",
    "sat": "def sat(problem: int, weights=[22, 81, 93, 22], max_weight=222):\n    \"\"\"\n    An object will \"fly\" if its weights are a palindrome and sum to <= max_weight. The given object won't fly.\n    You have to determine why. Find index where the weights aren't a palindrome or -1 if weights are too big.\n    \"\"\"\n    if problem == -1:\n        return sum(weights) > max_weight\n    return weights[problem] != weights[- 1 - problem]",
    "sols": [
      "def sol(weights=[22, 81, 93, 22], max_weight=222):\n    if sum(weights) > max_weight:\n        return -1\n    return next(i for i, w in enumerate(weights) if weights[-i - 1] != weights[i])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#72",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "InvestigateCrash_4",
    "sat": "def sat(problem: int, weights=[43, 37, 79, 37, 20], max_weight=222):\n    \"\"\"\n    An object will \"fly\" if its weights are a palindrome and sum to <= max_weight. The given object won't fly.\n    You have to determine why. Find index where the weights aren't a palindrome or -1 if weights are too big.\n    \"\"\"\n    if problem == -1:\n        return sum(weights) > max_weight\n    return weights[problem] != weights[- 1 - problem]",
    "sols": [
      "def sol(weights=[43, 37, 79, 37, 20], max_weight=222):\n    if sum(weights) > max_weight:\n        return -1\n    return next(i for i, w in enumerate(weights) if weights[-i - 1] != weights[i])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#72",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "InvestigateCrash_5",
    "sat": "def sat(problem: int, weights=[94, 86, 77, 69, 32, 30, 63, 69, 77, 86, 94], max_weight=795):\n    \"\"\"\n    An object will \"fly\" if its weights are a palindrome and sum to <= max_weight. The given object won't fly.\n    You have to determine why. Find index where the weights aren't a palindrome or -1 if weights are too big.\n    \"\"\"\n    if problem == -1:\n        return sum(weights) > max_weight\n    return weights[problem] != weights[- 1 - problem]",
    "sols": [
      "def sol(weights=[94, 86, 77, 69, 32, 30, 63, 69, 77, 86, 94], max_weight=795):\n    if sum(weights) > max_weight:\n        return -1\n    return next(i for i, w in enumerate(weights) if weights[-i - 1] != weights[i])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#72",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "InvestigateCrash_6",
    "sat": "def sat(problem: int, weights=[12, 88, 87, 65, 9, 32, 91, 73, 14, 14, 73, 91, 32, 95, 65, 87, 88, 12], max_weight=1047):\n    \"\"\"\n    An object will \"fly\" if its weights are a palindrome and sum to <= max_weight. The given object won't fly.\n    You have to determine why. Find index where the weights aren't a palindrome or -1 if weights are too big.\n    \"\"\"\n    if problem == -1:\n        return sum(weights) > max_weight\n    return weights[problem] != weights[- 1 - problem]",
    "sols": [
      "def sol(weights=[12, 88, 87, 65, 9, 32, 91, 73, 14, 14, 73, 91, 32, 95, 65, 87, 88, 12], max_weight=1047):\n    if sum(weights) > max_weight:\n        return -1\n    return next(i for i, w in enumerate(weights) if weights[-i - 1] != weights[i])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#72",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "InvestigateCrash_7",
    "sat": "def sat(problem: int, weights=[87, 44, 26, 75, 15, 72, 88, 5, 88, 72, 90, 75, 26, 44, 87], max_weight=991):\n    \"\"\"\n    An object will \"fly\" if its weights are a palindrome and sum to <= max_weight. The given object won't fly.\n    You have to determine why. Find index where the weights aren't a palindrome or -1 if weights are too big.\n    \"\"\"\n    if problem == -1:\n        return sum(weights) > max_weight\n    return weights[problem] != weights[- 1 - problem]",
    "sols": [
      "def sol(weights=[87, 44, 26, 75, 15, 72, 88, 5, 88, 72, 90, 75, 26, 44, 87], max_weight=991):\n    if sum(weights) > max_weight:\n        return -1\n    return next(i for i, w in enumerate(weights) if weights[-i - 1] != weights[i])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#72",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "InvestigateCrash_8",
    "sat": "def sat(problem: int, weights=[37, 73, 80, 14, 91, 14, 80, 60, 37], max_weight=478):\n    \"\"\"\n    An object will \"fly\" if its weights are a palindrome and sum to <= max_weight. The given object won't fly.\n    You have to determine why. Find index where the weights aren't a palindrome or -1 if weights are too big.\n    \"\"\"\n    if problem == -1:\n        return sum(weights) > max_weight\n    return weights[problem] != weights[- 1 - problem]",
    "sols": [
      "def sol(weights=[37, 73, 80, 14, 91, 14, 80, 60, 37], max_weight=478):\n    if sum(weights) > max_weight:\n        return -1\n    return next(i for i, w in enumerate(weights) if weights[-i - 1] != weights[i])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#72",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "InvestigateCrash_9",
    "sat": "def sat(problem: int, weights=[10, 7, 2, 30, 6, 41, 43, 14, 81, 41, 6, 30, 2, 7, 10], max_weight=393):\n    \"\"\"\n    An object will \"fly\" if its weights are a palindrome and sum to <= max_weight. The given object won't fly.\n    You have to determine why. Find index where the weights aren't a palindrome or -1 if weights are too big.\n    \"\"\"\n    if problem == -1:\n        return sum(weights) > max_weight\n    return weights[problem] != weights[- 1 - problem]",
    "sols": [
      "def sol(weights=[10, 7, 2, 30, 6, 41, 43, 14, 81, 41, 6, 30, 2, 7, 10], max_weight=393):\n    if sum(weights) > max_weight:\n        return -1\n    return next(i for i, w in enumerate(weights) if weights[-i - 1] != weights[i])"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#72",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ClosestPalindrome_0",
    "sat": "def sat(pal: str, s=\"palindromordinals\"):\n    \"\"\"\n    Find the closest palindrome\n    \"\"\"\n    assert pal == pal[::-1] and len(pal) == len(s)\n    return sum(a != b for a, b in zip(pal, s)) == sum(a != b for a, b in zip(s, s[::-1])) // 2",
    "sols": [
      "def sol(s=\"palindromordinals\"):\n    n = len(s)\n    return s[:(n + 1) // 2] + s[:n // 2][::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#73",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ClosestPalindrome_1",
    "sat": "def sat(pal: str, s=\"ti=\"):\n    \"\"\"\n    Find the closest palindrome\n    \"\"\"\n    assert pal == pal[::-1] and len(pal) == len(s)\n    return sum(a != b for a, b in zip(pal, s)) == sum(a != b for a, b in zip(s, s[::-1])) // 2",
    "sols": [
      "def sol(s=\"ti=\"):\n    n = len(s)\n    return s[:(n + 1) // 2] + s[:n // 2][::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#73",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ClosestPalindrome_2",
    "sat": "def sat(pal: str, s=\"bC\"):\n    \"\"\"\n    Find the closest palindrome\n    \"\"\"\n    assert pal == pal[::-1] and len(pal) == len(s)\n    return sum(a != b for a, b in zip(pal, s)) == sum(a != b for a, b in zip(s, s[::-1])) // 2",
    "sols": [
      "def sol(s=\"bC\"):\n    n = len(s)\n    return s[:(n + 1) // 2] + s[:n // 2][::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#73",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ClosestPalindrome_3",
    "sat": "def sat(pal: str, s=\"chachatexc0vchX)e1\"):\n    \"\"\"\n    Find the closest palindrome\n    \"\"\"\n    assert pal == pal[::-1] and len(pal) == len(s)\n    return sum(a != b for a, b in zip(pal, s)) == sum(a != b for a, b in zip(s, s[::-1])) // 2",
    "sols": [
      "def sol(s=\"chachatexc0vchX)e1\"):\n    n = len(s)\n    return s[:(n + 1) // 2] + s[:n // 2][::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#73",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ClosestPalindrome_4",
    "sat": "def sat(pal: str, s=\"w\"):\n    \"\"\"\n    Find the closest palindrome\n    \"\"\"\n    assert pal == pal[::-1] and len(pal) == len(s)\n    return sum(a != b for a, b in zip(pal, s)) == sum(a != b for a, b in zip(s, s[::-1])) // 2",
    "sols": [
      "def sol(s=\"w\"):\n    n = len(s)\n    return s[:(n + 1) // 2] + s[:n // 2][::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#73",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ClosestPalindrome_5",
    "sat": "def sat(pal: str, s=\"thejth(\"):\n    \"\"\"\n    Find the closest palindrome\n    \"\"\"\n    assert pal == pal[::-1] and len(pal) == len(s)\n    return sum(a != b for a, b in zip(pal, s)) == sum(a != b for a, b in zip(s, s[::-1])) // 2",
    "sols": [
      "def sol(s=\"thejth(\"):\n    n = len(s)\n    return s[:(n + 1) // 2] + s[:n // 2][::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#73",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ClosestPalindrome_6",
    "sat": "def sat(pal: str, s=\"withyfymPithlfy\"):\n    \"\"\"\n    Find the closest palindrome\n    \"\"\"\n    assert pal == pal[::-1] and len(pal) == len(s)\n    return sum(a != b for a, b in zip(pal, s)) == sum(a != b for a, b in zip(s, s[::-1])) // 2",
    "sols": [
      "def sol(s=\"withyfymPithlfy\"):\n    n = len(s)\n    return s[:(n + 1) // 2] + s[:n // 2][::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#73",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ClosestPalindrome_7",
    "sat": "def sat(pal: str, s=\"caxuvut7ixuvhd\"):\n    \"\"\"\n    Find the closest palindrome\n    \"\"\"\n    assert pal == pal[::-1] and len(pal) == len(s)\n    return sum(a != b for a, b in zip(pal, s)) == sum(a != b for a, b in zip(s, s[::-1])) // 2",
    "sols": [
      "def sol(s=\"caxuvut7ixuvhd\"):\n    n = len(s)\n    return s[:(n + 1) // 2] + s[:n // 2][::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#73",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ClosestPalindrome_8",
    "sat": "def sat(pal: str, s=\"ditexta#iE&St\"):\n    \"\"\"\n    Find the closest palindrome\n    \"\"\"\n    assert pal == pal[::-1] and len(pal) == len(s)\n    return sum(a != b for a, b in zip(pal, s)) == sum(a != b for a, b in zip(s, s[::-1])) // 2",
    "sols": [
      "def sol(s=\"ditexta#iE&St\"):\n    n = len(s)\n    return s[:(n + 1) // 2] + s[:n // 2][::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#73",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ClosestPalindrome_9",
    "sat": "def sat(pal: str, s=\"tht\"):\n    \"\"\"\n    Find the closest palindrome\n    \"\"\"\n    assert pal == pal[::-1] and len(pal) == len(s)\n    return sum(a != b for a, b in zip(pal, s)) == sum(a != b for a, b in zip(s, s[::-1])) // 2",
    "sols": [
      "def sol(s=\"tht\"):\n    n = len(s)\n    return s[:(n + 1) // 2] + s[:n // 2][::-1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#73",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NarrowerList_0",
    "sat": "def sat(li: List[str], lists=[['this', 'list', 'is', 'narrow'], ['I', 'am', 'shorter but wider']]):\n    \"\"\"\n    Find the list that has fewer total characters (including repetitions)\n    \"\"\"\n    width = sum(len(s) for s in li)\n    for li2 in lists:\n        assert width <= sum(len(s) for s in li2)\n    return li in lists",
    "sols": [
      "def sol(lists=[['this', 'list', 'is', 'narrow'], ['I', 'am', 'shorter but wider']]):\n    return min(lists, key=lambda x: sum(len(i) for i in x))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#74",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NarrowerList_1",
    "sat": "def sat(li: List[str], lists=[['gefypo', 'gomecythib'], ['vicowodasyhifeme', 'mojowu', 'poxuchuchacyweth']]):\n    \"\"\"\n    Find the list that has fewer total characters (including repetitions)\n    \"\"\"\n    width = sum(len(s) for s in li)\n    for li2 in lists:\n        assert width <= sum(len(s) for s in li2)\n    return li in lists",
    "sols": [
      "def sol(lists=[['gefypo', 'gomecythib'], ['vicowodasyhifeme', 'mojowu', 'poxuchuchacyweth']]):\n    return min(lists, key=lambda x: sum(len(i) for i in x))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#74",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NarrowerList_2",
    "sat": "def sat(li: List[str], lists=[['cil', 'vesic', 'gaquedane'], ['machetyt', 'pumepywotatofo'], ['zatex', 'gilygyxejimagiquav']]):\n    \"\"\"\n    Find the list that has fewer total characters (including repetitions)\n    \"\"\"\n    width = sum(len(s) for s in li)\n    for li2 in lists:\n        assert width <= sum(len(s) for s in li2)\n    return li in lists",
    "sols": [
      "def sol(lists=[['cil', 'vesic', 'gaquedane'], ['machetyt', 'pumepywotatofo'], ['zatex', 'gilygyxejimagiquav']]):\n    return min(lists, key=lambda x: sum(len(i) for i in x))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#74",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NarrowerList_3",
    "sat": "def sat(li: List[str], lists=[['hubibexuratezixekyl', 'todot'], ['mochokyhyzylethy', 'we'], ['sygymithajyhu', 'byziruchocetextyram', 'thizupesakocami']]):\n    \"\"\"\n    Find the list that has fewer total characters (including repetitions)\n    \"\"\"\n    width = sum(len(s) for s in li)\n    for li2 in lists:\n        assert width <= sum(len(s) for s in li2)\n    return li in lists",
    "sols": [
      "def sol(lists=[['hubibexuratezixekyl', 'todot'], ['mochokyhyzylethy', 'we'], ['sygymithajyhu', 'byziruchocetextyram', 'thizupesakocami']]):\n    return min(lists, key=lambda x: sum(len(i) for i in x))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#74",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NarrowerList_4",
    "sat": "def sat(li: List[str], lists=[['r', 'datucykokegyquazyta', 'gytextevavasochub'], ['faryjav', 'textebyquyho']]):\n    \"\"\"\n    Find the list that has fewer total characters (including repetitions)\n    \"\"\"\n    width = sum(len(s) for s in li)\n    for li2 in lists:\n        assert width <= sum(len(s) for s in li2)\n    return li in lists",
    "sols": [
      "def sol(lists=[['r', 'datucykokegyquazyta', 'gytextevavasochub'], ['faryjav', 'textebyquyho']]):\n    return min(lists, key=lambda x: sum(len(i) for i in x))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#74",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NarrowerList_5",
    "sat": "def sat(li: List[str], lists=[['lyquetextochonulewyj', 'dynysype', 'dojuluzitha', 'fewimiwequochixo'], ['muv', 'bofilisequimop', 'cizecirexequyho', 'tenythegu'], ['lenuthunifafetextuly', 'thothofukero']]):\n    \"\"\"\n    Find the list that has fewer total characters (including repetitions)\n    \"\"\"\n    width = sum(len(s) for s in li)\n    for li2 in lists:\n        assert width <= sum(len(s) for s in li2)\n    return li in lists",
    "sols": [
      "def sol(lists=[['lyquetextochonulewyj', 'dynysype', 'dojuluzitha', 'fewimiwequochixo'], ['muv', 'bofilisequimop', 'cizecirexequyho', 'tenythegu'], ['lenuthunifafetextuly', 'thothofukero']]):\n    return min(lists, key=lambda x: sum(len(i) for i in x))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#74",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NarrowerList_6",
    "sat": "def sat(li: List[str], lists=[['pokelyjuf', 'hiquut'], ['coxisathut', 'cowabejabethacesar', 'thubimylumivehesute'], ['c', 'didod', 'ryju']]):\n    \"\"\"\n    Find the list that has fewer total characters (including repetitions)\n    \"\"\"\n    width = sum(len(s) for s in li)\n    for li2 in lists:\n        assert width <= sum(len(s) for s in li2)\n    return li in lists",
    "sols": [
      "def sol(lists=[['pokelyjuf', 'hiquut'], ['coxisathut', 'cowabejabethacesar', 'thubimylumivehesute'], ['c', 'didod', 'ryju']]):\n    return min(lists, key=lambda x: sum(len(i) for i in x))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#74",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NarrowerList_7",
    "sat": "def sat(li: List[str], lists=[['textene', 'voxazotextemyn'], ['bacyfyjepihiha', 'thyt', 'rysydud', 'gyfimu'], ['ga', 'quiv'], ['lo', 's', 'thijasi']]):\n    \"\"\"\n    Find the list that has fewer total characters (including repetitions)\n    \"\"\"\n    width = sum(len(s) for s in li)\n    for li2 in lists:\n        assert width <= sum(len(s) for s in li2)\n    return li in lists",
    "sols": [
      "def sol(lists=[['textene', 'voxazotextemyn'], ['bacyfyjepihiha', 'thyt', 'rysydud', 'gyfimu'], ['ga', 'quiv'], ['lo', 's', 'thijasi']]):\n    return min(lists, key=lambda x: sum(len(i) for i in x))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#74",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NarrowerList_8",
    "sat": "def sat(li: List[str], lists=[['cokochumugil', 'japy', 'xykyvotextu', 'xevy'], ['rurirate', 'zutuquujuchilorusim'], ['bygimutextemigum', 'carequetenehehu', 'fenatextukod', 'gihiherabeza']]):\n    \"\"\"\n    Find the list that has fewer total characters (including repetitions)\n    \"\"\"\n    width = sum(len(s) for s in li)\n    for li2 in lists:\n        assert width <= sum(len(s) for s in li2)\n    return li in lists",
    "sols": [
      "def sol(lists=[['cokochumugil', 'japy', 'xykyvotextu', 'xevy'], ['rurirate', 'zutuquujuchilorusim'], ['bygimutextemigum', 'carequetenehehu', 'fenatextukod', 'gihiherabeza']]):\n    return min(lists, key=lambda x: sum(len(i) for i in x))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#74",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NarrowerList_9",
    "sat": "def sat(li: List[str], lists=[['rejihuci', 'monizycy'], ['motalejybat', 'tocu', 'zeraf', 'gukyxiwijewyn'], ['kygupybo', 'zi']]):\n    \"\"\"\n    Find the list that has fewer total characters (including repetitions)\n    \"\"\"\n    width = sum(len(s) for s in li)\n    for li2 in lists:\n        assert width <= sum(len(s) for s in li2)\n    return li in lists",
    "sols": [
      "def sol(lists=[['rejihuci', 'monizycy'], ['motalejybat', 'tocu', 'zeraf', 'gukyxiwijewyn'], ['kygupybo', 'zi']]):\n    return min(lists, key=lambda x: sum(len(i) for i in x))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#74",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "ThreePrimes_0",
    "sat": "def sat(factors: List[List[int]]):\n    \"\"\"\n    Find all 247 integers <= 1000 that are the product of exactly three primes.\n    Each integer should represented as the list of its three prime factors.\n    \"\"\"\n    primes = set(range(2, 1000))\n    for n in range(2, 1000):\n        if n in primes:\n            primes.difference_update(range(2 * n, 1000, n))\n    assert all(p in primes for f in factors for p in f), \"all factors must be prime\"\n    nums = {p * q * r for p, q, r in factors}\n    return max(nums) < 1000 and len(nums) == 247",
    "sols": [
      "def sol():\n    primes = set(range(2, 1000))\n    for n in range(2, 1000):\n        if n in primes:\n            primes.difference_update(range(2 * n, 1000, n))\n    return [[p, q, r] for p in primes for q in primes if p <= q for r in primes if q <= r and p * q * r < 1000]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#75",
    "taint_date": "2021-7-7",
    "weight": 0.010416666666666666
  },
  {
    "name": "IntegerLog_0",
    "sat": "def sat(x: int, a=3, n=1290070078170102666248196035845070394933441741644993085810116441344597492642263849):\n    \"\"\"Find an integer exponent x such that a^x = n\"\"\"\n    return a ** x == n",
    "sols": [
      "def sol(a=3, n=1290070078170102666248196035845070394933441741644993085810116441344597492642263849):\n    m = 1\n    x = 0\n    while m != n:\n        x += 1\n        m *= a\n    return x"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#76",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "IntegerLog_1",
    "sat": "def sat(x: int, a=4, n=49947976805055875702105555676690660891977570282639538413746511354005947821116249921924897649015871538557230897942505966327167610868612564900642816):\n    \"\"\"Find an integer exponent x such that a^x = n\"\"\"\n    return a ** x == n",
    "sols": [
      "def sol(a=4, n=49947976805055875702105555676690660891977570282639538413746511354005947821116249921924897649015871538557230897942505966327167610868612564900642816):\n    m = 1\n    x = 0\n    while m != n:\n        x += 1\n        m *= a\n    return x"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#76",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "IntegerLog_2",
    "sat": "def sat(x: int, a=2, n=4611686018427387904):\n    \"\"\"Find an integer exponent x such that a^x = n\"\"\"\n    return a ** x == n",
    "sols": [
      "def sol(a=2, n=4611686018427387904):\n    m = 1\n    x = 0\n    while m != n:\n        x += 1\n        m *= a\n    return x"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#76",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "IntegerLog_3",
    "sat": "def sat(x: int, a=7, n=619664992585427611791050679609026893099690427802915014534984716820652776102999166869953170315965558474401):\n    \"\"\"Find an integer exponent x such that a^x = n\"\"\"\n    return a ** x == n",
    "sols": [
      "def sol(a=7, n=619664992585427611791050679609026893099690427802915014534984716820652776102999166869953170315965558474401):\n    m = 1\n    x = 0\n    while m != n:\n        x += 1\n        m *= a\n    return x"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#76",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "IntegerLog_4",
    "sat": "def sat(x: int, a=3, n=273892744995340833777347939263771534786080723599733441):\n    \"\"\"Find an integer exponent x such that a^x = n\"\"\"\n    return a ** x == n",
    "sols": [
      "def sol(a=3, n=273892744995340833777347939263771534786080723599733441):\n    m = 1\n    x = 0\n    while m != n:\n        x += 1\n        m *= a\n    return x"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#76",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "IntegerLog_5",
    "sat": "def sat(x: int, a=1, n=1):\n    \"\"\"Find an integer exponent x such that a^x = n\"\"\"\n    return a ** x == n",
    "sols": [
      "def sol(a=1, n=1):\n    m = 1\n    x = 0\n    while m != n:\n        x += 1\n        m *= a\n    return x"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#76",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "IntegerLog_6",
    "sat": "def sat(x: int, a=7, n=422172910905251082898342892507708254420575225812469392211799592546100439414212081173038488709684817505454589853340690711478675172759132571155298594457803891890861791746265193607):\n    \"\"\"Find an integer exponent x such that a^x = n\"\"\"\n    return a ** x == n",
    "sols": [
      "def sol(a=7, n=422172910905251082898342892507708254420575225812469392211799592546100439414212081173038488709684817505454589853340690711478675172759132571155298594457803891890861791746265193607):\n    m = 1\n    x = 0\n    while m != n:\n        x += 1\n        m *= a\n    return x"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#76",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "IntegerLog_7",
    "sat": "def sat(x: int, a=3, n=696198609130885597695136021593547814689632716312296141651066450089):\n    \"\"\"Find an integer exponent x such that a^x = n\"\"\"\n    return a ** x == n",
    "sols": [
      "def sol(a=3, n=696198609130885597695136021593547814689632716312296141651066450089):\n    m = 1\n    x = 0\n    while m != n:\n        x += 1\n        m *= a\n    return x"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#76",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "IntegerLog_8",
    "sat": "def sat(x: int, a=3, n=443426488243037769948249630619149892803):\n    \"\"\"Find an integer exponent x such that a^x = n\"\"\"\n    return a ** x == n",
    "sols": [
      "def sol(a=3, n=443426488243037769948249630619149892803):\n    m = 1\n    x = 0\n    while m != n:\n        x += 1\n        m *= a\n    return x"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#76",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "IntegerLog_9",
    "sat": "def sat(x: int, a=7, n=3927513814852118215253663462745985104429523654386747748367596265637242329346407):\n    \"\"\"Find an integer exponent x such that a^x = n\"\"\"\n    return a ** x == n",
    "sols": [
      "def sol(a=7, n=3927513814852118215253663462745985104429523654386747748367596265637242329346407):\n    m = 1\n    x = 0\n    while m != n:\n        x += 1\n        m *= a\n    return x"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#76",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CubeRoot_0",
    "sat": "def sat(x: int, n=42714774173606970182754018064350848294149432972747296768):\n    \"\"\"Find an integer that when cubed is n\"\"\"\n    return x ** 3 == n",
    "sols": [
      "def sol(n=42714774173606970182754018064350848294149432972747296768):  # Using Newton's method\n    m = abs(n)\n    x = round(abs(n) ** (1 / 3))\n    while x ** 3 != m:\n        x += (m - x ** 3) // (3 * x ** 2)\n    return -x if n < 0 else x"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#77\n\nWe made it harder by giving very large n for which `round(n ** (1/3))`",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CubeRoot_1",
    "sat": "def sat(x: int, n=-469541313747981125):\n    \"\"\"Find an integer that when cubed is n\"\"\"\n    return x ** 3 == n",
    "sols": [
      "def sol(n=-469541313747981125):  # Using Newton's method\n    m = abs(n)\n    x = round(abs(n) ** (1 / 3))\n    while x ** 3 != m:\n        x += (m - x ** 3) // (3 * x ** 2)\n    return -x if n < 0 else x"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#77\n\nWe made it harder by giving very large n for which `round(n ** (1/3))`",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CubeRoot_2",
    "sat": "def sat(x: int, n=963966660871383014273727008911874274513660721639801945125024924885086622296):\n    \"\"\"Find an integer that when cubed is n\"\"\"\n    return x ** 3 == n",
    "sols": [
      "def sol(n=963966660871383014273727008911874274513660721639801945125024924885086622296):  # Using Newton's method\n    m = abs(n)\n    x = round(abs(n) ** (1 / 3))\n    while x ** 3 != m:\n        x += (m - x ** 3) // (3 * x ** 2)\n    return -x if n < 0 else x"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#77\n\nWe made it harder by giving very large n for which `round(n ** (1/3))`",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CubeRoot_3",
    "sat": "def sat(x: int, n=-858580967744947820888627092732831059532555665642825043140896515384975483968):\n    \"\"\"Find an integer that when cubed is n\"\"\"\n    return x ** 3 == n",
    "sols": [
      "def sol(n=-858580967744947820888627092732831059532555665642825043140896515384975483968):  # Using Newton's method\n    m = abs(n)\n    x = round(abs(n) ** (1 / 3))\n    while x ** 3 != m:\n        x += (m - x ** 3) // (3 * x ** 2)\n    return -x if n < 0 else x"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#77\n\nWe made it harder by giving very large n for which `round(n ** (1/3))`",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CubeRoot_4",
    "sat": "def sat(x: int, n=-1649412660748961726580117293638546881248424191676176072):\n    \"\"\"Find an integer that when cubed is n\"\"\"\n    return x ** 3 == n",
    "sols": [
      "def sol(n=-1649412660748961726580117293638546881248424191676176072):  # Using Newton's method\n    m = abs(n)\n    x = round(abs(n) ** (1 / 3))\n    while x ** 3 != m:\n        x += (m - x ** 3) // (3 * x ** 2)\n    return -x if n < 0 else x"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#77\n\nWe made it harder by giving very large n for which `round(n ** (1/3))`",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CubeRoot_5",
    "sat": "def sat(x: int, n=136000466113128777207793400499636683512375):\n    \"\"\"Find an integer that when cubed is n\"\"\"\n    return x ** 3 == n",
    "sols": [
      "def sol(n=136000466113128777207793400499636683512375):  # Using Newton's method\n    m = abs(n)\n    x = round(abs(n) ** (1 / 3))\n    while x ** 3 != m:\n        x += (m - x ** 3) // (3 * x ** 2)\n    return -x if n < 0 else x"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#77\n\nWe made it harder by giving very large n for which `round(n ** (1/3))`",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CubeRoot_6",
    "sat": "def sat(x: int, n=-19569459995573298470418850728885331622027):\n    \"\"\"Find an integer that when cubed is n\"\"\"\n    return x ** 3 == n",
    "sols": [
      "def sol(n=-19569459995573298470418850728885331622027):  # Using Newton's method\n    m = abs(n)\n    x = round(abs(n) ** (1 / 3))\n    while x ** 3 != m:\n        x += (m - x ** 3) // (3 * x ** 2)\n    return -x if n < 0 else x"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#77\n\nWe made it harder by giving very large n for which `round(n ** (1/3))`",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CubeRoot_7",
    "sat": "def sat(x: int, n=653962786987239225717840966462586579533169098577519549137735730264):\n    \"\"\"Find an integer that when cubed is n\"\"\"\n    return x ** 3 == n",
    "sols": [
      "def sol(n=653962786987239225717840966462586579533169098577519549137735730264):  # Using Newton's method\n    m = abs(n)\n    x = round(abs(n) ** (1 / 3))\n    while x ** 3 != m:\n        x += (m - x ** 3) // (3 * x ** 2)\n    return -x if n < 0 else x"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#77\n\nWe made it harder by giving very large n for which `round(n ** (1/3))`",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CubeRoot_8",
    "sat": "def sat(x: int, n=6859):\n    \"\"\"Find an integer that when cubed is n\"\"\"\n    return x ** 3 == n",
    "sols": [
      "def sol(n=6859):  # Using Newton's method\n    m = abs(n)\n    x = round(abs(n) ** (1 / 3))\n    while x ** 3 != m:\n        x += (m - x ** 3) // (3 * x ** 2)\n    return -x if n < 0 else x"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#77\n\nWe made it harder by giving very large n for which `round(n ** (1/3))`",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "CubeRoot_9",
    "sat": "def sat(x: int, n=-53842257566437335373707978104):\n    \"\"\"Find an integer that when cubed is n\"\"\"\n    return x ** 3 == n",
    "sols": [
      "def sol(n=-53842257566437335373707978104):  # Using Newton's method\n    m = abs(n)\n    x = round(abs(n) ** (1 / 3))\n    while x ** 3 != m:\n        x += (m - x ** 3) // (3 * x ** 2)\n    return -x if n < 0 else x"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#77\n\nWe made it harder by giving very large n for which `round(n ** (1/3))`",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HexPrimes_0",
    "sat": "def sat(primes: List[bool], n=\"A4D4455214122CE192CCBE3\"):\n    \"\"\"Determine which characters of a hexidecimal correspond to prime numbers\"\"\"\n    return all(primes[i] == (c in \"2357BD\") for i, c in enumerate(n))",
    "sols": [
      "def sol(n=\"A4D4455214122CE192CCBE3\"):\n    return [c in \"2357BD\" for c in n]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#78",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HexPrimes_1",
    "sat": "def sat(primes: List[bool], n=\"a0eebda812c4c27a97d35f1\"):\n    \"\"\"Determine which characters of a hexidecimal correspond to prime numbers\"\"\"\n    return all(primes[i] == (c in \"2357BD\") for i, c in enumerate(n))",
    "sols": [
      "def sol(n=\"a0eebda812c4c27a97d35f1\"):\n    return [c in \"2357BD\" for c in n]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#78",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HexPrimes_2",
    "sat": "def sat(primes: List[bool], n=\"4a4a5904aaa94eb2\"):\n    \"\"\"Determine which characters of a hexidecimal correspond to prime numbers\"\"\"\n    return all(primes[i] == (c in \"2357BD\") for i, c in enumerate(n))",
    "sols": [
      "def sol(n=\"4a4a5904aaa94eb2\"):\n    return [c in \"2357BD\" for c in n]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#78",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HexPrimes_3",
    "sat": "def sat(primes: List[bool], n=\"b696e7352d58ee\"):\n    \"\"\"Determine which characters of a hexidecimal correspond to prime numbers\"\"\"\n    return all(primes[i] == (c in \"2357BD\") for i, c in enumerate(n))",
    "sols": [
      "def sol(n=\"b696e7352d58ee\"):\n    return [c in \"2357BD\" for c in n]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#78",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HexPrimes_4",
    "sat": "def sat(primes: List[bool], n=\"1a8dcd03abe2cdc\"):\n    \"\"\"Determine which characters of a hexidecimal correspond to prime numbers\"\"\"\n    return all(primes[i] == (c in \"2357BD\") for i, c in enumerate(n))",
    "sols": [
      "def sol(n=\"1a8dcd03abe2cdc\"):\n    return [c in \"2357BD\" for c in n]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#78",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HexPrimes_5",
    "sat": "def sat(primes: List[bool], n=\"72d77\"):\n    \"\"\"Determine which characters of a hexidecimal correspond to prime numbers\"\"\"\n    return all(primes[i] == (c in \"2357BD\") for i, c in enumerate(n))",
    "sols": [
      "def sol(n=\"72d77\"):\n    return [c in \"2357BD\" for c in n]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#78",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HexPrimes_6",
    "sat": "def sat(primes: List[bool], n=\"d0b8e8441dcf15e12484\"):\n    \"\"\"Determine which characters of a hexidecimal correspond to prime numbers\"\"\"\n    return all(primes[i] == (c in \"2357BD\") for i, c in enumerate(n))",
    "sols": [
      "def sol(n=\"d0b8e8441dcf15e12484\"):\n    return [c in \"2357BD\" for c in n]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#78",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HexPrimes_7",
    "sat": "def sat(primes: List[bool], n=\"2bfb4f48effb8\"):\n    \"\"\"Determine which characters of a hexidecimal correspond to prime numbers\"\"\"\n    return all(primes[i] == (c in \"2357BD\") for i, c in enumerate(n))",
    "sols": [
      "def sol(n=\"2bfb4f48effb8\"):\n    return [c in \"2357BD\" for c in n]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#78",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HexPrimes_8",
    "sat": "def sat(primes: List[bool], n=\"0\"):\n    \"\"\"Determine which characters of a hexidecimal correspond to prime numbers\"\"\"\n    return all(primes[i] == (c in \"2357BD\") for i, c in enumerate(n))",
    "sols": [
      "def sol(n=\"0\"):\n    return [c in \"2357BD\" for c in n]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#78",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "HexPrimes_9",
    "sat": "def sat(primes: List[bool], n=\"78a9e1efe1c5d1aa918a8\"):\n    \"\"\"Determine which characters of a hexidecimal correspond to prime numbers\"\"\"\n    return all(primes[i] == (c in \"2357BD\") for i, c in enumerate(n))",
    "sols": [
      "def sol(n=\"78a9e1efe1c5d1aa918a8\"):\n    return [c in \"2357BD\" for c in n]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#78",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Binarize_0",
    "sat": "def sat(b: str, n=5324680297138495285):\n    \"\"\"Write n base 2 followed and preceded by 'bits'\"\"\"\n    assert b[:4] == b[-4:] == 'bits'\n    inside = b[4:-4]\n    assert all(c in \"01\" for c in inside)\n    assert inside[0] == \"1\" or len(inside) == 1\n    m = 0\n    for c in inside:\n        m = 2 * m + int(c)\n    return m == n",
    "sols": [
      "def sol(n=5324680297138495285):\n    s = bin(n)[2:]\n    return f'bits{s}bits'"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#79",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Binarize_1",
    "sat": "def sat(b: str, n=88465169532890):\n    \"\"\"Write n base 2 followed and preceded by 'bits'\"\"\"\n    assert b[:4] == b[-4:] == 'bits'\n    inside = b[4:-4]\n    assert all(c in \"01\" for c in inside)\n    assert inside[0] == \"1\" or len(inside) == 1\n    m = 0\n    for c in inside:\n        m = 2 * m + int(c)\n    return m == n",
    "sols": [
      "def sol(n=88465169532890):\n    s = bin(n)[2:]\n    return f'bits{s}bits'"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#79",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Binarize_2",
    "sat": "def sat(b: str, n=0):\n    \"\"\"Write n base 2 followed and preceded by 'bits'\"\"\"\n    assert b[:4] == b[-4:] == 'bits'\n    inside = b[4:-4]\n    assert all(c in \"01\" for c in inside)\n    assert inside[0] == \"1\" or len(inside) == 1\n    m = 0\n    for c in inside:\n        m = 2 * m + int(c)\n    return m == n",
    "sols": [
      "def sol(n=0):\n    s = bin(n)[2:]\n    return f'bits{s}bits'"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#79",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Binarize_3",
    "sat": "def sat(b: str, n=16655679678386282):\n    \"\"\"Write n base 2 followed and preceded by 'bits'\"\"\"\n    assert b[:4] == b[-4:] == 'bits'\n    inside = b[4:-4]\n    assert all(c in \"01\" for c in inside)\n    assert inside[0] == \"1\" or len(inside) == 1\n    m = 0\n    for c in inside:\n        m = 2 * m + int(c)\n    return m == n",
    "sols": [
      "def sol(n=16655679678386282):\n    s = bin(n)[2:]\n    return f'bits{s}bits'"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#79",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Binarize_4",
    "sat": "def sat(b: str, n=2900):\n    \"\"\"Write n base 2 followed and preceded by 'bits'\"\"\"\n    assert b[:4] == b[-4:] == 'bits'\n    inside = b[4:-4]\n    assert all(c in \"01\" for c in inside)\n    assert inside[0] == \"1\" or len(inside) == 1\n    m = 0\n    for c in inside:\n        m = 2 * m + int(c)\n    return m == n",
    "sols": [
      "def sol(n=2900):\n    s = bin(n)[2:]\n    return f'bits{s}bits'"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#79",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Binarize_5",
    "sat": "def sat(b: str, n=786216):\n    \"\"\"Write n base 2 followed and preceded by 'bits'\"\"\"\n    assert b[:4] == b[-4:] == 'bits'\n    inside = b[4:-4]\n    assert all(c in \"01\" for c in inside)\n    assert inside[0] == \"1\" or len(inside) == 1\n    m = 0\n    for c in inside:\n        m = 2 * m + int(c)\n    return m == n",
    "sols": [
      "def sol(n=786216):\n    s = bin(n)[2:]\n    return f'bits{s}bits'"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#79",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Binarize_6",
    "sat": "def sat(b: str, n=40002925026544973979):\n    \"\"\"Write n base 2 followed and preceded by 'bits'\"\"\"\n    assert b[:4] == b[-4:] == 'bits'\n    inside = b[4:-4]\n    assert all(c in \"01\" for c in inside)\n    assert inside[0] == \"1\" or len(inside) == 1\n    m = 0\n    for c in inside:\n        m = 2 * m + int(c)\n    return m == n",
    "sols": [
      "def sol(n=40002925026544973979):\n    s = bin(n)[2:]\n    return f'bits{s}bits'"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#79",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Binarize_7",
    "sat": "def sat(b: str, n=13609827511452802904634708047):\n    \"\"\"Write n base 2 followed and preceded by 'bits'\"\"\"\n    assert b[:4] == b[-4:] == 'bits'\n    inside = b[4:-4]\n    assert all(c in \"01\" for c in inside)\n    assert inside[0] == \"1\" or len(inside) == 1\n    m = 0\n    for c in inside:\n        m = 2 * m + int(c)\n    return m == n",
    "sols": [
      "def sol(n=13609827511452802904634708047):\n    s = bin(n)[2:]\n    return f'bits{s}bits'"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#79",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Binarize_8",
    "sat": "def sat(b: str, n=9092454863839039891897061480):\n    \"\"\"Write n base 2 followed and preceded by 'bits'\"\"\"\n    assert b[:4] == b[-4:] == 'bits'\n    inside = b[4:-4]\n    assert all(c in \"01\" for c in inside)\n    assert inside[0] == \"1\" or len(inside) == 1\n    m = 0\n    for c in inside:\n        m = 2 * m + int(c)\n    return m == n",
    "sols": [
      "def sol(n=9092454863839039891897061480):\n    s = bin(n)[2:]\n    return f'bits{s}bits'"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#79",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Binarize_9",
    "sat": "def sat(b: str, n=7075432):\n    \"\"\"Write n base 2 followed and preceded by 'bits'\"\"\"\n    assert b[:4] == b[-4:] == 'bits'\n    inside = b[4:-4]\n    assert all(c in \"01\" for c in inside)\n    assert inside[0] == \"1\" or len(inside) == 1\n    m = 0\n    for c in inside:\n        m = 2 * m + int(c)\n    return m == n",
    "sols": [
      "def sol(n=7075432):\n    s = bin(n)[2:]\n    return f'bits{s}bits'"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#79",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NearbyDuplicates_0",
    "sat": "def sat(indices: List[int], s=\"I am an unhappy string!\"):\n    \"\"\"A string is happy if every three consecutive characters are distinct. Find two indices making s unhappy.\"\"\"\n    i, j = indices\n    return s[i] == s[j] and 0 <= i < j < i + 3",
    "sols": [
      "def sol(s=\"I am an unhappy string!\"):\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return [i, i + 1]\n        if s[i] == s[i + 2]:\n            return [i, i + 2]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#80",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NearbyDuplicates_1",
    "sat": "def sat(indices: List[int], s=\"aeEm%%uIV0imR&xUvQvZf#1z4\"):\n    \"\"\"A string is happy if every three consecutive characters are distinct. Find two indices making s unhappy.\"\"\"\n    i, j = indices\n    return s[i] == s[j] and 0 <= i < j < i + 3",
    "sols": [
      "def sol(s=\"aeEm%%uIV0imR&xUvQvZf#1z4\"):\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return [i, i + 1]\n        if s[i] == s[i + 2]:\n            return [i, i + 2]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#80",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NearbyDuplicates_2",
    "sat": "def sat(indices: List[int], s=\"e&S|C;;b1Nf[mmsQrQY\"):\n    \"\"\"A string is happy if every three consecutive characters are distinct. Find two indices making s unhappy.\"\"\"\n    i, j = indices\n    return s[i] == s[j] and 0 <= i < j < i + 3",
    "sols": [
      "def sol(s=\"e&S|C;;b1Nf[mmsQrQY\"):\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return [i, i + 1]\n        if s[i] == s[i + 2]:\n            return [i, i + 2]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#80",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NearbyDuplicates_3",
    "sat": "def sat(indices: List[int], s=\"?EaEc/oDAm(i gP\"):\n    \"\"\"A string is happy if every three consecutive characters are distinct. Find two indices making s unhappy.\"\"\"\n    i, j = indices\n    return s[i] == s[j] and 0 <= i < j < i + 3",
    "sols": [
      "def sol(s=\"?EaEc/oDAm(i gP\"):\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return [i, i + 1]\n        if s[i] == s[i + 2]:\n            return [i, i + 2]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#80",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NearbyDuplicates_4",
    "sat": "def sat(indices: List[int], s=\"pXw|EEcTKZ;:n[-tBME[[sn%fR37l;bM,t%!\"):\n    \"\"\"A string is happy if every three consecutive characters are distinct. Find two indices making s unhappy.\"\"\"\n    i, j = indices\n    return s[i] == s[j] and 0 <= i < j < i + 3",
    "sols": [
      "def sol(s=\"pXw|EEcTKZ;:n[-tBME[[sn%fR37l;bM,t%!\"):\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return [i, i + 1]\n        if s[i] == s[i + 2]:\n            return [i, i + 2]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#80",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NearbyDuplicates_5",
    "sat": "def sat(indices: List[int], s=\"H4KjbncFR7a|=K,$hGhS;$:G:kkt^g|<!\"):\n    \"\"\"A string is happy if every three consecutive characters are distinct. Find two indices making s unhappy.\"\"\"\n    i, j = indices\n    return s[i] == s[j] and 0 <= i < j < i + 3",
    "sols": [
      "def sol(s=\"H4KjbncFR7a|=K,$hGhS;$:G:kkt^g|<!\"):\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return [i, i + 1]\n        if s[i] == s[i + 2]:\n            return [i, i + 2]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#80",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NearbyDuplicates_6",
    "sat": "def sat(indices: List[int], s=\"i--laJV,G\"):\n    \"\"\"A string is happy if every three consecutive characters are distinct. Find two indices making s unhappy.\"\"\"\n    i, j = indices\n    return s[i] == s[j] and 0 <= i < j < i + 3",
    "sols": [
      "def sol(s=\"i--laJV,G\"):\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return [i, i + 1]\n        if s[i] == s[i + 2]:\n            return [i, i + 2]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#80",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NearbyDuplicates_7",
    "sat": "def sat(indices: List[int], s=\"RwcNpavM37kRk:xg|BK]$Y\"):\n    \"\"\"A string is happy if every three consecutive characters are distinct. Find two indices making s unhappy.\"\"\"\n    i, j = indices\n    return s[i] == s[j] and 0 <= i < j < i + 3",
    "sols": [
      "def sol(s=\"RwcNpavM37kRk:xg|BK]$Y\"):\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return [i, i + 1]\n        if s[i] == s[i + 2]:\n            return [i, i + 2]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#80",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NearbyDuplicates_8",
    "sat": "def sat(indices: List[int], s=\"gF(.^+^i7wO%wI3>6aT[\"):\n    \"\"\"A string is happy if every three consecutive characters are distinct. Find two indices making s unhappy.\"\"\"\n    i, j = indices\n    return s[i] == s[j] and 0 <= i < j < i + 3",
    "sols": [
      "def sol(s=\"gF(.^+^i7wO%wI3>6aT[\"):\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return [i, i + 1]\n        if s[i] == s[i + 2]:\n            return [i, i + 2]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#80",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "NearbyDuplicates_9",
    "sat": "def sat(indices: List[int], s=\"Hiw GHgtcyuQan>8d))^M9l\"):\n    \"\"\"A string is happy if every three consecutive characters are distinct. Find two indices making s unhappy.\"\"\"\n    i, j = indices\n    return s[i] == s[j] and 0 <= i < j < i + 3",
    "sols": [
      "def sol(s=\"Hiw GHgtcyuQan>8d))^M9l\"):\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return [i, i + 1]\n        if s[i] == s[i + 2]:\n            return [i, i + 2]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#80",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Grader_0",
    "sat": "def sat(grades: List[str], gpas=[2.8, 3.1, 4.0, 2.2, 3.1, 2.5, 0.9]):\n    \"\"\"\n    Convert GPAs to letter grades according to the following table:\n    4.0: A+\n    3.7: A\n    3.4: A-\n    3.0: B+\n    2.7: B\n    2.4: B-\n    2.0: C+\n    1.7: C\n    1.4: C-\n    below: F\n\n    Sample input: [4.0, 3.5, 3.8]\n    Sample output: ['A+', 'A-', 'A']\n    \"\"\"\n    assert len(grades) == len(gpas)\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    for grade, gpa in zip(grades, gpas):\n        i = letters.index(grade)\n        assert gpa >= scores[i]\n        assert i == 0 or gpa <= scores[i - 1]\n    return True",
    "sols": [
      "def sol(gpas=[2.8, 3.1, 4.0, 2.2, 3.1, 2.5, 0.9]):\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    ans = []\n    for gpa in gpas:\n        i = 0\n        while gpa < scores[i]:\n            i += 1\n        ans.append(letters[i])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#81",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Grader_1",
    "sat": "def sat(grades: List[str], gpas=[3.9759656717898215, 2.532507032264099, 3.695549189812313, 2.492545757546573, 0.9653857771911838, 1.619680869536884]):\n    \"\"\"\n    Convert GPAs to letter grades according to the following table:\n    4.0: A+\n    3.7: A\n    3.4: A-\n    3.0: B+\n    2.7: B\n    2.4: B-\n    2.0: C+\n    1.7: C\n    1.4: C-\n    below: F\n\n    Sample input: [4.0, 3.5, 3.8]\n    Sample output: ['A+', 'A-', 'A']\n    \"\"\"\n    assert len(grades) == len(gpas)\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    for grade, gpa in zip(grades, gpas):\n        i = letters.index(grade)\n        assert gpa >= scores[i]\n        assert i == 0 or gpa <= scores[i - 1]\n    return True",
    "sols": [
      "def sol(gpas=[3.9759656717898215, 2.532507032264099, 3.695549189812313, 2.492545757546573, 0.9653857771911838, 1.619680869536884]):\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    ans = []\n    for gpa in gpas:\n        i = 0\n        while gpa < scores[i]:\n            i += 1\n        ans.append(letters[i])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#81",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Grader_2",
    "sat": "def sat(grades: List[str], gpas=[1.0670062946539565]):\n    \"\"\"\n    Convert GPAs to letter grades according to the following table:\n    4.0: A+\n    3.7: A\n    3.4: A-\n    3.0: B+\n    2.7: B\n    2.4: B-\n    2.0: C+\n    1.7: C\n    1.4: C-\n    below: F\n\n    Sample input: [4.0, 3.5, 3.8]\n    Sample output: ['A+', 'A-', 'A']\n    \"\"\"\n    assert len(grades) == len(gpas)\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    for grade, gpa in zip(grades, gpas):\n        i = letters.index(grade)\n        assert gpa >= scores[i]\n        assert i == 0 or gpa <= scores[i - 1]\n    return True",
    "sols": [
      "def sol(gpas=[1.0670062946539565]):\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    ans = []\n    for gpa in gpas:\n        i = 0\n        while gpa < scores[i]:\n            i += 1\n        ans.append(letters[i])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#81",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Grader_3",
    "sat": "def sat(grades: List[str], gpas: List[float]=[]):\n    \"\"\"\n    Convert GPAs to letter grades according to the following table:\n    4.0: A+\n    3.7: A\n    3.4: A-\n    3.0: B+\n    2.7: B\n    2.4: B-\n    2.0: C+\n    1.7: C\n    1.4: C-\n    below: F\n\n    Sample input: [4.0, 3.5, 3.8]\n    Sample output: ['A+', 'A-', 'A']\n    \"\"\"\n    assert len(grades) == len(gpas)\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    for grade, gpa in zip(grades, gpas):\n        i = letters.index(grade)\n        assert gpa >= scores[i]\n        assert i == 0 or gpa <= scores[i - 1]\n    return True",
    "sols": [
      "def sol(gpas=[]):\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    ans = []\n    for gpa in gpas:\n        i = 0\n        while gpa < scores[i]:\n            i += 1\n        ans.append(letters[i])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#81",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Grader_4",
    "sat": "def sat(grades: List[str], gpas=[2.7731700871871414, 0.5127907383392896]):\n    \"\"\"\n    Convert GPAs to letter grades according to the following table:\n    4.0: A+\n    3.7: A\n    3.4: A-\n    3.0: B+\n    2.7: B\n    2.4: B-\n    2.0: C+\n    1.7: C\n    1.4: C-\n    below: F\n\n    Sample input: [4.0, 3.5, 3.8]\n    Sample output: ['A+', 'A-', 'A']\n    \"\"\"\n    assert len(grades) == len(gpas)\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    for grade, gpa in zip(grades, gpas):\n        i = letters.index(grade)\n        assert gpa >= scores[i]\n        assert i == 0 or gpa <= scores[i - 1]\n    return True",
    "sols": [
      "def sol(gpas=[2.7731700871871414, 0.5127907383392896]):\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    ans = []\n    for gpa in gpas:\n        i = 0\n        while gpa < scores[i]:\n            i += 1\n        ans.append(letters[i])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#81",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Grader_5",
    "sat": "def sat(grades: List[str], gpas=[1.3721075844546755, 1.9800514069744524, 3.127138570276307, 1.0979179608980654]):\n    \"\"\"\n    Convert GPAs to letter grades according to the following table:\n    4.0: A+\n    3.7: A\n    3.4: A-\n    3.0: B+\n    2.7: B\n    2.4: B-\n    2.0: C+\n    1.7: C\n    1.4: C-\n    below: F\n\n    Sample input: [4.0, 3.5, 3.8]\n    Sample output: ['A+', 'A-', 'A']\n    \"\"\"\n    assert len(grades) == len(gpas)\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    for grade, gpa in zip(grades, gpas):\n        i = letters.index(grade)\n        assert gpa >= scores[i]\n        assert i == 0 or gpa <= scores[i - 1]\n    return True",
    "sols": [
      "def sol(gpas=[1.3721075844546755, 1.9800514069744524, 3.127138570276307, 1.0979179608980654]):\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    ans = []\n    for gpa in gpas:\n        i = 0\n        while gpa < scores[i]:\n            i += 1\n        ans.append(letters[i])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#81",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Grader_6",
    "sat": "def sat(grades: List[str], gpas=[2.2478712108282903, 2.904053962782555, 3.3559720867198393, 2.305093517063148, 1.3554022533858645, 3.9914879644359593, 0.6105418605378117, 0.053758879983145214, 2.2003121666680205]):\n    \"\"\"\n    Convert GPAs to letter grades according to the following table:\n    4.0: A+\n    3.7: A\n    3.4: A-\n    3.0: B+\n    2.7: B\n    2.4: B-\n    2.0: C+\n    1.7: C\n    1.4: C-\n    below: F\n\n    Sample input: [4.0, 3.5, 3.8]\n    Sample output: ['A+', 'A-', 'A']\n    \"\"\"\n    assert len(grades) == len(gpas)\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    for grade, gpa in zip(grades, gpas):\n        i = letters.index(grade)\n        assert gpa >= scores[i]\n        assert i == 0 or gpa <= scores[i - 1]\n    return True",
    "sols": [
      "def sol(gpas=[2.2478712108282903, 2.904053962782555, 3.3559720867198393, 2.305093517063148, 1.3554022533858645, 3.9914879644359593, 0.6105418605378117, 0.053758879983145214, 2.2003121666680205]):\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    ans = []\n    for gpa in gpas:\n        i = 0\n        while gpa < scores[i]:\n            i += 1\n        ans.append(letters[i])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#81",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Grader_7",
    "sat": "def sat(grades: List[str], gpas=[1.4884000109972821]):\n    \"\"\"\n    Convert GPAs to letter grades according to the following table:\n    4.0: A+\n    3.7: A\n    3.4: A-\n    3.0: B+\n    2.7: B\n    2.4: B-\n    2.0: C+\n    1.7: C\n    1.4: C-\n    below: F\n\n    Sample input: [4.0, 3.5, 3.8]\n    Sample output: ['A+', 'A-', 'A']\n    \"\"\"\n    assert len(grades) == len(gpas)\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    for grade, gpa in zip(grades, gpas):\n        i = letters.index(grade)\n        assert gpa >= scores[i]\n        assert i == 0 or gpa <= scores[i - 1]\n    return True",
    "sols": [
      "def sol(gpas=[1.4884000109972821]):\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    ans = []\n    for gpa in gpas:\n        i = 0\n        while gpa < scores[i]:\n            i += 1\n        ans.append(letters[i])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#81",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Grader_8",
    "sat": "def sat(grades: List[str], gpas=[0.32502250264371924, 1.6284183565303638, 0.5478961980409185]):\n    \"\"\"\n    Convert GPAs to letter grades according to the following table:\n    4.0: A+\n    3.7: A\n    3.4: A-\n    3.0: B+\n    2.7: B\n    2.4: B-\n    2.0: C+\n    1.7: C\n    1.4: C-\n    below: F\n\n    Sample input: [4.0, 3.5, 3.8]\n    Sample output: ['A+', 'A-', 'A']\n    \"\"\"\n    assert len(grades) == len(gpas)\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    for grade, gpa in zip(grades, gpas):\n        i = letters.index(grade)\n        assert gpa >= scores[i]\n        assert i == 0 or gpa <= scores[i - 1]\n    return True",
    "sols": [
      "def sol(gpas=[0.32502250264371924, 1.6284183565303638, 0.5478961980409185]):\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    ans = []\n    for gpa in gpas:\n        i = 0\n        while gpa < scores[i]:\n            i += 1\n        ans.append(letters[i])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#81",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "Grader_9",
    "sat": "def sat(grades: List[str], gpas=[2.536863326182083, 0.898268831978974, 3.4475087483041857, 3.734730577136208, 0.5718524747517044, 2.909259248206488, 3.175458745648921]):\n    \"\"\"\n    Convert GPAs to letter grades according to the following table:\n    4.0: A+\n    3.7: A\n    3.4: A-\n    3.0: B+\n    2.7: B\n    2.4: B-\n    2.0: C+\n    1.7: C\n    1.4: C-\n    below: F\n\n    Sample input: [4.0, 3.5, 3.8]\n    Sample output: ['A+', 'A-', 'A']\n    \"\"\"\n    assert len(grades) == len(gpas)\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    for grade, gpa in zip(grades, gpas):\n        i = letters.index(grade)\n        assert gpa >= scores[i]\n        assert i == 0 or gpa <= scores[i - 1]\n    return True",
    "sols": [
      "def sol(gpas=[2.536863326182083, 0.898268831978974, 3.4475087483041857, 3.734730577136208, 0.5718524747517044, 2.909259248206488, 3.175458745648921]):\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    ans = []\n    for gpa in gpas:\n        i = 0\n        while gpa < scores[i]:\n            i += 1\n        ans.append(letters[i])\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#81",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FactorString_0",
    "sat": "def sat(factor: str, s=\"catscatcatscatcatscat\"):\n    \"\"\"Find a string which when repeated more than once gives s\"\"\"\n    return len(factor) < len(s) and s == factor * (len(s) // len(factor))",
    "sols": [
      "def sol(s=\"catscatcatscatcatscat\"):\n    n = len(s)\n    return next(s[:i] for i in range(1, len(s)) if s == s[:i] * (n // i))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#82",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FactorString_1",
    "sat": "def sat(factor: str, s=\"pamithelozefefitextpamithelozefefitext\"):\n    \"\"\"Find a string which when repeated more than once gives s\"\"\"\n    return len(factor) < len(s) and s == factor * (len(s) // len(factor))",
    "sols": [
      "def sol(s=\"pamithelozefefitextpamithelozefefitext\"):\n    n = len(s)\n    return next(s[:i] for i in range(1, len(s)) if s == s[:i] * (n // i))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#82",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FactorString_2",
    "sat": "def sat(factor: str, s=\"mahermahermahermahermahermahermahermaher\"):\n    \"\"\"Find a string which when repeated more than once gives s\"\"\"\n    return len(factor) < len(s) and s == factor * (len(s) // len(factor))",
    "sols": [
      "def sol(s=\"mahermahermahermahermahermahermahermaher\"):\n    n = len(s)\n    return next(s[:i] for i in range(1, len(s)) if s == s[:i] * (n // i))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#82",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FactorString_3",
    "sat": "def sat(factor: str, s=\"mapychysmapychysmapychysmapychysmapychysmapychys\"):\n    \"\"\"Find a string which when repeated more than once gives s\"\"\"\n    return len(factor) < len(s) and s == factor * (len(s) // len(factor))",
    "sols": [
      "def sol(s=\"mapychysmapychysmapychysmapychysmapychysmapychys\"):\n    n = len(s)\n    return next(s[:i] for i in range(1, len(s)) if s == s[:i] * (n // i))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#82",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FactorString_4",
    "sat": "def sat(factor: str, s=\"thihathihathihathihathihathiha\"):\n    \"\"\"Find a string which when repeated more than once gives s\"\"\"\n    return len(factor) < len(s) and s == factor * (len(s) // len(factor))",
    "sols": [
      "def sol(s=\"thihathihathihathihathihathiha\"):\n    n = len(s)\n    return next(s[:i] for i in range(1, len(s)) if s == s[:i] * (n // i))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#82",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FactorString_5",
    "sat": "def sat(factor: str, s=\"nethivytnethivytnethivytnethivytnethivytnethivytnethivyt\"):\n    \"\"\"Find a string which when repeated more than once gives s\"\"\"\n    return len(factor) < len(s) and s == factor * (len(s) // len(factor))",
    "sols": [
      "def sol(s=\"nethivytnethivytnethivytnethivytnethivytnethivytnethivyt\"):\n    n = len(s)\n    return next(s[:i] for i in range(1, len(s)) if s == s[:i] * (n // i))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#82",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FactorString_6",
    "sat": "def sat(factor: str, s=\"jufamekokaquamozolujufamekokaquamozolujufamekokaquamozolujufamekokaquamozolujufamekokaquamozolujufamekokaquamozolujufamekokaquamozolujufamekokaquamozolujufamekokaquamozolu\"):\n    \"\"\"Find a string which when repeated more than once gives s\"\"\"\n    return len(factor) < len(s) and s == factor * (len(s) // len(factor))",
    "sols": [
      "def sol(s=\"jufamekokaquamozolujufamekokaquamozolujufamekokaquamozolujufamekokaquamozolujufamekokaquamozolujufamekokaquamozolujufamekokaquamozolujufamekokaquamozolujufamekokaquamozolu\"):\n    n = len(s)\n    return next(s[:i] for i in range(1, len(s)) if s == s[:i] * (n // i))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#82",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FactorString_7",
    "sat": "def sat(factor: str, s=\"sadiquonukuzulynihsadiquonukuzulynihsadiquonukuzulynihsadiquonukuzulynihsadiquonukuzulynihsadiquonukuzulynih\"):\n    \"\"\"Find a string which when repeated more than once gives s\"\"\"\n    return len(factor) < len(s) and s == factor * (len(s) // len(factor))",
    "sols": [
      "def sol(s=\"sadiquonukuzulynihsadiquonukuzulynihsadiquonukuzulynihsadiquonukuzulynihsadiquonukuzulynihsadiquonukuzulynih\"):\n    n = len(s)\n    return next(s[:i] for i in range(1, len(s)) if s == s[:i] * (n // i))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#82",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FactorString_8",
    "sat": "def sat(factor: str, s=\"wetwetwetwetwetwetwet\"):\n    \"\"\"Find a string which when repeated more than once gives s\"\"\"\n    return len(factor) < len(s) and s == factor * (len(s) // len(factor))",
    "sols": [
      "def sol(s=\"wetwetwetwetwetwetwet\"):\n    n = len(s)\n    return next(s[:i] for i in range(1, len(s)) if s == s[:i] * (n // i))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#82",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FactorString_9",
    "sat": "def sat(factor: str, s=\"chathykuchathykuchathyku\"):\n    \"\"\"Find a string which when repeated more than once gives s\"\"\"\n    return len(factor) < len(s) and s == factor * (len(s) // len(factor))",
    "sols": [
      "def sol(s=\"chathykuchathykuchathyku\"):\n    n = len(s)\n    return next(s[:i] for i in range(1, len(s)) if s == s[:i] * (n // i))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#82",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "OneEnded_0",
    "sat": "def sat(nums: List[int], n=5):\n    \"\"\"Find all n-digit integers that start or end with 1\"\"\"\n    count = 18 * (10 ** (n - 2)) if n > 1 else 1\n    strs = {str(n) for n in nums}\n    return len(strs) == count and all(s.startswith(\"1\") or s.endswith(\"1\") and len(s) == n for s in strs)",
    "sols": [
      "def sol(n=5):\n    ans = []\n    for i in range(10 ** (n - 1), 10 ** n):\n        assert len(str(i)) == n\n        if str(i).startswith(\"1\") or str(i).endswith(\"1\"):\n            ans.append(i)\n    return ans"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#83",
    "taint_date": "2021-7-7",
    "weight": 0.010416666666666666
  },
  {
    "name": "BitSum_0",
    "sat": "def sat(n: int, b=107, s=25):\n    \"\"\"Find an b-bit integer with a bit-sum of s\"\"\"\n    n_str = bin(n)[2:]  # n in binary\n    return len(n_str) == b and sum(int(i) for i in n_str) == s",
    "sols": [
      "def sol(b=107, s=25):\n    return int(\"1\" * s + \"0\" * (b - s), 2)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BitSum_1",
    "sat": "def sat(n: int, b=59, s=51):\n    \"\"\"Find an b-bit integer with a bit-sum of s\"\"\"\n    n_str = bin(n)[2:]  # n in binary\n    return len(n_str) == b and sum(int(i) for i in n_str) == s",
    "sols": [
      "def sol(b=59, s=51):\n    return int(\"1\" * s + \"0\" * (b - s), 2)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BitSum_2",
    "sat": "def sat(n: int, b=825, s=653):\n    \"\"\"Find an b-bit integer with a bit-sum of s\"\"\"\n    n_str = bin(n)[2:]  # n in binary\n    return len(n_str) == b and sum(int(i) for i in n_str) == s",
    "sols": [
      "def sol(b=825, s=653):\n    return int(\"1\" * s + \"0\" * (b - s), 2)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BitSum_3",
    "sat": "def sat(n: int, b=354, s=287):\n    \"\"\"Find an b-bit integer with a bit-sum of s\"\"\"\n    n_str = bin(n)[2:]  # n in binary\n    return len(n_str) == b and sum(int(i) for i in n_str) == s",
    "sols": [
      "def sol(b=354, s=287):\n    return int(\"1\" * s + \"0\" * (b - s), 2)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BitSum_4",
    "sat": "def sat(n: int, b=256, s=1):\n    \"\"\"Find an b-bit integer with a bit-sum of s\"\"\"\n    n_str = bin(n)[2:]  # n in binary\n    return len(n_str) == b and sum(int(i) for i in n_str) == s",
    "sols": [
      "def sol(b=256, s=1):\n    return int(\"1\" * s + \"0\" * (b - s), 2)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BitSum_5",
    "sat": "def sat(n: int, b=727, s=497):\n    \"\"\"Find an b-bit integer with a bit-sum of s\"\"\"\n    n_str = bin(n)[2:]  # n in binary\n    return len(n_str) == b and sum(int(i) for i in n_str) == s",
    "sols": [
      "def sol(b=727, s=497):\n    return int(\"1\" * s + \"0\" * (b - s), 2)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BitSum_6",
    "sat": "def sat(n: int, b=580, s=250):\n    \"\"\"Find an b-bit integer with a bit-sum of s\"\"\"\n    n_str = bin(n)[2:]  # n in binary\n    return len(n_str) == b and sum(int(i) for i in n_str) == s",
    "sols": [
      "def sol(b=580, s=250):\n    return int(\"1\" * s + \"0\" * (b - s), 2)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BitSum_7",
    "sat": "def sat(n: int, b=836, s=254):\n    \"\"\"Find an b-bit integer with a bit-sum of s\"\"\"\n    n_str = bin(n)[2:]  # n in binary\n    return len(n_str) == b and sum(int(i) for i in n_str) == s",
    "sols": [
      "def sol(b=836, s=254):\n    return int(\"1\" * s + \"0\" * (b - s), 2)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BitSum_8",
    "sat": "def sat(n: int, b=609, s=492):\n    \"\"\"Find an b-bit integer with a bit-sum of s\"\"\"\n    n_str = bin(n)[2:]  # n in binary\n    return len(n_str) == b and sum(int(i) for i in n_str) == s",
    "sols": [
      "def sol(b=609, s=492):\n    return int(\"1\" * s + \"0\" * (b - s), 2)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "BitSum_9",
    "sat": "def sat(n: int, b=379, s=62):\n    \"\"\"Find an b-bit integer with a bit-sum of s\"\"\"\n    n_str = bin(n)[2:]  # n in binary\n    return len(n_str) == b and sum(int(i) for i in n_str) == s",
    "sols": [
      "def sol(b=379, s=62):\n    return int(\"1\" * s + \"0\" * (b - s), 2)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DigitSum_0",
    "sat": "def sat(s: str, n=1012552981257923):\n    \"\"\"Find the sum of the digits in n as a binary string\"\"\"\n    tot = int(s, 2)\n    return tot == sum(int(c) for c in str(n))",
    "sols": [
      "def sol(n=1012552981257923):\n    return bin(sum(int(c) for c in str(n)))[2:]"
    ],
    "module": "human_eval",
    "notes": "*Also* inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DigitSum_1",
    "sat": "def sat(s: str, n=149375608197334399520070108176536906):\n    \"\"\"Find the sum of the digits in n as a binary string\"\"\"\n    tot = int(s, 2)\n    return tot == sum(int(c) for c in str(n))",
    "sols": [
      "def sol(n=149375608197334399520070108176536906):\n    return bin(sum(int(c) for c in str(n)))[2:]"
    ],
    "module": "human_eval",
    "notes": "*Also* inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DigitSum_2",
    "sat": "def sat(s: str, n=141211514700950831659878):\n    \"\"\"Find the sum of the digits in n as a binary string\"\"\"\n    tot = int(s, 2)\n    return tot == sum(int(c) for c in str(n))",
    "sols": [
      "def sol(n=141211514700950831659878):\n    return bin(sum(int(c) for c in str(n)))[2:]"
    ],
    "module": "human_eval",
    "notes": "*Also* inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DigitSum_3",
    "sat": "def sat(s: str, n=802182768382):\n    \"\"\"Find the sum of the digits in n as a binary string\"\"\"\n    tot = int(s, 2)\n    return tot == sum(int(c) for c in str(n))",
    "sols": [
      "def sol(n=802182768382):\n    return bin(sum(int(c) for c in str(n)))[2:]"
    ],
    "module": "human_eval",
    "notes": "*Also* inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DigitSum_4",
    "sat": "def sat(s: str, n=8528190689035):\n    \"\"\"Find the sum of the digits in n as a binary string\"\"\"\n    tot = int(s, 2)\n    return tot == sum(int(c) for c in str(n))",
    "sols": [
      "def sol(n=8528190689035):\n    return bin(sum(int(c) for c in str(n)))[2:]"
    ],
    "module": "human_eval",
    "notes": "*Also* inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DigitSum_5",
    "sat": "def sat(s: str, n=795311771849755577651):\n    \"\"\"Find the sum of the digits in n as a binary string\"\"\"\n    tot = int(s, 2)\n    return tot == sum(int(c) for c in str(n))",
    "sols": [
      "def sol(n=795311771849755577651):\n    return bin(sum(int(c) for c in str(n)))[2:]"
    ],
    "module": "human_eval",
    "notes": "*Also* inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DigitSum_6",
    "sat": "def sat(s: str, n=53):\n    \"\"\"Find the sum of the digits in n as a binary string\"\"\"\n    tot = int(s, 2)\n    return tot == sum(int(c) for c in str(n))",
    "sols": [
      "def sol(n=53):\n    return bin(sum(int(c) for c in str(n)))[2:]"
    ],
    "module": "human_eval",
    "notes": "*Also* inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DigitSum_7",
    "sat": "def sat(s: str, n=9584133253037383817922987173459963392164):\n    \"\"\"Find the sum of the digits in n as a binary string\"\"\"\n    tot = int(s, 2)\n    return tot == sum(int(c) for c in str(n))",
    "sols": [
      "def sol(n=9584133253037383817922987173459963392164):\n    return bin(sum(int(c) for c in str(n)))[2:]"
    ],
    "module": "human_eval",
    "notes": "*Also* inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DigitSum_8",
    "sat": "def sat(s: str, n=496958084858083723542854631342507861380951):\n    \"\"\"Find the sum of the digits in n as a binary string\"\"\"\n    tot = int(s, 2)\n    return tot == sum(int(c) for c in str(n))",
    "sols": [
      "def sol(n=496958084858083723542854631342507861380951):\n    return bin(sum(int(c) for c in str(n)))[2:]"
    ],
    "module": "human_eval",
    "notes": "*Also* inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "DigitSum_9",
    "sat": "def sat(s: str, n=6957027656012396382680187619298485726781330):\n    \"\"\"Find the sum of the digits in n as a binary string\"\"\"\n    tot = int(s, 2)\n    return tot == sum(int(c) for c in str(n))",
    "sols": [
      "def sol(n=6957027656012396382680187619298485726781330):\n    return bin(sum(int(c) for c in str(n)))[2:]"
    ],
    "module": "human_eval",
    "notes": "*Also* inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "EvenOdd_0",
    "sat": "def sat(even_odd_sum: int, nums=[2341, 125146894, 12521, -12451293476325, 535284623934, 132974693614350]):\n    \"\"\"Find the sum of the even elements that are at odd indices\"\"\"\n    for i in nums[1::2]:\n        if i % 2 == 0:\n            even_odd_sum -= i\n    return even_odd_sum == 0",
    "sols": [
      "def sol(nums=[2341, 125146894, 12521, -12451293476325, 535284623934, 132974693614350]):\n    return sum(i for i in nums[1::2] if i % 2 == 0)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#85",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "EvenOdd_1",
    "sat": "def sat(even_odd_sum: int, nums=[72, -79, -7, 50, -6, -69, 40, 16]):\n    \"\"\"Find the sum of the even elements that are at odd indices\"\"\"\n    for i in nums[1::2]:\n        if i % 2 == 0:\n            even_odd_sum -= i\n    return even_odd_sum == 0",
    "sols": [
      "def sol(nums=[72, -79, -7, 50, -6, -69, 40, 16]):\n    return sum(i for i in nums[1::2] if i % 2 == 0)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#85",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "EvenOdd_2",
    "sat": "def sat(even_odd_sum: int, nums=[-20, 74, -95, 99, -28, 69, 24, -25]):\n    \"\"\"Find the sum of the even elements that are at odd indices\"\"\"\n    for i in nums[1::2]:\n        if i % 2 == 0:\n            even_odd_sum -= i\n    return even_odd_sum == 0",
    "sols": [
      "def sol(nums=[-20, 74, -95, 99, -28, 69, 24, -25]):\n    return sum(i for i in nums[1::2] if i % 2 == 0)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#85",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "EvenOdd_3",
    "sat": "def sat(even_odd_sum: int, nums=[25, 70]):\n    \"\"\"Find the sum of the even elements that are at odd indices\"\"\"\n    for i in nums[1::2]:\n        if i % 2 == 0:\n            even_odd_sum -= i\n    return even_odd_sum == 0",
    "sols": [
      "def sol(nums=[25, 70]):\n    return sum(i for i in nums[1::2] if i % 2 == 0)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#85",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "EvenOdd_4",
    "sat": "def sat(even_odd_sum: int, nums=[-17, 93, -79, 80, -51, -57, -49, 81, 35, -89, -10, 17, 0, 98, -7]):\n    \"\"\"Find the sum of the even elements that are at odd indices\"\"\"\n    for i in nums[1::2]:\n        if i % 2 == 0:\n            even_odd_sum -= i\n    return even_odd_sum == 0",
    "sols": [
      "def sol(nums=[-17, 93, -79, 80, -51, -57, -49, 81, 35, -89, -10, 17, 0, 98, -7]):\n    return sum(i for i in nums[1::2] if i % 2 == 0)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#85",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "EvenOdd_5",
    "sat": "def sat(even_odd_sum: int, nums=[-18, 8, -60, 41, -73, 76, -21, -97, -2, -82, -56]):\n    \"\"\"Find the sum of the even elements that are at odd indices\"\"\"\n    for i in nums[1::2]:\n        if i % 2 == 0:\n            even_odd_sum -= i\n    return even_odd_sum == 0",
    "sols": [
      "def sol(nums=[-18, 8, -60, 41, -73, 76, -21, -97, -2, -82, -56]):\n    return sum(i for i in nums[1::2] if i % 2 == 0)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#85",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "EvenOdd_6",
    "sat": "def sat(even_odd_sum: int, nums=[70, 58, -20, 43, -10, -1, -52, 32, 69, -92, -71, 34, -57, 73, -47]):\n    \"\"\"Find the sum of the even elements that are at odd indices\"\"\"\n    for i in nums[1::2]:\n        if i % 2 == 0:\n            even_odd_sum -= i\n    return even_odd_sum == 0",
    "sols": [
      "def sol(nums=[70, 58, -20, 43, -10, -1, -52, 32, 69, -92, -71, 34, -57, 73, -47]):\n    return sum(i for i in nums[1::2] if i % 2 == 0)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#85",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "EvenOdd_7",
    "sat": "def sat(even_odd_sum: int, nums=[-23, -52, 97, 15]):\n    \"\"\"Find the sum of the even elements that are at odd indices\"\"\"\n    for i in nums[1::2]:\n        if i % 2 == 0:\n            even_odd_sum -= i\n    return even_odd_sum == 0",
    "sols": [
      "def sol(nums=[-23, -52, 97, 15]):\n    return sum(i for i in nums[1::2] if i % 2 == 0)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#85",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "EvenOdd_8",
    "sat": "def sat(even_odd_sum: int, nums=[-41, -54, -10, -44]):\n    \"\"\"Find the sum of the even elements that are at odd indices\"\"\"\n    for i in nums[1::2]:\n        if i % 2 == 0:\n            even_odd_sum -= i\n    return even_odd_sum == 0",
    "sols": [
      "def sol(nums=[-41, -54, -10, -44]):\n    return sum(i for i in nums[1::2] if i % 2 == 0)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#85",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "EvenOdd_9",
    "sat": "def sat(even_odd_sum: int, nums=[-78, -33, 70, -58, -8, 44, -10, -18, 52, -92, 46, 73, 13, 67, -25, 45]):\n    \"\"\"Find the sum of the even elements that are at odd indices\"\"\"\n    for i in nums[1::2]:\n        if i % 2 == 0:\n            even_odd_sum -= i\n    return even_odd_sum == 0",
    "sols": [
      "def sol(nums=[-78, -33, 70, -58, -8, 44, -10, -18, 52, -92, 46, 73, 13, 67, -25, 45]):\n    return sum(i for i in nums[1::2] if i % 2 == 0)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#85",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "AntiShuffle_0",
    "sat": "def sat(s: str, orig=\"Hello world!!!\"):\n    \"\"\"Create a new string by taking s, and word by word rearranging its characters in ascii order\"\"\"\n    for a, b in zip(s.split(' '), orig.split(' ')):\n        for i in range(len(a) - 1):\n            assert a[i] <= a[i + 1], \"characters must s-words be in increasing order\"\n        assert len(a) == len(b) and all(a.count(c) == b.count(c) for c in b), \"must have same chars\"\n    return len(s) == len(orig)",
    "sols": [
      "def sol(orig=\"Hello world!!!\"):\n    return \" \".join(\"\".join(sorted(w)) for w in orig.split(' '))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#86",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "AntiShuffle_1",
    "sat": "def sat(s: str, orig=\"YOU CAN rearrange my letters, yes you can!\"):\n    \"\"\"Create a new string by taking s, and word by word rearranging its characters in ascii order\"\"\"\n    for a, b in zip(s.split(' '), orig.split(' ')):\n        for i in range(len(a) - 1):\n            assert a[i] <= a[i + 1], \"characters must s-words be in increasing order\"\n        assert len(a) == len(b) and all(a.count(c) == b.count(c) for c in b), \"must have same chars\"\n    return len(s) == len(orig)",
    "sols": [
      "def sol(orig=\"YOU CAN rearrange my letters, yes you can!\"):\n    return \" \".join(\"\".join(sorted(w)) for w in orig.split(' '))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#86",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "AntiShuffle_2",
    "sat": "def sat(s: str, orig=\"caN you handlE LONGGGGGGGGGGGG strings?\"):\n    \"\"\"Create a new string by taking s, and word by word rearranging its characters in ascii order\"\"\"\n    for a, b in zip(s.split(' '), orig.split(' ')):\n        for i in range(len(a) - 1):\n            assert a[i] <= a[i + 1], \"characters must s-words be in increasing order\"\n        assert len(a) == len(b) and all(a.count(c) == b.count(c) for c in b), \"must have same chars\"\n    return len(s) == len(orig)",
    "sols": [
      "def sol(orig=\"caN you handlE LONGGGGGGGGGGGG strings?\"):\n    return \" \".join(\"\".join(sorted(w)) for w in orig.split(' '))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#86",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "AntiShuffle_3",
    "sat": "def sat(s: str, orig=\"how bout    spaces and weird punctuation!?$%@#%\"):\n    \"\"\"Create a new string by taking s, and word by word rearranging its characters in ascii order\"\"\"\n    for a, b in zip(s.split(' '), orig.split(' ')):\n        for i in range(len(a) - 1):\n            assert a[i] <= a[i + 1], \"characters must s-words be in increasing order\"\n        assert len(a) == len(b) and all(a.count(c) == b.count(c) for c in b), \"must have same chars\"\n    return len(s) == len(orig)",
    "sols": [
      "def sol(orig=\"how bout    spaces and weird punctuation!?$%@#%\"):\n    return \" \".join(\"\".join(sorted(w)) for w in orig.split(' '))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#86",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "AntiShuffle_4",
    "sat": "def sat(s: str, orig=\"ruhixuthuciji kebelobawitextythuch quozo\"):\n    \"\"\"Create a new string by taking s, and word by word rearranging its characters in ascii order\"\"\"\n    for a, b in zip(s.split(' '), orig.split(' ')):\n        for i in range(len(a) - 1):\n            assert a[i] <= a[i + 1], \"characters must s-words be in increasing order\"\n        assert len(a) == len(b) and all(a.count(c) == b.count(c) for c in b), \"must have same chars\"\n    return len(s) == len(orig)",
    "sols": [
      "def sol(orig=\"ruhixuthuciji kebelobawitextythuch quozo\"):\n    return \" \".join(\"\".join(sorted(w)) for w in orig.split(' '))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#86",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "AntiShuffle_5",
    "sat": "def sat(s: str, orig=\"tenewatextuc mythesavu g\"):\n    \"\"\"Create a new string by taking s, and word by word rearranging its characters in ascii order\"\"\"\n    for a, b in zip(s.split(' '), orig.split(' ')):\n        for i in range(len(a) - 1):\n            assert a[i] <= a[i + 1], \"characters must s-words be in increasing order\"\n        assert len(a) == len(b) and all(a.count(c) == b.count(c) for c in b), \"must have same chars\"\n    return len(s) == len(orig)",
    "sols": [
      "def sol(orig=\"tenewatextuc mythesavu g\"):\n    return \" \".join(\"\".join(sorted(w)) for w in orig.split(' '))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#86",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "AntiShuffle_6",
    "sat": "def sat(s: str, orig=\"gupymache\"):\n    \"\"\"Create a new string by taking s, and word by word rearranging its characters in ascii order\"\"\"\n    for a, b in zip(s.split(' '), orig.split(' ')):\n        for i in range(len(a) - 1):\n            assert a[i] <= a[i + 1], \"characters must s-words be in increasing order\"\n        assert len(a) == len(b) and all(a.count(c) == b.count(c) for c in b), \"must have same chars\"\n    return len(s) == len(orig)",
    "sols": [
      "def sol(orig=\"gupymache\"):\n    return \" \".join(\"\".join(sorted(w)) for w in orig.split(' '))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#86",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "AntiShuffle_7",
    "sat": "def sat(s: str, orig=\"te texturusotich\"):\n    \"\"\"Create a new string by taking s, and word by word rearranging its characters in ascii order\"\"\"\n    for a, b in zip(s.split(' '), orig.split(' ')):\n        for i in range(len(a) - 1):\n            assert a[i] <= a[i + 1], \"characters must s-words be in increasing order\"\n        assert len(a) == len(b) and all(a.count(c) == b.count(c) for c in b), \"must have same chars\"\n    return len(s) == len(orig)",
    "sols": [
      "def sol(orig=\"te texturusotich\"):\n    return \" \".join(\"\".join(sorted(w)) for w in orig.split(' '))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#86",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "AntiShuffle_8",
    "sat": "def sat(s: str, orig=\"sarukajejuvet textavut\"):\n    \"\"\"Create a new string by taking s, and word by word rearranging its characters in ascii order\"\"\"\n    for a, b in zip(s.split(' '), orig.split(' ')):\n        for i in range(len(a) - 1):\n            assert a[i] <= a[i + 1], \"characters must s-words be in increasing order\"\n        assert len(a) == len(b) and all(a.count(c) == b.count(c) for c in b), \"must have same chars\"\n    return len(s) == len(orig)",
    "sols": [
      "def sol(orig=\"sarukajejuvet textavut\"):\n    return \" \".join(\"\".join(sorted(w)) for w in orig.split(' '))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#86",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "AntiShuffle_9",
    "sat": "def sat(s: str, orig=\"bequi hapotextujobinozityv xytextytyg domy\"):\n    \"\"\"Create a new string by taking s, and word by word rearranging its characters in ascii order\"\"\"\n    for a, b in zip(s.split(' '), orig.split(' ')):\n        for i in range(len(a) - 1):\n            assert a[i] <= a[i + 1], \"characters must s-words be in increasing order\"\n        assert len(a) == len(b) and all(a.count(c) == b.count(c) for c in b), \"must have same chars\"\n    return len(s) == len(orig)",
    "sols": [
      "def sol(orig=\"bequi hapotextujobinozityv xytextytyg domy\"):\n    return \" \".join(\"\".join(sorted(w)) for w in orig.split(' '))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#86",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "UnevenFind_0",
    "sat": "def sat(indices: List[List[int]], uneven=[[1, 3, 2, 32, 17], [17, 2, 48, 17], [], [9, 35, 4], [3, 17]], target=17):\n    \"\"\"Find the indices of all occurrences of target in the uneven matrix\"\"\"\n    for i, j in indices:\n        assert uneven[i][j] == target\n    for i, row in enumerate(uneven):\n        for j, n in enumerate(row):\n            assert n != target or [i, j] in indices\n    return True",
    "sols": [
      "def sol(uneven=[[1, 3, 2, 32, 17], [17, 2, 48, 17], [], [9, 35, 4], [3, 17]], target=17):\n    return [[i, j] for i, row in enumerate(uneven) for j, n in enumerate(row) if n == target]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#87",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "UnevenFind_1",
    "sat": "def sat(indices: List[List[int]], uneven=[[64, 7, 64, 64, 20], [72, 64, 22, 64, 64], [21, 35], [64, 0, 96, 27]], target=64):\n    \"\"\"Find the indices of all occurrences of target in the uneven matrix\"\"\"\n    for i, j in indices:\n        assert uneven[i][j] == target\n    for i, row in enumerate(uneven):\n        for j, n in enumerate(row):\n            assert n != target or [i, j] in indices\n    return True",
    "sols": [
      "def sol(uneven=[[64, 7, 64, 64, 20], [72, 64, 22, 64, 64], [21, 35], [64, 0, 96, 27]], target=64):\n    return [[i, j] for i, row in enumerate(uneven) for j, n in enumerate(row) if n == target]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#87",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "UnevenFind_2",
    "sat": "def sat(indices: List[List[int]], uneven=[[16, 87]], target=87):\n    \"\"\"Find the indices of all occurrences of target in the uneven matrix\"\"\"\n    for i, j in indices:\n        assert uneven[i][j] == target\n    for i, row in enumerate(uneven):\n        for j, n in enumerate(row):\n            assert n != target or [i, j] in indices\n    return True",
    "sols": [
      "def sol(uneven=[[16, 87]], target=87):\n    return [[i, j] for i, row in enumerate(uneven) for j, n in enumerate(row) if n == target]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#87",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "UnevenFind_3",
    "sat": "def sat(indices: List[List[int]], uneven: List[List[int]]=[], target=30):\n    \"\"\"Find the indices of all occurrences of target in the uneven matrix\"\"\"\n    for i, j in indices:\n        assert uneven[i][j] == target\n    for i, row in enumerate(uneven):\n        for j, n in enumerate(row):\n            assert n != target or [i, j] in indices\n    return True",
    "sols": [
      "def sol(uneven=[], target=30):\n    return [[i, j] for i, row in enumerate(uneven) for j, n in enumerate(row) if n == target]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#87",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "UnevenFind_4",
    "sat": "def sat(indices: List[List[int]], uneven=[[5, 30, 18], [53, 64, 87, 69, 64, 64, 64], [], [44], [64, 88, 68, 64, 64, 84, 64, 64, 64], [31], [64, 5, 64, 71, 42, 64, 48, 64, 27], [64, 80, 11, 64]], target=64):\n    \"\"\"Find the indices of all occurrences of target in the uneven matrix\"\"\"\n    for i, j in indices:\n        assert uneven[i][j] == target\n    for i, row in enumerate(uneven):\n        for j, n in enumerate(row):\n            assert n != target or [i, j] in indices\n    return True",
    "sols": [
      "def sol(uneven=[[5, 30, 18], [53, 64, 87, 69, 64, 64, 64], [], [44], [64, 88, 68, 64, 64, 84, 64, 64, 64], [31], [64, 5, 64, 71, 42, 64, 48, 64, 27], [64, 80, 11, 64]], target=64):\n    return [[i, j] for i, row in enumerate(uneven) for j, n in enumerate(row) if n == target]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#87",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "UnevenFind_5",
    "sat": "def sat(indices: List[List[int]], uneven=[[75, 99]], target=99):\n    \"\"\"Find the indices of all occurrences of target in the uneven matrix\"\"\"\n    for i, j in indices:\n        assert uneven[i][j] == target\n    for i, row in enumerate(uneven):\n        for j, n in enumerate(row):\n            assert n != target or [i, j] in indices\n    return True",
    "sols": [
      "def sol(uneven=[[75, 99]], target=99):\n    return [[i, j] for i, row in enumerate(uneven) for j, n in enumerate(row) if n == target]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#87",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "UnevenFind_6",
    "sat": "def sat(indices: List[List[int]], uneven: List[List[int]]=[], target=20):\n    \"\"\"Find the indices of all occurrences of target in the uneven matrix\"\"\"\n    for i, j in indices:\n        assert uneven[i][j] == target\n    for i, row in enumerate(uneven):\n        for j, n in enumerate(row):\n            assert n != target or [i, j] in indices\n    return True",
    "sols": [
      "def sol(uneven=[], target=20):\n    return [[i, j] for i, row in enumerate(uneven) for j, n in enumerate(row) if n == target]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#87",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "UnevenFind_7",
    "sat": "def sat(indices: List[List[int]], uneven=[[22], [22], [22, 22, 29, 15, 53, 22, 22, 83], [4, 22, 22, 91, 24], [], [22, 27, 0, 22, 22, 22, 51], [22, 22, 25, 82, 47, 98]], target=22):\n    \"\"\"Find the indices of all occurrences of target in the uneven matrix\"\"\"\n    for i, j in indices:\n        assert uneven[i][j] == target\n    for i, row in enumerate(uneven):\n        for j, n in enumerate(row):\n            assert n != target or [i, j] in indices\n    return True",
    "sols": [
      "def sol(uneven=[[22], [22], [22, 22, 29, 15, 53, 22, 22, 83], [4, 22, 22, 91, 24], [], [22, 27, 0, 22, 22, 22, 51], [22, 22, 25, 82, 47, 98]], target=22):\n    return [[i, j] for i, row in enumerate(uneven) for j, n in enumerate(row) if n == target]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#87",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "UnevenFind_8",
    "sat": "def sat(indices: List[List[int]], uneven=[[25, 11, 70, 52, 70], [70, 21, 70, 70]], target=70):\n    \"\"\"Find the indices of all occurrences of target in the uneven matrix\"\"\"\n    for i, j in indices:\n        assert uneven[i][j] == target\n    for i, row in enumerate(uneven):\n        for j, n in enumerate(row):\n            assert n != target or [i, j] in indices\n    return True",
    "sols": [
      "def sol(uneven=[[25, 11, 70, 52, 70], [70, 21, 70, 70]], target=70):\n    return [[i, j] for i, row in enumerate(uneven) for j, n in enumerate(row) if n == target]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#87",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "UnevenFind_9",
    "sat": "def sat(indices: List[List[int]], uneven=[[36, 48, 21, 87], [48, 48, 48, 72, 48, 62, 48]], target=48):\n    \"\"\"Find the indices of all occurrences of target in the uneven matrix\"\"\"\n    for i, j in indices:\n        assert uneven[i][j] == target\n    for i, row in enumerate(uneven):\n        for j, n in enumerate(row):\n            assert n != target or [i, j] in indices\n    return True",
    "sols": [
      "def sol(uneven=[[36, 48, 21, 87], [48, 48, 48, 72, 48, 62, 48]], target=48):\n    return [[i, j] for i, row in enumerate(uneven) for j, n in enumerate(row) if n == target]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#87",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "UpDownSort_0",
    "sat": "def sat(up_down: List[int], nums=[17, 2, 3, 523, 18, -2, 0, 2, -1]):\n    \"\"\"Reorder nums in increasing/decreasing order based on whether the first plus last element is even/odd\"\"\"\n    assert all(up_down.count(i) == nums.count(i) for i in set(up_down + nums)), \"not a reordering\"\n    increasing_sign = 1 if ((nums[0] + nums[-1]) % 2 == 1) else -1\n    return all((up_down[i + 1] - up_down[i]) * increasing_sign >= 0 for i in range(len(up_down) - 1))",
    "sols": [
      "def sol(nums=[17, 2, 3, 523, 18, -2, 0, 2, -1]):\n    return sorted(nums, reverse=(False if (nums[0] + nums[-1]) % 2 else True))"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#88",
    "taint_date": "2021-7-7",
    "weight": 0.010416666666666666
  },
  {
    "name": "SubstitutionCypher_0",
    "sat": "def sat(encrypted: str, orig=\"Hello, world!\"):\n    \"\"\"Apply a substitution cypher in which each character is advanced by two multiplied by two places.\"\"\"\n    assert len(encrypted) == len(orig)\n    return all(chr(ord(a) - 2 * 2) == b for a, b in zip(encrypted, orig))",
    "sols": [
      "def sol(orig=\"Hello, world!\"):\n    return \"\".join(chr(ord(b) + 2 * 2) for b in orig)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#89",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SubstitutionCypher_1",
    "sat": "def sat(encrypted: str, orig=\"\"):\n    \"\"\"Apply a substitution cypher in which each character is advanced by two multiplied by two places.\"\"\"\n    assert len(encrypted) == len(orig)\n    return all(chr(ord(a) - 2 * 2) == b for a, b in zip(encrypted, orig))",
    "sols": [
      "def sol(orig=\"\"):\n    return \"\".join(chr(ord(b) + 2 * 2) for b in orig)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#89",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SubstitutionCypher_2",
    "sat": "def sat(encrypted: str, orig=\"byfykovevuvyxanofi lygolono pyzuh t\"):\n    \"\"\"Apply a substitution cypher in which each character is advanced by two multiplied by two places.\"\"\"\n    assert len(encrypted) == len(orig)\n    return all(chr(ord(a) - 2 * 2) == b for a, b in zip(encrypted, orig))",
    "sols": [
      "def sol(orig=\"byfykovevuvyxanofi lygolono pyzuh t\"):\n    return \"\".join(chr(ord(b) + 2 * 2) for b in orig)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#89",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SubstitutionCypher_3",
    "sat": "def sat(encrypted: str, orig=\"dogyvotitonucuxecequ jahuzowiz jyna\"):\n    \"\"\"Apply a substitution cypher in which each character is advanced by two multiplied by two places.\"\"\"\n    assert len(encrypted) == len(orig)\n    return all(chr(ord(a) - 2 * 2) == b for a, b in zip(encrypted, orig))",
    "sols": [
      "def sol(orig=\"dogyvotitonucuxecequ jahuzowiz jyna\"):\n    return \"\".join(chr(ord(b) + 2 * 2) for b in orig)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#89",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SubstitutionCypher_4",
    "sat": "def sat(encrypted: str, orig=\"chodatext quycimoquytunek\"):\n    \"\"\"Apply a substitution cypher in which each character is advanced by two multiplied by two places.\"\"\"\n    assert len(encrypted) == len(orig)\n    return all(chr(ord(a) - 2 * 2) == b for a, b in zip(encrypted, orig))",
    "sols": [
      "def sol(orig=\"chodatext quycimoquytunek\"):\n    return \"\".join(chr(ord(b) + 2 * 2) for b in orig)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#89",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SubstitutionCypher_5",
    "sat": "def sat(encrypted: str, orig=\"fymodoquyjyp x q\"):\n    \"\"\"Apply a substitution cypher in which each character is advanced by two multiplied by two places.\"\"\"\n    assert len(encrypted) == len(orig)\n    return all(chr(ord(a) - 2 * 2) == b for a, b in zip(encrypted, orig))",
    "sols": [
      "def sol(orig=\"fymodoquyjyp x q\"):\n    return \"\".join(chr(ord(b) + 2 * 2) for b in orig)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#89",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SubstitutionCypher_6",
    "sat": "def sat(encrypted: str, orig=\"janonythipochequ wykidevahibyri\"):\n    \"\"\"Apply a substitution cypher in which each character is advanced by two multiplied by two places.\"\"\"\n    assert len(encrypted) == len(orig)\n    return all(chr(ord(a) - 2 * 2) == b for a, b in zip(encrypted, orig))",
    "sols": [
      "def sol(orig=\"janonythipochequ wykidevahibyri\"):\n    return \"\".join(chr(ord(b) + 2 * 2) for b in orig)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#89",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SubstitutionCypher_7",
    "sat": "def sat(encrypted: str, orig=\"kebotaheloquuje texty\"):\n    \"\"\"Apply a substitution cypher in which each character is advanced by two multiplied by two places.\"\"\"\n    assert len(encrypted) == len(orig)\n    return all(chr(ord(a) - 2 * 2) == b for a, b in zip(encrypted, orig))",
    "sols": [
      "def sol(orig=\"kebotaheloquuje texty\"):\n    return \"\".join(chr(ord(b) + 2 * 2) for b in orig)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#89",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SubstitutionCypher_8",
    "sat": "def sat(encrypted: str, orig=\"textylezecytextawo jib pe pewibipucisepelit\"):\n    \"\"\"Apply a substitution cypher in which each character is advanced by two multiplied by two places.\"\"\"\n    assert len(encrypted) == len(orig)\n    return all(chr(ord(a) - 2 * 2) == b for a, b in zip(encrypted, orig))",
    "sols": [
      "def sol(orig=\"textylezecytextawo jib pe pewibipucisepelit\"):\n    return \"\".join(chr(ord(b) + 2 * 2) for b in orig)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#89",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SubstitutionCypher_9",
    "sat": "def sat(encrypted: str, orig=\"jixuvuthowugewoch jup chodac textis\"):\n    \"\"\"Apply a substitution cypher in which each character is advanced by two multiplied by two places.\"\"\"\n    assert len(encrypted) == len(orig)\n    return all(chr(ord(a) - 2 * 2) == b for a, b in zip(encrypted, orig))",
    "sols": [
      "def sol(orig=\"jixuvuthowugewoch jup chodac textis\"):\n    return \"\".join(chr(ord(b) + 2 * 2) for b in orig)"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#89",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SecondSmallestUnique_0",
    "sat": "def sat(n: int, nums=[17, -1023589211, -293485382500, 31, -293485382500, 105762, 94328103589]):\n    \"\"\"Find the second smallest unique number in the list nums.\"\"\"\n    assert n in nums\n    return len({i for i in nums if i <= n}) == 2",
    "sols": [
      "def sol(nums=[17, -1023589211, -293485382500, 31, -293485382500, 105762, 94328103589]):\n    return sorted(set(nums))[1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#90",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SecondSmallestUnique_1",
    "sat": "def sat(n: int, nums=[-3, -4, -3, 8, -9]):\n    \"\"\"Find the second smallest unique number in the list nums.\"\"\"\n    assert n in nums\n    return len({i for i in nums if i <= n}) == 2",
    "sols": [
      "def sol(nums=[-3, -4, -3, 8, -9]):\n    return sorted(set(nums))[1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#90",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SecondSmallestUnique_2",
    "sat": "def sat(n: int, nums=[0, -5, -7, -5, 0, -2, 6, -8]):\n    \"\"\"Find the second smallest unique number in the list nums.\"\"\"\n    assert n in nums\n    return len({i for i in nums if i <= n}) == 2",
    "sols": [
      "def sol(nums=[0, -5, -7, -5, 0, -2, 6, -8]):\n    return sorted(set(nums))[1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#90",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SecondSmallestUnique_3",
    "sat": "def sat(n: int, nums=[6, 5]):\n    \"\"\"Find the second smallest unique number in the list nums.\"\"\"\n    assert n in nums\n    return len({i for i in nums if i <= n}) == 2",
    "sols": [
      "def sol(nums=[6, 5]):\n    return sorted(set(nums))[1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#90",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SecondSmallestUnique_4",
    "sat": "def sat(n: int, nums=[4, -8, 8, 4]):\n    \"\"\"Find the second smallest unique number in the list nums.\"\"\"\n    assert n in nums\n    return len({i for i in nums if i <= n}) == 2",
    "sols": [
      "def sol(nums=[4, -8, 8, 4]):\n    return sorted(set(nums))[1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#90",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SecondSmallestUnique_5",
    "sat": "def sat(n: int, nums=[2, -8, 6]):\n    \"\"\"Find the second smallest unique number in the list nums.\"\"\"\n    assert n in nums\n    return len({i for i in nums if i <= n}) == 2",
    "sols": [
      "def sol(nums=[2, -8, 6]):\n    return sorted(set(nums))[1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#90",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SecondSmallestUnique_6",
    "sat": "def sat(n: int, nums=[3, -7, -7, 0, 3, -6]):\n    \"\"\"Find the second smallest unique number in the list nums.\"\"\"\n    assert n in nums\n    return len({i for i in nums if i <= n}) == 2",
    "sols": [
      "def sol(nums=[3, -7, -7, 0, 3, -6]):\n    return sorted(set(nums))[1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#90",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SecondSmallestUnique_7",
    "sat": "def sat(n: int, nums=[-6, -8, -5, -1]):\n    \"\"\"Find the second smallest unique number in the list nums.\"\"\"\n    assert n in nums\n    return len({i for i in nums if i <= n}) == 2",
    "sols": [
      "def sol(nums=[-6, -8, -5, -1]):\n    return sorted(set(nums))[1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#90",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SecondSmallestUnique_8",
    "sat": "def sat(n: int, nums=[8, 8, 4, 9]):\n    \"\"\"Find the second smallest unique number in the list nums.\"\"\"\n    assert n in nums\n    return len({i for i in nums if i <= n}) == 2",
    "sols": [
      "def sol(nums=[8, 8, 4, 9]):\n    return sorted(set(nums))[1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#90",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "SecondSmallestUnique_9",
    "sat": "def sat(n: int, nums=[-10, -6, -8, 0, -10, -3]):\n    \"\"\"Find the second smallest unique number in the list nums.\"\"\"\n    assert n in nums\n    return len({i for i in nums if i <= n}) == 2",
    "sols": [
      "def sol(nums=[-10, -6, -8, 0, -10, -3]):\n    return sorted(set(nums))[1]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#90",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindBored_0",
    "sat": "def sat(boring: List[str], text=\"This is not boring. I am boring! I am sooo tired.\"):\n    \"\"\"A bored sentence starts with the word \"I\". Find all bored sentences in s. Sentence delimiters are '.!?'\"\"\"\n    sentences = text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\")\n    boring_and_exciting = boring + [s for s in sentences if s.split()[:1] != [\"I\"]]\n    return sorted(boring_and_exciting) == sorted(sentences)",
    "sols": [
      "def sol(text=\"This is not boring. I am boring! I am sooo tired.\"):\n    return [s for s in text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\") if s.split()[:1] == [\"I\"]]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#91",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindBored_1",
    "sat": "def sat(boring: List[str], text=\"dexuzuhyfac lifugerimosiwybot.hesukawycat!hawymemof pa text z.nuquyt weminubadithikanat gejetextipafex vobenekothob.reraxithechaquipapav wexamew lobihus zygijehequesatextacy jucyth?I?I wevymicygequipi cicemyte tha cetexti vuhoxadivelabyduxix?I lanusutho kuzit?nathor sopati myjamygukiwyhuje.I kacuquedewapojedu thulocho?I chezeri.thubitozogukenejugox.cytonoc tex tobaquy wiwithij!vinam rarile sibizytexta notaxithyzu?\"):\n    \"\"\"A bored sentence starts with the word \"I\". Find all bored sentences in s. Sentence delimiters are '.!?'\"\"\"\n    sentences = text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\")\n    boring_and_exciting = boring + [s for s in sentences if s.split()[:1] != [\"I\"]]\n    return sorted(boring_and_exciting) == sorted(sentences)",
    "sols": [
      "def sol(text=\"dexuzuhyfac lifugerimosiwybot.hesukawycat!hawymemof pa text z.nuquyt weminubadithikanat gejetextipafex vobenekothob.reraxithechaquipapav wexamew lobihus zygijehequesatextacy jucyth?I?I wevymicygequipi cicemyte tha cetexti vuhoxadivelabyduxix?I lanusutho kuzit?nathor sopati myjamygukiwyhuje.I kacuquedewapojedu thulocho?I chezeri.thubitozogukenejugox.cytonoc tex tobaquy wiwithij!vinam rarile sibizytexta notaxithyzu?\"):\n    return [s for s in text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\") if s.split()[:1] == [\"I\"]]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#91",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindBored_2",
    "sat": "def sat(boring: List[str], text=\"\"):\n    \"\"\"A bored sentence starts with the word \"I\". Find all bored sentences in s. Sentence delimiters are '.!?'\"\"\"\n    sentences = text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\")\n    boring_and_exciting = boring + [s for s in sentences if s.split()[:1] != [\"I\"]]\n    return sorted(boring_and_exciting) == sorted(sentences)",
    "sols": [
      "def sol(text=\"\"):\n    return [s for s in text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\") if s.split()[:1] == [\"I\"]]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#91",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindBored_3",
    "sat": "def sat(boring: List[str], text=\"nysydajywigi vefusivechucirochuw tipeko pogofinifyk.I textovugythecodo ruwatekat dane wachikechanequi matupisofunehac.tubicetofalat colawuhemedexeq lurytext?\"):\n    \"\"\"A bored sentence starts with the word \"I\". Find all bored sentences in s. Sentence delimiters are '.!?'\"\"\"\n    sentences = text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\")\n    boring_and_exciting = boring + [s for s in sentences if s.split()[:1] != [\"I\"]]\n    return sorted(boring_and_exciting) == sorted(sentences)",
    "sols": [
      "def sol(text=\"nysydajywigi vefusivechucirochuw tipeko pogofinifyk.I textovugythecodo ruwatekat dane wachikechanequi matupisofunehac.tubicetofalat colawuhemedexeq lurytext?\"):\n    return [s for s in text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\") if s.split()[:1] == [\"I\"]]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#91",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindBored_4",
    "sat": "def sat(boring: List[str], text=\"?zihithi ch chithe vuluzuquidawyquo.I?I chypufomiwylojen ziwuwygawyfyg makatex?textidigefoc nyjav.I gujyduvafe gykizubam cofurythoc.coc thohifycepy tex kybiwulatextux.\"):\n    \"\"\"A bored sentence starts with the word \"I\". Find all bored sentences in s. Sentence delimiters are '.!?'\"\"\"\n    sentences = text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\")\n    boring_and_exciting = boring + [s for s in sentences if s.split()[:1] != [\"I\"]]\n    return sorted(boring_and_exciting) == sorted(sentences)",
    "sols": [
      "def sol(text=\"?zihithi ch chithe vuluzuquidawyquo.I?I chypufomiwylojen ziwuwygawyfyg makatex?textidigefoc nyjav.I gujyduvafe gykizubam cofurythoc.coc thohifycepy tex kybiwulatextux.\"):\n    return [s for s in text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\") if s.split()[:1] == [\"I\"]]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#91",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindBored_5",
    "sat": "def sat(boring: List[str], text=\"I dobuv.textyhitex japix?ripypavumemon thychi miwuzigoquucivev purycowytehyrefapy cofujewobazi!wow gysyxuliwe kichat sahununaconez.dofuthodechogudate hejyloluth pufelifi!I syquothyzedujojuthu xamathotox.\"):\n    \"\"\"A bored sentence starts with the word \"I\". Find all bored sentences in s. Sentence delimiters are '.!?'\"\"\"\n    sentences = text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\")\n    boring_and_exciting = boring + [s for s in sentences if s.split()[:1] != [\"I\"]]\n    return sorted(boring_and_exciting) == sorted(sentences)",
    "sols": [
      "def sol(text=\"I dobuv.textyhitex japix?ripypavumemon thychi miwuzigoquucivev purycowytehyrefapy cofujewobazi!wow gysyxuliwe kichat sahununaconez.dofuthodechogudate hejyloluth pufelifi!I syquothyzedujojuthu xamathotox.\"):\n    return [s for s in text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\") if s.split()[:1] == [\"I\"]]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#91",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindBored_6",
    "sat": "def sat(boring: List[str], text=\"I quajapycherathatex hujajohipabavevefyd citex vemopenofuzynycot?textyb suquukor petext.I!rapinoj thunagysyxychyjabon?hewuchuc caracivicilokacimedo pubajofuxikasip dunogetatobexa?I thigycubo kegixylifebafuxogyq bamadutextilo.textanisaketyqu zevonysos!I thaly.rap ji quox recygequa?I zyfadimuzy hete hufobepesywyrorivy chokyzotextath?quihahebymute cykyj ximachilevaxuhafi?mowyfisudoveribu th coq cherotachipuve!I juwacevykymobabuvyx tatot!I xatuquikoch mihijugyk nicethynahuza zafigechimudaf???I xiryc titubatextise jycusiwovow!I ryvidurovy x vothyte!\"):\n    \"\"\"A bored sentence starts with the word \"I\". Find all bored sentences in s. Sentence delimiters are '.!?'\"\"\"\n    sentences = text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\")\n    boring_and_exciting = boring + [s for s in sentences if s.split()[:1] != [\"I\"]]\n    return sorted(boring_and_exciting) == sorted(sentences)",
    "sols": [
      "def sol(text=\"I quajapycherathatex hujajohipabavevefyd citex vemopenofuzynycot?textyb suquukor petext.I!rapinoj thunagysyxychyjabon?hewuchuc caracivicilokacimedo pubajofuxikasip dunogetatobexa?I thigycubo kegixylifebafuxogyq bamadutextilo.textanisaketyqu zevonysos!I thaly.rap ji quox recygequa?I zyfadimuzy hete hufobepesywyrorivy chokyzotextath?quihahebymute cykyj ximachilevaxuhafi?mowyfisudoveribu th coq cherotachipuve!I juwacevykymobabuvyx tatot!I xatuquikoch mihijugyk nicethynahuza zafigechimudaf???I xiryc titubatextise jycusiwovow!I ryvidurovy x vothyte!\"):\n    return [s for s in text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\") if s.split()[:1] == [\"I\"]]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#91",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindBored_7",
    "sat": "def sat(boring: List[str], text=\"I pysisy zexotuchipudig sapihu quatextapythaha.tutexto xigyc.wefufyger!\"):\n    \"\"\"A bored sentence starts with the word \"I\". Find all bored sentences in s. Sentence delimiters are '.!?'\"\"\"\n    sentences = text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\")\n    boring_and_exciting = boring + [s for s in sentences if s.split()[:1] != [\"I\"]]\n    return sorted(boring_and_exciting) == sorted(sentences)",
    "sols": [
      "def sol(text=\"I pysisy zexotuchipudig sapihu quatextapythaha.tutexto xigyc.wefufyger!\"):\n    return [s for s in text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\") if s.split()[:1] == [\"I\"]]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#91",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindBored_8",
    "sat": "def sat(boring: List[str], text=\"tunotuth?I dymoc!!\"):\n    \"\"\"A bored sentence starts with the word \"I\". Find all bored sentences in s. Sentence delimiters are '.!?'\"\"\"\n    sentences = text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\")\n    boring_and_exciting = boring + [s for s in sentences if s.split()[:1] != [\"I\"]]\n    return sorted(boring_and_exciting) == sorted(sentences)",
    "sols": [
      "def sol(text=\"tunotuth?I dymoc!!\"):\n    return [s for s in text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\") if s.split()[:1] == [\"I\"]]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#91",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "FindBored_9",
    "sat": "def sat(boring: List[str], text=\"I hyxitotextehef mumute bidocapysitextafik bazy vopibyf!I gyfogadu retextafechuw wacusutichawet niwinygevoloh?I textowu cythozylykici je xap?.I lezohotepinabotew thuboxusygo gyth?\"):\n    \"\"\"A bored sentence starts with the word \"I\". Find all bored sentences in s. Sentence delimiters are '.!?'\"\"\"\n    sentences = text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\")\n    boring_and_exciting = boring + [s for s in sentences if s.split()[:1] != [\"I\"]]\n    return sorted(boring_and_exciting) == sorted(sentences)",
    "sols": [
      "def sol(text=\"I hyxitotextehef mumute bidocapysitextafik bazy vopibyf!I gyfogadu retextafechuw wacusutichawet niwinygevoloh?I textowu cythozylykici je xap?.I lezohotepinabotew thuboxusygo gyth?\"):\n    return [s for s in text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\") if s.split()[:1] == [\"I\"]]"
    ],
    "module": "human_eval",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#91",
    "taint_date": "2021-7-7",
    "weight": 0.0010416666666666667
  },
  {
    "name": "IsEven_0",
    "sat": "def sat(b: bool, n=10):\n    \"\"\"Determine if n can be evenly divided into two equal numbers. (Easy)\"\"\"\n    i = 0\n    while i <= n:\n        if i + i == n:\n            return b == True\n        i += 1\n    return b == False",
    "sols": [
      "def sol(n=10):\n    return n % 2 == 0"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 4 A](https://codeforces.com/problemset/problem/4/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "IsEven_1",
    "sat": "def sat(b: bool, n=0):\n    \"\"\"Determine if n can be evenly divided into two equal numbers. (Easy)\"\"\"\n    i = 0\n    while i <= n:\n        if i + i == n:\n            return b == True\n        i += 1\n    return b == False",
    "sols": [
      "def sol(n=0):\n    return n % 2 == 0"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 4 A](https://codeforces.com/problemset/problem/4/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "IsEven_2",
    "sat": "def sat(b: bool, n=1):\n    \"\"\"Determine if n can be evenly divided into two equal numbers. (Easy)\"\"\"\n    i = 0\n    while i <= n:\n        if i + i == n:\n            return b == True\n        i += 1\n    return b == False",
    "sols": [
      "def sol(n=1):\n    return n % 2 == 0"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 4 A](https://codeforces.com/problemset/problem/4/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "IsEven_3",
    "sat": "def sat(b: bool, n=2):\n    \"\"\"Determine if n can be evenly divided into two equal numbers. (Easy)\"\"\"\n    i = 0\n    while i <= n:\n        if i + i == n:\n            return b == True\n        i += 1\n    return b == False",
    "sols": [
      "def sol(n=2):\n    return n % 2 == 0"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 4 A](https://codeforces.com/problemset/problem/4/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "IsEven_4",
    "sat": "def sat(b: bool, n=3):\n    \"\"\"Determine if n can be evenly divided into two equal numbers. (Easy)\"\"\"\n    i = 0\n    while i <= n:\n        if i + i == n:\n            return b == True\n        i += 1\n    return b == False",
    "sols": [
      "def sol(n=3):\n    return n % 2 == 0"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 4 A](https://codeforces.com/problemset/problem/4/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "IsEven_5",
    "sat": "def sat(b: bool, n=4):\n    \"\"\"Determine if n can be evenly divided into two equal numbers. (Easy)\"\"\"\n    i = 0\n    while i <= n:\n        if i + i == n:\n            return b == True\n        i += 1\n    return b == False",
    "sols": [
      "def sol(n=4):\n    return n % 2 == 0"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 4 A](https://codeforces.com/problemset/problem/4/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "IsEven_6",
    "sat": "def sat(b: bool, n=5):\n    \"\"\"Determine if n can be evenly divided into two equal numbers. (Easy)\"\"\"\n    i = 0\n    while i <= n:\n        if i + i == n:\n            return b == True\n        i += 1\n    return b == False",
    "sols": [
      "def sol(n=5):\n    return n % 2 == 0"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 4 A](https://codeforces.com/problemset/problem/4/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "IsEven_7",
    "sat": "def sat(b: bool, n=6):\n    \"\"\"Determine if n can be evenly divided into two equal numbers. (Easy)\"\"\"\n    i = 0\n    while i <= n:\n        if i + i == n:\n            return b == True\n        i += 1\n    return b == False",
    "sols": [
      "def sol(n=6):\n    return n % 2 == 0"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 4 A](https://codeforces.com/problemset/problem/4/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "IsEven_8",
    "sat": "def sat(b: bool, n=7):\n    \"\"\"Determine if n can be evenly divided into two equal numbers. (Easy)\"\"\"\n    i = 0\n    while i <= n:\n        if i + i == n:\n            return b == True\n        i += 1\n    return b == False",
    "sols": [
      "def sol(n=7):\n    return n % 2 == 0"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 4 A](https://codeforces.com/problemset/problem/4/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "IsEven_9",
    "sat": "def sat(b: bool, n=8):\n    \"\"\"Determine if n can be evenly divided into two equal numbers. (Easy)\"\"\"\n    i = 0\n    while i <= n:\n        if i + i == n:\n            return b == True\n        i += 1\n    return b == False",
    "sols": [
      "def sol(n=8):\n    return n % 2 == 0"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 4 A](https://codeforces.com/problemset/problem/4/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Abbreviate_0",
    "sat": "def sat(s: str, word=\"antidisestablishmentarianism\", max_len=10):\n    \"\"\"\n    Abbreviate strings longer than a given length by replacing everything but the first and last characters by\n    an integer indicating how many characters there were in between them.\n    \"\"\"\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and word[-1] == s[-1]",
    "sols": [
      "def sol(word=\"antidisestablishmentarianism\", max_len=10):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\""
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 71 A](https://codeforces.com/problemset/problem/71/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Abbreviate_1",
    "sat": "def sat(s: str, word=\"pawuzorythalirinasubyg\", max_len=12):\n    \"\"\"\n    Abbreviate strings longer than a given length by replacing everything but the first and last characters by\n    an integer indicating how many characters there were in between them.\n    \"\"\"\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and word[-1] == s[-1]",
    "sols": [
      "def sol(word=\"pawuzorythalirinasubyg\", max_len=12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\""
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 71 A](https://codeforces.com/problemset/problem/71/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Abbreviate_2",
    "sat": "def sat(s: str, word=\"jomodosigezyfulach\", max_len=5):\n    \"\"\"\n    Abbreviate strings longer than a given length by replacing everything but the first and last characters by\n    an integer indicating how many characters there were in between them.\n    \"\"\"\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and word[-1] == s[-1]",
    "sols": [
      "def sol(word=\"jomodosigezyfulach\", max_len=5):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\""
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 71 A](https://codeforces.com/problemset/problem/71/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Abbreviate_3",
    "sat": "def sat(s: str, word=\"bybakichop\", max_len=12):\n    \"\"\"\n    Abbreviate strings longer than a given length by replacing everything but the first and last characters by\n    an integer indicating how many characters there were in between them.\n    \"\"\"\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and word[-1] == s[-1]",
    "sols": [
      "def sol(word=\"bybakichop\", max_len=12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\""
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 71 A](https://codeforces.com/problemset/problem/71/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Abbreviate_4",
    "sat": "def sat(s: str, word=\"wywaxizodetextonigijalate\", max_len=5):\n    \"\"\"\n    Abbreviate strings longer than a given length by replacing everything but the first and last characters by\n    an integer indicating how many characters there were in between them.\n    \"\"\"\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and word[-1] == s[-1]",
    "sols": [
      "def sol(word=\"wywaxizodetextonigijalate\", max_len=5):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\""
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 71 A](https://codeforces.com/problemset/problem/71/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Abbreviate_5",
    "sat": "def sat(s: str, word=\"chathitytewugomoquiw\", max_len=13):\n    \"\"\"\n    Abbreviate strings longer than a given length by replacing everything but the first and last characters by\n    an integer indicating how many characters there were in between them.\n    \"\"\"\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and word[-1] == s[-1]",
    "sols": [
      "def sol(word=\"chathitytewugomoquiw\", max_len=13):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\""
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 71 A](https://codeforces.com/problemset/problem/71/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Abbreviate_6",
    "sat": "def sat(s: str, word=\"quohasuluwitextinachaxo\", max_len=7):\n    \"\"\"\n    Abbreviate strings longer than a given length by replacing everything but the first and last characters by\n    an integer indicating how many characters there were in between them.\n    \"\"\"\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and word[-1] == s[-1]",
    "sols": [
      "def sol(word=\"quohasuluwitextinachaxo\", max_len=7):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\""
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 71 A](https://codeforces.com/problemset/problem/71/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Abbreviate_7",
    "sat": "def sat(s: str, word=\"chokote\", max_len=7):\n    \"\"\"\n    Abbreviate strings longer than a given length by replacing everything but the first and last characters by\n    an integer indicating how many characters there were in between them.\n    \"\"\"\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and word[-1] == s[-1]",
    "sols": [
      "def sol(word=\"chokote\", max_len=7):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\""
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 71 A](https://codeforces.com/problemset/problem/71/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Abbreviate_8",
    "sat": "def sat(s: str, word=\"kuwanytexuwivychevo\", max_len=10):\n    \"\"\"\n    Abbreviate strings longer than a given length by replacing everything but the first and last characters by\n    an integer indicating how many characters there were in between them.\n    \"\"\"\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and word[-1] == s[-1]",
    "sols": [
      "def sol(word=\"kuwanytexuwivychevo\", max_len=10):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\""
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 71 A](https://codeforces.com/problemset/problem/71/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Abbreviate_9",
    "sat": "def sat(s: str, word=\"textuchyvenocolamygeryqu\", max_len=8):\n    \"\"\"\n    Abbreviate strings longer than a given length by replacing everything but the first and last characters by\n    an integer indicating how many characters there were in between them.\n    \"\"\"\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and word[-1] == s[-1]",
    "sols": [
      "def sol(word=\"textuchyvenocolamygeryqu\", max_len=8):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\""
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 71 A](https://codeforces.com/problemset/problem/71/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SquareTiles_0",
    "sat": "def sat(corners: List[List[int]], m=10, n=9, a=5, target=4):\n    \"\"\"Find a minimal list of corner locations for a\u00d7a tiles that covers [0, m] \u00d7 [0, n] and does not double-cover\n    squares.\n\n    Sample Input:\n    m = 10\n    n = 9\n    a = 5\n    target = 4\n\n    Sample Output:\n    [[0, 0], [0, 5], [5, 0], [5, 5]]\n    \"\"\"\n    covered = {(i + x, j + y) for i, j in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, \"Double coverage\"\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})",
    "sols": [
      "def sol(m=10, n=9, a=5, target=4):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1 A](https://codeforces.com/problemset/problem/1/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SquareTiles_1",
    "sat": "def sat(corners: List[List[int]], m=22, n=129, a=9, target=45):\n    \"\"\"Find a minimal list of corner locations for a\u00d7a tiles that covers [0, m] \u00d7 [0, n] and does not double-cover\n    squares.\n\n    Sample Input:\n    m = 10\n    n = 9\n    a = 5\n    target = 4\n\n    Sample Output:\n    [[0, 0], [0, 5], [5, 0], [5, 5]]\n    \"\"\"\n    covered = {(i + x, j + y) for i, j in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, \"Double coverage\"\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})",
    "sols": [
      "def sol(m=22, n=129, a=9, target=45):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1 A](https://codeforces.com/problemset/problem/1/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SquareTiles_2",
    "sat": "def sat(corners: List[List[int]], m=6, n=849, a=10, target=89):\n    \"\"\"Find a minimal list of corner locations for a\u00d7a tiles that covers [0, m] \u00d7 [0, n] and does not double-cover\n    squares.\n\n    Sample Input:\n    m = 10\n    n = 9\n    a = 5\n    target = 4\n\n    Sample Output:\n    [[0, 0], [0, 5], [5, 0], [5, 5]]\n    \"\"\"\n    covered = {(i + x, j + y) for i, j in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, \"Double coverage\"\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})",
    "sols": [
      "def sol(m=6, n=849, a=10, target=89):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1 A](https://codeforces.com/problemset/problem/1/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SquareTiles_3",
    "sat": "def sat(corners: List[List[int]], m=89, n=554, a=6, target=1397):\n    \"\"\"Find a minimal list of corner locations for a\u00d7a tiles that covers [0, m] \u00d7 [0, n] and does not double-cover\n    squares.\n\n    Sample Input:\n    m = 10\n    n = 9\n    a = 5\n    target = 4\n\n    Sample Output:\n    [[0, 0], [0, 5], [5, 0], [5, 5]]\n    \"\"\"\n    covered = {(i + x, j + y) for i, j in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, \"Double coverage\"\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})",
    "sols": [
      "def sol(m=89, n=554, a=6, target=1397):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1 A](https://codeforces.com/problemset/problem/1/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SquareTiles_4",
    "sat": "def sat(corners: List[List[int]], m=74, n=1, a=2, target=38):\n    \"\"\"Find a minimal list of corner locations for a\u00d7a tiles that covers [0, m] \u00d7 [0, n] and does not double-cover\n    squares.\n\n    Sample Input:\n    m = 10\n    n = 9\n    a = 5\n    target = 4\n\n    Sample Output:\n    [[0, 0], [0, 5], [5, 0], [5, 5]]\n    \"\"\"\n    covered = {(i + x, j + y) for i, j in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, \"Double coverage\"\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})",
    "sols": [
      "def sol(m=74, n=1, a=2, target=38):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1 A](https://codeforces.com/problemset/problem/1/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SquareTiles_5",
    "sat": "def sat(corners: List[List[int]], m=82, n=3, a=10, target=11):\n    \"\"\"Find a minimal list of corner locations for a\u00d7a tiles that covers [0, m] \u00d7 [0, n] and does not double-cover\n    squares.\n\n    Sample Input:\n    m = 10\n    n = 9\n    a = 5\n    target = 4\n\n    Sample Output:\n    [[0, 0], [0, 5], [5, 0], [5, 5]]\n    \"\"\"\n    covered = {(i + x, j + y) for i, j in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, \"Double coverage\"\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})",
    "sols": [
      "def sol(m=82, n=3, a=10, target=11):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1 A](https://codeforces.com/problemset/problem/1/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SquareTiles_6",
    "sat": "def sat(corners: List[List[int]], m=50, n=5, a=2, target=79):\n    \"\"\"Find a minimal list of corner locations for a\u00d7a tiles that covers [0, m] \u00d7 [0, n] and does not double-cover\n    squares.\n\n    Sample Input:\n    m = 10\n    n = 9\n    a = 5\n    target = 4\n\n    Sample Output:\n    [[0, 0], [0, 5], [5, 0], [5, 5]]\n    \"\"\"\n    covered = {(i + x, j + y) for i, j in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, \"Double coverage\"\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})",
    "sols": [
      "def sol(m=50, n=5, a=2, target=79):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1 A](https://codeforces.com/problemset/problem/1/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SquareTiles_7",
    "sat": "def sat(corners: List[List[int]], m=5, n=49, a=7, target=11):\n    \"\"\"Find a minimal list of corner locations for a\u00d7a tiles that covers [0, m] \u00d7 [0, n] and does not double-cover\n    squares.\n\n    Sample Input:\n    m = 10\n    n = 9\n    a = 5\n    target = 4\n\n    Sample Output:\n    [[0, 0], [0, 5], [5, 0], [5, 5]]\n    \"\"\"\n    covered = {(i + x, j + y) for i, j in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, \"Double coverage\"\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})",
    "sols": [
      "def sol(m=5, n=49, a=7, target=11):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1 A](https://codeforces.com/problemset/problem/1/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SquareTiles_8",
    "sat": "def sat(corners: List[List[int]], m=6, n=447, a=10, target=45):\n    \"\"\"Find a minimal list of corner locations for a\u00d7a tiles that covers [0, m] \u00d7 [0, n] and does not double-cover\n    squares.\n\n    Sample Input:\n    m = 10\n    n = 9\n    a = 5\n    target = 4\n\n    Sample Output:\n    [[0, 0], [0, 5], [5, 0], [5, 5]]\n    \"\"\"\n    covered = {(i + x, j + y) for i, j in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, \"Double coverage\"\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})",
    "sols": [
      "def sol(m=6, n=447, a=10, target=45):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1 A](https://codeforces.com/problemset/problem/1/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SquareTiles_9",
    "sat": "def sat(corners: List[List[int]], m=460, n=87, a=2, target=10122):\n    \"\"\"Find a minimal list of corner locations for a\u00d7a tiles that covers [0, m] \u00d7 [0, n] and does not double-cover\n    squares.\n\n    Sample Input:\n    m = 10\n    n = 9\n    a = 5\n    target = 4\n\n    Sample Output:\n    [[0, 0], [0, 5], [5, 0], [5, 5]]\n    \"\"\"\n    covered = {(i + x, j + y) for i, j in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, \"Double coverage\"\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})",
    "sols": [
      "def sol(m=460, n=87, a=2, target=10122):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1 A](https://codeforces.com/problemset/problem/1/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "EasyTwos_0",
    "sat": "def sat(lb: List[bool], trips=[[1, 1, 0], [1, 0, 0], [0, 0, 0], [0, 1, 1], [0, 1, 1], [1, 1, 1], [1, 0, 1]]):\n    \"\"\"\n    Given a list of lists of triples of integers, return True for each list with a total of at least 2 and\n    False for each other list.\n    \"\"\"\n    return len(lb) == len(trips) and all(\n        (b is True) if sum(s) >= 2 else (b is False) for b, s in zip(lb, trips))",
    "sols": [
      "def sol(trips=[[1, 1, 0], [1, 0, 0], [0, 0, 0], [0, 1, 1], [0, 1, 1], [1, 1, 1], [1, 0, 1]]):\n    return [sum(s) >= 2 for s in trips]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 231 A](https://codeforces.com/problemset/problem/231/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "EasyTwos_1",
    "sat": "def sat(lb: List[bool], trips=[[1, 1, 1], [1, 0, 0], [1, 1, 1], [0, 0, 0]]):\n    \"\"\"\n    Given a list of lists of triples of integers, return True for each list with a total of at least 2 and\n    False for each other list.\n    \"\"\"\n    return len(lb) == len(trips) and all(\n        (b is True) if sum(s) >= 2 else (b is False) for b, s in zip(lb, trips))",
    "sols": [
      "def sol(trips=[[1, 1, 1], [1, 0, 0], [1, 1, 1], [0, 0, 0]]):\n    return [sum(s) >= 2 for s in trips]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 231 A](https://codeforces.com/problemset/problem/231/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "EasyTwos_2",
    "sat": "def sat(lb: List[bool], trips=[[0, 0, 0], [1, 0, 0], [0, 1, 1], [0, 1, 1]]):\n    \"\"\"\n    Given a list of lists of triples of integers, return True for each list with a total of at least 2 and\n    False for each other list.\n    \"\"\"\n    return len(lb) == len(trips) and all(\n        (b is True) if sum(s) >= 2 else (b is False) for b, s in zip(lb, trips))",
    "sols": [
      "def sol(trips=[[0, 0, 0], [1, 0, 0], [0, 1, 1], [0, 1, 1]]):\n    return [sum(s) >= 2 for s in trips]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 231 A](https://codeforces.com/problemset/problem/231/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "EasyTwos_3",
    "sat": "def sat(lb: List[bool], trips=[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]):\n    \"\"\"\n    Given a list of lists of triples of integers, return True for each list with a total of at least 2 and\n    False for each other list.\n    \"\"\"\n    return len(lb) == len(trips) and all(\n        (b is True) if sum(s) >= 2 else (b is False) for b, s in zip(lb, trips))",
    "sols": [
      "def sol(trips=[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]):\n    return [sum(s) >= 2 for s in trips]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 231 A](https://codeforces.com/problemset/problem/231/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "EasyTwos_4",
    "sat": "def sat(lb: List[bool], trips=[[0, 0, 1], [0, 1, 1], [0, 0, 1], [0, 1, 1]]):\n    \"\"\"\n    Given a list of lists of triples of integers, return True for each list with a total of at least 2 and\n    False for each other list.\n    \"\"\"\n    return len(lb) == len(trips) and all(\n        (b is True) if sum(s) >= 2 else (b is False) for b, s in zip(lb, trips))",
    "sols": [
      "def sol(trips=[[0, 0, 1], [0, 1, 1], [0, 0, 1], [0, 1, 1]]):\n    return [sum(s) >= 2 for s in trips]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 231 A](https://codeforces.com/problemset/problem/231/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "EasyTwos_5",
    "sat": "def sat(lb: List[bool], trips=[[0, 0, 0], [0, 1, 0], [1, 0, 1], [0, 1, 0], [1, 0, 1], [0, 0, 0], [0, 0, 0], [1, 1, 0], [1, 0, 0], [0, 1, 0], [0, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 1], [1, 1, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0]]):\n    \"\"\"\n    Given a list of lists of triples of integers, return True for each list with a total of at least 2 and\n    False for each other list.\n    \"\"\"\n    return len(lb) == len(trips) and all(\n        (b is True) if sum(s) >= 2 else (b is False) for b, s in zip(lb, trips))",
    "sols": [
      "def sol(trips=[[0, 0, 0], [0, 1, 0], [1, 0, 1], [0, 1, 0], [1, 0, 1], [0, 0, 0], [0, 0, 0], [1, 1, 0], [1, 0, 0], [0, 1, 0], [0, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 1], [1, 1, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0]]):\n    return [sum(s) >= 2 for s in trips]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 231 A](https://codeforces.com/problemset/problem/231/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "EasyTwos_6",
    "sat": "def sat(lb: List[bool], trips=[[0, 1, 1], [1, 1, 1], [0, 0, 0], [0, 1, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [0, 0, 1], [1, 1, 0], [1, 1, 0]]):\n    \"\"\"\n    Given a list of lists of triples of integers, return True for each list with a total of at least 2 and\n    False for each other list.\n    \"\"\"\n    return len(lb) == len(trips) and all(\n        (b is True) if sum(s) >= 2 else (b is False) for b, s in zip(lb, trips))",
    "sols": [
      "def sol(trips=[[0, 1, 1], [1, 1, 1], [0, 0, 0], [0, 1, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [0, 0, 1], [1, 1, 0], [1, 1, 0]]):\n    return [sum(s) >= 2 for s in trips]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 231 A](https://codeforces.com/problemset/problem/231/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "EasyTwos_7",
    "sat": "def sat(lb: List[bool], trips=[[0, 1, 1], [0, 1, 1], [1, 1, 0], [1, 1, 0], [0, 0, 0], [0, 0, 0], [1, 1, 0], [0, 0, 1], [1, 1, 1], [0, 1, 0], [0, 0, 1], [0, 0, 1], [1, 1, 0], [0, 0, 0]]):\n    \"\"\"\n    Given a list of lists of triples of integers, return True for each list with a total of at least 2 and\n    False for each other list.\n    \"\"\"\n    return len(lb) == len(trips) and all(\n        (b is True) if sum(s) >= 2 else (b is False) for b, s in zip(lb, trips))",
    "sols": [
      "def sol(trips=[[0, 1, 1], [0, 1, 1], [1, 1, 0], [1, 1, 0], [0, 0, 0], [0, 0, 0], [1, 1, 0], [0, 0, 1], [1, 1, 1], [0, 1, 0], [0, 0, 1], [0, 0, 1], [1, 1, 0], [0, 0, 0]]):\n    return [sum(s) >= 2 for s in trips]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 231 A](https://codeforces.com/problemset/problem/231/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "EasyTwos_8",
    "sat": "def sat(lb: List[bool], trips=[[1, 0, 1], [1, 1, 0], [1, 1, 0], [0, 1, 1], [1, 1, 0], [0, 0, 0]]):\n    \"\"\"\n    Given a list of lists of triples of integers, return True for each list with a total of at least 2 and\n    False for each other list.\n    \"\"\"\n    return len(lb) == len(trips) and all(\n        (b is True) if sum(s) >= 2 else (b is False) for b, s in zip(lb, trips))",
    "sols": [
      "def sol(trips=[[1, 0, 1], [1, 1, 0], [1, 1, 0], [0, 1, 1], [1, 1, 0], [0, 0, 0]]):\n    return [sum(s) >= 2 for s in trips]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 231 A](https://codeforces.com/problemset/problem/231/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "EasyTwos_9",
    "sat": "def sat(lb: List[bool], trips=[[1, 0, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0], [1, 0, 0], [0, 1, 0], [1, 1, 0], [1, 0, 1]]):\n    \"\"\"\n    Given a list of lists of triples of integers, return True for each list with a total of at least 2 and\n    False for each other list.\n    \"\"\"\n    return len(lb) == len(trips) and all(\n        (b is True) if sum(s) >= 2 else (b is False) for b, s in zip(lb, trips))",
    "sols": [
      "def sol(trips=[[1, 0, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0], [1, 0, 0], [0, 1, 0], [1, 1, 0], [1, 0, 1]]):\n    return [sum(s) >= 2 for s in trips]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 231 A](https://codeforces.com/problemset/problem/231/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DecreasingCountComparison_0",
    "sat": "def sat(n: int, scores=[100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k=6):\n    \"\"\"\n    Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\n    are at least as large as the kth.\n    \"\"\"\n    assert all(scores[i] >= scores[i + 1] for i in range(len(scores) - 1)), \"Hint: scores are non-decreasing\"\n    return all(s >= scores[k] and s > 0 for s in scores[:n]) and all(s < scores[k] or s <= 0 for s in scores[n:])",
    "sols": [
      "def sol(scores=[100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k=6):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 158 A](https://codeforces.com/problemset/problem/158/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DecreasingCountComparison_1",
    "sat": "def sat(n: int, scores=[16, 10], k=1):\n    \"\"\"\n    Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\n    are at least as large as the kth.\n    \"\"\"\n    assert all(scores[i] >= scores[i + 1] for i in range(len(scores) - 1)), \"Hint: scores are non-decreasing\"\n    return all(s >= scores[k] and s > 0 for s in scores[:n]) and all(s < scores[k] or s <= 0 for s in scores[n:])",
    "sols": [
      "def sol(scores=[16, 10], k=1):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 158 A](https://codeforces.com/problemset/problem/158/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DecreasingCountComparison_2",
    "sat": "def sat(n: int, scores=[28, 8, 7], k=2):\n    \"\"\"\n    Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\n    are at least as large as the kth.\n    \"\"\"\n    assert all(scores[i] >= scores[i + 1] for i in range(len(scores) - 1)), \"Hint: scores are non-decreasing\"\n    return all(s >= scores[k] and s > 0 for s in scores[:n]) and all(s < scores[k] or s <= 0 for s in scores[n:])",
    "sols": [
      "def sol(scores=[28, 8, 7], k=2):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 158 A](https://codeforces.com/problemset/problem/158/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DecreasingCountComparison_3",
    "sat": "def sat(n: int, scores=[40, 40, 31, 25], k=1):\n    \"\"\"\n    Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\n    are at least as large as the kth.\n    \"\"\"\n    assert all(scores[i] >= scores[i + 1] for i in range(len(scores) - 1)), \"Hint: scores are non-decreasing\"\n    return all(s >= scores[k] and s > 0 for s in scores[:n]) and all(s < scores[k] or s <= 0 for s in scores[n:])",
    "sols": [
      "def sol(scores=[40, 40, 31, 25], k=1):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 158 A](https://codeforces.com/problemset/problem/158/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DecreasingCountComparison_4",
    "sat": "def sat(n: int, scores=[33, 25, 16, 14, 0], k=4):\n    \"\"\"\n    Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\n    are at least as large as the kth.\n    \"\"\"\n    assert all(scores[i] >= scores[i + 1] for i in range(len(scores) - 1)), \"Hint: scores are non-decreasing\"\n    return all(s >= scores[k] and s > 0 for s in scores[:n]) and all(s < scores[k] or s <= 0 for s in scores[n:])",
    "sols": [
      "def sol(scores=[33, 25, 16, 14, 0], k=4):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 158 A](https://codeforces.com/problemset/problem/158/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DecreasingCountComparison_5",
    "sat": "def sat(n: int, scores=[28, 25, 17, 11, 9, 2], k=5):\n    \"\"\"\n    Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\n    are at least as large as the kth.\n    \"\"\"\n    assert all(scores[i] >= scores[i + 1] for i in range(len(scores) - 1)), \"Hint: scores are non-decreasing\"\n    return all(s >= scores[k] and s > 0 for s in scores[:n]) and all(s < scores[k] or s <= 0 for s in scores[n:])",
    "sols": [
      "def sol(scores=[28, 25, 17, 11, 9, 2], k=5):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 158 A](https://codeforces.com/problemset/problem/158/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DecreasingCountComparison_6",
    "sat": "def sat(n: int, scores=[15, 12, 11, 10, 8, 4, 2], k=6):\n    \"\"\"\n    Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\n    are at least as large as the kth.\n    \"\"\"\n    assert all(scores[i] >= scores[i + 1] for i in range(len(scores) - 1)), \"Hint: scores are non-decreasing\"\n    return all(s >= scores[k] and s > 0 for s in scores[:n]) and all(s < scores[k] or s <= 0 for s in scores[n:])",
    "sols": [
      "def sol(scores=[15, 12, 11, 10, 8, 4, 2], k=6):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 158 A](https://codeforces.com/problemset/problem/158/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DecreasingCountComparison_7",
    "sat": "def sat(n: int, scores=[23, 21, 20, 15, 15, 11, 4, 3], k=7):\n    \"\"\"\n    Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\n    are at least as large as the kth.\n    \"\"\"\n    assert all(scores[i] >= scores[i + 1] for i in range(len(scores) - 1)), \"Hint: scores are non-decreasing\"\n    return all(s >= scores[k] and s > 0 for s in scores[:n]) and all(s < scores[k] or s <= 0 for s in scores[n:])",
    "sols": [
      "def sol(scores=[23, 21, 20, 15, 15, 11, 4, 3], k=7):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 158 A](https://codeforces.com/problemset/problem/158/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DecreasingCountComparison_8",
    "sat": "def sat(n: int, scores=[40, 38, 38, 32, 29, 18, 17, 12, 6], k=8):\n    \"\"\"\n    Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\n    are at least as large as the kth.\n    \"\"\"\n    assert all(scores[i] >= scores[i + 1] for i in range(len(scores) - 1)), \"Hint: scores are non-decreasing\"\n    return all(s >= scores[k] and s > 0 for s in scores[:n]) and all(s < scores[k] or s <= 0 for s in scores[n:])",
    "sols": [
      "def sol(scores=[40, 38, 38, 32, 29, 18, 17, 12, 6], k=8):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 158 A](https://codeforces.com/problemset/problem/158/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DecreasingCountComparison_9",
    "sat": "def sat(n: int, scores=[39, 26, 22, 20, 20, 16, 8, 5, 2, 1], k=9):\n    \"\"\"\n    Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\n    are at least as large as the kth.\n    \"\"\"\n    assert all(scores[i] >= scores[i + 1] for i in range(len(scores) - 1)), \"Hint: scores are non-decreasing\"\n    return all(s >= scores[k] and s > 0 for s in scores[:n]) and all(s < scores[k] or s <= 0 for s in scores[n:])",
    "sols": [
      "def sol(scores=[39, 26, 22, 20, 20, 16, 8, 5, 2, 1], k=9):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 158 A](https://codeforces.com/problemset/problem/158/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "VowelDrop_0",
    "sat": "def sat(t: str, s=\"Problems\"):\n    \"\"\"\n    Given an alphabetic string s, remove all vowels (aeiouy/AEIOUY), insert a \".\" before each remaining letter\n    (consonant), and make everything lowercase.\n\n    Sample Input:\n    s = \"Problems\"\n\n    Sample Output:\n    .p.r.b.l.m.s\n    \"\"\"\n    i = 0\n    for c in s.lower():\n        if c in \"aeiouy\":\n            continue\n        assert t[i] == \".\", f\"expecting `.` at position {i}\"\n        i += 1\n        assert t[i] == c, f\"expecting `{c}`\"\n        i += 1\n    return i == len(t)",
    "sols": [
      "def sol(s=\"Problems\"):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 118 A](https://codeforces.com/problemset/problem/118/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "VowelDrop_1",
    "sat": "def sat(t: str, s=\"VahOjaquAlYMEcubidePYwApawAtonE\"):\n    \"\"\"\n    Given an alphabetic string s, remove all vowels (aeiouy/AEIOUY), insert a \".\" before each remaining letter\n    (consonant), and make everything lowercase.\n\n    Sample Input:\n    s = \"Problems\"\n\n    Sample Output:\n    .p.r.b.l.m.s\n    \"\"\"\n    i = 0\n    for c in s.lower():\n        if c in \"aeiouy\":\n            continue\n        assert t[i] == \".\", f\"expecting `.` at position {i}\"\n        i += 1\n        assert t[i] == c, f\"expecting `{c}`\"\n        i += 1\n    return i == len(t)",
    "sols": [
      "def sol(s=\"VahOjaquAlYMEcubidePYwApawAtonE\"):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 118 A](https://codeforces.com/problemset/problem/118/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "VowelDrop_2",
    "sat": "def sat(t: str, s=\"kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL\"):\n    \"\"\"\n    Given an alphabetic string s, remove all vowels (aeiouy/AEIOUY), insert a \".\" before each remaining letter\n    (consonant), and make everything lowercase.\n\n    Sample Input:\n    s = \"Problems\"\n\n    Sample Output:\n    .p.r.b.l.m.s\n    \"\"\"\n    i = 0\n    for c in s.lower():\n        if c in \"aeiouy\":\n            continue\n        assert t[i] == \".\", f\"expecting `.` at position {i}\"\n        i += 1\n        assert t[i] == c, f\"expecting `{c}`\"\n        i += 1\n    return i == len(t)",
    "sols": [
      "def sol(s=\"kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL\"):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 118 A](https://codeforces.com/problemset/problem/118/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "VowelDrop_3",
    "sat": "def sat(t: str, s=\"NOxADaNIMiReZoTeXtODUtHulyTHETextojoLeQuaNutEXtE\"):\n    \"\"\"\n    Given an alphabetic string s, remove all vowels (aeiouy/AEIOUY), insert a \".\" before each remaining letter\n    (consonant), and make everything lowercase.\n\n    Sample Input:\n    s = \"Problems\"\n\n    Sample Output:\n    .p.r.b.l.m.s\n    \"\"\"\n    i = 0\n    for c in s.lower():\n        if c in \"aeiouy\":\n            continue\n        assert t[i] == \".\", f\"expecting `.` at position {i}\"\n        i += 1\n        assert t[i] == c, f\"expecting `{c}`\"\n        i += 1\n    return i == len(t)",
    "sols": [
      "def sol(s=\"NOxADaNIMiReZoTeXtODUtHulyTHETextojoLeQuaNutEXtE\"):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 118 A](https://codeforces.com/problemset/problem/118/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "VowelDrop_4",
    "sat": "def sat(t: str, s=\"MEkUWonymYNAQUypEcIv\"):\n    \"\"\"\n    Given an alphabetic string s, remove all vowels (aeiouy/AEIOUY), insert a \".\" before each remaining letter\n    (consonant), and make everything lowercase.\n\n    Sample Input:\n    s = \"Problems\"\n\n    Sample Output:\n    .p.r.b.l.m.s\n    \"\"\"\n    i = 0\n    for c in s.lower():\n        if c in \"aeiouy\":\n            continue\n        assert t[i] == \".\", f\"expecting `.` at position {i}\"\n        i += 1\n        assert t[i] == c, f\"expecting `{c}`\"\n        i += 1\n    return i == len(t)",
    "sols": [
      "def sol(s=\"MEkUWonymYNAQUypEcIv\"):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 118 A](https://codeforces.com/problemset/problem/118/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "VowelDrop_5",
    "sat": "def sat(t: str, s=\"GOnATHygYzefuDabilEgET\"):\n    \"\"\"\n    Given an alphabetic string s, remove all vowels (aeiouy/AEIOUY), insert a \".\" before each remaining letter\n    (consonant), and make everything lowercase.\n\n    Sample Input:\n    s = \"Problems\"\n\n    Sample Output:\n    .p.r.b.l.m.s\n    \"\"\"\n    i = 0\n    for c in s.lower():\n        if c in \"aeiouy\":\n            continue\n        assert t[i] == \".\", f\"expecting `.` at position {i}\"\n        i += 1\n        assert t[i] == c, f\"expecting `{c}`\"\n        i += 1\n    return i == len(t)",
    "sols": [
      "def sol(s=\"GOnATHygYzefuDabilEgET\"):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 118 A](https://codeforces.com/problemset/problem/118/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "VowelDrop_6",
    "sat": "def sat(t: str, s=\"BElEViThIteXTERAtExtUSoJaSelOTeXtachoNa\"):\n    \"\"\"\n    Given an alphabetic string s, remove all vowels (aeiouy/AEIOUY), insert a \".\" before each remaining letter\n    (consonant), and make everything lowercase.\n\n    Sample Input:\n    s = \"Problems\"\n\n    Sample Output:\n    .p.r.b.l.m.s\n    \"\"\"\n    i = 0\n    for c in s.lower():\n        if c in \"aeiouy\":\n            continue\n        assert t[i] == \".\", f\"expecting `.` at position {i}\"\n        i += 1\n        assert t[i] == c, f\"expecting `{c}`\"\n        i += 1\n    return i == len(t)",
    "sols": [
      "def sol(s=\"BElEViThIteXTERAtExtUSoJaSelOTeXtachoNa\"):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 118 A](https://codeforces.com/problemset/problem/118/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "VowelDrop_7",
    "sat": "def sat(t: str, s=\"CyqUeVIzaLERAZufuBoPiwisucaRAHAp\"):\n    \"\"\"\n    Given an alphabetic string s, remove all vowels (aeiouy/AEIOUY), insert a \".\" before each remaining letter\n    (consonant), and make everything lowercase.\n\n    Sample Input:\n    s = \"Problems\"\n\n    Sample Output:\n    .p.r.b.l.m.s\n    \"\"\"\n    i = 0\n    for c in s.lower():\n        if c in \"aeiouy\":\n            continue\n        assert t[i] == \".\", f\"expecting `.` at position {i}\"\n        i += 1\n        assert t[i] == c, f\"expecting `{c}`\"\n        i += 1\n    return i == len(t)",
    "sols": [
      "def sol(s=\"CyqUeVIzaLERAZufuBoPiwisucaRAHAp\"):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 118 A](https://codeforces.com/problemset/problem/118/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "VowelDrop_8",
    "sat": "def sat(t: str, s=\"tEWA\"):\n    \"\"\"\n    Given an alphabetic string s, remove all vowels (aeiouy/AEIOUY), insert a \".\" before each remaining letter\n    (consonant), and make everything lowercase.\n\n    Sample Input:\n    s = \"Problems\"\n\n    Sample Output:\n    .p.r.b.l.m.s\n    \"\"\"\n    i = 0\n    for c in s.lower():\n        if c in \"aeiouy\":\n            continue\n        assert t[i] == \".\", f\"expecting `.` at position {i}\"\n        i += 1\n        assert t[i] == c, f\"expecting `{c}`\"\n        i += 1\n    return i == len(t)",
    "sols": [
      "def sol(s=\"tEWA\"):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 118 A](https://codeforces.com/problemset/problem/118/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "VowelDrop_9",
    "sat": "def sat(t: str, s=\"BYjobuCIlugacIgiWiPIbyThaZEBYqUOPyGYByKYX\"):\n    \"\"\"\n    Given an alphabetic string s, remove all vowels (aeiouy/AEIOUY), insert a \".\" before each remaining letter\n    (consonant), and make everything lowercase.\n\n    Sample Input:\n    s = \"Problems\"\n\n    Sample Output:\n    .p.r.b.l.m.s\n    \"\"\"\n    i = 0\n    for c in s.lower():\n        if c in \"aeiouy\":\n            continue\n        assert t[i] == \".\", f\"expecting `.` at position {i}\"\n        i += 1\n        assert t[i] == c, f\"expecting `{c}`\"\n        i += 1\n    return i == len(t)",
    "sols": [
      "def sol(s=\"BYjobuCIlugacIgiWiPIbyThaZEBYqUOPyGYByKYX\"):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 118 A](https://codeforces.com/problemset/problem/118/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DominoTile_0",
    "sat": "def sat(squares: List[List[int]], m=10, n=5, target=50):\n    \"\"\"Tile an m x n checkerboard with 2 x 1 tiles. The solution is a list of fourtuples [i1, j1, i2, j2] with\n    i2 == i1 and j2 == j1 + 1 or i2 == i1 + 1 and j2 == j1 with no overlap.\"\"\"\n    covered = []\n    for i1, j1, i2, j2 in squares:\n        assert (0 <= i1 <= i2 < m) and (0 <= j1 <= j2 < n) and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target",
    "sols": [
      "def sol(m=10, n=5, target=50):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 50 A](https://codeforces.com/problemset/problem/50/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DominoTile_1",
    "sat": "def sat(squares: List[List[int]], m=30, n=12, target=360):\n    \"\"\"Tile an m x n checkerboard with 2 x 1 tiles. The solution is a list of fourtuples [i1, j1, i2, j2] with\n    i2 == i1 and j2 == j1 + 1 or i2 == i1 + 1 and j2 == j1 with no overlap.\"\"\"\n    covered = []\n    for i1, j1, i2, j2 in squares:\n        assert (0 <= i1 <= i2 < m) and (0 <= j1 <= j2 < n) and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target",
    "sols": [
      "def sol(m=30, n=12, target=360):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 50 A](https://codeforces.com/problemset/problem/50/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DominoTile_2",
    "sat": "def sat(squares: List[List[int]], m=34, n=25, target=850):\n    \"\"\"Tile an m x n checkerboard with 2 x 1 tiles. The solution is a list of fourtuples [i1, j1, i2, j2] with\n    i2 == i1 and j2 == j1 + 1 or i2 == i1 + 1 and j2 == j1 with no overlap.\"\"\"\n    covered = []\n    for i1, j1, i2, j2 in squares:\n        assert (0 <= i1 <= i2 < m) and (0 <= j1 <= j2 < n) and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target",
    "sols": [
      "def sol(m=34, n=25, target=850):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 50 A](https://codeforces.com/problemset/problem/50/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DominoTile_3",
    "sat": "def sat(squares: List[List[int]], m=35, n=46, target=1610):\n    \"\"\"Tile an m x n checkerboard with 2 x 1 tiles. The solution is a list of fourtuples [i1, j1, i2, j2] with\n    i2 == i1 and j2 == j1 + 1 or i2 == i1 + 1 and j2 == j1 with no overlap.\"\"\"\n    covered = []\n    for i1, j1, i2, j2 in squares:\n        assert (0 <= i1 <= i2 < m) and (0 <= j1 <= j2 < n) and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target",
    "sols": [
      "def sol(m=35, n=46, target=1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 50 A](https://codeforces.com/problemset/problem/50/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DominoTile_4",
    "sat": "def sat(squares: List[List[int]], m=41, n=12, target=492):\n    \"\"\"Tile an m x n checkerboard with 2 x 1 tiles. The solution is a list of fourtuples [i1, j1, i2, j2] with\n    i2 == i1 and j2 == j1 + 1 or i2 == i1 + 1 and j2 == j1 with no overlap.\"\"\"\n    covered = []\n    for i1, j1, i2, j2 in squares:\n        assert (0 <= i1 <= i2 < m) and (0 <= j1 <= j2 < n) and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target",
    "sols": [
      "def sol(m=41, n=12, target=492):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 50 A](https://codeforces.com/problemset/problem/50/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DominoTile_5",
    "sat": "def sat(squares: List[List[int]], m=46, n=2, target=92):\n    \"\"\"Tile an m x n checkerboard with 2 x 1 tiles. The solution is a list of fourtuples [i1, j1, i2, j2] with\n    i2 == i1 and j2 == j1 + 1 or i2 == i1 + 1 and j2 == j1 with no overlap.\"\"\"\n    covered = []\n    for i1, j1, i2, j2 in squares:\n        assert (0 <= i1 <= i2 < m) and (0 <= j1 <= j2 < n) and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target",
    "sols": [
      "def sol(m=46, n=2, target=92):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 50 A](https://codeforces.com/problemset/problem/50/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DominoTile_6",
    "sat": "def sat(squares: List[List[int]], m=27, n=24, target=648):\n    \"\"\"Tile an m x n checkerboard with 2 x 1 tiles. The solution is a list of fourtuples [i1, j1, i2, j2] with\n    i2 == i1 and j2 == j1 + 1 or i2 == i1 + 1 and j2 == j1 with no overlap.\"\"\"\n    covered = []\n    for i1, j1, i2, j2 in squares:\n        assert (0 <= i1 <= i2 < m) and (0 <= j1 <= j2 < n) and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target",
    "sols": [
      "def sol(m=27, n=24, target=648):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 50 A](https://codeforces.com/problemset/problem/50/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DominoTile_7",
    "sat": "def sat(squares: List[List[int]], m=43, n=19, target=816):\n    \"\"\"Tile an m x n checkerboard with 2 x 1 tiles. The solution is a list of fourtuples [i1, j1, i2, j2] with\n    i2 == i1 and j2 == j1 + 1 or i2 == i1 + 1 and j2 == j1 with no overlap.\"\"\"\n    covered = []\n    for i1, j1, i2, j2 in squares:\n        assert (0 <= i1 <= i2 < m) and (0 <= j1 <= j2 < n) and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target",
    "sols": [
      "def sol(m=43, n=19, target=816):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 50 A](https://codeforces.com/problemset/problem/50/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DominoTile_8",
    "sat": "def sat(squares: List[List[int]], m=12, n=25, target=300):\n    \"\"\"Tile an m x n checkerboard with 2 x 1 tiles. The solution is a list of fourtuples [i1, j1, i2, j2] with\n    i2 == i1 and j2 == j1 + 1 or i2 == i1 + 1 and j2 == j1 with no overlap.\"\"\"\n    covered = []\n    for i1, j1, i2, j2 in squares:\n        assert (0 <= i1 <= i2 < m) and (0 <= j1 <= j2 < n) and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target",
    "sols": [
      "def sol(m=12, n=25, target=300):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 50 A](https://codeforces.com/problemset/problem/50/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DominoTile_9",
    "sat": "def sat(squares: List[List[int]], m=41, n=40, target=1640):\n    \"\"\"Tile an m x n checkerboard with 2 x 1 tiles. The solution is a list of fourtuples [i1, j1, i2, j2] with\n    i2 == i1 and j2 == j1 + 1 or i2 == i1 + 1 and j2 == j1 with no overlap.\"\"\"\n    covered = []\n    for i1, j1, i2, j2 in squares:\n        assert (0 <= i1 <= i2 < m) and (0 <= j1 <= j2 < n) and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target",
    "sols": [
      "def sol(m=41, n=40, target=1640):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 50 A](https://codeforces.com/problemset/problem/50/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "IncDec_0",
    "sat": "def sat(n: int, ops=['x++', '--x', '--x'], target=19143212):\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"\n    for op in ops:\n        if op in [\"++x\", \"x++\"]:\n            n += 1\n        else:\n            assert op in [\"--x\", \"x--\"]\n            n -= 1\n    return n == target",
    "sols": [
      "def sol(ops=['x++', '--x', '--x'], target=19143212):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 282 A](https://codeforces.com/problemset/problem/282/A)\n\nThis straightforward problem is a little harder than the Codeforces one.",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "IncDec_1",
    "sat": "def sat(n: int, ops=['x++', '++x', 'x++', 'x++', 'x--', '--x', '--x', 'x--', 'x++', 'x++', '--x', 'x--', 'x++', '++x', 'x--', '++x', '++x', 'x++', '--x', 'x++', 'x--', 'x--', 'x--', '--x', 'x++', 'x++', 'x++', 'x++', '--x', '++x', 'x++', 'x--', '--x', 'x++', '--x', '++x', 'x--', 'x--', 'x--', 'x++', 'x--', '--x', 'x++', '++x', '--x', '--x', 'x++', '++x', 'x--', 'x++', 'x--', '++x', 'x--', 'x--', '--x', 'x++', '--x', 'x--', '++x', '--x', '--x', 'x--', 'x--', 'x++', 'x--', 'x--', '--x', '++x', 'x--', '--x', 'x++', 'x--', 'x++', '++x', '++x', 'x++', '--x', '++x', '--x', 'x--', '++x', 'x--', 'x--', 'x--', 'x++', 'x++', 'x--', 'x++', 'x--', 'x--', 'x--', '--x', 'x--', 'x++', 'x--', 'x++', 'x--', '++x', 'x++', 'x--', 'x++', '++x', 'x--', '++x', 'x++', 'x++', '++x', '++x', '++x', '--x', '--x', '++x', 'x--', 'x--', '--x', '++x', 'x--', 'x--', '++x', 'x--', 'x++', 'x++', '--x', 'x++', 'x++', 'x++', '--x', '++x', 'x++', '++x', '++x', '++x', 'x--', '++x', '--x', 'x--', 'x++', '++x', 'x++', 'x--', 'x--', 'x++', 'x++', '++x', '--x', '--x', '++x', '--x', '++x', 'x++', 'x++', '++x', '++x', '--x', '--x', '--x', 'x++', 'x++', '++x', '--x', 'x++', 'x++', '++x', 'x--', '--x', '++x', '++x', '--x', 'x++', '++x', 'x++', 'x--', 'x--', '++x', '++x', 'x++', '++x', 'x--', '--x', 'x++', '--x', 'x++', '--x', 'x++', 'x++', 'x--', 'x--', 'x--', '++x', '++x', 'x--', '++x', 'x--', '--x', 'x--', '--x', 'x++', '++x', 'x++', 'x++', '++x', 'x++', '++x', '++x', '++x', '--x', 'x--', 'x--', '--x', '--x', '++x', '++x', '--x', '++x', '--x', 'x--', 'x--', '--x', '--x', '--x', '--x', '--x', 'x++', '++x', 'x++', 'x++', '--x', 'x--', 'x--', '++x', '--x', '++x', '--x', 'x--', '++x', '--x', 'x--', 'x--', 'x--', '--x', 'x++', '--x', '++x', 'x++', 'x--', '--x', 'x++', '++x', '++x', 'x--', '++x', 'x--', '--x', 'x++', '++x', 'x--', 'x++', '++x', 'x--', 'x--', 'x--', '++x', 'x++', 'x++', 'x--', '--x', '--x', '--x', '++x', '++x', 'x--', '++x', '--x', 'x--', '--x', '++x', '--x', 'x--', 'x--', 'x--'], target=88808):\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"\n    for op in ops:\n        if op in [\"++x\", \"x++\"]:\n            n += 1\n        else:\n            assert op in [\"--x\", \"x--\"]\n            n -= 1\n    return n == target",
    "sols": [
      "def sol(ops=['x++', '++x', 'x++', 'x++', 'x--', '--x', '--x', 'x--', 'x++', 'x++', '--x', 'x--', 'x++', '++x', 'x--', '++x', '++x', 'x++', '--x', 'x++', 'x--', 'x--', 'x--', '--x', 'x++', 'x++', 'x++', 'x++', '--x', '++x', 'x++', 'x--', '--x', 'x++', '--x', '++x', 'x--', 'x--', 'x--', 'x++', 'x--', '--x', 'x++', '++x', '--x', '--x', 'x++', '++x', 'x--', 'x++', 'x--', '++x', 'x--', 'x--', '--x', 'x++', '--x', 'x--', '++x', '--x', '--x', 'x--', 'x--', 'x++', 'x--', 'x--', '--x', '++x', 'x--', '--x', 'x++', 'x--', 'x++', '++x', '++x', 'x++', '--x', '++x', '--x', 'x--', '++x', 'x--', 'x--', 'x--', 'x++', 'x++', 'x--', 'x++', 'x--', 'x--', 'x--', '--x', 'x--', 'x++', 'x--', 'x++', 'x--', '++x', 'x++', 'x--', 'x++', '++x', 'x--', '++x', 'x++', 'x++', '++x', '++x', '++x', '--x', '--x', '++x', 'x--', 'x--', '--x', '++x', 'x--', 'x--', '++x', 'x--', 'x++', 'x++', '--x', 'x++', 'x++', 'x++', '--x', '++x', 'x++', '++x', '++x', '++x', 'x--', '++x', '--x', 'x--', 'x++', '++x', 'x++', 'x--', 'x--', 'x++', 'x++', '++x', '--x', '--x', '++x', '--x', '++x', 'x++', 'x++', '++x', '++x', '--x', '--x', '--x', 'x++', 'x++', '++x', '--x', 'x++', 'x++', '++x', 'x--', '--x', '++x', '++x', '--x', 'x++', '++x', 'x++', 'x--', 'x--', '++x', '++x', 'x++', '++x', 'x--', '--x', 'x++', '--x', 'x++', '--x', 'x++', 'x++', 'x--', 'x--', 'x--', '++x', '++x', 'x--', '++x', 'x--', '--x', 'x--', '--x', 'x++', '++x', 'x++', 'x++', '++x', 'x++', '++x', '++x', '++x', '--x', 'x--', 'x--', '--x', '--x', '++x', '++x', '--x', '++x', '--x', 'x--', 'x--', '--x', '--x', '--x', '--x', '--x', 'x++', '++x', 'x++', 'x++', '--x', 'x--', 'x--', '++x', '--x', '++x', '--x', 'x--', '++x', '--x', 'x--', 'x--', 'x--', '--x', 'x++', '--x', '++x', 'x++', 'x--', '--x', 'x++', '++x', '++x', 'x--', '++x', 'x--', '--x', 'x++', '++x', 'x--', 'x++', '++x', 'x--', 'x--', 'x--', '++x', 'x++', 'x++', 'x--', '--x', '--x', '--x', '++x', '++x', 'x--', '++x', '--x', 'x--', '--x', '++x', '--x', 'x--', 'x--', 'x--'], target=88808):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 282 A](https://codeforces.com/problemset/problem/282/A)\n\nThis straightforward problem is a little harder than the Codeforces one.",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "IncDec_2",
    "sat": "def sat(n: int, ops=['x--', 'x--', '++x', '--x', '--x', 'x--', '--x', '++x', 'x++', 'x++', 'x--', 'x++', '++x', '--x', '++x', '--x', 'x++', 'x++', '++x', 'x++', '--x', '--x', '--x', 'x++', '--x', '--x', 'x--', '--x', '--x', '--x', 'x--', 'x++', '++x', '--x', '--x', '++x', '--x', '--x', 'x++', 'x--', 'x--', 'x--', '++x', 'x--', '++x', 'x++', '--x', 'x--', 'x--', 'x--', '++x', 'x++', 'x++', 'x++', '--x', 'x--', 'x++', '++x', 'x--', '++x', '++x', 'x--', '++x', '++x', 'x--', '--x', '++x', '--x', '++x', 'x++', '++x', 'x++', 'x++', 'x++', 'x--', '++x', '--x', '--x', 'x++', '--x', '++x', '--x', '++x', 'x--', '--x', 'x--', '--x', '++x', 'x--', 'x--', '--x', 'x++', 'x++', '--x', '--x', 'x--', '++x', 'x++', '++x', 'x++', 'x--', 'x--', '--x', '++x', 'x++', '--x', 'x--', 'x--', '--x', '++x', 'x++', '++x', 'x++', 'x--', 'x--', 'x++', 'x++', 'x--', '++x', '--x', '++x', 'x++', 'x++', 'x--', 'x--', '++x', 'x++', 'x++', 'x--', '--x', 'x++', 'x++', 'x++', '--x', 'x--', '--x', 'x++', '++x', '--x', 'x--', 'x--', '++x', '++x', '--x', 'x++', '++x', 'x--', '--x', 'x--', '++x', 'x--', '--x', '--x', 'x--', '++x', '++x', 'x++', '--x', '++x', 'x--', '--x', 'x--', '++x', 'x--', 'x--', '++x', '++x', 'x++', 'x--', '++x', 'x++', 'x++', 'x++', 'x++', 'x--', 'x++', 'x--', '++x', 'x++', 'x--', 'x++', '++x', 'x--', '--x', '++x', 'x--', 'x--', 'x++', '++x', 'x--', 'x--', 'x--', '++x', '--x', '++x', 'x--', '--x', '++x', 'x--', '++x', 'x--', 'x--', '++x', '--x', '--x', '++x', '--x', 'x++', 'x--', '++x', 'x--', 'x++', 'x--', '++x', '--x', '--x', '--x', 'x++', '--x', 'x--', 'x++', 'x++', '--x', '--x', 'x++', 'x++', '--x', 'x--', '--x', 'x--', '++x', 'x++', '--x', 'x++', 'x++', 'x--', 'x++', 'x--', '++x', '--x', 'x++', 'x++', '--x', 'x--', '--x', 'x--', '++x', 'x--', 'x++', '--x', 'x--', 'x++', '++x', 'x--', 'x++', '--x', '++x', '++x', '++x', 'x--', 'x--', 'x++', 'x--', '++x', '++x', '++x', 'x--', 'x--', '++x', 'x--', 'x--', '--x', 'x--', 'x++', '--x', 'x++', 'x++', '--x', 'x--', 'x++', 'x--', 'x--', '++x', 'x--', '--x', 'x++', '++x', '++x', '--x', 'x--', 'x--', '++x', '--x', 'x--', 'x++', '--x', '++x', '--x', 'x++', 'x++', 'x++', 'x--', 'x++', '++x', 'x--', 'x--', '--x', '++x', 'x--', 'x++', '++x', 'x++', '++x', 'x--', '++x', '--x', '--x', 'x--', '++x', 'x--', 'x++', '--x', 'x++', '++x', 'x++', '++x', '++x', '--x', 'x++', '--x', 'x--', '++x', '++x', '--x', 'x--', '++x', '++x', 'x--', '--x', 'x--', '--x', 'x++', 'x--', '++x', 'x--', '++x', 'x--', '++x', '++x', 'x--', 'x--', '++x', 'x--', 'x++', 'x++', '--x', 'x--', '++x', 'x++', 'x++', '--x', '++x', '++x', '--x', '++x', 'x--', 'x++', '++x', 'x--', 'x--', 'x++', 'x++', '++x', '++x', '++x', '++x', '++x', '++x', 'x++', 'x++', '--x', '++x', '++x', '--x', '--x', 'x++', '++x', '++x', '--x', '--x', 'x--', 'x--', '--x', 'x++', '++x', '--x', 'x++', '--x', '--x', 'x++', '++x', 'x--', 'x--', 'x--', '--x', '++x', '--x', 'x--', 'x--', 'x++', '++x', '--x', 'x++', '--x', 'x++', 'x--', 'x--', 'x++', '--x', 'x++', '--x', '--x', 'x--', '++x', '++x', '++x', '++x', '++x', 'x++', '--x', '++x', 'x--', '++x', '++x', '--x', 'x--', 'x++', 'x--', 'x--', '++x', '++x', 'x++', 'x--', 'x--', '++x', '--x', '--x', '--x', 'x--', '--x', 'x++', 'x++', 'x--', 'x++', '--x', '--x', '++x', '++x', '--x', '--x', 'x++', '++x', '--x', 'x--', 'x++', '++x', '++x', 'x--', '--x', '--x', '++x', 'x++', '--x', 'x--', 'x--', 'x--', 'x--', '++x', 'x++', '++x', 'x--', '--x', '++x', 'x--', 'x++', 'x++', 'x++', '--x', 'x--', 'x--', 'x--', '++x', 'x--', '++x', 'x--', 'x--', '++x', 'x--', '++x', 'x++', 'x++', 'x++', 'x--', '--x', 'x++', 'x--', 'x++', 'x++', '--x', '--x', '++x', 'x--', 'x--', '++x', 'x++', '--x', 'x++', 'x++', 'x--', 'x++', '--x', 'x--', '--x', '--x', 'x++', 'x++', 'x--', '--x', '--x', 'x--', 'x--', '++x', 'x++', 'x++', 'x--', '++x', 'x++', 'x++', 'x--', '++x', 'x++', '--x', 'x--', 'x--', 'x--', '++x', '++x', '--x', 'x--', 'x++', 'x--', 'x++', 'x--', '--x', '++x', '++x', '++x', 'x++', '--x', 'x++', 'x--', 'x--', 'x++', '--x', 'x++', 'x++', '++x', '++x', '++x', 'x++', 'x++', 'x--', 'x--', 'x++', 'x++', 'x--', '++x', '--x', '--x', '--x', 'x++', '++x', '--x', 'x--', 'x--', 'x--', 'x--', 'x--', '++x', 'x--', '++x', '--x', 'x--', 'x--', 'x--', '--x', 'x++', '--x', 'x++', 'x--', '--x', 'x++', '++x', '--x', '--x', '--x', 'x--', '--x', '++x', '--x', 'x--', '++x', 'x++', 'x++', '--x', 'x--', 'x++', '++x', '++x', '++x', 'x--', 'x--', 'x++', '--x', 'x++', 'x--', '++x', '--x', 'x--', 'x--', 'x++', 'x--', '++x', '++x', 'x--', '++x', 'x--', 'x++', '--x', '--x', '++x', '--x', 'x--', 'x++', 'x++', '--x', 'x--', 'x--', 'x++', 'x++', '++x', 'x++', 'x++', 'x++', 'x++', '++x', 'x--', 'x++', 'x--', 'x--', 'x++', '--x', 'x++', '++x', 'x--', '++x', 'x--', 'x++', '++x', 'x++', 'x++', '++x', '++x', '--x', '--x', '--x', '--x', '--x', '++x', 'x++', 'x--', '++x', 'x--', 'x--', 'x--', '--x', 'x--', '--x', '++x', 'x--', 'x--', '--x', '--x', 'x++', 'x--', '--x', 'x--', '--x', '--x', 'x++', '++x', '++x', '--x', 'x--', '++x', 'x--', 'x--', 'x--', 'x--', 'x--', 'x--', '++x', 'x--', 'x--', 'x++', '--x', '--x', '++x', 'x--', 'x++', 'x++', '++x', 'x--', '++x', '--x', '++x', '--x', 'x--', '++x', 'x++', '--x', 'x--', '--x', '--x', '--x', 'x++', 'x++', 'x++', '++x', '--x', 'x--', '--x', 'x++', '++x', '++x', 'x++', '++x', 'x++', '--x', 'x--', 'x--', '++x', 'x--', '--x', 'x--', '++x', 'x++', 'x--', 'x--', 'x++', '++x', '++x', 'x--', '++x', '++x', 'x++', 'x++', 'x--', 'x--', 'x--', '--x', 'x++', 'x--', 'x++', '--x', 'x--', '--x', '--x', '--x', 'x--', 'x--', '++x', '--x', 'x--', 'x++', 'x--', '++x', 'x--', '--x', '++x', '--x', 'x--', 'x++', 'x++', '--x', '--x', 'x++'], target=28110):\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"\n    for op in ops:\n        if op in [\"++x\", \"x++\"]:\n            n += 1\n        else:\n            assert op in [\"--x\", \"x--\"]\n            n -= 1\n    return n == target",
    "sols": [
      "def sol(ops=['x--', 'x--', '++x', '--x', '--x', 'x--', '--x', '++x', 'x++', 'x++', 'x--', 'x++', '++x', '--x', '++x', '--x', 'x++', 'x++', '++x', 'x++', '--x', '--x', '--x', 'x++', '--x', '--x', 'x--', '--x', '--x', '--x', 'x--', 'x++', '++x', '--x', '--x', '++x', '--x', '--x', 'x++', 'x--', 'x--', 'x--', '++x', 'x--', '++x', 'x++', '--x', 'x--', 'x--', 'x--', '++x', 'x++', 'x++', 'x++', '--x', 'x--', 'x++', '++x', 'x--', '++x', '++x', 'x--', '++x', '++x', 'x--', '--x', '++x', '--x', '++x', 'x++', '++x', 'x++', 'x++', 'x++', 'x--', '++x', '--x', '--x', 'x++', '--x', '++x', '--x', '++x', 'x--', '--x', 'x--', '--x', '++x', 'x--', 'x--', '--x', 'x++', 'x++', '--x', '--x', 'x--', '++x', 'x++', '++x', 'x++', 'x--', 'x--', '--x', '++x', 'x++', '--x', 'x--', 'x--', '--x', '++x', 'x++', '++x', 'x++', 'x--', 'x--', 'x++', 'x++', 'x--', '++x', '--x', '++x', 'x++', 'x++', 'x--', 'x--', '++x', 'x++', 'x++', 'x--', '--x', 'x++', 'x++', 'x++', '--x', 'x--', '--x', 'x++', '++x', '--x', 'x--', 'x--', '++x', '++x', '--x', 'x++', '++x', 'x--', '--x', 'x--', '++x', 'x--', '--x', '--x', 'x--', '++x', '++x', 'x++', '--x', '++x', 'x--', '--x', 'x--', '++x', 'x--', 'x--', '++x', '++x', 'x++', 'x--', '++x', 'x++', 'x++', 'x++', 'x++', 'x--', 'x++', 'x--', '++x', 'x++', 'x--', 'x++', '++x', 'x--', '--x', '++x', 'x--', 'x--', 'x++', '++x', 'x--', 'x--', 'x--', '++x', '--x', '++x', 'x--', '--x', '++x', 'x--', '++x', 'x--', 'x--', '++x', '--x', '--x', '++x', '--x', 'x++', 'x--', '++x', 'x--', 'x++', 'x--', '++x', '--x', '--x', '--x', 'x++', '--x', 'x--', 'x++', 'x++', '--x', '--x', 'x++', 'x++', '--x', 'x--', '--x', 'x--', '++x', 'x++', '--x', 'x++', 'x++', 'x--', 'x++', 'x--', '++x', '--x', 'x++', 'x++', '--x', 'x--', '--x', 'x--', '++x', 'x--', 'x++', '--x', 'x--', 'x++', '++x', 'x--', 'x++', '--x', '++x', '++x', '++x', 'x--', 'x--', 'x++', 'x--', '++x', '++x', '++x', 'x--', 'x--', '++x', 'x--', 'x--', '--x', 'x--', 'x++', '--x', 'x++', 'x++', '--x', 'x--', 'x++', 'x--', 'x--', '++x', 'x--', '--x', 'x++', '++x', '++x', '--x', 'x--', 'x--', '++x', '--x', 'x--', 'x++', '--x', '++x', '--x', 'x++', 'x++', 'x++', 'x--', 'x++', '++x', 'x--', 'x--', '--x', '++x', 'x--', 'x++', '++x', 'x++', '++x', 'x--', '++x', '--x', '--x', 'x--', '++x', 'x--', 'x++', '--x', 'x++', '++x', 'x++', '++x', '++x', '--x', 'x++', '--x', 'x--', '++x', '++x', '--x', 'x--', '++x', '++x', 'x--', '--x', 'x--', '--x', 'x++', 'x--', '++x', 'x--', '++x', 'x--', '++x', '++x', 'x--', 'x--', '++x', 'x--', 'x++', 'x++', '--x', 'x--', '++x', 'x++', 'x++', '--x', '++x', '++x', '--x', '++x', 'x--', 'x++', '++x', 'x--', 'x--', 'x++', 'x++', '++x', '++x', '++x', '++x', '++x', '++x', 'x++', 'x++', '--x', '++x', '++x', '--x', '--x', 'x++', '++x', '++x', '--x', '--x', 'x--', 'x--', '--x', 'x++', '++x', '--x', 'x++', '--x', '--x', 'x++', '++x', 'x--', 'x--', 'x--', '--x', '++x', '--x', 'x--', 'x--', 'x++', '++x', '--x', 'x++', '--x', 'x++', 'x--', 'x--', 'x++', '--x', 'x++', '--x', '--x', 'x--', '++x', '++x', '++x', '++x', '++x', 'x++', '--x', '++x', 'x--', '++x', '++x', '--x', 'x--', 'x++', 'x--', 'x--', '++x', '++x', 'x++', 'x--', 'x--', '++x', '--x', '--x', '--x', 'x--', '--x', 'x++', 'x++', 'x--', 'x++', '--x', '--x', '++x', '++x', '--x', '--x', 'x++', '++x', '--x', 'x--', 'x++', '++x', '++x', 'x--', '--x', '--x', '++x', 'x++', '--x', 'x--', 'x--', 'x--', 'x--', '++x', 'x++', '++x', 'x--', '--x', '++x', 'x--', 'x++', 'x++', 'x++', '--x', 'x--', 'x--', 'x--', '++x', 'x--', '++x', 'x--', 'x--', '++x', 'x--', '++x', 'x++', 'x++', 'x++', 'x--', '--x', 'x++', 'x--', 'x++', 'x++', '--x', '--x', '++x', 'x--', 'x--', '++x', 'x++', '--x', 'x++', 'x++', 'x--', 'x++', '--x', 'x--', '--x', '--x', 'x++', 'x++', 'x--', '--x', '--x', 'x--', 'x--', '++x', 'x++', 'x++', 'x--', '++x', 'x++', 'x++', 'x--', '++x', 'x++', '--x', 'x--', 'x--', 'x--', '++x', '++x', '--x', 'x--', 'x++', 'x--', 'x++', 'x--', '--x', '++x', '++x', '++x', 'x++', '--x', 'x++', 'x--', 'x--', 'x++', '--x', 'x++', 'x++', '++x', '++x', '++x', 'x++', 'x++', 'x--', 'x--', 'x++', 'x++', 'x--', '++x', '--x', '--x', '--x', 'x++', '++x', '--x', 'x--', 'x--', 'x--', 'x--', 'x--', '++x', 'x--', '++x', '--x', 'x--', 'x--', 'x--', '--x', 'x++', '--x', 'x++', 'x--', '--x', 'x++', '++x', '--x', '--x', '--x', 'x--', '--x', '++x', '--x', 'x--', '++x', 'x++', 'x++', '--x', 'x--', 'x++', '++x', '++x', '++x', 'x--', 'x--', 'x++', '--x', 'x++', 'x--', '++x', '--x', 'x--', 'x--', 'x++', 'x--', '++x', '++x', 'x--', '++x', 'x--', 'x++', '--x', '--x', '++x', '--x', 'x--', 'x++', 'x++', '--x', 'x--', 'x--', 'x++', 'x++', '++x', 'x++', 'x++', 'x++', 'x++', '++x', 'x--', 'x++', 'x--', 'x--', 'x++', '--x', 'x++', '++x', 'x--', '++x', 'x--', 'x++', '++x', 'x++', 'x++', '++x', '++x', '--x', '--x', '--x', '--x', '--x', '++x', 'x++', 'x--', '++x', 'x--', 'x--', 'x--', '--x', 'x--', '--x', '++x', 'x--', 'x--', '--x', '--x', 'x++', 'x--', '--x', 'x--', '--x', '--x', 'x++', '++x', '++x', '--x', 'x--', '++x', 'x--', 'x--', 'x--', 'x--', 'x--', 'x--', '++x', 'x--', 'x--', 'x++', '--x', '--x', '++x', 'x--', 'x++', 'x++', '++x', 'x--', '++x', '--x', '++x', '--x', 'x--', '++x', 'x++', '--x', 'x--', '--x', '--x', '--x', 'x++', 'x++', 'x++', '++x', '--x', 'x--', '--x', 'x++', '++x', '++x', 'x++', '++x', 'x++', '--x', 'x--', 'x--', '++x', 'x--', '--x', 'x--', '++x', 'x++', 'x--', 'x--', 'x++', '++x', '++x', 'x--', '++x', '++x', 'x++', 'x++', 'x--', 'x--', 'x--', '--x', 'x++', 'x--', 'x++', '--x', 'x--', '--x', '--x', '--x', 'x--', 'x--', '++x', '--x', 'x--', 'x++', 'x--', '++x', 'x--', '--x', '++x', '--x', 'x--', 'x++', 'x++', '--x', '--x', 'x++'], target=28110):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 282 A](https://codeforces.com/problemset/problem/282/A)\n\nThis straightforward problem is a little harder than the Codeforces one.",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "IncDec_3",
    "sat": "def sat(n: int, ops=['--x', 'x--', 'x--', 'x--', 'x--', 'x--', 'x--', '++x', '++x', 'x--', 'x--', '--x', '--x', '--x', 'x--', '--x', '--x', '++x', '++x', '++x', 'x++', '--x', 'x--', '++x', 'x--', 'x--', 'x++', 'x--', 'x++', 'x++', 'x--', 'x--', 'x++', '--x', '++x', 'x++', 'x--', '--x', 'x--', 'x++', 'x--', 'x++', 'x++', '--x', '++x', 'x++', '--x', '--x', '--x', 'x++', 'x--', 'x++', '++x', 'x++', '--x', '--x', '++x', '++x', 'x++', 'x++', 'x--', '--x', 'x++', 'x++', 'x--', 'x++', '--x', 'x--', 'x--', '++x', '++x', '++x', 'x++', '++x', '--x', '--x', 'x++', '++x', '++x', 'x++', '++x', '--x', '++x', '--x', 'x--', '++x', '++x', '++x', '++x', 'x--', 'x--', '++x', '++x', 'x--', 'x--', '++x', 'x++', 'x--', 'x--', 'x++', '++x', 'x++', 'x--', '++x', 'x--', 'x--', 'x--', '++x', 'x--', '++x', 'x++', 'x--', 'x++', '++x', 'x++', '--x', '--x', '--x', 'x++', 'x++', '--x', '--x', '++x', '--x', 'x--', 'x--', '--x', 'x--', '++x', 'x--', '--x', '--x', '++x', '--x', 'x++', 'x--', 'x++', '--x', '--x', '++x', '--x', 'x--', '--x', 'x++', '--x', 'x--', '--x', '++x', 'x--', '++x', 'x++', 'x--', '--x', '++x', '--x', 'x++', '++x', '++x', 'x++', '++x', 'x++', 'x--', 'x--', 'x--', '++x', '--x', '--x', '--x', '++x', 'x--', 'x--', '++x', 'x++', '++x', 'x--', '--x', '--x', '++x', 'x--', 'x--', '--x', 'x--', 'x--', 'x++', '--x', 'x++', '++x', '--x', 'x--', '--x', '--x', 'x--', 'x--', '--x', '++x', 'x--', '++x', '++x', '++x', 'x--', 'x--', '--x', '++x', 'x++', 'x--', 'x--', 'x++', '--x', 'x--', 'x++', 'x--', 'x--', 'x++', '++x', 'x++', '++x', 'x++', '--x', 'x++', 'x--', '--x', 'x++', 'x++', '++x', '--x', '++x', 'x++', 'x--', 'x++', 'x--', 'x--', 'x--', 'x++', 'x++', '--x', '--x', 'x--', 'x++', '++x', 'x--', '--x', 'x++', 'x++', 'x++', '++x', '--x', 'x++', 'x++', '++x', 'x--', 'x++', 'x++', 'x++', '++x', '++x', '--x', 'x++', '--x', '--x', 'x--', '--x', 'x++', 'x--', 'x++', '--x', 'x--', 'x++', 'x++', 'x--', '--x', '--x', 'x++', '--x', 'x--', 'x++', 'x++', '++x', 'x--', '++x', '++x', 'x++', 'x--', '--x', '++x', '--x', 'x--', '--x', '++x', '--x', '--x', '++x', 'x++', '--x', 'x++', '--x', 'x--', '++x', '--x', 'x--', 'x--', 'x++', '++x', 'x++', '++x', 'x--', '--x', 'x++', '--x', '++x', 'x++', 'x++', 'x++', '++x', '++x', 'x++', '++x', '++x', '++x', 'x--', '++x', 'x--', 'x--', 'x++', '--x', '++x', 'x++', 'x++', 'x--', '++x', '++x', 'x--', 'x--', '--x', 'x--', '--x', 'x--', 'x--', '++x', '++x', 'x--', '--x', 'x++', '--x', '--x', 'x++', 'x++', 'x++', 'x++', '++x', '--x', 'x++', 'x++', '--x', '++x', 'x++', '--x', '--x', 'x--', '--x', 'x++'], target=82823):\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"\n    for op in ops:\n        if op in [\"++x\", \"x++\"]:\n            n += 1\n        else:\n            assert op in [\"--x\", \"x--\"]\n            n -= 1\n    return n == target",
    "sols": [
      "def sol(ops=['--x', 'x--', 'x--', 'x--', 'x--', 'x--', 'x--', '++x', '++x', 'x--', 'x--', '--x', '--x', '--x', 'x--', '--x', '--x', '++x', '++x', '++x', 'x++', '--x', 'x--', '++x', 'x--', 'x--', 'x++', 'x--', 'x++', 'x++', 'x--', 'x--', 'x++', '--x', '++x', 'x++', 'x--', '--x', 'x--', 'x++', 'x--', 'x++', 'x++', '--x', '++x', 'x++', '--x', '--x', '--x', 'x++', 'x--', 'x++', '++x', 'x++', '--x', '--x', '++x', '++x', 'x++', 'x++', 'x--', '--x', 'x++', 'x++', 'x--', 'x++', '--x', 'x--', 'x--', '++x', '++x', '++x', 'x++', '++x', '--x', '--x', 'x++', '++x', '++x', 'x++', '++x', '--x', '++x', '--x', 'x--', '++x', '++x', '++x', '++x', 'x--', 'x--', '++x', '++x', 'x--', 'x--', '++x', 'x++', 'x--', 'x--', 'x++', '++x', 'x++', 'x--', '++x', 'x--', 'x--', 'x--', '++x', 'x--', '++x', 'x++', 'x--', 'x++', '++x', 'x++', '--x', '--x', '--x', 'x++', 'x++', '--x', '--x', '++x', '--x', 'x--', 'x--', '--x', 'x--', '++x', 'x--', '--x', '--x', '++x', '--x', 'x++', 'x--', 'x++', '--x', '--x', '++x', '--x', 'x--', '--x', 'x++', '--x', 'x--', '--x', '++x', 'x--', '++x', 'x++', 'x--', '--x', '++x', '--x', 'x++', '++x', '++x', 'x++', '++x', 'x++', 'x--', 'x--', 'x--', '++x', '--x', '--x', '--x', '++x', 'x--', 'x--', '++x', 'x++', '++x', 'x--', '--x', '--x', '++x', 'x--', 'x--', '--x', 'x--', 'x--', 'x++', '--x', 'x++', '++x', '--x', 'x--', '--x', '--x', 'x--', 'x--', '--x', '++x', 'x--', '++x', '++x', '++x', 'x--', 'x--', '--x', '++x', 'x++', 'x--', 'x--', 'x++', '--x', 'x--', 'x++', 'x--', 'x--', 'x++', '++x', 'x++', '++x', 'x++', '--x', 'x++', 'x--', '--x', 'x++', 'x++', '++x', '--x', '++x', 'x++', 'x--', 'x++', 'x--', 'x--', 'x--', 'x++', 'x++', '--x', '--x', 'x--', 'x++', '++x', 'x--', '--x', 'x++', 'x++', 'x++', '++x', '--x', 'x++', 'x++', '++x', 'x--', 'x++', 'x++', 'x++', '++x', '++x', '--x', 'x++', '--x', '--x', 'x--', '--x', 'x++', 'x--', 'x++', '--x', 'x--', 'x++', 'x++', 'x--', '--x', '--x', 'x++', '--x', 'x--', 'x++', 'x++', '++x', 'x--', '++x', '++x', 'x++', 'x--', '--x', '++x', '--x', 'x--', '--x', '++x', '--x', '--x', '++x', 'x++', '--x', 'x++', '--x', 'x--', '++x', '--x', 'x--', 'x--', 'x++', '++x', 'x++', '++x', 'x--', '--x', 'x++', '--x', '++x', 'x++', 'x++', 'x++', '++x', '++x', 'x++', '++x', '++x', '++x', 'x--', '++x', 'x--', 'x--', 'x++', '--x', '++x', 'x++', 'x++', 'x--', '++x', '++x', 'x--', 'x--', '--x', 'x--', '--x', 'x--', 'x--', '++x', '++x', 'x--', '--x', 'x++', '--x', '--x', 'x++', 'x++', 'x++', 'x++', '++x', '--x', 'x++', 'x++', '--x', '++x', 'x++', '--x', '--x', 'x--', '--x', 'x++'], target=82823):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 282 A](https://codeforces.com/problemset/problem/282/A)\n\nThis straightforward problem is a little harder than the Codeforces one.",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "IncDec_4",
    "sat": "def sat(n: int, ops=['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target=61813):\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"\n    for op in ops:\n        if op in [\"++x\", \"x++\"]:\n            n += 1\n        else:\n            assert op in [\"--x\", \"x--\"]\n            n -= 1\n    return n == target",
    "sols": [
      "def sol(ops=['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target=61813):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 282 A](https://codeforces.com/problemset/problem/282/A)\n\nThis straightforward problem is a little harder than the Codeforces one.",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "IncDec_5",
    "sat": "def sat(n: int, ops: List[str]=[], target=28531):\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"\n    for op in ops:\n        if op in [\"++x\", \"x++\"]:\n            n += 1\n        else:\n            assert op in [\"--x\", \"x--\"]\n            n -= 1\n    return n == target",
    "sols": [
      "def sol(ops=[], target=28531):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 282 A](https://codeforces.com/problemset/problem/282/A)\n\nThis straightforward problem is a little harder than the Codeforces one.",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "IncDec_6",
    "sat": "def sat(n: int, ops=['x++', 'x--', 'x++', '++x'], target=30204):\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"\n    for op in ops:\n        if op in [\"++x\", \"x++\"]:\n            n += 1\n        else:\n            assert op in [\"--x\", \"x--\"]\n            n -= 1\n    return n == target",
    "sols": [
      "def sol(ops=['x++', 'x--', 'x++', '++x'], target=30204):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 282 A](https://codeforces.com/problemset/problem/282/A)\n\nThis straightforward problem is a little harder than the Codeforces one.",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "IncDec_7",
    "sat": "def sat(n: int, ops=['x--', '--x', '--x', 'x--', 'x++', 'x--', '++x', '++x', '++x', '++x', '--x', '++x', 'x++', 'x--'], target=8634):\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"\n    for op in ops:\n        if op in [\"++x\", \"x++\"]:\n            n += 1\n        else:\n            assert op in [\"--x\", \"x--\"]\n            n -= 1\n    return n == target",
    "sols": [
      "def sol(ops=['x--', '--x', '--x', 'x--', 'x++', 'x--', '++x', '++x', '++x', '++x', '--x', '++x', 'x++', 'x--'], target=8634):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 282 A](https://codeforces.com/problemset/problem/282/A)\n\nThis straightforward problem is a little harder than the Codeforces one.",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "IncDec_8",
    "sat": "def sat(n: int, ops=['++x', 'x++', '++x', 'x--', 'x++', 'x++', 'x++', '++x', 'x++', '--x', 'x--', '++x', '++x', '++x', 'x++', 'x--', 'x++', '++x', '--x', '++x', '++x', '--x', 'x++', 'x--', '--x', '++x', '++x', '++x', 'x++', 'x--', '--x', 'x++', 'x++', 'x++', '--x', 'x++', '--x', 'x--'], target=44587):\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"\n    for op in ops:\n        if op in [\"++x\", \"x++\"]:\n            n += 1\n        else:\n            assert op in [\"--x\", \"x--\"]\n            n -= 1\n    return n == target",
    "sols": [
      "def sol(ops=['++x', 'x++', '++x', 'x--', 'x++', 'x++', 'x++', '++x', 'x++', '--x', 'x--', '++x', '++x', '++x', 'x++', 'x--', 'x++', '++x', '--x', '++x', '++x', '--x', 'x++', 'x--', '--x', '++x', '++x', '++x', 'x++', 'x--', '--x', 'x++', 'x++', 'x++', '--x', 'x++', '--x', 'x--'], target=44587):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 282 A](https://codeforces.com/problemset/problem/282/A)\n\nThis straightforward problem is a little harder than the Codeforces one.",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "IncDec_9",
    "sat": "def sat(n: int, ops=['++x', 'x--', '++x', 'x--', '--x', '--x', '++x', 'x++', '++x', 'x++', 'x--', 'x--', '++x', '++x', '++x', '++x', '--x', 'x--', '--x', 'x++', '++x', 'x++', 'x++', 'x++', '--x', 'x--', '++x', '--x', '--x', 'x--', '--x', 'x++', '++x', '--x', 'x--', '++x', '--x', '++x', '--x', 'x++', '--x', 'x++', '++x', 'x++', '--x', '++x', 'x--', 'x--', 'x--', '--x', '--x', '--x', 'x--', 'x--', '--x', '--x', '--x', 'x++', 'x++', 'x--', 'x--', '++x', 'x--', '++x', '--x', 'x--', 'x++', 'x++', 'x++', '++x', 'x--', '--x', '++x', '++x', '++x', 'x++', 'x++', 'x++', 'x++', '++x', '--x', '--x', 'x--', 'x--', 'x++', '++x', 'x--', 'x++', 'x--', '++x', 'x++', '--x', '++x', '--x', '--x', 'x++', '++x', 'x--', '++x', 'x++', '++x', 'x--', '--x', 'x--', 'x--', 'x--', '--x', '++x', 'x--', 'x--', '++x', '++x', 'x--', '--x', '++x', '++x', '++x', '--x', '--x', '++x', '++x', '--x', '--x', '++x', 'x--', 'x++', '--x', '--x', 'x++', 'x--', 'x++', 'x--', '--x', '++x', 'x++', 'x--', 'x--', 'x++', 'x++', '--x', '--x', 'x++', 'x--', '++x', 'x++', 'x++', 'x--', 'x--', '++x', '++x', 'x--', '--x', '--x', 'x--', '++x', 'x++', '--x', 'x++', 'x--', '--x', '--x', 'x++', 'x--', '++x', '++x', 'x--', '--x', '++x', '--x', 'x++', '++x', 'x--', '++x', 'x--', 'x--', 'x++', '--x', '++x', 'x--', 'x++', 'x++', '--x', '++x', '++x', '++x', 'x++', '++x', '++x', '--x', '++x', 'x--', 'x--', '++x', 'x++', 'x--', 'x--', 'x++', 'x--', '++x', '++x', 'x--', 'x++', 'x--', 'x++', '++x', '--x', 'x++', 'x--', 'x++', 'x++', 'x++', '--x', '++x', 'x++', 'x++', '++x', '--x', 'x--', '++x', '++x', '--x', 'x--', '--x', 'x++', 'x++', 'x--', 'x--', '--x', 'x++', '++x', '--x', '--x', '++x', 'x--', '++x', '++x', 'x--', 'x++', '++x', 'x--', 'x++', 'x++', 'x++', '--x', '++x', 'x++', 'x++', '--x', 'x++', '--x', '--x', '--x', 'x--', '++x', 'x++', 'x--', '++x', '--x', 'x--', '--x', 'x++', 'x++', 'x++', 'x++', 'x--', 'x++', 'x++', 'x--', '++x', 'x--', '++x', '--x', '++x', '--x', '++x', 'x--', '--x', 'x--', '--x', '++x', 'x++', '--x', 'x++', 'x++', '++x', 'x--', 'x++', '--x', 'x++', '--x', '++x', 'x--', 'x--', '++x', 'x--', 'x--', '--x', '--x', '++x', '++x', 'x--', 'x--', '++x', 'x--', '--x', '--x', '++x', '--x', 'x++', '++x', 'x--', '++x', '--x', 'x--', '++x', 'x++', '--x', '--x', 'x++', '--x', '--x', '++x', '++x', '--x', 'x++', '++x', '--x', 'x++', '--x', 'x++', '++x', '--x', '++x', '++x', 'x--', '--x', '--x', 'x++', '++x', '++x', '--x', 'x++', 'x++', 'x++', 'x++', '--x', '--x', 'x++', '--x', 'x++', 'x++', 'x--', '--x', '--x', '--x', 'x--', 'x--', 'x--', '--x', '++x', 'x++', 'x--', '++x', '++x', '++x', 'x--', '++x', 'x++', 'x++', '--x', 'x--', 'x--', '++x', 'x++', 'x++', '--x', 'x--', '++x', '--x', '--x', '--x', '--x', 'x--', '++x', 'x--', 'x++', 'x++', '--x', 'x--', 'x++', 'x--', 'x++', 'x--', '--x', '--x', '--x', '++x', 'x--', '--x', 'x--', '--x', '++x', 'x--', 'x--', 'x--', 'x--', 'x++', '--x', 'x--', '++x', 'x--', '++x', '++x', '++x', '--x', 'x++', '--x', 'x++', '--x', '--x', 'x--', 'x++', 'x--', '--x', 'x++', 'x--', 'x--', '++x', '++x', '++x', 'x--', '++x', '--x', '++x', '--x', '--x', '++x', 'x++', '++x', '++x', '++x', 'x--', 'x++', '--x', 'x++', 'x++', '++x', '--x', '++x', '++x', '++x', '--x', 'x--', '--x', '--x', '--x', 'x--', 'x++', 'x++', '--x', 'x--', '++x', 'x--', 'x++', '++x', 'x++', '--x', '--x', 'x--', 'x--', '++x', 'x--', '--x', 'x++', '++x', '++x', '++x', 'x--', 'x--', 'x++', '--x', 'x--', '--x', '--x', '++x', 'x--', '--x', '--x', 'x++', 'x++', '++x', '--x', 'x--', '++x', 'x++', '--x', 'x--', 'x--', '--x', 'x++', 'x--', '++x', '++x', '++x', '--x', 'x++', 'x++', 'x++', 'x++', '++x', '--x', 'x++', '--x', '--x', '++x', 'x--', 'x++', '++x', '++x', '--x', '--x', 'x--', 'x--', 'x++', '--x', 'x++', 'x--', 'x++', '--x', 'x++', '--x', 'x++', 'x--', 'x++', 'x--', '++x', '--x', '--x', 'x--', '++x', 'x--', 'x++', '++x', 'x--', '--x', 'x++', '--x', 'x--', '--x', '--x', 'x--', '--x', '++x', 'x--', 'x++', 'x++', 'x++', 'x++', '--x', '++x', 'x++', '--x', 'x--', 'x--', '--x', 'x++', 'x--', 'x++', 'x--', '--x', '--x', 'x--', '++x', 'x++', 'x--', '--x', '--x', '--x', '++x', 'x--', 'x--', '++x', 'x--', '--x', 'x++', 'x++', 'x--', 'x--', 'x++', '++x', '++x', 'x--', '++x', '--x', 'x--', '++x', '++x', '--x', 'x--', '++x', '++x', 'x++', 'x++', '--x', '++x', '--x', 'x++', '--x', '--x', '++x', '++x', 'x--', '++x', 'x--', 'x++', 'x--', '++x', '--x', '++x', '++x', '--x', 'x--', 'x++', 'x++', '--x', 'x--', '--x', 'x++', 'x++', 'x++', 'x++', '--x', '--x', 'x--', 'x++', '--x', '--x', 'x--', 'x++', '--x', '--x', '++x', 'x--', '--x', '--x', 'x--', 'x--', '++x', '--x', '++x', '--x', 'x--', 'x--', 'x--', 'x--', '--x', 'x++', 'x++', '++x', 'x--', '++x', '++x', 'x--', '--x', '++x', 'x--', 'x--', 'x++', '++x', '++x', 'x--', '--x', '++x', '--x', '--x', '--x', '++x', '--x'], target=35321):\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"\n    for op in ops:\n        if op in [\"++x\", \"x++\"]:\n            n += 1\n        else:\n            assert op in [\"--x\", \"x--\"]\n            n -= 1\n    return n == target",
    "sols": [
      "def sol(ops=['++x', 'x--', '++x', 'x--', '--x', '--x', '++x', 'x++', '++x', 'x++', 'x--', 'x--', '++x', '++x', '++x', '++x', '--x', 'x--', '--x', 'x++', '++x', 'x++', 'x++', 'x++', '--x', 'x--', '++x', '--x', '--x', 'x--', '--x', 'x++', '++x', '--x', 'x--', '++x', '--x', '++x', '--x', 'x++', '--x', 'x++', '++x', 'x++', '--x', '++x', 'x--', 'x--', 'x--', '--x', '--x', '--x', 'x--', 'x--', '--x', '--x', '--x', 'x++', 'x++', 'x--', 'x--', '++x', 'x--', '++x', '--x', 'x--', 'x++', 'x++', 'x++', '++x', 'x--', '--x', '++x', '++x', '++x', 'x++', 'x++', 'x++', 'x++', '++x', '--x', '--x', 'x--', 'x--', 'x++', '++x', 'x--', 'x++', 'x--', '++x', 'x++', '--x', '++x', '--x', '--x', 'x++', '++x', 'x--', '++x', 'x++', '++x', 'x--', '--x', 'x--', 'x--', 'x--', '--x', '++x', 'x--', 'x--', '++x', '++x', 'x--', '--x', '++x', '++x', '++x', '--x', '--x', '++x', '++x', '--x', '--x', '++x', 'x--', 'x++', '--x', '--x', 'x++', 'x--', 'x++', 'x--', '--x', '++x', 'x++', 'x--', 'x--', 'x++', 'x++', '--x', '--x', 'x++', 'x--', '++x', 'x++', 'x++', 'x--', 'x--', '++x', '++x', 'x--', '--x', '--x', 'x--', '++x', 'x++', '--x', 'x++', 'x--', '--x', '--x', 'x++', 'x--', '++x', '++x', 'x--', '--x', '++x', '--x', 'x++', '++x', 'x--', '++x', 'x--', 'x--', 'x++', '--x', '++x', 'x--', 'x++', 'x++', '--x', '++x', '++x', '++x', 'x++', '++x', '++x', '--x', '++x', 'x--', 'x--', '++x', 'x++', 'x--', 'x--', 'x++', 'x--', '++x', '++x', 'x--', 'x++', 'x--', 'x++', '++x', '--x', 'x++', 'x--', 'x++', 'x++', 'x++', '--x', '++x', 'x++', 'x++', '++x', '--x', 'x--', '++x', '++x', '--x', 'x--', '--x', 'x++', 'x++', 'x--', 'x--', '--x', 'x++', '++x', '--x', '--x', '++x', 'x--', '++x', '++x', 'x--', 'x++', '++x', 'x--', 'x++', 'x++', 'x++', '--x', '++x', 'x++', 'x++', '--x', 'x++', '--x', '--x', '--x', 'x--', '++x', 'x++', 'x--', '++x', '--x', 'x--', '--x', 'x++', 'x++', 'x++', 'x++', 'x--', 'x++', 'x++', 'x--', '++x', 'x--', '++x', '--x', '++x', '--x', '++x', 'x--', '--x', 'x--', '--x', '++x', 'x++', '--x', 'x++', 'x++', '++x', 'x--', 'x++', '--x', 'x++', '--x', '++x', 'x--', 'x--', '++x', 'x--', 'x--', '--x', '--x', '++x', '++x', 'x--', 'x--', '++x', 'x--', '--x', '--x', '++x', '--x', 'x++', '++x', 'x--', '++x', '--x', 'x--', '++x', 'x++', '--x', '--x', 'x++', '--x', '--x', '++x', '++x', '--x', 'x++', '++x', '--x', 'x++', '--x', 'x++', '++x', '--x', '++x', '++x', 'x--', '--x', '--x', 'x++', '++x', '++x', '--x', 'x++', 'x++', 'x++', 'x++', '--x', '--x', 'x++', '--x', 'x++', 'x++', 'x--', '--x', '--x', '--x', 'x--', 'x--', 'x--', '--x', '++x', 'x++', 'x--', '++x', '++x', '++x', 'x--', '++x', 'x++', 'x++', '--x', 'x--', 'x--', '++x', 'x++', 'x++', '--x', 'x--', '++x', '--x', '--x', '--x', '--x', 'x--', '++x', 'x--', 'x++', 'x++', '--x', 'x--', 'x++', 'x--', 'x++', 'x--', '--x', '--x', '--x', '++x', 'x--', '--x', 'x--', '--x', '++x', 'x--', 'x--', 'x--', 'x--', 'x++', '--x', 'x--', '++x', 'x--', '++x', '++x', '++x', '--x', 'x++', '--x', 'x++', '--x', '--x', 'x--', 'x++', 'x--', '--x', 'x++', 'x--', 'x--', '++x', '++x', '++x', 'x--', '++x', '--x', '++x', '--x', '--x', '++x', 'x++', '++x', '++x', '++x', 'x--', 'x++', '--x', 'x++', 'x++', '++x', '--x', '++x', '++x', '++x', '--x', 'x--', '--x', '--x', '--x', 'x--', 'x++', 'x++', '--x', 'x--', '++x', 'x--', 'x++', '++x', 'x++', '--x', '--x', 'x--', 'x--', '++x', 'x--', '--x', 'x++', '++x', '++x', '++x', 'x--', 'x--', 'x++', '--x', 'x--', '--x', '--x', '++x', 'x--', '--x', '--x', 'x++', 'x++', '++x', '--x', 'x--', '++x', 'x++', '--x', 'x--', 'x--', '--x', 'x++', 'x--', '++x', '++x', '++x', '--x', 'x++', 'x++', 'x++', 'x++', '++x', '--x', 'x++', '--x', '--x', '++x', 'x--', 'x++', '++x', '++x', '--x', '--x', 'x--', 'x--', 'x++', '--x', 'x++', 'x--', 'x++', '--x', 'x++', '--x', 'x++', 'x--', 'x++', 'x--', '++x', '--x', '--x', 'x--', '++x', 'x--', 'x++', '++x', 'x--', '--x', 'x++', '--x', 'x--', '--x', '--x', 'x--', '--x', '++x', 'x--', 'x++', 'x++', 'x++', 'x++', '--x', '++x', 'x++', '--x', 'x--', 'x--', '--x', 'x++', 'x--', 'x++', 'x--', '--x', '--x', 'x--', '++x', 'x++', 'x--', '--x', '--x', '--x', '++x', 'x--', 'x--', '++x', 'x--', '--x', 'x++', 'x++', 'x--', 'x--', 'x++', '++x', '++x', 'x--', '++x', '--x', 'x--', '++x', '++x', '--x', 'x--', '++x', '++x', 'x++', 'x++', '--x', '++x', '--x', 'x++', '--x', '--x', '++x', '++x', 'x--', '++x', 'x--', 'x++', 'x--', '++x', '--x', '++x', '++x', '--x', 'x--', 'x++', 'x++', '--x', 'x--', '--x', 'x++', 'x++', 'x++', 'x++', '--x', '--x', 'x--', 'x++', '--x', '--x', 'x--', 'x++', '--x', '--x', '++x', 'x--', '--x', '--x', 'x--', 'x--', '++x', '--x', '++x', '--x', 'x--', 'x--', 'x--', 'x--', '--x', 'x++', 'x++', '++x', 'x--', '++x', '++x', 'x--', '--x', '++x', 'x--', 'x--', 'x++', '++x', '++x', 'x--', '--x', '++x', '--x', '--x', '--x', '++x', '--x'], target=35321):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 282 A](https://codeforces.com/problemset/problem/282/A)\n\nThis straightforward problem is a little harder than the Codeforces one.",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CompareInAnyCase_0",
    "sat": "def sat(n: int, s=\"aaAab\", t=\"aAaaB\"):\n    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False",
    "sols": [
      "def sol(s=\"aaAab\", t=\"aAaaB\"):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 112 A](https://codeforces.com/problemset/problem/112/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CompareInAnyCase_1",
    "sat": "def sat(n: int, s=\"JyNuTexTETiGAVIC\", t=\"JynUTEXTetigAViC\"):\n    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False",
    "sols": [
      "def sol(s=\"JyNuTexTETiGAVIC\", t=\"JynUTEXTetigAViC\"):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 112 A](https://codeforces.com/problemset/problem/112/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CompareInAnyCase_2",
    "sat": "def sat(n: int, s=\"tExTYtOHahekomArof\", t=\"TExTYTohaHeKomryGUSeteXTUrYgir\"):\n    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False",
    "sols": [
      "def sol(s=\"tExTYtOHahekomArof\", t=\"TExTYTohaHeKomryGUSeteXTUrYgir\"):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 112 A](https://codeforces.com/problemset/problem/112/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CompareInAnyCase_3",
    "sat": "def sat(n: int, s=\"RObAQuYK\", t=\"robaQUYKkuLY\"):\n    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False",
    "sols": [
      "def sol(s=\"RObAQuYK\", t=\"robaQUYKkuLY\"):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 112 A](https://codeforces.com/problemset/problem/112/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CompareInAnyCase_4",
    "sat": "def sat(n: int, s=\"DUTeX\", t=\"dutdE\"):\n    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False",
    "sols": [
      "def sol(s=\"DUTeX\", t=\"dutdE\"):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 112 A](https://codeforces.com/problemset/problem/112/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CompareInAnyCase_5",
    "sat": "def sat(n: int, s=\"nETunysYMUtex\", t=\"neTuNYSyMutex\"):\n    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False",
    "sols": [
      "def sol(s=\"nETunysYMUtex\", t=\"neTuNYSyMutex\"):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 112 A](https://codeforces.com/problemset/problem/112/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CompareInAnyCase_6",
    "sat": "def sat(n: int, s=\"MUjOcOtEXtI\", t=\"mUJOCotexTIzOlycHotYmAhITE\"):\n    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False",
    "sols": [
      "def sol(s=\"MUjOcOtEXtI\", t=\"mUJOCotexTIzOlycHotYmAhITE\"):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 112 A](https://codeforces.com/problemset/problem/112/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CompareInAnyCase_7",
    "sat": "def sat(n: int, s=\"texTIh\", t=\"teXTIh\"):\n    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False",
    "sols": [
      "def sol(s=\"texTIh\", t=\"teXTIh\"):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 112 A](https://codeforces.com/problemset/problem/112/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CompareInAnyCase_8",
    "sat": "def sat(n: int, s=\"BoKiC\", t=\"BoHapoXekuCHanoR\"):\n    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False",
    "sols": [
      "def sol(s=\"BoKiC\", t=\"BoHapoXekuCHanoR\"):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 112 A](https://codeforces.com/problemset/problem/112/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CompareInAnyCase_9",
    "sat": "def sat(n: int, s=\"gITOVYsyticHASeF\", t=\"gIxe\"):\n    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False",
    "sols": [
      "def sol(s=\"gITOVYsyticHASeF\", t=\"gIxe\"):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 112 A](https://codeforces.com/problemset/problem/112/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SlidingOne_0",
    "sat": "def sat(s: str, matrix=[[0, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=3):\n    \"\"\"\n    We are given a 5x5 matrix with a single 1 like:\n\n    0 0 0 0 0\n    0 0 0 0 1\n    0 0 0 0 0\n    0 0 0 0 0\n    0 0 0 0 0\n\n    Find a (minimal) sequence of row and column swaps to move the 1 to the center. A move is a string\n    in \"0\"-\"4\" indicating a row swap and \"a\"-\"e\" indicating a column swap\n    \"\"\"\n    matrix = [m[:] for m in matrix]  # copy\n    for c in s:\n        if c in \"01234\":\n            i = \"01234\".index(c)\n            matrix[i], matrix[i + 1] = matrix[i + 1], matrix[i]\n        if c in \"abcde\":\n            j = \"abcde\".index(c)\n            for row in matrix:\n                row[j], row[j + 1] = row[j + 1], row[j]\n\n    return len(s) <= max_moves and matrix[2][2] == 1",
    "sols": [
      "def sol(matrix=[[0, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=3):\n    i = [sum(row) for row in matrix].index(1)\n    j = matrix[i].index(1)\n    ans = \"\"\n    while i > 2:\n        ans += str(i - 1)\n        i -= 1\n    while i < 2:\n        ans += str(i)\n        i += 1\n    while j > 2:\n        ans += \"abcde\"[j - 1]\n        j -= 1\n    while j < 2:\n        ans += \"abcde\"[j]\n        j += 1\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 263 A](https://codeforces.com/problemset/problem/263/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SlidingOne_1",
    "sat": "def sat(s: str, matrix=[[1, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=4):\n    \"\"\"\n    We are given a 5x5 matrix with a single 1 like:\n\n    0 0 0 0 0\n    0 0 0 0 1\n    0 0 0 0 0\n    0 0 0 0 0\n    0 0 0 0 0\n\n    Find a (minimal) sequence of row and column swaps to move the 1 to the center. A move is a string\n    in \"0\"-\"4\" indicating a row swap and \"a\"-\"e\" indicating a column swap\n    \"\"\"\n    matrix = [m[:] for m in matrix]  # copy\n    for c in s:\n        if c in \"01234\":\n            i = \"01234\".index(c)\n            matrix[i], matrix[i + 1] = matrix[i + 1], matrix[i]\n        if c in \"abcde\":\n            j = \"abcde\".index(c)\n            for row in matrix:\n                row[j], row[j + 1] = row[j + 1], row[j]\n\n    return len(s) <= max_moves and matrix[2][2] == 1",
    "sols": [
      "def sol(matrix=[[1, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=4):\n    i = [sum(row) for row in matrix].index(1)\n    j = matrix[i].index(1)\n    ans = \"\"\n    while i > 2:\n        ans += str(i - 1)\n        i -= 1\n    while i < 2:\n        ans += str(i)\n        i += 1\n    while j > 2:\n        ans += \"abcde\"[j - 1]\n        j -= 1\n    while j < 2:\n        ans += \"abcde\"[j]\n        j += 1\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 263 A](https://codeforces.com/problemset/problem/263/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SlidingOne_2",
    "sat": "def sat(s: str, matrix=[[0, 1, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=3):\n    \"\"\"\n    We are given a 5x5 matrix with a single 1 like:\n\n    0 0 0 0 0\n    0 0 0 0 1\n    0 0 0 0 0\n    0 0 0 0 0\n    0 0 0 0 0\n\n    Find a (minimal) sequence of row and column swaps to move the 1 to the center. A move is a string\n    in \"0\"-\"4\" indicating a row swap and \"a\"-\"e\" indicating a column swap\n    \"\"\"\n    matrix = [m[:] for m in matrix]  # copy\n    for c in s:\n        if c in \"01234\":\n            i = \"01234\".index(c)\n            matrix[i], matrix[i + 1] = matrix[i + 1], matrix[i]\n        if c in \"abcde\":\n            j = \"abcde\".index(c)\n            for row in matrix:\n                row[j], row[j + 1] = row[j + 1], row[j]\n\n    return len(s) <= max_moves and matrix[2][2] == 1",
    "sols": [
      "def sol(matrix=[[0, 1, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=3):\n    i = [sum(row) for row in matrix].index(1)\n    j = matrix[i].index(1)\n    ans = \"\"\n    while i > 2:\n        ans += str(i - 1)\n        i -= 1\n    while i < 2:\n        ans += str(i)\n        i += 1\n    while j > 2:\n        ans += \"abcde\"[j - 1]\n        j -= 1\n    while j < 2:\n        ans += \"abcde\"[j]\n        j += 1\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 263 A](https://codeforces.com/problemset/problem/263/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SlidingOne_3",
    "sat": "def sat(s: str, matrix=[[0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=2):\n    \"\"\"\n    We are given a 5x5 matrix with a single 1 like:\n\n    0 0 0 0 0\n    0 0 0 0 1\n    0 0 0 0 0\n    0 0 0 0 0\n    0 0 0 0 0\n\n    Find a (minimal) sequence of row and column swaps to move the 1 to the center. A move is a string\n    in \"0\"-\"4\" indicating a row swap and \"a\"-\"e\" indicating a column swap\n    \"\"\"\n    matrix = [m[:] for m in matrix]  # copy\n    for c in s:\n        if c in \"01234\":\n            i = \"01234\".index(c)\n            matrix[i], matrix[i + 1] = matrix[i + 1], matrix[i]\n        if c in \"abcde\":\n            j = \"abcde\".index(c)\n            for row in matrix:\n                row[j], row[j + 1] = row[j + 1], row[j]\n\n    return len(s) <= max_moves and matrix[2][2] == 1",
    "sols": [
      "def sol(matrix=[[0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=2):\n    i = [sum(row) for row in matrix].index(1)\n    j = matrix[i].index(1)\n    ans = \"\"\n    while i > 2:\n        ans += str(i - 1)\n        i -= 1\n    while i < 2:\n        ans += str(i)\n        i += 1\n    while j > 2:\n        ans += \"abcde\"[j - 1]\n        j -= 1\n    while j < 2:\n        ans += \"abcde\"[j]\n        j += 1\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 263 A](https://codeforces.com/problemset/problem/263/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SlidingOne_4",
    "sat": "def sat(s: str, matrix=[[0, 0, 0, 1, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=3):\n    \"\"\"\n    We are given a 5x5 matrix with a single 1 like:\n\n    0 0 0 0 0\n    0 0 0 0 1\n    0 0 0 0 0\n    0 0 0 0 0\n    0 0 0 0 0\n\n    Find a (minimal) sequence of row and column swaps to move the 1 to the center. A move is a string\n    in \"0\"-\"4\" indicating a row swap and \"a\"-\"e\" indicating a column swap\n    \"\"\"\n    matrix = [m[:] for m in matrix]  # copy\n    for c in s:\n        if c in \"01234\":\n            i = \"01234\".index(c)\n            matrix[i], matrix[i + 1] = matrix[i + 1], matrix[i]\n        if c in \"abcde\":\n            j = \"abcde\".index(c)\n            for row in matrix:\n                row[j], row[j + 1] = row[j + 1], row[j]\n\n    return len(s) <= max_moves and matrix[2][2] == 1",
    "sols": [
      "def sol(matrix=[[0, 0, 0, 1, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=3):\n    i = [sum(row) for row in matrix].index(1)\n    j = matrix[i].index(1)\n    ans = \"\"\n    while i > 2:\n        ans += str(i - 1)\n        i -= 1\n    while i < 2:\n        ans += str(i)\n        i += 1\n    while j > 2:\n        ans += \"abcde\"[j - 1]\n        j -= 1\n    while j < 2:\n        ans += \"abcde\"[j]\n        j += 1\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 263 A](https://codeforces.com/problemset/problem/263/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SlidingOne_5",
    "sat": "def sat(s: str, matrix=[[0, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=4):\n    \"\"\"\n    We are given a 5x5 matrix with a single 1 like:\n\n    0 0 0 0 0\n    0 0 0 0 1\n    0 0 0 0 0\n    0 0 0 0 0\n    0 0 0 0 0\n\n    Find a (minimal) sequence of row and column swaps to move the 1 to the center. A move is a string\n    in \"0\"-\"4\" indicating a row swap and \"a\"-\"e\" indicating a column swap\n    \"\"\"\n    matrix = [m[:] for m in matrix]  # copy\n    for c in s:\n        if c in \"01234\":\n            i = \"01234\".index(c)\n            matrix[i], matrix[i + 1] = matrix[i + 1], matrix[i]\n        if c in \"abcde\":\n            j = \"abcde\".index(c)\n            for row in matrix:\n                row[j], row[j + 1] = row[j + 1], row[j]\n\n    return len(s) <= max_moves and matrix[2][2] == 1",
    "sols": [
      "def sol(matrix=[[0, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=4):\n    i = [sum(row) for row in matrix].index(1)\n    j = matrix[i].index(1)\n    ans = \"\"\n    while i > 2:\n        ans += str(i - 1)\n        i -= 1\n    while i < 2:\n        ans += str(i)\n        i += 1\n    while j > 2:\n        ans += \"abcde\"[j - 1]\n        j -= 1\n    while j < 2:\n        ans += \"abcde\"[j]\n        j += 1\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 263 A](https://codeforces.com/problemset/problem/263/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SlidingOne_6",
    "sat": "def sat(s: str, matrix=[[0, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=3):\n    \"\"\"\n    We are given a 5x5 matrix with a single 1 like:\n\n    0 0 0 0 0\n    0 0 0 0 1\n    0 0 0 0 0\n    0 0 0 0 0\n    0 0 0 0 0\n\n    Find a (minimal) sequence of row and column swaps to move the 1 to the center. A move is a string\n    in \"0\"-\"4\" indicating a row swap and \"a\"-\"e\" indicating a column swap\n    \"\"\"\n    matrix = [m[:] for m in matrix]  # copy\n    for c in s:\n        if c in \"01234\":\n            i = \"01234\".index(c)\n            matrix[i], matrix[i + 1] = matrix[i + 1], matrix[i]\n        if c in \"abcde\":\n            j = \"abcde\".index(c)\n            for row in matrix:\n                row[j], row[j + 1] = row[j + 1], row[j]\n\n    return len(s) <= max_moves and matrix[2][2] == 1",
    "sols": [
      "def sol(matrix=[[0, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=3):\n    i = [sum(row) for row in matrix].index(1)\n    j = matrix[i].index(1)\n    ans = \"\"\n    while i > 2:\n        ans += str(i - 1)\n        i -= 1\n    while i < 2:\n        ans += str(i)\n        i += 1\n    while j > 2:\n        ans += \"abcde\"[j - 1]\n        j -= 1\n    while j < 2:\n        ans += \"abcde\"[j]\n        j += 1\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 263 A](https://codeforces.com/problemset/problem/263/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SlidingOne_7",
    "sat": "def sat(s: str, matrix=[[0, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=2):\n    \"\"\"\n    We are given a 5x5 matrix with a single 1 like:\n\n    0 0 0 0 0\n    0 0 0 0 1\n    0 0 0 0 0\n    0 0 0 0 0\n    0 0 0 0 0\n\n    Find a (minimal) sequence of row and column swaps to move the 1 to the center. A move is a string\n    in \"0\"-\"4\" indicating a row swap and \"a\"-\"e\" indicating a column swap\n    \"\"\"\n    matrix = [m[:] for m in matrix]  # copy\n    for c in s:\n        if c in \"01234\":\n            i = \"01234\".index(c)\n            matrix[i], matrix[i + 1] = matrix[i + 1], matrix[i]\n        if c in \"abcde\":\n            j = \"abcde\".index(c)\n            for row in matrix:\n                row[j], row[j + 1] = row[j + 1], row[j]\n\n    return len(s) <= max_moves and matrix[2][2] == 1",
    "sols": [
      "def sol(matrix=[[0, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=2):\n    i = [sum(row) for row in matrix].index(1)\n    j = matrix[i].index(1)\n    ans = \"\"\n    while i > 2:\n        ans += str(i - 1)\n        i -= 1\n    while i < 2:\n        ans += str(i)\n        i += 1\n    while j > 2:\n        ans += \"abcde\"[j - 1]\n        j -= 1\n    while j < 2:\n        ans += \"abcde\"[j]\n        j += 1\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 263 A](https://codeforces.com/problemset/problem/263/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SlidingOne_8",
    "sat": "def sat(s: str, matrix=[[0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=1):\n    \"\"\"\n    We are given a 5x5 matrix with a single 1 like:\n\n    0 0 0 0 0\n    0 0 0 0 1\n    0 0 0 0 0\n    0 0 0 0 0\n    0 0 0 0 0\n\n    Find a (minimal) sequence of row and column swaps to move the 1 to the center. A move is a string\n    in \"0\"-\"4\" indicating a row swap and \"a\"-\"e\" indicating a column swap\n    \"\"\"\n    matrix = [m[:] for m in matrix]  # copy\n    for c in s:\n        if c in \"01234\":\n            i = \"01234\".index(c)\n            matrix[i], matrix[i + 1] = matrix[i + 1], matrix[i]\n        if c in \"abcde\":\n            j = \"abcde\".index(c)\n            for row in matrix:\n                row[j], row[j + 1] = row[j + 1], row[j]\n\n    return len(s) <= max_moves and matrix[2][2] == 1",
    "sols": [
      "def sol(matrix=[[0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=1):\n    i = [sum(row) for row in matrix].index(1)\n    j = matrix[i].index(1)\n    ans = \"\"\n    while i > 2:\n        ans += str(i - 1)\n        i -= 1\n    while i < 2:\n        ans += str(i)\n        i += 1\n    while j > 2:\n        ans += \"abcde\"[j - 1]\n        j -= 1\n    while j < 2:\n        ans += \"abcde\"[j]\n        j += 1\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 263 A](https://codeforces.com/problemset/problem/263/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SlidingOne_9",
    "sat": "def sat(s: str, matrix=[[0, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=2):\n    \"\"\"\n    We are given a 5x5 matrix with a single 1 like:\n\n    0 0 0 0 0\n    0 0 0 0 1\n    0 0 0 0 0\n    0 0 0 0 0\n    0 0 0 0 0\n\n    Find a (minimal) sequence of row and column swaps to move the 1 to the center. A move is a string\n    in \"0\"-\"4\" indicating a row swap and \"a\"-\"e\" indicating a column swap\n    \"\"\"\n    matrix = [m[:] for m in matrix]  # copy\n    for c in s:\n        if c in \"01234\":\n            i = \"01234\".index(c)\n            matrix[i], matrix[i + 1] = matrix[i + 1], matrix[i]\n        if c in \"abcde\":\n            j = \"abcde\".index(c)\n            for row in matrix:\n                row[j], row[j + 1] = row[j + 1], row[j]\n\n    return len(s) <= max_moves and matrix[2][2] == 1",
    "sols": [
      "def sol(matrix=[[0, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=2):\n    i = [sum(row) for row in matrix].index(1)\n    j = matrix[i].index(1)\n    ans = \"\"\n    while i > 2:\n        ans += str(i - 1)\n        i -= 1\n    while i < 2:\n        ans += str(i)\n        i += 1\n    while j > 2:\n        ans += \"abcde\"[j - 1]\n        j -= 1\n    while j < 2:\n        ans += \"abcde\"[j]\n        j += 1\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 263 A](https://codeforces.com/problemset/problem/263/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SortPlusPlus_0",
    "sat": "def sat(s: str, inp=\"1+1+3+1+3+2+2+1+3+1+2\"):\n    \"\"\"Sort numbers in a sum of digits, e.g., 1+3+2+1 -> 1+1+2+3\"\"\"\n    return all(s.count(c) == inp.count(c) for c in inp + s) and all(s[i - 2] <= s[i] for i in range(2, len(s), 2))",
    "sols": [
      "def sol(inp=\"1+1+3+1+3+2+2+1+3+1+2\"):\n    return \"+\".join(sorted(inp.split(\"+\")))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 339 A](https://codeforces.com/problemset/problem/339/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SortPlusPlus_1",
    "sat": "def sat(s: str, inp=\"2+3+1+2+2+2+1+1+1+3+2+3+3+3+2+3+1+3+3+2+1+2+3+1+2+1+3+2+3+1+1+2+2+3+1+2+2+1+3+2+3+2+3+2+2\"):\n    \"\"\"Sort numbers in a sum of digits, e.g., 1+3+2+1 -> 1+1+2+3\"\"\"\n    return all(s.count(c) == inp.count(c) for c in inp + s) and all(s[i - 2] <= s[i] for i in range(2, len(s), 2))",
    "sols": [
      "def sol(inp=\"2+3+1+2+2+2+1+1+1+3+2+3+3+3+2+3+1+3+3+2+1+2+3+1+2+1+3+2+3+1+1+2+2+3+1+2+2+1+3+2+3+2+3+2+2\"):\n    return \"+\".join(sorted(inp.split(\"+\")))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 339 A](https://codeforces.com/problemset/problem/339/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SortPlusPlus_2",
    "sat": "def sat(s: str, inp=\"3+2+2\"):\n    \"\"\"Sort numbers in a sum of digits, e.g., 1+3+2+1 -> 1+1+2+3\"\"\"\n    return all(s.count(c) == inp.count(c) for c in inp + s) and all(s[i - 2] <= s[i] for i in range(2, len(s), 2))",
    "sols": [
      "def sol(inp=\"3+2+2\"):\n    return \"+\".join(sorted(inp.split(\"+\")))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 339 A](https://codeforces.com/problemset/problem/339/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SortPlusPlus_3",
    "sat": "def sat(s: str, inp=\"3+2+1+1+3+3+2+2+2+3+2+3+3+1+1\"):\n    \"\"\"Sort numbers in a sum of digits, e.g., 1+3+2+1 -> 1+1+2+3\"\"\"\n    return all(s.count(c) == inp.count(c) for c in inp + s) and all(s[i - 2] <= s[i] for i in range(2, len(s), 2))",
    "sols": [
      "def sol(inp=\"3+2+1+1+3+3+2+2+2+3+2+3+3+1+1\"):\n    return \"+\".join(sorted(inp.split(\"+\")))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 339 A](https://codeforces.com/problemset/problem/339/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SortPlusPlus_4",
    "sat": "def sat(s: str, inp=\"2+2+2+1+1+1+2+1+3+3+3+3+2+2+2+1+2+3+3+1+3+2+3+2+3+2+2+3+2+3+1+2+1+3+3+2+3+1+1+3+3+1\"):\n    \"\"\"Sort numbers in a sum of digits, e.g., 1+3+2+1 -> 1+1+2+3\"\"\"\n    return all(s.count(c) == inp.count(c) for c in inp + s) and all(s[i - 2] <= s[i] for i in range(2, len(s), 2))",
    "sols": [
      "def sol(inp=\"2+2+2+1+1+1+2+1+3+3+3+3+2+2+2+1+2+3+3+1+3+2+3+2+3+2+2+3+2+3+1+2+1+3+3+2+3+1+1+3+3+1\"):\n    return \"+\".join(sorted(inp.split(\"+\")))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 339 A](https://codeforces.com/problemset/problem/339/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SortPlusPlus_5",
    "sat": "def sat(s: str, inp=\"1\"):\n    \"\"\"Sort numbers in a sum of digits, e.g., 1+3+2+1 -> 1+1+2+3\"\"\"\n    return all(s.count(c) == inp.count(c) for c in inp + s) and all(s[i - 2] <= s[i] for i in range(2, len(s), 2))",
    "sols": [
      "def sol(inp=\"1\"):\n    return \"+\".join(sorted(inp.split(\"+\")))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 339 A](https://codeforces.com/problemset/problem/339/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SortPlusPlus_6",
    "sat": "def sat(s: str, inp=\"3+2+2+3+3+1+3+1+3+2+2+2+3+3+1+1+3+3+3+2+3+2+1+3+2+3+2+1+1+3+2+1+1+1+2+2+1\"):\n    \"\"\"Sort numbers in a sum of digits, e.g., 1+3+2+1 -> 1+1+2+3\"\"\"\n    return all(s.count(c) == inp.count(c) for c in inp + s) and all(s[i - 2] <= s[i] for i in range(2, len(s), 2))",
    "sols": [
      "def sol(inp=\"3+2+2+3+3+1+3+1+3+2+2+2+3+3+1+1+3+3+3+2+3+2+1+3+2+3+2+1+1+3+2+1+1+1+2+2+1\"):\n    return \"+\".join(sorted(inp.split(\"+\")))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 339 A](https://codeforces.com/problemset/problem/339/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SortPlusPlus_7",
    "sat": "def sat(s: str, inp=\"3+1+2+1+3+3+2+2+2+3+3+3+2+1+3+2+3+2+3+3\"):\n    \"\"\"Sort numbers in a sum of digits, e.g., 1+3+2+1 -> 1+1+2+3\"\"\"\n    return all(s.count(c) == inp.count(c) for c in inp + s) and all(s[i - 2] <= s[i] for i in range(2, len(s), 2))",
    "sols": [
      "def sol(inp=\"3+1+2+1+3+3+2+2+2+3+3+3+2+1+3+2+3+2+3+3\"):\n    return \"+\".join(sorted(inp.split(\"+\")))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 339 A](https://codeforces.com/problemset/problem/339/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SortPlusPlus_8",
    "sat": "def sat(s: str, inp=\"3+1+2+1+1+1+3+1+3+1+1+1+2+3+1+2+1+1+3+3+3+2+3+2+2+3+1+2+3+1+3+3+1+1+3+2+2\"):\n    \"\"\"Sort numbers in a sum of digits, e.g., 1+3+2+1 -> 1+1+2+3\"\"\"\n    return all(s.count(c) == inp.count(c) for c in inp + s) and all(s[i - 2] <= s[i] for i in range(2, len(s), 2))",
    "sols": [
      "def sol(inp=\"3+1+2+1+1+1+3+1+3+1+1+1+2+3+1+2+1+1+3+3+3+2+3+2+2+3+1+2+3+1+3+3+1+1+3+2+2\"):\n    return \"+\".join(sorted(inp.split(\"+\")))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 339 A](https://codeforces.com/problemset/problem/339/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SortPlusPlus_9",
    "sat": "def sat(s: str, inp=\"2+3+2+3+1+1+3+3+3+3+2+1+1+1+2+3+1+2+2+1+3+3\"):\n    \"\"\"Sort numbers in a sum of digits, e.g., 1+3+2+1 -> 1+1+2+3\"\"\"\n    return all(s.count(c) == inp.count(c) for c in inp + s) and all(s[i - 2] <= s[i] for i in range(2, len(s), 2))",
    "sols": [
      "def sol(inp=\"2+3+2+3+1+1+3+3+3+3+2+1+1+1+2+3+1+2+2+1+3+3\"):\n    return \"+\".join(sorted(inp.split(\"+\")))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 339 A](https://codeforces.com/problemset/problem/339/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CapitalizeFirstLetter_0",
    "sat": "def sat(s: str, word=\"konjac\"):\n    \"\"\"Capitalize the first letter of word\"\"\"\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        else:\n            if s[i] != word[i]:\n                return False\n    return True",
    "sols": [
      "def sol(word=\"konjac\"):\n    return word[0].upper() + word[1:]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 281 A](https://codeforces.com/problemset/problem/281/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CapitalizeFirstLetter_1",
    "sat": "def sat(s: str, word=\"nojapoxe\"):\n    \"\"\"Capitalize the first letter of word\"\"\"\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        else:\n            if s[i] != word[i]:\n                return False\n    return True",
    "sols": [
      "def sol(word=\"nojapoxe\"):\n    return word[0].upper() + word[1:]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 281 A](https://codeforces.com/problemset/problem/281/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CapitalizeFirstLetter_2",
    "sat": "def sat(s: str, word=\"silon\"):\n    \"\"\"Capitalize the first letter of word\"\"\"\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        else:\n            if s[i] != word[i]:\n                return False\n    return True",
    "sols": [
      "def sol(word=\"silon\"):\n    return word[0].upper() + word[1:]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 281 A](https://codeforces.com/problemset/problem/281/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CapitalizeFirstLetter_3",
    "sat": "def sat(s: str, word=\"fekovo\"):\n    \"\"\"Capitalize the first letter of word\"\"\"\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        else:\n            if s[i] != word[i]:\n                return False\n    return True",
    "sols": [
      "def sol(word=\"fekovo\"):\n    return word[0].upper() + word[1:]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 281 A](https://codeforces.com/problemset/problem/281/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CapitalizeFirstLetter_4",
    "sat": "def sat(s: str, word=\"mo\"):\n    \"\"\"Capitalize the first letter of word\"\"\"\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        else:\n            if s[i] != word[i]:\n                return False\n    return True",
    "sols": [
      "def sol(word=\"mo\"):\n    return word[0].upper() + word[1:]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 281 A](https://codeforces.com/problemset/problem/281/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CapitalizeFirstLetter_5",
    "sat": "def sat(s: str, word=\"xapequanukyhyvuvisup\"):\n    \"\"\"Capitalize the first letter of word\"\"\"\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        else:\n            if s[i] != word[i]:\n                return False\n    return True",
    "sols": [
      "def sol(word=\"xapequanukyhyvuvisup\"):\n    return word[0].upper() + word[1:]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 281 A](https://codeforces.com/problemset/problem/281/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CapitalizeFirstLetter_6",
    "sat": "def sat(s: str, word=\"wu\"):\n    \"\"\"Capitalize the first letter of word\"\"\"\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        else:\n            if s[i] != word[i]:\n                return False\n    return True",
    "sols": [
      "def sol(word=\"wu\"):\n    return word[0].upper() + word[1:]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 281 A](https://codeforces.com/problemset/problem/281/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CapitalizeFirstLetter_7",
    "sat": "def sat(s: str, word=\"chadumychi\"):\n    \"\"\"Capitalize the first letter of word\"\"\"\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        else:\n            if s[i] != word[i]:\n                return False\n    return True",
    "sols": [
      "def sol(word=\"chadumychi\"):\n    return word[0].upper() + word[1:]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 281 A](https://codeforces.com/problemset/problem/281/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CapitalizeFirstLetter_8",
    "sat": "def sat(s: str, word=\"cyquifilynyhuzo\"):\n    \"\"\"Capitalize the first letter of word\"\"\"\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        else:\n            if s[i] != word[i]:\n                return False\n    return True",
    "sols": [
      "def sol(word=\"cyquifilynyhuzo\"):\n    return word[0].upper() + word[1:]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 281 A](https://codeforces.com/problemset/problem/281/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CapitalizeFirstLetter_9",
    "sat": "def sat(s: str, word=\"t\"):\n    \"\"\"Capitalize the first letter of word\"\"\"\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        else:\n            if s[i] != word[i]:\n                return False\n    return True",
    "sols": [
      "def sol(word=\"t\"):\n    return word[0].upper() + word[1:]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 281 A](https://codeforces.com/problemset/problem/281/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "LongestSubsetString_0",
    "sat": "def sat(t: str, s=\"abbbcabbac\", target=7):\n    \"\"\"\n    You are given a string consisting of a's, b's and c's, find any longest substring containing no repeated\n    consecutive characters.\n\n    Sample Input:\n    `\"abbbc\"`\n\n    Sample Output:\n    `\"abc\"`\n    \"\"\"\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all(t[i] != t[i + 1] for i in range(len(t) - 1))",
    "sols": [
      "def sol(s=\"abbbcabbac\", target=7):  # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 266 A](https://codeforces.com/problemset/problem/266/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "LongestSubsetString_1",
    "sat": "def sat(t: str, s=\"cbbbbbcbbbbbbbaccacacaacbbcaaacbbaacbabacabccbbbcaacbbacaabcabbaacbbaa\", target=43):\n    \"\"\"\n    You are given a string consisting of a's, b's and c's, find any longest substring containing no repeated\n    consecutive characters.\n\n    Sample Input:\n    `\"abbbc\"`\n\n    Sample Output:\n    `\"abc\"`\n    \"\"\"\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all(t[i] != t[i + 1] for i in range(len(t) - 1))",
    "sols": [
      "def sol(s=\"cbbbbbcbbbbbbbaccacacaacbbcaaacbbaacbabacabccbbbcaacbbacaabcabbaacbbaa\", target=43):  # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 266 A](https://codeforces.com/problemset/problem/266/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "LongestSubsetString_2",
    "sat": "def sat(t: str, s=\"bcb\", target=3):\n    \"\"\"\n    You are given a string consisting of a's, b's and c's, find any longest substring containing no repeated\n    consecutive characters.\n\n    Sample Input:\n    `\"abbbc\"`\n\n    Sample Output:\n    `\"abc\"`\n    \"\"\"\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all(t[i] != t[i + 1] for i in range(len(t) - 1))",
    "sols": [
      "def sol(s=\"bcb\", target=3):  # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 266 A](https://codeforces.com/problemset/problem/266/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "LongestSubsetString_3",
    "sat": "def sat(t: str, s=\"c\", target=1):\n    \"\"\"\n    You are given a string consisting of a's, b's and c's, find any longest substring containing no repeated\n    consecutive characters.\n\n    Sample Input:\n    `\"abbbc\"`\n\n    Sample Output:\n    `\"abc\"`\n    \"\"\"\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all(t[i] != t[i + 1] for i in range(len(t) - 1))",
    "sols": [
      "def sol(s=\"c\", target=1):  # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 266 A](https://codeforces.com/problemset/problem/266/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "LongestSubsetString_4",
    "sat": "def sat(t: str, s=\"bcbcabba\", target=7):\n    \"\"\"\n    You are given a string consisting of a's, b's and c's, find any longest substring containing no repeated\n    consecutive characters.\n\n    Sample Input:\n    `\"abbbc\"`\n\n    Sample Output:\n    `\"abc\"`\n    \"\"\"\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all(t[i] != t[i + 1] for i in range(len(t) - 1))",
    "sols": [
      "def sol(s=\"bcbcabba\", target=7):  # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 266 A](https://codeforces.com/problemset/problem/266/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "LongestSubsetString_5",
    "sat": "def sat(t: str, s=\"ccabbaabababcabbaacccbaac\", target=17):\n    \"\"\"\n    You are given a string consisting of a's, b's and c's, find any longest substring containing no repeated\n    consecutive characters.\n\n    Sample Input:\n    `\"abbbc\"`\n\n    Sample Output:\n    `\"abc\"`\n    \"\"\"\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all(t[i] != t[i + 1] for i in range(len(t) - 1))",
    "sols": [
      "def sol(s=\"ccabbaabababcabbaacccbaac\", target=17):  # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 266 A](https://codeforces.com/problemset/problem/266/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "LongestSubsetString_6",
    "sat": "def sat(t: str, s=\"bccabcabbaaacacccbbcbaaabbbbcbbabbacbcbbbcaaabbbbcabacbabaaaacacccacabacbabcbbccacbcbcbccacbacbacbabacbacaaaabbbcacaabbbbbccbcbcbbbbbbbaaaaaabacbbbaabcaabbbcbaaaaacabcaaacbbbaabcabbcaccbbccaaacbacacacbaabbbbbccabacaccaacaabcbcaaababaabaabbacccaccacabaabcbabbccacbbbaaabcaccbacaacbbaacaabbaccbaaaccabbbbcbcaaabbaacbaccabbbcababacccccabbbacaacbbbcccccbbcabbaccbabcbcbaabbccabaccbaaaacaabccabccbaccccbbbccabbabbabbabacbabbbaabaaccaacabbaacbcccbaababbccacabcbaacbccbabacacbbccaccbcaccbbcbabbbabcbccbbcabbbbaabaabbcaacbabcbccaacacccaaccabbabcaacaabcacbbcbbccacbbbcbaaaacbbbaacabaaabcaabcbcbbbccbcbccbbaaaccbccbbcbccccaabbaacccaccaaacbcccabbcaccbacccbcabbababcabcbbacccbacccbbbcaccaaaacbbacccbbabccacacaabaaaaaaabbaaacabcabacbcaccaabacbbcbaccaaaabcbbcaabaaab\", target=482):\n    \"\"\"\n    You are given a string consisting of a's, b's and c's, find any longest substring containing no repeated\n    consecutive characters.\n\n    Sample Input:\n    `\"abbbc\"`\n\n    Sample Output:\n    `\"abc\"`\n    \"\"\"\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all(t[i] != t[i + 1] for i in range(len(t) - 1))",
    "sols": [
      "def sol(s=\"bccabcabbaaacacccbbcbaaabbbbcbbabbacbcbbbcaaabbbbcabacbabaaaacacccacabacbabcbbccacbcbcbccacbacbacbabacbacaaaabbbcacaabbbbbccbcbcbbbbbbbaaaaaabacbbbaabcaabbbcbaaaaacabcaaacbbbaabcabbcaccbbccaaacbacacacbaabbbbbccabacaccaacaabcbcaaababaabaabbacccaccacabaabcbabbccacbbbaaabcaccbacaacbbaacaabbaccbaaaccabbbbcbcaaabbaacbaccabbbcababacccccabbbacaacbbbcccccbbcabbaccbabcbcbaabbccabaccbaaaacaabccabccbaccccbbbccabbabbabbabacbabbbaabaaccaacabbaacbcccbaababbccacabcbaacbccbabacacbbccaccbcaccbbcbabbbabcbccbbcabbbbaabaabbcaacbabcbccaacacccaaccabbabcaacaabcacbbcbbccacbbbcbaaaacbbbaacabaaabcaabcbcbbbccbcbccbbaaaccbccbbcbccccaabbaacccaccaaacbcccabbcaccbacccbcabbababcabcbbacccbacccbbbcaccaaaacbbacccbbabccacacaabaaaaaaabbaaacabcabacbcaccaabacbbcbaccaaaabcbbcaabaaab\", target=482):  # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 266 A](https://codeforces.com/problemset/problem/266/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "LongestSubsetString_7",
    "sat": "def sat(t: str, s=\"cbacccabbcbcbbabbbabbcacaaccbabbbbaabcbccaaacbbababbcbbbcbbcccccaacbacbcacbcbacbcbacabbabababaaacabcbacaabacccbbbcccabaabcccbccbabbccababcaaccabcbabaacacbccaacbabbbabbacaacacababccaabcbbbbbabcacbabbcbacabbbbbccbcabccaaabbaaccabbbcacaabbaabbcaabbbacbbccbababbcccabcbcabbaaabababbcbcbabcbbacbacbcaacaababcaccbaabaacaacaccaacbbcabbcbaacbcaaaacabccacccbbcccacccccbcabaaacabccabccbccabbbaaacacaabacccbacbcaaaacaabccaccccbccaccaaabcbabcbcbacabbbcccbbacbccabbcacababccaaabacbaacababaabcaabbbcaabaccbccccaababbacbbbbaabbaaaccaccbaccbbbacbaccaabcbcaabbabacbbbaabccacaaabacccbaabbacbabccaaccbabbaabbcccabaaccabcccacbcabbabbcbcabcabbccabbcbbacacacabbababcccbbabaaabcccacaccaaaacaaabcacbbcbcbbbccbaabcaaabccbacaccbabaacccbabaccbaaaccbbcbbacbabcacacabbaccacabacababacbbcacbccbbccacbcabbbabbccbbcccbcacacacaaaacacbbcaababcbb\", target=557):\n    \"\"\"\n    You are given a string consisting of a's, b's and c's, find any longest substring containing no repeated\n    consecutive characters.\n\n    Sample Input:\n    `\"abbbc\"`\n\n    Sample Output:\n    `\"abc\"`\n    \"\"\"\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all(t[i] != t[i + 1] for i in range(len(t) - 1))",
    "sols": [
      "def sol(s=\"cbacccabbcbcbbabbbabbcacaaccbabbbbaabcbccaaacbbababbcbbbcbbcccccaacbacbcacbcbacbcbacabbabababaaacabcbacaabacccbbbcccabaabcccbccbabbccababcaaccabcbabaacacbccaacbabbbabbacaacacababccaabcbbbbbabcacbabbcbacabbbbbccbcabccaaabbaaccabbbcacaabbaabbcaabbbacbbccbababbcccabcbcabbaaabababbcbcbabcbbacbacbcaacaababcaccbaabaacaacaccaacbbcabbcbaacbcaaaacabccacccbbcccacccccbcabaaacabccabccbccabbbaaacacaabacccbacbcaaaacaabccaccccbccaccaaabcbabcbcbacabbbcccbbacbccabbcacababccaaabacbaacababaabcaabbbcaabaccbccccaababbacbbbbaabbaaaccaccbaccbbbacbaccaabcbcaabbabacbbbaabccacaaabacccbaabbacbabccaaccbabbaabbcccabaaccabcccacbcabbabbcbcabcabbccabbcbbacacacabbababcccbbabaaabcccacaccaaaacaaabcacbbcbcbbbccbaabcaaabccbacaccbabaacccbabaccbaaaccbbcbbacbabcacacabbaccacabacababacbbcacbccbbccacbcabbbabbccbbcccbcacacacaaaacacbbcaababcbb\", target=557):  # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 266 A](https://codeforces.com/problemset/problem/266/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "LongestSubsetString_8",
    "sat": "def sat(t: str, s=\"acb\", target=3):\n    \"\"\"\n    You are given a string consisting of a's, b's and c's, find any longest substring containing no repeated\n    consecutive characters.\n\n    Sample Input:\n    `\"abbbc\"`\n\n    Sample Output:\n    `\"abc\"`\n    \"\"\"\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all(t[i] != t[i + 1] for i in range(len(t) - 1))",
    "sols": [
      "def sol(s=\"acb\", target=3):  # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 266 A](https://codeforces.com/problemset/problem/266/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "LongestSubsetString_9",
    "sat": "def sat(t: str, s=\"bbbbb\", target=1):\n    \"\"\"\n    You are given a string consisting of a's, b's and c's, find any longest substring containing no repeated\n    consecutive characters.\n\n    Sample Input:\n    `\"abbbc\"`\n\n    Sample Output:\n    `\"abc\"`\n    \"\"\"\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all(t[i] != t[i + 1] for i in range(len(t) - 1))",
    "sols": [
      "def sol(s=\"bbbbb\", target=1):  # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 266 A](https://codeforces.com/problemset/problem/266/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "FindHomogeneousSubstring_0",
    "sat": "def sat(n: int, s=\"0000101111111000010\", k=5):\n    \"\"\"\n    You are given a string consisting of 0's and 1's. Find an index after which the subsequent k characters are\n    all 0's or all 1's.\n\n    Sample Input:\n    s = 0000111111100000, k = 5\n\n    Sample Output:\n    4\n    (or 5 or 6 or 11)\n    \"\"\"\n    return s[n:n + k] == s[n] * k",
    "sols": [
      "def sol(s=\"0000101111111000010\", k=5):\n    return s.index(\"0\" * k if \"0\" * k in s else \"1\" * k)",
      "def sol(s=\"0000101111111000010\", k=5):\n    import re\n    return re.search(r\"([01])\\1{\" + str(k - 1) + \"}\", s).span()[0]",
      "def sol(s=\"0000101111111000010\", k=5):\n    if \"0\" * k in s:\n        return s.index(\"0\" * k)\n    else:\n        return s.index(\"1\" * k)",
      "def sol(s=\"0000101111111000010\", k=5):\n    try:\n        return s.index(\"0\" * k)\n    except:\n        return s.index(\"1\" * k)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 96 A](https://codeforces.com/problemset/problem/96/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "FindHomogeneousSubstring_1",
    "sat": "def sat(n: int, s=\"000000\", k=4):\n    \"\"\"\n    You are given a string consisting of 0's and 1's. Find an index after which the subsequent k characters are\n    all 0's or all 1's.\n\n    Sample Input:\n    s = 0000111111100000, k = 5\n\n    Sample Output:\n    4\n    (or 5 or 6 or 11)\n    \"\"\"\n    return s[n:n + k] == s[n] * k",
    "sols": [
      "def sol(s=\"000000\", k=4):\n    return s.index(\"0\" * k if \"0\" * k in s else \"1\" * k)",
      "def sol(s=\"000000\", k=4):\n    import re\n    return re.search(r\"([01])\\1{\" + str(k - 1) + \"}\", s).span()[0]",
      "def sol(s=\"000000\", k=4):\n    if \"0\" * k in s:\n        return s.index(\"0\" * k)\n    else:\n        return s.index(\"1\" * k)",
      "def sol(s=\"000000\", k=4):\n    try:\n        return s.index(\"0\" * k)\n    except:\n        return s.index(\"1\" * k)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 96 A](https://codeforces.com/problemset/problem/96/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "FindHomogeneousSubstring_2",
    "sat": "def sat(n: int, s=\"001100000000000000000000101010100111101110000100\", k=18):\n    \"\"\"\n    You are given a string consisting of 0's and 1's. Find an index after which the subsequent k characters are\n    all 0's or all 1's.\n\n    Sample Input:\n    s = 0000111111100000, k = 5\n\n    Sample Output:\n    4\n    (or 5 or 6 or 11)\n    \"\"\"\n    return s[n:n + k] == s[n] * k",
    "sols": [
      "def sol(s=\"001100000000000000000000101010100111101110000100\", k=18):\n    return s.index(\"0\" * k if \"0\" * k in s else \"1\" * k)",
      "def sol(s=\"001100000000000000000000101010100111101110000100\", k=18):\n    import re\n    return re.search(r\"([01])\\1{\" + str(k - 1) + \"}\", s).span()[0]",
      "def sol(s=\"001100000000000000000000101010100111101110000100\", k=18):\n    if \"0\" * k in s:\n        return s.index(\"0\" * k)\n    else:\n        return s.index(\"1\" * k)",
      "def sol(s=\"001100000000000000000000101010100111101110000100\", k=18):\n    try:\n        return s.index(\"0\" * k)\n    except:\n        return s.index(\"1\" * k)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 96 A](https://codeforces.com/problemset/problem/96/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "FindHomogeneousSubstring_3",
    "sat": "def sat(n: int, s=\"10100111100110001010011110100111010110010000101101110100010\", k=3):\n    \"\"\"\n    You are given a string consisting of 0's and 1's. Find an index after which the subsequent k characters are\n    all 0's or all 1's.\n\n    Sample Input:\n    s = 0000111111100000, k = 5\n\n    Sample Output:\n    4\n    (or 5 or 6 or 11)\n    \"\"\"\n    return s[n:n + k] == s[n] * k",
    "sols": [
      "def sol(s=\"10100111100110001010011110100111010110010000101101110100010\", k=3):\n    return s.index(\"0\" * k if \"0\" * k in s else \"1\" * k)",
      "def sol(s=\"10100111100110001010011110100111010110010000101101110100010\", k=3):\n    import re\n    return re.search(r\"([01])\\1{\" + str(k - 1) + \"}\", s).span()[0]",
      "def sol(s=\"10100111100110001010011110100111010110010000101101110100010\", k=3):\n    if \"0\" * k in s:\n        return s.index(\"0\" * k)\n    else:\n        return s.index(\"1\" * k)",
      "def sol(s=\"10100111100110001010011110100111010110010000101101110100010\", k=3):\n    try:\n        return s.index(\"0\" * k)\n    except:\n        return s.index(\"1\" * k)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 96 A](https://codeforces.com/problemset/problem/96/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "FindHomogeneousSubstring_4",
    "sat": "def sat(n: int, s=\"010110011110100000001010010010001101001110110001111011000000000000000000000011101010111000111011001100111101101\", k=18):\n    \"\"\"\n    You are given a string consisting of 0's and 1's. Find an index after which the subsequent k characters are\n    all 0's or all 1's.\n\n    Sample Input:\n    s = 0000111111100000, k = 5\n\n    Sample Output:\n    4\n    (or 5 or 6 or 11)\n    \"\"\"\n    return s[n:n + k] == s[n] * k",
    "sols": [
      "def sol(s=\"010110011110100000001010010010001101001110110001111011000000000000000000000011101010111000111011001100111101101\", k=18):\n    return s.index(\"0\" * k if \"0\" * k in s else \"1\" * k)",
      "def sol(s=\"010110011110100000001010010010001101001110110001111011000000000000000000000011101010111000111011001100111101101\", k=18):\n    import re\n    return re.search(r\"([01])\\1{\" + str(k - 1) + \"}\", s).span()[0]",
      "def sol(s=\"010110011110100000001010010010001101001110110001111011000000000000000000000011101010111000111011001100111101101\", k=18):\n    if \"0\" * k in s:\n        return s.index(\"0\" * k)\n    else:\n        return s.index(\"1\" * k)",
      "def sol(s=\"010110011110100000001010010010001101001110110001111011000000000000000000000011101010111000111011001100111101101\", k=18):\n    try:\n        return s.index(\"0\" * k)\n    except:\n        return s.index(\"1\" * k)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 96 A](https://codeforces.com/problemset/problem/96/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "FindHomogeneousSubstring_5",
    "sat": "def sat(n: int, s=\"101100110010111111111011010101110010\", k=5):\n    \"\"\"\n    You are given a string consisting of 0's and 1's. Find an index after which the subsequent k characters are\n    all 0's or all 1's.\n\n    Sample Input:\n    s = 0000111111100000, k = 5\n\n    Sample Output:\n    4\n    (or 5 or 6 or 11)\n    \"\"\"\n    return s[n:n + k] == s[n] * k",
    "sols": [
      "def sol(s=\"101100110010111111111011010101110010\", k=5):\n    return s.index(\"0\" * k if \"0\" * k in s else \"1\" * k)",
      "def sol(s=\"101100110010111111111011010101110010\", k=5):\n    import re\n    return re.search(r\"([01])\\1{\" + str(k - 1) + \"}\", s).span()[0]",
      "def sol(s=\"101100110010111111111011010101110010\", k=5):\n    if \"0\" * k in s:\n        return s.index(\"0\" * k)\n    else:\n        return s.index(\"1\" * k)",
      "def sol(s=\"101100110010111111111011010101110010\", k=5):\n    try:\n        return s.index(\"0\" * k)\n    except:\n        return s.index(\"1\" * k)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 96 A](https://codeforces.com/problemset/problem/96/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "FindHomogeneousSubstring_6",
    "sat": "def sat(n: int, s=\"1110100100011000011000110000011000011100101011110001101100001111111011001011100111\", k=2):\n    \"\"\"\n    You are given a string consisting of 0's and 1's. Find an index after which the subsequent k characters are\n    all 0's or all 1's.\n\n    Sample Input:\n    s = 0000111111100000, k = 5\n\n    Sample Output:\n    4\n    (or 5 or 6 or 11)\n    \"\"\"\n    return s[n:n + k] == s[n] * k",
    "sols": [
      "def sol(s=\"1110100100011000011000110000011000011100101011110001101100001111111011001011100111\", k=2):\n    return s.index(\"0\" * k if \"0\" * k in s else \"1\" * k)",
      "def sol(s=\"1110100100011000011000110000011000011100101011110001101100001111111011001011100111\", k=2):\n    import re\n    return re.search(r\"([01])\\1{\" + str(k - 1) + \"}\", s).span()[0]",
      "def sol(s=\"1110100100011000011000110000011000011100101011110001101100001111111011001011100111\", k=2):\n    if \"0\" * k in s:\n        return s.index(\"0\" * k)\n    else:\n        return s.index(\"1\" * k)",
      "def sol(s=\"1110100100011000011000110000011000011100101011110001101100001111111011001011100111\", k=2):\n    try:\n        return s.index(\"0\" * k)\n    except:\n        return s.index(\"1\" * k)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 96 A](https://codeforces.com/problemset/problem/96/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "FindHomogeneousSubstring_7",
    "sat": "def sat(n: int, s=\"0100101000001110111101001011010110110000000000001000011101101011001110\", k=10):\n    \"\"\"\n    You are given a string consisting of 0's and 1's. Find an index after which the subsequent k characters are\n    all 0's or all 1's.\n\n    Sample Input:\n    s = 0000111111100000, k = 5\n\n    Sample Output:\n    4\n    (or 5 or 6 or 11)\n    \"\"\"\n    return s[n:n + k] == s[n] * k",
    "sols": [
      "def sol(s=\"0100101000001110111101001011010110110000000000001000011101101011001110\", k=10):\n    return s.index(\"0\" * k if \"0\" * k in s else \"1\" * k)",
      "def sol(s=\"0100101000001110111101001011010110110000000000001000011101101011001110\", k=10):\n    import re\n    return re.search(r\"([01])\\1{\" + str(k - 1) + \"}\", s).span()[0]",
      "def sol(s=\"0100101000001110111101001011010110110000000000001000011101101011001110\", k=10):\n    if \"0\" * k in s:\n        return s.index(\"0\" * k)\n    else:\n        return s.index(\"1\" * k)",
      "def sol(s=\"0100101000001110111101001011010110110000000000001000011101101011001110\", k=10):\n    try:\n        return s.index(\"0\" * k)\n    except:\n        return s.index(\"1\" * k)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 96 A](https://codeforces.com/problemset/problem/96/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "FindHomogeneousSubstring_8",
    "sat": "def sat(n: int, sk=11):\n    \"\"\"\n    You are given a string consisting of 0's and 1's. Find an index after which the subsequent k characters are\n    all 0's or all 1's.\n\n    Sample Input:\n    s = 0000111111100000, k = 5\n\n    Sample Output:\n    4\n    (or 5 or 6 or 11)\n    \"\"\"\n    return s[n:n + k] == s[n] * k",
    "sols": [
      "def sol(sk=11):\n    return s.index(\"0\" * k if \"0\" * k in s else \"1\" * k)",
      "def sol(s=\"00100001000101001001011011000010010010110110011110110000110100001110010111011101001011000000010110010000001000000010011001011000001000101111010011111100100011000011001011001111001100011110000010001110000100100101101100101111111001001110110100100010010101011100111010100100101101100110110011001110000011011010101111011000010111011111001011000011010110000111001011110001011100100001100011110011000011100111000011000000000000001101101100000100010101000111111001111010000101000001111100111011011110110000001101111001001010110100110000011101010110101000011100101000110001000100111110111001100011101101110100001010100001110001000101010101111101101100101100110000110011000001110000010010100110110111011101100111111110101001100100001000\", k=11):\n    import re\n    return re.search(r\"([01])\\1{\" + str(k - 1) + \"}\", s).span()[0]",
      "def sol(sk=11):\n    if \"0\" * k in s:\n        return s.index(\"0\" * k)\n    else:\n        return s.index(\"1\" * k)",
      "def sol(sk=11):\n    try:\n        return s.index(\"0\" * k)\n    except:\n        return s.index(\"1\" * k)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 96 A](https://codeforces.com/problemset/problem/96/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "FindHomogeneousSubstring_9",
    "sat": "def sat(n: int, s=\"00000000000000\", k=13):\n    \"\"\"\n    You are given a string consisting of 0's and 1's. Find an index after which the subsequent k characters are\n    all 0's or all 1's.\n\n    Sample Input:\n    s = 0000111111100000, k = 5\n\n    Sample Output:\n    4\n    (or 5 or 6 or 11)\n    \"\"\"\n    return s[n:n + k] == s[n] * k",
    "sols": [
      "def sol(s=\"00000000000000\", k=13):\n    return s.index(\"0\" * k if \"0\" * k in s else \"1\" * k)",
      "def sol(s=\"00000000000000\", k=13):\n    import re\n    return re.search(r\"([01])\\1{\" + str(k - 1) + \"}\", s).span()[0]",
      "def sol(s=\"00000000000000\", k=13):\n    if \"0\" * k in s:\n        return s.index(\"0\" * k)\n    else:\n        return s.index(\"1\" * k)",
      "def sol(s=\"00000000000000\", k=13):\n    try:\n        return s.index(\"0\" * k)\n    except:\n        return s.index(\"1\" * k)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 96 A](https://codeforces.com/problemset/problem/96/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Triple0_0",
    "sat": "def sat(delta: List[int], nums=[[1, 2, 3], [9, -2, 8], [17, 2, 50]]):\n    \"\"\"Find the missing triple of integers to make them all add up to 0 coordinatewise\"\"\"\n    return all(sum(vec[i] for vec in nums) + delta[i] == 0 for i in range(3))",
    "sols": [
      "def sol(nums=[[1, 2, 3], [9, -2, 8], [17, 2, 50]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/69/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Triple0_1",
    "sat": "def sat(delta: List[int], nums=[[-48, -64, 10], [-6, 46, 95], [89, 95, 20], [-96, 45, 74], [-78, 19, 47], [-6, -69, 55]]):\n    \"\"\"Find the missing triple of integers to make them all add up to 0 coordinatewise\"\"\"\n    return all(sum(vec[i] for vec in nums) + delta[i] == 0 for i in range(3))",
    "sols": [
      "def sol(nums=[[-48, -64, 10], [-6, 46, 95], [89, 95, 20], [-96, 45, 74], [-78, 19, 47], [-6, -69, 55]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/69/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Triple0_2",
    "sat": "def sat(delta: List[int], nums=[[-17, -87, 34], [-8, -47, -68], [92, -14, -18], [18, 89, 85], [52, 89, -56], [-38, -19, -53], [-78, -25, -34]]):\n    \"\"\"Find the missing triple of integers to make them all add up to 0 coordinatewise\"\"\"\n    return all(sum(vec[i] for vec in nums) + delta[i] == 0 for i in range(3))",
    "sols": [
      "def sol(nums=[[-17, -87, 34], [-8, -47, -68], [92, -14, -18], [18, 89, 85], [52, 89, -56], [-38, -19, -53], [-78, -25, -34]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/69/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Triple0_3",
    "sat": "def sat(delta: List[int], nums=[[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]):\n    \"\"\"Find the missing triple of integers to make them all add up to 0 coordinatewise\"\"\"\n    return all(sum(vec[i] for vec in nums) + delta[i] == 0 for i in range(3))",
    "sols": [
      "def sol(nums=[[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/69/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Triple0_4",
    "sat": "def sat(delta: List[int], nums=[[-16, 53, 37], [-54, -85, 65], [-46, 49, -81], [88, -47, -35], [53, -82, 4], [45, 94, 39], [72, -57, 27], [40, 35, -44], [-15, 32, 21]]):\n    \"\"\"Find the missing triple of integers to make them all add up to 0 coordinatewise\"\"\"\n    return all(sum(vec[i] for vec in nums) + delta[i] == 0 for i in range(3))",
    "sols": [
      "def sol(nums=[[-16, 53, 37], [-54, -85, 65], [-46, 49, -81], [88, -47, -35], [53, -82, 4], [45, 94, 39], [72, -57, 27], [40, 35, -44], [-15, 32, 21]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/69/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Triple0_5",
    "sat": "def sat(delta: List[int], nums=[[-12, -33, -100], [39, -29, 38], [-43, 84, -92], [40, -92, 43], [-56, -62, -58], [89, 64, -10]]):\n    \"\"\"Find the missing triple of integers to make them all add up to 0 coordinatewise\"\"\"\n    return all(sum(vec[i] for vec in nums) + delta[i] == 0 for i in range(3))",
    "sols": [
      "def sol(nums=[[-12, -33, -100], [39, -29, 38], [-43, 84, -92], [40, -92, 43], [-56, -62, -58], [89, 64, -10]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/69/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Triple0_6",
    "sat": "def sat(delta: List[int], nums=[[0, 28, 19], [-53, 53, 85], [25, 46, -77], [3, 47, 92], [-56, -75, 76], [-76, -98, -82], [21, -49, -38], [-17, -18, -33], [21, 38, -77]]):\n    \"\"\"Find the missing triple of integers to make them all add up to 0 coordinatewise\"\"\"\n    return all(sum(vec[i] for vec in nums) + delta[i] == 0 for i in range(3))",
    "sols": [
      "def sol(nums=[[0, 28, 19], [-53, 53, 85], [25, 46, -77], [3, 47, 92], [-56, -75, 76], [-76, -98, -82], [21, -49, -38], [-17, -18, -33], [21, 38, -77]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/69/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Triple0_7",
    "sat": "def sat(delta: List[int], nums=[[-4, 21, 29], [-60, 58, -80], [35, 33, 52], [51, -15, 86], [-2, -53, -72], [76, 35, -20], [56, -83, 67]]):\n    \"\"\"Find the missing triple of integers to make them all add up to 0 coordinatewise\"\"\"\n    return all(sum(vec[i] for vec in nums) + delta[i] == 0 for i in range(3))",
    "sols": [
      "def sol(nums=[[-4, 21, 29], [-60, 58, -80], [35, 33, 52], [51, -15, 86], [-2, -53, -72], [76, 35, -20], [56, -83, 67]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/69/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Triple0_8",
    "sat": "def sat(delta: List[int], nums=[[-44, -44, 13], [-65, 44, 89], [93, -46, -4], [86, 92, -99]]):\n    \"\"\"Find the missing triple of integers to make them all add up to 0 coordinatewise\"\"\"\n    return all(sum(vec[i] for vec in nums) + delta[i] == 0 for i in range(3))",
    "sols": [
      "def sol(nums=[[-44, -44, 13], [-65, 44, 89], [93, -46, -4], [86, 92, -99]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/69/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Triple0_9",
    "sat": "def sat(delta: List[int], nums=[[-92, 24, 54], [-72, 71, -81], [-83, -53, -72], [7, -87, 49]]):\n    \"\"\"Find the missing triple of integers to make them all add up to 0 coordinatewise\"\"\"\n    return all(sum(vec[i] for vec in nums) + delta[i] == 0 for i in range(3))",
    "sols": [
      "def sol(nums=[[-92, 24, 54], [-72, 71, -81], [-83, -53, -72], [7, -87, 49]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/69/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "TotalDifference_0",
    "sat": "def sat(n: int, a=17, b=100, c=20):\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])",
    "sols": [
      "def sol(a=17, b=100, c=20):\n    return -a + sum([b * i for i in range(c)])"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 546 A](https://codeforces.com/problemset/problem/546/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "TotalDifference_1",
    "sat": "def sat(n: int, a=62, b=92, c=24):\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])",
    "sols": [
      "def sol(a=62, b=92, c=24):\n    return -a + sum([b * i for i in range(c)])"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 546 A](https://codeforces.com/problemset/problem/546/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "TotalDifference_2",
    "sat": "def sat(n: int, a=14, b=50, c=47):\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])",
    "sols": [
      "def sol(a=14, b=50, c=47):\n    return -a + sum([b * i for i in range(c)])"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 546 A](https://codeforces.com/problemset/problem/546/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "TotalDifference_3",
    "sat": "def sat(n: int, a=62, b=63, c=13):\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])",
    "sols": [
      "def sol(a=62, b=63, c=13):\n    return -a + sum([b * i for i in range(c)])"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 546 A](https://codeforces.com/problemset/problem/546/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "TotalDifference_4",
    "sat": "def sat(n: int, a=5, b=31, c=37):\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])",
    "sols": [
      "def sol(a=5, b=31, c=37):\n    return -a + sum([b * i for i in range(c)])"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 546 A](https://codeforces.com/problemset/problem/546/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "TotalDifference_5",
    "sat": "def sat(n: int, a=71, b=70, c=95):\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])",
    "sols": [
      "def sol(a=71, b=70, c=95):\n    return -a + sum([b * i for i in range(c)])"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 546 A](https://codeforces.com/problemset/problem/546/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "TotalDifference_6",
    "sat": "def sat(n: int, a=37, b=13, c=18):\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])",
    "sols": [
      "def sol(a=37, b=13, c=18):\n    return -a + sum([b * i for i in range(c)])"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 546 A](https://codeforces.com/problemset/problem/546/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "TotalDifference_7",
    "sat": "def sat(n: int, a=66, b=67, c=83):\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])",
    "sols": [
      "def sol(a=66, b=67, c=83):\n    return -a + sum([b * i for i in range(c)])"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 546 A](https://codeforces.com/problemset/problem/546/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "TotalDifference_8",
    "sat": "def sat(n: int, a=1, b=72, c=37):\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])",
    "sols": [
      "def sol(a=1, b=72, c=37):\n    return -a + sum([b * i for i in range(c)])"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 546 A](https://codeforces.com/problemset/problem/546/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "TotalDifference_9",
    "sat": "def sat(n: int, a=42, b=82, c=5):\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])",
    "sols": [
      "def sol(a=42, b=82, c=5):\n    return -a + sum([b * i for i in range(c)])"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 546 A](https://codeforces.com/problemset/problem/546/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "TripleDouble_0",
    "sat": "def sat(n: int, v=17, w=100):\n    \"\"\"Find the smallest n such that if v is tripled n times and w is doubled n times, v exceeds w.\"\"\"\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w",
    "sols": [
      "def sol(v=17, w=100):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 791 A](https://codeforces.com/problemset/problem/791/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "TripleDouble_1",
    "sat": "def sat(n: int, v=75129500, w=979292947):\n    \"\"\"Find the smallest n such that if v is tripled n times and w is doubled n times, v exceeds w.\"\"\"\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w",
    "sols": [
      "def sol(v=75129500, w=979292947):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 791 A](https://codeforces.com/problemset/problem/791/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "TripleDouble_2",
    "sat": "def sat(n: int, v=609909721, w=872375011):\n    \"\"\"Find the smallest n such that if v is tripled n times and w is doubled n times, v exceeds w.\"\"\"\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w",
    "sols": [
      "def sol(v=609909721, w=872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 791 A](https://codeforces.com/problemset/problem/791/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "TripleDouble_3",
    "sat": "def sat(n: int, v=313946483, w=806690290):\n    \"\"\"Find the smallest n such that if v is tripled n times and w is doubled n times, v exceeds w.\"\"\"\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w",
    "sols": [
      "def sol(v=313946483, w=806690290):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 791 A](https://codeforces.com/problemset/problem/791/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "TripleDouble_4",
    "sat": "def sat(n: int, v=54888266, w=670740803):\n    \"\"\"Find the smallest n such that if v is tripled n times and w is doubled n times, v exceeds w.\"\"\"\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w",
    "sols": [
      "def sol(v=54888266, w=670740803):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 791 A](https://codeforces.com/problemset/problem/791/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "TripleDouble_5",
    "sat": "def sat(n: int, v=738230287, w=964473203):\n    \"\"\"Find the smallest n such that if v is tripled n times and w is doubled n times, v exceeds w.\"\"\"\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w",
    "sols": [
      "def sol(v=738230287, w=964473203):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 791 A](https://codeforces.com/problemset/problem/791/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "TripleDouble_6",
    "sat": "def sat(n: int, v=573098270, w=808925148):\n    \"\"\"Find the smallest n such that if v is tripled n times and w is doubled n times, v exceeds w.\"\"\"\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w",
    "sols": [
      "def sol(v=573098270, w=808925148):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 791 A](https://codeforces.com/problemset/problem/791/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "TripleDouble_7",
    "sat": "def sat(n: int, v=615768401, w=982664742):\n    \"\"\"Find the smallest n such that if v is tripled n times and w is doubled n times, v exceeds w.\"\"\"\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w",
    "sols": [
      "def sol(v=615768401, w=982664742):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 791 A](https://codeforces.com/problemset/problem/791/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "TripleDouble_8",
    "sat": "def sat(n: int, v=49645456, w=384097479):\n    \"\"\"Find the smallest n such that if v is tripled n times and w is doubled n times, v exceeds w.\"\"\"\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w",
    "sols": [
      "def sol(v=49645456, w=384097479):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 791 A](https://codeforces.com/problemset/problem/791/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "TripleDouble_9",
    "sat": "def sat(n: int, v=149517795, w=350345640):\n    \"\"\"Find the smallest n such that if v is tripled n times and w is doubled n times, v exceeds w.\"\"\"\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w",
    "sols": [
      "def sol(v=149517795, w=350345640):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 791 A](https://codeforces.com/problemset/problem/791/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "RepeatDec_0",
    "sat": "def sat(res: int, m=1234578987654321, n=4):\n    \"\"\"\n    Find the result of applying the following operation to integer m, n times: if the last digit is zero, remove\n    the zero, otherwise subtract 1.\n    \"\"\"\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return res == m",
    "sols": [
      "def sol(m=1234578987654321, n=4):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 977 A](https://codeforces.com/problemset/problem/977/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "RepeatDec_1",
    "sat": "def sat(res: int, m=52891398375817839454, n=3):\n    \"\"\"\n    Find the result of applying the following operation to integer m, n times: if the last digit is zero, remove\n    the zero, otherwise subtract 1.\n    \"\"\"\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return res == m",
    "sols": [
      "def sol(m=52891398375817839454, n=3):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 977 A](https://codeforces.com/problemset/problem/977/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "RepeatDec_2",
    "sat": "def sat(res: int, m=22262059435814874058, n=6):\n    \"\"\"\n    Find the result of applying the following operation to integer m, n times: if the last digit is zero, remove\n    the zero, otherwise subtract 1.\n    \"\"\"\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return res == m",
    "sols": [
      "def sol(m=22262059435814874058, n=6):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 977 A](https://codeforces.com/problemset/problem/977/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "RepeatDec_3",
    "sat": "def sat(res: int, m=23602903522227899062, n=2):\n    \"\"\"\n    Find the result of applying the following operation to integer m, n times: if the last digit is zero, remove\n    the zero, otherwise subtract 1.\n    \"\"\"\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return res == m",
    "sols": [
      "def sol(m=23602903522227899062, n=2):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 977 A](https://codeforces.com/problemset/problem/977/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "RepeatDec_4",
    "sat": "def sat(res: int, m=27368816582234104063, n=4):\n    \"\"\"\n    Find the result of applying the following operation to integer m, n times: if the last digit is zero, remove\n    the zero, otherwise subtract 1.\n    \"\"\"\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return res == m",
    "sols": [
      "def sol(m=27368816582234104063, n=4):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 977 A](https://codeforces.com/problemset/problem/977/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "RepeatDec_5",
    "sat": "def sat(res: int, m=3310493833144418244, n=2):\n    \"\"\"\n    Find the result of applying the following operation to integer m, n times: if the last digit is zero, remove\n    the zero, otherwise subtract 1.\n    \"\"\"\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return res == m",
    "sols": [
      "def sol(m=3310493833144418244, n=2):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 977 A](https://codeforces.com/problemset/problem/977/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "RepeatDec_6",
    "sat": "def sat(res: int, m=80720366033206876975, n=6):\n    \"\"\"\n    Find the result of applying the following operation to integer m, n times: if the last digit is zero, remove\n    the zero, otherwise subtract 1.\n    \"\"\"\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return res == m",
    "sols": [
      "def sol(m=80720366033206876975, n=6):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 977 A](https://codeforces.com/problemset/problem/977/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "RepeatDec_7",
    "sat": "def sat(res: int, m=57039061326331194861, n=8):\n    \"\"\"\n    Find the result of applying the following operation to integer m, n times: if the last digit is zero, remove\n    the zero, otherwise subtract 1.\n    \"\"\"\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return res == m",
    "sols": [
      "def sol(m=57039061326331194861, n=8):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 977 A](https://codeforces.com/problemset/problem/977/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "RepeatDec_8",
    "sat": "def sat(res: int, m=18188214609520625022, n=5):\n    \"\"\"\n    Find the result of applying the following operation to integer m, n times: if the last digit is zero, remove\n    the zero, otherwise subtract 1.\n    \"\"\"\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return res == m",
    "sols": [
      "def sol(m=18188214609520625022, n=5):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 977 A](https://codeforces.com/problemset/problem/977/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "RepeatDec_9",
    "sat": "def sat(res: int, m=25928053646682580431, n=6):\n    \"\"\"\n    Find the result of applying the following operation to integer m, n times: if the last digit is zero, remove\n    the zero, otherwise subtract 1.\n    \"\"\"\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return res == m",
    "sols": [
      "def sol(m=25928053646682580431, n=6):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 977 A](https://codeforces.com/problemset/problem/977/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "ShortestDecDelta_0",
    "sat": "def sat(li: List[int], n=149432, upper=14943):\n    \"\"\"\n    Find a the shortest sequence of integers going from 1 to n where each difference is at most 10.\n    Do not include 1 or n in the sequence.\n    \"\"\"\n    return len(li) <= upper and all(abs(a - b) <= 10 for a, b in zip([1] + li, li + [n]))",
    "sols": [
      "def sol(n=149432, upper=14943):\n    m = 1\n    ans = []\n    while True:\n        m = min(n, m + 10)\n        if m >= n:\n            return ans\n        ans.append(m)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 617 A](https://codeforces.com/problemset/problem/617/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "ShortestDecDelta_1",
    "sat": "def sat(li: List[int], n=493863, upper=49386):\n    \"\"\"\n    Find a the shortest sequence of integers going from 1 to n where each difference is at most 10.\n    Do not include 1 or n in the sequence.\n    \"\"\"\n    return len(li) <= upper and all(abs(a - b) <= 10 for a, b in zip([1] + li, li + [n]))",
    "sols": [
      "def sol(n=493863, upper=49386):\n    m = 1\n    ans = []\n    while True:\n        m = min(n, m + 10)\n        if m >= n:\n            return ans\n        ans.append(m)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 617 A](https://codeforces.com/problemset/problem/617/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "ShortestDecDelta_2",
    "sat": "def sat(li: List[int], n=827208, upper=82720):\n    \"\"\"\n    Find a the shortest sequence of integers going from 1 to n where each difference is at most 10.\n    Do not include 1 or n in the sequence.\n    \"\"\"\n    return len(li) <= upper and all(abs(a - b) <= 10 for a, b in zip([1] + li, li + [n]))",
    "sols": [
      "def sol(n=827208, upper=82720):\n    m = 1\n    ans = []\n    while True:\n        m = min(n, m + 10)\n        if m >= n:\n            return ans\n        ans.append(m)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 617 A](https://codeforces.com/problemset/problem/617/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "ShortestDecDelta_3",
    "sat": "def sat(li: List[int], n=176183, upper=17618):\n    \"\"\"\n    Find a the shortest sequence of integers going from 1 to n where each difference is at most 10.\n    Do not include 1 or n in the sequence.\n    \"\"\"\n    return len(li) <= upper and all(abs(a - b) <= 10 for a, b in zip([1] + li, li + [n]))",
    "sols": [
      "def sol(n=176183, upper=17618):\n    m = 1\n    ans = []\n    while True:\n        m = min(n, m + 10)\n        if m >= n:\n            return ans\n        ans.append(m)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 617 A](https://codeforces.com/problemset/problem/617/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "ShortestDecDelta_4",
    "sat": "def sat(li: List[int], n=483088, upper=48308):\n    \"\"\"\n    Find a the shortest sequence of integers going from 1 to n where each difference is at most 10.\n    Do not include 1 or n in the sequence.\n    \"\"\"\n    return len(li) <= upper and all(abs(a - b) <= 10 for a, b in zip([1] + li, li + [n]))",
    "sols": [
      "def sol(n=483088, upper=48308):\n    m = 1\n    ans = []\n    while True:\n        m = min(n, m + 10)\n        if m >= n:\n            return ans\n        ans.append(m)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 617 A](https://codeforces.com/problemset/problem/617/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "ShortestDecDelta_5",
    "sat": "def sat(li: List[int], n=995935, upper=99593):\n    \"\"\"\n    Find a the shortest sequence of integers going from 1 to n where each difference is at most 10.\n    Do not include 1 or n in the sequence.\n    \"\"\"\n    return len(li) <= upper and all(abs(a - b) <= 10 for a, b in zip([1] + li, li + [n]))",
    "sols": [
      "def sol(n=995935, upper=99593):\n    m = 1\n    ans = []\n    while True:\n        m = min(n, m + 10)\n        if m >= n:\n            return ans\n        ans.append(m)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 617 A](https://codeforces.com/problemset/problem/617/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "ShortestDecDelta_6",
    "sat": "def sat(li: List[int], n=303225, upper=30322):\n    \"\"\"\n    Find a the shortest sequence of integers going from 1 to n where each difference is at most 10.\n    Do not include 1 or n in the sequence.\n    \"\"\"\n    return len(li) <= upper and all(abs(a - b) <= 10 for a, b in zip([1] + li, li + [n]))",
    "sols": [
      "def sol(n=303225, upper=30322):\n    m = 1\n    ans = []\n    while True:\n        m = min(n, m + 10)\n        if m >= n:\n            return ans\n        ans.append(m)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 617 A](https://codeforces.com/problemset/problem/617/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "ShortestDecDelta_7",
    "sat": "def sat(li: List[int], n=706792, upper=70679):\n    \"\"\"\n    Find a the shortest sequence of integers going from 1 to n where each difference is at most 10.\n    Do not include 1 or n in the sequence.\n    \"\"\"\n    return len(li) <= upper and all(abs(a - b) <= 10 for a, b in zip([1] + li, li + [n]))",
    "sols": [
      "def sol(n=706792, upper=70679):\n    m = 1\n    ans = []\n    while True:\n        m = min(n, m + 10)\n        if m >= n:\n            return ans\n        ans.append(m)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 617 A](https://codeforces.com/problemset/problem/617/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "ShortestDecDelta_8",
    "sat": "def sat(li: List[int], n=245652, upper=24565):\n    \"\"\"\n    Find a the shortest sequence of integers going from 1 to n where each difference is at most 10.\n    Do not include 1 or n in the sequence.\n    \"\"\"\n    return len(li) <= upper and all(abs(a - b) <= 10 for a, b in zip([1] + li, li + [n]))",
    "sols": [
      "def sol(n=245652, upper=24565):\n    m = 1\n    ans = []\n    while True:\n        m = min(n, m + 10)\n        if m >= n:\n            return ans\n        ans.append(m)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 617 A](https://codeforces.com/problemset/problem/617/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "ShortestDecDelta_9",
    "sat": "def sat(li: List[int], n=234352, upper=23435):\n    \"\"\"\n    Find a the shortest sequence of integers going from 1 to n where each difference is at most 10.\n    Do not include 1 or n in the sequence.\n    \"\"\"\n    return len(li) <= upper and all(abs(a - b) <= 10 for a, b in zip([1] + li, li + [n]))",
    "sols": [
      "def sol(n=234352, upper=23435):\n    m = 1\n    ans = []\n    while True:\n        m = min(n, m + 10)\n        if m >= n:\n            return ans\n        ans.append(m)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 617 A](https://codeforces.com/problemset/problem/617/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxDelta_0",
    "sat": "def sat(n: int, pairs=[[3, 0], [17, 1], [9254359, 19], [123, 9254359], [0, 123]]):\n    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where \\sum p_i-m_i = 0, find the maximum value, over t, of\n    p_{t+1} + \\sum_{i=1}^t p_i - m_i\n    \"\"\"\n    assert sum(p - m for p, m in pairs) == 0, \"oo\"\n    tot = 0\n    success = False\n    for p, m in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success",
    "sols": [
      "def sol(pairs=[[3, 0], [17, 1], [9254359, 19], [123, 9254359], [0, 123]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 116 A](https://codeforces.com/problemset/problem/116/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxDelta_1",
    "sat": "def sat(n: int, pairs=[[735272, 0], [959403, 509925], [627622, 420078], [26718, 90062], [175999, 98715], [428400, 1098754], [958640, 543606], [983032, 181754], [143406, 1301552], [183299, 437141], [133206, 199853], [679951, 366700], [383704, 737787], [476200, 226078], [923093, 81263], [574756, 679331], [766050, 5511], [214260, 445680], [434074, 747765], [769774, 209386], [512796, 2095723], [0, 612991]]):\n    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where \\sum p_i-m_i = 0, find the maximum value, over t, of\n    p_{t+1} + \\sum_{i=1}^t p_i - m_i\n    \"\"\"\n    assert sum(p - m for p, m in pairs) == 0, \"oo\"\n    tot = 0\n    success = False\n    for p, m in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success",
    "sols": [
      "def sol(pairs=[[735272, 0], [959403, 509925], [627622, 420078], [26718, 90062], [175999, 98715], [428400, 1098754], [958640, 543606], [983032, 181754], [143406, 1301552], [183299, 437141], [133206, 199853], [679951, 366700], [383704, 737787], [476200, 226078], [923093, 81263], [574756, 679331], [766050, 5511], [214260, 445680], [434074, 747765], [769774, 209386], [512796, 2095723], [0, 612991]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 116 A](https://codeforces.com/problemset/problem/116/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxDelta_2",
    "sat": "def sat(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where \\sum p_i-m_i = 0, find the maximum value, over t, of\n    p_{t+1} + \\sum_{i=1}^t p_i - m_i\n    \"\"\"\n    assert sum(p - m for p, m in pairs) == 0, \"oo\"\n    tot = 0\n    success = False\n    for p, m in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success",
    "sols": [
      "def sol(pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 116 A](https://codeforces.com/problemset/problem/116/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxDelta_3",
    "sat": "def sat(n: int, pairs=[[0, 0]]):\n    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where \\sum p_i-m_i = 0, find the maximum value, over t, of\n    p_{t+1} + \\sum_{i=1}^t p_i - m_i\n    \"\"\"\n    assert sum(p - m for p, m in pairs) == 0, \"oo\"\n    tot = 0\n    success = False\n    for p, m in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success",
    "sols": [
      "def sol(pairs=[[0, 0]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 116 A](https://codeforces.com/problemset/problem/116/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxDelta_4",
    "sat": "def sat(n: int, pairs=[[459604, 0], [364611, 68505], [562652, 512251], [668655, 471975], [464486, 626280], [138684, 177065], [163296, 68630], [188271, 104677], [367839, 338137], [73022, 362103], [464143, 484458], [214935, 189299], [643725, 283515], [908210, 541732], [710201, 234839], [854230, 34479], [3288, 675724], [846637, 396244], [0, 2526576]]):\n    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where \\sum p_i-m_i = 0, find the maximum value, over t, of\n    p_{t+1} + \\sum_{i=1}^t p_i - m_i\n    \"\"\"\n    assert sum(p - m for p, m in pairs) == 0, \"oo\"\n    tot = 0\n    success = False\n    for p, m in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success",
    "sols": [
      "def sol(pairs=[[459604, 0], [364611, 68505], [562652, 512251], [668655, 471975], [464486, 626280], [138684, 177065], [163296, 68630], [188271, 104677], [367839, 338137], [73022, 362103], [464143, 484458], [214935, 189299], [643725, 283515], [908210, 541732], [710201, 234839], [854230, 34479], [3288, 675724], [846637, 396244], [0, 2526576]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 116 A](https://codeforces.com/problemset/problem/116/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxDelta_5",
    "sat": "def sat(n: int, pairs=[[715119, 0], [367499, 222628], [169111, 122790], [59845, 565057], [203981, 122674], [815914, 202757], [512331, 830939], [175069, 615531], [0, 336493]]):\n    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where \\sum p_i-m_i = 0, find the maximum value, over t, of\n    p_{t+1} + \\sum_{i=1}^t p_i - m_i\n    \"\"\"\n    assert sum(p - m for p, m in pairs) == 0, \"oo\"\n    tot = 0\n    success = False\n    for p, m in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success",
    "sols": [
      "def sol(pairs=[[715119, 0], [367499, 222628], [169111, 122790], [59845, 565057], [203981, 122674], [815914, 202757], [512331, 830939], [175069, 615531], [0, 336493]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 116 A](https://codeforces.com/problemset/problem/116/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxDelta_6",
    "sat": "def sat(n: int, pairs=[[230265, 0], [205727, 90163], [575836, 196224], [865356, 697426], [0, 893371]]):\n    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where \\sum p_i-m_i = 0, find the maximum value, over t, of\n    p_{t+1} + \\sum_{i=1}^t p_i - m_i\n    \"\"\"\n    assert sum(p - m for p, m in pairs) == 0, \"oo\"\n    tot = 0\n    success = False\n    for p, m in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success",
    "sols": [
      "def sol(pairs=[[230265, 0], [205727, 90163], [575836, 196224], [865356, 697426], [0, 893371]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 116 A](https://codeforces.com/problemset/problem/116/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxDelta_7",
    "sat": "def sat(n: int, pairs=[[974270, 0], [69341, 140710], [197492, 297929], [297139, 489322], [190395, 166439], [969986, 67114], [453912, 1122151], [336475, 341518], [0, 863827]]):\n    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where \\sum p_i-m_i = 0, find the maximum value, over t, of\n    p_{t+1} + \\sum_{i=1}^t p_i - m_i\n    \"\"\"\n    assert sum(p - m for p, m in pairs) == 0, \"oo\"\n    tot = 0\n    success = False\n    for p, m in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success",
    "sols": [
      "def sol(pairs=[[974270, 0], [69341, 140710], [197492, 297929], [297139, 489322], [190395, 166439], [969986, 67114], [453912, 1122151], [336475, 341518], [0, 863827]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 116 A](https://codeforces.com/problemset/problem/116/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxDelta_8",
    "sat": "def sat(n: int, pairs=[[50407, 0], [364526, 48888], [594103, 302747], [0, 657401]]):\n    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where \\sum p_i-m_i = 0, find the maximum value, over t, of\n    p_{t+1} + \\sum_{i=1}^t p_i - m_i\n    \"\"\"\n    assert sum(p - m for p, m in pairs) == 0, \"oo\"\n    tot = 0\n    success = False\n    for p, m in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success",
    "sols": [
      "def sol(pairs=[[50407, 0], [364526, 48888], [594103, 302747], [0, 657401]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 116 A](https://codeforces.com/problemset/problem/116/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxDelta_9",
    "sat": "def sat(n: int, pairs=[[995674, 0], [397252, 890816], [590613, 337581], [419282, 97852], [378800, 749627], [344725, 386184], [733279, 281851], [551017, 308615], [0, 1358116]]):\n    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where \\sum p_i-m_i = 0, find the maximum value, over t, of\n    p_{t+1} + \\sum_{i=1}^t p_i - m_i\n    \"\"\"\n    assert sum(p - m for p, m in pairs) == 0, \"oo\"\n    tot = 0\n    success = False\n    for p, m in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success",
    "sols": [
      "def sol(pairs=[[995674, 0], [397252, 890816], [590613, 337581], [419282, 97852], [378800, 749627], [344725, 386184], [733279, 281851], [551017, 308615], [0, 1358116]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 116 A](https://codeforces.com/problemset/problem/116/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CommonCase_0",
    "sat": "def sat(s_case: str, s=\"CanYouTellIfItHASmoreCAPITALS\"):\n    \"\"\"\n    Given a word, replace it either with an upper-case or lower-case depending on whether or not it has more\n    capitals or lower-case letters. If it has strictly more capitals, use upper-case, otherwise, use lower-case.\n    \"\"\"\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())",
    "sols": [
      "def sol(s=\"CanYouTellIfItHASmoreCAPITALS\"):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 59 A](https://codeforces.com/problemset/problem/59/A)\n\nThis is a trivial puzzle, especially if the AI realizes that it can can just copy the solution from\nthe problem",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CommonCase_1",
    "sat": "def sat(s_case: str, s=\"ThUcynICHiHIc\"):\n    \"\"\"\n    Given a word, replace it either with an upper-case or lower-case depending on whether or not it has more\n    capitals or lower-case letters. If it has strictly more capitals, use upper-case, otherwise, use lower-case.\n    \"\"\"\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())",
    "sols": [
      "def sol(s=\"ThUcynICHiHIc\"):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 59 A](https://codeforces.com/problemset/problem/59/A)\n\nThis is a trivial puzzle, especially if the AI realizes that it can can just copy the solution from\nthe problem",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CommonCase_2",
    "sat": "def sat(s_case: str, s=\"riziP\"):\n    \"\"\"\n    Given a word, replace it either with an upper-case or lower-case depending on whether or not it has more\n    capitals or lower-case letters. If it has strictly more capitals, use upper-case, otherwise, use lower-case.\n    \"\"\"\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())",
    "sols": [
      "def sol(s=\"riziP\"):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 59 A](https://codeforces.com/problemset/problem/59/A)\n\nThis is a trivial puzzle, especially if the AI realizes that it can can just copy the solution from\nthe problem",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CommonCase_3",
    "sat": "def sat(s_case: str, s=\"KANExAjoHiBotipomyVOkATuMY\"):\n    \"\"\"\n    Given a word, replace it either with an upper-case or lower-case depending on whether or not it has more\n    capitals or lower-case letters. If it has strictly more capitals, use upper-case, otherwise, use lower-case.\n    \"\"\"\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())",
    "sols": [
      "def sol(s=\"KANExAjoHiBotipomyVOkATuMY\"):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 59 A](https://codeforces.com/problemset/problem/59/A)\n\nThis is a trivial puzzle, especially if the AI realizes that it can can just copy the solution from\nthe problem",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CommonCase_4",
    "sat": "def sat(s_case: str, s=\"rAC\"):\n    \"\"\"\n    Given a word, replace it either with an upper-case or lower-case depending on whether or not it has more\n    capitals or lower-case letters. If it has strictly more capitals, use upper-case, otherwise, use lower-case.\n    \"\"\"\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())",
    "sols": [
      "def sol(s=\"rAC\"):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 59 A](https://codeforces.com/problemset/problem/59/A)\n\nThis is a trivial puzzle, especially if the AI realizes that it can can just copy the solution from\nthe problem",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CommonCase_5",
    "sat": "def sat(s_case: str, s=\"t\"):\n    \"\"\"\n    Given a word, replace it either with an upper-case or lower-case depending on whether or not it has more\n    capitals or lower-case letters. If it has strictly more capitals, use upper-case, otherwise, use lower-case.\n    \"\"\"\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())",
    "sols": [
      "def sol(s=\"t\"):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 59 A](https://codeforces.com/problemset/problem/59/A)\n\nThis is a trivial puzzle, especially if the AI realizes that it can can just copy the solution from\nthe problem",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CommonCase_6",
    "sat": "def sat(s_case: str, s=\"VInAmozUrAzuwYZOvuPETaLEpEJOD\"):\n    \"\"\"\n    Given a word, replace it either with an upper-case or lower-case depending on whether or not it has more\n    capitals or lower-case letters. If it has strictly more capitals, use upper-case, otherwise, use lower-case.\n    \"\"\"\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())",
    "sols": [
      "def sol(s=\"VInAmozUrAzuwYZOvuPETaLEpEJOD\"):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 59 A](https://codeforces.com/problemset/problem/59/A)\n\nThis is a trivial puzzle, especially if the AI realizes that it can can just copy the solution from\nthe problem",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CommonCase_7",
    "sat": "def sat(s_case: str, s=\"RotAS\"):\n    \"\"\"\n    Given a word, replace it either with an upper-case or lower-case depending on whether or not it has more\n    capitals or lower-case letters. If it has strictly more capitals, use upper-case, otherwise, use lower-case.\n    \"\"\"\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())",
    "sols": [
      "def sol(s=\"RotAS\"):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 59 A](https://codeforces.com/problemset/problem/59/A)\n\nThis is a trivial puzzle, especially if the AI realizes that it can can just copy the solution from\nthe problem",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CommonCase_8",
    "sat": "def sat(s_case: str, s=\"timyGeTAmytURAJyxe\"):\n    \"\"\"\n    Given a word, replace it either with an upper-case or lower-case depending on whether or not it has more\n    capitals or lower-case letters. If it has strictly more capitals, use upper-case, otherwise, use lower-case.\n    \"\"\"\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())",
    "sols": [
      "def sol(s=\"timyGeTAmytURAJyxe\"):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 59 A](https://codeforces.com/problemset/problem/59/A)\n\nThis is a trivial puzzle, especially if the AI realizes that it can can just copy the solution from\nthe problem",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CommonCase_9",
    "sat": "def sat(s_case: str, s=\"mOsUthYzys\"):\n    \"\"\"\n    Given a word, replace it either with an upper-case or lower-case depending on whether or not it has more\n    capitals or lower-case letters. If it has strictly more capitals, use upper-case, otherwise, use lower-case.\n    \"\"\"\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())",
    "sols": [
      "def sol(s=\"mOsUthYzys\"):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 59 A](https://codeforces.com/problemset/problem/59/A)\n\nThis is a trivial puzzle, especially if the AI realizes that it can can just copy the solution from\nthe problem",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Sssuubbstriiingg_0",
    "sat": "def sat(inds: List[int], string=\"Sssuubbstriiingg\"):\n    \"\"\"Find increasing indices to make the substring \"substring\"\"\"\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"substring\"",
    "sols": [
      "def sol(string=\"Sssuubbstriiingg\"):\n    target = \"substring\"\n    j = 0\n    ans = []\n    for i in range(len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Sssuubbstriiingg_1",
    "sat": "def sat(inds: List[int], string=\"su absItIstrilnvgenw\"):\n    \"\"\"Find increasing indices to make the substring \"substring\"\"\"\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"substring\"",
    "sols": [
      "def sol(string=\"su absItIstrilnvgenw\"):\n    target = \"substring\"\n    j = 0\n    ans = []\n    for i in range(len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Sssuubbstriiingg_2",
    "sat": "def sat(inds: List[int], string=\"sKubssB  tzCzPrZiL inCgN\"):\n    \"\"\"Find increasing indices to make the substring \"substring\"\"\"\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"substring\"",
    "sols": [
      "def sol(string=\"sKubssB  tzCzPrZiL inCgN\"):\n    target = \"substring\"\n    j = 0\n    ans = []\n    for i in range(len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Sssuubbstriiingg_3",
    "sat": "def sat(inds: List[int], string=\"suUbstriPng\"):\n    \"\"\"Find increasing indices to make the substring \"substring\"\"\"\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"substring\"",
    "sols": [
      "def sol(string=\"suUbstriPng\"):\n    target = \"substring\"\n    j = 0\n    ans = []\n    for i in range(len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Sssuubbstriiingg_4",
    "sat": "def sat(inds: List[int], string=\"stuqb VqsMJptxriWYe nmfgNfW\"):\n    \"\"\"Find increasing indices to make the substring \"substring\"\"\"\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"substring\"",
    "sols": [
      "def sol(string=\"stuqb VqsMJptxriWYe nmfgNfW\"):\n    target = \"substring\"\n    j = 0\n    ans = []\n    for i in range(len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Sssuubbstriiingg_5",
    "sat": "def sat(inds: List[int], string=\"iCsueObsRTtryijnUgj \"):\n    \"\"\"Find increasing indices to make the substring \"substring\"\"\"\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"substring\"",
    "sols": [
      "def sol(string=\"iCsueObsRTtryijnUgj \"):\n    target = \"substring\"\n    j = 0\n    ans = []\n    for i in range(len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Sssuubbstriiingg_6",
    "sat": "def sat(inds: List[int], string=\"subscnaQftrXionhIdqgk\"):\n    \"\"\"Find increasing indices to make the substring \"substring\"\"\"\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"substring\"",
    "sols": [
      "def sol(string=\"subscnaQftrXionhIdqgk\"):\n    target = \"substring\"\n    j = 0\n    ans = []\n    for i in range(len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Sssuubbstriiingg_7",
    "sat": "def sat(inds: List[int], string=\"csubbstring\"):\n    \"\"\"Find increasing indices to make the substring \"substring\"\"\"\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"substring\"",
    "sols": [
      "def sol(string=\"csubbstring\"):\n    target = \"substring\"\n    j = 0\n    ans = []\n    for i in range(len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Sssuubbstriiingg_8",
    "sat": "def sat(inds: List[int], string=\"CsRCuebYMsTtrd O   jrCixnlg\"):\n    \"\"\"Find increasing indices to make the substring \"substring\"\"\"\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"substring\"",
    "sols": [
      "def sol(string=\"CsRCuebYMsTtrd O   jrCixnlg\"):\n    target = \"substring\"\n    j = 0\n    ans = []\n    for i in range(len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Sssuubbstriiingg_9",
    "sat": "def sat(inds: List[int], string=\"substring\"):\n    \"\"\"Find increasing indices to make the substring \"substring\"\"\"\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"substring\"",
    "sols": [
      "def sol(string=\"substring\"):\n    target = \"substring\"\n    j = 0\n    ans = []\n    for i in range(len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Sstriiinggssuubb_0",
    "sat": "def sat(inds: List[int], string=\"enlightenment\"):\n    \"\"\"Find increasing indices to make the substring \"intelligent\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"intelligent\"",
    "sols": [
      "def sol(string=\"enlightenment\"):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Sstriiinggssuubb_1",
    "sat": "def sat(inds: List[int], string=\"inntGetlige\"):\n    \"\"\"Find increasing indices to make the substring \"intelligent\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"intelligent\"",
    "sols": [
      "def sol(string=\"inntGetlige\"):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Sstriiinggssuubb_2",
    "sat": "def sat(inds: List[int], string=\"gteliikeenGgqIHent\"):\n    \"\"\"Find increasing indices to make the substring \"intelligent\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"intelligent\"",
    "sols": [
      "def sol(string=\"gteliikeenGgqIHent\"):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Sstriiinggssuubb_3",
    "sat": "def sat(inds: List[int], string=\"xaGliigNntJfeeSm  nnEyt\"):\n    \"\"\"Find increasing indices to make the substring \"intelligent\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"intelligent\"",
    "sols": [
      "def sol(string=\"xaGliigNntJfeeSm  nnEyt\"):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Sstriiinggssuubb_4",
    "sat": "def sat(inds: List[int], string=\"  einliJSgeteq ne CAlti\"):\n    \"\"\"Find increasing indices to make the substring \"intelligent\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"intelligent\"",
    "sols": [
      "def sol(string=\"  einliJSgeteq ne CAlti\"):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Sstriiinggssuubb_5",
    "sat": "def sat(inds: List[int], string=\"ligienntte\"):\n    \"\"\"Find increasing indices to make the substring \"intelligent\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"intelligent\"",
    "sols": [
      "def sol(string=\"ligienntte\"):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Sstriiinggssuubb_6",
    "sat": "def sat(inds: List[int], string=\"eOE ilPlbfgTnAit  VKgqXe ent\"):\n    \"\"\"Find increasing indices to make the substring \"intelligent\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"intelligent\"",
    "sols": [
      "def sol(string=\"eOE ilPlbfgTnAit  VKgqXe ent\"):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Sstriiinggssuubb_7",
    "sat": "def sat(inds: List[int], string=\"Bin meoculctdigent\"):\n    \"\"\"Find increasing indices to make the substring \"intelligent\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"intelligent\"",
    "sols": [
      "def sol(string=\"Bin meoculctdigent\"):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Sstriiinggssuubb_8",
    "sat": "def sat(inds: List[int], string=\"netelicgenit\"):\n    \"\"\"Find increasing indices to make the substring \"intelligent\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"intelligent\"",
    "sols": [
      "def sol(string=\"netelicgenit\"):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Sstriiinggssuubb_9",
    "sat": "def sat(inds: List[int], string=\"ignenCttleli \"):\n    \"\"\"Find increasing indices to make the substring \"intelligent\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"intelligent\"",
    "sols": [
      "def sol(string=\"ignenCttleli \"):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Moving0s_0",
    "sat": "def sat(seq: List[int], target=[1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], n_steps=4):\n    \"\"\"\n    Find a sequence of 0's and 1's so that, after n_steps of swapping each adjacent (0, 1), target target sequence\n    is achieved.\n    \"\"\"\n    s = seq[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(seq) - 1):\n            if (s[i], s[i + 1]) == (0, 1):\n                (s[i], s[i + 1]) = (1, 0)\n    return s == target",
    "sols": [
      "def sol(target=[1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], n_steps=4):\n    s = target[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(target) - 2, -1, -1):\n            if (s[i], s[i + 1]) == (1, 0):\n                (s[i], s[i + 1]) = (0, 1)\n    return s"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 266 B](https://codeforces.com/problemset/problem/266/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Moving0s_1",
    "sat": "def sat(seq: List[int], target=[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], n_steps=9):\n    \"\"\"\n    Find a sequence of 0's and 1's so that, after n_steps of swapping each adjacent (0, 1), target target sequence\n    is achieved.\n    \"\"\"\n    s = seq[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(seq) - 1):\n            if (s[i], s[i + 1]) == (0, 1):\n                (s[i], s[i + 1]) = (1, 0)\n    return s == target",
    "sols": [
      "def sol(target=[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], n_steps=9):\n    s = target[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(target) - 2, -1, -1):\n            if (s[i], s[i + 1]) == (1, 0):\n                (s[i], s[i + 1]) = (0, 1)\n    return s"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 266 B](https://codeforces.com/problemset/problem/266/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Moving0s_2",
    "sat": "def sat(seq: List[int], target=[1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0], n_steps=4):\n    \"\"\"\n    Find a sequence of 0's and 1's so that, after n_steps of swapping each adjacent (0, 1), target target sequence\n    is achieved.\n    \"\"\"\n    s = seq[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(seq) - 1):\n            if (s[i], s[i + 1]) == (0, 1):\n                (s[i], s[i + 1]) = (1, 0)\n    return s == target",
    "sols": [
      "def sol(target=[1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0], n_steps=4):\n    s = target[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(target) - 2, -1, -1):\n            if (s[i], s[i + 1]) == (1, 0):\n                (s[i], s[i + 1]) = (0, 1)\n    return s"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 266 B](https://codeforces.com/problemset/problem/266/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Moving0s_3",
    "sat": "def sat(seq: List[int], target=[1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], n_steps=12):\n    \"\"\"\n    Find a sequence of 0's and 1's so that, after n_steps of swapping each adjacent (0, 1), target target sequence\n    is achieved.\n    \"\"\"\n    s = seq[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(seq) - 1):\n            if (s[i], s[i + 1]) == (0, 1):\n                (s[i], s[i + 1]) = (1, 0)\n    return s == target",
    "sols": [
      "def sol(target=[1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], n_steps=12):\n    s = target[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(target) - 2, -1, -1):\n            if (s[i], s[i + 1]) == (1, 0):\n                (s[i], s[i + 1]) = (0, 1)\n    return s"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 266 B](https://codeforces.com/problemset/problem/266/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Moving0s_4",
    "sat": "def sat(seq: List[int], target=[1, 1, 1, 0, 0, 0, 0], n_steps=3):\n    \"\"\"\n    Find a sequence of 0's and 1's so that, after n_steps of swapping each adjacent (0, 1), target target sequence\n    is achieved.\n    \"\"\"\n    s = seq[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(seq) - 1):\n            if (s[i], s[i + 1]) == (0, 1):\n                (s[i], s[i + 1]) = (1, 0)\n    return s == target",
    "sols": [
      "def sol(target=[1, 1, 1, 0, 0, 0, 0], n_steps=3):\n    s = target[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(target) - 2, -1, -1):\n            if (s[i], s[i + 1]) == (1, 0):\n                (s[i], s[i + 1]) = (0, 1)\n    return s"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 266 B](https://codeforces.com/problemset/problem/266/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Moving0s_5",
    "sat": "def sat(seq: List[int], target=[1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0], n_steps=3):\n    \"\"\"\n    Find a sequence of 0's and 1's so that, after n_steps of swapping each adjacent (0, 1), target target sequence\n    is achieved.\n    \"\"\"\n    s = seq[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(seq) - 1):\n            if (s[i], s[i + 1]) == (0, 1):\n                (s[i], s[i + 1]) = (1, 0)\n    return s == target",
    "sols": [
      "def sol(target=[1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0], n_steps=3):\n    s = target[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(target) - 2, -1, -1):\n            if (s[i], s[i + 1]) == (1, 0):\n                (s[i], s[i + 1]) = (0, 1)\n    return s"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 266 B](https://codeforces.com/problemset/problem/266/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Moving0s_6",
    "sat": "def sat(seq: List[int], target=[0, 1, 0, 1, 0, 0, 1], n_steps=0):\n    \"\"\"\n    Find a sequence of 0's and 1's so that, after n_steps of swapping each adjacent (0, 1), target target sequence\n    is achieved.\n    \"\"\"\n    s = seq[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(seq) - 1):\n            if (s[i], s[i + 1]) == (0, 1):\n                (s[i], s[i + 1]) = (1, 0)\n    return s == target",
    "sols": [
      "def sol(target=[0, 1, 0, 1, 0, 0, 1], n_steps=0):\n    s = target[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(target) - 2, -1, -1):\n            if (s[i], s[i + 1]) == (1, 0):\n                (s[i], s[i + 1]) = (0, 1)\n    return s"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 266 B](https://codeforces.com/problemset/problem/266/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Moving0s_7",
    "sat": "def sat(seq: List[int], target=[0, 0, 0, 0], n_steps=3):\n    \"\"\"\n    Find a sequence of 0's and 1's so that, after n_steps of swapping each adjacent (0, 1), target target sequence\n    is achieved.\n    \"\"\"\n    s = seq[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(seq) - 1):\n            if (s[i], s[i + 1]) == (0, 1):\n                (s[i], s[i + 1]) = (1, 0)\n    return s == target",
    "sols": [
      "def sol(target=[0, 0, 0, 0], n_steps=3):\n    s = target[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(target) - 2, -1, -1):\n            if (s[i], s[i + 1]) == (1, 0):\n                (s[i], s[i + 1]) = (0, 1)\n    return s"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 266 B](https://codeforces.com/problemset/problem/266/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Moving0s_8",
    "sat": "def sat(seq: List[int], target=[1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], n_steps=1):\n    \"\"\"\n    Find a sequence of 0's and 1's so that, after n_steps of swapping each adjacent (0, 1), target target sequence\n    is achieved.\n    \"\"\"\n    s = seq[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(seq) - 1):\n            if (s[i], s[i + 1]) == (0, 1):\n                (s[i], s[i + 1]) = (1, 0)\n    return s == target",
    "sols": [
      "def sol(target=[1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], n_steps=1):\n    s = target[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(target) - 2, -1, -1):\n            if (s[i], s[i + 1]) == (1, 0):\n                (s[i], s[i + 1]) = (0, 1)\n    return s"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 266 B](https://codeforces.com/problemset/problem/266/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Moving0s_9",
    "sat": "def sat(seq: List[int], target=[1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0], n_steps=0):\n    \"\"\"\n    Find a sequence of 0's and 1's so that, after n_steps of swapping each adjacent (0, 1), target target sequence\n    is achieved.\n    \"\"\"\n    s = seq[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(seq) - 1):\n            if (s[i], s[i + 1]) == (0, 1):\n                (s[i], s[i + 1]) = (1, 0)\n    return s == target",
    "sols": [
      "def sol(target=[1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0], n_steps=0):\n    s = target[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(target) - 2, -1, -1):\n            if (s[i], s[i + 1]) == (1, 0):\n                (s[i], s[i + 1]) = (0, 1)\n    return s"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 266 B](https://codeforces.com/problemset/problem/266/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Factor47_0",
    "sat": "def sat(d: int, n=6002685529):\n    \"\"\"Find a integer factor of n whose decimal representation consists only of 7's and 4's.\"\"\"\n    return n % d == 0 and all(i in \"47\" for i in str(d))",
    "sols": [
      "def sol(n=6002685529):\n    def helper(so_far, k):\n        if k > 0:\n            return helper(so_far * 10 + 4, k - 1) or helper(so_far * 10 + 7, k - 1)\n        return (n % so_far == 0) and so_far\n\n    for length in range(1, len(str(n)) // 2 + 2):\n        ans = helper(0, length)\n        if ans:\n            return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 122 A](https://codeforces.com/problemset/problem/122/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Factor47_1",
    "sat": "def sat(d: int, n=16):\n    \"\"\"Find a integer factor of n whose decimal representation consists only of 7's and 4's.\"\"\"\n    return n % d == 0 and all(i in \"47\" for i in str(d))",
    "sols": [
      "def sol(n=16):\n    def helper(so_far, k):\n        if k > 0:\n            return helper(so_far * 10 + 4, k - 1) or helper(so_far * 10 + 7, k - 1)\n        return (n % so_far == 0) and so_far\n\n    for length in range(1, len(str(n)) // 2 + 2):\n        ans = helper(0, length)\n        if ans:\n            return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 122 A](https://codeforces.com/problemset/problem/122/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Factor47_2",
    "sat": "def sat(d: int, n=433459952851983617609247):\n    \"\"\"Find a integer factor of n whose decimal representation consists only of 7's and 4's.\"\"\"\n    return n % d == 0 and all(i in \"47\" for i in str(d))",
    "sols": [
      "def sol(n=433459952851983617609247):\n    def helper(so_far, k):\n        if k > 0:\n            return helper(so_far * 10 + 4, k - 1) or helper(so_far * 10 + 7, k - 1)\n        return (n % so_far == 0) and so_far\n\n    for length in range(1, len(str(n)) // 2 + 2):\n        ans = helper(0, length)\n        if ans:\n            return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 122 A](https://codeforces.com/problemset/problem/122/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Factor47_3",
    "sat": "def sat(d: int, n=738195924589532712188415):\n    \"\"\"Find a integer factor of n whose decimal representation consists only of 7's and 4's.\"\"\"\n    return n % d == 0 and all(i in \"47\" for i in str(d))",
    "sols": [
      "def sol(n=738195924589532712188415):\n    def helper(so_far, k):\n        if k > 0:\n            return helper(so_far * 10 + 4, k - 1) or helper(so_far * 10 + 7, k - 1)\n        return (n % so_far == 0) and so_far\n\n    for length in range(1, len(str(n)) // 2 + 2):\n        ans = helper(0, length)\n        if ans:\n            return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 122 A](https://codeforces.com/problemset/problem/122/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Factor47_4",
    "sat": "def sat(d: int, n=323190690645573746957862):\n    \"\"\"Find a integer factor of n whose decimal representation consists only of 7's and 4's.\"\"\"\n    return n % d == 0 and all(i in \"47\" for i in str(d))",
    "sols": [
      "def sol(n=323190690645573746957862):\n    def helper(so_far, k):\n        if k > 0:\n            return helper(so_far * 10 + 4, k - 1) or helper(so_far * 10 + 7, k - 1)\n        return (n % so_far == 0) and so_far\n\n    for length in range(1, len(str(n)) // 2 + 2):\n        ans = helper(0, length)\n        if ans:\n            return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 122 A](https://codeforces.com/problemset/problem/122/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Factor47_5",
    "sat": "def sat(d: int, n=77029799848890981965046):\n    \"\"\"Find a integer factor of n whose decimal representation consists only of 7's and 4's.\"\"\"\n    return n % d == 0 and all(i in \"47\" for i in str(d))",
    "sols": [
      "def sol(n=77029799848890981965046):\n    def helper(so_far, k):\n        if k > 0:\n            return helper(so_far * 10 + 4, k - 1) or helper(so_far * 10 + 7, k - 1)\n        return (n % so_far == 0) and so_far\n\n    for length in range(1, len(str(n)) // 2 + 2):\n        ans = helper(0, length)\n        if ans:\n            return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 122 A](https://codeforces.com/problemset/problem/122/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Factor47_6",
    "sat": "def sat(d: int, n=20):\n    \"\"\"Find a integer factor of n whose decimal representation consists only of 7's and 4's.\"\"\"\n    return n % d == 0 and all(i in \"47\" for i in str(d))",
    "sols": [
      "def sol(n=20):\n    def helper(so_far, k):\n        if k > 0:\n            return helper(so_far * 10 + 4, k - 1) or helper(so_far * 10 + 7, k - 1)\n        return (n % so_far == 0) and so_far\n\n    for length in range(1, len(str(n)) // 2 + 2):\n        ans = helper(0, length)\n        if ans:\n            return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 122 A](https://codeforces.com/problemset/problem/122/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Factor47_7",
    "sat": "def sat(d: int, n=23249659):\n    \"\"\"Find a integer factor of n whose decimal representation consists only of 7's and 4's.\"\"\"\n    return n % d == 0 and all(i in \"47\" for i in str(d))",
    "sols": [
      "def sol(n=23249659):\n    def helper(so_far, k):\n        if k > 0:\n            return helper(so_far * 10 + 4, k - 1) or helper(so_far * 10 + 7, k - 1)\n        return (n % so_far == 0) and so_far\n\n    for length in range(1, len(str(n)) // 2 + 2):\n        ans = helper(0, length)\n        if ans:\n            return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 122 A](https://codeforces.com/problemset/problem/122/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Factor47_8",
    "sat": "def sat(d: int, n=3854):\n    \"\"\"Find a integer factor of n whose decimal representation consists only of 7's and 4's.\"\"\"\n    return n % d == 0 and all(i in \"47\" for i in str(d))",
    "sols": [
      "def sol(n=3854):\n    def helper(so_far, k):\n        if k > 0:\n            return helper(so_far * 10 + 4, k - 1) or helper(so_far * 10 + 7, k - 1)\n        return (n % so_far == 0) and so_far\n\n    for length in range(1, len(str(n)) // 2 + 2):\n        ans = helper(0, length)\n        if ans:\n            return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 122 A](https://codeforces.com/problemset/problem/122/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Factor47_9",
    "sat": "def sat(d: int, n=30902441):\n    \"\"\"Find a integer factor of n whose decimal representation consists only of 7's and 4's.\"\"\"\n    return n % d == 0 and all(i in \"47\" for i in str(d))",
    "sols": [
      "def sol(n=30902441):\n    def helper(so_far, k):\n        if k > 0:\n            return helper(so_far * 10 + 4, k - 1) or helper(so_far * 10 + 7, k - 1)\n        return (n % so_far == 0) and so_far\n\n    for length in range(1, len(str(n)) // 2 + 2):\n        ans = helper(0, length)\n        if ans:\n            return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 122 A](https://codeforces.com/problemset/problem/122/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Count47_0",
    "sat": "def sat(d: int, n=123456789):\n    \"\"\"\n    Find a number bigger than n whose decimal representation has k 4's and 7's where k's decimal representation\n    consists only of 4's and 7's\n    \"\"\"\n    return d > n and all(i in \"47\" for i in str(str(d).count(\"4\") + str(d).count(\"7\")))",
    "sols": [
      "def sol(n=123456789):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 110 A](https://codeforces.com/problemset/problem/110/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Count47_1",
    "sat": "def sat(d: int, n=659104579100082212):\n    \"\"\"\n    Find a number bigger than n whose decimal representation has k 4's and 7's where k's decimal representation\n    consists only of 4's and 7's\n    \"\"\"\n    return d > n and all(i in \"47\" for i in str(str(d).count(\"4\") + str(d).count(\"7\")))",
    "sols": [
      "def sol(n=659104579100082212):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 110 A](https://codeforces.com/problemset/problem/110/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Count47_2",
    "sat": "def sat(d: int, n=476988101965):\n    \"\"\"\n    Find a number bigger than n whose decimal representation has k 4's and 7's where k's decimal representation\n    consists only of 4's and 7's\n    \"\"\"\n    return d > n and all(i in \"47\" for i in str(str(d).count(\"4\") + str(d).count(\"7\")))",
    "sols": [
      "def sol(n=476988101965):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 110 A](https://codeforces.com/problemset/problem/110/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Count47_3",
    "sat": "def sat(d: int, n=3169877099077541094754):\n    \"\"\"\n    Find a number bigger than n whose decimal representation has k 4's and 7's where k's decimal representation\n    consists only of 4's and 7's\n    \"\"\"\n    return d > n and all(i in \"47\" for i in str(str(d).count(\"4\") + str(d).count(\"7\")))",
    "sols": [
      "def sol(n=3169877099077541094754):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 110 A](https://codeforces.com/problemset/problem/110/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Count47_4",
    "sat": "def sat(d: int, n=707):\n    \"\"\"\n    Find a number bigger than n whose decimal representation has k 4's and 7's where k's decimal representation\n    consists only of 4's and 7's\n    \"\"\"\n    return d > n and all(i in \"47\" for i in str(str(d).count(\"4\") + str(d).count(\"7\")))",
    "sols": [
      "def sol(n=707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 110 A](https://codeforces.com/problemset/problem/110/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Count47_5",
    "sat": "def sat(d: int, n=542879438572585977162504):\n    \"\"\"\n    Find a number bigger than n whose decimal representation has k 4's and 7's where k's decimal representation\n    consists only of 4's and 7's\n    \"\"\"\n    return d > n and all(i in \"47\" for i in str(str(d).count(\"4\") + str(d).count(\"7\")))",
    "sols": [
      "def sol(n=542879438572585977162504):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 110 A](https://codeforces.com/problemset/problem/110/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Count47_6",
    "sat": "def sat(d: int, n=394858):\n    \"\"\"\n    Find a number bigger than n whose decimal representation has k 4's and 7's where k's decimal representation\n    consists only of 4's and 7's\n    \"\"\"\n    return d > n and all(i in \"47\" for i in str(str(d).count(\"4\") + str(d).count(\"7\")))",
    "sols": [
      "def sol(n=394858):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 110 A](https://codeforces.com/problemset/problem/110/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Count47_7",
    "sat": "def sat(d: int, n=215559299677888):\n    \"\"\"\n    Find a number bigger than n whose decimal representation has k 4's and 7's where k's decimal representation\n    consists only of 4's and 7's\n    \"\"\"\n    return d > n and all(i in \"47\" for i in str(str(d).count(\"4\") + str(d).count(\"7\")))",
    "sols": [
      "def sol(n=215559299677888):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 110 A](https://codeforces.com/problemset/problem/110/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Count47_8",
    "sat": "def sat(d: int, n=6265261066951862):\n    \"\"\"\n    Find a number bigger than n whose decimal representation has k 4's and 7's where k's decimal representation\n    consists only of 4's and 7's\n    \"\"\"\n    return d > n and all(i in \"47\" for i in str(str(d).count(\"4\") + str(d).count(\"7\")))",
    "sols": [
      "def sol(n=6265261066951862):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 110 A](https://codeforces.com/problemset/problem/110/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Count47_9",
    "sat": "def sat(d: int, n=59663139191673979002523664098):\n    \"\"\"\n    Find a number bigger than n whose decimal representation has k 4's and 7's where k's decimal representation\n    consists only of 4's and 7's\n    \"\"\"\n    return d > n and all(i in \"47\" for i in str(str(d).count(\"4\") + str(d).count(\"7\")))",
    "sols": [
      "def sol(n=59663139191673979002523664098):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 110 A](https://codeforces.com/problemset/problem/110/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaybeReversed_0",
    "sat": "def sat(s: str, target=\"reverse me\", reverse=True):\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    return (s[::-1] == target) == reverse",
    "sols": [
      "def sol(target=\"reverse me\", reverse=True):\n    return target[::-1] if reverse else target + \"x\""
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 41 A](https://codeforces.com/problemset/problem/41/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaybeReversed_1",
    "sat": "def sat(s: str, target=\"thubonyna\", reverse=True):\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    return (s[::-1] == target) == reverse",
    "sols": [
      "def sol(target=\"thubonyna\", reverse=True):\n    return target[::-1] if reverse else target + \"x\""
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 41 A](https://codeforces.com/problemset/problem/41/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaybeReversed_2",
    "sat": "def sat(s: str, target=\"nivosypetextyzavalag\", reverse=False):\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    return (s[::-1] == target) == reverse",
    "sols": [
      "def sol(target=\"nivosypetextyzavalag\", reverse=False):\n    return target[::-1] if reverse else target + \"x\""
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 41 A](https://codeforces.com/problemset/problem/41/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaybeReversed_3",
    "sat": "def sat(s: str, target=\"l\", reverse=False):\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    return (s[::-1] == target) == reverse",
    "sols": [
      "def sol(target=\"l\", reverse=False):\n    return target[::-1] if reverse else target + \"x\""
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 41 A](https://codeforces.com/problemset/problem/41/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaybeReversed_4",
    "sat": "def sat(s: str, target=\"rechawewivetextovy\", reverse=True):\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    return (s[::-1] == target) == reverse",
    "sols": [
      "def sol(target=\"rechawewivetextovy\", reverse=True):\n    return target[::-1] if reverse else target + \"x\""
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 41 A](https://codeforces.com/problemset/problem/41/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaybeReversed_5",
    "sat": "def sat(s: str, target=\"pegirupethabus\", reverse=True):\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    return (s[::-1] == target) == reverse",
    "sols": [
      "def sol(target=\"pegirupethabus\", reverse=True):\n    return target[::-1] if reverse else target + \"x\""
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 41 A](https://codeforces.com/problemset/problem/41/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaybeReversed_6",
    "sat": "def sat(s: str, target=\"pewamyjol\", reverse=True):\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    return (s[::-1] == target) == reverse",
    "sols": [
      "def sol(target=\"pewamyjol\", reverse=True):\n    return target[::-1] if reverse else target + \"x\""
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 41 A](https://codeforces.com/problemset/problem/41/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaybeReversed_7",
    "sat": "def sat(s: str, target=\"vomo\", reverse=True):\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    return (s[::-1] == target) == reverse",
    "sols": [
      "def sol(target=\"vomo\", reverse=True):\n    return target[::-1] if reverse else target + \"x\""
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 41 A](https://codeforces.com/problemset/problem/41/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaybeReversed_8",
    "sat": "def sat(s: str, target=\"r\", reverse=True):\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    return (s[::-1] == target) == reverse",
    "sols": [
      "def sol(target=\"r\", reverse=True):\n    return target[::-1] if reverse else target + \"x\""
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 41 A](https://codeforces.com/problemset/problem/41/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaybeReversed_9",
    "sat": "def sat(s: str, target=\"dajachythe\", reverse=False):\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    return (s[::-1] == target) == reverse",
    "sols": [
      "def sol(target=\"dajachythe\", reverse=False):\n    return target[::-1] if reverse else target + \"x\""
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 41 A](https://codeforces.com/problemset/problem/41/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinBigger_0",
    "sat": "def sat(taken: List[int], val_counts=[[4, 3], [5, 2], [9, 3], [13, 13], [8, 11], [56, 1]], upper=11):\n    \"\"\"\n    The list of numbers val_counts represents multiple copies of integers, e.g.,\n    val_counts=[[3, 2], [4, 6]] corresponds to 3, 3, 4, 4, 4, 4, 4, 4\n    For each number, decide how many to take so that the total number taken is <= upper and the sum of those\n    taken exceeds half the total sum.\n    \"\"\"\n    advantage = 0\n    assert len(taken) == len(val_counts) and sum(taken) <= upper\n    for i, (val, count) in zip(taken, val_counts):\n        assert 0 <= i <= count\n        advantage += val * i - val * count / 2\n    return advantage > 0",
    "sols": [
      "def sol(val_counts=[[4, 3], [5, 2], [9, 3], [13, 13], [8, 11], [56, 1]], upper=11):\n    n = len(val_counts)\n    pi = sorted(range(n), key=lambda i: val_counts[i][0])\n    needed = sum(a * b for a, b in val_counts) / 2 + 0.1\n    ans = [0] * n\n    while needed > 0:\n        while val_counts[pi[-1]][1] == ans[pi[-1]]:\n            pi.pop()\n        i = pi[-1]\n        ans[i] += 1\n        needed -= val_counts[i][0]\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 160 A](https://codeforces.com/problemset/problem/160/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinBigger_1",
    "sat": "def sat(taken: List[int], val_counts=[[51, 67], [78, 13], [7, 68], [84, 54], [39, 38]], upper=66):\n    \"\"\"\n    The list of numbers val_counts represents multiple copies of integers, e.g.,\n    val_counts=[[3, 2], [4, 6]] corresponds to 3, 3, 4, 4, 4, 4, 4, 4\n    For each number, decide how many to take so that the total number taken is <= upper and the sum of those\n    taken exceeds half the total sum.\n    \"\"\"\n    advantage = 0\n    assert len(taken) == len(val_counts) and sum(taken) <= upper\n    for i, (val, count) in zip(taken, val_counts):\n        assert 0 <= i <= count\n        advantage += val * i - val * count / 2\n    return advantage > 0",
    "sols": [
      "def sol(val_counts=[[51, 67], [78, 13], [7, 68], [84, 54], [39, 38]], upper=66):\n    n = len(val_counts)\n    pi = sorted(range(n), key=lambda i: val_counts[i][0])\n    needed = sum(a * b for a, b in val_counts) / 2 + 0.1\n    ans = [0] * n\n    while needed > 0:\n        while val_counts[pi[-1]][1] == ans[pi[-1]]:\n            pi.pop()\n        i = pi[-1]\n        ans[i] += 1\n        needed -= val_counts[i][0]\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 160 A](https://codeforces.com/problemset/problem/160/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinBigger_2",
    "sat": "def sat(taken: List[int], val_counts=[[28, 29], [42, 54], [62, 85], [42, 95], [92, 32], [36, 35], [78, 56], [43, 20], [49, 17]], upper=153):\n    \"\"\"\n    The list of numbers val_counts represents multiple copies of integers, e.g.,\n    val_counts=[[3, 2], [4, 6]] corresponds to 3, 3, 4, 4, 4, 4, 4, 4\n    For each number, decide how many to take so that the total number taken is <= upper and the sum of those\n    taken exceeds half the total sum.\n    \"\"\"\n    advantage = 0\n    assert len(taken) == len(val_counts) and sum(taken) <= upper\n    for i, (val, count) in zip(taken, val_counts):\n        assert 0 <= i <= count\n        advantage += val * i - val * count / 2\n    return advantage > 0",
    "sols": [
      "def sol(val_counts=[[28, 29], [42, 54], [62, 85], [42, 95], [92, 32], [36, 35], [78, 56], [43, 20], [49, 17]], upper=153):\n    n = len(val_counts)\n    pi = sorted(range(n), key=lambda i: val_counts[i][0])\n    needed = sum(a * b for a, b in val_counts) / 2 + 0.1\n    ans = [0] * n\n    while needed > 0:\n        while val_counts[pi[-1]][1] == ans[pi[-1]]:\n            pi.pop()\n        i = pi[-1]\n        ans[i] += 1\n        needed -= val_counts[i][0]\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 160 A](https://codeforces.com/problemset/problem/160/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinBigger_3",
    "sat": "def sat(taken: List[int], val_counts=[[44, 92], [28, 7], [56, 37], [37, 66]], upper=90):\n    \"\"\"\n    The list of numbers val_counts represents multiple copies of integers, e.g.,\n    val_counts=[[3, 2], [4, 6]] corresponds to 3, 3, 4, 4, 4, 4, 4, 4\n    For each number, decide how many to take so that the total number taken is <= upper and the sum of those\n    taken exceeds half the total sum.\n    \"\"\"\n    advantage = 0\n    assert len(taken) == len(val_counts) and sum(taken) <= upper\n    for i, (val, count) in zip(taken, val_counts):\n        assert 0 <= i <= count\n        advantage += val * i - val * count / 2\n    return advantage > 0",
    "sols": [
      "def sol(val_counts=[[44, 92], [28, 7], [56, 37], [37, 66]], upper=90):\n    n = len(val_counts)\n    pi = sorted(range(n), key=lambda i: val_counts[i][0])\n    needed = sum(a * b for a, b in val_counts) / 2 + 0.1\n    ans = [0] * n\n    while needed > 0:\n        while val_counts[pi[-1]][1] == ans[pi[-1]]:\n            pi.pop()\n        i = pi[-1]\n        ans[i] += 1\n        needed -= val_counts[i][0]\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 160 A](https://codeforces.com/problemset/problem/160/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinBigger_4",
    "sat": "def sat(taken: List[int], val_counts=[[23, 93], [64, 14], [36, 8], [89, 92]], upper=65):\n    \"\"\"\n    The list of numbers val_counts represents multiple copies of integers, e.g.,\n    val_counts=[[3, 2], [4, 6]] corresponds to 3, 3, 4, 4, 4, 4, 4, 4\n    For each number, decide how many to take so that the total number taken is <= upper and the sum of those\n    taken exceeds half the total sum.\n    \"\"\"\n    advantage = 0\n    assert len(taken) == len(val_counts) and sum(taken) <= upper\n    for i, (val, count) in zip(taken, val_counts):\n        assert 0 <= i <= count\n        advantage += val * i - val * count / 2\n    return advantage > 0",
    "sols": [
      "def sol(val_counts=[[23, 93], [64, 14], [36, 8], [89, 92]], upper=65):\n    n = len(val_counts)\n    pi = sorted(range(n), key=lambda i: val_counts[i][0])\n    needed = sum(a * b for a, b in val_counts) / 2 + 0.1\n    ans = [0] * n\n    while needed > 0:\n        while val_counts[pi[-1]][1] == ans[pi[-1]]:\n            pi.pop()\n        i = pi[-1]\n        ans[i] += 1\n        needed -= val_counts[i][0]\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 160 A](https://codeforces.com/problemset/problem/160/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinBigger_5",
    "sat": "def sat(taken: List[int], val_counts=[[6, 52], [15, 87], [35, 77], [76, 45], [94, 72], [34, 63], [83, 32], [75, 38], [61, 31]], upper=139):\n    \"\"\"\n    The list of numbers val_counts represents multiple copies of integers, e.g.,\n    val_counts=[[3, 2], [4, 6]] corresponds to 3, 3, 4, 4, 4, 4, 4, 4\n    For each number, decide how many to take so that the total number taken is <= upper and the sum of those\n    taken exceeds half the total sum.\n    \"\"\"\n    advantage = 0\n    assert len(taken) == len(val_counts) and sum(taken) <= upper\n    for i, (val, count) in zip(taken, val_counts):\n        assert 0 <= i <= count\n        advantage += val * i - val * count / 2\n    return advantage > 0",
    "sols": [
      "def sol(val_counts=[[6, 52], [15, 87], [35, 77], [76, 45], [94, 72], [34, 63], [83, 32], [75, 38], [61, 31]], upper=139):\n    n = len(val_counts)\n    pi = sorted(range(n), key=lambda i: val_counts[i][0])\n    needed = sum(a * b for a, b in val_counts) / 2 + 0.1\n    ans = [0] * n\n    while needed > 0:\n        while val_counts[pi[-1]][1] == ans[pi[-1]]:\n            pi.pop()\n        i = pi[-1]\n        ans[i] += 1\n        needed -= val_counts[i][0]\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 160 A](https://codeforces.com/problemset/problem/160/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinBigger_6",
    "sat": "def sat(taken: List[int], val_counts=[[13, 15]], upper=8):\n    \"\"\"\n    The list of numbers val_counts represents multiple copies of integers, e.g.,\n    val_counts=[[3, 2], [4, 6]] corresponds to 3, 3, 4, 4, 4, 4, 4, 4\n    For each number, decide how many to take so that the total number taken is <= upper and the sum of those\n    taken exceeds half the total sum.\n    \"\"\"\n    advantage = 0\n    assert len(taken) == len(val_counts) and sum(taken) <= upper\n    for i, (val, count) in zip(taken, val_counts):\n        assert 0 <= i <= count\n        advantage += val * i - val * count / 2\n    return advantage > 0",
    "sols": [
      "def sol(val_counts=[[13, 15]], upper=8):\n    n = len(val_counts)\n    pi = sorted(range(n), key=lambda i: val_counts[i][0])\n    needed = sum(a * b for a, b in val_counts) / 2 + 0.1\n    ans = [0] * n\n    while needed > 0:\n        while val_counts[pi[-1]][1] == ans[pi[-1]]:\n            pi.pop()\n        i = pi[-1]\n        ans[i] += 1\n        needed -= val_counts[i][0]\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 160 A](https://codeforces.com/problemset/problem/160/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinBigger_7",
    "sat": "def sat(taken: List[int], val_counts=[[8, 14], [39, 4], [68, 80], [60, 28], [30, 76], [47, 35], [44, 47]], upper=101):\n    \"\"\"\n    The list of numbers val_counts represents multiple copies of integers, e.g.,\n    val_counts=[[3, 2], [4, 6]] corresponds to 3, 3, 4, 4, 4, 4, 4, 4\n    For each number, decide how many to take so that the total number taken is <= upper and the sum of those\n    taken exceeds half the total sum.\n    \"\"\"\n    advantage = 0\n    assert len(taken) == len(val_counts) and sum(taken) <= upper\n    for i, (val, count) in zip(taken, val_counts):\n        assert 0 <= i <= count\n        advantage += val * i - val * count / 2\n    return advantage > 0",
    "sols": [
      "def sol(val_counts=[[8, 14], [39, 4], [68, 80], [60, 28], [30, 76], [47, 35], [44, 47]], upper=101):\n    n = len(val_counts)\n    pi = sorted(range(n), key=lambda i: val_counts[i][0])\n    needed = sum(a * b for a, b in val_counts) / 2 + 0.1\n    ans = [0] * n\n    while needed > 0:\n        while val_counts[pi[-1]][1] == ans[pi[-1]]:\n            pi.pop()\n        i = pi[-1]\n        ans[i] += 1\n        needed -= val_counts[i][0]\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 160 A](https://codeforces.com/problemset/problem/160/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinBigger_8",
    "sat": "def sat(taken: List[int], val_counts=[[8, 77], [53, 87], [34, 91], [59, 66], [3, 33], [21, 5], [68, 71]], upper=136):\n    \"\"\"\n    The list of numbers val_counts represents multiple copies of integers, e.g.,\n    val_counts=[[3, 2], [4, 6]] corresponds to 3, 3, 4, 4, 4, 4, 4, 4\n    For each number, decide how many to take so that the total number taken is <= upper and the sum of those\n    taken exceeds half the total sum.\n    \"\"\"\n    advantage = 0\n    assert len(taken) == len(val_counts) and sum(taken) <= upper\n    for i, (val, count) in zip(taken, val_counts):\n        assert 0 <= i <= count\n        advantage += val * i - val * count / 2\n    return advantage > 0",
    "sols": [
      "def sol(val_counts=[[8, 77], [53, 87], [34, 91], [59, 66], [3, 33], [21, 5], [68, 71]], upper=136):\n    n = len(val_counts)\n    pi = sorted(range(n), key=lambda i: val_counts[i][0])\n    needed = sum(a * b for a, b in val_counts) / 2 + 0.1\n    ans = [0] * n\n    while needed > 0:\n        while val_counts[pi[-1]][1] == ans[pi[-1]]:\n            pi.pop()\n        i = pi[-1]\n        ans[i] += 1\n        needed -= val_counts[i][0]\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 160 A](https://codeforces.com/problemset/problem/160/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinBigger_9",
    "sat": "def sat(taken: List[int], val_counts=[[16, 79], [21, 24], [49, 20], [12, 3]], upper=40):\n    \"\"\"\n    The list of numbers val_counts represents multiple copies of integers, e.g.,\n    val_counts=[[3, 2], [4, 6]] corresponds to 3, 3, 4, 4, 4, 4, 4, 4\n    For each number, decide how many to take so that the total number taken is <= upper and the sum of those\n    taken exceeds half the total sum.\n    \"\"\"\n    advantage = 0\n    assert len(taken) == len(val_counts) and sum(taken) <= upper\n    for i, (val, count) in zip(taken, val_counts):\n        assert 0 <= i <= count\n        advantage += val * i - val * count / 2\n    return advantage > 0",
    "sols": [
      "def sol(val_counts=[[16, 79], [21, 24], [49, 20], [12, 3]], upper=40):\n    n = len(val_counts)\n    pi = sorted(range(n), key=lambda i: val_counts[i][0])\n    needed = sum(a * b for a, b in val_counts) / 2 + 0.1\n    ans = [0] * n\n    while needed > 0:\n        while val_counts[pi[-1]][1] == ans[pi[-1]]:\n            pi.pop()\n        i = pi[-1]\n        ans[i] += 1\n        needed -= val_counts[i][0]\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 160 A](https://codeforces.com/problemset/problem/160/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Dada_0",
    "sat": "def sat(s: str, a=5129, d=17):\n    \"\"\"Find a string with a given number of a's and d's\"\"\"\n    return s.count(\"a\") == a and s.count(\"d\") == d and len(s) == a + d",
    "sols": [
      "def sol(a=5129, d=17):\n    return \"a\" * a + \"d\" * d"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 734 A](https://codeforces.com/problemset/problem/734/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Dada_1",
    "sat": "def sat(s: str, a=5798, d=1873):\n    \"\"\"Find a string with a given number of a's and d's\"\"\"\n    return s.count(\"a\") == a and s.count(\"d\") == d and len(s) == a + d",
    "sols": [
      "def sol(a=5798, d=1873):\n    return \"a\" * a + \"d\" * d"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 734 A](https://codeforces.com/problemset/problem/734/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Dada_2",
    "sat": "def sat(s: str, a=2645, d=1270):\n    \"\"\"Find a string with a given number of a's and d's\"\"\"\n    return s.count(\"a\") == a and s.count(\"d\") == d and len(s) == a + d",
    "sols": [
      "def sol(a=2645, d=1270):\n    return \"a\" * a + \"d\" * d"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 734 A](https://codeforces.com/problemset/problem/734/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Dada_3",
    "sat": "def sat(s: str, a=2996, d=6808):\n    \"\"\"Find a string with a given number of a's and d's\"\"\"\n    return s.count(\"a\") == a and s.count(\"d\") == d and len(s) == a + d",
    "sols": [
      "def sol(a=2996, d=6808):\n    return \"a\" * a + \"d\" * d"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 734 A](https://codeforces.com/problemset/problem/734/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Dada_4",
    "sat": "def sat(s: str, a=4763, d=8408):\n    \"\"\"Find a string with a given number of a's and d's\"\"\"\n    return s.count(\"a\") == a and s.count(\"d\") == d and len(s) == a + d",
    "sols": [
      "def sol(a=4763, d=8408):\n    return \"a\" * a + \"d\" * d"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 734 A](https://codeforces.com/problemset/problem/734/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Dada_5",
    "sat": "def sat(s: str, a=8269, d=1995):\n    \"\"\"Find a string with a given number of a's and d's\"\"\"\n    return s.count(\"a\") == a and s.count(\"d\") == d and len(s) == a + d",
    "sols": [
      "def sol(a=8269, d=1995):\n    return \"a\" * a + \"d\" * d"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 734 A](https://codeforces.com/problemset/problem/734/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Dada_6",
    "sat": "def sat(s: str, a=167, d=5291):\n    \"\"\"Find a string with a given number of a's and d's\"\"\"\n    return s.count(\"a\") == a and s.count(\"d\") == d and len(s) == a + d",
    "sols": [
      "def sol(a=167, d=5291):\n    return \"a\" * a + \"d\" * d"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 734 A](https://codeforces.com/problemset/problem/734/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Dada_7",
    "sat": "def sat(s: str, a=8910, d=4482):\n    \"\"\"Find a string with a given number of a's and d's\"\"\"\n    return s.count(\"a\") == a and s.count(\"d\") == d and len(s) == a + d",
    "sols": [
      "def sol(a=8910, d=4482):\n    return \"a\" * a + \"d\" * d"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 734 A](https://codeforces.com/problemset/problem/734/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Dada_8",
    "sat": "def sat(s: str, a=2980, d=2470):\n    \"\"\"Find a string with a given number of a's and d's\"\"\"\n    return s.count(\"a\") == a and s.count(\"d\") == d and len(s) == a + d",
    "sols": [
      "def sol(a=2980, d=2470):\n    return \"a\" * a + \"d\" * d"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 734 A](https://codeforces.com/problemset/problem/734/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "Dada_9",
    "sat": "def sat(s: str, a=6355, d=1797):\n    \"\"\"Find a string with a given number of a's and d's\"\"\"\n    return s.count(\"a\") == a and s.count(\"d\") == d and len(s) == a + d",
    "sols": [
      "def sol(a=6355, d=1797):\n    return \"a\" * a + \"d\" * d"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 734 A](https://codeforces.com/problemset/problem/734/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DistinctDigits_0",
    "sat": "def sat(nums: List[int], a=100, b=1000, count=648):\n    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"\n    assert all(len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums)\n    return len(set(nums)) >= count",
    "sols": [
      "def sol(a=100, b=1000, count=648):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 271 A](https://codeforces.com/problemset/problem/271/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DistinctDigits_1",
    "sat": "def sat(nums: List[int], a=79, b=169, count=67):\n    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"\n    assert all(len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums)\n    return len(set(nums)) >= count",
    "sols": [
      "def sol(a=79, b=169, count=67):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 271 A](https://codeforces.com/problemset/problem/271/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DistinctDigits_2",
    "sat": "def sat(nums: List[int], a=31, b=105, count=66):\n    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"\n    assert all(len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums)\n    return len(set(nums)) >= count",
    "sols": [
      "def sol(a=31, b=105, count=66):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 271 A](https://codeforces.com/problemset/problem/271/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DistinctDigits_3",
    "sat": "def sat(nums: List[int], a=52, b=95, count=40):\n    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"\n    assert all(len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums)\n    return len(set(nums)) >= count",
    "sols": [
      "def sol(a=52, b=95, count=40):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 271 A](https://codeforces.com/problemset/problem/271/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DistinctDigits_4",
    "sat": "def sat(nums: List[int], a=136, b=176, count=34):\n    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"\n    assert all(len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums)\n    return len(set(nums)) >= count",
    "sols": [
      "def sol(a=136, b=176, count=34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 271 A](https://codeforces.com/problemset/problem/271/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DistinctDigits_5",
    "sat": "def sat(nums: List[int], a=19, b=120, count=82):\n    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"\n    assert all(len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums)\n    return len(set(nums)) >= count",
    "sols": [
      "def sol(a=19, b=120, count=82):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 271 A](https://codeforces.com/problemset/problem/271/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DistinctDigits_6",
    "sat": "def sat(nums: List[int], a=55, b=92, count=34):\n    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"\n    assert all(len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums)\n    return len(set(nums)) >= count",
    "sols": [
      "def sol(a=55, b=92, count=34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 271 A](https://codeforces.com/problemset/problem/271/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DistinctDigits_7",
    "sat": "def sat(nums: List[int], a=451, b=707, count=189):\n    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"\n    assert all(len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums)\n    return len(set(nums)) >= count",
    "sols": [
      "def sol(a=451, b=707, count=189):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 271 A](https://codeforces.com/problemset/problem/271/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DistinctDigits_8",
    "sat": "def sat(nums: List[int], a=20, b=649, count=472):\n    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"\n    assert all(len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums)\n    return len(set(nums)) >= count",
    "sols": [
      "def sol(a=20, b=649, count=472):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 271 A](https://codeforces.com/problemset/problem/271/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DistinctDigits_9",
    "sat": "def sat(nums: List[int], a=287, b=989, count=514):\n    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"\n    assert all(len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums)\n    return len(set(nums)) >= count",
    "sols": [
      "def sol(a=287, b=989, count=514):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 271 A](https://codeforces.com/problemset/problem/271/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "EasySum_0",
    "sat": "def sat(tot: int, nums=[2, 8, 25, 18, 99, 11, 17, 16], thresh=17):\n    \"\"\"Add up 1 or 2 for numbers in a list depending on whether they exceed a threshold\"\"\"\n    return tot == sum(1 if i < thresh else 2 for i in nums)",
    "sols": [
      "def sol(nums=[2, 8, 25, 18, 99, 11, 17, 16], thresh=17):\n    return sum(1 if i < thresh else 2 for i in nums)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 677 A](https://codeforces.com/problemset/problem/677/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "EasySum_1",
    "sat": "def sat(tot: int, nums=[60, 63, 11], thresh=99):\n    \"\"\"Add up 1 or 2 for numbers in a list depending on whether they exceed a threshold\"\"\"\n    return tot == sum(1 if i < thresh else 2 for i in nums)",
    "sols": [
      "def sol(nums=[60, 63, 11], thresh=99):\n    return sum(1 if i < thresh else 2 for i in nums)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 677 A](https://codeforces.com/problemset/problem/677/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "EasySum_2",
    "sat": "def sat(tot: int, nums=[32, 24, 19, 88, 6, 33, 13], thresh=33):\n    \"\"\"Add up 1 or 2 for numbers in a list depending on whether they exceed a threshold\"\"\"\n    return tot == sum(1 if i < thresh else 2 for i in nums)",
    "sols": [
      "def sol(nums=[32, 24, 19, 88, 6, 33, 13], thresh=33):\n    return sum(1 if i < thresh else 2 for i in nums)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 677 A](https://codeforces.com/problemset/problem/677/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "EasySum_3",
    "sat": "def sat(tot: int, nums=[60, 72, 32, 29, 90, 9, 39, 67, 31, 71, 68, 72, 28, 85, 75, 60, 42, 66, 4, 71, 57, 45, 88, 20, 66, 97, 33, 43, 48], thresh=30):\n    \"\"\"Add up 1 or 2 for numbers in a list depending on whether they exceed a threshold\"\"\"\n    return tot == sum(1 if i < thresh else 2 for i in nums)",
    "sols": [
      "def sol(nums=[60, 72, 32, 29, 90, 9, 39, 67, 31, 71, 68, 72, 28, 85, 75, 60, 42, 66, 4, 71, 57, 45, 88, 20, 66, 97, 33, 43, 48], thresh=30):\n    return sum(1 if i < thresh else 2 for i in nums)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 677 A](https://codeforces.com/problemset/problem/677/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "EasySum_4",
    "sat": "def sat(tot: int, nums=[61, 98, 33, 32, 4, 99, 91, 63, 76, 83, 52, 0, 19, 49, 85, 5, 54, 71, 41, 93, 54, 78, 92], thresh=91):\n    \"\"\"Add up 1 or 2 for numbers in a list depending on whether they exceed a threshold\"\"\"\n    return tot == sum(1 if i < thresh else 2 for i in nums)",
    "sols": [
      "def sol(nums=[61, 98, 33, 32, 4, 99, 91, 63, 76, 83, 52, 0, 19, 49, 85, 5, 54, 71, 41, 93, 54, 78, 92], thresh=91):\n    return sum(1 if i < thresh else 2 for i in nums)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 677 A](https://codeforces.com/problemset/problem/677/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "EasySum_5",
    "sat": "def sat(tot: int, nums: List[int]=[], thresh=1):\n    \"\"\"Add up 1 or 2 for numbers in a list depending on whether they exceed a threshold\"\"\"\n    return tot == sum(1 if i < thresh else 2 for i in nums)",
    "sols": [
      "def sol(nums=[], thresh=1):\n    return sum(1 if i < thresh else 2 for i in nums)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 677 A](https://codeforces.com/problemset/problem/677/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "EasySum_6",
    "sat": "def sat(tot: int, nums=[26, 73, 42, 21, 69, 76, 20, 39, 43, 35, 59, 48, 89, 94, 29], thresh=55):\n    \"\"\"Add up 1 or 2 for numbers in a list depending on whether they exceed a threshold\"\"\"\n    return tot == sum(1 if i < thresh else 2 for i in nums)",
    "sols": [
      "def sol(nums=[26, 73, 42, 21, 69, 76, 20, 39, 43, 35, 59, 48, 89, 94, 29], thresh=55):\n    return sum(1 if i < thresh else 2 for i in nums)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 677 A](https://codeforces.com/problemset/problem/677/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "EasySum_7",
    "sat": "def sat(tot: int, nums=[67, 66, 98, 5, 22, 52, 43, 37], thresh=55):\n    \"\"\"Add up 1 or 2 for numbers in a list depending on whether they exceed a threshold\"\"\"\n    return tot == sum(1 if i < thresh else 2 for i in nums)",
    "sols": [
      "def sol(nums=[67, 66, 98, 5, 22, 52, 43, 37], thresh=55):\n    return sum(1 if i < thresh else 2 for i in nums)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 677 A](https://codeforces.com/problemset/problem/677/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "EasySum_8",
    "sat": "def sat(tot: int, nums=[80, 99], thresh=77):\n    \"\"\"Add up 1 or 2 for numbers in a list depending on whether they exceed a threshold\"\"\"\n    return tot == sum(1 if i < thresh else 2 for i in nums)",
    "sols": [
      "def sol(nums=[80, 99], thresh=77):\n    return sum(1 if i < thresh else 2 for i in nums)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 677 A](https://codeforces.com/problemset/problem/677/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "EasySum_9",
    "sat": "def sat(tot: int, nums=[79], thresh=46):\n    \"\"\"Add up 1 or 2 for numbers in a list depending on whether they exceed a threshold\"\"\"\n    return tot == sum(1 if i < thresh else 2 for i in nums)",
    "sols": [
      "def sol(nums=[79], thresh=46):\n    return sum(1 if i < thresh else 2 for i in nums)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 677 A](https://codeforces.com/problemset/problem/677/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "GimmeChars_0",
    "sat": "def sat(s: str, chars=['o', 'h', 'e', 'l', ' ', 'w', '!', 'r', 'd']):\n    \"\"\"Find a string with certain characters\"\"\"\n    for c in chars:\n        if c not in s:\n            return False\n    return True",
    "sols": [],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 133 A](https://codeforces.com/problemset/problem/133/A), easy",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "GimmeChars_1",
    "sat": "def sat(s: str, chars=['1', 'j', '3', 'Q', 'e']):\n    \"\"\"Find a string with certain characters\"\"\"\n    for c in chars:\n        if c not in s:\n            return False\n    return True",
    "sols": [],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 133 A](https://codeforces.com/problemset/problem/133/A), easy",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "GimmeChars_2",
    "sat": "def sat(s: str, chars=['[', '/', 'g']):\n    \"\"\"Find a string with certain characters\"\"\"\n    for c in chars:\n        if c not in s:\n            return False\n    return True",
    "sols": [],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 133 A](https://codeforces.com/problemset/problem/133/A), easy",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "GimmeChars_3",
    "sat": "def sat(s: str, chars=[' ', 'e', '%', '1', 'f']):\n    \"\"\"Find a string with certain characters\"\"\"\n    for c in chars:\n        if c not in s:\n            return False\n    return True",
    "sols": [],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 133 A](https://codeforces.com/problemset/problem/133/A), easy",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "GimmeChars_4",
    "sat": "def sat(s: str, chars=['W', '@', 'S']):\n    \"\"\"Find a string with certain characters\"\"\"\n    for c in chars:\n        if c not in s:\n            return False\n    return True",
    "sols": [],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 133 A](https://codeforces.com/problemset/problem/133/A), easy",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "GimmeChars_5",
    "sat": "def sat(s: str, chars=['(', 'R', '8', 'E', 'S']):\n    \"\"\"Find a string with certain characters\"\"\"\n    for c in chars:\n        if c not in s:\n            return False\n    return True",
    "sols": [],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 133 A](https://codeforces.com/problemset/problem/133/A), easy",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "GimmeChars_6",
    "sat": "def sat(s: str, chars=['?', 'a', 'b', '0', 'z']):\n    \"\"\"Find a string with certain characters\"\"\"\n    for c in chars:\n        if c not in s:\n            return False\n    return True",
    "sols": [],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 133 A](https://codeforces.com/problemset/problem/133/A), easy",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "GimmeChars_7",
    "sat": "def sat(s: str, chars=['-', 'R', '[', '0', 'q']):\n    \"\"\"Find a string with certain characters\"\"\"\n    for c in chars:\n        if c not in s:\n            return False\n    return True",
    "sols": [],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 133 A](https://codeforces.com/problemset/problem/133/A), easy",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "GimmeChars_8",
    "sat": "def sat(s: str, chars=['M', '!', 'e', '[', 'z']):\n    \"\"\"Find a string with certain characters\"\"\"\n    for c in chars:\n        if c not in s:\n            return False\n    return True",
    "sols": [],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 133 A](https://codeforces.com/problemset/problem/133/A), easy",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "GimmeChars_9",
    "sat": "def sat(s: str, chars=['+', '#', 'R', '7', 'n']):\n    \"\"\"Find a string with certain characters\"\"\"\n    for c in chars:\n        if c not in s:\n            return False\n    return True",
    "sols": [],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 133 A](https://codeforces.com/problemset/problem/133/A), easy",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "HalfPairs_0",
    "sat": "def sat(ans: List[List[int]], target=17):\n    \"\"\"\n    Find a list of pairs of integers where the number of pairs in which the second number is more than\n    two greater than the first number is a given constant\n    \"\"\"\n    for i in range(len(ans)):\n        a, b = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0",
    "sols": [
      "def sol(target=17):\n    return [[0, 2]] * target"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 467 A](https://codeforces.com/problemset/problem/467/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "HalfPairs_1",
    "sat": "def sat(ans: List[List[int]], target=0):\n    \"\"\"\n    Find a list of pairs of integers where the number of pairs in which the second number is more than\n    two greater than the first number is a given constant\n    \"\"\"\n    for i in range(len(ans)):\n        a, b = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0",
    "sols": [
      "def sol(target=0):\n    return [[0, 2]] * target"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 467 A](https://codeforces.com/problemset/problem/467/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "HalfPairs_2",
    "sat": "def sat(ans: List[List[int]], target=1):\n    \"\"\"\n    Find a list of pairs of integers where the number of pairs in which the second number is more than\n    two greater than the first number is a given constant\n    \"\"\"\n    for i in range(len(ans)):\n        a, b = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0",
    "sols": [
      "def sol(target=1):\n    return [[0, 2]] * target"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 467 A](https://codeforces.com/problemset/problem/467/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "HalfPairs_3",
    "sat": "def sat(ans: List[List[int]], target=2):\n    \"\"\"\n    Find a list of pairs of integers where the number of pairs in which the second number is more than\n    two greater than the first number is a given constant\n    \"\"\"\n    for i in range(len(ans)):\n        a, b = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0",
    "sols": [
      "def sol(target=2):\n    return [[0, 2]] * target"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 467 A](https://codeforces.com/problemset/problem/467/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "HalfPairs_4",
    "sat": "def sat(ans: List[List[int]], target=3):\n    \"\"\"\n    Find a list of pairs of integers where the number of pairs in which the second number is more than\n    two greater than the first number is a given constant\n    \"\"\"\n    for i in range(len(ans)):\n        a, b = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0",
    "sols": [
      "def sol(target=3):\n    return [[0, 2]] * target"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 467 A](https://codeforces.com/problemset/problem/467/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "HalfPairs_5",
    "sat": "def sat(ans: List[List[int]], target=4):\n    \"\"\"\n    Find a list of pairs of integers where the number of pairs in which the second number is more than\n    two greater than the first number is a given constant\n    \"\"\"\n    for i in range(len(ans)):\n        a, b = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0",
    "sols": [
      "def sol(target=4):\n    return [[0, 2]] * target"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 467 A](https://codeforces.com/problemset/problem/467/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "HalfPairs_6",
    "sat": "def sat(ans: List[List[int]], target=5):\n    \"\"\"\n    Find a list of pairs of integers where the number of pairs in which the second number is more than\n    two greater than the first number is a given constant\n    \"\"\"\n    for i in range(len(ans)):\n        a, b = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0",
    "sols": [
      "def sol(target=5):\n    return [[0, 2]] * target"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 467 A](https://codeforces.com/problemset/problem/467/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "HalfPairs_7",
    "sat": "def sat(ans: List[List[int]], target=6):\n    \"\"\"\n    Find a list of pairs of integers where the number of pairs in which the second number is more than\n    two greater than the first number is a given constant\n    \"\"\"\n    for i in range(len(ans)):\n        a, b = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0",
    "sols": [
      "def sol(target=6):\n    return [[0, 2]] * target"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 467 A](https://codeforces.com/problemset/problem/467/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "HalfPairs_8",
    "sat": "def sat(ans: List[List[int]], target=7):\n    \"\"\"\n    Find a list of pairs of integers where the number of pairs in which the second number is more than\n    two greater than the first number is a given constant\n    \"\"\"\n    for i in range(len(ans)):\n        a, b = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0",
    "sols": [
      "def sol(target=7):\n    return [[0, 2]] * target"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 467 A](https://codeforces.com/problemset/problem/467/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "HalfPairs_9",
    "sat": "def sat(ans: List[List[int]], target=8):\n    \"\"\"\n    Find a list of pairs of integers where the number of pairs in which the second number is more than\n    two greater than the first number is a given constant\n    \"\"\"\n    for i in range(len(ans)):\n        a, b = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0",
    "sols": [
      "def sol(target=8):\n    return [[0, 2]] * target"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 467 A](https://codeforces.com/problemset/problem/467/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "InvertIndices_0",
    "sat": "def sat(indexes: List[int], target=[1, 3, 4, 2, 5, 6, 7, 13, 12, 11, 9, 10, 8]):\n    \"\"\"Given a list of integers representing a permutation, invert the permutation.\"\"\"\n    for i in range(1, len(target) + 1):\n        if target[indexes[i - 1] - 1] != i:\n            return False\n    return True",
    "sols": [],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 136 A](https://codeforces.com/problemset/problem/136/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "InvertIndices_1",
    "sat": "def sat(indexes: List[int], target=[16, 12, 67, 77, 23, 47, 24, 45, 61, 80, 43, 50, 57, 81, 21, 55, 9, 28, 14, 87, 58, 35, 37, 63, 41, 38, 6, 86, 59, 13, 49, 68, 83, 30, 40, 73, 15, 11, 85, 70, 33, 22, 76, 5, 82, 52, 27, 26, 34, 89, 1, 48, 64, 88, 19, 29, 65, 69, 31, 2, 74, 32, 60, 7, 46, 56, 78, 79, 36, 51, 72, 71, 54, 20, 90, 8, 53, 75, 39, 4, 17, 62, 25, 3, 84, 42, 44, 10, 66, 18]):\n    \"\"\"Given a list of integers representing a permutation, invert the permutation.\"\"\"\n    for i in range(1, len(target) + 1):\n        if target[indexes[i - 1] - 1] != i:\n            return False\n    return True",
    "sols": [],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 136 A](https://codeforces.com/problemset/problem/136/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "InvertIndices_2",
    "sat": "def sat(indexes: List[int], target=[4, 66, 52, 28, 11, 59, 15, 37, 32, 71, 48, 23, 41, 7, 68, 30, 2, 44, 33, 3, 14, 63, 40, 22, 35, 6, 27, 58, 36, 38, 53, 9, 24, 49, 54, 50, 72, 64, 69, 77, 25, 31, 42, 17, 57, 67, 55, 70, 47, 46, 10, 75, 20, 61, 34, 39, 18, 12, 56, 29, 62, 26, 73, 21, 5, 1, 8, 19, 51, 45, 74, 13, 43, 16, 76, 65, 60]):\n    \"\"\"Given a list of integers representing a permutation, invert the permutation.\"\"\"\n    for i in range(1, len(target) + 1):\n        if target[indexes[i - 1] - 1] != i:\n            return False\n    return True",
    "sols": [],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 136 A](https://codeforces.com/problemset/problem/136/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "InvertIndices_3",
    "sat": "def sat(indexes: List[int], target=[47, 10, 38, 39, 63, 9, 20, 31, 3, 42, 24, 4, 48, 25, 40, 52, 33, 58, 12, 5, 35, 51, 17, 6, 57, 60, 56, 61, 32, 64, 13, 59, 27, 50, 43, 11, 55, 29, 16, 19, 45, 7, 26, 1, 49, 53, 36, 18, 34, 22, 41, 46, 23, 15, 2, 14, 21, 28, 44, 54, 62, 30, 37, 8]):\n    \"\"\"Given a list of integers representing a permutation, invert the permutation.\"\"\"\n    for i in range(1, len(target) + 1):\n        if target[indexes[i - 1] - 1] != i:\n            return False\n    return True",
    "sols": [],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 136 A](https://codeforces.com/problemset/problem/136/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "InvertIndices_4",
    "sat": "def sat(indexes: List[int], target=[3, 1, 6, 5, 4, 2]):\n    \"\"\"Given a list of integers representing a permutation, invert the permutation.\"\"\"\n    for i in range(1, len(target) + 1):\n        if target[indexes[i - 1] - 1] != i:\n            return False\n    return True",
    "sols": [],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 136 A](https://codeforces.com/problemset/problem/136/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "InvertIndices_5",
    "sat": "def sat(indexes: List[int], target=[34, 50, 54, 38, 16, 14, 31, 43, 10, 24, 28, 21, 52, 8, 48, 58, 19, 55, 47, 51, 4, 41, 17, 35, 53, 49, 3, 1, 29, 44, 57, 46, 12, 23, 26, 20, 13, 39, 18, 36, 42, 33, 40, 45, 15, 30, 37, 32, 6, 11, 7, 22, 27, 56, 9, 5, 59, 2, 25]):\n    \"\"\"Given a list of integers representing a permutation, invert the permutation.\"\"\"\n    for i in range(1, len(target) + 1):\n        if target[indexes[i - 1] - 1] != i:\n            return False\n    return True",
    "sols": [],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 136 A](https://codeforces.com/problemset/problem/136/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "InvertIndices_6",
    "sat": "def sat(indexes: List[int], target=[38, 30, 12, 67, 41, 4, 44, 66, 3, 19, 2, 26, 5, 29, 43, 57, 25, 18, 34, 21, 69, 49, 42, 27, 60, 20, 33, 8, 23, 48, 31, 65, 32, 6, 51, 68, 7, 58, 64, 40, 56, 54, 63, 1, 52, 46, 59, 50, 39, 24, 35, 9, 55, 13, 22, 37, 61, 17, 36, 10, 45, 62, 28, 14, 47, 53, 11, 16, 15]):\n    \"\"\"Given a list of integers representing a permutation, invert the permutation.\"\"\"\n    for i in range(1, len(target) + 1):\n        if target[indexes[i - 1] - 1] != i:\n            return False\n    return True",
    "sols": [],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 136 A](https://codeforces.com/problemset/problem/136/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "InvertIndices_7",
    "sat": "def sat(indexes: List[int], target=[45, 9, 18, 12, 44, 8, 26, 4, 29, 43, 2, 14, 32, 19, 37, 5, 3, 39, 40, 13, 23, 28, 49, 25, 36, 53, 10, 30, 24, 16, 31, 46, 42, 22, 55, 1, 34, 6, 35, 51, 50, 33, 56, 52, 7, 47, 48, 17, 21, 54, 38, 57, 27, 41, 11, 15, 20]):\n    \"\"\"Given a list of integers representing a permutation, invert the permutation.\"\"\"\n    for i in range(1, len(target) + 1):\n        if target[indexes[i - 1] - 1] != i:\n            return False\n    return True",
    "sols": [],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 136 A](https://codeforces.com/problemset/problem/136/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "InvertIndices_8",
    "sat": "def sat(indexes: List[int], target=[13, 5, 28, 16, 29, 7, 9, 19, 14, 4, 34, 22, 31, 35, 10, 1, 17, 26, 37, 41, 11, 32, 27, 8, 6, 2, 21, 20, 25, 30, 36, 18, 3, 12, 38, 33, 24, 40, 39, 23, 15]):\n    \"\"\"Given a list of integers representing a permutation, invert the permutation.\"\"\"\n    for i in range(1, len(target) + 1):\n        if target[indexes[i - 1] - 1] != i:\n            return False\n    return True",
    "sols": [],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 136 A](https://codeforces.com/problemset/problem/136/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "InvertIndices_9",
    "sat": "def sat(indexes: List[int], target=[8, 48, 19, 2, 59, 58, 53, 27, 16, 37, 7, 66, 3, 50, 29, 61, 72, 35, 67, 68, 71, 24, 63, 76, 1, 56, 34, 30, 4, 39, 14, 74, 64, 26, 70, 32, 47, 73, 6, 21, 5, 22, 40, 43, 18, 60, 25, 45, 41, 38, 44, 49, 28, 36, 75, 52, 54, 31, 17, 46, 42, 20, 55, 9, 13, 23, 69, 51, 65, 10, 62, 33, 12, 15, 11, 57]):\n    \"\"\"Given a list of integers representing a permutation, invert the permutation.\"\"\"\n    for i in range(1, len(target) + 1):\n        if target[indexes[i - 1] - 1] != i:\n            return False\n    return True",
    "sols": [],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 136 A](https://codeforces.com/problemset/problem/136/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "FivePowers_0",
    "sat": "def sat(s: str, n=7012):\n    \"\"\"What are the last two digits of 5^n?\"\"\"\n    return int(str(5 ** n)[:-2] + s) == 5 ** n",
    "sols": [
      "def sol(n=7012):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/630/A)",
    "taint_date": "2021-4-26",
    "weight": 0.00202020202020202
  },
  {
    "name": "FivePowers_1",
    "sat": "def sat(s: str, n=0):\n    \"\"\"What are the last two digits of 5^n?\"\"\"\n    return int(str(5 ** n)[:-2] + s) == 5 ** n",
    "sols": [
      "def sol(n=0):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/630/A)",
    "taint_date": "2021-4-26",
    "weight": 0.00202020202020202
  },
  {
    "name": "FivePowers_2",
    "sat": "def sat(s: str, n=1):\n    \"\"\"What are the last two digits of 5^n?\"\"\"\n    return int(str(5 ** n)[:-2] + s) == 5 ** n",
    "sols": [
      "def sol(n=1):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/630/A)",
    "taint_date": "2021-4-26",
    "weight": 0.00202020202020202
  },
  {
    "name": "FivePowers_3",
    "sat": "def sat(s: str, n=2):\n    \"\"\"What are the last two digits of 5^n?\"\"\"\n    return int(str(5 ** n)[:-2] + s) == 5 ** n",
    "sols": [
      "def sol(n=2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/630/A)",
    "taint_date": "2021-4-26",
    "weight": 0.00202020202020202
  },
  {
    "name": "FivePowers_4",
    "sat": "def sat(s: str, n=3):\n    \"\"\"What are the last two digits of 5^n?\"\"\"\n    return int(str(5 ** n)[:-2] + s) == 5 ** n",
    "sols": [
      "def sol(n=3):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/630/A)",
    "taint_date": "2021-4-26",
    "weight": 0.00202020202020202
  },
  {
    "name": "FivePowers_5",
    "sat": "def sat(s: str, n=4):\n    \"\"\"What are the last two digits of 5^n?\"\"\"\n    return int(str(5 ** n)[:-2] + s) == 5 ** n",
    "sols": [
      "def sol(n=4):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/630/A)",
    "taint_date": "2021-4-26",
    "weight": 0.00202020202020202
  },
  {
    "name": "FivePowers_6",
    "sat": "def sat(s: str, n=5):\n    \"\"\"What are the last two digits of 5^n?\"\"\"\n    return int(str(5 ** n)[:-2] + s) == 5 ** n",
    "sols": [
      "def sol(n=5):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/630/A)",
    "taint_date": "2021-4-26",
    "weight": 0.00202020202020202
  },
  {
    "name": "FivePowers_7",
    "sat": "def sat(s: str, n=6):\n    \"\"\"What are the last two digits of 5^n?\"\"\"\n    return int(str(5 ** n)[:-2] + s) == 5 ** n",
    "sols": [
      "def sol(n=6):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/630/A)",
    "taint_date": "2021-4-26",
    "weight": 0.00202020202020202
  },
  {
    "name": "FivePowers_8",
    "sat": "def sat(s: str, n=7):\n    \"\"\"What are the last two digits of 5^n?\"\"\"\n    return int(str(5 ** n)[:-2] + s) == 5 ** n",
    "sols": [
      "def sol(n=7):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/630/A)",
    "taint_date": "2021-4-26",
    "weight": 0.00202020202020202
  },
  {
    "name": "FivePowers_9",
    "sat": "def sat(s: str, n=8):\n    \"\"\"What are the last two digits of 5^n?\"\"\"\n    return int(str(5 ** n)[:-2] + s) == 5 ** n",
    "sols": [
      "def sol(n=8):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/630/A)",
    "taint_date": "2021-4-26",
    "weight": 0.00202020202020202
  },
  {
    "name": "FivePowers_10",
    "sat": "def sat(s: str, n=9):\n    \"\"\"What are the last two digits of 5^n?\"\"\"\n    return int(str(5 ** n)[:-2] + s) == 5 ** n",
    "sols": [
      "def sol(n=9):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/630/A)",
    "taint_date": "2021-4-26",
    "weight": 0.00202020202020202
  },
  {
    "name": "CombinationLock_0",
    "sat": "def sat(states: List[str], start=\"424\", combo=\"778\", target_len=12):\n    \"\"\"\n    Shortest Combination Lock Path\n\n    Given a starting a final lock position, find the (minimal) intermediate states, where each transition\n    involves increasing or decreasing a single digit (mod 10).\n\n    Example:\n    start = \"012\"\n    combo = \"329\"\n    output: ['112', '212', '312', '322', '321', '320']\n    \"\"\"\n    assert all(len(s) == len(start) for s in states) and all(c in \"0123456789\" for s in states for c in s)\n    for a, b in zip([start] + states, states + [combo]):\n        assert sum(i != j for i, j in zip(a, b)) == 1\n        assert all(abs(int(i) - int(j)) in {0, 1, 9} for i, j in zip(a, b))\n\n    return len(states) <= target_len",
    "sols": [
      "def sol(start=\"424\", combo=\"778\", target_len=12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CombinationLock_1",
    "sat": "def sat(states: List[str], start=\"77872\", combo=\"43506\", target_len=16):\n    \"\"\"\n    Shortest Combination Lock Path\n\n    Given a starting a final lock position, find the (minimal) intermediate states, where each transition\n    involves increasing or decreasing a single digit (mod 10).\n\n    Example:\n    start = \"012\"\n    combo = \"329\"\n    output: ['112', '212', '312', '322', '321', '320']\n    \"\"\"\n    assert all(len(s) == len(start) for s in states) and all(c in \"0123456789\" for s in states for c in s)\n    for a, b in zip([start] + states, states + [combo]):\n        assert sum(i != j for i, j in zip(a, b)) == 1\n        assert all(abs(int(i) - int(j)) in {0, 1, 9} for i, j in zip(a, b))\n\n    return len(states) <= target_len",
    "sols": [
      "def sol(start=\"77872\", combo=\"43506\", target_len=16):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CombinationLock_2",
    "sat": "def sat(states: List[str], start=\"268\", combo=\"180\", target_len=4):\n    \"\"\"\n    Shortest Combination Lock Path\n\n    Given a starting a final lock position, find the (minimal) intermediate states, where each transition\n    involves increasing or decreasing a single digit (mod 10).\n\n    Example:\n    start = \"012\"\n    combo = \"329\"\n    output: ['112', '212', '312', '322', '321', '320']\n    \"\"\"\n    assert all(len(s) == len(start) for s in states) and all(c in \"0123456789\" for s in states for c in s)\n    for a, b in zip([start] + states, states + [combo]):\n        assert sum(i != j for i, j in zip(a, b)) == 1\n        assert all(abs(int(i) - int(j)) in {0, 1, 9} for i, j in zip(a, b))\n\n    return len(states) <= target_len",
    "sols": [
      "def sol(start=\"268\", combo=\"180\", target_len=4):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CombinationLock_3",
    "sat": "def sat(states: List[str], start=\"4675159714\", combo=\"9758013840\", target_len=27):\n    \"\"\"\n    Shortest Combination Lock Path\n\n    Given a starting a final lock position, find the (minimal) intermediate states, where each transition\n    involves increasing or decreasing a single digit (mod 10).\n\n    Example:\n    start = \"012\"\n    combo = \"329\"\n    output: ['112', '212', '312', '322', '321', '320']\n    \"\"\"\n    assert all(len(s) == len(start) for s in states) and all(c in \"0123456789\" for s in states for c in s)\n    for a, b in zip([start] + states, states + [combo]):\n        assert sum(i != j for i, j in zip(a, b)) == 1\n        assert all(abs(int(i) - int(j)) in {0, 1, 9} for i, j in zip(a, b))\n\n    return len(states) <= target_len",
    "sols": [
      "def sol(start=\"4675159714\", combo=\"9758013840\", target_len=27):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CombinationLock_4",
    "sat": "def sat(states: List[str], start=\"242716\", combo=\"891245\", target_len=18):\n    \"\"\"\n    Shortest Combination Lock Path\n\n    Given a starting a final lock position, find the (minimal) intermediate states, where each transition\n    involves increasing or decreasing a single digit (mod 10).\n\n    Example:\n    start = \"012\"\n    combo = \"329\"\n    output: ['112', '212', '312', '322', '321', '320']\n    \"\"\"\n    assert all(len(s) == len(start) for s in states) and all(c in \"0123456789\" for s in states for c in s)\n    for a, b in zip([start] + states, states + [combo]):\n        assert sum(i != j for i, j in zip(a, b)) == 1\n        assert all(abs(int(i) - int(j)) in {0, 1, 9} for i, j in zip(a, b))\n\n    return len(states) <= target_len",
    "sols": [
      "def sol(start=\"242716\", combo=\"891245\", target_len=18):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CombinationLock_5",
    "sat": "def sat(states: List[str], start=\"425739105\", combo=\"731228271\", target_len=22):\n    \"\"\"\n    Shortest Combination Lock Path\n\n    Given a starting a final lock position, find the (minimal) intermediate states, where each transition\n    involves increasing or decreasing a single digit (mod 10).\n\n    Example:\n    start = \"012\"\n    combo = \"329\"\n    output: ['112', '212', '312', '322', '321', '320']\n    \"\"\"\n    assert all(len(s) == len(start) for s in states) and all(c in \"0123456789\" for s in states for c in s)\n    for a, b in zip([start] + states, states + [combo]):\n        assert sum(i != j for i, j in zip(a, b)) == 1\n        assert all(abs(int(i) - int(j)) in {0, 1, 9} for i, j in zip(a, b))\n\n    return len(states) <= target_len",
    "sols": [
      "def sol(start=\"425739105\", combo=\"731228271\", target_len=22):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CombinationLock_6",
    "sat": "def sat(states: List[str], start=\"88453487\", combo=\"86926422\", target_len=21):\n    \"\"\"\n    Shortest Combination Lock Path\n\n    Given a starting a final lock position, find the (minimal) intermediate states, where each transition\n    involves increasing or decreasing a single digit (mod 10).\n\n    Example:\n    start = \"012\"\n    combo = \"329\"\n    output: ['112', '212', '312', '322', '321', '320']\n    \"\"\"\n    assert all(len(s) == len(start) for s in states) and all(c in \"0123456789\" for s in states for c in s)\n    for a, b in zip([start] + states, states + [combo]):\n        assert sum(i != j for i, j in zip(a, b)) == 1\n        assert all(abs(int(i) - int(j)) in {0, 1, 9} for i, j in zip(a, b))\n\n    return len(states) <= target_len",
    "sols": [
      "def sol(start=\"88453487\", combo=\"86926422\", target_len=21):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CombinationLock_7",
    "sat": "def sat(states: List[str], start=\"20122281\", combo=\"71435014\", target_len=20):\n    \"\"\"\n    Shortest Combination Lock Path\n\n    Given a starting a final lock position, find the (minimal) intermediate states, where each transition\n    involves increasing or decreasing a single digit (mod 10).\n\n    Example:\n    start = \"012\"\n    combo = \"329\"\n    output: ['112', '212', '312', '322', '321', '320']\n    \"\"\"\n    assert all(len(s) == len(start) for s in states) and all(c in \"0123456789\" for s in states for c in s)\n    for a, b in zip([start] + states, states + [combo]):\n        assert sum(i != j for i, j in zip(a, b)) == 1\n        assert all(abs(int(i) - int(j)) in {0, 1, 9} for i, j in zip(a, b))\n\n    return len(states) <= target_len",
    "sols": [
      "def sol(start=\"20122281\", combo=\"71435014\", target_len=20):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CombinationLock_8",
    "sat": "def sat(states: List[str], start=\"8228977\", combo=\"2479606\", target_len=18):\n    \"\"\"\n    Shortest Combination Lock Path\n\n    Given a starting a final lock position, find the (minimal) intermediate states, where each transition\n    involves increasing or decreasing a single digit (mod 10).\n\n    Example:\n    start = \"012\"\n    combo = \"329\"\n    output: ['112', '212', '312', '322', '321', '320']\n    \"\"\"\n    assert all(len(s) == len(start) for s in states) and all(c in \"0123456789\" for s in states for c in s)\n    for a, b in zip([start] + states, states + [combo]):\n        assert sum(i != j for i, j in zip(a, b)) == 1\n        assert all(abs(int(i) - int(j)) in {0, 1, 9} for i, j in zip(a, b))\n\n    return len(states) <= target_len",
    "sols": [
      "def sol(start=\"8228977\", combo=\"2479606\", target_len=18):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CombinationLock_9",
    "sat": "def sat(states: List[str], start=\"159\", combo=\"138\", target_len=2):\n    \"\"\"\n    Shortest Combination Lock Path\n\n    Given a starting a final lock position, find the (minimal) intermediate states, where each transition\n    involves increasing or decreasing a single digit (mod 10).\n\n    Example:\n    start = \"012\"\n    combo = \"329\"\n    output: ['112', '212', '312', '322', '321', '320']\n    \"\"\"\n    assert all(len(s) == len(start) for s in states) and all(c in \"0123456789\" for s in states for c in s)\n    for a, b in zip([start] + states, states + [combo]):\n        assert sum(i != j for i, j in zip(a, b)) == 1\n        assert all(abs(int(i) - int(j)) in {0, 1, 9} for i, j in zip(a, b))\n\n    return len(states) <= target_len",
    "sols": [
      "def sol(start=\"159\", combo=\"138\", target_len=2):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CombinationLockObfuscated_0",
    "sat": "def sat(states: List[str], start=\"424\", combo=\"778\", target_len=12):\n    \"\"\"Figure out what this does only from the code\"\"\"\n    return all(sum((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start))) == 1\n               for a, b in zip([start] + states, states[:target_len] + [combo]))",
    "sols": [
      "def sol(start=\"424\", combo=\"778\", target_len=12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)\nThis an obfuscated version of CombinationLock above, can the AI figure out what is being asked or that\nit is the same puzzle?",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CombinationLockObfuscated_1",
    "sat": "def sat(states: List[str], start=\"50\", combo=\"59\", target_len=0):\n    \"\"\"Figure out what this does only from the code\"\"\"\n    return all(sum((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start))) == 1\n               for a, b in zip([start] + states, states[:target_len] + [combo]))",
    "sols": [
      "def sol(start=\"50\", combo=\"59\", target_len=0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)\nThis an obfuscated version of CombinationLock above, can the AI figure out what is being asked or that\nit is the same puzzle?",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CombinationLockObfuscated_2",
    "sat": "def sat(states: List[str], start=\"23\", combo=\"12\", target_len=1):\n    \"\"\"Figure out what this does only from the code\"\"\"\n    return all(sum((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start))) == 1\n               for a, b in zip([start] + states, states[:target_len] + [combo]))",
    "sols": [
      "def sol(start=\"23\", combo=\"12\", target_len=1):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)\nThis an obfuscated version of CombinationLock above, can the AI figure out what is being asked or that\nit is the same puzzle?",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CombinationLockObfuscated_3",
    "sat": "def sat(states: List[str], start=\"4\", combo=\"3\", target_len=0):\n    \"\"\"Figure out what this does only from the code\"\"\"\n    return all(sum((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start))) == 1\n               for a, b in zip([start] + states, states[:target_len] + [combo]))",
    "sols": [
      "def sol(start=\"4\", combo=\"3\", target_len=0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)\nThis an obfuscated version of CombinationLock above, can the AI figure out what is being asked or that\nit is the same puzzle?",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CombinationLockObfuscated_4",
    "sat": "def sat(states: List[str], start=\"2184377\", combo=\"7002994\", target_len=18):\n    \"\"\"Figure out what this does only from the code\"\"\"\n    return all(sum((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start))) == 1\n               for a, b in zip([start] + states, states[:target_len] + [combo]))",
    "sols": [
      "def sol(start=\"2184377\", combo=\"7002994\", target_len=18):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)\nThis an obfuscated version of CombinationLock above, can the AI figure out what is being asked or that\nit is the same puzzle?",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CombinationLockObfuscated_5",
    "sat": "def sat(states: List[str], start=\"894202\", combo=\"362955\", target_len=20):\n    \"\"\"Figure out what this does only from the code\"\"\"\n    return all(sum((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start))) == 1\n               for a, b in zip([start] + states, states[:target_len] + [combo]))",
    "sols": [
      "def sol(start=\"894202\", combo=\"362955\", target_len=20):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)\nThis an obfuscated version of CombinationLock above, can the AI figure out what is being asked or that\nit is the same puzzle?",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CombinationLockObfuscated_6",
    "sat": "def sat(states: List[str], start=\"635\", combo=\"732\", target_len=3):\n    \"\"\"Figure out what this does only from the code\"\"\"\n    return all(sum((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start))) == 1\n               for a, b in zip([start] + states, states[:target_len] + [combo]))",
    "sols": [
      "def sol(start=\"635\", combo=\"732\", target_len=3):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)\nThis an obfuscated version of CombinationLock above, can the AI figure out what is being asked or that\nit is the same puzzle?",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CombinationLockObfuscated_7",
    "sat": "def sat(states: List[str], start=\"2\", combo=\"5\", target_len=2):\n    \"\"\"Figure out what this does only from the code\"\"\"\n    return all(sum((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start))) == 1\n               for a, b in zip([start] + states, states[:target_len] + [combo]))",
    "sols": [
      "def sol(start=\"2\", combo=\"5\", target_len=2):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)\nThis an obfuscated version of CombinationLock above, can the AI figure out what is being asked or that\nit is the same puzzle?",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CombinationLockObfuscated_8",
    "sat": "def sat(states: List[str], start=\"68\", combo=\"55\", target_len=3):\n    \"\"\"Figure out what this does only from the code\"\"\"\n    return all(sum((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start))) == 1\n               for a, b in zip([start] + states, states[:target_len] + [combo]))",
    "sols": [
      "def sol(start=\"68\", combo=\"55\", target_len=3):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)\nThis an obfuscated version of CombinationLock above, can the AI figure out what is being asked or that\nit is the same puzzle?",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "CombinationLockObfuscated_9",
    "sat": "def sat(states: List[str], start=\"36823\", combo=\"96926\", target_len=7):\n    \"\"\"Figure out what this does only from the code\"\"\"\n    return all(sum((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start))) == 1\n               for a, b in zip([start] + states, states[:target_len] + [combo]))",
    "sols": [
      "def sol(start=\"36823\", combo=\"96926\", target_len=7):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)\nThis an obfuscated version of CombinationLock above, can the AI figure out what is being asked or that\nit is the same puzzle?",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "InvertPermutation_0",
    "sat": "def sat(s: str, perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"hello are you there?\"):\n    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"\n    return \"\".join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c) for c in s) == target",
    "sols": [
      "def sol(perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"hello are you there?\"):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 474 A](https://codeforces.com/problemset/problem/474/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "InvertPermutation_1",
    "sat": "def sat(s: str, perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"xapypakygatextifyth divufyjacof cecuchuquypo sulechukijocharapad hych mugemi re binivot\"):\n    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"\n    return \"\".join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c) for c in s) == target",
    "sols": [
      "def sol(perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"xapypakygatextifyth divufyjacof cecuchuquypo sulechukijocharapad hych mugemi re binivot\"):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 474 A](https://codeforces.com/problemset/problem/474/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "InvertPermutation_2",
    "sat": "def sat(s: str, perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"mujychenyzo\"):\n    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"\n    return \"\".join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c) for c in s) == target",
    "sols": [
      "def sol(perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"mujychenyzo\"):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 474 A](https://codeforces.com/problemset/problem/474/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "InvertPermutation_3",
    "sat": "def sat(s: str, perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"quethoruchyrugyz wemywuconuthisiquu kachogechehuz pulybyri quuby thatextak tychuzymuxuzazylyk neruzesithipecytoqu\"):\n    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"\n    return \"\".join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c) for c in s) == target",
    "sols": [
      "def sol(perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"quethoruchyrugyz wemywuconuthisiquu kachogechehuz pulybyri quuby thatextak tychuzymuxuzazylyk neruzesithipecytoqu\"):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 474 A](https://codeforces.com/problemset/problem/474/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "InvertPermutation_4",
    "sat": "def sat(s: str, perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"thyjytex cequolichitextotho bymoxokepy jyvumywefoc\"):\n    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"\n    return \"\".join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c) for c in s) == target",
    "sols": [
      "def sol(perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"thyjytex cequolichitextotho bymoxokepy jyvumywefoc\"):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 474 A](https://codeforces.com/problemset/problem/474/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "InvertPermutation_5",
    "sat": "def sat(s: str, perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"sesozorisylec thatorypanajydenupo sumop bagemysezuquymew r\"):\n    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"\n    return \"\".join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c) for c in s) == target",
    "sols": [
      "def sol(perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"sesozorisylec thatorypanajydenupo sumop bagemysezuquymew r\"):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 474 A](https://codeforces.com/problemset/problem/474/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "InvertPermutation_6",
    "sat": "def sat(s: str, perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"zukywom xurebechafizygewe jiwony tytextehytextith thutiquewomihiquaco thicyzufawutotu\"):\n    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"\n    return \"\".join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c) for c in s) == target",
    "sols": [
      "def sol(perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"zukywom xurebechafizygewe jiwony tytextehytextith thutiquewomihiquaco thicyzufawutotu\"):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 474 A](https://codeforces.com/problemset/problem/474/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "InvertPermutation_7",
    "sat": "def sat(s: str, perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"cutejigigy\"):\n    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"\n    return \"\".join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c) for c in s) == target",
    "sols": [
      "def sol(perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"cutejigigy\"):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 474 A](https://codeforces.com/problemset/problem/474/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "InvertPermutation_8",
    "sat": "def sat(s: str, perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"zochixedodunajuzyvij thalemedytethim vuquajol jaxachudith bahogud mymach vehymavaf ma wyritextutexti\"):\n    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"\n    return \"\".join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c) for c in s) == target",
    "sols": [
      "def sol(perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"zochixedodunajuzyvij thalemedytethim vuquajol jaxachudith bahogud mymach vehymavaf ma wyritextutexti\"):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 474 A](https://codeforces.com/problemset/problem/474/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "InvertPermutation_9",
    "sat": "def sat(s: str, perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"k hojocotextecatotori fideh kisuchygovinygaq\"):\n    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"\n    return \"\".join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c) for c in s) == target",
    "sols": [
      "def sol(perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"k hojocotextecatotori fideh kisuchygovinygaq\"):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 474 A](https://codeforces.com/problemset/problem/474/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SameDifferent_0",
    "sat": "def sat(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4):\n    \"\"\"\n    Given a list of integers and a target length, create of the given length such that:\n        * The first list must be all different numbers.\n        * The second must be all the same number.\n        * The two lists together comprise a sublist of all the list items\n    \"\"\"\n    a, b = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True",
    "sols": [
      "def sol(items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1335 C](https://codeforces.com/problemset/problem/1335/C)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SameDifferent_1",
    "sat": "def sat(lists: List[List[int]], items=[5, 3, 2, 1, 0, 1, 4, 2, 5, 4, 6, 7, 8], length=2):\n    \"\"\"\n    Given a list of integers and a target length, create of the given length such that:\n        * The first list must be all different numbers.\n        * The second must be all the same number.\n        * The two lists together comprise a sublist of all the list items\n    \"\"\"\n    a, b = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True",
    "sols": [
      "def sol(items=[5, 3, 2, 1, 0, 1, 4, 2, 5, 4, 6, 7, 8], length=2):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1335 C](https://codeforces.com/problemset/problem/1335/C)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SameDifferent_2",
    "sat": "def sat(lists: List[List[int]], items=[0, 9, 7, 2, 6, 1, 6, 5, 4, 6, 5, 2, 6, 4, 2, 2, 7, 2, 7, 3, 4, 4, 8, 8, 1, 2, 6, 4, 7, 0, 4, 4, 6, 8, 4, 8, 3, 6, 6, 4, 7, 0, 3, 0, 7, 9, 3, 2, 7, 7, 1, 2, 8, 9, 4, 6, 8, 2, 2, 4, 6, 5, 3, 3, 2, 8, 8, 2, 7, 8, 7, 6, 9, 7, 3, 2, 0, 5], length=10):\n    \"\"\"\n    Given a list of integers and a target length, create of the given length such that:\n        * The first list must be all different numbers.\n        * The second must be all the same number.\n        * The two lists together comprise a sublist of all the list items\n    \"\"\"\n    a, b = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True",
    "sols": [
      "def sol(items=[0, 9, 7, 2, 6, 1, 6, 5, 4, 6, 5, 2, 6, 4, 2, 2, 7, 2, 7, 3, 4, 4, 8, 8, 1, 2, 6, 4, 7, 0, 4, 4, 6, 8, 4, 8, 3, 6, 6, 4, 7, 0, 3, 0, 7, 9, 3, 2, 7, 7, 1, 2, 8, 9, 4, 6, 8, 2, 2, 4, 6, 5, 3, 3, 2, 8, 8, 2, 7, 8, 7, 6, 9, 7, 3, 2, 0, 5], length=10):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1335 C](https://codeforces.com/problemset/problem/1335/C)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SameDifferent_3",
    "sat": "def sat(lists: List[List[int]], items=[8, 1, 8, 2, 7, 0, 5, 8, 1, 5, 7, 2, 7, 1, 3, 5, 2, 9, 2, 0, 5, 1, 9, 1, 7, 9, 4, 7, 3, 5, 5, 8, 8, 8, 3, 8, 7, 5, 5, 0, 3, 4, 2, 8, 0, 6, 7, 6, 6, 3, 0, 1, 1, 7, 6, 0, 9, 9, 9, 5, 6, 1, 0, 0, 6, 3, 3, 0, 4, 0, 6, 9, 1, 3, 2, 9, 4, 2, 4, 7, 2, 7, 6, 0, 9, 2, 2, 8, 9, 1, 3, 5, 8, 3, 3], length=10):\n    \"\"\"\n    Given a list of integers and a target length, create of the given length such that:\n        * The first list must be all different numbers.\n        * The second must be all the same number.\n        * The two lists together comprise a sublist of all the list items\n    \"\"\"\n    a, b = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True",
    "sols": [
      "def sol(items=[8, 1, 8, 2, 7, 0, 5, 8, 1, 5, 7, 2, 7, 1, 3, 5, 2, 9, 2, 0, 5, 1, 9, 1, 7, 9, 4, 7, 3, 5, 5, 8, 8, 8, 3, 8, 7, 5, 5, 0, 3, 4, 2, 8, 0, 6, 7, 6, 6, 3, 0, 1, 1, 7, 6, 0, 9, 9, 9, 5, 6, 1, 0, 0, 6, 3, 3, 0, 4, 0, 6, 9, 1, 3, 2, 9, 4, 2, 4, 7, 2, 7, 6, 0, 9, 2, 2, 8, 9, 1, 3, 5, 8, 3, 3], length=10):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1335 C](https://codeforces.com/problemset/problem/1335/C)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SameDifferent_4",
    "sat": "def sat(lists: List[List[int]], items=[5, 8, 2, 2, 5, 1, 4, 9, 2, 0, 5, 4, 6, 5, 1, 7, 3, 2, 4, 6, 7, 2, 7, 3, 3, 1, 7, 9, 3, 2, 2, 9, 1, 2, 1, 1, 8, 6, 6, 2, 7, 6, 5, 2, 7, 6, 5, 0, 0, 8, 4, 5, 5, 3, 7, 5, 2, 0, 3, 1, 0, 8, 1, 3, 0, 1, 9, 4, 9, 1, 9, 7, 7, 1, 9, 7, 9, 4, 0, 8, 3, 7, 4, 3, 1, 6, 5, 8, 0, 9, 5, 7, 5, 6, 0, 1, 3, 1, 8], length=10):\n    \"\"\"\n    Given a list of integers and a target length, create of the given length such that:\n        * The first list must be all different numbers.\n        * The second must be all the same number.\n        * The two lists together comprise a sublist of all the list items\n    \"\"\"\n    a, b = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True",
    "sols": [
      "def sol(items=[5, 8, 2, 2, 5, 1, 4, 9, 2, 0, 5, 4, 6, 5, 1, 7, 3, 2, 4, 6, 7, 2, 7, 3, 3, 1, 7, 9, 3, 2, 2, 9, 1, 2, 1, 1, 8, 6, 6, 2, 7, 6, 5, 2, 7, 6, 5, 0, 0, 8, 4, 5, 5, 3, 7, 5, 2, 0, 3, 1, 0, 8, 1, 3, 0, 1, 9, 4, 9, 1, 9, 7, 7, 1, 9, 7, 9, 4, 0, 8, 3, 7, 4, 3, 1, 6, 5, 8, 0, 9, 5, 7, 5, 6, 0, 1, 3, 1, 8], length=10):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1335 C](https://codeforces.com/problemset/problem/1335/C)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SameDifferent_5",
    "sat": "def sat(lists: List[List[int]], items=[6, 3, 3, 3, 4, 1, 2, 9, 8, 4, 9, 5, 9, 4, 8], length=3):\n    \"\"\"\n    Given a list of integers and a target length, create of the given length such that:\n        * The first list must be all different numbers.\n        * The second must be all the same number.\n        * The two lists together comprise a sublist of all the list items\n    \"\"\"\n    a, b = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True",
    "sols": [
      "def sol(items=[6, 3, 3, 3, 4, 1, 2, 9, 8, 4, 9, 5, 9, 4, 8], length=3):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1335 C](https://codeforces.com/problemset/problem/1335/C)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SameDifferent_6",
    "sat": "def sat(lists: List[List[int]], items=[6, 0, 6, 7, 1, 0, 6, 1, 7, 6, 0, 0, 8, 4, 8, 0, 2, 1, 2, 1, 3, 4, 6, 7, 9, 6, 8, 2, 8, 0, 1, 2, 9, 3, 3, 9, 6, 7, 3, 3, 1, 3, 0, 5, 7, 6, 3, 6, 9, 3, 9], length=9):\n    \"\"\"\n    Given a list of integers and a target length, create of the given length such that:\n        * The first list must be all different numbers.\n        * The second must be all the same number.\n        * The two lists together comprise a sublist of all the list items\n    \"\"\"\n    a, b = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True",
    "sols": [
      "def sol(items=[6, 0, 6, 7, 1, 0, 6, 1, 7, 6, 0, 0, 8, 4, 8, 0, 2, 1, 2, 1, 3, 4, 6, 7, 9, 6, 8, 2, 8, 0, 1, 2, 9, 3, 3, 9, 6, 7, 3, 3, 1, 3, 0, 5, 7, 6, 3, 6, 9, 3, 9], length=9):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1335 C](https://codeforces.com/problemset/problem/1335/C)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SameDifferent_7",
    "sat": "def sat(lists: List[List[int]], items=[4, 3, 9, 6, 8], length=1):\n    \"\"\"\n    Given a list of integers and a target length, create of the given length such that:\n        * The first list must be all different numbers.\n        * The second must be all the same number.\n        * The two lists together comprise a sublist of all the list items\n    \"\"\"\n    a, b = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True",
    "sols": [
      "def sol(items=[4, 3, 9, 6, 8], length=1):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1335 C](https://codeforces.com/problemset/problem/1335/C)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SameDifferent_8",
    "sat": "def sat(lists: List[List[int]], items=[3, 0, 2, 7, 8, 4, 0, 3, 4, 4, 3, 1, 4, 9, 3, 1, 3, 2, 4, 4, 2, 0, 4, 3, 3, 1, 1, 6, 5, 7, 0, 7, 8, 4, 4, 5, 2, 0, 9, 9, 9, 9, 5, 9, 2, 8, 6, 0, 0, 9, 8, 3, 1, 8, 3, 5, 3, 0, 7, 0, 6, 3, 0, 3, 8, 1, 0, 7, 5, 4, 2, 9, 7], length=10):\n    \"\"\"\n    Given a list of integers and a target length, create of the given length such that:\n        * The first list must be all different numbers.\n        * The second must be all the same number.\n        * The two lists together comprise a sublist of all the list items\n    \"\"\"\n    a, b = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True",
    "sols": [
      "def sol(items=[3, 0, 2, 7, 8, 4, 0, 3, 4, 4, 3, 1, 4, 9, 3, 1, 3, 2, 4, 4, 2, 0, 4, 3, 3, 1, 1, 6, 5, 7, 0, 7, 8, 4, 4, 5, 2, 0, 9, 9, 9, 9, 5, 9, 2, 8, 6, 0, 0, 9, 8, 3, 1, 8, 3, 5, 3, 0, 7, 0, 6, 3, 0, 3, 8, 1, 0, 7, 5, 4, 2, 9, 7], length=10):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1335 C](https://codeforces.com/problemset/problem/1335/C)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "SameDifferent_9",
    "sat": "def sat(lists: List[List[int]], items=[2, 2, 8, 4, 9, 0, 7, 3, 6, 3, 5, 9, 6, 0, 3], length=3):\n    \"\"\"\n    Given a list of integers and a target length, create of the given length such that:\n        * The first list must be all different numbers.\n        * The second must be all the same number.\n        * The two lists together comprise a sublist of all the list items\n    \"\"\"\n    a, b = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True",
    "sols": [
      "def sol(items=[2, 2, 8, 4, 9, 0, 7, 3, 6, 3, 5, 9, 6, 0, 3], length=3):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1335 C](https://codeforces.com/problemset/problem/1335/C)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "OnesAndTwos_0",
    "sat": "def sat(seq: List[int], n=10000, length=5017):\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all(i in [1, 2] for i in seq) and sum(seq) == n and len(seq) == length",
    "sols": [
      "def sol(n=10000, length=5017):\n    return [2] * (n - length) + [1] * (2 * length - n)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 476 A](https://codeforces.com/problemset/problem/476/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "OnesAndTwos_1",
    "sat": "def sat(seq: List[int], n=867, length=785):\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all(i in [1, 2] for i in seq) and sum(seq) == n and len(seq) == length",
    "sols": [
      "def sol(n=867, length=785):\n    return [2] * (n - length) + [1] * (2 * length - n)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 476 A](https://codeforces.com/problemset/problem/476/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "OnesAndTwos_2",
    "sat": "def sat(seq: List[int], n=0, length=0):\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all(i in [1, 2] for i in seq) and sum(seq) == n and len(seq) == length",
    "sols": [
      "def sol(n=0, length=0):\n    return [2] * (n - length) + [1] * (2 * length - n)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 476 A](https://codeforces.com/problemset/problem/476/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "OnesAndTwos_3",
    "sat": "def sat(seq: List[int], n=4, length=2):\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all(i in [1, 2] for i in seq) and sum(seq) == n and len(seq) == length",
    "sols": [
      "def sol(n=4, length=2):\n    return [2] * (n - length) + [1] * (2 * length - n)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 476 A](https://codeforces.com/problemset/problem/476/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "OnesAndTwos_4",
    "sat": "def sat(seq: List[int], n=5514, length=4310):\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all(i in [1, 2] for i in seq) and sum(seq) == n and len(seq) == length",
    "sols": [
      "def sol(n=5514, length=4310):\n    return [2] * (n - length) + [1] * (2 * length - n)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 476 A](https://codeforces.com/problemset/problem/476/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "OnesAndTwos_5",
    "sat": "def sat(seq: List[int], n=7, length=5):\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all(i in [1, 2] for i in seq) and sum(seq) == n and len(seq) == length",
    "sols": [
      "def sol(n=7, length=5):\n    return [2] * (n - length) + [1] * (2 * length - n)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 476 A](https://codeforces.com/problemset/problem/476/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "OnesAndTwos_6",
    "sat": "def sat(seq: List[int], n=8, length=5):\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all(i in [1, 2] for i in seq) and sum(seq) == n and len(seq) == length",
    "sols": [
      "def sol(n=8, length=5):\n    return [2] * (n - length) + [1] * (2 * length - n)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 476 A](https://codeforces.com/problemset/problem/476/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "OnesAndTwos_7",
    "sat": "def sat(seq: List[int], n=93, length=65):\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all(i in [1, 2] for i in seq) and sum(seq) == n and len(seq) == length",
    "sols": [
      "def sol(n=93, length=65):\n    return [2] * (n - length) + [1] * (2 * length - n)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 476 A](https://codeforces.com/problemset/problem/476/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "OnesAndTwos_8",
    "sat": "def sat(seq: List[int], n=5155, length=3914):\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all(i in [1, 2] for i in seq) and sum(seq) == n and len(seq) == length",
    "sols": [
      "def sol(n=5155, length=3914):\n    return [2] * (n - length) + [1] * (2 * length - n)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 476 A](https://codeforces.com/problemset/problem/476/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "OnesAndTwos_9",
    "sat": "def sat(seq: List[int], n=66, length=43):\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all(i in [1, 2] for i in seq) and sum(seq) == n and len(seq) == length",
    "sols": [
      "def sol(n=66, length=43):\n    return [2] * (n - length) + [1] * (2 * length - n)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 476 A](https://codeforces.com/problemset/problem/476/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinConsecutiveSum_0",
    "sat": "def sat(start: int, k=3, upper=6, seq=[17, 1, 2, 65, 18, 91, -30, 100, 3, 1, 2]):\n    \"\"\"Find a sequence of k consecutive indices whose sum is minimal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper",
    "sols": [
      "def sol(k=3, upper=6, seq=[17, 1, 2, 65, 18, 91, -30, 100, 3, 1, 2]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinConsecutiveSum_1",
    "sat": "def sat(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    \"\"\"Find a sequence of k consecutive indices whose sum is minimal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper",
    "sols": [
      "def sol(k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinConsecutiveSum_2",
    "sat": "def sat(start: int, k=3, upper=-238, seq=[34, -9, -41, -62, -99, -58, -81, 66, -51, 90, -8, -56, -80, -66, -50, -74, -4, -47, 63, -86, 66, 72, 38, -3, 9, 92, 25, -77, 86, -24, -23, 9, 10, 36, -82, -48, -74, -1, -80, 55, -2, -86, 95, -52, -14, -87]):\n    \"\"\"Find a sequence of k consecutive indices whose sum is minimal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper",
    "sols": [
      "def sol(k=3, upper=-238, seq=[34, -9, -41, -62, -99, -58, -81, 66, -51, 90, -8, -56, -80, -66, -50, -74, -4, -47, 63, -86, 66, 72, 38, -3, 9, 92, 25, -77, 86, -24, -23, 9, 10, 36, -82, -48, -74, -1, -80, 55, -2, -86, 95, -52, -14, -87]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinConsecutiveSum_3",
    "sat": "def sat(start: int, k=8, upper=-75, seq=[17, -90, 61, -29, 57, 7, -45, -37, 1, 69]):\n    \"\"\"Find a sequence of k consecutive indices whose sum is minimal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper",
    "sols": [
      "def sol(k=8, upper=-75, seq=[17, -90, 61, -29, 57, 7, -45, -37, 1, 69]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinConsecutiveSum_4",
    "sat": "def sat(start: int, k=8, upper=-4, seq=[-17, 55, 6, -2, -14, -19, 86, -4, -8, -49, 40, 82]):\n    \"\"\"Find a sequence of k consecutive indices whose sum is minimal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper",
    "sols": [
      "def sol(k=8, upper=-4, seq=[-17, 55, 6, -2, -14, -19, 86, -4, -8, -49, 40, 82]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinConsecutiveSum_5",
    "sat": "def sat(start: int, k=10, upper=-216, seq=[2, -55, 92, -48, 52, -62, -74, 89, 71, -68, -93, 33, -24, -94, 6, 4, -84, 64]):\n    \"\"\"Find a sequence of k consecutive indices whose sum is minimal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper",
    "sols": [
      "def sol(k=10, upper=-216, seq=[2, -55, 92, -48, 52, -62, -74, 89, 71, -68, -93, 33, -24, -94, 6, 4, -84, 64]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinConsecutiveSum_6",
    "sat": "def sat(start: int, k=3, upper=-131, seq=[30, -93, -68]):\n    \"\"\"Find a sequence of k consecutive indices whose sum is minimal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper",
    "sols": [
      "def sol(k=3, upper=-131, seq=[30, -93, -68]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinConsecutiveSum_7",
    "sat": "def sat(start: int, k=5, upper=-172, seq=[5, -30, -96, 41, -92]):\n    \"\"\"Find a sequence of k consecutive indices whose sum is minimal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper",
    "sols": [
      "def sol(k=5, upper=-172, seq=[5, -30, -96, 41, -92]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinConsecutiveSum_8",
    "sat": "def sat(start: int, k=2, upper=-192, seq=[-70, -96, -96, -83, -55, -20, -75, -15, 98, 65, -39, -86, -24, -67, 64, 56, -94, -59, 65, 19, 21, 2, 61, -59, -92, -87, 68, 51, -36, 49, -25, 69, 58, 36, 44, 39, 72, 45, 28, -7, 43, -69]):\n    \"\"\"Find a sequence of k consecutive indices whose sum is minimal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper",
    "sols": [
      "def sol(k=2, upper=-192, seq=[-70, -96, -96, -83, -55, -20, -75, -15, 98, 65, -39, -86, -24, -67, 64, 56, -94, -59, 65, 19, 21, 2, 61, -59, -92, -87, 68, 51, -36, 49, -25, 69, 58, 36, 44, 39, 72, 45, 28, -7, 43, -69]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinConsecutiveSum_9",
    "sat": "def sat(start: int, k=4, upper=-152, seq=[29, -87, 43, 2, -36, -76, -42, 66, -46, 35, -8, -100]):\n    \"\"\"Find a sequence of k consecutive indices whose sum is minimal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper",
    "sols": [
      "def sol(k=4, upper=-152, seq=[29, -87, 43, 2, -36, -76, -42, 66, -46, 35, -8, -100]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxConsecutiveSum_0",
    "sat": "def sat(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    \"\"\"Find a sequence of k consecutive indices whose sum is maximal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower",
    "sols": [
      "def sol(k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxConsecutiveSum_1",
    "sat": "def sat(start: int, k=9, lower=-183, seq=[44, -94, 25, -63, -39, -71, -34, 84, -35]):\n    \"\"\"Find a sequence of k consecutive indices whose sum is maximal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower",
    "sols": [
      "def sol(k=9, lower=-183, seq=[44, -94, 25, -63, -39, -71, -34, 84, -35]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxConsecutiveSum_2",
    "sat": "def sat(start: int, k=3, lower=86, seq=[19, 82, -24, -9, -92, 50, -89, -15, 45, 56, -64]):\n    \"\"\"Find a sequence of k consecutive indices whose sum is maximal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower",
    "sols": [
      "def sol(k=3, lower=86, seq=[19, 82, -24, -9, -92, 50, -89, -15, 45, 56, -64]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxConsecutiveSum_3",
    "sat": "def sat(start: int, k=1, lower=-36, seq=[-36]):\n    \"\"\"Find a sequence of k consecutive indices whose sum is maximal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower",
    "sols": [
      "def sol(k=1, lower=-36, seq=[-36]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxConsecutiveSum_4",
    "sat": "def sat(start: int, k=1, lower=93, seq=[-61, -46, 89, 93, -13, 14, -95, -74, -92, -38, -93, 64, -78, 3, 92, -10, -4, 43, 72, 12, 3, -3, -15, -96, 72, -71, -30, 53, 17, -87, 49, 17, -69, 78, 6, -77, -99, 91, 13, 9, 81, -55, 75, 48, -65, 18, -83, 10, -12, 88, 60, -72, -7, -49, -56, -76, 82, 18, 77, 52, -92, -88, 39, 13, -16, 82, 4, 44, -19, 54, 6, 55, 77, -38, -30, -55, -16]):\n    \"\"\"Find a sequence of k consecutive indices whose sum is maximal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower",
    "sols": [
      "def sol(k=1, lower=93, seq=[-61, -46, 89, 93, -13, 14, -95, -74, -92, -38, -93, 64, -78, 3, 92, -10, -4, 43, 72, 12, 3, -3, -15, -96, 72, -71, -30, 53, 17, -87, 49, 17, -69, 78, 6, -77, -99, 91, 13, 9, 81, -55, 75, 48, -65, 18, -83, 10, -12, 88, 60, -72, -7, -49, -56, -76, 82, 18, 77, 52, -92, -88, 39, 13, -16, 82, 4, 44, -19, 54, 6, 55, 77, -38, -30, -55, -16]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxConsecutiveSum_5",
    "sat": "def sat(start: int, k=4, lower=227, seq=[24, -48, -90, 54, -4, -25, 98, 8, 91, 30, 96]):\n    \"\"\"Find a sequence of k consecutive indices whose sum is maximal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower",
    "sols": [
      "def sol(k=4, lower=227, seq=[24, -48, -90, 54, -4, -25, 98, 8, 91, 30, 96]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxConsecutiveSum_6",
    "sat": "def sat(start: int, k=7, lower=-107, seq=[-13, -65, 43, -16, -73, 12, -95, 87]):\n    \"\"\"Find a sequence of k consecutive indices whose sum is maximal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower",
    "sols": [
      "def sol(k=7, lower=-107, seq=[-13, -65, 43, -16, -73, 12, -95, 87]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxConsecutiveSum_7",
    "sat": "def sat(start: int, k=9, lower=-54, seq=[-99, -22, -62, 83, 22, 86, 12, -89, 15]):\n    \"\"\"Find a sequence of k consecutive indices whose sum is maximal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower",
    "sols": [
      "def sol(k=9, lower=-54, seq=[-99, -22, -62, 83, 22, 86, 12, -89, 15]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxConsecutiveSum_8",
    "sat": "def sat(start: int, k=6, lower=-334, seq=[-81, -71, -10, -73, -72, -27]):\n    \"\"\"Find a sequence of k consecutive indices whose sum is maximal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower",
    "sols": [
      "def sol(k=6, lower=-334, seq=[-81, -71, -10, -73, -72, -27]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxConsecutiveSum_9",
    "sat": "def sat(start: int, k=2, lower=174, seq=[87, -34, -97, -8, -74, -34, 54, 68, -85, 9, -36, -66, 70, -69, 75, 87, 23, -60, -98, -65, 76, -69, 68, -67, -32, -34, -91, -10, 84, 39, -86, -64, -77, -35, 61, 47, 21, 24, -7, -62, -31, 72, 86, 10, -71, -57, -51, 0, 80, 93, -29, 42, 28, -29, 93, -63, 94, -85, 58, -81, 12, 88, 0, -80, 42, 61, 92, 82, -62, 15, -88, 44, -9, 2, 85, 0, -58, -73, -43, -34, -21, 8, -63, -3, -38, -60]):\n    \"\"\"Find a sequence of k consecutive indices whose sum is maximal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower",
    "sols": [
      "def sol(k=2, lower=174, seq=[87, -34, -97, -8, -74, -34, 54, 68, -85, 9, -36, -66, 70, -69, 75, 87, 23, -60, -98, -65, 76, -69, 68, -67, -32, -34, -91, -10, 84, 39, -86, -64, -77, -35, 61, 47, 21, 24, -7, -62, -31, 72, 86, 10, -71, -57, -51, 0, 80, 93, -29, 42, 28, -29, 93, -63, 94, -85, 58, -81, 12, 88, 0, -80, 42, 61, 92, 82, -62, 15, -88, 44, -9, 2, 85, 0, -58, -73, -43, -34, -21, 8, -63, -3, -38, -60]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxConsecutiveProduct_0",
    "sat": "def sat(start: int, k=3, lower=100000, seq=[91, 1, 2, 64, 18, 91, -30, 100, 3, 65, 18]):\n    \"\"\"Find a sequence of k consecutive indices whose product is maximal, possibly looping around\"\"\"\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower",
    "sols": [
      "def sol(k=3, lower=100000, seq=[91, 1, 2, 64, 18, 91, -30, 100, 3, 65, 18]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxConsecutiveProduct_1",
    "sat": "def sat(start: int, k=8, lower=774420991987500, seq=[-50, -99, -99, -65, -69, -87, 90, 45]):\n    \"\"\"Find a sequence of k consecutive indices whose product is maximal, possibly looping around\"\"\"\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower",
    "sols": [
      "def sol(k=8, lower=774420991987500, seq=[-50, -99, -99, -65, -69, -87, 90, 45]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxConsecutiveProduct_2",
    "sat": "def sat(start: int, k=6, lower=188917681120, seq=[73, -32, 30, 92, 73, 8, 31, 40, -59, -97, -16, -83, -86, 78, -91, -18, -31, 31, 37, 79, 63, 38, 14, 68, -73, 91, 71, 87, 54, -7, -74, -63, -57, -46, -78, -22, 71, 52, 32, -82, 71, 76, -28, 83, -65, -65, 70, -35, 83, -40, 69, 78, -81, 0, -69, -1, 0, 61, 92, 55, -89, 60, 74, 99, -53, -22, 50, 28, -60, 6, 27, -53, -77, 99, 1, -69, -67, 81, -89, 45, 59, -28, 24, -21, -65, -56, -89, -30, 58, 78, 73, 9, 81, -39, -99, 43, 32, 58, -56, -83, 82, 97, 70]):\n    \"\"\"Find a sequence of k consecutive indices whose product is maximal, possibly looping around\"\"\"\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower",
    "sols": [
      "def sol(k=6, lower=188917681120, seq=[73, -32, 30, 92, 73, 8, 31, 40, -59, -97, -16, -83, -86, 78, -91, -18, -31, 31, 37, 79, 63, 38, 14, 68, -73, 91, 71, 87, 54, -7, -74, -63, -57, -46, -78, -22, 71, 52, 32, -82, 71, 76, -28, 83, -65, -65, 70, -35, 83, -40, 69, 78, -81, 0, -69, -1, 0, 61, 92, 55, -89, 60, 74, 99, -53, -22, 50, 28, -60, 6, 27, -53, -77, 99, 1, -69, -67, 81, -89, 45, 59, -28, 24, -21, -65, -56, -89, -30, 58, 78, 73, 9, 81, -39, -99, 43, 32, 58, -56, -83, 82, 97, 70]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxConsecutiveProduct_3",
    "sat": "def sat(start: int, k=2, lower=5589, seq=[8, -66, 75, 74, 40, 14, -81, -69, 99, 27, -18]):\n    \"\"\"Find a sequence of k consecutive indices whose product is maximal, possibly looping around\"\"\"\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower",
    "sols": [
      "def sol(k=2, lower=5589, seq=[8, -66, 75, 74, 40, 14, -81, -69, 99, 27, -18]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxConsecutiveProduct_4",
    "sat": "def sat(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    \"\"\"Find a sequence of k consecutive indices whose product is maximal, possibly looping around\"\"\"\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower",
    "sols": [
      "def sol(k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxConsecutiveProduct_5",
    "sat": "def sat(start: int, k=5, lower=2673475200, seq=[-71, 20, -58, 96, 97, -50, 99, 88, -24, 74, -35, 2, 3, -13, 79, -60, 64, 30, 80, -67, 94, -62, 63, 15, 13, 85, -86, -28, 4, -44, 86, -16, -73, -19, 23, -72, -78, 80, -57, 5, 40]):\n    \"\"\"Find a sequence of k consecutive indices whose product is maximal, possibly looping around\"\"\"\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower",
    "sols": [
      "def sol(k=5, lower=2673475200, seq=[-71, 20, -58, 96, 97, -50, 99, 88, -24, 74, -35, 2, 3, -13, 79, -60, 64, 30, 80, -67, 94, -62, 63, 15, 13, 85, -86, -28, 4, -44, 86, -16, -73, -19, 23, -72, -78, 80, -57, 5, 40]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxConsecutiveProduct_6",
    "sat": "def sat(start: int, k=3, lower=363630, seq=[85, -67, 50, 12, 28, 71, -77, -56, 38, -69, -85, 62]):\n    \"\"\"Find a sequence of k consecutive indices whose product is maximal, possibly looping around\"\"\"\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower",
    "sols": [
      "def sol(k=3, lower=363630, seq=[85, -67, 50, 12, 28, 71, -77, -56, 38, -69, -85, 62]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxConsecutiveProduct_7",
    "sat": "def sat(start: int, k=6, lower=93145633350, seq=[21, 53, 82, -21, -2, -42, 56, 61, 65, 78, -8, -99, -1, -88, 10, 63, 30, 48, -22, 47, 84, 54, -86, 26, -32, -86, 86, 62, 84, -38, -43, -56, 91, -50, 20, 79, 66, -53, 81, -47, -61, -73, 83, -11, 76, 74, 1, 31, -25, 78, 89, 74, 25, -93, 77, -79, -28, 43, -59, 27, -17, 98, 95, -19, -86, 83, 16, -91, 48, -24, 96, -91, 18, -17, 88, -71, -13, -86, 90, -66, 44, 18, 46, 22, 8, 17]):\n    \"\"\"Find a sequence of k consecutive indices whose product is maximal, possibly looping around\"\"\"\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower",
    "sols": [
      "def sol(k=6, lower=93145633350, seq=[21, 53, 82, -21, -2, -42, 56, 61, 65, 78, -8, -99, -1, -88, 10, 63, 30, 48, -22, 47, 84, 54, -86, 26, -32, -86, 86, 62, 84, -38, -43, -56, 91, -50, 20, 79, 66, -53, 81, -47, -61, -73, 83, -11, 76, 74, 1, 31, -25, 78, 89, 74, 25, -93, 77, -79, -28, 43, -59, 27, -17, 98, 95, -19, -86, 83, 16, -91, 48, -24, 96, -91, 18, -17, 88, -71, -13, -86, 90, -66, 44, 18, 46, 22, 8, 17]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxConsecutiveProduct_8",
    "sat": "def sat(start: int, k=5, lower=165904200, seq=[64, 4, -30, -81, 77, 95, -35, 8, 90, 43, 48, -68, 18]):\n    \"\"\"Find a sequence of k consecutive indices whose product is maximal, possibly looping around\"\"\"\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower",
    "sols": [
      "def sol(k=5, lower=165904200, seq=[64, 4, -30, -81, 77, 95, -35, 8, 90, 43, 48, -68, 18]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MaxConsecutiveProduct_9",
    "sat": "def sat(start: int, k=5, lower=61326720, seq=[-63, -80, 13, 72, 13]):\n    \"\"\"Find a sequence of k consecutive indices whose product is maximal, possibly looping around\"\"\"\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower",
    "sols": [
      "def sol(k=5, lower=61326720, seq=[-63, -80, 13, 72, 13]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DistinctOddSum_0",
    "sat": "def sat(nums: List[int], tot=12345, n=5):\n    \"\"\"Find n distinct positive odd integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all(i >= i % 2 > 0 for i in nums)",
    "sols": [
      "def sol(tot=12345, n=5):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1327 A](https://codeforces.com/problemset/problem/1327/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DistinctOddSum_1",
    "sat": "def sat(nums: List[int], tot=1819, n=3):\n    \"\"\"Find n distinct positive odd integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all(i >= i % 2 > 0 for i in nums)",
    "sols": [
      "def sol(tot=1819, n=3):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1327 A](https://codeforces.com/problemset/problem/1327/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DistinctOddSum_2",
    "sat": "def sat(nums: List[int], tot=37729, n=73):\n    \"\"\"Find n distinct positive odd integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all(i >= i % 2 > 0 for i in nums)",
    "sols": [
      "def sol(tot=37729, n=73):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1327 A](https://codeforces.com/problemset/problem/1327/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DistinctOddSum_3",
    "sat": "def sat(nums: List[int], tot=5359, n=11):\n    \"\"\"Find n distinct positive odd integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all(i >= i % 2 > 0 for i in nums)",
    "sols": [
      "def sol(tot=5359, n=11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1327 A](https://codeforces.com/problemset/problem/1327/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DistinctOddSum_4",
    "sat": "def sat(nums: List[int], tot=36505, n=73):\n    \"\"\"Find n distinct positive odd integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all(i >= i % 2 > 0 for i in nums)",
    "sols": [
      "def sol(tot=36505, n=73):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1327 A](https://codeforces.com/problemset/problem/1327/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DistinctOddSum_5",
    "sat": "def sat(nums: List[int], tot=24165, n=45):\n    \"\"\"Find n distinct positive odd integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all(i >= i % 2 > 0 for i in nums)",
    "sols": [
      "def sol(tot=24165, n=45):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1327 A](https://codeforces.com/problemset/problem/1327/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DistinctOddSum_6",
    "sat": "def sat(nums: List[int], tot=15225, n=27):\n    \"\"\"Find n distinct positive odd integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all(i >= i % 2 > 0 for i in nums)",
    "sols": [
      "def sol(tot=15225, n=27):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1327 A](https://codeforces.com/problemset/problem/1327/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DistinctOddSum_7",
    "sat": "def sat(nums: List[int], tot=31442, n=60):\n    \"\"\"Find n distinct positive odd integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all(i >= i % 2 > 0 for i in nums)",
    "sols": [
      "def sol(tot=31442, n=60):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1327 A](https://codeforces.com/problemset/problem/1327/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DistinctOddSum_8",
    "sat": "def sat(nums: List[int], tot=18392, n=36):\n    \"\"\"Find n distinct positive odd integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all(i >= i % 2 > 0 for i in nums)",
    "sols": [
      "def sol(tot=18392, n=36):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1327 A](https://codeforces.com/problemset/problem/1327/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "DistinctOddSum_9",
    "sat": "def sat(nums: List[int], tot=11968, n=22):\n    \"\"\"Find n distinct positive odd integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all(i >= i % 2 > 0 for i in nums)",
    "sols": [
      "def sol(tot=11968, n=22):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 1327 A](https://codeforces.com/problemset/problem/1327/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinRotations_0",
    "sat": "def sat(rotations: List[int], target=\"wonderful\", upper=69):\n    \"\"\"\n    We begin with the string `\"a...z\"`\n\n    An `r`-rotation of a string means shifting it to the right (positive) or left (negative) by `r` characters and\n    cycling around. Given a target string of length n, find the n rotations that put the consecutive characters\n    of that string at the beginning of the r-rotation, with minimal sum of absolute values of the `r`'s.\n\n    For example if the string was `'dad'`, the minimal rotations would be `[3, -3, 3]` with a total of `9`.\n    \"\"\"\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    assert len(rotations) == len(target)\n    for r, c in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n\n    return sum(abs(r) for r in rotations) <= upper",
    "sols": [
      "def sol(target=\"wonderful\", upper=69):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 731 A](https://codeforces.com/problemset/problem/731/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinRotations_1",
    "sat": "def sat(rotations: List[int], target=\"tubolele\", upper=52):\n    \"\"\"\n    We begin with the string `\"a...z\"`\n\n    An `r`-rotation of a string means shifting it to the right (positive) or left (negative) by `r` characters and\n    cycling around. Given a target string of length n, find the n rotations that put the consecutive characters\n    of that string at the beginning of the r-rotation, with minimal sum of absolute values of the `r`'s.\n\n    For example if the string was `'dad'`, the minimal rotations would be `[3, -3, 3]` with a total of `9`.\n    \"\"\"\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    assert len(rotations) == len(target)\n    for r, c in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n\n    return sum(abs(r) for r in rotations) <= upper",
    "sols": [
      "def sol(target=\"tubolele\", upper=52):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 731 A](https://codeforces.com/problemset/problem/731/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinRotations_2",
    "sat": "def sat(rotations: List[int], target=\"soquogisawah\", upper=67):\n    \"\"\"\n    We begin with the string `\"a...z\"`\n\n    An `r`-rotation of a string means shifting it to the right (positive) or left (negative) by `r` characters and\n    cycling around. Given a target string of length n, find the n rotations that put the consecutive characters\n    of that string at the beginning of the r-rotation, with minimal sum of absolute values of the `r`'s.\n\n    For example if the string was `'dad'`, the minimal rotations would be `[3, -3, 3]` with a total of `9`.\n    \"\"\"\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    assert len(rotations) == len(target)\n    for r, c in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n\n    return sum(abs(r) for r in rotations) <= upper",
    "sols": [
      "def sol(target=\"soquogisawah\", upper=67):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 731 A](https://codeforces.com/problemset/problem/731/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinRotations_3",
    "sat": "def sat(rotations: List[int], target=\"jacepa\", upper=44):\n    \"\"\"\n    We begin with the string `\"a...z\"`\n\n    An `r`-rotation of a string means shifting it to the right (positive) or left (negative) by `r` characters and\n    cycling around. Given a target string of length n, find the n rotations that put the consecutive characters\n    of that string at the beginning of the r-rotation, with minimal sum of absolute values of the `r`'s.\n\n    For example if the string was `'dad'`, the minimal rotations would be `[3, -3, 3]` with a total of `9`.\n    \"\"\"\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    assert len(rotations) == len(target)\n    for r, c in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n\n    return sum(abs(r) for r in rotations) <= upper",
    "sols": [
      "def sol(target=\"jacepa\", upper=44):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 731 A](https://codeforces.com/problemset/problem/731/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinRotations_4",
    "sat": "def sat(rotations: List[int], target=\"miwykucehexo\", upper=84):\n    \"\"\"\n    We begin with the string `\"a...z\"`\n\n    An `r`-rotation of a string means shifting it to the right (positive) or left (negative) by `r` characters and\n    cycling around. Given a target string of length n, find the n rotations that put the consecutive characters\n    of that string at the beginning of the r-rotation, with minimal sum of absolute values of the `r`'s.\n\n    For example if the string was `'dad'`, the minimal rotations would be `[3, -3, 3]` with a total of `9`.\n    \"\"\"\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    assert len(rotations) == len(target)\n    for r, c in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n\n    return sum(abs(r) for r in rotations) <= upper",
    "sols": [
      "def sol(target=\"miwykucehexo\", upper=84):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 731 A](https://codeforces.com/problemset/problem/731/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinRotations_5",
    "sat": "def sat(rotations: List[int], target=\"nuze\", upper=30):\n    \"\"\"\n    We begin with the string `\"a...z\"`\n\n    An `r`-rotation of a string means shifting it to the right (positive) or left (negative) by `r` characters and\n    cycling around. Given a target string of length n, find the n rotations that put the consecutive characters\n    of that string at the beginning of the r-rotation, with minimal sum of absolute values of the `r`'s.\n\n    For example if the string was `'dad'`, the minimal rotations would be `[3, -3, 3]` with a total of `9`.\n    \"\"\"\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    assert len(rotations) == len(target)\n    for r, c in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n\n    return sum(abs(r) for r in rotations) <= upper",
    "sols": [
      "def sol(target=\"nuze\", upper=30):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 731 A](https://codeforces.com/problemset/problem/731/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinRotations_6",
    "sat": "def sat(rotations: List[int], target=\"sypyjotygusoviquy\", upper=120):\n    \"\"\"\n    We begin with the string `\"a...z\"`\n\n    An `r`-rotation of a string means shifting it to the right (positive) or left (negative) by `r` characters and\n    cycling around. Given a target string of length n, find the n rotations that put the consecutive characters\n    of that string at the beginning of the r-rotation, with minimal sum of absolute values of the `r`'s.\n\n    For example if the string was `'dad'`, the minimal rotations would be `[3, -3, 3]` with a total of `9`.\n    \"\"\"\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    assert len(rotations) == len(target)\n    for r, c in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n\n    return sum(abs(r) for r in rotations) <= upper",
    "sols": [
      "def sol(target=\"sypyjotygusoviquy\", upper=120):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 731 A](https://codeforces.com/problemset/problem/731/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinRotations_7",
    "sat": "def sat(rotations: List[int], target=\"junuzokudupozaderehi\", upper=134):\n    \"\"\"\n    We begin with the string `\"a...z\"`\n\n    An `r`-rotation of a string means shifting it to the right (positive) or left (negative) by `r` characters and\n    cycling around. Given a target string of length n, find the n rotations that put the consecutive characters\n    of that string at the beginning of the r-rotation, with minimal sum of absolute values of the `r`'s.\n\n    For example if the string was `'dad'`, the minimal rotations would be `[3, -3, 3]` with a total of `9`.\n    \"\"\"\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    assert len(rotations) == len(target)\n    for r, c in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n\n    return sum(abs(r) for r in rotations) <= upper",
    "sols": [
      "def sol(target=\"junuzokudupozaderehi\", upper=134):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 731 A](https://codeforces.com/problemset/problem/731/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinRotations_8",
    "sat": "def sat(rotations: List[int], target=\"bu\", upper=8):\n    \"\"\"\n    We begin with the string `\"a...z\"`\n\n    An `r`-rotation of a string means shifting it to the right (positive) or left (negative) by `r` characters and\n    cycling around. Given a target string of length n, find the n rotations that put the consecutive characters\n    of that string at the beginning of the r-rotation, with minimal sum of absolute values of the `r`'s.\n\n    For example if the string was `'dad'`, the minimal rotations would be `[3, -3, 3]` with a total of `9`.\n    \"\"\"\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    assert len(rotations) == len(target)\n    for r, c in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n\n    return sum(abs(r) for r in rotations) <= upper",
    "sols": [
      "def sol(target=\"bu\", upper=8):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 731 A](https://codeforces.com/problemset/problem/731/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "MinRotations_9",
    "sat": "def sat(rotations: List[int], target=\"tot\", upper=17):\n    \"\"\"\n    We begin with the string `\"a...z\"`\n\n    An `r`-rotation of a string means shifting it to the right (positive) or left (negative) by `r` characters and\n    cycling around. Given a target string of length n, find the n rotations that put the consecutive characters\n    of that string at the beginning of the r-rotation, with minimal sum of absolute values of the `r`'s.\n\n    For example if the string was `'dad'`, the minimal rotations would be `[3, -3, 3]` with a total of `9`.\n    \"\"\"\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    assert len(rotations) == len(target)\n    for r, c in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n\n    return sum(abs(r) for r in rotations) <= upper",
    "sols": [
      "def sol(target=\"tot\", upper=17):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans"
    ],
    "module": "codeforces",
    "notes": "Inspired by [Codeforces Problem 731 A](https://codeforces.com/problemset/problem/731/A)",
    "taint_date": "2021-4-26",
    "weight": 0.0022222222222222222
  },
  {
    "name": "QuadraticRoot_0",
    "sat": "def sat(x: float, coeffs=[2.5, 1.3, -0.5]):\n    \"\"\"\n    Find any (real) solution to:  a x^2 + b x + c where coeffs = [a, b, c].\n    For example, since x^2 - 3x + 2 has a root at 1, sat(x = 1., coeffs = [1., -3., 2.]) is True.\n    \"\"\"\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.5, 1.3, -0.5]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.5, 1.3, -0.5]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ],
    "module": "algebra",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula)",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "QuadraticRoot_1",
    "sat": "def sat(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    \"\"\"\n    Find any (real) solution to:  a x^2 + b x + c where coeffs = [a, b, c].\n    For example, since x^2 - 3x + 2 has a root at 1, sat(x = 1., coeffs = [1., -3., 2.]) is True.\n    \"\"\"\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ],
    "module": "algebra",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula)",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "QuadraticRoot_2",
    "sat": "def sat(x: float, coeffs=[0.2622487694588566, 0.48521166316030495, -41.749384651642444]):\n    \"\"\"\n    Find any (real) solution to:  a x^2 + b x + c where coeffs = [a, b, c].\n    For example, since x^2 - 3x + 2 has a root at 1, sat(x = 1., coeffs = [1., -3., 2.]) is True.\n    \"\"\"\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2622487694588566, 0.48521166316030495, -41.749384651642444]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2622487694588566, 0.48521166316030495, -41.749384651642444]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ],
    "module": "algebra",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula)",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "QuadraticRoot_3",
    "sat": "def sat(x: float, coeffs=[145.72190605632582, 0.027358325157428014, -5.149342624051854]):\n    \"\"\"\n    Find any (real) solution to:  a x^2 + b x + c where coeffs = [a, b, c].\n    For example, since x^2 - 3x + 2 has a root at 1, sat(x = 1., coeffs = [1., -3., 2.]) is True.\n    \"\"\"\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[145.72190605632582, 0.027358325157428014, -5.149342624051854]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[145.72190605632582, 0.027358325157428014, -5.149342624051854]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ],
    "module": "algebra",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula)",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "QuadraticRoot_4",
    "sat": "def sat(x: float, coeffs=[1.1222556871110754, -0.007015312913509468, -309237.6867547677]):\n    \"\"\"\n    Find any (real) solution to:  a x^2 + b x + c where coeffs = [a, b, c].\n    For example, since x^2 - 3x + 2 has a root at 1, sat(x = 1., coeffs = [1., -3., 2.]) is True.\n    \"\"\"\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1222556871110754, -0.007015312913509468, -309237.6867547677]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.1222556871110754, -0.007015312913509468, -309237.6867547677]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ],
    "module": "algebra",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula)",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "QuadraticRoot_5",
    "sat": "def sat(x: float, coeffs=[3.5947279237002445, -0.07342639433715788, -0.5396285563621648]):\n    \"\"\"\n    Find any (real) solution to:  a x^2 + b x + c where coeffs = [a, b, c].\n    For example, since x^2 - 3x + 2 has a root at 1, sat(x = 1., coeffs = [1., -3., 2.]) is True.\n    \"\"\"\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.5947279237002445, -0.07342639433715788, -0.5396285563621648]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.5947279237002445, -0.07342639433715788, -0.5396285563621648]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ],
    "module": "algebra",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula)",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "QuadraticRoot_6",
    "sat": "def sat(x: float, coeffs=[0.2604264648823638, 0.11685895190643543, -1.4569567384428328]):\n    \"\"\"\n    Find any (real) solution to:  a x^2 + b x + c where coeffs = [a, b, c].\n    For example, since x^2 - 3x + 2 has a root at 1, sat(x = 1., coeffs = [1., -3., 2.]) is True.\n    \"\"\"\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2604264648823638, 0.11685895190643543, -1.4569567384428328]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2604264648823638, 0.11685895190643543, -1.4569567384428328]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ],
    "module": "algebra",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula)",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "QuadraticRoot_7",
    "sat": "def sat(x: float, coeffs=[-24.68501806282819, 10.588503742224786, -0.25735414386816724]):\n    \"\"\"\n    Find any (real) solution to:  a x^2 + b x + c where coeffs = [a, b, c].\n    For example, since x^2 - 3x + 2 has a root at 1, sat(x = 1., coeffs = [1., -3., 2.]) is True.\n    \"\"\"\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-24.68501806282819, 10.588503742224786, -0.25735414386816724]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-24.68501806282819, 10.588503742224786, -0.25735414386816724]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ],
    "module": "algebra",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula)",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "QuadraticRoot_8",
    "sat": "def sat(x: float, coeffs=[0.06252609393024433, 0.6879972221042366, -0.34955085974472294]):\n    \"\"\"\n    Find any (real) solution to:  a x^2 + b x + c where coeffs = [a, b, c].\n    For example, since x^2 - 3x + 2 has a root at 1, sat(x = 1., coeffs = [1., -3., 2.]) is True.\n    \"\"\"\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06252609393024433, 0.6879972221042366, -0.34955085974472294]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.06252609393024433, 0.6879972221042366, -0.34955085974472294]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ],
    "module": "algebra",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula)",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "QuadraticRoot_9",
    "sat": "def sat(x: float, coeffs=[0.3130118376686533, -98.95538710404492, 194.22072166934078]):\n    \"\"\"\n    Find any (real) solution to:  a x^2 + b x + c where coeffs = [a, b, c].\n    For example, since x^2 - 3x + 2 has a root at 1, sat(x = 1., coeffs = [1., -3., 2.]) is True.\n    \"\"\"\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3130118376686533, -98.95538710404492, 194.22072166934078]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.3130118376686533, -98.95538710404492, 194.22072166934078]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ],
    "module": "algebra",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula)",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "AllQuadraticRoots_0",
    "sat": "def sat(roots: List[float], coeffs=[1.3, -0.5]):\n    \"\"\"Find all (real) solutions to: x^2 + b x + c (i.e., factor into roots), here coeffs = [b, c]\"\"\"\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3, -0.5]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ],
    "module": "algebra",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "AllQuadraticRoots_1",
    "sat": "def sat(roots: List[float], coeffs=[-1.468548989307175, -0.9453828447181172]):\n    \"\"\"Find all (real) solutions to: x^2 + b x + c (i.e., factor into roots), here coeffs = [b, c]\"\"\"\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.468548989307175, -0.9453828447181172]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ],
    "module": "algebra",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "AllQuadraticRoots_2",
    "sat": "def sat(roots: List[float], coeffs=[-2.0230245559088815, -0.23831699388987454]):\n    \"\"\"Find all (real) solutions to: x^2 + b x + c (i.e., factor into roots), here coeffs = [b, c]\"\"\"\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0230245559088815, -0.23831699388987454]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ],
    "module": "algebra",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "AllQuadraticRoots_3",
    "sat": "def sat(roots: List[float], coeffs=[-33.7903719275386, -5.03161654339928]):\n    \"\"\"Find all (real) solutions to: x^2 + b x + c (i.e., factor into roots), here coeffs = [b, c]\"\"\"\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-33.7903719275386, -5.03161654339928]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ],
    "module": "algebra",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "AllQuadraticRoots_4",
    "sat": "def sat(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]):\n    \"\"\"Find all (real) solutions to: x^2 + b x + c (i.e., factor into roots), here coeffs = [b, c]\"\"\"\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ],
    "module": "algebra",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "AllQuadraticRoots_5",
    "sat": "def sat(roots: List[float], coeffs=[-0.4520738252338276, -0.26542346003973466]):\n    \"\"\"Find all (real) solutions to: x^2 + b x + c (i.e., factor into roots), here coeffs = [b, c]\"\"\"\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4520738252338276, -0.26542346003973466]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ],
    "module": "algebra",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "AllQuadraticRoots_6",
    "sat": "def sat(roots: List[float], coeffs=[0.053688498796852, -4.37419775351888]):\n    \"\"\"Find all (real) solutions to: x^2 + b x + c (i.e., factor into roots), here coeffs = [b, c]\"\"\"\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.053688498796852, -4.37419775351888]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ],
    "module": "algebra",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "AllQuadraticRoots_7",
    "sat": "def sat(roots: List[float], coeffs=[-0.13816123018535084, -12.569183229720833]):\n    \"\"\"Find all (real) solutions to: x^2 + b x + c (i.e., factor into roots), here coeffs = [b, c]\"\"\"\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.13816123018535084, -12.569183229720833]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ],
    "module": "algebra",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "AllQuadraticRoots_8",
    "sat": "def sat(roots: List[float], coeffs=[-0.9829631168704469, 0.02093973230254469]):\n    \"\"\"Find all (real) solutions to: x^2 + b x + c (i.e., factor into roots), here coeffs = [b, c]\"\"\"\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9829631168704469, 0.02093973230254469]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ],
    "module": "algebra",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "AllQuadraticRoots_9",
    "sat": "def sat(roots: List[float], coeffs=[-0.3727442283742026, -1.85291131192016]):\n    \"\"\"Find all (real) solutions to: x^2 + b x + c (i.e., factor into roots), here coeffs = [b, c]\"\"\"\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3727442283742026, -1.85291131192016]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ],
    "module": "algebra",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "CubicRoot_0",
    "sat": "def sat(x: float, coeffs=[2.0, 1.0, 0.0, 8.0]):\n    \"\"\"\n    Find any (real) solution to: a x^3 + b x^2 + c x + d where coeffs = [a, b, c, d]\n    For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6, sat(x = 1., coeffs = [-6., 11., -6.]) is True.\n    \"\"\"\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0, 1.0, 0.0, 8.0]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ],
    "module": "algebra",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "CubicRoot_1",
    "sat": "def sat(x: float, coeffs=[0.009597657937719273, -10.297175825569942, 0.15891220226280925, 10.530249049250433]):\n    \"\"\"\n    Find any (real) solution to: a x^3 + b x^2 + c x + d where coeffs = [a, b, c, d]\n    For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6, sat(x = 1., coeffs = [-6., 11., -6.]) is True.\n    \"\"\"\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.009597657937719273, -10.297175825569942, 0.15891220226280925, 10.530249049250433]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ],
    "module": "algebra",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "CubicRoot_2",
    "sat": "def sat(x: float, coeffs=[-0.17749172356645268, -1.3894267878542186, 0.03752944532850555, 0.2624916128068381]):\n    \"\"\"\n    Find any (real) solution to: a x^3 + b x^2 + c x + d where coeffs = [a, b, c, d]\n    For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6, sat(x = 1., coeffs = [-6., 11., -6.]) is True.\n    \"\"\"\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17749172356645268, -1.3894267878542186, 0.03752944532850555, 0.2624916128068381]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ],
    "module": "algebra",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "CubicRoot_3",
    "sat": "def sat(x: float, coeffs=[0.41725114111706524, 155.2589446092116, -0.10619077904258341, -0.024129284994425074]):\n    \"\"\"\n    Find any (real) solution to: a x^3 + b x^2 + c x + d where coeffs = [a, b, c, d]\n    For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6, sat(x = 1., coeffs = [-6., 11., -6.]) is True.\n    \"\"\"\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.41725114111706524, 155.2589446092116, -0.10619077904258341, -0.024129284994425074]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ],
    "module": "algebra",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "CubicRoot_4",
    "sat": "def sat(x: float, coeffs=[-2.3153234528266906, 11.247619504308075, -72.3705721705674, 53.97429005428236]):\n    \"\"\"\n    Find any (real) solution to: a x^3 + b x^2 + c x + d where coeffs = [a, b, c, d]\n    For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6, sat(x = 1., coeffs = [-6., 11., -6.]) is True.\n    \"\"\"\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.3153234528266906, 11.247619504308075, -72.3705721705674, 53.97429005428236]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ],
    "module": "algebra",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "CubicRoot_5",
    "sat": "def sat(x: float, coeffs=[0.35255017264008126, -12.28313172192812, -4.732214142791368, -0.23521372185245784]):\n    \"\"\"\n    Find any (real) solution to: a x^3 + b x^2 + c x + d where coeffs = [a, b, c, d]\n    For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6, sat(x = 1., coeffs = [-6., 11., -6.]) is True.\n    \"\"\"\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.35255017264008126, -12.28313172192812, -4.732214142791368, -0.23521372185245784]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ],
    "module": "algebra",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "CubicRoot_6",
    "sat": "def sat(x: float, coeffs=[-0.3690375625527393, -0.18352014498653543, 0.36096353050506585, 0.18441425181494597]):\n    \"\"\"\n    Find any (real) solution to: a x^3 + b x^2 + c x + d where coeffs = [a, b, c, d]\n    For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6, sat(x = 1., coeffs = [-6., 11., -6.]) is True.\n    \"\"\"\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3690375625527393, -0.18352014498653543, 0.36096353050506585, 0.18441425181494597]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ],
    "module": "algebra",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "CubicRoot_7",
    "sat": "def sat(x: float, coeffs=[-1.8059746288820582, -0.09318080559912649, -0.33402347874794236, -0.05936102579637261]):\n    \"\"\"\n    Find any (real) solution to: a x^3 + b x^2 + c x + d where coeffs = [a, b, c, d]\n    For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6, sat(x = 1., coeffs = [-6., 11., -6.]) is True.\n    \"\"\"\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8059746288820582, -0.09318080559912649, -0.33402347874794236, -0.05936102579637261]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ],
    "module": "algebra",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "CubicRoot_8",
    "sat": "def sat(x: float, coeffs=[-1.0922515242006108, 12.28110097782765, -0.1640448133611577, 118839581.49853094]):\n    \"\"\"\n    Find any (real) solution to: a x^3 + b x^2 + c x + d where coeffs = [a, b, c, d]\n    For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6, sat(x = 1., coeffs = [-6., 11., -6.]) is True.\n    \"\"\"\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0922515242006108, 12.28110097782765, -0.1640448133611577, 118839581.49853094]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ],
    "module": "algebra",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "CubicRoot_9",
    "sat": "def sat(x: float, coeffs=[0.6988269056745691, 0.31029934647376994, 0.4313669902687609, 2.710677858791331]):\n    \"\"\"\n    Find any (real) solution to: a x^3 + b x^2 + c x + d where coeffs = [a, b, c, d]\n    For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6, sat(x = 1., coeffs = [-6., 11., -6.]) is True.\n    \"\"\"\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6988269056745691, 0.31029934647376994, 0.4313669902687609, 2.710677858791331]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ],
    "module": "algebra",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "AllCubicRoots_0",
    "sat": "def sat(roots: List[float], coeffs=[1.0, -2.0, -1.0]):\n    \"\"\"Find all 3 distinct real roots of x^3 + a x^2 + b x + c, i.e., factor into (x-r1)(x-r2)(x-r3).\n    coeffs = [a, b, c]. For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6,\n    sat(roots = [1., 2., 3.], coeffs = [-6., 11., -6.]) is True.\n    \"\"\"\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0, -2.0, -1.0]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ],
    "module": "algebra",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "AllCubicRoots_1",
    "sat": "def sat(roots: List[float], coeffs=[291.6393860094841, -235.56805995170293, 46.827662118172]):\n    \"\"\"Find all 3 distinct real roots of x^3 + a x^2 + b x + c, i.e., factor into (x-r1)(x-r2)(x-r3).\n    coeffs = [a, b, c]. For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6,\n    sat(roots = [1., 2., 3.], coeffs = [-6., 11., -6.]) is True.\n    \"\"\"\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[291.6393860094841, -235.56805995170293, 46.827662118172]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ],
    "module": "algebra",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "AllCubicRoots_2",
    "sat": "def sat(roots: List[float], coeffs=[-0.25228902661371166, -0.1500677342820565, 0.04095001209455085]):\n    \"\"\"Find all 3 distinct real roots of x^3 + a x^2 + b x + c, i.e., factor into (x-r1)(x-r2)(x-r3).\n    coeffs = [a, b, c]. For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6,\n    sat(roots = [1., 2., 3.], coeffs = [-6., 11., -6.]) is True.\n    \"\"\"\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.25228902661371166, -0.1500677342820565, 0.04095001209455085]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ],
    "module": "algebra",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "AllCubicRoots_3",
    "sat": "def sat(roots: List[float], coeffs=[-0.7564145326509102, -0.6902422688120567, 0.4732575941427041]):\n    \"\"\"Find all 3 distinct real roots of x^3 + a x^2 + b x + c, i.e., factor into (x-r1)(x-r2)(x-r3).\n    coeffs = [a, b, c]. For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6,\n    sat(roots = [1., 2., 3.], coeffs = [-6., 11., -6.]) is True.\n    \"\"\"\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7564145326509102, -0.6902422688120567, 0.4732575941427041]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ],
    "module": "algebra",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "AllCubicRoots_4",
    "sat": "def sat(roots: List[float], coeffs=[5.119999240806329, -7.551441647258393, -21.440710634524915]):\n    \"\"\"Find all 3 distinct real roots of x^3 + a x^2 + b x + c, i.e., factor into (x-r1)(x-r2)(x-r3).\n    coeffs = [a, b, c]. For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6,\n    sat(roots = [1., 2., 3.], coeffs = [-6., 11., -6.]) is True.\n    \"\"\"\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.119999240806329, -7.551441647258393, -21.440710634524915]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ],
    "module": "algebra",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "AllCubicRoots_5",
    "sat": "def sat(roots: List[float], coeffs=[5.62718266515347, 5.078226431366819, 0.6196345001723688]):\n    \"\"\"Find all 3 distinct real roots of x^3 + a x^2 + b x + c, i.e., factor into (x-r1)(x-r2)(x-r3).\n    coeffs = [a, b, c]. For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6,\n    sat(roots = [1., 2., 3.], coeffs = [-6., 11., -6.]) is True.\n    \"\"\"\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.62718266515347, 5.078226431366819, 0.6196345001723688]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ],
    "module": "algebra",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "AllCubicRoots_6",
    "sat": "def sat(roots: List[float], coeffs=[-1.2627469121543362, -1.4336241982384421, -0.17159457681558898]):\n    \"\"\"Find all 3 distinct real roots of x^3 + a x^2 + b x + c, i.e., factor into (x-r1)(x-r2)(x-r3).\n    coeffs = [a, b, c]. For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6,\n    sat(roots = [1., 2., 3.], coeffs = [-6., 11., -6.]) is True.\n    \"\"\"\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2627469121543362, -1.4336241982384421, -0.17159457681558898]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ],
    "module": "algebra",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "AllCubicRoots_7",
    "sat": "def sat(roots: List[float], coeffs=[-66.38952479300266, 35.22831663918797, -3.471625867121858]):\n    \"\"\"Find all 3 distinct real roots of x^3 + a x^2 + b x + c, i.e., factor into (x-r1)(x-r2)(x-r3).\n    coeffs = [a, b, c]. For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6,\n    sat(roots = [1., 2., 3.], coeffs = [-6., 11., -6.]) is True.\n    \"\"\"\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-66.38952479300266, 35.22831663918797, -3.471625867121858]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ],
    "module": "algebra",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "AllCubicRoots_8",
    "sat": "def sat(roots: List[float], coeffs=[-0.3516534493468364, -1.5104305401373206, 0.08424160558243492]):\n    \"\"\"Find all 3 distinct real roots of x^3 + a x^2 + b x + c, i.e., factor into (x-r1)(x-r2)(x-r3).\n    coeffs = [a, b, c]. For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6,\n    sat(roots = [1., 2., 3.], coeffs = [-6., 11., -6.]) is True.\n    \"\"\"\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3516534493468364, -1.5104305401373206, 0.08424160558243492]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ],
    "module": "algebra",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "AllCubicRoots_9",
    "sat": "def sat(roots: List[float], coeffs=[1.8292656260609321, -0.09629796450255451, -0.042283539638455804]):\n    \"\"\"Find all 3 distinct real roots of x^3 + a x^2 + b x + c, i.e., factor into (x-r1)(x-r2)(x-r3).\n    coeffs = [a, b, c]. For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6,\n    sat(roots = [1., 2., 3.], coeffs = [-6., 11., -6.]) is True.\n    \"\"\"\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8292656260609321, -0.09629796450255451, -0.042283539638455804]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ],
    "module": "algebra",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "SumOfDigits_0",
    "sat": "def sat(x: str, s=679):\n    \"\"\"Find a number that its digits sum to a specific value.\"\"\"\n    return s == sum([int(d) for d in x])",
    "sols": [
      "def sol(s=679):\n    return int(s / 9) * '9' + str(s % 9)"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SumOfDigits_1",
    "sat": "def sat(x: str, s=40427):\n    \"\"\"Find a number that its digits sum to a specific value.\"\"\"\n    return s == sum([int(d) for d in x])",
    "sols": [
      "def sol(s=40427):\n    return int(s / 9) * '9' + str(s % 9)"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SumOfDigits_2",
    "sat": "def sat(x: str, s=8071):\n    \"\"\"Find a number that its digits sum to a specific value.\"\"\"\n    return s == sum([int(d) for d in x])",
    "sols": [
      "def sol(s=8071):\n    return int(s / 9) * '9' + str(s % 9)"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SumOfDigits_3",
    "sat": "def sat(x: str, s=86120):\n    \"\"\"Find a number that its digits sum to a specific value.\"\"\"\n    return s == sum([int(d) for d in x])",
    "sols": [
      "def sol(s=86120):\n    return int(s / 9) * '9' + str(s % 9)"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SumOfDigits_4",
    "sat": "def sat(x: str, s=26785):\n    \"\"\"Find a number that its digits sum to a specific value.\"\"\"\n    return s == sum([int(d) for d in x])",
    "sols": [
      "def sol(s=26785):\n    return int(s / 9) * '9' + str(s % 9)"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SumOfDigits_5",
    "sat": "def sat(x: str, s=20796):\n    \"\"\"Find a number that its digits sum to a specific value.\"\"\"\n    return s == sum([int(d) for d in x])",
    "sols": [
      "def sol(s=20796):\n    return int(s / 9) * '9' + str(s % 9)"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SumOfDigits_6",
    "sat": "def sat(x: str, s=43641):\n    \"\"\"Find a number that its digits sum to a specific value.\"\"\"\n    return s == sum([int(d) for d in x])",
    "sols": [
      "def sol(s=43641):\n    return int(s / 9) * '9' + str(s % 9)"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SumOfDigits_7",
    "sat": "def sat(x: str, s=39963):\n    \"\"\"Find a number that its digits sum to a specific value.\"\"\"\n    return s == sum([int(d) for d in x])",
    "sols": [
      "def sol(s=39963):\n    return int(s / 9) * '9' + str(s % 9)"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SumOfDigits_8",
    "sat": "def sat(x: str, s=94905):\n    \"\"\"Find a number that its digits sum to a specific value.\"\"\"\n    return s == sum([int(d) for d in x])",
    "sols": [
      "def sol(s=94905):\n    return int(s / 9) * '9' + str(s % 9)"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SumOfDigits_9",
    "sat": "def sat(x: str, s=64608):\n    \"\"\"Find a number that its digits sum to a specific value.\"\"\"\n    return s == sum([int(d) for d in x])",
    "sols": [
      "def sol(s=64608):\n    return int(s / 9) * '9' + str(s % 9)"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "FloatWithDecimalValue_0",
    "sat": "def sat(z: float, v=9, d=0.0001):\n    \"\"\"Create a float with a specific decimal.\"\"\"\n    return int(z * 1 / d % 10) == v",
    "sols": [
      "def sol(v=9, d=0.0001):\n    return v * d"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "FloatWithDecimalValue_1",
    "sat": "def sat(z: float, v=1, d=1e-17):\n    \"\"\"Create a float with a specific decimal.\"\"\"\n    return int(z * 1 / d % 10) == v",
    "sols": [
      "def sol(v=1, d=1e-17):\n    return v * d"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "FloatWithDecimalValue_2",
    "sat": "def sat(z: float, v=9, d=1e+83):\n    \"\"\"Create a float with a specific decimal.\"\"\"\n    return int(z * 1 / d % 10) == v",
    "sols": [
      "def sol(v=9, d=1e+83):\n    return v * d"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "FloatWithDecimalValue_3",
    "sat": "def sat(z: float, v=5, d=1e-18):\n    \"\"\"Create a float with a specific decimal.\"\"\"\n    return int(z * 1 / d % 10) == v",
    "sols": [
      "def sol(v=5, d=1e-18):\n    return v * d"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "FloatWithDecimalValue_4",
    "sat": "def sat(z: float, v=5, d=1e+90):\n    \"\"\"Create a float with a specific decimal.\"\"\"\n    return int(z * 1 / d % 10) == v",
    "sols": [
      "def sol(v=5, d=1e+90):\n    return v * d"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "FloatWithDecimalValue_5",
    "sat": "def sat(z: float, v=4, d=1e-91):\n    \"\"\"Create a float with a specific decimal.\"\"\"\n    return int(z * 1 / d % 10) == v",
    "sols": [
      "def sol(v=4, d=1e-91):\n    return v * d"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "FloatWithDecimalValue_6",
    "sat": "def sat(z: float, v=3, d=1e+17):\n    \"\"\"Create a float with a specific decimal.\"\"\"\n    return int(z * 1 / d % 10) == v",
    "sols": [
      "def sol(v=3, d=1e+17):\n    return v * d"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "FloatWithDecimalValue_7",
    "sat": "def sat(z: float, v=4, d=1e+34):\n    \"\"\"Create a float with a specific decimal.\"\"\"\n    return int(z * 1 / d % 10) == v",
    "sols": [
      "def sol(v=4, d=1e+34):\n    return v * d"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "FloatWithDecimalValue_8",
    "sat": "def sat(z: float, v=0, d=1e-70):\n    \"\"\"Create a float with a specific decimal.\"\"\"\n    return int(z * 1 / d % 10) == v",
    "sols": [
      "def sol(v=0, d=1e-70):\n    return v * d"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "FloatWithDecimalValue_9",
    "sat": "def sat(z: float, v=2, d=1e+35):\n    \"\"\"Create a float with a specific decimal.\"\"\"\n    return int(z * 1 / d % 10) == v",
    "sols": [
      "def sol(v=2, d=1e+35):\n    return v * d"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ArithmeticSequence_0",
    "sat": "def sat(x: List[int], a=7, s=5, e=200):\n    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])",
    "sols": [
      "def sol(a=7, s=5, e=200):\n    return list(range(a, e + 1, s))"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ArithmeticSequence_1",
    "sat": "def sat(x: List[int], a=43536, s=3795, e=417606):\n    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])",
    "sols": [
      "def sol(a=43536, s=3795, e=417606):\n    return list(range(a, e + 1, s))"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ArithmeticSequence_2",
    "sat": "def sat(x: List[int], a=-70138, s=4868, e=498910):\n    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])",
    "sols": [
      "def sol(a=-70138, s=4868, e=498910):\n    return list(range(a, e + 1, s))"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ArithmeticSequence_3",
    "sat": "def sat(x: List[int], a=55980, s=7402, e=155818):\n    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])",
    "sols": [
      "def sol(a=55980, s=7402, e=155818):\n    return list(range(a, e + 1, s))"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ArithmeticSequence_4",
    "sat": "def sat(x: List[int], a=-44635, s=5046, e=503563):\n    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])",
    "sols": [
      "def sol(a=-44635, s=5046, e=503563):\n    return list(range(a, e + 1, s))"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ArithmeticSequence_5",
    "sat": "def sat(x: List[int], a=80565, s=1953, e=672358):\n    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])",
    "sols": [
      "def sol(a=80565, s=1953, e=672358):\n    return list(range(a, e + 1, s))"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ArithmeticSequence_6",
    "sat": "def sat(x: List[int], a=-90253, s=8998, e=-83648):\n    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])",
    "sols": [
      "def sol(a=-90253, s=8998, e=-83648):\n    return list(range(a, e + 1, s))"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ArithmeticSequence_7",
    "sat": "def sat(x: List[int], a=9896, s=5296, e=162261):\n    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])",
    "sols": [
      "def sol(a=9896, s=5296, e=162261):\n    return list(range(a, e + 1, s))"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ArithmeticSequence_8",
    "sat": "def sat(x: List[int], a=87735, s=990, e=972157):\n    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])",
    "sols": [
      "def sol(a=87735, s=990, e=972157):\n    return list(range(a, e + 1, s))"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ArithmeticSequence_9",
    "sat": "def sat(x: List[int], a=39969, s=8055, e=644333):\n    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])",
    "sols": [
      "def sol(a=39969, s=8055, e=644333):\n    return list(range(a, e + 1, s))"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "GeometricSequence_0",
    "sat": "def sat(x: List[int], a=8, r=2, l=50):\n    \"\"\"Create a list that is a subrange of an gemoetric sequence.\"\"\"\n    return x[0] == a and len(x) == l and all([x[i] * r == x[i + 1] for i in range(len(x) - 1)])",
    "sols": [
      "def sol(a=8, r=2, l=50):\n    return [a * r ** i for i in range(l)]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "GeometricSequence_1",
    "sat": "def sat(x: List[int], a=-484, r=4, l=589):\n    \"\"\"Create a list that is a subrange of an gemoetric sequence.\"\"\"\n    return x[0] == a and len(x) == l and all([x[i] * r == x[i + 1] for i in range(len(x) - 1)])",
    "sols": [
      "def sol(a=-484, r=4, l=589):\n    return [a * r ** i for i in range(l)]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "GeometricSequence_2",
    "sat": "def sat(x: List[int], a=889, r=7, l=393):\n    \"\"\"Create a list that is a subrange of an gemoetric sequence.\"\"\"\n    return x[0] == a and len(x) == l and all([x[i] * r == x[i + 1] for i in range(len(x) - 1)])",
    "sols": [
      "def sol(a=889, r=7, l=393):\n    return [a * r ** i for i in range(l)]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "GeometricSequence_3",
    "sat": "def sat(x: List[int], a=-777, r=4, l=103):\n    \"\"\"Create a list that is a subrange of an gemoetric sequence.\"\"\"\n    return x[0] == a and len(x) == l and all([x[i] * r == x[i + 1] for i in range(len(x) - 1)])",
    "sols": [
      "def sol(a=-777, r=4, l=103):\n    return [a * r ** i for i in range(l)]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "GeometricSequence_4",
    "sat": "def sat(x: List[int], a=-736, r=4, l=92):\n    \"\"\"Create a list that is a subrange of an gemoetric sequence.\"\"\"\n    return x[0] == a and len(x) == l and all([x[i] * r == x[i + 1] for i in range(len(x) - 1)])",
    "sols": [
      "def sol(a=-736, r=4, l=92):\n    return [a * r ** i for i in range(l)]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "GeometricSequence_5",
    "sat": "def sat(x: List[int], a=-919, r=3, l=45):\n    \"\"\"Create a list that is a subrange of an gemoetric sequence.\"\"\"\n    return x[0] == a and len(x) == l and all([x[i] * r == x[i + 1] for i in range(len(x) - 1)])",
    "sols": [
      "def sol(a=-919, r=3, l=45):\n    return [a * r ** i for i in range(l)]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "GeometricSequence_6",
    "sat": "def sat(x: List[int], a=-321, r=10, l=949):\n    \"\"\"Create a list that is a subrange of an gemoetric sequence.\"\"\"\n    return x[0] == a and len(x) == l and all([x[i] * r == x[i + 1] for i in range(len(x) - 1)])",
    "sols": [
      "def sol(a=-321, r=10, l=949):\n    return [a * r ** i for i in range(l)]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "GeometricSequence_7",
    "sat": "def sat(x: List[int], a=311, r=2, l=412):\n    \"\"\"Create a list that is a subrange of an gemoetric sequence.\"\"\"\n    return x[0] == a and len(x) == l and all([x[i] * r == x[i + 1] for i in range(len(x) - 1)])",
    "sols": [
      "def sol(a=311, r=2, l=412):\n    return [a * r ** i for i in range(l)]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "GeometricSequence_8",
    "sat": "def sat(x: List[int], a=410, r=10, l=558):\n    \"\"\"Create a list that is a subrange of an gemoetric sequence.\"\"\"\n    return x[0] == a and len(x) == l and all([x[i] * r == x[i + 1] for i in range(len(x) - 1)])",
    "sols": [
      "def sol(a=410, r=10, l=558):\n    return [a * r ** i for i in range(l)]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "GeometricSequence_9",
    "sat": "def sat(x: List[int], a=165, r=10, l=326):\n    \"\"\"Create a list that is a subrange of an gemoetric sequence.\"\"\"\n    return x[0] == a and len(x) == l and all([x[i] * r == x[i + 1] for i in range(len(x) - 1)])",
    "sols": [
      "def sol(a=165, r=10, l=326):\n    return [a * r ** i for i in range(l)]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LineIntersection_0",
    "sat": "def sat(e: List[int], a=2, b=-1, c=1, d=2021):\n    \"\"\"\n    Find the intersection of two lines.\n    Solution should be a list of the (x,y) coordinates.\n    Accuracy of fifth decimal digit is required.\n    \"\"\"\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** -5",
    "sols": [
      "def sol(a=2, b=-1, c=1, d=2021):\n    return [d - b, a - c]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LineIntersection_1",
    "sat": "def sat(e: List[int], a=-77698407, b=-31793716, c=-10799659, d=89278024):\n    \"\"\"\n    Find the intersection of two lines.\n    Solution should be a list of the (x,y) coordinates.\n    Accuracy of fifth decimal digit is required.\n    \"\"\"\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** -5",
    "sols": [
      "def sol(a=-77698407, b=-31793716, c=-10799659, d=89278024):\n    return [d - b, a - c]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LineIntersection_2",
    "sat": "def sat(e: List[int], a=89600582, b=-47657198, c=95101265, d=-52126265):\n    \"\"\"\n    Find the intersection of two lines.\n    Solution should be a list of the (x,y) coordinates.\n    Accuracy of fifth decimal digit is required.\n    \"\"\"\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** -5",
    "sols": [
      "def sol(a=89600582, b=-47657198, c=95101265, d=-52126265):\n    return [d - b, a - c]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LineIntersection_3",
    "sat": "def sat(e: List[int], a=-11422303, b=-57150416, c=-59162339, d=-37428439):\n    \"\"\"\n    Find the intersection of two lines.\n    Solution should be a list of the (x,y) coordinates.\n    Accuracy of fifth decimal digit is required.\n    \"\"\"\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** -5",
    "sols": [
      "def sol(a=-11422303, b=-57150416, c=-59162339, d=-37428439):\n    return [d - b, a - c]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LineIntersection_4",
    "sat": "def sat(e: List[int], a=-18517001, b=-13662763, c=-11156613, d=9271005):\n    \"\"\"\n    Find the intersection of two lines.\n    Solution should be a list of the (x,y) coordinates.\n    Accuracy of fifth decimal digit is required.\n    \"\"\"\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** -5",
    "sols": [
      "def sol(a=-18517001, b=-13662763, c=-11156613, d=9271005):\n    return [d - b, a - c]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LineIntersection_5",
    "sat": "def sat(e: List[int], a=66662245, b=-77446843, c=-13474939, d=-81260641):\n    \"\"\"\n    Find the intersection of two lines.\n    Solution should be a list of the (x,y) coordinates.\n    Accuracy of fifth decimal digit is required.\n    \"\"\"\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** -5",
    "sols": [
      "def sol(a=66662245, b=-77446843, c=-13474939, d=-81260641):\n    return [d - b, a - c]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LineIntersection_6",
    "sat": "def sat(e: List[int], a=58075077, b=81729480, c=-29062535, d=47206861):\n    \"\"\"\n    Find the intersection of two lines.\n    Solution should be a list of the (x,y) coordinates.\n    Accuracy of fifth decimal digit is required.\n    \"\"\"\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** -5",
    "sols": [
      "def sol(a=58075077, b=81729480, c=-29062535, d=47206861):\n    return [d - b, a - c]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LineIntersection_7",
    "sat": "def sat(e: List[int], a=-34145371, b=-40535174, c=-77545901, d=-74328636):\n    \"\"\"\n    Find the intersection of two lines.\n    Solution should be a list of the (x,y) coordinates.\n    Accuracy of fifth decimal digit is required.\n    \"\"\"\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** -5",
    "sols": [
      "def sol(a=-34145371, b=-40535174, c=-77545901, d=-74328636):\n    return [d - b, a - c]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LineIntersection_8",
    "sat": "def sat(e: List[int], a=34194215, b=-43188845, c=10400013, d=13745364):\n    \"\"\"\n    Find the intersection of two lines.\n    Solution should be a list of the (x,y) coordinates.\n    Accuracy of fifth decimal digit is required.\n    \"\"\"\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** -5",
    "sols": [
      "def sol(a=34194215, b=-43188845, c=10400013, d=13745364):\n    return [d - b, a - c]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "LineIntersection_9",
    "sat": "def sat(e: List[int], a=26488659, b=76273097, c=19384670, d=-88393526):\n    \"\"\"\n    Find the intersection of two lines.\n    Solution should be a list of the (x,y) coordinates.\n    Accuracy of fifth decimal digit is required.\n    \"\"\"\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** -5",
    "sols": [
      "def sol(a=26488659, b=76273097, c=19384670, d=-88393526):\n    return [d - b, a - c]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblem_0",
    "sat": "def sat(x: int, a=324554, b=1345345):\n    \"\"\"Satisfy a simple if statement\"\"\"\n    if a < 50:\n        return x + a == b\n    else:\n        return x - 2 * a == b",
    "sols": [
      "def sol(a=324554, b=1345345):\n    if a < 50:\n        return b - a\n    else:\n        return b + 2 * a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblem_1",
    "sat": "def sat(x: int, a=51, b=40553793):\n    \"\"\"Satisfy a simple if statement\"\"\"\n    if a < 50:\n        return x + a == b\n    else:\n        return x - 2 * a == b",
    "sols": [
      "def sol(a=51, b=40553793):\n    if a < 50:\n        return b - a\n    else:\n        return b + 2 * a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblem_2",
    "sat": "def sat(x: int, a=50, b=72369383):\n    \"\"\"Satisfy a simple if statement\"\"\"\n    if a < 50:\n        return x + a == b\n    else:\n        return x - 2 * a == b",
    "sols": [
      "def sol(a=50, b=72369383):\n    if a < 50:\n        return b - a\n    else:\n        return b + 2 * a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblem_3",
    "sat": "def sat(x: int, a=90, b=42412534):\n    \"\"\"Satisfy a simple if statement\"\"\"\n    if a < 50:\n        return x + a == b\n    else:\n        return x - 2 * a == b",
    "sols": [
      "def sol(a=90, b=42412534):\n    if a < 50:\n        return b - a\n    else:\n        return b + 2 * a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblem_4",
    "sat": "def sat(x: int, a=62, b=-26538057):\n    \"\"\"Satisfy a simple if statement\"\"\"\n    if a < 50:\n        return x + a == b\n    else:\n        return x - 2 * a == b",
    "sols": [
      "def sol(a=62, b=-26538057):\n    if a < 50:\n        return b - a\n    else:\n        return b + 2 * a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblem_5",
    "sat": "def sat(x: int, a=35, b=68891015):\n    \"\"\"Satisfy a simple if statement\"\"\"\n    if a < 50:\n        return x + a == b\n    else:\n        return x - 2 * a == b",
    "sols": [
      "def sol(a=35, b=68891015):\n    if a < 50:\n        return b - a\n    else:\n        return b + 2 * a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblem_6",
    "sat": "def sat(x: int, a=99, b=-40055864):\n    \"\"\"Satisfy a simple if statement\"\"\"\n    if a < 50:\n        return x + a == b\n    else:\n        return x - 2 * a == b",
    "sols": [
      "def sol(a=99, b=-40055864):\n    if a < 50:\n        return b - a\n    else:\n        return b + 2 * a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblem_7",
    "sat": "def sat(x: int, a=62, b=16884181):\n    \"\"\"Satisfy a simple if statement\"\"\"\n    if a < 50:\n        return x + a == b\n    else:\n        return x - 2 * a == b",
    "sols": [
      "def sol(a=62, b=16884181):\n    if a < 50:\n        return b - a\n    else:\n        return b + 2 * a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblem_8",
    "sat": "def sat(x: int, a=92, b=53801166):\n    \"\"\"Satisfy a simple if statement\"\"\"\n    if a < 50:\n        return x + a == b\n    else:\n        return x - 2 * a == b",
    "sols": [
      "def sol(a=92, b=53801166):\n    if a < 50:\n        return b - a\n    else:\n        return b + 2 * a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblem_9",
    "sat": "def sat(x: int, a=49, b=-35819854):\n    \"\"\"Satisfy a simple if statement\"\"\"\n    if a < 50:\n        return x + a == b\n    else:\n        return x - 2 * a == b",
    "sols": [
      "def sol(a=49, b=-35819854):\n    if a < 50:\n        return b - a\n    else:\n        return b + 2 * a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblemWithAnd_0",
    "sat": "def sat(x: int, a=9384594, b=1343663):\n    \"\"\"Satisfy a simple if statement with an and clause\"\"\"\n    if x > 0 and a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=9384594, b=1343663):\n    if a > 50 and b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblemWithAnd_1",
    "sat": "def sat(x: int, a=57, b=40522966):\n    \"\"\"Satisfy a simple if statement with an and clause\"\"\"\n    if x > 0 and a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=57, b=40522966):\n    if a > 50 and b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblemWithAnd_2",
    "sat": "def sat(x: int, a=29, b=71683001):\n    \"\"\"Satisfy a simple if statement with an and clause\"\"\"\n    if x > 0 and a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=29, b=71683001):\n    if a > 50 and b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblemWithAnd_3",
    "sat": "def sat(x: int, a=92, b=8820402):\n    \"\"\"Satisfy a simple if statement with an and clause\"\"\"\n    if x > 0 and a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=92, b=8820402):\n    if a > 50 and b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblemWithAnd_4",
    "sat": "def sat(x: int, a=64, b=46712723):\n    \"\"\"Satisfy a simple if statement with an and clause\"\"\"\n    if x > 0 and a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=64, b=46712723):\n    if a > 50 and b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblemWithAnd_5",
    "sat": "def sat(x: int, a=27, b=5434649):\n    \"\"\"Satisfy a simple if statement with an and clause\"\"\"\n    if x > 0 and a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=27, b=5434649):\n    if a > 50 and b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblemWithAnd_6",
    "sat": "def sat(x: int, a=37, b=38397371):\n    \"\"\"Satisfy a simple if statement with an and clause\"\"\"\n    if x > 0 and a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=37, b=38397371):\n    if a > 50 and b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblemWithAnd_7",
    "sat": "def sat(x: int, a=11, b=77928015):\n    \"\"\"Satisfy a simple if statement with an and clause\"\"\"\n    if x > 0 and a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=11, b=77928015):\n    if a > 50 and b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblemWithAnd_8",
    "sat": "def sat(x: int, a=86, b=37109313):\n    \"\"\"Satisfy a simple if statement with an and clause\"\"\"\n    if x > 0 and a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=86, b=37109313):\n    if a > 50 and b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblemWithAnd_9",
    "sat": "def sat(x: int, a=39, b=780129):\n    \"\"\"Satisfy a simple if statement with an and clause\"\"\"\n    if x > 0 and a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=39, b=780129):\n    if a > 50 and b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblemWithOr_0",
    "sat": "def sat(x: int, a=253532, b=1230200):\n    \"\"\"Satisfy a simple if statement with an or clause\"\"\"\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=253532, b=1230200):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblemWithOr_1",
    "sat": "def sat(x: int, a=22, b=-84904666):\n    \"\"\"Satisfy a simple if statement with an or clause\"\"\"\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=22, b=-84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblemWithOr_2",
    "sat": "def sat(x: int, a=10, b=74723522):\n    \"\"\"Satisfy a simple if statement with an or clause\"\"\"\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=10, b=74723522):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblemWithOr_3",
    "sat": "def sat(x: int, a=66, b=-39109407):\n    \"\"\"Satisfy a simple if statement with an or clause\"\"\"\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=66, b=-39109407):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblemWithOr_4",
    "sat": "def sat(x: int, a=24, b=18773099):\n    \"\"\"Satisfy a simple if statement with an or clause\"\"\"\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=24, b=18773099):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblemWithOr_5",
    "sat": "def sat(x: int, a=46, b=9116075):\n    \"\"\"Satisfy a simple if statement with an or clause\"\"\"\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=46, b=9116075):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblemWithOr_6",
    "sat": "def sat(x: int, a=14, b=-39450114):\n    \"\"\"Satisfy a simple if statement with an or clause\"\"\"\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=14, b=-39450114):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblemWithOr_7",
    "sat": "def sat(x: int, a=26, b=-53224550):\n    \"\"\"Satisfy a simple if statement with an or clause\"\"\"\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=26, b=-53224550):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblemWithOr_8",
    "sat": "def sat(x: int, a=97, b=59368921):\n    \"\"\"Satisfy a simple if statement with an or clause\"\"\"\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=97, b=59368921):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfProblemWithOr_9",
    "sat": "def sat(x: int, a=90, b=20458713):\n    \"\"\"Satisfy a simple if statement with an or clause\"\"\"\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=90, b=20458713):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfCases_0",
    "sat": "def sat(x: int, a=4, b=54368639):\n    \"\"\"Satisfy a simple if statement with multiple cases\"\"\"\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=4, b=54368639):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfCases_1",
    "sat": "def sat(x: int, a=-4, b=-83354930):\n    \"\"\"Satisfy a simple if statement with multiple cases\"\"\"\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=-4, b=-83354930):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfCases_2",
    "sat": "def sat(x: int, a=-3, b=71965664):\n    \"\"\"Satisfy a simple if statement with multiple cases\"\"\"\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=-3, b=71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfCases_3",
    "sat": "def sat(x: int, a=2, b=36068130):\n    \"\"\"Satisfy a simple if statement with multiple cases\"\"\"\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=2, b=36068130):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfCases_4",
    "sat": "def sat(x: int, a=-3, b=14385903):\n    \"\"\"Satisfy a simple if statement with multiple cases\"\"\"\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=-3, b=14385903):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfCases_5",
    "sat": "def sat(x: int, a=-3, b=7929575):\n    \"\"\"Satisfy a simple if statement with multiple cases\"\"\"\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=-3, b=7929575):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfCases_6",
    "sat": "def sat(x: int, a=1, b=34634397):\n    \"\"\"Satisfy a simple if statement with multiple cases\"\"\"\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=1, b=34634397):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfCases_7",
    "sat": "def sat(x: int, a=-3, b=54942199):\n    \"\"\"Satisfy a simple if statement with multiple cases\"\"\"\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=-3, b=54942199):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfCases_8",
    "sat": "def sat(x: int, a=-5, b=-65004772):\n    \"\"\"Satisfy a simple if statement with multiple cases\"\"\"\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=-5, b=-65004772):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "IfCases_9",
    "sat": "def sat(x: int, a=-2, b=82754407):\n    \"\"\"Satisfy a simple if statement with multiple cases\"\"\"\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b",
    "sols": [
      "def sol(a=-2, b=82754407):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ListPosSum_0",
    "sat": "def sat(x: List[int], n=5, s=19):\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
    "sols": [
      "def sol(n=5, s=19):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ListPosSum_1",
    "sat": "def sat(x: List[int], n=6241, s=54594969):\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
    "sols": [
      "def sol(n=6241, s=54594969):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ListPosSum_2",
    "sat": "def sat(x: List[int], n=8427, s=33081884):\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
    "sols": [
      "def sol(n=8427, s=33081884):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ListPosSum_3",
    "sat": "def sat(x: List[int], n=3363, s=67595319):\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
    "sols": [
      "def sol(n=3363, s=67595319):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ListPosSum_4",
    "sat": "def sat(x: List[int], n=9909, s=88140438):\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
    "sols": [
      "def sol(n=9909, s=88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ListPosSum_5",
    "sat": "def sat(x: List[int], n=5390, s=59545596):\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
    "sols": [
      "def sol(n=5390, s=59545596):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ListPosSum_6",
    "sat": "def sat(x: List[int], n=174, s=25578092):\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
    "sols": [
      "def sol(n=174, s=25578092):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ListPosSum_7",
    "sat": "def sat(x: List[int], n=1734, s=82075077):\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
    "sols": [
      "def sol(n=1734, s=82075077):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ListPosSum_8",
    "sat": "def sat(x: List[int], n=7583, s=30735127):\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
    "sols": [
      "def sol(n=7583, s=30735127):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ListPosSum_9",
    "sat": "def sat(x: List[int], n=4841, s=15818178):\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
    "sols": [
      "def sol(n=4841, s=15818178):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ListDistinctSum_0",
    "sat": "def sat(x: List[int], n=4, s=2021):\n    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and len(set(x)) == n",
    "sols": [
      "def sol(n=4, s=2021):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ListDistinctSum_1",
    "sat": "def sat(x: List[int], n=124, s=2603089):\n    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and len(set(x)) == n",
    "sols": [
      "def sol(n=124, s=2603089):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ListDistinctSum_2",
    "sat": "def sat(x: List[int], n=823, s=8609609):\n    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and len(set(x)) == n",
    "sols": [
      "def sol(n=823, s=8609609):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ListDistinctSum_3",
    "sat": "def sat(x: List[int], n=796, s=86694751):\n    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and len(set(x)) == n",
    "sols": [
      "def sol(n=796, s=86694751):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ListDistinctSum_4",
    "sat": "def sat(x: List[int], n=225, s=38417364):\n    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and len(set(x)) == n",
    "sols": [
      "def sol(n=225, s=38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ListDistinctSum_5",
    "sat": "def sat(x: List[int], n=647, s=19596959):\n    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and len(set(x)) == n",
    "sols": [
      "def sol(n=647, s=19596959):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ListDistinctSum_6",
    "sat": "def sat(x: List[int], n=319, s=33831495):\n    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and len(set(x)) == n",
    "sols": [
      "def sol(n=319, s=33831495):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ListDistinctSum_7",
    "sat": "def sat(x: List[int], n=14, s=58095315):\n    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and len(set(x)) == n",
    "sols": [
      "def sol(n=14, s=58095315):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ListDistinctSum_8",
    "sat": "def sat(x: List[int], n=621, s=30680686):\n    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and len(set(x)) == n",
    "sols": [
      "def sol(n=621, s=30680686):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ListDistinctSum_9",
    "sat": "def sat(x: List[int], n=737, s=45285163):\n    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and len(set(x)) == n",
    "sols": [
      "def sol(n=737, s=45285163):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ConcatStrings_0",
    "sat": "def sat(x: str, s=['a', 'b', 'c', 'd', 'e', 'f'], n=4):\n    \"\"\"Concatenate the list of characters in s\"\"\"\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])",
    "sols": [
      "def sol(s=['a', 'b', 'c', 'd', 'e', 'f'], n=4):\n    return ''.join([s[i] for i in range(n)])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ConcatStrings_1",
    "sat": "def sat(x: str, s=['I', '&', 'W', '&', 'p', 'c', '-', 'U', '(', ' ', 'A', '(', 'S', 'W', 'R', '#', 'm', 'v', '@', '8', '%', 'a', '.', 'K', 'O', '[', '[', '#', 'q', 'k', 'K'], n=16):\n    \"\"\"Concatenate the list of characters in s\"\"\"\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])",
    "sols": [
      "def sol(s=['I', '&', 'W', '&', 'p', 'c', '-', 'U', '(', ' ', 'A', '(', 'S', 'W', 'R', '#', 'm', 'v', '@', '8', '%', 'a', '.', 'K', 'O', '[', '[', '#', 'q', 'k', 'K'], n=16):\n    return ''.join([s[i] for i in range(n)])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ConcatStrings_2",
    "sat": "def sat(x: str, s=['L', 'C', 'b', 'r', 't', 'V', 'R', '%', 'R', '8', 'V', '#', '<', '!', 'U', 'y', 'x'], n=13):\n    \"\"\"Concatenate the list of characters in s\"\"\"\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])",
    "sols": [
      "def sol(s=['L', 'C', 'b', 'r', 't', 'V', 'R', '%', 'R', '8', 'V', '#', '<', '!', 'U', 'y', 'x'], n=13):\n    return ''.join([s[i] for i in range(n)])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ConcatStrings_3",
    "sat": "def sat(x: str, s=['-', '&', ')', '&', 'c', 'l', '/', 'H', '1', 'j', 'z', 'o', 'E', '|', '8', '&', '0', '&', 'y', '!', 'r', 'H', 'S', 'P', '5'], n=8):\n    \"\"\"Concatenate the list of characters in s\"\"\"\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])",
    "sols": [
      "def sol(s=['-', '&', ')', '&', 'c', 'l', '/', 'H', '1', 'j', 'z', 'o', 'E', '|', '8', '&', '0', '&', 'y', '!', 'r', 'H', 'S', 'P', '5'], n=8):\n    return ''.join([s[i] for i in range(n)])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ConcatStrings_4",
    "sat": "def sat(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16):\n    \"\"\"Concatenate the list of characters in s\"\"\"\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])",
    "sols": [
      "def sol(s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16):\n    return ''.join([s[i] for i in range(n)])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ConcatStrings_5",
    "sat": "def sat(x: str, s=[')', ',', '1', 'd', '8', '2', 'e', 'E', 'A', 'P', '9', 'F', '.', 'R', 'y', 'v', 'E', 'A', 'j', 'k', '8', 'z', 'w', 'g', 'd', 'd', 'D', 'A', '(', '8', 'x', 'P', 'K', '>', 'X'], n=22):\n    \"\"\"Concatenate the list of characters in s\"\"\"\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])",
    "sols": [
      "def sol(s=[')', ',', '1', 'd', '8', '2', 'e', 'E', 'A', 'P', '9', 'F', '.', 'R', 'y', 'v', 'E', 'A', 'j', 'k', '8', 'z', 'w', 'g', 'd', 'd', 'D', 'A', '(', '8', 'x', 'P', 'K', '>', 'X'], n=22):\n    return ''.join([s[i] for i in range(n)])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ConcatStrings_6",
    "sat": "def sat(x: str, s=['H', 'd', 'Y', '@', 'y', 'd', 'v', 'o', 'x', '?', '$', '3', 'D', 'n', '$', 'L', 'y', 'j', 'j', '.', 'L', 'c', 'h', 'u', 'b', 'k', '[', 'b', 'C', '5', 'J', 'G', 'm', 'u', '=', '!'], n=23):\n    \"\"\"Concatenate the list of characters in s\"\"\"\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])",
    "sols": [
      "def sol(s=['H', 'd', 'Y', '@', 'y', 'd', 'v', 'o', 'x', '?', '$', '3', 'D', 'n', '$', 'L', 'y', 'j', 'j', '.', 'L', 'c', 'h', 'u', 'b', 'k', '[', 'b', 'C', '5', 'J', 'G', 'm', 'u', '=', '!'], n=23):\n    return ''.join([s[i] for i in range(n)])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ConcatStrings_7",
    "sat": "def sat(x: str, s=['v', '5', 'T', 'c', '@', 'v', ')', '?', '2', 't', 'e', 'y', 'J', '$', 's', '.', 'A', '0', 'L', '*'], n=10):\n    \"\"\"Concatenate the list of characters in s\"\"\"\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])",
    "sols": [
      "def sol(s=['v', '5', 'T', 'c', '@', 'v', ')', '?', '2', 't', 'e', 'y', 'J', '$', 's', '.', 'A', '0', 'L', '*'], n=10):\n    return ''.join([s[i] for i in range(n)])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ConcatStrings_8",
    "sat": "def sat(x: str, s=['1', '5', 'K', 'e', '-', 'Y', 'l', ')', 'g', 'g', 'X', 'Z', 'D', 'X', '-', 'v', 'l', 'N', 'N', 'F', '6', 'Y', 'I', 'k', 'V'], n=9):\n    \"\"\"Concatenate the list of characters in s\"\"\"\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])",
    "sols": [
      "def sol(s=['1', '5', 'K', 'e', '-', 'Y', 'l', ')', 'g', 'g', 'X', 'Z', 'D', 'X', '-', 'v', 'l', 'N', 'N', 'F', '6', 'Y', 'I', 'k', 'V'], n=9):\n    return ''.join([s[i] for i in range(n)])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ConcatStrings_9",
    "sat": "def sat(x: str, s=['V', 's', '|', 'i', 'U', 'o', 'u', 'W', 'Q', 'X', 'O', 'O', 'p', '&', 'J', '.', 'F', 'i', '[', '8', '[', 'j', 'Y', 'z'], n=24):\n    \"\"\"Concatenate the list of characters in s\"\"\"\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])",
    "sols": [
      "def sol(s=['V', 's', '|', 'i', 'U', 'o', 'u', 'W', 'Q', 'X', 'O', 'O', 'p', '&', 'J', '.', 'F', 'i', '[', '8', '[', 'j', 'Y', 'z'], n=24):\n    return ''.join([s[i] for i in range(n)])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SublistSum_0",
    "sat": "def sat(x: List[int], t=677, a=43, e=125, s=10):\n    \"\"\"Sum values of sublist by range specifications\"\"\"\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all(\n        [x[i] != 0 for i in range(a, e, s)])",
    "sols": [
      "def sol(t=677, a=43, e=125, s=10):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SublistSum_1",
    "sat": "def sat(x: List[int], t=44475424, a=93, e=8496, s=6):\n    \"\"\"Sum values of sublist by range specifications\"\"\"\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all(\n        [x[i] != 0 for i in range(a, e, s)])",
    "sols": [
      "def sol(t=44475424, a=93, e=8496, s=6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SublistSum_2",
    "sat": "def sat(x: List[int], t=2183536, a=36, e=8450, s=1):\n    \"\"\"Sum values of sublist by range specifications\"\"\"\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all(\n        [x[i] != 0 for i in range(a, e, s)])",
    "sols": [
      "def sol(t=2183536, a=36, e=8450, s=1):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SublistSum_3",
    "sat": "def sat(x: List[int], t=1196610, a=15, e=4376, s=3):\n    \"\"\"Sum values of sublist by range specifications\"\"\"\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all(\n        [x[i] != 0 for i in range(a, e, s)])",
    "sols": [
      "def sol(t=1196610, a=15, e=4376, s=3):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SublistSum_4",
    "sat": "def sat(x: List[int], t=6165697, a=47, e=3830, s=2):\n    \"\"\"Sum values of sublist by range specifications\"\"\"\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all(\n        [x[i] != 0 for i in range(a, e, s)])",
    "sols": [
      "def sol(t=6165697, a=47, e=3830, s=2):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SublistSum_5",
    "sat": "def sat(x: List[int], t=57512774, a=72, e=2969, s=10):\n    \"\"\"Sum values of sublist by range specifications\"\"\"\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all(\n        [x[i] != 0 for i in range(a, e, s)])",
    "sols": [
      "def sol(t=57512774, a=72, e=2969, s=10):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SublistSum_6",
    "sat": "def sat(x: List[int], t=33284554, a=29, e=9940, s=6):\n    \"\"\"Sum values of sublist by range specifications\"\"\"\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all(\n        [x[i] != 0 for i in range(a, e, s)])",
    "sols": [
      "def sol(t=33284554, a=29, e=9940, s=6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SublistSum_7",
    "sat": "def sat(x: List[int], t=61009433, a=30, e=2203, s=2):\n    \"\"\"Sum values of sublist by range specifications\"\"\"\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all(\n        [x[i] != 0 for i in range(a, e, s)])",
    "sols": [
      "def sol(t=61009433, a=30, e=2203, s=2):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SublistSum_8",
    "sat": "def sat(x: List[int], t=92000125, a=41, e=4040, s=7):\n    \"\"\"Sum values of sublist by range specifications\"\"\"\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all(\n        [x[i] != 0 for i in range(a, e, s)])",
    "sols": [
      "def sol(t=92000125, a=41, e=4040, s=7):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SublistSum_9",
    "sat": "def sat(x: List[int], t=97619250, a=76, e=8612, s=1):\n    \"\"\"Sum values of sublist by range specifications\"\"\"\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all(\n        [x[i] != 0 for i in range(a, e, s)])",
    "sols": [
      "def sol(t=97619250, a=76, e=8612, s=1):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CumulativeSum_0",
    "sat": "def sat(x: List[int], t=50, n=10):\n    \"\"\"Find how many values have cumulative sum less than target\"\"\"\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n",
    "sols": [
      "def sol(t=50, n=10):\n    return [1] * n + [t]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CumulativeSum_1",
    "sat": "def sat(x: List[int], t=364928431, n=1088):\n    \"\"\"Find how many values have cumulative sum less than target\"\"\"\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n",
    "sols": [
      "def sol(t=364928431, n=1088):\n    return [1] * n + [t]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CumulativeSum_2",
    "sat": "def sat(x: List[int], t=7978940451, n=5932):\n    \"\"\"Find how many values have cumulative sum less than target\"\"\"\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n",
    "sols": [
      "def sol(t=7978940451, n=5932):\n    return [1] * n + [t]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CumulativeSum_3",
    "sat": "def sat(x: List[int], t=4545622399, n=1009):\n    \"\"\"Find how many values have cumulative sum less than target\"\"\"\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n",
    "sols": [
      "def sol(t=4545622399, n=1009):\n    return [1] * n + [t]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CumulativeSum_4",
    "sat": "def sat(x: List[int], t=4917027557, n=4815):\n    \"\"\"Find how many values have cumulative sum less than target\"\"\"\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n",
    "sols": [
      "def sol(t=4917027557, n=4815):\n    return [1] * n + [t]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CumulativeSum_5",
    "sat": "def sat(x: List[int], t=7284692637, n=5426):\n    \"\"\"Find how many values have cumulative sum less than target\"\"\"\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n",
    "sols": [
      "def sol(t=7284692637, n=5426):\n    return [1] * n + [t]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CumulativeSum_6",
    "sat": "def sat(x: List[int], t=1827591180, n=137):\n    \"\"\"Find how many values have cumulative sum less than target\"\"\"\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n",
    "sols": [
      "def sol(t=1827591180, n=137):\n    return [1] * n + [t]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CumulativeSum_7",
    "sat": "def sat(x: List[int], t=7072532941, n=724):\n    \"\"\"Find how many values have cumulative sum less than target\"\"\"\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n",
    "sols": [
      "def sol(t=7072532941, n=724):\n    return [1] * n + [t]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CumulativeSum_8",
    "sat": "def sat(x: List[int], t=5416310980, n=4948):\n    \"\"\"Find how many values have cumulative sum less than target\"\"\"\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n",
    "sols": [
      "def sol(t=5416310980, n=4948):\n    return [1] * n + [t]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CumulativeSum_9",
    "sat": "def sat(x: List[int], t=8182502443, n=6415):\n    \"\"\"Find how many values have cumulative sum less than target\"\"\"\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n",
    "sols": [
      "def sol(t=8182502443, n=6415):\n    return [1] * n + [t]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "BasicStrCounts_0",
    "sat": "def sat(s: str, s1=\"a\", s2=\"b\", count1=50, count2=30):\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 10 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and s[:10] == s[-10:]",
    "sols": [
      "def sol(s1=\"a\", s2=\"b\", count1=50, count2=30):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "BasicStrCounts_1",
    "sat": "def sat(s: str, s1=\"t\", s2=\"qu\", count1=86, count2=83):\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 10 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and s[:10] == s[-10:]",
    "sols": [
      "def sol(s1=\"t\", s2=\"qu\", count1=86, count2=83):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "BasicStrCounts_2",
    "sat": "def sat(s: str, s1=\"kuc\", s2=\"qu\", count1=63, count2=58):\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 10 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and s[:10] == s[-10:]",
    "sols": [
      "def sol(s1=\"kuc\", s2=\"qu\", count1=63, count2=58):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "BasicStrCounts_3",
    "sat": "def sat(s: str, s1=\"te\", s2=\"tex\", count1=97, count2=53):\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 10 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and s[:10] == s[-10:]",
    "sols": [
      "def sol(s1=\"te\", s2=\"tex\", count1=97, count2=53):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "BasicStrCounts_4",
    "sat": "def sat(s: str, s1=\"hot\", s2=\"n\", count1=48, count2=92):\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 10 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and s[:10] == s[-10:]",
    "sols": [
      "def sol(s1=\"hot\", s2=\"n\", count1=48, count2=92):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "BasicStrCounts_5",
    "sat": "def sat(s: str, s1=\"gus\", s2=\"fo\", count1=36, count2=60):\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 10 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and s[:10] == s[-10:]",
    "sols": [
      "def sol(s1=\"gus\", s2=\"fo\", count1=36, count2=60):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "BasicStrCounts_6",
    "sat": "def sat(s: str, s1=\"f\", s2=\"ny\", count1=65, count2=66):\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 10 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and s[:10] == s[-10:]",
    "sols": [
      "def sol(s1=\"f\", s2=\"ny\", count1=65, count2=66):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "BasicStrCounts_7",
    "sat": "def sat(s: str, s1=\"s\", s2=\"k\", count1=24, count2=27):\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 10 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and s[:10] == s[-10:]",
    "sols": [
      "def sol(s1=\"s\", s2=\"k\", count1=24, count2=27):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "BasicStrCounts_8",
    "sat": "def sat(s: str, s1=\"x\", s2=\"tyj\", count1=74, count2=8):\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 10 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and s[:10] == s[-10:]",
    "sols": [
      "def sol(s1=\"x\", s2=\"tyj\", count1=74, count2=8):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "BasicStrCounts_9",
    "sat": "def sat(s: str, s1=\"p\", s2=\"mec\", count1=99, count2=1):\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 10 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and s[:10] == s[-10:]",
    "sols": [
      "def sol(s1=\"p\", s2=\"mec\", count1=99, count2=1):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ZipStr_0",
    "sat": "def sat(s: str, substrings=['foo', 'bar', 'baz', 'oddball']):\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"\n    return all(sub in s[i::len(substrings)] for i, sub in enumerate(substrings))",
    "sols": [
      "def sol(substrings=['foo', 'bar', 'baz', 'oddball']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ZipStr_1",
    "sat": "def sat(s: str, substrings=['quifelota', 'chyhimyvemene', 'ge']):\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"\n    return all(sub in s[i::len(substrings)] for i, sub in enumerate(substrings))",
    "sols": [
      "def sol(substrings=['quifelota', 'chyhimyvemene', 'ge']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ZipStr_2",
    "sat": "def sat(s: str, substrings=['kitytextiritex', 'cumathoxaz', 'rebute', 'rocor']):\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"\n    return all(sub in s[i::len(substrings)] for i, sub in enumerate(substrings))",
    "sols": [
      "def sol(substrings=['kitytextiritex', 'cumathoxaz', 'rebute', 'rocor']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ZipStr_3",
    "sat": "def sat(s: str, substrings=['te', 'wusyc']):\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"\n    return all(sub in s[i::len(substrings)] for i, sub in enumerate(substrings))",
    "sols": [
      "def sol(substrings=['te', 'wusyc']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ZipStr_4",
    "sat": "def sat(s: str, substrings=['cute', 'rysucajaxuno']):\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"\n    return all(sub in s[i::len(substrings)] for i, sub in enumerate(substrings))",
    "sols": [
      "def sol(substrings=['cute', 'rysucajaxuno']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ZipStr_5",
    "sat": "def sat(s: str, substrings=['dafykechizoj', 'levi', 'ligohysowebizic', 'cho']):\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"\n    return all(sub in s[i::len(substrings)] for i, sub in enumerate(substrings))",
    "sols": [
      "def sol(substrings=['dafykechizoj', 'levi', 'ligohysowebizic', 'cho']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ZipStr_6",
    "sat": "def sat(s: str, substrings=['fufithatext']):\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"\n    return all(sub in s[i::len(substrings)] for i, sub in enumerate(substrings))",
    "sols": [
      "def sol(substrings=['fufithatext']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ZipStr_7",
    "sat": "def sat(s: str, substrings=['pithygymuwoquumudir', 'gaquevitextyquimi', 'puchafik']):\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"\n    return all(sub in s[i::len(substrings)] for i, sub in enumerate(substrings))",
    "sols": [
      "def sol(substrings=['pithygymuwoquumudir', 'gaquevitextyquimi', 'puchafik']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ZipStr_8",
    "sat": "def sat(s: str, substrings=['behylyhogu', 'coker']):\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"\n    return all(sub in s[i::len(substrings)] for i, sub in enumerate(substrings))",
    "sols": [
      "def sol(substrings=['behylyhogu', 'coker']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ZipStr_9",
    "sat": "def sat(s: str, substrings=['chitunuquisu']):\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"\n    return all(sub in s[i::len(substrings)] for i, sub in enumerate(substrings))",
    "sols": [
      "def sol(substrings=['chitunuquisu']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ReverseCat_0",
    "sat": "def sat(s: str, substrings=['foo', 'bar', 'baz']):\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all(sub in s and sub[::-1] in s for sub in substrings)",
    "sols": [
      "def sol(substrings=['foo', 'bar', 'baz']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ReverseCat_1",
    "sat": "def sat(s: str, substrings=['kepijilufuwisejyzat', 'lechogyvonaxegitex']):\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all(sub in s and sub[::-1] in s for sub in substrings)",
    "sols": [
      "def sol(substrings=['kepijilufuwisejyzat', 'lechogyvonaxegitex']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ReverseCat_2",
    "sat": "def sat(s: str, substrings=['ripihuquyrenytu', 'quosafyji', 'chyguzocuzuqu', 'futhixequyb']):\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all(sub in s and sub[::-1] in s for sub in substrings)",
    "sols": [
      "def sol(substrings=['ripihuquyrenytu', 'quosafyji', 'chyguzocuzuqu', 'futhixequyb']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ReverseCat_3",
    "sat": "def sat(s: str, substrings=['thacovatukoliva', 'maquyfezisothizyp', 'ka', 'benegiquememif']):\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all(sub in s and sub[::-1] in s for sub in substrings)",
    "sols": [
      "def sol(substrings=['thacovatukoliva', 'maquyfezisothizyp', 'ka', 'benegiquememif']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ReverseCat_4",
    "sat": "def sat(s: str, substrings=['t', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']):\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all(sub in s and sub[::-1] in s for sub in substrings)",
    "sols": [
      "def sol(substrings=['t', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ReverseCat_5",
    "sat": "def sat(s: str, substrings=['quy']):\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all(sub in s and sub[::-1] in s for sub in substrings)",
    "sols": [
      "def sol(substrings=['quy']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ReverseCat_6",
    "sat": "def sat(s: str, substrings=['mycam', 'betextigohubafigiku', 'ga', 'gegumypuwedobixaf']):\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all(sub in s and sub[::-1] in s for sub in substrings)",
    "sols": [
      "def sol(substrings=['mycam', 'betextigohubafigiku', 'ga', 'gegumypuwedobixaf']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ReverseCat_7",
    "sat": "def sat(s: str, substrings=['berovev', 'vizethavil', 'safuvivylodijesymoc']):\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all(sub in s and sub[::-1] in s for sub in substrings)",
    "sols": [
      "def sol(substrings=['berovev', 'vizethavil', 'safuvivylodijesymoc']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ReverseCat_8",
    "sat": "def sat(s: str, substrings=['xythibureciweduzebi', 'thebitez', 'chutextiquepahokop']):\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all(sub in s and sub[::-1] in s for sub in substrings)",
    "sols": [
      "def sol(substrings=['xythibureciweduzebi', 'thebitez', 'chutextiquepahokop']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "ReverseCat_9",
    "sat": "def sat(s: str, substrings=['mypamoxizuvivoch', 'ryte', 'suchafohexucetext']):\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all(sub in s and sub[::-1] in s for sub in substrings)",
    "sols": [
      "def sol(substrings=['mypamoxizuvivoch', 'ryte', 'suchafohexucetext']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "EngineerNumbers_0",
    "sat": "def sat(ls: List[str], n=100, a=\"bar\", b=\"foo\"):\n    \"\"\"\n    Find a list of n strings, in alphabetical order, starting with a and ending with b.\n    \"\"\"\n    return len(ls) == len(set(ls)) == n and ls[0] == a and ls[-1] == b and ls == sorted(ls)",
    "sols": [
      "def sol(n=100, a=\"bar\", b=\"foo\"):\n    return sorted([a] + [a + chr(0) + str(i) for i in range(n - 2)] + [b])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "EngineerNumbers_1",
    "sat": "def sat(ls: List[str], n=44, a=\"lychezothotextocev\", b=\"th\"):\n    \"\"\"\n    Find a list of n strings, in alphabetical order, starting with a and ending with b.\n    \"\"\"\n    return len(ls) == len(set(ls)) == n and ls[0] == a and ls[-1] == b and ls == sorted(ls)",
    "sols": [
      "def sol(n=44, a=\"lychezothotextocev\", b=\"th\"):\n    return sorted([a] + [a + chr(0) + str(i) for i in range(n - 2)] + [b])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "EngineerNumbers_2",
    "sat": "def sat(ls: List[str], n=13, a=\"kacukebyhapuniryh\", b=\"te\"):\n    \"\"\"\n    Find a list of n strings, in alphabetical order, starting with a and ending with b.\n    \"\"\"\n    return len(ls) == len(set(ls)) == n and ls[0] == a and ls[-1] == b and ls == sorted(ls)",
    "sols": [
      "def sol(n=13, a=\"kacukebyhapuniryh\", b=\"te\"):\n    return sorted([a] + [a + chr(0) + str(i) for i in range(n - 2)] + [b])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "EngineerNumbers_3",
    "sat": "def sat(ls: List[str], n=61, a=\"cisoceratext\", b=\"milusicochylitextyco\"):\n    \"\"\"\n    Find a list of n strings, in alphabetical order, starting with a and ending with b.\n    \"\"\"\n    return len(ls) == len(set(ls)) == n and ls[0] == a and ls[-1] == b and ls == sorted(ls)",
    "sols": [
      "def sol(n=61, a=\"cisoceratext\", b=\"milusicochylitextyco\"):\n    return sorted([a] + [a + chr(0) + str(i) for i in range(n - 2)] + [b])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "EngineerNumbers_4",
    "sat": "def sat(ls: List[str], n=59, a=\"hokitextawelaxah\", b=\"maryhedu\"):\n    \"\"\"\n    Find a list of n strings, in alphabetical order, starting with a and ending with b.\n    \"\"\"\n    return len(ls) == len(set(ls)) == n and ls[0] == a and ls[-1] == b and ls == sorted(ls)",
    "sols": [
      "def sol(n=59, a=\"hokitextawelaxah\", b=\"maryhedu\"):\n    return sorted([a] + [a + chr(0) + str(i) for i in range(n - 2)] + [b])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "EngineerNumbers_5",
    "sat": "def sat(ls: List[str], n=33, a=\"cha\", b=\"gymotexto\"):\n    \"\"\"\n    Find a list of n strings, in alphabetical order, starting with a and ending with b.\n    \"\"\"\n    return len(ls) == len(set(ls)) == n and ls[0] == a and ls[-1] == b and ls == sorted(ls)",
    "sols": [
      "def sol(n=33, a=\"cha\", b=\"gymotexto\"):\n    return sorted([a] + [a + chr(0) + str(i) for i in range(n - 2)] + [b])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "EngineerNumbers_6",
    "sat": "def sat(ls: List[str], n=17, a=\"fequygutextyw\", b=\"wamathukajaxesythe\"):\n    \"\"\"\n    Find a list of n strings, in alphabetical order, starting with a and ending with b.\n    \"\"\"\n    return len(ls) == len(set(ls)) == n and ls[0] == a and ls[-1] == b and ls == sorted(ls)",
    "sols": [
      "def sol(n=17, a=\"fequygutextyw\", b=\"wamathukajaxesythe\"):\n    return sorted([a] + [a + chr(0) + str(i) for i in range(n - 2)] + [b])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "EngineerNumbers_7",
    "sat": "def sat(ls: List[str], n=55, a=\"lethico\", b=\"mychasese\"):\n    \"\"\"\n    Find a list of n strings, in alphabetical order, starting with a and ending with b.\n    \"\"\"\n    return len(ls) == len(set(ls)) == n and ls[0] == a and ls[-1] == b and ls == sorted(ls)",
    "sols": [
      "def sol(n=55, a=\"lethico\", b=\"mychasese\"):\n    return sorted([a] + [a + chr(0) + str(i) for i in range(n - 2)] + [b])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "EngineerNumbers_8",
    "sat": "def sat(ls: List[str], n=45, a=\"chyloraviwunosicohaz\", b=\"dutextycyhino\"):\n    \"\"\"\n    Find a list of n strings, in alphabetical order, starting with a and ending with b.\n    \"\"\"\n    return len(ls) == len(set(ls)) == n and ls[0] == a and ls[-1] == b and ls == sorted(ls)",
    "sols": [
      "def sol(n=45, a=\"chyloraviwunosicohaz\", b=\"dutextycyhino\"):\n    return sorted([a] + [a + chr(0) + str(i) for i in range(n - 2)] + [b])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "EngineerNumbers_9",
    "sat": "def sat(ls: List[str], n=11, a=\"chuwegagatext\", b=\"wu\"):\n    \"\"\"\n    Find a list of n strings, in alphabetical order, starting with a and ending with b.\n    \"\"\"\n    return len(ls) == len(set(ls)) == n and ls[0] == a and ls[-1] == b and ls == sorted(ls)",
    "sols": [
      "def sol(n=11, a=\"chuwegagatext\", b=\"wu\"):\n    return sorted([a] + [a + chr(0) + str(i) for i in range(n - 2)] + [b])"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PenultimateString_0",
    "sat": "def sat(s: str, strings=['cat', 'dog', 'bird', 'fly', 'moose']):\n    \"\"\"Find the alphabetically second to last last string in a list.\"\"\"\n    return s in strings and sum(t > s for t in strings) == 1",
    "sols": [
      "def sol(strings=['cat', 'dog', 'bird', 'fly', 'moose']):\n    return sorted(strings)[-2]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PenultimateString_1",
    "sat": "def sat(s: str, strings=['ryzapychybykydege', 'mivowepe', 'sovywos', 'chanyrorybynid', 'vafechajufo', 'nokymocymoxac', 'jahejafuquoduk', 'gogy', 'bytothice', 'ruminuvixixutudigom']):\n    \"\"\"Find the alphabetically second to last last string in a list.\"\"\"\n    return s in strings and sum(t > s for t in strings) == 1",
    "sols": [
      "def sol(strings=['ryzapychybykydege', 'mivowepe', 'sovywos', 'chanyrorybynid', 'vafechajufo', 'nokymocymoxac', 'jahejafuquoduk', 'gogy', 'bytothice', 'ruminuvixixutudigom']):\n    return sorted(strings)[-2]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PenultimateString_2",
    "sat": "def sat(s: str, strings=['mipelavychekecy', 'pythujutisoxofe', 'diliwagacivychinofiw', 'na', 'dobynaramithibolo', 'cugupyfytextofoxat', 'gyfokebo', 'bymitextitextizoc', 'rekimuk', 'bepumyxitubachek']):\n    \"\"\"Find the alphabetically second to last last string in a list.\"\"\"\n    return s in strings and sum(t > s for t in strings) == 1",
    "sols": [
      "def sol(strings=['mipelavychekecy', 'pythujutisoxofe', 'diliwagacivychinofiw', 'na', 'dobynaramithibolo', 'cugupyfytextofoxat', 'gyfokebo', 'bymitextitextizoc', 'rekimuk', 'bepumyxitubachek']):\n    return sorted(strings)[-2]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PenultimateString_3",
    "sat": "def sat(s: str, strings=['hunuvarufefikaq', 'xejegu', 'minoc', 'puthyvyc', 'xyzeryberi', 'tyl', 'thyvojyvijazetonowa', 'jahygywuchitho', 'quuvuvigy', 'zuhechywituthexe']):\n    \"\"\"Find the alphabetically second to last last string in a list.\"\"\"\n    return s in strings and sum(t > s for t in strings) == 1",
    "sols": [
      "def sol(strings=['hunuvarufefikaq', 'xejegu', 'minoc', 'puthyvyc', 'xyzeryberi', 'tyl', 'thyvojyvijazetonowa', 'jahygywuchitho', 'quuvuvigy', 'zuhechywituthexe']):\n    return sorted(strings)[-2]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PenultimateString_4",
    "sat": "def sat(s: str, strings=['wesolotelunyzecemexi', 'pociquuwygocysahef', 'lequusigipitexti', 'quojuxaq', 'fyt', 'm', 'bavalepynoza', 'zihath', 'lodomijibuxoju', 'xasuwytextochypuli']):\n    \"\"\"Find the alphabetically second to last last string in a list.\"\"\"\n    return s in strings and sum(t > s for t in strings) == 1",
    "sols": [
      "def sol(strings=['wesolotelunyzecemexi', 'pociquuwygocysahef', 'lequusigipitexti', 'quojuxaq', 'fyt', 'm', 'bavalepynoza', 'zihath', 'lodomijibuxoju', 'xasuwytextochypuli']):\n    return sorted(strings)[-2]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PenultimateString_5",
    "sat": "def sat(s: str, strings=['mehyzuwexenuchy', 'z', 'jeryhyfyfucipuri', 'laquavuthythawugethy', 'gyd', 'bulytawugumunu', 'ziwosemoq', 'pypi', 'textichecypixochas', 'l']):\n    \"\"\"Find the alphabetically second to last last string in a list.\"\"\"\n    return s in strings and sum(t > s for t in strings) == 1",
    "sols": [
      "def sol(strings=['mehyzuwexenuchy', 'z', 'jeryhyfyfucipuri', 'laquavuthythawugethy', 'gyd', 'bulytawugumunu', 'ziwosemoq', 'pypi', 'textichecypixochas', 'l']):\n    return sorted(strings)[-2]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PenultimateString_6",
    "sat": "def sat(s: str, strings=['he', 'zobujymet', 'gebat', 'q', 'rozaviquesylobyzup', 'lomypy', 'myquuzochatho', 'zikiditextavevithyv', 'zelitodyxufixoky', 'vichadosi']):\n    \"\"\"Find the alphabetically second to last last string in a list.\"\"\"\n    return s in strings and sum(t > s for t in strings) == 1",
    "sols": [
      "def sol(strings=['he', 'zobujymet', 'gebat', 'q', 'rozaviquesylobyzup', 'lomypy', 'myquuzochatho', 'zikiditextavevithyv', 'zelitodyxufixoky', 'vichadosi']):\n    return sorted(strings)[-2]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PenultimateString_7",
    "sat": "def sat(s: str, strings=['gylaruzediconyth', 'nathupu', 'gyjehuthixi', 'jathizocytextaricoj', 'catextyruhagawyxojo', 'lotextoquyt', 'pa', 'textatimyrixumuk', 'fycot', 'hif']):\n    \"\"\"Find the alphabetically second to last last string in a list.\"\"\"\n    return s in strings and sum(t > s for t in strings) == 1",
    "sols": [
      "def sol(strings=['gylaruzediconyth', 'nathupu', 'gyjehuthixi', 'jathizocytextaricoj', 'catextyruhagawyxojo', 'lotextoquyt', 'pa', 'textatimyrixumuk', 'fycot', 'hif']):\n    return sorted(strings)[-2]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PenultimateString_8",
    "sat": "def sat(s: str, strings=['ragy', 'kymosyth', 'miw', 'te', 'tusatocejabinymyb', 'vabyd', 'sebuvuthozunapimove', 'mo', 'nujufefewikythoroke', 'zypoduzuchenazybuta']):\n    \"\"\"Find the alphabetically second to last last string in a list.\"\"\"\n    return s in strings and sum(t > s for t in strings) == 1",
    "sols": [
      "def sol(strings=['ragy', 'kymosyth', 'miw', 'te', 'tusatocejabinymyb', 'vabyd', 'sebuvuthozunapimove', 'mo', 'nujufefewikythoroke', 'zypoduzuchenazybuta']):\n    return sorted(strings)[-2]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PenultimateString_9",
    "sat": "def sat(s: str, strings=['jiquadymeredugeby', 'zykarothuviwunedur', 'kahidothutextitex', 'gi', 'hudutecheheni', 'te', 'dawobitextilymy', 'pamalezadi', 'xumovaquymaxaq', 'saponodiry']):\n    \"\"\"Find the alphabetically second to last last string in a list.\"\"\"\n    return s in strings and sum(t > s for t in strings) == 1",
    "sols": [
      "def sol(strings=['jiquadymeredugeby', 'zykarothuviwunedur', 'kahidothutextitex', 'gi', 'hudutecheheni', 'te', 'dawobitextilymy', 'pamalezadi', 'xumovaquymaxaq', 'saponodiry']):\n    return sorted(strings)[-2]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PenultimateRevString_0",
    "sat": "def sat(s: str, strings=['cat', 'dog', 'bird', 'fly', 'moose']):\n    \"\"\"Find the reversed version of the alphabetically second string in a list.\"\"\"\n    return s[::-1] in strings and sum(t < s[::-1] for t in strings) == 1",
    "sols": [
      "def sol(strings=['cat', 'dog', 'bird', 'fly', 'moose']):\n    return sorted(strings)[1][::-1]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PenultimateRevString_1",
    "sat": "def sat(s: str, strings=['rawithelen', 'que', 'pikuf', 'koze', 'zehyquorofyxytextef', 'text', 'jezebox', 'zychopucebychokyz', 'pyzyxatevafugedix', 'buzogehabojyb']):\n    \"\"\"Find the reversed version of the alphabetically second string in a list.\"\"\"\n    return s[::-1] in strings and sum(t < s[::-1] for t in strings) == 1",
    "sols": [
      "def sol(strings=['rawithelen', 'que', 'pikuf', 'koze', 'zehyquorofyxytextef', 'text', 'jezebox', 'zychopucebychokyz', 'pyzyxatevafugedix', 'buzogehabojyb']):\n    return sorted(strings)[1][::-1]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PenultimateRevString_2",
    "sat": "def sat(s: str, strings=['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']):\n    \"\"\"Find the reversed version of the alphabetically second string in a list.\"\"\"\n    return s[::-1] in strings and sum(t < s[::-1] for t in strings) == 1",
    "sols": [
      "def sol(strings=['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']):\n    return sorted(strings)[1][::-1]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PenultimateRevString_3",
    "sat": "def sat(s: str, strings=['habicynanikadifovac', 'bozehathyfoz', 'hud', 'textudunachuxarise', 'hewohahatazabab', 'lutumelimevabutha', 'wocher', 'wacifufixudizon', 'tazibedo', 'xytu']):\n    \"\"\"Find the reversed version of the alphabetically second string in a list.\"\"\"\n    return s[::-1] in strings and sum(t < s[::-1] for t in strings) == 1",
    "sols": [
      "def sol(strings=['habicynanikadifovac', 'bozehathyfoz', 'hud', 'textudunachuxarise', 'hewohahatazabab', 'lutumelimevabutha', 'wocher', 'wacifufixudizon', 'tazibedo', 'xytu']):\n    return sorted(strings)[1][::-1]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PenultimateRevString_4",
    "sat": "def sat(s: str, strings=['vekykothumygochuth', 'xujatajazisiqu', 'vapyvymobymethotexto', 'tygope', 'g', 'ripalotextaj', 'tecehuthojodogucivaj', 'xyjulecometihesej', 'ribo', 'gutachowagexatoset']):\n    \"\"\"Find the reversed version of the alphabetically second string in a list.\"\"\"\n    return s[::-1] in strings and sum(t < s[::-1] for t in strings) == 1",
    "sols": [
      "def sol(strings=['vekykothumygochuth', 'xujatajazisiqu', 'vapyvymobymethotexto', 'tygope', 'g', 'ripalotextaj', 'tecehuthojodogucivaj', 'xyjulecometihesej', 'ribo', 'gutachowagexatoset']):\n    return sorted(strings)[1][::-1]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PenultimateRevString_5",
    "sat": "def sat(s: str, strings=['thawubudajynipogi', 'ho', 'quutextosuhifake', 's', 'xaquyjoquythufutho', 'quythizapinuzoriquyn', 'liravexequ', 'besoco', 'ful', 'zemamecanozytextici']):\n    \"\"\"Find the reversed version of the alphabetically second string in a list.\"\"\"\n    return s[::-1] in strings and sum(t < s[::-1] for t in strings) == 1",
    "sols": [
      "def sol(strings=['thawubudajynipogi', 'ho', 'quutextosuhifake', 's', 'xaquyjoquythufutho', 'quythizapinuzoriquyn', 'liravexequ', 'besoco', 'ful', 'zemamecanozytextici']):\n    return sorted(strings)[1][::-1]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PenultimateRevString_6",
    "sat": "def sat(s: str, strings=['hisoryxyzegyquatex', 'furojuwiqu', 'begigyxonechexuwe', 'ronezuzuhanath', 'vakehajipequa', 'cyga', 'zacutecu', 'luthygiquuhixewy', 'quinic', 'textokyvelifefyl']):\n    \"\"\"Find the reversed version of the alphabetically second string in a list.\"\"\"\n    return s[::-1] in strings and sum(t < s[::-1] for t in strings) == 1",
    "sols": [
      "def sol(strings=['hisoryxyzegyquatex', 'furojuwiqu', 'begigyxonechexuwe', 'ronezuzuhanath', 'vakehajipequa', 'cyga', 'zacutecu', 'luthygiquuhixewy', 'quinic', 'textokyvelifefyl']):\n    return sorted(strings)[1][::-1]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PenultimateRevString_7",
    "sat": "def sat(s: str, strings=['withi', 'charubugawety', 'botextenolaxatyji', 'giquo', 'ne', 'rywiquuq', 'thesixebohicenujy', 'p', 'chap', 'ladake']):\n    \"\"\"Find the reversed version of the alphabetically second string in a list.\"\"\"\n    return s[::-1] in strings and sum(t < s[::-1] for t in strings) == 1",
    "sols": [
      "def sol(strings=['withi', 'charubugawety', 'botextenolaxatyji', 'giquo', 'ne', 'rywiquuq', 'thesixebohicenujy', 'p', 'chap', 'ladake']):\n    return sorted(strings)[1][::-1]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PenultimateRevString_8",
    "sat": "def sat(s: str, strings=['jerymemychymuze', 'chyk', 'nisemutextajuwuxej', 'c', 'c', 'juzuhafydubi', 'hi', 'basynapoquiv', 'jyjivotifujyge', 'textoboquapagiti']):\n    \"\"\"Find the reversed version of the alphabetically second string in a list.\"\"\"\n    return s[::-1] in strings and sum(t < s[::-1] for t in strings) == 1",
    "sols": [
      "def sol(strings=['jerymemychymuze', 'chyk', 'nisemutextajuwuxej', 'c', 'c', 'juzuhafydubi', 'hi', 'basynapoquiv', 'jyjivotifujyge', 'textoboquapagiti']):\n    return sorted(strings)[1][::-1]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "PenultimateRevString_9",
    "sat": "def sat(s: str, strings=['xo', 'coxavilowakatuxil', 'c', 'rethek', 'hyzisogatymizehabec', 'kycu', 'gijivonyt', 'tex', 'kyrevafapyquilotex', 'noxoza']):\n    \"\"\"Find the reversed version of the alphabetically second string in a list.\"\"\"\n    return s[::-1] in strings and sum(t < s[::-1] for t in strings) == 1",
    "sols": [
      "def sol(strings=['xo', 'coxavilowakatuxil', 'c', 'rethek', 'hyzisogatymizehabec', 'kycu', 'gijivonyt', 'tex', 'kyrevafapyquilotex', 'noxoza']):\n    return sorted(strings)[1][::-1]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CenteredString_0",
    "sat": "def sat(s: str, target=\"foobarbazwow\", length=6):\n    \"\"\"Find a substring of the given length centered within the target string.\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s",
    "sols": [
      "def sol(target=\"foobarbazwow\", length=6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CenteredString_1",
    "sat": "def sat(s: str, target=\"rujus\", length=1):\n    \"\"\"Find a substring of the given length centered within the target string.\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s",
    "sols": [
      "def sol(target=\"rujus\", length=1):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CenteredString_2",
    "sat": "def sat(s: str, target=\"bulu\", length=4):\n    \"\"\"Find a substring of the given length centered within the target string.\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s",
    "sols": [
      "def sol(target=\"bulu\", length=4):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CenteredString_3",
    "sat": "def sat(s: str, target=\"defojuhujuwilumec\", length=7):\n    \"\"\"Find a substring of the given length centered within the target string.\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s",
    "sols": [
      "def sol(target=\"defojuhujuwilumec\", length=7):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CenteredString_4",
    "sat": "def sat(s: str, target=\"tenuhije\", length=6):\n    \"\"\"Find a substring of the given length centered within the target string.\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s",
    "sols": [
      "def sol(target=\"tenuhije\", length=6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CenteredString_5",
    "sat": "def sat(s: str, target=\"moquokomyxath\", length=13):\n    \"\"\"Find a substring of the given length centered within the target string.\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s",
    "sols": [
      "def sol(target=\"moquokomyxath\", length=13):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CenteredString_6",
    "sat": "def sat(s: str, target=\"bybavoz\", length=6):\n    \"\"\"Find a substring of the given length centered within the target string.\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s",
    "sols": [
      "def sol(target=\"bybavoz\", length=6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CenteredString_7",
    "sat": "def sat(s: str, target=\"g\", length=1):\n    \"\"\"Find a substring of the given length centered within the target string.\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s",
    "sols": [
      "def sol(target=\"g\", length=1):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CenteredString_8",
    "sat": "def sat(s: str, target=\"voxufabokydih\", length=2):\n    \"\"\"Find a substring of the given length centered within the target string.\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s",
    "sols": [
      "def sol(target=\"voxufabokydih\", length=2):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "CenteredString_9",
    "sat": "def sat(s: str, target=\"xegutextiqua\", length=11):\n    \"\"\"Find a substring of the given length centered within the target string.\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s",
    "sols": [
      "def sol(target=\"xegutextiqua\", length=11):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SubstrCount_0",
    "sat": "def sat(substring: str, string=\"moooboooofasd\", count=2):\n    \"\"\"Find a substring with a certain count in a given string\"\"\"\n    return string.count(substring) == count",
    "sols": [
      "def sol(string=\"moooboooofasd\", count=2):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SubstrCount_1",
    "sat": "def sat(substring: str, string=\"nyvyfytibuquyquuchudemixyzychumanachozyquiquowutextyvomyzychyme\", count=4):\n    \"\"\"Find a substring with a certain count in a given string\"\"\"\n    return string.count(substring) == count",
    "sols": [
      "def sol(string=\"nyvyfytibuquyquuchudemixyzychumanachozyquiquowutextyvomyzychyme\", count=4):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SubstrCount_2",
    "sat": "def sat(substring: str, string=\"cokomoquiwythyluwamymothynihythenyfeteth\", count=4):\n    \"\"\"Find a substring with a certain count in a given string\"\"\"\n    return string.count(substring) == count",
    "sols": [
      "def sol(string=\"cokomoquiwythyluwamymothynihythenyfeteth\", count=4):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SubstrCount_3",
    "sat": "def sat(substring: str, string=\"cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf\", count=3):\n    \"\"\"Find a substring with a certain count in a given string\"\"\"\n    return string.count(substring) == count",
    "sols": [
      "def sol(string=\"cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf\", count=3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SubstrCount_4",
    "sat": "def sat(substring: str, string=\"modacequytextytextilaleguthovamipehywaciripetext\", count=3):\n    \"\"\"Find a substring with a certain count in a given string\"\"\"\n    return string.count(substring) == count",
    "sols": [
      "def sol(string=\"modacequytextytextilaleguthovamipehywaciripetext\", count=3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SubstrCount_5",
    "sat": "def sat(substring: str, string=\"quomedevocumubudisirejededuquucirilov\", count=3):\n    \"\"\"Find a substring with a certain count in a given string\"\"\"\n    return string.count(substring) == count",
    "sols": [
      "def sol(string=\"quomedevocumubudisirejededuquucirilov\", count=3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SubstrCount_6",
    "sat": "def sat(substring: str, string=\"vunoxuchanofifupobykibisotywoquitytextopazitapyxepuzyzesychazethywaxiwaquylomotextyzafa\", count=3):\n    \"\"\"Find a substring with a certain count in a given string\"\"\"\n    return string.count(substring) == count",
    "sols": [
      "def sol(string=\"vunoxuchanofifupobykibisotywoquitytextopazitapyxepuzyzesychazethywaxiwaquylomotextyzafa\", count=3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SubstrCount_7",
    "sat": "def sat(substring: str, string=\"bavawadovocegelapubaworytitextojetextuhoquochinitextutextemycofuthitizehychopitexterythihoxutatex\", count=3):\n    \"\"\"Find a substring with a certain count in a given string\"\"\"\n    return string.count(substring) == count",
    "sols": [
      "def sol(string=\"bavawadovocegelapubaworytitextojetextuhoquochinitextutextemycofuthitizehychopitexterythihoxutatex\", count=3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SubstrCount_8",
    "sat": "def sat(substring: str, string=\"textyficugibipivytecitextirojypesuvihytextuk\", count=3):\n    \"\"\"Find a substring with a certain count in a given string\"\"\"\n    return string.count(substring) == count",
    "sols": [
      "def sol(string=\"textyficugibipivytecitextirojypesuvihytextuk\", count=3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "SubstrCount_9",
    "sat": "def sat(substring: str, string=\"chogewechojenuxogicunigimevathugychapyquobezihuhedakibym\", count=3):\n    \"\"\"Find a substring with a certain count in a given string\"\"\"\n    return string.count(substring) == count",
    "sols": [
      "def sol(string=\"chogewechojenuxogicunigimevathugychapyquobezihuhedakibym\", count=3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False"
    ],
    "module": "basic",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.004545454545454545
  },
  {
    "name": "EightQueensOrFewer_0",
    "sat": "def sat(squares: List[List[int]], m=8, n=8):\n    \"\"\"Position min(m, n) <= 8 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares) and len(squares) == k\n    return 4 * k == len({t for i, j in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
    "sols": [
      "def sol(m=8, n=8):  # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]"
    ],
    "module": "chess",
    "notes": "Eight (or fewer) Queens Puzzle\n\nSee Wikipedia entry on\n[Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nSee the MoreQueens puzzle below for another (longer but clearer) equivalent definition of sat\n\nHint: a brute force approach works on this puzzle.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "EightQueensOrFewer_1",
    "sat": "def sat(squares: List[List[int]], m=9, n=6):\n    \"\"\"Position min(m, n) <= 8 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares) and len(squares) == k\n    return 4 * k == len({t for i, j in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
    "sols": [
      "def sol(m=9, n=6):  # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]"
    ],
    "module": "chess",
    "notes": "Eight (or fewer) Queens Puzzle\n\nSee Wikipedia entry on\n[Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nSee the MoreQueens puzzle below for another (longer but clearer) equivalent definition of sat\n\nHint: a brute force approach works on this puzzle.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "EightQueensOrFewer_2",
    "sat": "def sat(squares: List[List[int]], m=59, n=4):\n    \"\"\"Position min(m, n) <= 8 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares) and len(squares) == k\n    return 4 * k == len({t for i, j in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
    "sols": [
      "def sol(m=59, n=4):  # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]"
    ],
    "module": "chess",
    "notes": "Eight (or fewer) Queens Puzzle\n\nSee Wikipedia entry on\n[Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nSee the MoreQueens puzzle below for another (longer but clearer) equivalent definition of sat\n\nHint: a brute force approach works on this puzzle.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "EightQueensOrFewer_3",
    "sat": "def sat(squares: List[List[int]], m=38, n=8):\n    \"\"\"Position min(m, n) <= 8 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares) and len(squares) == k\n    return 4 * k == len({t for i, j in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
    "sols": [
      "def sol(m=38, n=8):  # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]"
    ],
    "module": "chess",
    "notes": "Eight (or fewer) Queens Puzzle\n\nSee Wikipedia entry on\n[Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nSee the MoreQueens puzzle below for another (longer but clearer) equivalent definition of sat\n\nHint: a brute force approach works on this puzzle.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "EightQueensOrFewer_4",
    "sat": "def sat(squares: List[List[int]], m=9, n=4):\n    \"\"\"Position min(m, n) <= 8 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares) and len(squares) == k\n    return 4 * k == len({t for i, j in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
    "sols": [
      "def sol(m=9, n=4):  # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]"
    ],
    "module": "chess",
    "notes": "Eight (or fewer) Queens Puzzle\n\nSee Wikipedia entry on\n[Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nSee the MoreQueens puzzle below for another (longer but clearer) equivalent definition of sat\n\nHint: a brute force approach works on this puzzle.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "EightQueensOrFewer_5",
    "sat": "def sat(squares: List[List[int]], m=45, n=8):\n    \"\"\"Position min(m, n) <= 8 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares) and len(squares) == k\n    return 4 * k == len({t for i, j in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
    "sols": [
      "def sol(m=45, n=8):  # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]"
    ],
    "module": "chess",
    "notes": "Eight (or fewer) Queens Puzzle\n\nSee Wikipedia entry on\n[Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nSee the MoreQueens puzzle below for another (longer but clearer) equivalent definition of sat\n\nHint: a brute force approach works on this puzzle.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "EightQueensOrFewer_6",
    "sat": "def sat(squares: List[List[int]], m=7, n=91):\n    \"\"\"Position min(m, n) <= 8 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares) and len(squares) == k\n    return 4 * k == len({t for i, j in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
    "sols": [
      "def sol(m=7, n=91):  # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]"
    ],
    "module": "chess",
    "notes": "Eight (or fewer) Queens Puzzle\n\nSee Wikipedia entry on\n[Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nSee the MoreQueens puzzle below for another (longer but clearer) equivalent definition of sat\n\nHint: a brute force approach works on this puzzle.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "EightQueensOrFewer_7",
    "sat": "def sat(squares: List[List[int]], m=5, n=62):\n    \"\"\"Position min(m, n) <= 8 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares) and len(squares) == k\n    return 4 * k == len({t for i, j in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
    "sols": [
      "def sol(m=5, n=62):  # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]"
    ],
    "module": "chess",
    "notes": "Eight (or fewer) Queens Puzzle\n\nSee Wikipedia entry on\n[Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nSee the MoreQueens puzzle below for another (longer but clearer) equivalent definition of sat\n\nHint: a brute force approach works on this puzzle.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "EightQueensOrFewer_8",
    "sat": "def sat(squares: List[List[int]], m=51, n=4):\n    \"\"\"Position min(m, n) <= 8 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares) and len(squares) == k\n    return 4 * k == len({t for i, j in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
    "sols": [
      "def sol(m=51, n=4):  # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]"
    ],
    "module": "chess",
    "notes": "Eight (or fewer) Queens Puzzle\n\nSee Wikipedia entry on\n[Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nSee the MoreQueens puzzle below for another (longer but clearer) equivalent definition of sat\n\nHint: a brute force approach works on this puzzle.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "EightQueensOrFewer_9",
    "sat": "def sat(squares: List[List[int]], m=7, n=7):\n    \"\"\"Position min(m, n) <= 8 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares) and len(squares) == k\n    return 4 * k == len({t for i, j in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
    "sols": [
      "def sol(m=7, n=7):  # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]"
    ],
    "module": "chess",
    "notes": "Eight (or fewer) Queens Puzzle\n\nSee Wikipedia entry on\n[Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nSee the MoreQueens puzzle below for another (longer but clearer) equivalent definition of sat\n\nHint: a brute force approach works on this puzzle.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "MoreQueens_0",
    "sat": "def sat(squares: List[List[int]], m=9, n=9):\n    \"\"\"\n    Position min(m, n) > 8 queens on an m x n chess board so that no pair is attacking each other.\n    \"\"\"\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares), \"queen off board\"\n    assert len(squares) == k, \"Wrong number of queens\"\n    assert len({i for i, j in squares}) == k, \"Queens on same row\"\n    assert len({j for i, j in squares}) == k, \"Queens on same file\"\n    assert len({i + j for i, j in squares}) == k, \"Queens on same SE diagonal\"\n    assert len({i - j for i, j in squares}) == k, \"Queens on same NE diagonal\"\n    return True",
    "sols": [
      "def sol(m=9, n=9):\n    t = min(m, n)\n    ans = []\n    if t % 2 == 1:  # odd k, put a queen in the lower right corner (and decrement k)\n        ans.append([t - 1, t - 1])\n        t -= 1\n    if t % 6 == 2:  # do something special for 8x8, 14x14 etc:\n        ans += [[i, (2 * i + t // 2 - 1) % t] for i in range(t // 2)]\n        ans += [[i + t // 2, (2 * i - t // 2 + 2) % t] for i in range(t // 2)]\n    else:\n        ans += [[i, 2 * i + 1] for i in range(t // 2)]\n        ans += [[i + t // 2, 2 * i] for i in range(t // 2)]\n    return ans"
    ],
    "module": "chess",
    "notes": "See Wikipedia entry on [Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nA brute force approach will not work on many of these problems.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "MoreQueens_1",
    "sat": "def sat(squares: List[List[int]], m=79, n=95):\n    \"\"\"\n    Position min(m, n) > 8 queens on an m x n chess board so that no pair is attacking each other.\n    \"\"\"\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares), \"queen off board\"\n    assert len(squares) == k, \"Wrong number of queens\"\n    assert len({i for i, j in squares}) == k, \"Queens on same row\"\n    assert len({j for i, j in squares}) == k, \"Queens on same file\"\n    assert len({i + j for i, j in squares}) == k, \"Queens on same SE diagonal\"\n    assert len({i - j for i, j in squares}) == k, \"Queens on same NE diagonal\"\n    return True",
    "sols": [
      "def sol(m=79, n=95):\n    t = min(m, n)\n    ans = []\n    if t % 2 == 1:  # odd k, put a queen in the lower right corner (and decrement k)\n        ans.append([t - 1, t - 1])\n        t -= 1\n    if t % 6 == 2:  # do something special for 8x8, 14x14 etc:\n        ans += [[i, (2 * i + t // 2 - 1) % t] for i in range(t // 2)]\n        ans += [[i + t // 2, (2 * i - t // 2 + 2) % t] for i in range(t // 2)]\n    else:\n        ans += [[i, 2 * i + 1] for i in range(t // 2)]\n        ans += [[i + t // 2, 2 * i] for i in range(t // 2)]\n    return ans"
    ],
    "module": "chess",
    "notes": "See Wikipedia entry on [Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nA brute force approach will not work on many of these problems.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "MoreQueens_2",
    "sat": "def sat(squares: List[List[int]], m=80, n=88):\n    \"\"\"\n    Position min(m, n) > 8 queens on an m x n chess board so that no pair is attacking each other.\n    \"\"\"\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares), \"queen off board\"\n    assert len(squares) == k, \"Wrong number of queens\"\n    assert len({i for i, j in squares}) == k, \"Queens on same row\"\n    assert len({j for i, j in squares}) == k, \"Queens on same file\"\n    assert len({i + j for i, j in squares}) == k, \"Queens on same SE diagonal\"\n    assert len({i - j for i, j in squares}) == k, \"Queens on same NE diagonal\"\n    return True",
    "sols": [
      "def sol(m=80, n=88):\n    t = min(m, n)\n    ans = []\n    if t % 2 == 1:  # odd k, put a queen in the lower right corner (and decrement k)\n        ans.append([t - 1, t - 1])\n        t -= 1\n    if t % 6 == 2:  # do something special for 8x8, 14x14 etc:\n        ans += [[i, (2 * i + t // 2 - 1) % t] for i in range(t // 2)]\n        ans += [[i + t // 2, (2 * i - t // 2 + 2) % t] for i in range(t // 2)]\n    else:\n        ans += [[i, 2 * i + 1] for i in range(t // 2)]\n        ans += [[i + t // 2, 2 * i] for i in range(t // 2)]\n    return ans"
    ],
    "module": "chess",
    "notes": "See Wikipedia entry on [Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nA brute force approach will not work on many of these problems.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "MoreQueens_3",
    "sat": "def sat(squares: List[List[int]], m=56, n=16):\n    \"\"\"\n    Position min(m, n) > 8 queens on an m x n chess board so that no pair is attacking each other.\n    \"\"\"\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares), \"queen off board\"\n    assert len(squares) == k, \"Wrong number of queens\"\n    assert len({i for i, j in squares}) == k, \"Queens on same row\"\n    assert len({j for i, j in squares}) == k, \"Queens on same file\"\n    assert len({i + j for i, j in squares}) == k, \"Queens on same SE diagonal\"\n    assert len({i - j for i, j in squares}) == k, \"Queens on same NE diagonal\"\n    return True",
    "sols": [
      "def sol(m=56, n=16):\n    t = min(m, n)\n    ans = []\n    if t % 2 == 1:  # odd k, put a queen in the lower right corner (and decrement k)\n        ans.append([t - 1, t - 1])\n        t -= 1\n    if t % 6 == 2:  # do something special for 8x8, 14x14 etc:\n        ans += [[i, (2 * i + t // 2 - 1) % t] for i in range(t // 2)]\n        ans += [[i + t // 2, (2 * i - t // 2 + 2) % t] for i in range(t // 2)]\n    else:\n        ans += [[i, 2 * i + 1] for i in range(t // 2)]\n        ans += [[i + t // 2, 2 * i] for i in range(t // 2)]\n    return ans"
    ],
    "module": "chess",
    "notes": "See Wikipedia entry on [Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nA brute force approach will not work on many of these problems.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "MoreQueens_4",
    "sat": "def sat(squares: List[List[int]], m=23, n=45):\n    \"\"\"\n    Position min(m, n) > 8 queens on an m x n chess board so that no pair is attacking each other.\n    \"\"\"\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares), \"queen off board\"\n    assert len(squares) == k, \"Wrong number of queens\"\n    assert len({i for i, j in squares}) == k, \"Queens on same row\"\n    assert len({j for i, j in squares}) == k, \"Queens on same file\"\n    assert len({i + j for i, j in squares}) == k, \"Queens on same SE diagonal\"\n    assert len({i - j for i, j in squares}) == k, \"Queens on same NE diagonal\"\n    return True",
    "sols": [
      "def sol(m=23, n=45):\n    t = min(m, n)\n    ans = []\n    if t % 2 == 1:  # odd k, put a queen in the lower right corner (and decrement k)\n        ans.append([t - 1, t - 1])\n        t -= 1\n    if t % 6 == 2:  # do something special for 8x8, 14x14 etc:\n        ans += [[i, (2 * i + t // 2 - 1) % t] for i in range(t // 2)]\n        ans += [[i + t // 2, (2 * i - t // 2 + 2) % t] for i in range(t // 2)]\n    else:\n        ans += [[i, 2 * i + 1] for i in range(t // 2)]\n        ans += [[i + t // 2, 2 * i] for i in range(t // 2)]\n    return ans"
    ],
    "module": "chess",
    "notes": "See Wikipedia entry on [Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nA brute force approach will not work on many of these problems.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "MoreQueens_5",
    "sat": "def sat(squares: List[List[int]], m=71, n=87):\n    \"\"\"\n    Position min(m, n) > 8 queens on an m x n chess board so that no pair is attacking each other.\n    \"\"\"\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares), \"queen off board\"\n    assert len(squares) == k, \"Wrong number of queens\"\n    assert len({i for i, j in squares}) == k, \"Queens on same row\"\n    assert len({j for i, j in squares}) == k, \"Queens on same file\"\n    assert len({i + j for i, j in squares}) == k, \"Queens on same SE diagonal\"\n    assert len({i - j for i, j in squares}) == k, \"Queens on same NE diagonal\"\n    return True",
    "sols": [
      "def sol(m=71, n=87):\n    t = min(m, n)\n    ans = []\n    if t % 2 == 1:  # odd k, put a queen in the lower right corner (and decrement k)\n        ans.append([t - 1, t - 1])\n        t -= 1\n    if t % 6 == 2:  # do something special for 8x8, 14x14 etc:\n        ans += [[i, (2 * i + t // 2 - 1) % t] for i in range(t // 2)]\n        ans += [[i + t // 2, (2 * i - t // 2 + 2) % t] for i in range(t // 2)]\n    else:\n        ans += [[i, 2 * i + 1] for i in range(t // 2)]\n        ans += [[i + t // 2, 2 * i] for i in range(t // 2)]\n    return ans"
    ],
    "module": "chess",
    "notes": "See Wikipedia entry on [Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nA brute force approach will not work on many of these problems.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "MoreQueens_6",
    "sat": "def sat(squares: List[List[int]], m=75, n=67):\n    \"\"\"\n    Position min(m, n) > 8 queens on an m x n chess board so that no pair is attacking each other.\n    \"\"\"\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares), \"queen off board\"\n    assert len(squares) == k, \"Wrong number of queens\"\n    assert len({i for i, j in squares}) == k, \"Queens on same row\"\n    assert len({j for i, j in squares}) == k, \"Queens on same file\"\n    assert len({i + j for i, j in squares}) == k, \"Queens on same SE diagonal\"\n    assert len({i - j for i, j in squares}) == k, \"Queens on same NE diagonal\"\n    return True",
    "sols": [
      "def sol(m=75, n=67):\n    t = min(m, n)\n    ans = []\n    if t % 2 == 1:  # odd k, put a queen in the lower right corner (and decrement k)\n        ans.append([t - 1, t - 1])\n        t -= 1\n    if t % 6 == 2:  # do something special for 8x8, 14x14 etc:\n        ans += [[i, (2 * i + t // 2 - 1) % t] for i in range(t // 2)]\n        ans += [[i + t // 2, (2 * i - t // 2 + 2) % t] for i in range(t // 2)]\n    else:\n        ans += [[i, 2 * i + 1] for i in range(t // 2)]\n        ans += [[i + t // 2, 2 * i] for i in range(t // 2)]\n    return ans"
    ],
    "module": "chess",
    "notes": "See Wikipedia entry on [Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nA brute force approach will not work on many of these problems.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "MoreQueens_7",
    "sat": "def sat(squares: List[List[int]], m=44, n=19):\n    \"\"\"\n    Position min(m, n) > 8 queens on an m x n chess board so that no pair is attacking each other.\n    \"\"\"\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares), \"queen off board\"\n    assert len(squares) == k, \"Wrong number of queens\"\n    assert len({i for i, j in squares}) == k, \"Queens on same row\"\n    assert len({j for i, j in squares}) == k, \"Queens on same file\"\n    assert len({i + j for i, j in squares}) == k, \"Queens on same SE diagonal\"\n    assert len({i - j for i, j in squares}) == k, \"Queens on same NE diagonal\"\n    return True",
    "sols": [
      "def sol(m=44, n=19):\n    t = min(m, n)\n    ans = []\n    if t % 2 == 1:  # odd k, put a queen in the lower right corner (and decrement k)\n        ans.append([t - 1, t - 1])\n        t -= 1\n    if t % 6 == 2:  # do something special for 8x8, 14x14 etc:\n        ans += [[i, (2 * i + t // 2 - 1) % t] for i in range(t // 2)]\n        ans += [[i + t // 2, (2 * i - t // 2 + 2) % t] for i in range(t // 2)]\n    else:\n        ans += [[i, 2 * i + 1] for i in range(t // 2)]\n        ans += [[i + t // 2, 2 * i] for i in range(t // 2)]\n    return ans"
    ],
    "module": "chess",
    "notes": "See Wikipedia entry on [Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nA brute force approach will not work on many of these problems.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "MoreQueens_8",
    "sat": "def sat(squares: List[List[int]], m=32, n=92):\n    \"\"\"\n    Position min(m, n) > 8 queens on an m x n chess board so that no pair is attacking each other.\n    \"\"\"\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares), \"queen off board\"\n    assert len(squares) == k, \"Wrong number of queens\"\n    assert len({i for i, j in squares}) == k, \"Queens on same row\"\n    assert len({j for i, j in squares}) == k, \"Queens on same file\"\n    assert len({i + j for i, j in squares}) == k, \"Queens on same SE diagonal\"\n    assert len({i - j for i, j in squares}) == k, \"Queens on same NE diagonal\"\n    return True",
    "sols": [
      "def sol(m=32, n=92):\n    t = min(m, n)\n    ans = []\n    if t % 2 == 1:  # odd k, put a queen in the lower right corner (and decrement k)\n        ans.append([t - 1, t - 1])\n        t -= 1\n    if t % 6 == 2:  # do something special for 8x8, 14x14 etc:\n        ans += [[i, (2 * i + t // 2 - 1) % t] for i in range(t // 2)]\n        ans += [[i + t // 2, (2 * i - t // 2 + 2) % t] for i in range(t // 2)]\n    else:\n        ans += [[i, 2 * i + 1] for i in range(t // 2)]\n        ans += [[i + t // 2, 2 * i] for i in range(t // 2)]\n    return ans"
    ],
    "module": "chess",
    "notes": "See Wikipedia entry on [Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nA brute force approach will not work on many of these problems.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "MoreQueens_9",
    "sat": "def sat(squares: List[List[int]], m=94, n=9):\n    \"\"\"\n    Position min(m, n) > 8 queens on an m x n chess board so that no pair is attacking each other.\n    \"\"\"\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares), \"queen off board\"\n    assert len(squares) == k, \"Wrong number of queens\"\n    assert len({i for i, j in squares}) == k, \"Queens on same row\"\n    assert len({j for i, j in squares}) == k, \"Queens on same file\"\n    assert len({i + j for i, j in squares}) == k, \"Queens on same SE diagonal\"\n    assert len({i - j for i, j in squares}) == k, \"Queens on same NE diagonal\"\n    return True",
    "sols": [
      "def sol(m=94, n=9):\n    t = min(m, n)\n    ans = []\n    if t % 2 == 1:  # odd k, put a queen in the lower right corner (and decrement k)\n        ans.append([t - 1, t - 1])\n        t -= 1\n    if t % 6 == 2:  # do something special for 8x8, 14x14 etc:\n        ans += [[i, (2 * i + t // 2 - 1) % t] for i in range(t // 2)]\n        ans += [[i + t // 2, (2 * i - t // 2 + 2) % t] for i in range(t // 2)]\n    else:\n        ans += [[i, 2 * i + 1] for i in range(t // 2)]\n        ans += [[i + t // 2, 2 * i] for i in range(t // 2)]\n    return ans"
    ],
    "module": "chess",
    "notes": "See Wikipedia entry on [Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nA brute force approach will not work on many of these problems.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "KnightsTour_0",
    "sat": "def sat(tour: List[List[int]], m=8, n=8):\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for [i1, j1], [i2, j2] in zip(tour, tour[1:])), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]  # cover every square once",
    "sols": [
      "def sol(m=8, n=8):  # using Warnsdorff's heuristic, breaking ties randomly \n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])"
    ],
    "module": "chess",
    "notes": "See Wikipedia entry on [Knight's tour](https://en.wikipedia.org/w/index.php?title=Knight%27s_tour)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "KnightsTour_1",
    "sat": "def sat(tour: List[List[int]], m=9, n=9):\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for [i1, j1], [i2, j2] in zip(tour, tour[1:])), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]  # cover every square once",
    "sols": [
      "def sol(m=9, n=9):  # using Warnsdorff's heuristic, breaking ties randomly \n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])"
    ],
    "module": "chess",
    "notes": "See Wikipedia entry on [Knight's tour](https://en.wikipedia.org/w/index.php?title=Knight%27s_tour)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "KnightsTour_2",
    "sat": "def sat(tour: List[List[int]], m=7, n=7):\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for [i1, j1], [i2, j2] in zip(tour, tour[1:])), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]  # cover every square once",
    "sols": [
      "def sol(m=7, n=7):  # using Warnsdorff's heuristic, breaking ties randomly \n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])"
    ],
    "module": "chess",
    "notes": "See Wikipedia entry on [Knight's tour](https://en.wikipedia.org/w/index.php?title=Knight%27s_tour)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "KnightsTour_3",
    "sat": "def sat(tour: List[List[int]], m=6, n=6):\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for [i1, j1], [i2, j2] in zip(tour, tour[1:])), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]  # cover every square once",
    "sols": [
      "def sol(m=6, n=6):  # using Warnsdorff's heuristic, breaking ties randomly \n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])"
    ],
    "module": "chess",
    "notes": "See Wikipedia entry on [Knight's tour](https://en.wikipedia.org/w/index.php?title=Knight%27s_tour)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "KnightsTour_4",
    "sat": "def sat(tour: List[List[int]], m=5, n=5):\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for [i1, j1], [i2, j2] in zip(tour, tour[1:])), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]  # cover every square once",
    "sols": [
      "def sol(m=5, n=5):  # using Warnsdorff's heuristic, breaking ties randomly \n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])"
    ],
    "module": "chess",
    "notes": "See Wikipedia entry on [Knight's tour](https://en.wikipedia.org/w/index.php?title=Knight%27s_tour)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "KnightsTour_5",
    "sat": "def sat(tour: List[List[int]], m=10, n=10):\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for [i1, j1], [i2, j2] in zip(tour, tour[1:])), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]  # cover every square once",
    "sols": [
      "def sol(m=10, n=10):  # using Warnsdorff's heuristic, breaking ties randomly \n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])"
    ],
    "module": "chess",
    "notes": "See Wikipedia entry on [Knight's tour](https://en.wikipedia.org/w/index.php?title=Knight%27s_tour)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "KnightsTour_6",
    "sat": "def sat(tour: List[List[int]], m=11, n=11):\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for [i1, j1], [i2, j2] in zip(tour, tour[1:])), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]  # cover every square once",
    "sols": [
      "def sol(m=11, n=11):  # using Warnsdorff's heuristic, breaking ties randomly \n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])"
    ],
    "module": "chess",
    "notes": "See Wikipedia entry on [Knight's tour](https://en.wikipedia.org/w/index.php?title=Knight%27s_tour)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "KnightsTour_7",
    "sat": "def sat(tour: List[List[int]], m=12, n=12):\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for [i1, j1], [i2, j2] in zip(tour, tour[1:])), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]  # cover every square once",
    "sols": [
      "def sol(m=12, n=12):  # using Warnsdorff's heuristic, breaking ties randomly \n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])"
    ],
    "module": "chess",
    "notes": "See Wikipedia entry on [Knight's tour](https://en.wikipedia.org/w/index.php?title=Knight%27s_tour)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "KnightsTour_8",
    "sat": "def sat(tour: List[List[int]], m=13, n=13):\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for [i1, j1], [i2, j2] in zip(tour, tour[1:])), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]  # cover every square once",
    "sols": [
      "def sol(m=13, n=13):  # using Warnsdorff's heuristic, breaking ties randomly \n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])"
    ],
    "module": "chess",
    "notes": "See Wikipedia entry on [Knight's tour](https://en.wikipedia.org/w/index.php?title=Knight%27s_tour)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "KnightsTour_9",
    "sat": "def sat(tour: List[List[int]], m=14, n=14):\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for [i1, j1], [i2, j2] in zip(tour, tour[1:])), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]  # cover every square once",
    "sols": [
      "def sol(m=14, n=14):  # using Warnsdorff's heuristic, breaking ties randomly \n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])"
    ],
    "module": "chess",
    "notes": "See Wikipedia entry on [Knight's tour](https://en.wikipedia.org/w/index.php?title=Knight%27s_tour)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "UncrossedKnightsPath_0",
    "sat": "def sat(path: List[List[int]], m=8, n=8, target=35):\n    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "sols": [],
    "module": "chess",
    "notes": "Uncrossed Knights Path (known solvable, but no solution given)\n\nThe goal of these problems is to match the nxn_records from [http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "UncrossedKnightsPath_1",
    "sat": "def sat(path: List[List[int]], m=3, n=3, target=2):\n    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "sols": [],
    "module": "chess",
    "notes": "Uncrossed Knights Path (known solvable, but no solution given)\n\nThe goal of these problems is to match the nxn_records from [http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "UncrossedKnightsPath_2",
    "sat": "def sat(path: List[List[int]], m=4, n=4, target=5):\n    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "sols": [],
    "module": "chess",
    "notes": "Uncrossed Knights Path (known solvable, but no solution given)\n\nThe goal of these problems is to match the nxn_records from [http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "UncrossedKnightsPath_3",
    "sat": "def sat(path: List[List[int]], m=5, n=5, target=10):\n    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "sols": [],
    "module": "chess",
    "notes": "Uncrossed Knights Path (known solvable, but no solution given)\n\nThe goal of these problems is to match the nxn_records from [http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "UncrossedKnightsPath_4",
    "sat": "def sat(path: List[List[int]], m=6, n=6, target=17):\n    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "sols": [],
    "module": "chess",
    "notes": "Uncrossed Knights Path (known solvable, but no solution given)\n\nThe goal of these problems is to match the nxn_records from [http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "UncrossedKnightsPath_5",
    "sat": "def sat(path: List[List[int]], m=7, n=7, target=24):\n    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "sols": [],
    "module": "chess",
    "notes": "Uncrossed Knights Path (known solvable, but no solution given)\n\nThe goal of these problems is to match the nxn_records from [http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "UncrossedKnightsPath_6",
    "sat": "def sat(path: List[List[int]], m=9, n=9, target=47):\n    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "sols": [],
    "module": "chess",
    "notes": "Uncrossed Knights Path (known solvable, but no solution given)\n\nThe goal of these problems is to match the nxn_records from [http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "UncrossedKnightsPath_7",
    "sat": "def sat(path: List[List[int]], m=10, n=10, target=61):\n    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "sols": [],
    "module": "chess",
    "notes": "Uncrossed Knights Path (known solvable, but no solution given)\n\nThe goal of these problems is to match the nxn_records from [http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "UncrossedKnightsPath_8",
    "sat": "def sat(path: List[List[int]], m=11, n=11, target=76):\n    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "sols": [],
    "module": "chess",
    "notes": "Uncrossed Knights Path (known solvable, but no solution given)\n\nThe goal of these problems is to match the nxn_records from [http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "UncrossedKnightsPath_9",
    "sat": "def sat(path: List[List[int]], m=12, n=12, target=94):\n    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "sols": [],
    "module": "chess",
    "notes": "Uncrossed Knights Path (known solvable, but no solution given)\n\nThe goal of these problems is to match the nxn_records from [http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "UNSOLVED_UncrossedKnightsPath_0",
    "sat": "def sat(path: List[List[int]], m=10, n=10, target=62):\n    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "sols": [],
    "module": "chess",
    "notes": "Uncrossed Knights Path (open problem, unsolved)\n\nSimilar to above, but the goal of these problems is to *beat* the nxn_records from\n[http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "UNSOLVED_UncrossedKnightsPath_1",
    "sat": "def sat(path: List[List[int]], m=11, n=11, target=77):\n    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "sols": [],
    "module": "chess",
    "notes": "Uncrossed Knights Path (open problem, unsolved)\n\nSimilar to above, but the goal of these problems is to *beat* the nxn_records from\n[http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "UNSOLVED_UncrossedKnightsPath_2",
    "sat": "def sat(path: List[List[int]], m=12, n=12, target=95):\n    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "sols": [],
    "module": "chess",
    "notes": "Uncrossed Knights Path (open problem, unsolved)\n\nSimilar to above, but the goal of these problems is to *beat* the nxn_records from\n[http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "UNSOLVED_UncrossedKnightsPath_3",
    "sat": "def sat(path: List[List[int]], m=13, n=13, target=114):\n    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "sols": [],
    "module": "chess",
    "notes": "Uncrossed Knights Path (open problem, unsolved)\n\nSimilar to above, but the goal of these problems is to *beat* the nxn_records from\n[http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "UNSOLVED_UncrossedKnightsPath_4",
    "sat": "def sat(path: List[List[int]], m=14, n=14, target=136):\n    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "sols": [],
    "module": "chess",
    "notes": "Uncrossed Knights Path (open problem, unsolved)\n\nSimilar to above, but the goal of these problems is to *beat* the nxn_records from\n[http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "UNSOLVED_UncrossedKnightsPath_5",
    "sat": "def sat(path: List[List[int]], m=15, n=15, target=159):\n    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "sols": [],
    "module": "chess",
    "notes": "Uncrossed Knights Path (open problem, unsolved)\n\nSimilar to above, but the goal of these problems is to *beat* the nxn_records from\n[http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "UNSOLVED_UncrossedKnightsPath_6",
    "sat": "def sat(path: List[List[int]], m=16, n=16, target=184):\n    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "sols": [],
    "module": "chess",
    "notes": "Uncrossed Knights Path (open problem, unsolved)\n\nSimilar to above, but the goal of these problems is to *beat* the nxn_records from\n[http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "UNSOLVED_UncrossedKnightsPath_7",
    "sat": "def sat(path: List[List[int]], m=17, n=17, target=212):\n    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "sols": [],
    "module": "chess",
    "notes": "Uncrossed Knights Path (open problem, unsolved)\n\nSimilar to above, but the goal of these problems is to *beat* the nxn_records from\n[http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "UNSOLVED_UncrossedKnightsPath_8",
    "sat": "def sat(path: List[List[int]], m=18, n=18, target=239):\n    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "sols": [],
    "module": "chess",
    "notes": "Uncrossed Knights Path (open problem, unsolved)\n\nSimilar to above, but the goal of these problems is to *beat* the nxn_records from\n[http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "UNSOLVED_UncrossedKnightsPath_9",
    "sat": "def sat(path: List[List[int]], m=19, n=19, target=269):\n    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "sols": [],
    "module": "chess",
    "notes": "Uncrossed Knights Path (open problem, unsolved)\n\nSimilar to above, but the goal of these problems is to *beat* the nxn_records from\n[http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "LZW_0",
    "sat": "def sat(seq: List[int], compressed_len=17, text=\"Hellooooooooooooooooooooo world!\"):\n    \"\"\"\n    Find a (short) compression that decompresses to the given string for the provided implementation of the\n    Lempel-Ziv decompression algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append((pieces[-1] + pieces[-1][0]) if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces) == text and len(seq) <= compressed_len",
    "sols": [
      "def sol(compressed_len=17, text=\"Hellooooooooooooooooooooo world!\"):  # compressed_len is ignored\n    index = {chr(i): i for i in range(256)}\n    seq = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq.append(index[buffer])\n\n    return seq"
    ],
    "module": "compression",
    "notes": "We have provided a simple version of the *decompression* algorithm of\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nso the solution is the *compression* algorithm.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "LZW_1",
    "sat": "def sat(seq: List[int], compressed_len=0, text=\"\"):\n    \"\"\"\n    Find a (short) compression that decompresses to the given string for the provided implementation of the\n    Lempel-Ziv decompression algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append((pieces[-1] + pieces[-1][0]) if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces) == text and len(seq) <= compressed_len",
    "sols": [
      "def sol(compressed_len=0, text=\"\"):  # compressed_len is ignored\n    index = {chr(i): i for i in range(256)}\n    seq = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq.append(index[buffer])\n\n    return seq"
    ],
    "module": "compression",
    "notes": "We have provided a simple version of the *decompression* algorithm of\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nso the solution is the *compression* algorithm.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "LZW_2",
    "sat": "def sat(seq: List[int], compressed_len=45, text=\"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\"):\n    \"\"\"\n    Find a (short) compression that decompresses to the given string for the provided implementation of the\n    Lempel-Ziv decompression algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append((pieces[-1] + pieces[-1][0]) if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces) == text and len(seq) <= compressed_len",
    "sols": [
      "def sol(compressed_len=45, text=\"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\"):  # compressed_len is ignored\n    index = {chr(i): i for i in range(256)}\n    seq = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq.append(index[buffer])\n\n    return seq"
    ],
    "module": "compression",
    "notes": "We have provided a simple version of the *decompression* algorithm of\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nso the solution is the *compression* algorithm.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "LZW_3",
    "sat": "def sat(seq: List[int], compressed_len=154, text=\"cupewoquabipemecacichytogycykythyzydizutextojokosapysetextethilabequypagichichimipyhuquithyzuwukychycokigomylotextoquochachikalocejiwyzagodothilythetiquypirabafusubasufylejulitudosisyrahezitextoluquevy\"):\n    \"\"\"\n    Find a (short) compression that decompresses to the given string for the provided implementation of the\n    Lempel-Ziv decompression algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append((pieces[-1] + pieces[-1][0]) if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces) == text and len(seq) <= compressed_len",
    "sols": [
      "def sol(compressed_len=154, text=\"cupewoquabipemecacichytogycykythyzydizutextojokosapysetextethilabequypagichichimipyhuquithyzuwukychycokigomylotextoquochachikalocejiwyzagodothilythetiquypirabafusubasufylejulitudosisyrahezitextoluquevy\"):  # compressed_len is ignored\n    index = {chr(i): i for i in range(256)}\n    seq = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq.append(index[buffer])\n\n    return seq"
    ],
    "module": "compression",
    "notes": "We have provided a simple version of the *decompression* algorithm of\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nso the solution is the *compression* algorithm.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "LZW_4",
    "sat": "def sat(seq: List[int], compressed_len=2, text=\"si\"):\n    \"\"\"\n    Find a (short) compression that decompresses to the given string for the provided implementation of the\n    Lempel-Ziv decompression algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append((pieces[-1] + pieces[-1][0]) if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces) == text and len(seq) <= compressed_len",
    "sols": [
      "def sol(compressed_len=2, text=\"si\"):  # compressed_len is ignored\n    index = {chr(i): i for i in range(256)}\n    seq = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq.append(index[buffer])\n\n    return seq"
    ],
    "module": "compression",
    "notes": "We have provided a simple version of the *decompression* algorithm of\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nso the solution is the *compression* algorithm.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "LZW_5",
    "sat": "def sat(seq: List[int], compressed_len=536, text=\"vebenuthiryliwehumethemoquyhobodikirihegitextonathawuwiwiwebihawuxenachiwirabysipechorovyrofikyricedimulufachebogufyhocuthiwuthohacevetextasyleludekatinyxuwupydofikemojoquinoxaqueciperilaquozoquakefezomomachovesavomyquypythobuquizukufadyridiquulachymuzamesosaregiryjujejozupymuchotolochochynelolehujithukabeliviracelothuwexanihutextathybuchomytothedurivelythujenywalunynylomoviziworyrewybawochuwajirasuquojabyhithylecabedimahylevazathihobyvehivethetextihygosecorucufakacuquypaguhugydexichepothyxuherowonesichenacizovefykonunowetextohycowesipyboxacedozatybajifejywaryxymubegisozatharabicybyrilaxeridazoquuzytiquujewidyzazyrarikopyhochigotihyfarenajonopisyfafehudolubydebaquysizugyweciquichufyrudethocarovechymothachyzafurewuquuthyxojotextekotuxetuchanotuguhaquydopoxafaquujisukyfagykibenozahuchazysithyjogavochiwibiquuhequihyzikofazybimovychanycagokokyxikuwothefylidipogineduthijedyzolobuthokerydidequavocacuwucabojepokyba\"):\n    \"\"\"\n    Find a (short) compression that decompresses to the given string for the provided implementation of the\n    Lempel-Ziv decompression algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append((pieces[-1] + pieces[-1][0]) if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces) == text and len(seq) <= compressed_len",
    "sols": [
      "def sol(compressed_len=536, text=\"vebenuthiryliwehumethemoquyhobodikirihegitextonathawuwiwiwebihawuxenachiwirabysipechorovyrofikyricedimulufachebogufyhocuthiwuthohacevetextasyleludekatinyxuwupydofikemojoquinoxaqueciperilaquozoquakefezomomachovesavomyquypythobuquizukufadyridiquulachymuzamesosaregiryjujejozupymuchotolochochynelolehujithukabeliviracelothuwexanihutextathybuchomytothedurivelythujenywalunynylomoviziworyrewybawochuwajirasuquojabyhithylecabedimahylevazathihobyvehivethetextihygosecorucufakacuquypaguhugydexichepothyxuherowonesichenacizovefykonunowetextohycowesipyboxacedozatybajifejywaryxymubegisozatharabicybyrilaxeridazoquuzytiquujewidyzazyrarikopyhochigotihyfarenajonopisyfafehudolubydebaquysizugyweciquichufyrudethocarovechymothachyzafurewuquuthyxojotextekotuxetuchanotuguhaquydopoxafaquujisukyfagykibenozahuchazysithyjogavochiwibiquuhequihyzikofazybimovychanycagokokyxikuwothefylidipogineduthijedyzolobuthokerydidequavocacuwucabojepokyba\"):  # compressed_len is ignored\n    index = {chr(i): i for i in range(256)}\n    seq = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq.append(index[buffer])\n\n    return seq"
    ],
    "module": "compression",
    "notes": "We have provided a simple version of the *decompression* algorithm of\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nso the solution is the *compression* algorithm.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "LZW_6",
    "sat": "def sat(seq: List[int], compressed_len=41, text=\"vybegosyjurakumunyjimolachevazisakacyzecogyf\"):\n    \"\"\"\n    Find a (short) compression that decompresses to the given string for the provided implementation of the\n    Lempel-Ziv decompression algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append((pieces[-1] + pieces[-1][0]) if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces) == text and len(seq) <= compressed_len",
    "sols": [
      "def sol(compressed_len=41, text=\"vybegosyjurakumunyjimolachevazisakacyzecogyf\"):  # compressed_len is ignored\n    index = {chr(i): i for i in range(256)}\n    seq = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq.append(index[buffer])\n\n    return seq"
    ],
    "module": "compression",
    "notes": "We have provided a simple version of the *decompression* algorithm of\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nso the solution is the *compression* algorithm.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "LZW_7",
    "sat": "def sat(seq: List[int], compressed_len=72, text=\"nitextachizyxuvyzafalichurakymomoquichameguvasahetythuquuryfyquijymuchutherobylichichim\"):\n    \"\"\"\n    Find a (short) compression that decompresses to the given string for the provided implementation of the\n    Lempel-Ziv decompression algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append((pieces[-1] + pieces[-1][0]) if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces) == text and len(seq) <= compressed_len",
    "sols": [
      "def sol(compressed_len=72, text=\"nitextachizyxuvyzafalichurakymomoquichameguvasahetythuquuryfyquijymuchutherobylichichim\"):  # compressed_len is ignored\n    index = {chr(i): i for i in range(256)}\n    seq = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq.append(index[buffer])\n\n    return seq"
    ],
    "module": "compression",
    "notes": "We have provided a simple version of the *decompression* algorithm of\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nso the solution is the *compression* algorithm.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "LZW_8",
    "sat": "def sat(seq: List[int], compressed_len=43, text=\"lafitextunuxonuxodakesydepexithymequilawepapumilyp\"):\n    \"\"\"\n    Find a (short) compression that decompresses to the given string for the provided implementation of the\n    Lempel-Ziv decompression algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append((pieces[-1] + pieces[-1][0]) if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces) == text and len(seq) <= compressed_len",
    "sols": [
      "def sol(compressed_len=43, text=\"lafitextunuxonuxodakesydepexithymequilawepapumilyp\"):  # compressed_len is ignored\n    index = {chr(i): i for i in range(256)}\n    seq = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq.append(index[buffer])\n\n    return seq"
    ],
    "module": "compression",
    "notes": "We have provided a simple version of the *decompression* algorithm of\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nso the solution is the *compression* algorithm.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "LZW_9",
    "sat": "def sat(seq: List[int], compressed_len=2, text=\"fo\"):\n    \"\"\"\n    Find a (short) compression that decompresses to the given string for the provided implementation of the\n    Lempel-Ziv decompression algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append((pieces[-1] + pieces[-1][0]) if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces) == text and len(seq) <= compressed_len",
    "sols": [
      "def sol(compressed_len=2, text=\"fo\"):  # compressed_len is ignored\n    index = {chr(i): i for i in range(256)}\n    seq = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq.append(index[buffer])\n\n    return seq"
    ],
    "module": "compression",
    "notes": "We have provided a simple version of the *decompression* algorithm of\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nso the solution is the *compression* algorithm.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "LZW_decompress_0",
    "sat": "def sat(text: str, seq=[72, 101, 108, 108, 111, 32, 119, 111, 114, 100, 262, 264, 266, 263, 265, 33]):\n    \"\"\"\n    Find a string that compresses to the target sequence for the provided implementation of the\n    Lempel-Ziv algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"\n    index = {chr(i): i for i in range(256)}\n    seq2 = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq2.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq2.append(index[buffer])\n\n    return seq2 == seq",
    "sols": [
      "def sol(seq=[72, 101, 108, 108, 111, 32, 119, 111, 114, 100, 262, 264, 266, 263, 265, 33]):\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append(pieces[-1] + pieces[-1][0] if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces)"
    ],
    "module": "compression",
    "notes": "We have provided a simple version of the\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nand the solution is the *decompression* algorithm.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "LZW_decompress_1",
    "sat": "def sat(text: str, seq: List[int]=[]):\n    \"\"\"\n    Find a string that compresses to the target sequence for the provided implementation of the\n    Lempel-Ziv algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"\n    index = {chr(i): i for i in range(256)}\n    seq2 = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq2.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq2.append(index[buffer])\n\n    return seq2 == seq",
    "sols": [
      "def sol(seq=[]):\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append(pieces[-1] + pieces[-1][0] if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces)"
    ],
    "module": "compression",
    "notes": "We have provided a simple version of the\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nand the solution is the *decompression* algorithm.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "LZW_decompress_2",
    "sat": "def sat(text: str, seq=[97]):\n    \"\"\"\n    Find a string that compresses to the target sequence for the provided implementation of the\n    Lempel-Ziv algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"\n    index = {chr(i): i for i in range(256)}\n    seq2 = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq2.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq2.append(index[buffer])\n\n    return seq2 == seq",
    "sols": [
      "def sol(seq=[97]):\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append(pieces[-1] + pieces[-1][0] if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces)"
    ],
    "module": "compression",
    "notes": "We have provided a simple version of the\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nand the solution is the *decompression* algorithm.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "LZW_decompress_3",
    "sat": "def sat(text: str, seq=[98, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 265]):\n    \"\"\"\n    Find a string that compresses to the target sequence for the provided implementation of the\n    Lempel-Ziv algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"\n    index = {chr(i): i for i in range(256)}\n    seq2 = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq2.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq2.append(index[buffer])\n\n    return seq2 == seq",
    "sols": [
      "def sol(seq=[98, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 265]):\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append(pieces[-1] + pieces[-1][0] if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces)"
    ],
    "module": "compression",
    "notes": "We have provided a simple version of the\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nand the solution is the *decompression* algorithm.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "LZW_decompress_4",
    "sat": "def sat(text: str, seq=[97, 98, 257, 259, 258, 261, 260, 263, 262, 265, 264, 267, 266, 269, 268, 271, 270, 273, 272, 275, 274, 277, 276, 279, 278, 281, 280, 283, 282, 285, 284, 287, 286, 289, 288, 291, 290, 293, 292, 295, 294, 297, 296, 299, 298, 301, 300, 303, 302, 305, 304, 307, 306, 309, 308, 311, 310, 313, 312, 315, 314, 317, 316, 319, 318, 321, 320, 323, 322, 325, 324, 327, 326, 329, 328, 331, 330, 333, 332, 335, 334, 337, 336, 339, 338, 341, 340, 343, 293, 33]):\n    \"\"\"\n    Find a string that compresses to the target sequence for the provided implementation of the\n    Lempel-Ziv algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"\n    index = {chr(i): i for i in range(256)}\n    seq2 = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq2.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq2.append(index[buffer])\n\n    return seq2 == seq",
    "sols": [
      "def sol(seq=[97, 98, 257, 259, 258, 261, 260, 263, 262, 265, 264, 267, 266, 269, 268, 271, 270, 273, 272, 275, 274, 277, 276, 279, 278, 281, 280, 283, 282, 285, 284, 287, 286, 289, 288, 291, 290, 293, 292, 295, 294, 297, 296, 299, 298, 301, 300, 303, 302, 305, 304, 307, 306, 309, 308, 311, 310, 313, 312, 315, 314, 317, 316, 319, 318, 321, 320, 323, 322, 325, 324, 327, 326, 329, 328, 331, 330, 333, 332, 335, 334, 337, 336, 339, 338, 341, 340, 343, 293, 33]):\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append(pieces[-1] + pieces[-1][0] if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces)"
    ],
    "module": "compression",
    "notes": "We have provided a simple version of the\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nand the solution is the *decompression* algorithm.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "LZW_decompress_5",
    "sat": "def sat(text: str, seq=[108, 101, 102, 117, 119, 111, 114, 105, 122, 117, 106, 111, 99, 101, 116, 101, 120, 271, 119, 97, 122, 101, 113, 117, 105, 109, 101, 108, 111, 104, 270, 272, 116, 121, 116, 104, 97, 108, 97, 271, 273, 117, 102]):\n    \"\"\"\n    Find a string that compresses to the target sequence for the provided implementation of the\n    Lempel-Ziv algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"\n    index = {chr(i): i for i in range(256)}\n    seq2 = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq2.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq2.append(index[buffer])\n\n    return seq2 == seq",
    "sols": [
      "def sol(seq=[108, 101, 102, 117, 119, 111, 114, 105, 122, 117, 106, 111, 99, 101, 116, 101, 120, 271, 119, 97, 122, 101, 113, 117, 105, 109, 101, 108, 111, 104, 270, 272, 116, 121, 116, 104, 97, 108, 97, 271, 273, 117, 102]):\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append(pieces[-1] + pieces[-1][0] if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces)"
    ],
    "module": "compression",
    "notes": "We have provided a simple version of the\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nand the solution is the *decompression* algorithm.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "LZW_decompress_6",
    "sat": "def sat(text: str, seq=[103, 121, 120, 101, 98, 105, 106, 101]):\n    \"\"\"\n    Find a string that compresses to the target sequence for the provided implementation of the\n    Lempel-Ziv algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"\n    index = {chr(i): i for i in range(256)}\n    seq2 = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq2.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq2.append(index[buffer])\n\n    return seq2 == seq",
    "sols": [
      "def sol(seq=[103, 121, 120, 101, 98, 105, 106, 101]):\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append(pieces[-1] + pieces[-1][0] if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces)"
    ],
    "module": "compression",
    "notes": "We have provided a simple version of the\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nand the solution is the *decompression* algorithm.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "LZW_decompress_7",
    "sat": "def sat(text: str, seq=[108, 105, 119, 105, 120, 101, 106, 105, 99, 105, 116, 111, 107, 97, 100, 117, 110, 117, 114, 121, 106, 117, 107, 111, 122, 97, 109, 121, 116, 104, 111, 118, 276, 117, 109, 105, 102, 105, 113, 117, 268, 117, 261, 116, 101, 120, 116, 117, 108, 97, 295, 97, 102, 101, 104, 97, 115, 287, 266, 105, 98, 284, 301, 300, 109, 117, 98, 105, 110, 97, 104, 101, 309, 109, 111, 285, 121, 122, 105, 122, 121, 271, 112, 111, 277, 100, 276, 111, 99, 104, 105, 279, 286, 291, 257, 109, 101, 99, 121, 313, 336, 103, 105, 271, 288, 99, 262, 117, 295, 294, 117, 264, 104, 117, 342, 300, 302, 292, 97, 119, 97, 275, 300, 277, 114, 266, 319, 260, 266, 344, 286, 285, 382, 373, 116, 97, 285, 101, 112, 366, 290, 117, 122, 328, 353, 369, 116, 284, 327, 378, 402, 311, 103, 274, 117, 391, 336, 285, 272, 121, 265, 118, 264, 101, 122, 331, 383, 291, 114, 101, 103, 121, 409, 110, 318, 302, 97, 265, 259, 288, 118, 370, 111, 307, 98, 101, 414, 365, 102, 282, 359, 355, 274, 105, 108, 298, 121, 98, 97, 336, 109, 97, 107, 353, 105, 275, 119, 121, 259, 457, 257, 107, 117, 313, 295, 111, 259, 346, 110, 386, 394, 272, 258, 431, 403, 285, 111, 98, 117, 277, 119, 111, 309, 345, 472, 450, 347, 268, 331, 349, 105, 115, 270, 101, 269, 265, 273, 108, 442, 383, 271, 114, 411, 416, 121, 112, 420, 121, 118, 308, 105, 104, 121, 309, 313, 498, 110, 368, 97, 112, 121, 381, 114, 472, 472, 101, 376, 457, 120, 111, 261, 100, 344, 121, 523, 120, 464, 111, 112, 411, 286, 107, 260, 310, 280, 268, 404, 464, 117, 345, 392, 326, 546, 117, 103, 111, 508, 116, 389, 267, 102, 272, 111, 115, 565, 260, 97, 451, 283, 376, 106, 97, 577, 503, 101, 457, 309, 98, 111, 100, 105, 437, 265, 295, 276, 394, 505, 295, 397, 277, 515, 526, 512, 403, 570, 103, 401, 420, 301, 370, 262, 101, 454, 542, 395, 590, 548, 257, 414, 311, 457, 490, 588, 477, 482, 561, 103, 392, 327, 325, 115, 555, 327, 352, 523, 403, 456, 117, 118, 426, 377, 101, 115, 121, 457, 518, 518, 100, 433, 353, 301, 297, 427, 119, 555, 438, 327, 261, 311, 309, 300, 498, 623, 650, 425, 515, 107, 519, 328, 433, 346, 594, 281, 471, 528, 121, 535, 545, 108, 544, 585, 97, 273, 457, 418, 518, 305, 354, 330, 526, 281, 403, 265, 303, 372, 320, 394, 565, 428, 480, 565, 562, 121, 675, 409, 468, 421, 295, 500, 455, 298, 392, 301, 519, 274, 101, 504, 567, 321, 635, 342, 459, 515, 273, 487, 119, 442, 369, 395, 427, 567, 627, 457, 482, 362, 675, 311, 650, 526, 321, 650, 317, 538, 99, 469, 101, 288, 102, 111, 321, 691, 628, 262, 422, 381, 329, 97, 535, 281, 120, 458, 581]):\n    \"\"\"\n    Find a string that compresses to the target sequence for the provided implementation of the\n    Lempel-Ziv algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"\n    index = {chr(i): i for i in range(256)}\n    seq2 = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq2.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq2.append(index[buffer])\n\n    return seq2 == seq",
    "sols": [
      "def sol(seq=[108, 105, 119, 105, 120, 101, 106, 105, 99, 105, 116, 111, 107, 97, 100, 117, 110, 117, 114, 121, 106, 117, 107, 111, 122, 97, 109, 121, 116, 104, 111, 118, 276, 117, 109, 105, 102, 105, 113, 117, 268, 117, 261, 116, 101, 120, 116, 117, 108, 97, 295, 97, 102, 101, 104, 97, 115, 287, 266, 105, 98, 284, 301, 300, 109, 117, 98, 105, 110, 97, 104, 101, 309, 109, 111, 285, 121, 122, 105, 122, 121, 271, 112, 111, 277, 100, 276, 111, 99, 104, 105, 279, 286, 291, 257, 109, 101, 99, 121, 313, 336, 103, 105, 271, 288, 99, 262, 117, 295, 294, 117, 264, 104, 117, 342, 300, 302, 292, 97, 119, 97, 275, 300, 277, 114, 266, 319, 260, 266, 344, 286, 285, 382, 373, 116, 97, 285, 101, 112, 366, 290, 117, 122, 328, 353, 369, 116, 284, 327, 378, 402, 311, 103, 274, 117, 391, 336, 285, 272, 121, 265, 118, 264, 101, 122, 331, 383, 291, 114, 101, 103, 121, 409, 110, 318, 302, 97, 265, 259, 288, 118, 370, 111, 307, 98, 101, 414, 365, 102, 282, 359, 355, 274, 105, 108, 298, 121, 98, 97, 336, 109, 97, 107, 353, 105, 275, 119, 121, 259, 457, 257, 107, 117, 313, 295, 111, 259, 346, 110, 386, 394, 272, 258, 431, 403, 285, 111, 98, 117, 277, 119, 111, 309, 345, 472, 450, 347, 268, 331, 349, 105, 115, 270, 101, 269, 265, 273, 108, 442, 383, 271, 114, 411, 416, 121, 112, 420, 121, 118, 308, 105, 104, 121, 309, 313, 498, 110, 368, 97, 112, 121, 381, 114, 472, 472, 101, 376, 457, 120, 111, 261, 100, 344, 121, 523, 120, 464, 111, 112, 411, 286, 107, 260, 310, 280, 268, 404, 464, 117, 345, 392, 326, 546, 117, 103, 111, 508, 116, 389, 267, 102, 272, 111, 115, 565, 260, 97, 451, 283, 376, 106, 97, 577, 503, 101, 457, 309, 98, 111, 100, 105, 437, 265, 295, 276, 394, 505, 295, 397, 277, 515, 526, 512, 403, 570, 103, 401, 420, 301, 370, 262, 101, 454, 542, 395, 590, 548, 257, 414, 311, 457, 490, 588, 477, 482, 561, 103, 392, 327, 325, 115, 555, 327, 352, 523, 403, 456, 117, 118, 426, 377, 101, 115, 121, 457, 518, 518, 100, 433, 353, 301, 297, 427, 119, 555, 438, 327, 261, 311, 309, 300, 498, 623, 650, 425, 515, 107, 519, 328, 433, 346, 594, 281, 471, 528, 121, 535, 545, 108, 544, 585, 97, 273, 457, 418, 518, 305, 354, 330, 526, 281, 403, 265, 303, 372, 320, 394, 565, 428, 480, 565, 562, 121, 675, 409, 468, 421, 295, 500, 455, 298, 392, 301, 519, 274, 101, 504, 567, 321, 635, 342, 459, 515, 273, 487, 119, 442, 369, 395, 427, 567, 627, 457, 482, 362, 675, 311, 650, 526, 321, 650, 317, 538, 99, 469, 101, 288, 102, 111, 321, 691, 628, 262, 422, 381, 329, 97, 535, 281, 120, 458, 581]):\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append(pieces[-1] + pieces[-1][0] if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces)"
    ],
    "module": "compression",
    "notes": "We have provided a simple version of the\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nand the solution is the *decompression* algorithm.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "LZW_decompress_8",
    "sat": "def sat(text: str, seq=[114, 111, 104, 97, 99, 105]):\n    \"\"\"\n    Find a string that compresses to the target sequence for the provided implementation of the\n    Lempel-Ziv algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"\n    index = {chr(i): i for i in range(256)}\n    seq2 = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq2.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq2.append(index[buffer])\n\n    return seq2 == seq",
    "sols": [
      "def sol(seq=[114, 111, 104, 97, 99, 105]):\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append(pieces[-1] + pieces[-1][0] if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces)"
    ],
    "module": "compression",
    "notes": "We have provided a simple version of the\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nand the solution is the *decompression* algorithm.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "LZW_decompress_9",
    "sat": "def sat(text: str, seq=[114, 105, 98, 117, 108, 121, 104, 121, 103, 97, 112, 117, 116, 101, 120, 116, 105, 119, 111, 109, 111, 108, 117, 104, 111, 116, 280, 118, 105, 116, 117, 118, 121, 99, 111, 119, 117, 112, 97, 106, 101, 119, 121, 112, 111, 98, 101, 269, 271, 105, 122, 275, 111, 102, 111]):\n    \"\"\"\n    Find a string that compresses to the target sequence for the provided implementation of the\n    Lempel-Ziv algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"\n    index = {chr(i): i for i in range(256)}\n    seq2 = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq2.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq2.append(index[buffer])\n\n    return seq2 == seq",
    "sols": [
      "def sol(seq=[114, 105, 98, 117, 108, 121, 104, 121, 103, 97, 112, 117, 116, 101, 120, 116, 105, 119, 111, 109, 111, 108, 117, 104, 111, 116, 280, 118, 105, 116, 117, 118, 121, 99, 111, 119, 117, 112, 97, 106, 101, 119, 121, 112, 111, 98, 101, 269, 271, 105, 122, 275, 111, 102, 111]):\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append(pieces[-1] + pieces[-1][0] if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces)"
    ],
    "module": "compression",
    "notes": "We have provided a simple version of the\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nand the solution is the *decompression* algorithm.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "PackingHam_0",
    "sat": "def sat(words: List[str], num=100, bits=100, dist=34):\n    \"\"\"Pack a certain number of binary strings so that they have a minimum hamming distance between each other.\"\"\"\n    assert len(words) == num and all(len(word) == bits and set(word) <= {\"0\", \"1\"} for word in words)\n    return all(sum([a != b for a, b in zip(words[i], words[j])]) >= dist for i in range(num) for j in range(i))",
    "sols": [
      "def sol(num=100, bits=100, dist=34):\n    import random  # key insight, use randomness!\n    r = random.Random(0)\n    while True:\n        seqs = [r.getrandbits(bits) for _ in range(num)]\n        if all(bin(seqs[i] ^ seqs[j]).count(\"1\") >= dist for i in range(num) for j in range(i)):\n            return [bin(s)[2:].rjust(bits, '0') for s in seqs]"
    ],
    "module": "compression",
    "notes": "This packing problem a [classic problem](https://en.wikipedia.org/wiki/Sphere_packing#Other_spaces)\nin coding theory.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "PackingHam_1",
    "sat": "def sat(words: List[str], num=5, bits=81, dist=30):\n    \"\"\"Pack a certain number of binary strings so that they have a minimum hamming distance between each other.\"\"\"\n    assert len(words) == num and all(len(word) == bits and set(word) <= {\"0\", \"1\"} for word in words)\n    return all(sum([a != b for a, b in zip(words[i], words[j])]) >= dist for i in range(num) for j in range(i))",
    "sols": [
      "def sol(num=5, bits=81, dist=30):\n    import random  # key insight, use randomness!\n    r = random.Random(0)\n    while True:\n        seqs = [r.getrandbits(bits) for _ in range(num)]\n        if all(bin(seqs[i] ^ seqs[j]).count(\"1\") >= dist for i in range(num) for j in range(i)):\n            return [bin(s)[2:].rjust(bits, '0') for s in seqs]"
    ],
    "module": "compression",
    "notes": "This packing problem a [classic problem](https://en.wikipedia.org/wiki/Sphere_packing#Other_spaces)\nin coding theory.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "PackingHam_2",
    "sat": "def sat(words: List[str], num=78, bits=64, dist=16):\n    \"\"\"Pack a certain number of binary strings so that they have a minimum hamming distance between each other.\"\"\"\n    assert len(words) == num and all(len(word) == bits and set(word) <= {\"0\", \"1\"} for word in words)\n    return all(sum([a != b for a, b in zip(words[i], words[j])]) >= dist for i in range(num) for j in range(i))",
    "sols": [
      "def sol(num=78, bits=64, dist=16):\n    import random  # key insight, use randomness!\n    r = random.Random(0)\n    while True:\n        seqs = [r.getrandbits(bits) for _ in range(num)]\n        if all(bin(seqs[i] ^ seqs[j]).count(\"1\") >= dist for i in range(num) for j in range(i)):\n            return [bin(s)[2:].rjust(bits, '0') for s in seqs]"
    ],
    "module": "compression",
    "notes": "This packing problem a [classic problem](https://en.wikipedia.org/wiki/Sphere_packing#Other_spaces)\nin coding theory.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "PackingHam_3",
    "sat": "def sat(words: List[str], num=28, bits=11, dist=1):\n    \"\"\"Pack a certain number of binary strings so that they have a minimum hamming distance between each other.\"\"\"\n    assert len(words) == num and all(len(word) == bits and set(word) <= {\"0\", \"1\"} for word in words)\n    return all(sum([a != b for a, b in zip(words[i], words[j])]) >= dist for i in range(num) for j in range(i))",
    "sols": [
      "def sol(num=28, bits=11, dist=1):\n    import random  # key insight, use randomness!\n    r = random.Random(0)\n    while True:\n        seqs = [r.getrandbits(bits) for _ in range(num)]\n        if all(bin(seqs[i] ^ seqs[j]).count(\"1\") >= dist for i in range(num) for j in range(i)):\n            return [bin(s)[2:].rjust(bits, '0') for s in seqs]"
    ],
    "module": "compression",
    "notes": "This packing problem a [classic problem](https://en.wikipedia.org/wiki/Sphere_packing#Other_spaces)\nin coding theory.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "PackingHam_4",
    "sat": "def sat(words: List[str], num=8, bits=75, dist=24):\n    \"\"\"Pack a certain number of binary strings so that they have a minimum hamming distance between each other.\"\"\"\n    assert len(words) == num and all(len(word) == bits and set(word) <= {\"0\", \"1\"} for word in words)\n    return all(sum([a != b for a, b in zip(words[i], words[j])]) >= dist for i in range(num) for j in range(i))",
    "sols": [
      "def sol(num=8, bits=75, dist=24):\n    import random  # key insight, use randomness!\n    r = random.Random(0)\n    while True:\n        seqs = [r.getrandbits(bits) for _ in range(num)]\n        if all(bin(seqs[i] ^ seqs[j]).count(\"1\") >= dist for i in range(num) for j in range(i)):\n            return [bin(s)[2:].rjust(bits, '0') for s in seqs]"
    ],
    "module": "compression",
    "notes": "This packing problem a [classic problem](https://en.wikipedia.org/wiki/Sphere_packing#Other_spaces)\nin coding theory.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "PackingHam_5",
    "sat": "def sat(words: List[str], num=64, bits=47, dist=11):\n    \"\"\"Pack a certain number of binary strings so that they have a minimum hamming distance between each other.\"\"\"\n    assert len(words) == num and all(len(word) == bits and set(word) <= {\"0\", \"1\"} for word in words)\n    return all(sum([a != b for a, b in zip(words[i], words[j])]) >= dist for i in range(num) for j in range(i))",
    "sols": [
      "def sol(num=64, bits=47, dist=11):\n    import random  # key insight, use randomness!\n    r = random.Random(0)\n    while True:\n        seqs = [r.getrandbits(bits) for _ in range(num)]\n        if all(bin(seqs[i] ^ seqs[j]).count(\"1\") >= dist for i in range(num) for j in range(i)):\n            return [bin(s)[2:].rjust(bits, '0') for s in seqs]"
    ],
    "module": "compression",
    "notes": "This packing problem a [classic problem](https://en.wikipedia.org/wiki/Sphere_packing#Other_spaces)\nin coding theory.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "PackingHam_6",
    "sat": "def sat(words: List[str], num=2, bits=7, dist=2):\n    \"\"\"Pack a certain number of binary strings so that they have a minimum hamming distance between each other.\"\"\"\n    assert len(words) == num and all(len(word) == bits and set(word) <= {\"0\", \"1\"} for word in words)\n    return all(sum([a != b for a, b in zip(words[i], words[j])]) >= dist for i in range(num) for j in range(i))",
    "sols": [
      "def sol(num=2, bits=7, dist=2):\n    import random  # key insight, use randomness!\n    r = random.Random(0)\n    while True:\n        seqs = [r.getrandbits(bits) for _ in range(num)]\n        if all(bin(seqs[i] ^ seqs[j]).count(\"1\") >= dist for i in range(num) for j in range(i)):\n            return [bin(s)[2:].rjust(bits, '0') for s in seqs]"
    ],
    "module": "compression",
    "notes": "This packing problem a [classic problem](https://en.wikipedia.org/wiki/Sphere_packing#Other_spaces)\nin coding theory.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "PackingHam_7",
    "sat": "def sat(words: List[str], num=6, bits=72, dist=28):\n    \"\"\"Pack a certain number of binary strings so that they have a minimum hamming distance between each other.\"\"\"\n    assert len(words) == num and all(len(word) == bits and set(word) <= {\"0\", \"1\"} for word in words)\n    return all(sum([a != b for a, b in zip(words[i], words[j])]) >= dist for i in range(num) for j in range(i))",
    "sols": [
      "def sol(num=6, bits=72, dist=28):\n    import random  # key insight, use randomness!\n    r = random.Random(0)\n    while True:\n        seqs = [r.getrandbits(bits) for _ in range(num)]\n        if all(bin(seqs[i] ^ seqs[j]).count(\"1\") >= dist for i in range(num) for j in range(i)):\n            return [bin(s)[2:].rjust(bits, '0') for s in seqs]"
    ],
    "module": "compression",
    "notes": "This packing problem a [classic problem](https://en.wikipedia.org/wiki/Sphere_packing#Other_spaces)\nin coding theory.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "PackingHam_8",
    "sat": "def sat(words: List[str], num=8, bits=7, dist=1):\n    \"\"\"Pack a certain number of binary strings so that they have a minimum hamming distance between each other.\"\"\"\n    assert len(words) == num and all(len(word) == bits and set(word) <= {\"0\", \"1\"} for word in words)\n    return all(sum([a != b for a, b in zip(words[i], words[j])]) >= dist for i in range(num) for j in range(i))",
    "sols": [
      "def sol(num=8, bits=7, dist=1):\n    import random  # key insight, use randomness!\n    r = random.Random(0)\n    while True:\n        seqs = [r.getrandbits(bits) for _ in range(num)]\n        if all(bin(seqs[i] ^ seqs[j]).count(\"1\") >= dist for i in range(num) for j in range(i)):\n            return [bin(s)[2:].rjust(bits, '0') for s in seqs]"
    ],
    "module": "compression",
    "notes": "This packing problem a [classic problem](https://en.wikipedia.org/wiki/Sphere_packing#Other_spaces)\nin coding theory.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "PackingHam_9",
    "sat": "def sat(words: List[str], num=9, bits=41, dist=12):\n    \"\"\"Pack a certain number of binary strings so that they have a minimum hamming distance between each other.\"\"\"\n    assert len(words) == num and all(len(word) == bits and set(word) <= {\"0\", \"1\"} for word in words)\n    return all(sum([a != b for a, b in zip(words[i], words[j])]) >= dist for i in range(num) for j in range(i))",
    "sols": [
      "def sol(num=9, bits=41, dist=12):\n    import random  # key insight, use randomness!\n    r = random.Random(0)\n    while True:\n        seqs = [r.getrandbits(bits) for _ in range(num)]\n        if all(bin(seqs[i] ^ seqs[j]).count(\"1\") >= dist for i in range(num) for j in range(i)):\n            return [bin(s)[2:].rjust(bits, '0') for s in seqs]"
    ],
    "module": "compression",
    "notes": "This packing problem a [classic problem](https://en.wikipedia.org/wiki/Sphere_packing#Other_spaces)\nin coding theory.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Oscillators_0",
    "sat": "def sat(init: List[List[int]], period=3):\n    \"\"\"\n    Find a pattern in Conway's Game of Life https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life that repeats\n    with a certain period https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life\n    \"\"\"\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": [
      "def sol(period=3):  # generate random patterns, slow solution\n    # def viz(live):\n    #     if not live:\n    #         return\n    #     a, b = min(z.real for z in live), min(z.imag for z in live)\n    #     live = {z - (a + b * 1j) for z in live}\n    #     m, n = int(max(z.real for z in live)) + 1, int(max(z.imag for z in live)) + 1\n    #     for x in range(m):\n    #         print(\"\".join(\"X\" if x + y * 1j in live else \",\" for y in range(n)))\n\n    import random\n    rand = random.Random(1)\n    # print(f\"Looking for {period}:\")\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    completes = [[x + y * 1j for x in range(n) for y in range(n)] for n in range(30)]\n\n    for _attempt in range(10 ** 5):\n        n = rand.randrange(3, 10)\n        m = rand.randrange(3, n * n)\n        live = set(rand.sample(completes[n], m))\n        if rand.randrange(2):\n            live.update([-z for z in live])\n        if rand.randrange(2):\n            live.update([z.conjugate() for z in live])\n        memory = {}\n        for step in range(period * 10):\n            key = sum((.123 - .99123j) ** z for z in live) * 10 ** 5\n            key = int(key.real), int(key.imag)\n            if key in memory:\n                if memory[key] == step - period:\n                    # print(period)\n                    # viz(live)\n                    return [[int(z.real), int(z.imag)] for z in live]\n                break\n            memory[key] = step\n            visible = {z + d for z in live for d in deltas}\n            live = {z for z in visible if sum(z + d in live for d in deltas) in range(3 - (z in live), 4)}\n\n    return None  # failed"
    ],
    "module": "conways_game_of_life",
    "notes": "Oscillators (including some unsolved, open problems)\n\nThis problem is *unsolved* for periods 19, 38, and 41.\n\nSee\n[discussion](https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life )\nin Wikipedia article on Cellular Automaton Oscillators.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Oscillators_1",
    "sat": "def sat(init: List[List[int]], period=1):\n    \"\"\"\n    Find a pattern in Conway's Game of Life https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life that repeats\n    with a certain period https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life\n    \"\"\"\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": [
      "def sol(period=1):  # generate random patterns, slow solution\n    # def viz(live):\n    #     if not live:\n    #         return\n    #     a, b = min(z.real for z in live), min(z.imag for z in live)\n    #     live = {z - (a + b * 1j) for z in live}\n    #     m, n = int(max(z.real for z in live)) + 1, int(max(z.imag for z in live)) + 1\n    #     for x in range(m):\n    #         print(\"\".join(\"X\" if x + y * 1j in live else \",\" for y in range(n)))\n\n    import random\n    rand = random.Random(1)\n    # print(f\"Looking for {period}:\")\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    completes = [[x + y * 1j for x in range(n) for y in range(n)] for n in range(30)]\n\n    for _attempt in range(10 ** 5):\n        n = rand.randrange(3, 10)\n        m = rand.randrange(3, n * n)\n        live = set(rand.sample(completes[n], m))\n        if rand.randrange(2):\n            live.update([-z for z in live])\n        if rand.randrange(2):\n            live.update([z.conjugate() for z in live])\n        memory = {}\n        for step in range(period * 10):\n            key = sum((.123 - .99123j) ** z for z in live) * 10 ** 5\n            key = int(key.real), int(key.imag)\n            if key in memory:\n                if memory[key] == step - period:\n                    # print(period)\n                    # viz(live)\n                    return [[int(z.real), int(z.imag)] for z in live]\n                break\n            memory[key] = step\n            visible = {z + d for z in live for d in deltas}\n            live = {z for z in visible if sum(z + d in live for d in deltas) in range(3 - (z in live), 4)}\n\n    return None  # failed"
    ],
    "module": "conways_game_of_life",
    "notes": "Oscillators (including some unsolved, open problems)\n\nThis problem is *unsolved* for periods 19, 38, and 41.\n\nSee\n[discussion](https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life )\nin Wikipedia article on Cellular Automaton Oscillators.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Oscillators_2",
    "sat": "def sat(init: List[List[int]], period=2):\n    \"\"\"\n    Find a pattern in Conway's Game of Life https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life that repeats\n    with a certain period https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life\n    \"\"\"\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": [
      "def sol(period=2):  # generate random patterns, slow solution\n    # def viz(live):\n    #     if not live:\n    #         return\n    #     a, b = min(z.real for z in live), min(z.imag for z in live)\n    #     live = {z - (a + b * 1j) for z in live}\n    #     m, n = int(max(z.real for z in live)) + 1, int(max(z.imag for z in live)) + 1\n    #     for x in range(m):\n    #         print(\"\".join(\"X\" if x + y * 1j in live else \",\" for y in range(n)))\n\n    import random\n    rand = random.Random(1)\n    # print(f\"Looking for {period}:\")\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    completes = [[x + y * 1j for x in range(n) for y in range(n)] for n in range(30)]\n\n    for _attempt in range(10 ** 5):\n        n = rand.randrange(3, 10)\n        m = rand.randrange(3, n * n)\n        live = set(rand.sample(completes[n], m))\n        if rand.randrange(2):\n            live.update([-z for z in live])\n        if rand.randrange(2):\n            live.update([z.conjugate() for z in live])\n        memory = {}\n        for step in range(period * 10):\n            key = sum((.123 - .99123j) ** z for z in live) * 10 ** 5\n            key = int(key.real), int(key.imag)\n            if key in memory:\n                if memory[key] == step - period:\n                    # print(period)\n                    # viz(live)\n                    return [[int(z.real), int(z.imag)] for z in live]\n                break\n            memory[key] = step\n            visible = {z + d for z in live for d in deltas}\n            live = {z for z in visible if sum(z + d in live for d in deltas) in range(3 - (z in live), 4)}\n\n    return None  # failed"
    ],
    "module": "conways_game_of_life",
    "notes": "Oscillators (including some unsolved, open problems)\n\nThis problem is *unsolved* for periods 19, 38, and 41.\n\nSee\n[discussion](https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life )\nin Wikipedia article on Cellular Automaton Oscillators.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Oscillators_3",
    "sat": "def sat(init: List[List[int]], period=4):\n    \"\"\"\n    Find a pattern in Conway's Game of Life https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life that repeats\n    with a certain period https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life\n    \"\"\"\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": [],
    "module": "conways_game_of_life",
    "notes": "Oscillators (including some unsolved, open problems)\n\nThis problem is *unsolved* for periods 19, 38, and 41.\n\nSee\n[discussion](https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life )\nin Wikipedia article on Cellular Automaton Oscillators.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Oscillators_4",
    "sat": "def sat(init: List[List[int]], period=5):\n    \"\"\"\n    Find a pattern in Conway's Game of Life https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life that repeats\n    with a certain period https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life\n    \"\"\"\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": [],
    "module": "conways_game_of_life",
    "notes": "Oscillators (including some unsolved, open problems)\n\nThis problem is *unsolved* for periods 19, 38, and 41.\n\nSee\n[discussion](https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life )\nin Wikipedia article on Cellular Automaton Oscillators.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Oscillators_5",
    "sat": "def sat(init: List[List[int]], period=6):\n    \"\"\"\n    Find a pattern in Conway's Game of Life https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life that repeats\n    with a certain period https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life\n    \"\"\"\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": [],
    "module": "conways_game_of_life",
    "notes": "Oscillators (including some unsolved, open problems)\n\nThis problem is *unsolved* for periods 19, 38, and 41.\n\nSee\n[discussion](https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life )\nin Wikipedia article on Cellular Automaton Oscillators.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Oscillators_6",
    "sat": "def sat(init: List[List[int]], period=7):\n    \"\"\"\n    Find a pattern in Conway's Game of Life https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life that repeats\n    with a certain period https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life\n    \"\"\"\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": [],
    "module": "conways_game_of_life",
    "notes": "Oscillators (including some unsolved, open problems)\n\nThis problem is *unsolved* for periods 19, 38, and 41.\n\nSee\n[discussion](https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life )\nin Wikipedia article on Cellular Automaton Oscillators.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Oscillators_7",
    "sat": "def sat(init: List[List[int]], period=8):\n    \"\"\"\n    Find a pattern in Conway's Game of Life https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life that repeats\n    with a certain period https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life\n    \"\"\"\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": [],
    "module": "conways_game_of_life",
    "notes": "Oscillators (including some unsolved, open problems)\n\nThis problem is *unsolved* for periods 19, 38, and 41.\n\nSee\n[discussion](https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life )\nin Wikipedia article on Cellular Automaton Oscillators.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Oscillators_8",
    "sat": "def sat(init: List[List[int]], period=9):\n    \"\"\"\n    Find a pattern in Conway's Game of Life https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life that repeats\n    with a certain period https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life\n    \"\"\"\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": [],
    "module": "conways_game_of_life",
    "notes": "Oscillators (including some unsolved, open problems)\n\nThis problem is *unsolved* for periods 19, 38, and 41.\n\nSee\n[discussion](https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life )\nin Wikipedia article on Cellular Automaton Oscillators.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Oscillators_9",
    "sat": "def sat(init: List[List[int]], period=10):\n    \"\"\"\n    Find a pattern in Conway's Game of Life https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life that repeats\n    with a certain period https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life\n    \"\"\"\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": [],
    "module": "conways_game_of_life",
    "notes": "Oscillators (including some unsolved, open problems)\n\nThis problem is *unsolved* for periods 19, 38, and 41.\n\nSee\n[discussion](https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life )\nin Wikipedia article on Cellular Automaton Oscillators.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "ReverseLifeStep_0",
    "sat": "def sat(position: List[List[int]], target=[[1, 3], [1, 4], [2, 5]]):\n    \"\"\"\n    Given a target pattern in Conway's Game of Life (see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life ),\n    specified by [x,y] coordinates of live cells, find a position that leads to that pattern on the next step.\n    \"\"\"\n    live = {x + y * 1j for x, y in position}  # complex numbers encode live cells\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    visible = {z + d for z in live for d in deltas}\n    next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n    return next_step == {x + y * 1j for x, y in target}",
    "sols": [
      "def sol(target=[[1, 3], [1, 4], [2, 5]]):  # fixed-temperature MC optimization\n    TEMP = 0.05\n    import random\n    rand = random.Random(0)  # set seed but don't interfere with other random uses\n    target = {x + y * 1j for x, y in target}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    def distance(live):\n        visible = {z + d for z in live for d in deltas}\n        next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        return len(next_step.symmetric_difference(target))\n\n    for step in range(10 ** 5):\n        if step % 10000 == 0:\n            pos = target.copy()  # start with the target position\n            cur_dist = distance(pos)\n\n        if cur_dist == 0:\n            return [[int(z.real), int(z.imag)] for z in pos]\n        z = rand.choice([z + d for z in pos.union(target) for d in deltas])\n        dist = distance(pos.symmetric_difference({z}))\n        if rand.random() <= TEMP ** (dist - cur_dist):\n            pos.symmetric_difference_update({z})\n            cur_dist = dist\n    print('Failed', len(target), step)"
    ],
    "module": "conways_game_of_life",
    "notes": "Unsolvable for \"Garden of Eden\" positions, but we only generate solvable examples",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "ReverseLifeStep_1",
    "sat": "def sat(position: List[List[int]], target: List[List[int]]=[]):\n    \"\"\"\n    Given a target pattern in Conway's Game of Life (see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life ),\n    specified by [x,y] coordinates of live cells, find a position that leads to that pattern on the next step.\n    \"\"\"\n    live = {x + y * 1j for x, y in position}  # complex numbers encode live cells\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    visible = {z + d for z in live for d in deltas}\n    next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n    return next_step == {x + y * 1j for x, y in target}",
    "sols": [
      "def sol(target=[]):  # fixed-temperature MC optimization\n    TEMP = 0.05\n    import random\n    rand = random.Random(0)  # set seed but don't interfere with other random uses\n    target = {x + y * 1j for x, y in target}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    def distance(live):\n        visible = {z + d for z in live for d in deltas}\n        next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        return len(next_step.symmetric_difference(target))\n\n    for step in range(10 ** 5):\n        if step % 10000 == 0:\n            pos = target.copy()  # start with the target position\n            cur_dist = distance(pos)\n\n        if cur_dist == 0:\n            return [[int(z.real), int(z.imag)] for z in pos]\n        z = rand.choice([z + d for z in pos.union(target) for d in deltas])\n        dist = distance(pos.symmetric_difference({z}))\n        if rand.random() <= TEMP ** (dist - cur_dist):\n            pos.symmetric_difference_update({z})\n            cur_dist = dist\n    print('Failed', len(target), step)"
    ],
    "module": "conways_game_of_life",
    "notes": "Unsolvable for \"Garden of Eden\" positions, but we only generate solvable examples",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "ReverseLifeStep_2",
    "sat": "def sat(position: List[List[int]], target=[[-1, -4], [-1, -3], [0, -5], [0, -4], [1, -3]]):\n    \"\"\"\n    Given a target pattern in Conway's Game of Life (see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life ),\n    specified by [x,y] coordinates of live cells, find a position that leads to that pattern on the next step.\n    \"\"\"\n    live = {x + y * 1j for x, y in position}  # complex numbers encode live cells\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    visible = {z + d for z in live for d in deltas}\n    next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n    return next_step == {x + y * 1j for x, y in target}",
    "sols": [
      "def sol(target=[[-1, -4], [-1, -3], [0, -5], [0, -4], [1, -3]]):  # fixed-temperature MC optimization\n    TEMP = 0.05\n    import random\n    rand = random.Random(0)  # set seed but don't interfere with other random uses\n    target = {x + y * 1j for x, y in target}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    def distance(live):\n        visible = {z + d for z in live for d in deltas}\n        next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        return len(next_step.symmetric_difference(target))\n\n    for step in range(10 ** 5):\n        if step % 10000 == 0:\n            pos = target.copy()  # start with the target position\n            cur_dist = distance(pos)\n\n        if cur_dist == 0:\n            return [[int(z.real), int(z.imag)] for z in pos]\n        z = rand.choice([z + d for z in pos.union(target) for d in deltas])\n        dist = distance(pos.symmetric_difference({z}))\n        if rand.random() <= TEMP ** (dist - cur_dist):\n            pos.symmetric_difference_update({z})\n            cur_dist = dist\n    print('Failed', len(target), step)"
    ],
    "module": "conways_game_of_life",
    "notes": "Unsolvable for \"Garden of Eden\" positions, but we only generate solvable examples",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "ReverseLifeStep_3",
    "sat": "def sat(position: List[List[int]], target=[[3, 3]]):\n    \"\"\"\n    Given a target pattern in Conway's Game of Life (see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life ),\n    specified by [x,y] coordinates of live cells, find a position that leads to that pattern on the next step.\n    \"\"\"\n    live = {x + y * 1j for x, y in position}  # complex numbers encode live cells\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    visible = {z + d for z in live for d in deltas}\n    next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n    return next_step == {x + y * 1j for x, y in target}",
    "sols": [
      "def sol(target=[[3, 3]]):  # fixed-temperature MC optimization\n    TEMP = 0.05\n    import random\n    rand = random.Random(0)  # set seed but don't interfere with other random uses\n    target = {x + y * 1j for x, y in target}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    def distance(live):\n        visible = {z + d for z in live for d in deltas}\n        next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        return len(next_step.symmetric_difference(target))\n\n    for step in range(10 ** 5):\n        if step % 10000 == 0:\n            pos = target.copy()  # start with the target position\n            cur_dist = distance(pos)\n\n        if cur_dist == 0:\n            return [[int(z.real), int(z.imag)] for z in pos]\n        z = rand.choice([z + d for z in pos.union(target) for d in deltas])\n        dist = distance(pos.symmetric_difference({z}))\n        if rand.random() <= TEMP ** (dist - cur_dist):\n            pos.symmetric_difference_update({z})\n            cur_dist = dist\n    print('Failed', len(target), step)"
    ],
    "module": "conways_game_of_life",
    "notes": "Unsolvable for \"Garden of Eden\" positions, but we only generate solvable examples",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "ReverseLifeStep_4",
    "sat": "def sat(position: List[List[int]], target=[[1, -4]]):\n    \"\"\"\n    Given a target pattern in Conway's Game of Life (see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life ),\n    specified by [x,y] coordinates of live cells, find a position that leads to that pattern on the next step.\n    \"\"\"\n    live = {x + y * 1j for x, y in position}  # complex numbers encode live cells\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    visible = {z + d for z in live for d in deltas}\n    next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n    return next_step == {x + y * 1j for x, y in target}",
    "sols": [
      "def sol(target=[[1, -4]]):  # fixed-temperature MC optimization\n    TEMP = 0.05\n    import random\n    rand = random.Random(0)  # set seed but don't interfere with other random uses\n    target = {x + y * 1j for x, y in target}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    def distance(live):\n        visible = {z + d for z in live for d in deltas}\n        next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        return len(next_step.symmetric_difference(target))\n\n    for step in range(10 ** 5):\n        if step % 10000 == 0:\n            pos = target.copy()  # start with the target position\n            cur_dist = distance(pos)\n\n        if cur_dist == 0:\n            return [[int(z.real), int(z.imag)] for z in pos]\n        z = rand.choice([z + d for z in pos.union(target) for d in deltas])\n        dist = distance(pos.symmetric_difference({z}))\n        if rand.random() <= TEMP ** (dist - cur_dist):\n            pos.symmetric_difference_update({z})\n            cur_dist = dist\n    print('Failed', len(target), step)"
    ],
    "module": "conways_game_of_life",
    "notes": "Unsolvable for \"Garden of Eden\" positions, but we only generate solvable examples",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "ReverseLifeStep_5",
    "sat": "def sat(position: List[List[int]], target=[[0, 3], [0, 4]]):\n    \"\"\"\n    Given a target pattern in Conway's Game of Life (see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life ),\n    specified by [x,y] coordinates of live cells, find a position that leads to that pattern on the next step.\n    \"\"\"\n    live = {x + y * 1j for x, y in position}  # complex numbers encode live cells\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    visible = {z + d for z in live for d in deltas}\n    next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n    return next_step == {x + y * 1j for x, y in target}",
    "sols": [
      "def sol(target=[[0, 3], [0, 4]]):  # fixed-temperature MC optimization\n    TEMP = 0.05\n    import random\n    rand = random.Random(0)  # set seed but don't interfere with other random uses\n    target = {x + y * 1j for x, y in target}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    def distance(live):\n        visible = {z + d for z in live for d in deltas}\n        next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        return len(next_step.symmetric_difference(target))\n\n    for step in range(10 ** 5):\n        if step % 10000 == 0:\n            pos = target.copy()  # start with the target position\n            cur_dist = distance(pos)\n\n        if cur_dist == 0:\n            return [[int(z.real), int(z.imag)] for z in pos]\n        z = rand.choice([z + d for z in pos.union(target) for d in deltas])\n        dist = distance(pos.symmetric_difference({z}))\n        if rand.random() <= TEMP ** (dist - cur_dist):\n            pos.symmetric_difference_update({z})\n            cur_dist = dist\n    print('Failed', len(target), step)"
    ],
    "module": "conways_game_of_life",
    "notes": "Unsolvable for \"Garden of Eden\" positions, but we only generate solvable examples",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "ReverseLifeStep_6",
    "sat": "def sat(position: List[List[int]], target=[[-4, -3], [-3, -3], [-2, 2]]):\n    \"\"\"\n    Given a target pattern in Conway's Game of Life (see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life ),\n    specified by [x,y] coordinates of live cells, find a position that leads to that pattern on the next step.\n    \"\"\"\n    live = {x + y * 1j for x, y in position}  # complex numbers encode live cells\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    visible = {z + d for z in live for d in deltas}\n    next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n    return next_step == {x + y * 1j for x, y in target}",
    "sols": [
      "def sol(target=[[-4, -3], [-3, -3], [-2, 2]]):  # fixed-temperature MC optimization\n    TEMP = 0.05\n    import random\n    rand = random.Random(0)  # set seed but don't interfere with other random uses\n    target = {x + y * 1j for x, y in target}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    def distance(live):\n        visible = {z + d for z in live for d in deltas}\n        next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        return len(next_step.symmetric_difference(target))\n\n    for step in range(10 ** 5):\n        if step % 10000 == 0:\n            pos = target.copy()  # start with the target position\n            cur_dist = distance(pos)\n\n        if cur_dist == 0:\n            return [[int(z.real), int(z.imag)] for z in pos]\n        z = rand.choice([z + d for z in pos.union(target) for d in deltas])\n        dist = distance(pos.symmetric_difference({z}))\n        if rand.random() <= TEMP ** (dist - cur_dist):\n            pos.symmetric_difference_update({z})\n            cur_dist = dist\n    print('Failed', len(target), step)"
    ],
    "module": "conways_game_of_life",
    "notes": "Unsolvable for \"Garden of Eden\" positions, but we only generate solvable examples",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "ReverseLifeStep_7",
    "sat": "def sat(position: List[List[int]], target=[[-4, 3], [-4, 4]]):\n    \"\"\"\n    Given a target pattern in Conway's Game of Life (see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life ),\n    specified by [x,y] coordinates of live cells, find a position that leads to that pattern on the next step.\n    \"\"\"\n    live = {x + y * 1j for x, y in position}  # complex numbers encode live cells\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    visible = {z + d for z in live for d in deltas}\n    next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n    return next_step == {x + y * 1j for x, y in target}",
    "sols": [
      "def sol(target=[[-4, 3], [-4, 4]]):  # fixed-temperature MC optimization\n    TEMP = 0.05\n    import random\n    rand = random.Random(0)  # set seed but don't interfere with other random uses\n    target = {x + y * 1j for x, y in target}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    def distance(live):\n        visible = {z + d for z in live for d in deltas}\n        next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        return len(next_step.symmetric_difference(target))\n\n    for step in range(10 ** 5):\n        if step % 10000 == 0:\n            pos = target.copy()  # start with the target position\n            cur_dist = distance(pos)\n\n        if cur_dist == 0:\n            return [[int(z.real), int(z.imag)] for z in pos]\n        z = rand.choice([z + d for z in pos.union(target) for d in deltas])\n        dist = distance(pos.symmetric_difference({z}))\n        if rand.random() <= TEMP ** (dist - cur_dist):\n            pos.symmetric_difference_update({z})\n            cur_dist = dist\n    print('Failed', len(target), step)"
    ],
    "module": "conways_game_of_life",
    "notes": "Unsolvable for \"Garden of Eden\" positions, but we only generate solvable examples",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "ReverseLifeStep_8",
    "sat": "def sat(position: List[List[int]], target=[[2, -5], [2, -4], [2, 1]]):\n    \"\"\"\n    Given a target pattern in Conway's Game of Life (see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life ),\n    specified by [x,y] coordinates of live cells, find a position that leads to that pattern on the next step.\n    \"\"\"\n    live = {x + y * 1j for x, y in position}  # complex numbers encode live cells\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    visible = {z + d for z in live for d in deltas}\n    next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n    return next_step == {x + y * 1j for x, y in target}",
    "sols": [
      "def sol(target=[[2, -5], [2, -4], [2, 1]]):  # fixed-temperature MC optimization\n    TEMP = 0.05\n    import random\n    rand = random.Random(0)  # set seed but don't interfere with other random uses\n    target = {x + y * 1j for x, y in target}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    def distance(live):\n        visible = {z + d for z in live for d in deltas}\n        next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        return len(next_step.symmetric_difference(target))\n\n    for step in range(10 ** 5):\n        if step % 10000 == 0:\n            pos = target.copy()  # start with the target position\n            cur_dist = distance(pos)\n\n        if cur_dist == 0:\n            return [[int(z.real), int(z.imag)] for z in pos]\n        z = rand.choice([z + d for z in pos.union(target) for d in deltas])\n        dist = distance(pos.symmetric_difference({z}))\n        if rand.random() <= TEMP ** (dist - cur_dist):\n            pos.symmetric_difference_update({z})\n            cur_dist = dist\n    print('Failed', len(target), step)"
    ],
    "module": "conways_game_of_life",
    "notes": "Unsolvable for \"Garden of Eden\" positions, but we only generate solvable examples",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "ReverseLifeStep_9",
    "sat": "def sat(position: List[List[int]], target=[[-4, 0], [-3, 0]]):\n    \"\"\"\n    Given a target pattern in Conway's Game of Life (see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life ),\n    specified by [x,y] coordinates of live cells, find a position that leads to that pattern on the next step.\n    \"\"\"\n    live = {x + y * 1j for x, y in position}  # complex numbers encode live cells\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    visible = {z + d for z in live for d in deltas}\n    next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n    return next_step == {x + y * 1j for x, y in target}",
    "sols": [
      "def sol(target=[[-4, 0], [-3, 0]]):  # fixed-temperature MC optimization\n    TEMP = 0.05\n    import random\n    rand = random.Random(0)  # set seed but don't interfere with other random uses\n    target = {x + y * 1j for x, y in target}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    def distance(live):\n        visible = {z + d for z in live for d in deltas}\n        next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        return len(next_step.symmetric_difference(target))\n\n    for step in range(10 ** 5):\n        if step % 10000 == 0:\n            pos = target.copy()  # start with the target position\n            cur_dist = distance(pos)\n\n        if cur_dist == 0:\n            return [[int(z.real), int(z.imag)] for z in pos]\n        z = rand.choice([z + d for z in pos.union(target) for d in deltas])\n        dist = distance(pos.symmetric_difference({z}))\n        if rand.random() <= TEMP ** (dist - cur_dist):\n            pos.symmetric_difference_update({z})\n            cur_dist = dist\n    print('Failed', len(target), step)"
    ],
    "module": "conways_game_of_life",
    "notes": "Unsolvable for \"Garden of Eden\" positions, but we only generate solvable examples",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Spaceship_0",
    "sat": "def sat(init: List[List[int]], period=4):\n    \"\"\"\n    Find a \"spaceship\" (see https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29 ) in Conway's\n    Game of Life see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life with a certain period\n    \"\"\"\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": [],
    "module": "conways_game_of_life",
    "notes": "Spaceship (including *unsolved*, open problems)\n\nFind a [spaceship](https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29) in\n[Conway's Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)\nwith a certain period.\n\nThis is an *unsolved* problem for periods 33, 34.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Spaceship_1",
    "sat": "def sat(init: List[List[int]], period=2):\n    \"\"\"\n    Find a \"spaceship\" (see https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29 ) in Conway's\n    Game of Life see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life with a certain period\n    \"\"\"\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": [],
    "module": "conways_game_of_life",
    "notes": "Spaceship (including *unsolved*, open problems)\n\nFind a [spaceship](https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29) in\n[Conway's Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)\nwith a certain period.\n\nThis is an *unsolved* problem for periods 33, 34.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Spaceship_2",
    "sat": "def sat(init: List[List[int]], period=3):\n    \"\"\"\n    Find a \"spaceship\" (see https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29 ) in Conway's\n    Game of Life see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life with a certain period\n    \"\"\"\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": [],
    "module": "conways_game_of_life",
    "notes": "Spaceship (including *unsolved*, open problems)\n\nFind a [spaceship](https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29) in\n[Conway's Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)\nwith a certain period.\n\nThis is an *unsolved* problem for periods 33, 34.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Spaceship_3",
    "sat": "def sat(init: List[List[int]], period=5):\n    \"\"\"\n    Find a \"spaceship\" (see https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29 ) in Conway's\n    Game of Life see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life with a certain period\n    \"\"\"\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": [],
    "module": "conways_game_of_life",
    "notes": "Spaceship (including *unsolved*, open problems)\n\nFind a [spaceship](https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29) in\n[Conway's Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)\nwith a certain period.\n\nThis is an *unsolved* problem for periods 33, 34.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Spaceship_4",
    "sat": "def sat(init: List[List[int]], period=6):\n    \"\"\"\n    Find a \"spaceship\" (see https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29 ) in Conway's\n    Game of Life see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life with a certain period\n    \"\"\"\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": [],
    "module": "conways_game_of_life",
    "notes": "Spaceship (including *unsolved*, open problems)\n\nFind a [spaceship](https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29) in\n[Conway's Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)\nwith a certain period.\n\nThis is an *unsolved* problem for periods 33, 34.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Spaceship_5",
    "sat": "def sat(init: List[List[int]], period=7):\n    \"\"\"\n    Find a \"spaceship\" (see https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29 ) in Conway's\n    Game of Life see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life with a certain period\n    \"\"\"\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": [],
    "module": "conways_game_of_life",
    "notes": "Spaceship (including *unsolved*, open problems)\n\nFind a [spaceship](https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29) in\n[Conway's Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)\nwith a certain period.\n\nThis is an *unsolved* problem for periods 33, 34.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Spaceship_6",
    "sat": "def sat(init: List[List[int]], period=8):\n    \"\"\"\n    Find a \"spaceship\" (see https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29 ) in Conway's\n    Game of Life see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life with a certain period\n    \"\"\"\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": [],
    "module": "conways_game_of_life",
    "notes": "Spaceship (including *unsolved*, open problems)\n\nFind a [spaceship](https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29) in\n[Conway's Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)\nwith a certain period.\n\nThis is an *unsolved* problem for periods 33, 34.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Spaceship_7",
    "sat": "def sat(init: List[List[int]], period=9):\n    \"\"\"\n    Find a \"spaceship\" (see https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29 ) in Conway's\n    Game of Life see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life with a certain period\n    \"\"\"\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": [],
    "module": "conways_game_of_life",
    "notes": "Spaceship (including *unsolved*, open problems)\n\nFind a [spaceship](https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29) in\n[Conway's Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)\nwith a certain period.\n\nThis is an *unsolved* problem for periods 33, 34.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Spaceship_8",
    "sat": "def sat(init: List[List[int]], period=10):\n    \"\"\"\n    Find a \"spaceship\" (see https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29 ) in Conway's\n    Game of Life see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life with a certain period\n    \"\"\"\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": [],
    "module": "conways_game_of_life",
    "notes": "Spaceship (including *unsolved*, open problems)\n\nFind a [spaceship](https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29) in\n[Conway's Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)\nwith a certain period.\n\nThis is an *unsolved* problem for periods 33, 34.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Spaceship_9",
    "sat": "def sat(init: List[List[int]], period=11):\n    \"\"\"\n    Find a \"spaceship\" (see https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29 ) in Conway's\n    Game of Life see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life with a certain period\n    \"\"\"\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": [],
    "module": "conways_game_of_life",
    "notes": "Spaceship (including *unsolved*, open problems)\n\nFind a [spaceship](https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29) in\n[Conway's Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)\nwith a certain period.\n\nThis is an *unsolved* problem for periods 33, 34.",
    "taint_date": "2021-4-26",
    "weight": 0.03333333333333333
  },
  {
    "name": "Nim_0",
    "sat": "def sat(cert: List[List[int]], heaps=[5, 9]):\n    \"\"\"\n    Compute optimal play in Nim, a two-player game involving a number of heaps of objects. Players alternate,\n    in each turn removing one or more objects from a single non-empty heap. The player who takes the last object\n    wins. The initial board state is represented by heaps, a list of numbers of objects in each heap.\n    The optimal play is certified by a list of \"winning leaves\" which are themselves lists of heap sizes\n    that, with optimal play, are winning if you leave your opponent with those numbers of objects.\n    \"\"\"\n\n    good_leaves = {tuple(h) for h in cert}  # for efficiency, we keep track of h as a tuple of n non-negative ints\n    cache = {}\n\n    def is_good_leave(h):\n        if h in cache:\n            return cache[h]\n        next_states = [(*h[:i], k, *h[i + 1:]) for i in range(len(h)) for k in range(h[i])]\n        conjecture = (h in good_leaves)\n        if conjecture:  # check that it is a good leave\n            assert not any(is_good_leave(s) for s in next_states)\n        else:  # check that it is a bad leave, only need to check one move\n            assert is_good_leave(next(s for s in next_states if s in good_leaves))\n        cache[h] = conjecture\n        return conjecture\n\n    init_leave = tuple(heaps)\n    return is_good_leave(init_leave) == (init_leave in good_leaves)",
    "sols": [
      "def sol(heaps=[5, 9]):\n    import itertools\n\n    def val(h):  # return True if h is a good state to leave things in\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    return [list(h) for h in itertools.product(*[range(i + 1) for i in heaps]) if val(h)]"
    ],
    "module": "games",
    "notes": "Compute optimal play for the classic two-player game [Nim](https://en.wikipedia.org/wiki/Nim)\n\nNim has an elegant theory for optimal play based on the xor of the bits in the heaps.\n\nInstead of writing a program that plays the game interactively (since interaction is not allowed), we require\nthem to determine the winning states.",
    "taint_date": "2021-4-26",
    "weight": 0.007142857142857143
  },
  {
    "name": "Nim_1",
    "sat": "def sat(cert: List[List[int]], heaps=[2, 7, 6, 0, 4, 7]):\n    \"\"\"\n    Compute optimal play in Nim, a two-player game involving a number of heaps of objects. Players alternate,\n    in each turn removing one or more objects from a single non-empty heap. The player who takes the last object\n    wins. The initial board state is represented by heaps, a list of numbers of objects in each heap.\n    The optimal play is certified by a list of \"winning leaves\" which are themselves lists of heap sizes\n    that, with optimal play, are winning if you leave your opponent with those numbers of objects.\n    \"\"\"\n\n    good_leaves = {tuple(h) for h in cert}  # for efficiency, we keep track of h as a tuple of n non-negative ints\n    cache = {}\n\n    def is_good_leave(h):\n        if h in cache:\n            return cache[h]\n        next_states = [(*h[:i], k, *h[i + 1:]) for i in range(len(h)) for k in range(h[i])]\n        conjecture = (h in good_leaves)\n        if conjecture:  # check that it is a good leave\n            assert not any(is_good_leave(s) for s in next_states)\n        else:  # check that it is a bad leave, only need to check one move\n            assert is_good_leave(next(s for s in next_states if s in good_leaves))\n        cache[h] = conjecture\n        return conjecture\n\n    init_leave = tuple(heaps)\n    return is_good_leave(init_leave) == (init_leave in good_leaves)",
    "sols": [
      "def sol(heaps=[2, 7, 6, 0, 4, 7]):\n    import itertools\n\n    def val(h):  # return True if h is a good state to leave things in\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    return [list(h) for h in itertools.product(*[range(i + 1) for i in heaps]) if val(h)]"
    ],
    "module": "games",
    "notes": "Compute optimal play for the classic two-player game [Nim](https://en.wikipedia.org/wiki/Nim)\n\nNim has an elegant theory for optimal play based on the xor of the bits in the heaps.\n\nInstead of writing a program that plays the game interactively (since interaction is not allowed), we require\nthem to determine the winning states.",
    "taint_date": "2021-4-26",
    "weight": 0.007142857142857143
  },
  {
    "name": "Nim_2",
    "sat": "def sat(cert: List[List[int]], heaps=[4, 1, 8, 0, 5, 9, 2, 0]):\n    \"\"\"\n    Compute optimal play in Nim, a two-player game involving a number of heaps of objects. Players alternate,\n    in each turn removing one or more objects from a single non-empty heap. The player who takes the last object\n    wins. The initial board state is represented by heaps, a list of numbers of objects in each heap.\n    The optimal play is certified by a list of \"winning leaves\" which are themselves lists of heap sizes\n    that, with optimal play, are winning if you leave your opponent with those numbers of objects.\n    \"\"\"\n\n    good_leaves = {tuple(h) for h in cert}  # for efficiency, we keep track of h as a tuple of n non-negative ints\n    cache = {}\n\n    def is_good_leave(h):\n        if h in cache:\n            return cache[h]\n        next_states = [(*h[:i], k, *h[i + 1:]) for i in range(len(h)) for k in range(h[i])]\n        conjecture = (h in good_leaves)\n        if conjecture:  # check that it is a good leave\n            assert not any(is_good_leave(s) for s in next_states)\n        else:  # check that it is a bad leave, only need to check one move\n            assert is_good_leave(next(s for s in next_states if s in good_leaves))\n        cache[h] = conjecture\n        return conjecture\n\n    init_leave = tuple(heaps)\n    return is_good_leave(init_leave) == (init_leave in good_leaves)",
    "sols": [
      "def sol(heaps=[4, 1, 8, 0, 5, 9, 2, 0]):\n    import itertools\n\n    def val(h):  # return True if h is a good state to leave things in\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    return [list(h) for h in itertools.product(*[range(i + 1) for i in heaps]) if val(h)]"
    ],
    "module": "games",
    "notes": "Compute optimal play for the classic two-player game [Nim](https://en.wikipedia.org/wiki/Nim)\n\nNim has an elegant theory for optimal play based on the xor of the bits in the heaps.\n\nInstead of writing a program that plays the game interactively (since interaction is not allowed), we require\nthem to determine the winning states.",
    "taint_date": "2021-4-26",
    "weight": 0.007142857142857143
  },
  {
    "name": "Nim_3",
    "sat": "def sat(cert: List[List[int]], heaps: List[int]=[]):\n    \"\"\"\n    Compute optimal play in Nim, a two-player game involving a number of heaps of objects. Players alternate,\n    in each turn removing one or more objects from a single non-empty heap. The player who takes the last object\n    wins. The initial board state is represented by heaps, a list of numbers of objects in each heap.\n    The optimal play is certified by a list of \"winning leaves\" which are themselves lists of heap sizes\n    that, with optimal play, are winning if you leave your opponent with those numbers of objects.\n    \"\"\"\n\n    good_leaves = {tuple(h) for h in cert}  # for efficiency, we keep track of h as a tuple of n non-negative ints\n    cache = {}\n\n    def is_good_leave(h):\n        if h in cache:\n            return cache[h]\n        next_states = [(*h[:i], k, *h[i + 1:]) for i in range(len(h)) for k in range(h[i])]\n        conjecture = (h in good_leaves)\n        if conjecture:  # check that it is a good leave\n            assert not any(is_good_leave(s) for s in next_states)\n        else:  # check that it is a bad leave, only need to check one move\n            assert is_good_leave(next(s for s in next_states if s in good_leaves))\n        cache[h] = conjecture\n        return conjecture\n\n    init_leave = tuple(heaps)\n    return is_good_leave(init_leave) == (init_leave in good_leaves)",
    "sols": [
      "def sol(heaps=[]):\n    import itertools\n\n    def val(h):  # return True if h is a good state to leave things in\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    return [list(h) for h in itertools.product(*[range(i + 1) for i in heaps]) if val(h)]"
    ],
    "module": "games",
    "notes": "Compute optimal play for the classic two-player game [Nim](https://en.wikipedia.org/wiki/Nim)\n\nNim has an elegant theory for optimal play based on the xor of the bits in the heaps.\n\nInstead of writing a program that plays the game interactively (since interaction is not allowed), we require\nthem to determine the winning states.",
    "taint_date": "2021-4-26",
    "weight": 0.007142857142857143
  },
  {
    "name": "Nim_4",
    "sat": "def sat(cert: List[List[int]], heaps=[2, 5, 3, 7, 0]):\n    \"\"\"\n    Compute optimal play in Nim, a two-player game involving a number of heaps of objects. Players alternate,\n    in each turn removing one or more objects from a single non-empty heap. The player who takes the last object\n    wins. The initial board state is represented by heaps, a list of numbers of objects in each heap.\n    The optimal play is certified by a list of \"winning leaves\" which are themselves lists of heap sizes\n    that, with optimal play, are winning if you leave your opponent with those numbers of objects.\n    \"\"\"\n\n    good_leaves = {tuple(h) for h in cert}  # for efficiency, we keep track of h as a tuple of n non-negative ints\n    cache = {}\n\n    def is_good_leave(h):\n        if h in cache:\n            return cache[h]\n        next_states = [(*h[:i], k, *h[i + 1:]) for i in range(len(h)) for k in range(h[i])]\n        conjecture = (h in good_leaves)\n        if conjecture:  # check that it is a good leave\n            assert not any(is_good_leave(s) for s in next_states)\n        else:  # check that it is a bad leave, only need to check one move\n            assert is_good_leave(next(s for s in next_states if s in good_leaves))\n        cache[h] = conjecture\n        return conjecture\n\n    init_leave = tuple(heaps)\n    return is_good_leave(init_leave) == (init_leave in good_leaves)",
    "sols": [
      "def sol(heaps=[2, 5, 3, 7, 0]):\n    import itertools\n\n    def val(h):  # return True if h is a good state to leave things in\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    return [list(h) for h in itertools.product(*[range(i + 1) for i in heaps]) if val(h)]"
    ],
    "module": "games",
    "notes": "Compute optimal play for the classic two-player game [Nim](https://en.wikipedia.org/wiki/Nim)\n\nNim has an elegant theory for optimal play based on the xor of the bits in the heaps.\n\nInstead of writing a program that plays the game interactively (since interaction is not allowed), we require\nthem to determine the winning states.",
    "taint_date": "2021-4-26",
    "weight": 0.007142857142857143
  },
  {
    "name": "Nim_5",
    "sat": "def sat(cert: List[List[int]], heaps=[3, 3, 2, 2, 3, 8]):\n    \"\"\"\n    Compute optimal play in Nim, a two-player game involving a number of heaps of objects. Players alternate,\n    in each turn removing one or more objects from a single non-empty heap. The player who takes the last object\n    wins. The initial board state is represented by heaps, a list of numbers of objects in each heap.\n    The optimal play is certified by a list of \"winning leaves\" which are themselves lists of heap sizes\n    that, with optimal play, are winning if you leave your opponent with those numbers of objects.\n    \"\"\"\n\n    good_leaves = {tuple(h) for h in cert}  # for efficiency, we keep track of h as a tuple of n non-negative ints\n    cache = {}\n\n    def is_good_leave(h):\n        if h in cache:\n            return cache[h]\n        next_states = [(*h[:i], k, *h[i + 1:]) for i in range(len(h)) for k in range(h[i])]\n        conjecture = (h in good_leaves)\n        if conjecture:  # check that it is a good leave\n            assert not any(is_good_leave(s) for s in next_states)\n        else:  # check that it is a bad leave, only need to check one move\n            assert is_good_leave(next(s for s in next_states if s in good_leaves))\n        cache[h] = conjecture\n        return conjecture\n\n    init_leave = tuple(heaps)\n    return is_good_leave(init_leave) == (init_leave in good_leaves)",
    "sols": [
      "def sol(heaps=[3, 3, 2, 2, 3, 8]):\n    import itertools\n\n    def val(h):  # return True if h is a good state to leave things in\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    return [list(h) for h in itertools.product(*[range(i + 1) for i in heaps]) if val(h)]"
    ],
    "module": "games",
    "notes": "Compute optimal play for the classic two-player game [Nim](https://en.wikipedia.org/wiki/Nim)\n\nNim has an elegant theory for optimal play based on the xor of the bits in the heaps.\n\nInstead of writing a program that plays the game interactively (since interaction is not allowed), we require\nthem to determine the winning states.",
    "taint_date": "2021-4-26",
    "weight": 0.007142857142857143
  },
  {
    "name": "Nim_6",
    "sat": "def sat(cert: List[List[int]], heaps=[5, 8, 3, 0]):\n    \"\"\"\n    Compute optimal play in Nim, a two-player game involving a number of heaps of objects. Players alternate,\n    in each turn removing one or more objects from a single non-empty heap. The player who takes the last object\n    wins. The initial board state is represented by heaps, a list of numbers of objects in each heap.\n    The optimal play is certified by a list of \"winning leaves\" which are themselves lists of heap sizes\n    that, with optimal play, are winning if you leave your opponent with those numbers of objects.\n    \"\"\"\n\n    good_leaves = {tuple(h) for h in cert}  # for efficiency, we keep track of h as a tuple of n non-negative ints\n    cache = {}\n\n    def is_good_leave(h):\n        if h in cache:\n            return cache[h]\n        next_states = [(*h[:i], k, *h[i + 1:]) for i in range(len(h)) for k in range(h[i])]\n        conjecture = (h in good_leaves)\n        if conjecture:  # check that it is a good leave\n            assert not any(is_good_leave(s) for s in next_states)\n        else:  # check that it is a bad leave, only need to check one move\n            assert is_good_leave(next(s for s in next_states if s in good_leaves))\n        cache[h] = conjecture\n        return conjecture\n\n    init_leave = tuple(heaps)\n    return is_good_leave(init_leave) == (init_leave in good_leaves)",
    "sols": [
      "def sol(heaps=[5, 8, 3, 0]):\n    import itertools\n\n    def val(h):  # return True if h is a good state to leave things in\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    return [list(h) for h in itertools.product(*[range(i + 1) for i in heaps]) if val(h)]"
    ],
    "module": "games",
    "notes": "Compute optimal play for the classic two-player game [Nim](https://en.wikipedia.org/wiki/Nim)\n\nNim has an elegant theory for optimal play based on the xor of the bits in the heaps.\n\nInstead of writing a program that plays the game interactively (since interaction is not allowed), we require\nthem to determine the winning states.",
    "taint_date": "2021-4-26",
    "weight": 0.007142857142857143
  },
  {
    "name": "Nim_7",
    "sat": "def sat(cert: List[List[int]], heaps=[4, 9, 3]):\n    \"\"\"\n    Compute optimal play in Nim, a two-player game involving a number of heaps of objects. Players alternate,\n    in each turn removing one or more objects from a single non-empty heap. The player who takes the last object\n    wins. The initial board state is represented by heaps, a list of numbers of objects in each heap.\n    The optimal play is certified by a list of \"winning leaves\" which are themselves lists of heap sizes\n    that, with optimal play, are winning if you leave your opponent with those numbers of objects.\n    \"\"\"\n\n    good_leaves = {tuple(h) for h in cert}  # for efficiency, we keep track of h as a tuple of n non-negative ints\n    cache = {}\n\n    def is_good_leave(h):\n        if h in cache:\n            return cache[h]\n        next_states = [(*h[:i], k, *h[i + 1:]) for i in range(len(h)) for k in range(h[i])]\n        conjecture = (h in good_leaves)\n        if conjecture:  # check that it is a good leave\n            assert not any(is_good_leave(s) for s in next_states)\n        else:  # check that it is a bad leave, only need to check one move\n            assert is_good_leave(next(s for s in next_states if s in good_leaves))\n        cache[h] = conjecture\n        return conjecture\n\n    init_leave = tuple(heaps)\n    return is_good_leave(init_leave) == (init_leave in good_leaves)",
    "sols": [
      "def sol(heaps=[4, 9, 3]):\n    import itertools\n\n    def val(h):  # return True if h is a good state to leave things in\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    return [list(h) for h in itertools.product(*[range(i + 1) for i in heaps]) if val(h)]"
    ],
    "module": "games",
    "notes": "Compute optimal play for the classic two-player game [Nim](https://en.wikipedia.org/wiki/Nim)\n\nNim has an elegant theory for optimal play based on the xor of the bits in the heaps.\n\nInstead of writing a program that plays the game interactively (since interaction is not allowed), we require\nthem to determine the winning states.",
    "taint_date": "2021-4-26",
    "weight": 0.007142857142857143
  },
  {
    "name": "Nim_8",
    "sat": "def sat(cert: List[List[int]], heaps=[3]):\n    \"\"\"\n    Compute optimal play in Nim, a two-player game involving a number of heaps of objects. Players alternate,\n    in each turn removing one or more objects from a single non-empty heap. The player who takes the last object\n    wins. The initial board state is represented by heaps, a list of numbers of objects in each heap.\n    The optimal play is certified by a list of \"winning leaves\" which are themselves lists of heap sizes\n    that, with optimal play, are winning if you leave your opponent with those numbers of objects.\n    \"\"\"\n\n    good_leaves = {tuple(h) for h in cert}  # for efficiency, we keep track of h as a tuple of n non-negative ints\n    cache = {}\n\n    def is_good_leave(h):\n        if h in cache:\n            return cache[h]\n        next_states = [(*h[:i], k, *h[i + 1:]) for i in range(len(h)) for k in range(h[i])]\n        conjecture = (h in good_leaves)\n        if conjecture:  # check that it is a good leave\n            assert not any(is_good_leave(s) for s in next_states)\n        else:  # check that it is a bad leave, only need to check one move\n            assert is_good_leave(next(s for s in next_states if s in good_leaves))\n        cache[h] = conjecture\n        return conjecture\n\n    init_leave = tuple(heaps)\n    return is_good_leave(init_leave) == (init_leave in good_leaves)",
    "sols": [
      "def sol(heaps=[3]):\n    import itertools\n\n    def val(h):  # return True if h is a good state to leave things in\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    return [list(h) for h in itertools.product(*[range(i + 1) for i in heaps]) if val(h)]"
    ],
    "module": "games",
    "notes": "Compute optimal play for the classic two-player game [Nim](https://en.wikipedia.org/wiki/Nim)\n\nNim has an elegant theory for optimal play based on the xor of the bits in the heaps.\n\nInstead of writing a program that plays the game interactively (since interaction is not allowed), we require\nthem to determine the winning states.",
    "taint_date": "2021-4-26",
    "weight": 0.007142857142857143
  },
  {
    "name": "Nim_9",
    "sat": "def sat(cert: List[List[int]], heaps=[9, 7]):\n    \"\"\"\n    Compute optimal play in Nim, a two-player game involving a number of heaps of objects. Players alternate,\n    in each turn removing one or more objects from a single non-empty heap. The player who takes the last object\n    wins. The initial board state is represented by heaps, a list of numbers of objects in each heap.\n    The optimal play is certified by a list of \"winning leaves\" which are themselves lists of heap sizes\n    that, with optimal play, are winning if you leave your opponent with those numbers of objects.\n    \"\"\"\n\n    good_leaves = {tuple(h) for h in cert}  # for efficiency, we keep track of h as a tuple of n non-negative ints\n    cache = {}\n\n    def is_good_leave(h):\n        if h in cache:\n            return cache[h]\n        next_states = [(*h[:i], k, *h[i + 1:]) for i in range(len(h)) for k in range(h[i])]\n        conjecture = (h in good_leaves)\n        if conjecture:  # check that it is a good leave\n            assert not any(is_good_leave(s) for s in next_states)\n        else:  # check that it is a bad leave, only need to check one move\n            assert is_good_leave(next(s for s in next_states if s in good_leaves))\n        cache[h] = conjecture\n        return conjecture\n\n    init_leave = tuple(heaps)\n    return is_good_leave(init_leave) == (init_leave in good_leaves)",
    "sols": [
      "def sol(heaps=[9, 7]):\n    import itertools\n\n    def val(h):  # return True if h is a good state to leave things in\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    return [list(h) for h in itertools.product(*[range(i + 1) for i in heaps]) if val(h)]"
    ],
    "module": "games",
    "notes": "Compute optimal play for the classic two-player game [Nim](https://en.wikipedia.org/wiki/Nim)\n\nNim has an elegant theory for optimal play based on the xor of the bits in the heaps.\n\nInstead of writing a program that plays the game interactively (since interaction is not allowed), we require\nthem to determine the winning states.",
    "taint_date": "2021-4-26",
    "weight": 0.007142857142857143
  },
  {
    "name": "Mastermind_0",
    "sat": "def sat(transcripts: List[str], max_moves=10):\n    \"\"\"\n    Come up with a winning strategy for Mastermind in max_moves moves. Colors are represented by the letters A-F.\n    The solution representation is as follows.\n    A transcript is a string describing the game so far. It consists of rows separated by newlines.\n    Each row has 4 letters A-F followed by a space and then two numbers indicating how many are exactly right\n    and how many are right but in the wrong location. A sample transcript is as follows:\n    ```\n    AABB 11\n    ABCD 21\n    ABDC\n    ```\n    This is the transcript as the game is in progress. The complete transcript might be:\n    ```\n    AABB 11\n    ABCD 21\n    ABDC 30\n    ABDE 40\n    ```\n\n    A winning strategy is described by a list of transcripts to visit. The next guess can be determined from\n    those partial transcripts.\n    \"\"\"\n    COLORS = \"ABCDEF\"\n\n    def helper(secret: str, transcript=\"\"):\n        if transcript.count(\"\\n\") == max_moves:\n            return False\n        guess = min([t for t in transcripts if t.startswith(transcript)], key=len)[-4:]\n        if guess == secret:\n            return True\n        assert all(g in COLORS for g in guess)\n        perfect = {c: sum([g == s == c for g, s in zip(guess, secret)]) for c in COLORS}\n        almost = sum(min(guess.count(c), secret.count(c)) - perfect[c] for c in COLORS)\n        return helper(secret, transcript + f\"{guess} {sum(perfect.values())}{almost}\\n\")\n\n    return all(helper(r + s + t + u) for r in COLORS for s in COLORS for t in COLORS for u in COLORS)",
    "sols": [
      "def sol(max_moves=10):\n    COLORS = \"ABCDEF\"\n\n    transcripts = []\n\n    ALL = [r + s + t + u for r in COLORS for s in COLORS for t in COLORS for u in COLORS]\n\n    def score(secret, guess):\n        perfect = {c: sum([g == s == c for g, s in zip(guess, secret)]) for c in COLORS}\n        almost = sum(min(guess.count(c), secret.count(c)) - perfect[c] for c in COLORS)\n        return f\"{sum(perfect.values())}{almost}\"\n\n    def mastermind(transcript=\"AABB\", feasible=ALL):  # mastermind moves\n        transcripts.append(transcript)\n        assert transcript.count(\"\\n\") <= max_moves\n        guess = transcript[-4:]\n        feasibles = {}\n        for secret in feasible:\n            scr = score(secret, guess)\n            if scr not in feasibles:\n                feasibles[scr] = []\n            feasibles[scr].append(secret)\n        for scr, secrets in feasibles.items():\n            if scr != \"40\":\n                guesser(transcript + f\" {scr}\\n\", secrets)\n\n    def guesser(transcript, feasible):  # guesser moves\n        def max_ambiguity(guess):\n            by_score = {}\n            for secret2 in feasible:\n                scr = score(secret2, guess)\n                if scr not in by_score:\n                    by_score[scr] = 0\n                by_score[scr] += 1\n            # for OPTIMAL solution, use return max(by_score.values()) + 0.5 * (guess not in feasible) instead of:\n            return max(by_score.values())\n\n        # for optimal solution use guess = min(ALL, key=max_ambiguity) instead of:\n        guess = min(feasible, key=max_ambiguity)\n\n        mastermind(transcript + guess, feasible)\n\n    mastermind()\n\n    return transcripts"
    ],
    "module": "games",
    "notes": "Compute a strategy for winning in [mastermind](https://en.wikipedia.org/wiki/Mastermind_%28board_game%29)\nin a given number of guesses.\n\nInstead of writing a program that plays the game interactively (since interaction is not allowed), we require\nthem to provide a provable winning game tree.",
    "taint_date": "2021-4-26",
    "weight": 0.23809523809523805
  },
  {
    "name": "Mastermind_1",
    "sat": "def sat(transcripts: List[str], max_moves=6):\n    \"\"\"\n    Come up with a winning strategy for Mastermind in max_moves moves. Colors are represented by the letters A-F.\n    The solution representation is as follows.\n    A transcript is a string describing the game so far. It consists of rows separated by newlines.\n    Each row has 4 letters A-F followed by a space and then two numbers indicating how many are exactly right\n    and how many are right but in the wrong location. A sample transcript is as follows:\n    ```\n    AABB 11\n    ABCD 21\n    ABDC\n    ```\n    This is the transcript as the game is in progress. The complete transcript might be:\n    ```\n    AABB 11\n    ABCD 21\n    ABDC 30\n    ABDE 40\n    ```\n\n    A winning strategy is described by a list of transcripts to visit. The next guess can be determined from\n    those partial transcripts.\n    \"\"\"\n    COLORS = \"ABCDEF\"\n\n    def helper(secret: str, transcript=\"\"):\n        if transcript.count(\"\\n\") == max_moves:\n            return False\n        guess = min([t for t in transcripts if t.startswith(transcript)], key=len)[-4:]\n        if guess == secret:\n            return True\n        assert all(g in COLORS for g in guess)\n        perfect = {c: sum([g == s == c for g, s in zip(guess, secret)]) for c in COLORS}\n        almost = sum(min(guess.count(c), secret.count(c)) - perfect[c] for c in COLORS)\n        return helper(secret, transcript + f\"{guess} {sum(perfect.values())}{almost}\\n\")\n\n    return all(helper(r + s + t + u) for r in COLORS for s in COLORS for t in COLORS for u in COLORS)",
    "sols": [
      "def sol(max_moves=6):\n    COLORS = \"ABCDEF\"\n\n    transcripts = []\n\n    ALL = [r + s + t + u for r in COLORS for s in COLORS for t in COLORS for u in COLORS]\n\n    def score(secret, guess):\n        perfect = {c: sum([g == s == c for g, s in zip(guess, secret)]) for c in COLORS}\n        almost = sum(min(guess.count(c), secret.count(c)) - perfect[c] for c in COLORS)\n        return f\"{sum(perfect.values())}{almost}\"\n\n    def mastermind(transcript=\"AABB\", feasible=ALL):  # mastermind moves\n        transcripts.append(transcript)\n        assert transcript.count(\"\\n\") <= max_moves\n        guess = transcript[-4:]\n        feasibles = {}\n        for secret in feasible:\n            scr = score(secret, guess)\n            if scr not in feasibles:\n                feasibles[scr] = []\n            feasibles[scr].append(secret)\n        for scr, secrets in feasibles.items():\n            if scr != \"40\":\n                guesser(transcript + f\" {scr}\\n\", secrets)\n\n    def guesser(transcript, feasible):  # guesser moves\n        def max_ambiguity(guess):\n            by_score = {}\n            for secret2 in feasible:\n                scr = score(secret2, guess)\n                if scr not in by_score:\n                    by_score[scr] = 0\n                by_score[scr] += 1\n            # for OPTIMAL solution, use return max(by_score.values()) + 0.5 * (guess not in feasible) instead of:\n            return max(by_score.values())\n\n        # for optimal solution use guess = min(ALL, key=max_ambiguity) instead of:\n        guess = min(feasible, key=max_ambiguity)\n\n        mastermind(transcript + guess, feasible)\n\n    mastermind()\n\n    return transcripts"
    ],
    "module": "games",
    "notes": "Compute a strategy for winning in [mastermind](https://en.wikipedia.org/wiki/Mastermind_%28board_game%29)\nin a given number of guesses.\n\nInstead of writing a program that plays the game interactively (since interaction is not allowed), we require\nthem to provide a provable winning game tree.",
    "taint_date": "2021-4-26",
    "weight": 0.23809523809523805
  },
  {
    "name": "Mastermind_2",
    "sat": "def sat(transcripts: List[str], max_moves=8):\n    \"\"\"\n    Come up with a winning strategy for Mastermind in max_moves moves. Colors are represented by the letters A-F.\n    The solution representation is as follows.\n    A transcript is a string describing the game so far. It consists of rows separated by newlines.\n    Each row has 4 letters A-F followed by a space and then two numbers indicating how many are exactly right\n    and how many are right but in the wrong location. A sample transcript is as follows:\n    ```\n    AABB 11\n    ABCD 21\n    ABDC\n    ```\n    This is the transcript as the game is in progress. The complete transcript might be:\n    ```\n    AABB 11\n    ABCD 21\n    ABDC 30\n    ABDE 40\n    ```\n\n    A winning strategy is described by a list of transcripts to visit. The next guess can be determined from\n    those partial transcripts.\n    \"\"\"\n    COLORS = \"ABCDEF\"\n\n    def helper(secret: str, transcript=\"\"):\n        if transcript.count(\"\\n\") == max_moves:\n            return False\n        guess = min([t for t in transcripts if t.startswith(transcript)], key=len)[-4:]\n        if guess == secret:\n            return True\n        assert all(g in COLORS for g in guess)\n        perfect = {c: sum([g == s == c for g, s in zip(guess, secret)]) for c in COLORS}\n        almost = sum(min(guess.count(c), secret.count(c)) - perfect[c] for c in COLORS)\n        return helper(secret, transcript + f\"{guess} {sum(perfect.values())}{almost}\\n\")\n\n    return all(helper(r + s + t + u) for r in COLORS for s in COLORS for t in COLORS for u in COLORS)",
    "sols": [
      "def sol(max_moves=8):\n    COLORS = \"ABCDEF\"\n\n    transcripts = []\n\n    ALL = [r + s + t + u for r in COLORS for s in COLORS for t in COLORS for u in COLORS]\n\n    def score(secret, guess):\n        perfect = {c: sum([g == s == c for g, s in zip(guess, secret)]) for c in COLORS}\n        almost = sum(min(guess.count(c), secret.count(c)) - perfect[c] for c in COLORS)\n        return f\"{sum(perfect.values())}{almost}\"\n\n    def mastermind(transcript=\"AABB\", feasible=ALL):  # mastermind moves\n        transcripts.append(transcript)\n        assert transcript.count(\"\\n\") <= max_moves\n        guess = transcript[-4:]\n        feasibles = {}\n        for secret in feasible:\n            scr = score(secret, guess)\n            if scr not in feasibles:\n                feasibles[scr] = []\n            feasibles[scr].append(secret)\n        for scr, secrets in feasibles.items():\n            if scr != \"40\":\n                guesser(transcript + f\" {scr}\\n\", secrets)\n\n    def guesser(transcript, feasible):  # guesser moves\n        def max_ambiguity(guess):\n            by_score = {}\n            for secret2 in feasible:\n                scr = score(secret2, guess)\n                if scr not in by_score:\n                    by_score[scr] = 0\n                by_score[scr] += 1\n            # for OPTIMAL solution, use return max(by_score.values()) + 0.5 * (guess not in feasible) instead of:\n            return max(by_score.values())\n\n        # for optimal solution use guess = min(ALL, key=max_ambiguity) instead of:\n        guess = min(feasible, key=max_ambiguity)\n\n        mastermind(transcript + guess, feasible)\n\n    mastermind()\n\n    return transcripts"
    ],
    "module": "games",
    "notes": "Compute a strategy for winning in [mastermind](https://en.wikipedia.org/wiki/Mastermind_%28board_game%29)\nin a given number of guesses.\n\nInstead of writing a program that plays the game interactively (since interaction is not allowed), we require\nthem to provide a provable winning game tree.",
    "taint_date": "2021-4-26",
    "weight": 0.23809523809523805
  },
  {
    "name": "TicTacToeX_0",
    "sat": "def sat(good_boards: List[str]):\n    \"\"\"\n    Compute a strategy for X (first player) in tic-tac-toe that guarantees a tie. That is a strategy for X that,\n    no matter what the opponent does, X does not lose.\n\n    A board is represented as a 9-char string like an X in the middle would be \"....X....\" and a\n    move is an integer 0-8. The answer is a list of \"good boards\" that X aims for, so no matter what O does there\n    is always good board that X can get to with a single move.\n    \"\"\"\n    board_bit_reps = {tuple(sum(1 << i for i in range(9) if b[i] == c) for c in \"XO\") for b in good_boards}\n    win = [any(i & w == w for w in [7, 56, 73, 84, 146, 273, 292, 448]) for i in range(512)]\n\n    def tie(x, o):  # returns True if X has a forced tie/win assuming it's X's turn to move.\n        x |= 1 << [i for i in range(9) if (x | (1 << i), o) in board_bit_reps][0]\n        return not win[o] and (win[x] or all((x | o) & (1 << i) or tie(x, o | (1 << i)) for i in range(9)))\n\n    return tie(0, 0)",
    "sols": [
      "def sol():\n    win = [any(i & w == w for w in [7, 56, 73, 84, 146, 273, 292, 448]) for i in range(512)]  # 9-bit representation\n\n    good_boards = []\n\n    def x_move(x, o):  # returns True if x wins or ties, x's turn to move\n        if win[o]:\n            return False\n        if x | o == 511:\n            return True\n        for i in range(9):\n            if (x | o) & (1 << i) == 0 and o_move(x | (1 << i), o):\n                good_boards.append(\"\".join(\".XO\"[((x >> j) & 1) + 2 * ((o >> j) & 1) + (i == j)] for j in range(9)))\n                return True\n        return False  # O wins\n\n    def o_move(x, o):  # returns True if x wins or ties, x's turn to move\n        if win[x] or x | o == 511: # full board\n            return True\n        for i in range(9):\n            if (x | o) & (1 << i) == 0 and not x_move(x, o | (1 << i)):\n                return False\n        return True  # O wins\n\n    res = x_move(0, 0)\n    assert res\n\n    return good_boards"
    ],
    "module": "games",
    "notes": "Since we don't have interaction, this problem asks for a full tie-guranteeing strategy.",
    "taint_date": "2021-4-26",
    "weight": 0.07142857142857142
  },
  {
    "name": "TicTacToeO_0",
    "sat": "def sat(good_boards: List[str]):\n    \"\"\"\n    Compute a strategy for O (second player) in tic-tac-toe that guarantees a tie. That is a strategy for O that,\n    no matter what the opponent does, O does not lose.\n\n    A board is represented as a 9-char string like an X in the middle would be \"....X....\" and a\n    move is an integer 0-8. The answer is a list of \"good boards\" that O aims for, so no matter what X does there\n    is always good board that O can get to with a single move.\n    \"\"\"\n    board_bit_reps = {tuple(sum(1 << i for i in range(9) if b[i] == c) for c in \"XO\") for b in good_boards}\n    win = [any(i & w == w for w in [7, 56, 73, 84, 146, 273, 292, 448]) for i in range(512)]\n\n    def tie(x, o):  # returns True if O has a forced tie/win. It's O's turn to move.\n        if o | x != 511: # complete board\n            o |= 1 << [i for i in range(9) if (x, o | (1 << i)) in board_bit_reps][0]\n        return not win[x] and (win[o] or all((x | o) & (1 << i) or tie(x | (1 << i), o) for i in range(9)))\n\n    return all(tie(1 << i, 0) for i in range(9))",
    "sols": [
      "def sol():\n    win = [any(i & w == w for w in [7, 56, 73, 84, 146, 273, 292, 448]) for i in range(512)]  # 9-bit representation\n\n    good_boards = []\n\n    def x_move(x, o):  # returns True if o wins or ties, x's turn to move\n        if win[o] or x | o == 511: # full board\n            return True\n        for i in range(9):\n            if (x | o) & (1 << i) == 0 and not o_move(x | (1 << i), o):\n                return False\n        return True  # O wins/ties\n\n    def o_move(x, o):  # returns True if o wins or ties, o's turn to move\n        if win[x]:\n            return False\n        if x | o == 511:\n            return True\n        for i in range(9):\n            if (x | o) & (1 << i) == 0 and x_move(x, o | (1 << i)):\n                good_boards.append(\n                    \"\".join(\".XO\"[((x >> j) & 1) + 2 * ((o >> j) & 1) + 2 * (i == j)] for j in range(9)))\n                return True\n        return False  # X wins\n\n    res = x_move(0, 0)\n    assert res\n\n    return good_boards"
    ],
    "module": "games",
    "notes": "Same as above but for 2nd player",
    "taint_date": "2021-4-26",
    "weight": 0.07142857142857142
  },
  {
    "name": "RockPaperScissors_0",
    "sat": "def sat(probs: List[float]):\n    \"\"\"Find optimal probabilities for playing Rock-Paper-Scissors zero-sum game, with best worst-case guarantee\"\"\"\n    assert len(probs) == 3 and abs(sum(probs) - 1) < 1e-6\n    return max(probs[(i + 2) % 3] - probs[(i + 1) % 3] for i in range(3)) < 1e-6",
    "sols": [
      "def sol():\n    return [1 / 3] * 3"
    ],
    "module": "games",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.07142857142857142
  },
  {
    "name": "Nash_0",
    "sat": "def sat(strategies: List[List[float]], A=[[-1.0, -3.0], [0.0, -2.0]], B=[[-1.0, 0.0], [-3.0, -2.0]], eps=0.01):  # error tolerance\n    \"\"\"\n    Find an eps-Nash-equilibrium for a given two-player game with payoffs described by matrices A, B.\n    For example, for the classic Prisoner dilemma:\n    A=[[-1., -3.], [0., -2.]], B=[[-1., 0.], [-3., -2.]], and strategies = [[0, 1], [0, 1]]\n\n    \"\"\"\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))",
    "sols": [
      "def sol(A=[[-1.0, -3.0], [0.0, -2.0]], B=[[-1.0, 0.0], [-3.0, -2.0]], eps=0.01):\n    NUM_ATTEMPTS = 100\n\n    def sat(strategies: List[List[float]], A, B, eps):\n        m, n = len(A), len(A[0])\n        p, q = strategies\n        assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n        assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n        assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))\n\n    import random\n    r = random.Random(0)\n    dims = len(A), len(A[0])\n    # possible speedup: remove dominated strategies\n    for _attempt in range(NUM_ATTEMPTS):\n        strategies = []\n        for d in dims:\n            s = [max(0.0, r.random() - 0.5) for _ in range(d)]\n            tot = sum(s) + 1e-6\n            for i in range(d):\n                s[i] = (1.0 - sum(s[:-1])) if i == d - 1 else (s[i] / tot)  # to ensure sum is exactly 1.0\n            strategies.append(s)\n        if sat(strategies, A, B, eps):\n            return strategies"
    ],
    "module": "game_theory",
    "notes": "Computing a [Nash equilibrium](https://en.wikipedia.org/wiki/Nash_equilibrium) for a given\n[bimatrix game](https://en.wikipedia.org/wiki/Bimatrix_game) is known to be\nPPAD-hard in general. However, the challenge is be much easier for an approximate\n[eps-equilibrium](https://en.wikipedia.org/wiki/Epsilon-equilibrium) and of course for small games.",
    "taint_date": "2021-4-26",
    "weight": 0.05
  },
  {
    "name": "Nash_1",
    "sat": "def sat(strategies: List[List[float]], A=[[0.14738177495578275, 0.747980019825271, 0.1051232435961047, 0.46907581621423977, 0.4706551623263341, 0.9062661953318937], [0.12988166612252583, 0.890441435875433, 0.15190125502216845, 0.0251552990265973, 0.32734850066506815, 0.3591430990509836], [0.9425550188084191, 0.08611212072450258, 0.783624348822126, 0.5349936815267257, 0.10270055080436169, 0.009590499808168174], [0.6380601343485022, 0.2218383099094161, 0.6868257338754123, 0.806638752054053, 0.9018561622314694, 0.7590395566591508], [0.6859264269381581, 0.3699302620070518, 0.9942148381089508, 0.8903935289162987, 0.674293629800702, 0.11410994407146158], [0.019262410240239114, 0.35560181353997367, 0.8517917641156626, 0.3074607746901762, 0.9261733304770997, 0.15224796120543604], [0.03366324617275729, 0.8709614609040649, 0.5849217229245649, 0.6379408604095658, 0.07001731910881204, 0.9582581413742493], [0.4142207195937342, 0.3193135769930635, 0.10706268323342383, 0.942046924893307, 0.9143451786836865, 0.701950437311744], [0.5179763142759984, 0.6412718009580387, 0.20022057700520002, 0.5942457297156203, 0.19646377673223914, 0.1351944216925801]], B=[[0.6516235984777713, 0.6123203626800926, 0.6186872023667903, 0.3853596754503974, 0.1073381662525007, 0.1291386906927786], [0.4925608374781314, 0.6308638606801343, 0.9530950453320264, 0.19706903321155278, 0.24184190603658184, 0.5045244344435803], [0.441426258818589, 0.38377342845027484, 0.012225023944992808, 0.891576455082707, 0.7733199528680031, 0.5559723587618317], [0.40823234393591534, 0.3751689897312942, 0.9735593124687937, 0.9428257869910855, 0.8271844491151399, 0.9685273237161491], [0.4832145692461641, 0.5635754453674369, 0.35994676263243286, 0.7815677383683111, 0.9809479850913646, 0.2808093367857648], [0.7473188591890239, 0.12760325771253167, 0.6709148257444112, 0.6960324705687125, 0.9742301280874588, 0.5061403432364218], [0.5512441627071583, 0.24752179828917065, 0.8112753285511846, 0.31333832922799887, 0.6811740304141864, 0.9411639311639899], [0.7477089685706007, 0.2569950106729836, 0.5041394572889569, 0.10948936347507965, 0.6055289733960375, 0.5733220923473799], [0.6810018730369142, 0.7452579755751384, 0.5448601672849144, 0.6414658827186077, 0.8050401801463669, 0.729851403010736]], eps=0.1):  # error tolerance\n    \"\"\"\n    Find an eps-Nash-equilibrium for a given two-player game with payoffs described by matrices A, B.\n    For example, for the classic Prisoner dilemma:\n    A=[[-1., -3.], [0., -2.]], B=[[-1., 0.], [-3., -2.]], and strategies = [[0, 1], [0, 1]]\n\n    \"\"\"\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))",
    "sols": [],
    "module": "game_theory",
    "notes": "Computing a [Nash equilibrium](https://en.wikipedia.org/wiki/Nash_equilibrium) for a given\n[bimatrix game](https://en.wikipedia.org/wiki/Bimatrix_game) is known to be\nPPAD-hard in general. However, the challenge is be much easier for an approximate\n[eps-equilibrium](https://en.wikipedia.org/wiki/Epsilon-equilibrium) and of course for small games.",
    "taint_date": "2021-4-26",
    "weight": 0.05
  },
  {
    "name": "Nash_2",
    "sat": "def sat(strategies: List[List[float]], A=[[0.4934719584926307, 0.05664225783974475, 0.4878391988801185, 0.6983347656105304, 0.7903235569844771], [0.9209179850842271, 0.6945169729870889, 0.985586605726519, 0.03611807745215567, 0.07791862369265457]], B=[[0.5723776540419043, 0.3177494964308457, 0.03283373751184504, 0.960932861317398, 0.3843454398162133], [0.7415658068058613, 0.4423455643375954, 0.9314198922910875, 0.937956471095574, 0.6337568371723998]], eps=0.01):  # error tolerance\n    \"\"\"\n    Find an eps-Nash-equilibrium for a given two-player game with payoffs described by matrices A, B.\n    For example, for the classic Prisoner dilemma:\n    A=[[-1., -3.], [0., -2.]], B=[[-1., 0.], [-3., -2.]], and strategies = [[0, 1], [0, 1]]\n\n    \"\"\"\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))",
    "sols": [
      "def sol(A=[[0.4934719584926307, 0.05664225783974475, 0.4878391988801185, 0.6983347656105304, 0.7903235569844771], [0.9209179850842271, 0.6945169729870889, 0.985586605726519, 0.03611807745215567, 0.07791862369265457]], B=[[0.5723776540419043, 0.3177494964308457, 0.03283373751184504, 0.960932861317398, 0.3843454398162133], [0.7415658068058613, 0.4423455643375954, 0.9314198922910875, 0.937956471095574, 0.6337568371723998]], eps=0.01):\n    NUM_ATTEMPTS = 100\n\n    def sat(strategies: List[List[float]], A, B, eps):\n        m, n = len(A), len(A[0])\n        p, q = strategies\n        assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n        assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n        assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))\n\n    import random\n    r = random.Random(0)\n    dims = len(A), len(A[0])\n    # possible speedup: remove dominated strategies\n    for _attempt in range(NUM_ATTEMPTS):\n        strategies = []\n        for d in dims:\n            s = [max(0.0, r.random() - 0.5) for _ in range(d)]\n            tot = sum(s) + 1e-6\n            for i in range(d):\n                s[i] = (1.0 - sum(s[:-1])) if i == d - 1 else (s[i] / tot)  # to ensure sum is exactly 1.0\n            strategies.append(s)\n        if sat(strategies, A, B, eps):\n            return strategies"
    ],
    "module": "game_theory",
    "notes": "Computing a [Nash equilibrium](https://en.wikipedia.org/wiki/Nash_equilibrium) for a given\n[bimatrix game](https://en.wikipedia.org/wiki/Bimatrix_game) is known to be\nPPAD-hard in general. However, the challenge is be much easier for an approximate\n[eps-equilibrium](https://en.wikipedia.org/wiki/Epsilon-equilibrium) and of course for small games.",
    "taint_date": "2021-4-26",
    "weight": 0.05
  },
  {
    "name": "Nash_3",
    "sat": "def sat(strategies: List[List[float]], A=[[0.8589758630993106, 0.7749919744562254, 0.18371378758390233, 0.28034839679007295, 0.18276337511723684, 0.5173168267432149], [0.535972149604936, 0.6860082336427572, 0.8154412069051551, 0.02442129105356694, 0.1349312146704914, 0.7530215223132398], [0.3519956107153608, 0.9660103168436817, 0.10172694662400983, 0.7254690944575098, 0.8254057287673647, 0.3189629245726713], [0.5725690579346981, 0.1589108703965545, 0.01688986355891453, 0.3074319760280675, 0.4584643560452394, 0.5853201363256517], [0.6489314270374363, 0.6347169492821729, 0.18348768635443546, 0.5731694328630751, 0.6566567470060826, 0.8039403838540958], [0.4917243999522437, 0.16144631954506772, 0.04044367374900226, 0.09502214062659131, 0.8738947440998662, 0.6114058437094053], [0.1967023709822303, 0.29782628261932154, 0.058285139123036234, 0.6302740689117773, 0.33364400882000855, 0.5776389301631869], [0.6777544316258026, 0.6724283041374894, 0.9798391425483743, 0.8838381708326536, 0.6667218181098736, 0.34481925547433623], [0.5958711406283824, 0.44387553450142214, 0.6668717494447683, 0.25986773196752133, 0.8873567554013287, 0.4374385442834563]], B=[[0.6509157248335261, 0.47969567636489663, 0.7175654058769987, 0.8305604678011964, 0.11420347930129515, 0.8401333925076142], [0.8690852438876666, 0.8127345690587251, 0.316832083958, 0.9589533790230425, 0.6983255500551921, 0.4492765771156503], [0.7058401433380928, 0.007340378623609478, 0.5423001137088079, 0.2066909384280825, 0.3317417420195775, 0.003203599551001912], [0.4887994419103735, 0.4082867953539032, 0.3605910405209234, 0.19354666101193807, 0.3116629413961449, 0.9698417812464528], [0.30623970889248353, 0.8377553335650854, 0.7624220111189529, 0.22826919233755616, 0.3832245488487954, 0.11387974071378948], [0.8818032772640031, 0.24028195971823052, 0.8834992573768841, 0.9883007945834051, 0.7024933884432355, 0.7617988546407181], [0.9160905473729156, 0.6927856066612084, 0.6159687601776853, 0.15074396336216966, 0.7764252875888226, 0.3459191304782905], [0.9991431698755587, 0.32389039099370287, 0.8354695347283115, 0.51319161530113, 0.5229921145906276, 0.7690459477032934], [0.7591967670432632, 0.23382636010443625, 0.26521035423368, 0.8577953561722641, 0.020432130142500116, 0.019755815416500178]], eps=0.1):  # error tolerance\n    \"\"\"\n    Find an eps-Nash-equilibrium for a given two-player game with payoffs described by matrices A, B.\n    For example, for the classic Prisoner dilemma:\n    A=[[-1., -3.], [0., -2.]], B=[[-1., 0.], [-3., -2.]], and strategies = [[0, 1], [0, 1]]\n\n    \"\"\"\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))",
    "sols": [],
    "module": "game_theory",
    "notes": "Computing a [Nash equilibrium](https://en.wikipedia.org/wiki/Nash_equilibrium) for a given\n[bimatrix game](https://en.wikipedia.org/wiki/Bimatrix_game) is known to be\nPPAD-hard in general. However, the challenge is be much easier for an approximate\n[eps-equilibrium](https://en.wikipedia.org/wiki/Epsilon-equilibrium) and of course for small games.",
    "taint_date": "2021-4-26",
    "weight": 0.05
  },
  {
    "name": "Nash_4",
    "sat": "def sat(strategies: List[List[float]], A=[[0.5753373910044396, 0.883286704506171, 0.14098419242590676, 0.0796482735170555, 0.28053511699815137, 0.4802587237433614, 0.7927565741942321, 0.10486790699611082], [0.674897469149739, 0.5526354958094333, 0.14126552040252316, 0.8176885681560745, 0.5950057513195114, 0.9394498004514682, 0.9974412293717752, 0.31785998202168364], [0.8551492483900579, 0.0873581901597057, 0.7058504781434135, 0.8614481823894408, 0.774002479389802, 0.5194163269795865, 0.8839947283493329, 0.4796849532033839], [0.24669121918914239, 0.9192009909426845, 0.22533689422848313, 0.42231986064003346, 0.8524917527913644, 0.3217815290765713, 0.13012568628724053, 0.08517580086974996], [0.6708003793106111, 0.9370021425919828, 0.956981559137809, 0.48294825852969425, 0.09451427192867867, 0.958711015678715, 0.13874285709747414, 0.17240487357189138], [0.6862479923713413, 0.40988185301904767, 0.7232258320050972, 0.12156129874113497, 0.4137204968814412, 0.43096712555208105, 0.9673727161037606, 0.9554536674896775], [0.2645245766573283, 0.16353379162998616, 0.8208329137057697, 0.24945486012929086, 0.19060921538692044, 0.6886849242360286, 0.6513544853108113, 0.13898253443118158], [0.8399423196728664, 0.5583901386668076, 0.05055384968867316, 0.272512815876485, 0.4706764309925491, 0.9920874820129374, 0.11006687231735834, 0.6003338823254668]], B=[[0.8661101149166154, 0.5041424261188884, 0.654530488206357, 0.842287965510257, 0.5418722524658692, 0.615317049155107, 0.2474305118268787, 0.802249852604974], [0.17399126319302805, 0.37286827574250436, 0.9025123265462714, 0.6302774019777034, 0.6096954531215514, 0.14282756248667317, 0.5039665393854678, 0.5053857713064859], [0.08645764165911696, 0.34639849481946294, 0.4003286765389642, 0.8522825407634552, 0.38924375107949505, 0.13708630962779877, 0.09413370097193263, 0.024977157717289145], [0.18665183173707744, 0.08210966062569414, 0.8906028770829486, 0.9292380534706237, 0.3432700204525524, 0.03791015448620483, 0.23701146631134296, 0.5236370615896554], [0.4158240648499627, 0.620309795706114, 0.6606023798050246, 0.7581954943445194, 0.9399309644265448, 0.6640739757418763, 0.5470483802958659, 0.3881528058493644], [0.8452380694038372, 0.7687623496765781, 0.22422282300746144, 0.03236167241305821, 0.1113965246318579, 0.4589759506900418, 0.8415359432321317, 0.27521377409486303], [0.6582156349227984, 0.9988816473957544, 0.4901663751981855, 0.3788210957458895, 0.455713995042737, 0.04960398762882756, 0.16850674065572013, 0.6202540021741917], [0.7515673992699056, 0.6867547828670959, 0.038529441293790434, 0.9995963277046196, 0.15577904716257307, 0.2596640500026437, 0.76139213514593, 0.5065163836406463]], eps=0.01):  # error tolerance\n    \"\"\"\n    Find an eps-Nash-equilibrium for a given two-player game with payoffs described by matrices A, B.\n    For example, for the classic Prisoner dilemma:\n    A=[[-1., -3.], [0., -2.]], B=[[-1., 0.], [-3., -2.]], and strategies = [[0, 1], [0, 1]]\n\n    \"\"\"\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))",
    "sols": [],
    "module": "game_theory",
    "notes": "Computing a [Nash equilibrium](https://en.wikipedia.org/wiki/Nash_equilibrium) for a given\n[bimatrix game](https://en.wikipedia.org/wiki/Bimatrix_game) is known to be\nPPAD-hard in general. However, the challenge is be much easier for an approximate\n[eps-equilibrium](https://en.wikipedia.org/wiki/Epsilon-equilibrium) and of course for small games.",
    "taint_date": "2021-4-26",
    "weight": 0.05
  },
  {
    "name": "Nash_5",
    "sat": "def sat(strategies: List[List[float]], A=[[0.5814726045900506, 0.5956256240391693, 0.9131052903243185, 0.11287281160683993, 0.8212831173291085], [0.3793947608343723, 0.45275742082717085, 0.7407921334034075, 0.3864570423145923, 0.9370653086702027], [0.9160405228310879, 0.7511352063662349, 0.11550803796534004, 0.8302201055138154, 0.37417912056353275], [0.27039011886490116, 0.5969892185811785, 0.43324261935308306, 0.45567569201607305, 0.02400752372038628], [0.21041432700124219, 0.10743981295595395, 0.4021055269398165, 0.7261573413735346, 0.0957915298614408], [0.7447931227966944, 0.17320742569914804, 0.37237160787529366, 0.22749360932525553, 0.9101117804089166], [0.9546831195902783, 0.9978608587266401, 0.01697185583697791, 0.09005553976665348, 0.9387074705810284]], B=[[0.12589378221914926, 0.40795082073633004, 0.08132672688364984, 0.4979321986925006, 0.5609609624305184], [0.8175383659935327, 0.5300772051369375, 0.848912744356485, 0.7154791168043296, 0.9895776373063956], [0.41990393041395635, 0.0013608140861244289, 0.2815047938794766, 0.16105844955634552, 0.8824659755620429], [0.27077366812852766, 0.762430524799613, 0.7320934409657355, 0.06959471659212835, 0.053791319320243836], [0.3740768645228755, 0.3380216532762028, 0.20971994250824022, 0.09779092069862028, 0.29896008164483945], [0.7430871792613583, 0.9887999066102043, 0.04022774116177219, 0.9777443357134955, 0.6120194450553303], [0.7767936235763484, 0.35895050943173945, 0.6950274781514277, 0.10464463080332709, 0.9255235863724958]], eps=0.01):  # error tolerance\n    \"\"\"\n    Find an eps-Nash-equilibrium for a given two-player game with payoffs described by matrices A, B.\n    For example, for the classic Prisoner dilemma:\n    A=[[-1., -3.], [0., -2.]], B=[[-1., 0.], [-3., -2.]], and strategies = [[0, 1], [0, 1]]\n\n    \"\"\"\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))",
    "sols": [],
    "module": "game_theory",
    "notes": "Computing a [Nash equilibrium](https://en.wikipedia.org/wiki/Nash_equilibrium) for a given\n[bimatrix game](https://en.wikipedia.org/wiki/Bimatrix_game) is known to be\nPPAD-hard in general. However, the challenge is be much easier for an approximate\n[eps-equilibrium](https://en.wikipedia.org/wiki/Epsilon-equilibrium) and of course for small games.",
    "taint_date": "2021-4-26",
    "weight": 0.05
  },
  {
    "name": "Nash_6",
    "sat": "def sat(strategies: List[List[float]], A=[[0.753305183784452, 0.00021493214186718568, 0.8174646111076165, 0.2407255200398024, 0.1795814384955745, 0.08876568106117855, 0.4880983704462357, 0.09098388842018601, 0.6453241070493039], [0.5297334039709646, 0.2806958522308418, 0.0005903610098896284, 0.38852379069610643, 0.33474414876127456, 0.6622877161203526, 0.7209078089467034, 0.18478788570109816, 0.5644413142021318], [0.44604180692715445, 0.06019075020211484, 0.6774602077367329, 0.8598735073120923, 0.2633378670984865, 0.29206998906490644, 0.9332786731794765, 0.4760354265590311, 0.4457633756459827], [0.9325554940781343, 0.3236751349693534, 0.6611731100331621, 0.6242000349323874, 0.5874917213550676, 0.35961716225787466, 0.10212965259196705, 0.8214691031355454, 0.0632394823107364], [0.01623252423534205, 0.6215843984799041, 0.8312686980642228, 0.08662401823946564, 0.8620707246910273, 0.4477824063172565, 0.23812810100907567, 0.4672570106974444, 0.38214866929136604], [0.770410882982723, 0.664909759130508, 0.6709981786388367, 0.43500706746360696, 0.7828753577872432, 0.853305503068459, 0.2618568542194608, 0.8393119440341452, 0.6220495109710185], [0.4437405121128877, 0.08062775552593315, 0.2825300127370993, 0.8248570391874871, 0.10409178686182985, 0.6194212035689083, 0.2478787929552866, 0.8429485939490016, 0.6279189120934703], [0.405977732335145, 0.3047593456508607, 0.0011626743055760391, 0.24354141414057162, 0.4297136578803912, 0.7541260581053129, 0.1984931724365474, 0.06180222143204839, 0.6515743865496492], [0.020441606842849902, 0.28353015328509557, 0.6721313126673334, 0.932135081104012, 0.7975938948129068, 0.8566984213714758, 0.48276208315749736, 0.28187979216520775, 0.8646700222050563]], B=[[0.4667434762563013, 0.8828579807545561, 0.932673103691559, 0.17468167109277055, 0.17794943215792203, 0.36312025444562446, 0.35334739769318513, 0.1354540876658693, 0.32202521539243756], [0.8782105488754612, 0.9461287339187919, 0.27587149388394283, 0.11585559018024827, 0.6106571636850053, 0.6028924621081755, 0.2939925489412869, 0.42076014930567507, 0.6040119276778034], [0.4052273399013572, 0.3971114752935314, 0.5503655768383657, 0.43803811580318086, 0.19523695724756673, 0.6213017081296713, 0.5006649256239393, 0.7024242905687111, 0.012697482541764615], [0.18783520053749114, 0.7918370161649555, 0.25288620586756083, 0.2627962196239465, 0.3490592546214717, 0.5476028202362002, 0.4788004945388744, 0.9198108509539109, 0.583195351640764], [0.8968662656610187, 0.2225988182213413, 0.12679278019016038, 0.39133479560938333, 0.055254350543235464, 0.6937088973135248, 0.9826992825124735, 0.09633776560112417, 0.23598127507484157], [0.976600161085042, 0.16776588555220717, 0.8693968644515583, 0.7022810534576341, 0.8117852475522691, 0.4773848617558878, 0.892980138455822, 0.6693110989550494, 0.18760228226583875], [0.8242959518275365, 0.39580496981975355, 0.2525596025349518, 0.3690553679462767, 0.3627854068041879, 0.4107185237154821, 0.47077429999121123, 0.07227659873796244, 0.3866774952645814], [0.5654255816642142, 0.965813926840458, 0.7306735696312973, 0.5492268686026774, 0.11025418677938814, 0.9904006420435519, 0.40801176324094646, 0.7938852542327226, 0.7546755967922436], [0.9766683312067237, 0.6204400112310381, 0.9092808588005977, 0.702904402157147, 0.47962635670188203, 0.95920963537724, 0.47677437362840525, 0.8235720152869215, 0.8441643727726349]], eps=0.01):  # error tolerance\n    \"\"\"\n    Find an eps-Nash-equilibrium for a given two-player game with payoffs described by matrices A, B.\n    For example, for the classic Prisoner dilemma:\n    A=[[-1., -3.], [0., -2.]], B=[[-1., 0.], [-3., -2.]], and strategies = [[0, 1], [0, 1]]\n\n    \"\"\"\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))",
    "sols": [],
    "module": "game_theory",
    "notes": "Computing a [Nash equilibrium](https://en.wikipedia.org/wiki/Nash_equilibrium) for a given\n[bimatrix game](https://en.wikipedia.org/wiki/Bimatrix_game) is known to be\nPPAD-hard in general. However, the challenge is be much easier for an approximate\n[eps-equilibrium](https://en.wikipedia.org/wiki/Epsilon-equilibrium) and of course for small games.",
    "taint_date": "2021-4-26",
    "weight": 0.05
  },
  {
    "name": "Nash_7",
    "sat": "def sat(strategies: List[List[float]], A=[[0.5137252695510608, 0.6115571776653999, 0.9036119749130369, 0.4000115829503379, 0.26826932035226125, 0.3723598610176565, 0.5244977944491166, 0.1815535662844534, 0.6233056131299094], [0.11654162767534171, 0.0653655661719037, 0.8132357638458977, 0.44129019086850874, 0.969656451614091, 0.5617862965011289, 0.039295150165379655, 0.7645309456078511, 0.9178579356106069]], B=[[0.1386818801228349, 0.37023194265834247, 0.6547447526877681, 0.6583280505666821, 0.7088303774990212, 0.5488208139033705, 0.5585003967063151, 0.5151291393071482, 0.533084324113522], [0.3291140887660152, 0.5366733726820826, 0.43027011472528154, 0.8109432563615194, 0.6036396320394376, 0.6121659869602197, 0.07124532303074249, 0.49409974501472154, 0.18257701012621896]], eps=0.5):  # error tolerance\n    \"\"\"\n    Find an eps-Nash-equilibrium for a given two-player game with payoffs described by matrices A, B.\n    For example, for the classic Prisoner dilemma:\n    A=[[-1., -3.], [0., -2.]], B=[[-1., 0.], [-3., -2.]], and strategies = [[0, 1], [0, 1]]\n\n    \"\"\"\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))",
    "sols": [
      "def sol(A=[[0.5137252695510608, 0.6115571776653999, 0.9036119749130369, 0.4000115829503379, 0.26826932035226125, 0.3723598610176565, 0.5244977944491166, 0.1815535662844534, 0.6233056131299094], [0.11654162767534171, 0.0653655661719037, 0.8132357638458977, 0.44129019086850874, 0.969656451614091, 0.5617862965011289, 0.039295150165379655, 0.7645309456078511, 0.9178579356106069]], B=[[0.1386818801228349, 0.37023194265834247, 0.6547447526877681, 0.6583280505666821, 0.7088303774990212, 0.5488208139033705, 0.5585003967063151, 0.5151291393071482, 0.533084324113522], [0.3291140887660152, 0.5366733726820826, 0.43027011472528154, 0.8109432563615194, 0.6036396320394376, 0.6121659869602197, 0.07124532303074249, 0.49409974501472154, 0.18257701012621896]], eps=0.5):\n    NUM_ATTEMPTS = 100\n\n    def sat(strategies: List[List[float]], A, B, eps):\n        m, n = len(A), len(A[0])\n        p, q = strategies\n        assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n        assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n        assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))\n\n    import random\n    r = random.Random(0)\n    dims = len(A), len(A[0])\n    # possible speedup: remove dominated strategies\n    for _attempt in range(NUM_ATTEMPTS):\n        strategies = []\n        for d in dims:\n            s = [max(0.0, r.random() - 0.5) for _ in range(d)]\n            tot = sum(s) + 1e-6\n            for i in range(d):\n                s[i] = (1.0 - sum(s[:-1])) if i == d - 1 else (s[i] / tot)  # to ensure sum is exactly 1.0\n            strategies.append(s)\n        if sat(strategies, A, B, eps):\n            return strategies"
    ],
    "module": "game_theory",
    "notes": "Computing a [Nash equilibrium](https://en.wikipedia.org/wiki/Nash_equilibrium) for a given\n[bimatrix game](https://en.wikipedia.org/wiki/Bimatrix_game) is known to be\nPPAD-hard in general. However, the challenge is be much easier for an approximate\n[eps-equilibrium](https://en.wikipedia.org/wiki/Epsilon-equilibrium) and of course for small games.",
    "taint_date": "2021-4-26",
    "weight": 0.05
  },
  {
    "name": "Nash_8",
    "sat": "def sat(strategies: List[List[float]], A=[[0.32637957131438733, 0.6354291296026905, 0.8030884405572954, 0.15573400869108456, 0.009910899518800531], [0.11655112223772679, 0.9049518200114235, 0.03493953681413531, 0.2323649665048323, 0.10149902984419357], [0.02501288700255644, 0.8408583448368675, 0.05381871696043283, 0.16691342771910722, 0.04469980927199102], [0.2470008404164057, 0.35144970323072966, 0.5781202029219602, 0.5417221582567634, 0.6915315964876854], [0.5761118858007916, 0.610327980052143, 0.4500704245674991, 0.00237372714468298, 0.8543456083712235], [0.3528964212519685, 0.7319441233027391, 0.21232303227214566, 0.6178330032527302, 0.909451853791616], [0.46028529280704444, 0.14500789461024, 0.0246756377137759, 0.45500269499727986, 0.441524512369724]], B=[[0.2663059860553171, 0.0949913314096742, 0.08856504552855848, 0.596300548705807, 0.8835611239879463], [0.9105461841775674, 0.5716005298745939, 0.5409610436618006, 0.1955691493408337, 0.5617394022142342], [0.858879326896179, 0.7930093348954994, 0.7558746659209005, 0.23571594360071102, 0.1504522251844438], [0.7604916447808325, 0.8435296111877547, 0.36678965072939407, 0.9011196795750558, 0.3968761562829036], [0.13016322898978072, 0.08514625332541093, 0.4632665911013738, 0.9641185247480573, 0.9176654745738501], [0.4317502306713694, 0.01774794086998388, 0.646376988999183, 0.20457188659878978, 0.6667860396554535], [0.6898471935703793, 0.35067185460226535, 0.01624724109375819, 0.9876756950922273, 0.7645879117114146]], eps=0.01):  # error tolerance\n    \"\"\"\n    Find an eps-Nash-equilibrium for a given two-player game with payoffs described by matrices A, B.\n    For example, for the classic Prisoner dilemma:\n    A=[[-1., -3.], [0., -2.]], B=[[-1., 0.], [-3., -2.]], and strategies = [[0, 1], [0, 1]]\n\n    \"\"\"\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))",
    "sols": [
      "def sol(A=[[0.32637957131438733, 0.6354291296026905, 0.8030884405572954, 0.15573400869108456, 0.009910899518800531], [0.11655112223772679, 0.9049518200114235, 0.03493953681413531, 0.2323649665048323, 0.10149902984419357], [0.02501288700255644, 0.8408583448368675, 0.05381871696043283, 0.16691342771910722, 0.04469980927199102], [0.2470008404164057, 0.35144970323072966, 0.5781202029219602, 0.5417221582567634, 0.6915315964876854], [0.5761118858007916, 0.610327980052143, 0.4500704245674991, 0.00237372714468298, 0.8543456083712235], [0.3528964212519685, 0.7319441233027391, 0.21232303227214566, 0.6178330032527302, 0.909451853791616], [0.46028529280704444, 0.14500789461024, 0.0246756377137759, 0.45500269499727986, 0.441524512369724]], B=[[0.2663059860553171, 0.0949913314096742, 0.08856504552855848, 0.596300548705807, 0.8835611239879463], [0.9105461841775674, 0.5716005298745939, 0.5409610436618006, 0.1955691493408337, 0.5617394022142342], [0.858879326896179, 0.7930093348954994, 0.7558746659209005, 0.23571594360071102, 0.1504522251844438], [0.7604916447808325, 0.8435296111877547, 0.36678965072939407, 0.9011196795750558, 0.3968761562829036], [0.13016322898978072, 0.08514625332541093, 0.4632665911013738, 0.9641185247480573, 0.9176654745738501], [0.4317502306713694, 0.01774794086998388, 0.646376988999183, 0.20457188659878978, 0.6667860396554535], [0.6898471935703793, 0.35067185460226535, 0.01624724109375819, 0.9876756950922273, 0.7645879117114146]], eps=0.01):\n    NUM_ATTEMPTS = 100\n\n    def sat(strategies: List[List[float]], A, B, eps):\n        m, n = len(A), len(A[0])\n        p, q = strategies\n        assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n        assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n        assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))\n\n    import random\n    r = random.Random(0)\n    dims = len(A), len(A[0])\n    # possible speedup: remove dominated strategies\n    for _attempt in range(NUM_ATTEMPTS):\n        strategies = []\n        for d in dims:\n            s = [max(0.0, r.random() - 0.5) for _ in range(d)]\n            tot = sum(s) + 1e-6\n            for i in range(d):\n                s[i] = (1.0 - sum(s[:-1])) if i == d - 1 else (s[i] / tot)  # to ensure sum is exactly 1.0\n            strategies.append(s)\n        if sat(strategies, A, B, eps):\n            return strategies"
    ],
    "module": "game_theory",
    "notes": "Computing a [Nash equilibrium](https://en.wikipedia.org/wiki/Nash_equilibrium) for a given\n[bimatrix game](https://en.wikipedia.org/wiki/Bimatrix_game) is known to be\nPPAD-hard in general. However, the challenge is be much easier for an approximate\n[eps-equilibrium](https://en.wikipedia.org/wiki/Epsilon-equilibrium) and of course for small games.",
    "taint_date": "2021-4-26",
    "weight": 0.05
  },
  {
    "name": "Nash_9",
    "sat": "def sat(strategies: List[List[float]], A=[[0.43218878920875836, 0.10463431092938436, 0.78227061691496, 0.1558587444185835, 0.6564016014963822, 0.7477801794470715], [0.37562017757711497, 0.6870878360392028, 0.5050794163044101, 0.2954595992340683, 0.3722390953795015, 0.4011348000597046], [0.029481316502110833, 0.2003676770126367, 0.8951417579527703, 0.8317661565382827, 0.8835785056507813, 0.9397215940200567], [0.06201629675424747, 0.8409427350327948, 0.8413112238757631, 0.9140258774775001, 0.1904831571905633, 0.5322320671729405], [0.12216623330370202, 0.5754126825208856, 0.5384080011653958, 0.6440815534740099, 0.4203428806243229, 0.2890242711604548], [0.8633644538723568, 0.42543299520747424, 0.256341253594925, 0.802033688793813, 0.5534160058175476, 0.10921928746224308], [0.4028573006664272, 0.6767920160646007, 0.8682142495014633, 0.26267429407938137, 0.5718802353897804, 0.7060207458388982], [0.13911387669675113, 0.7403551240901006, 0.7235875930018963, 0.8165829117375919, 0.6957658407829488, 0.4059240262802052], [0.8821345046551597, 0.8210037699034987, 0.2879863743867328, 0.9176809891443036, 0.7567665511541967, 0.20443376749606246]], B=[[0.5289821349323652, 0.06385993481747998, 0.9884065622446245, 0.31943830309348886, 0.2402290280972198, 0.02563531190528867], [0.19524967841210994, 0.7362477892653838, 0.2951500085849127, 0.6411151990087401, 0.5335950318303726, 0.5458479867201047], [0.06404227784033001, 0.4927275627580219, 0.48764997551743905, 0.6963996814562374, 0.4063769476209166, 0.13362344405192816], [0.29908014610768485, 0.47167010053391156, 0.453128423789825, 0.6881753133986542, 0.5370116418131157, 0.06338742882112469], [0.3311443672549609, 0.09239226083330665, 0.060004166703767514, 0.3487744051936674, 0.08841473749441009, 0.7014015792039342], [0.5387329063517947, 0.1669094829157488, 0.6442073212612376, 0.6819423138497293, 0.40309303175248523, 0.9544993255295066], [0.7969823811503776, 0.7408782983435112, 0.09889574812197233, 0.8214401620278946, 0.21460707368413534, 0.9797514349193799], [0.031278497001073546, 0.5654106809929841, 0.24289004028513972, 0.7533610962442678, 0.7255756771890282, 0.43667501507546014], [0.6017897324041475, 0.4547738465159963, 0.9113482452893733, 0.6680126867040715, 0.5995607910607395, 0.8615380988305832]], eps=0.5):  # error tolerance\n    \"\"\"\n    Find an eps-Nash-equilibrium for a given two-player game with payoffs described by matrices A, B.\n    For example, for the classic Prisoner dilemma:\n    A=[[-1., -3.], [0., -2.]], B=[[-1., 0.], [-3., -2.]], and strategies = [[0, 1], [0, 1]]\n\n    \"\"\"\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))",
    "sols": [
      "def sol(A=[[0.43218878920875836, 0.10463431092938436, 0.78227061691496, 0.1558587444185835, 0.6564016014963822, 0.7477801794470715], [0.37562017757711497, 0.6870878360392028, 0.5050794163044101, 0.2954595992340683, 0.3722390953795015, 0.4011348000597046], [0.029481316502110833, 0.2003676770126367, 0.8951417579527703, 0.8317661565382827, 0.8835785056507813, 0.9397215940200567], [0.06201629675424747, 0.8409427350327948, 0.8413112238757631, 0.9140258774775001, 0.1904831571905633, 0.5322320671729405], [0.12216623330370202, 0.5754126825208856, 0.5384080011653958, 0.6440815534740099, 0.4203428806243229, 0.2890242711604548], [0.8633644538723568, 0.42543299520747424, 0.256341253594925, 0.802033688793813, 0.5534160058175476, 0.10921928746224308], [0.4028573006664272, 0.6767920160646007, 0.8682142495014633, 0.26267429407938137, 0.5718802353897804, 0.7060207458388982], [0.13911387669675113, 0.7403551240901006, 0.7235875930018963, 0.8165829117375919, 0.6957658407829488, 0.4059240262802052], [0.8821345046551597, 0.8210037699034987, 0.2879863743867328, 0.9176809891443036, 0.7567665511541967, 0.20443376749606246]], B=[[0.5289821349323652, 0.06385993481747998, 0.9884065622446245, 0.31943830309348886, 0.2402290280972198, 0.02563531190528867], [0.19524967841210994, 0.7362477892653838, 0.2951500085849127, 0.6411151990087401, 0.5335950318303726, 0.5458479867201047], [0.06404227784033001, 0.4927275627580219, 0.48764997551743905, 0.6963996814562374, 0.4063769476209166, 0.13362344405192816], [0.29908014610768485, 0.47167010053391156, 0.453128423789825, 0.6881753133986542, 0.5370116418131157, 0.06338742882112469], [0.3311443672549609, 0.09239226083330665, 0.060004166703767514, 0.3487744051936674, 0.08841473749441009, 0.7014015792039342], [0.5387329063517947, 0.1669094829157488, 0.6442073212612376, 0.6819423138497293, 0.40309303175248523, 0.9544993255295066], [0.7969823811503776, 0.7408782983435112, 0.09889574812197233, 0.8214401620278946, 0.21460707368413534, 0.9797514349193799], [0.031278497001073546, 0.5654106809929841, 0.24289004028513972, 0.7533610962442678, 0.7255756771890282, 0.43667501507546014], [0.6017897324041475, 0.4547738465159963, 0.9113482452893733, 0.6680126867040715, 0.5995607910607395, 0.8615380988305832]], eps=0.5):\n    NUM_ATTEMPTS = 100\n\n    def sat(strategies: List[List[float]], A, B, eps):\n        m, n = len(A), len(A[0])\n        p, q = strategies\n        assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n        assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n        assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))\n\n    import random\n    r = random.Random(0)\n    dims = len(A), len(A[0])\n    # possible speedup: remove dominated strategies\n    for _attempt in range(NUM_ATTEMPTS):\n        strategies = []\n        for d in dims:\n            s = [max(0.0, r.random() - 0.5) for _ in range(d)]\n            tot = sum(s) + 1e-6\n            for i in range(d):\n                s[i] = (1.0 - sum(s[:-1])) if i == d - 1 else (s[i] / tot)  # to ensure sum is exactly 1.0\n            strategies.append(s)\n        if sat(strategies, A, B, eps):\n            return strategies"
    ],
    "module": "game_theory",
    "notes": "Computing a [Nash equilibrium](https://en.wikipedia.org/wiki/Nash_equilibrium) for a given\n[bimatrix game](https://en.wikipedia.org/wiki/Bimatrix_game) is known to be\nPPAD-hard in general. However, the challenge is be much easier for an approximate\n[eps-equilibrium](https://en.wikipedia.org/wiki/Epsilon-equilibrium) and of course for small games.",
    "taint_date": "2021-4-26",
    "weight": 0.05
  },
  {
    "name": "ZeroSum_0",
    "sat": "def sat(strategies: List[List[float]], A=[[0.0, -0.5, 1.0], [0.75, 0.0, -1.0], [-1.0, 0.4, 0.0]], eps=0.01):\n    \"\"\"\n    Compute minimax optimal strategies for a given zero-sum game up to error tolerance eps.\n    For example, rock paper scissors has\n    A = [[0., -1., 1.], [1., 0., -1.], [-1., 1., 0.]] and strategies = [[0.33, 0.33, 0.34]] * 2\n    \"\"\"\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert all(len(row) == n for row in A), \"inputs are a matrix\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n)))",
    "sols": [
      "def sol(A=[[0.0, -0.5, 1.0], [0.75, 0.0, -1.0], [-1.0, 0.4, 0.0]], eps=0.01):\n    MAX_ITER = 10**4\n    m, n = len(A), len(A[0])\n    a = [0 for _i in range(m)]\n    b = [0 for _j in range(n)]\n\n    for count in range(1, MAX_ITER):\n        i_star = max(range(m), key=lambda i: sum(A[i][j] * b[j] for j in range(n)))\n        j_star = min(range(n), key=lambda j: sum(A[i][j] * a[i] for i in range(m)))\n        a[i_star] += 1\n        b[j_star] += 1\n        p = [x / (count + 1e-6) for x in a]\n        p[-1] = 1 - sum(p[:-1])  # rounding issues\n        q = [x / (count + 1e-6) for x in b]\n        q[-1] = 1 - sum(q[:-1])  # rounding issues\n\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        if (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n))):\n            return [p, q]"
    ],
    "module": "game_theory",
    "notes": "Compute minimax optimal strategies for a given\n[zero-sum game](https://en.wikipedia.org/wiki/Zero-sum_game). This problem is known to be equivalent to\nLinear Programming. Note that the provided instances are all quite easy---harder solutions could readily\nbe made by decreasing the accuracy tolerance `eps` at which point the solution we provided would fail and\nmore efficient algorithms would be needed.",
    "taint_date": "2021-4-26",
    "weight": 0.05
  },
  {
    "name": "ZeroSum_1",
    "sat": "def sat(strategies: List[List[float]], A=[[0.5303369225581901, 0.4458248560112187, 0.47857713121903245], [0.07696760921779966, 0.40492093882513336, 0.8351857615090292]], eps=0.5):\n    \"\"\"\n    Compute minimax optimal strategies for a given zero-sum game up to error tolerance eps.\n    For example, rock paper scissors has\n    A = [[0., -1., 1.], [1., 0., -1.], [-1., 1., 0.]] and strategies = [[0.33, 0.33, 0.34]] * 2\n    \"\"\"\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert all(len(row) == n for row in A), \"inputs are a matrix\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n)))",
    "sols": [
      "def sol(A=[[0.5303369225581901, 0.4458248560112187, 0.47857713121903245], [0.07696760921779966, 0.40492093882513336, 0.8351857615090292]], eps=0.5):\n    MAX_ITER = 10**4\n    m, n = len(A), len(A[0])\n    a = [0 for _i in range(m)]\n    b = [0 for _j in range(n)]\n\n    for count in range(1, MAX_ITER):\n        i_star = max(range(m), key=lambda i: sum(A[i][j] * b[j] for j in range(n)))\n        j_star = min(range(n), key=lambda j: sum(A[i][j] * a[i] for i in range(m)))\n        a[i_star] += 1\n        b[j_star] += 1\n        p = [x / (count + 1e-6) for x in a]\n        p[-1] = 1 - sum(p[:-1])  # rounding issues\n        q = [x / (count + 1e-6) for x in b]\n        q[-1] = 1 - sum(q[:-1])  # rounding issues\n\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        if (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n))):\n            return [p, q]"
    ],
    "module": "game_theory",
    "notes": "Compute minimax optimal strategies for a given\n[zero-sum game](https://en.wikipedia.org/wiki/Zero-sum_game). This problem is known to be equivalent to\nLinear Programming. Note that the provided instances are all quite easy---harder solutions could readily\nbe made by decreasing the accuracy tolerance `eps` at which point the solution we provided would fail and\nmore efficient algorithms would be needed.",
    "taint_date": "2021-4-26",
    "weight": 0.05
  },
  {
    "name": "ZeroSum_2",
    "sat": "def sat(strategies: List[List[float]], A=[[0.8737161029595927, 0.3380931327691771, 0.20525289813478453, 0.9772812942597162, 0.6011469499669913, 0.5657635078441663, 0.007362594660960342, 0.5523386597843655, 0.06548815570594102], [0.8440989957774637, 0.11456946368545384, 0.6266416865322296, 0.6112942108318355, 0.15090892170912606, 0.19181369635746925, 0.23558304486799253, 0.08883158381322309, 0.5626427070785186], [0.5990766112287766, 0.16770300013300976, 0.7790082288508813, 0.8213933806929374, 0.8409107317631046, 0.32215242243482034, 0.04927911582647726, 0.18589922022642869, 0.4416673076660764]], eps=0.1):\n    \"\"\"\n    Compute minimax optimal strategies for a given zero-sum game up to error tolerance eps.\n    For example, rock paper scissors has\n    A = [[0., -1., 1.], [1., 0., -1.], [-1., 1., 0.]] and strategies = [[0.33, 0.33, 0.34]] * 2\n    \"\"\"\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert all(len(row) == n for row in A), \"inputs are a matrix\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n)))",
    "sols": [
      "def sol(A=[[0.8737161029595927, 0.3380931327691771, 0.20525289813478453, 0.9772812942597162, 0.6011469499669913, 0.5657635078441663, 0.007362594660960342, 0.5523386597843655, 0.06548815570594102], [0.8440989957774637, 0.11456946368545384, 0.6266416865322296, 0.6112942108318355, 0.15090892170912606, 0.19181369635746925, 0.23558304486799253, 0.08883158381322309, 0.5626427070785186], [0.5990766112287766, 0.16770300013300976, 0.7790082288508813, 0.8213933806929374, 0.8409107317631046, 0.32215242243482034, 0.04927911582647726, 0.18589922022642869, 0.4416673076660764]], eps=0.1):\n    MAX_ITER = 10**4\n    m, n = len(A), len(A[0])\n    a = [0 for _i in range(m)]\n    b = [0 for _j in range(n)]\n\n    for count in range(1, MAX_ITER):\n        i_star = max(range(m), key=lambda i: sum(A[i][j] * b[j] for j in range(n)))\n        j_star = min(range(n), key=lambda j: sum(A[i][j] * a[i] for i in range(m)))\n        a[i_star] += 1\n        b[j_star] += 1\n        p = [x / (count + 1e-6) for x in a]\n        p[-1] = 1 - sum(p[:-1])  # rounding issues\n        q = [x / (count + 1e-6) for x in b]\n        q[-1] = 1 - sum(q[:-1])  # rounding issues\n\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        if (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n))):\n            return [p, q]"
    ],
    "module": "game_theory",
    "notes": "Compute minimax optimal strategies for a given\n[zero-sum game](https://en.wikipedia.org/wiki/Zero-sum_game). This problem is known to be equivalent to\nLinear Programming. Note that the provided instances are all quite easy---harder solutions could readily\nbe made by decreasing the accuracy tolerance `eps` at which point the solution we provided would fail and\nmore efficient algorithms would be needed.",
    "taint_date": "2021-4-26",
    "weight": 0.05
  },
  {
    "name": "ZeroSum_3",
    "sat": "def sat(strategies: List[List[float]], A=[[0.35120738216503444, 0.6305426964442432, 0.09361690123750299, 0.17215263015782456, 0.3569473010721259], [0.9341169088059124, 0.43769720086284414, 0.35911118735479475, 0.37956863261812823, 0.9170151449695092]], eps=0.1):\n    \"\"\"\n    Compute minimax optimal strategies for a given zero-sum game up to error tolerance eps.\n    For example, rock paper scissors has\n    A = [[0., -1., 1.], [1., 0., -1.], [-1., 1., 0.]] and strategies = [[0.33, 0.33, 0.34]] * 2\n    \"\"\"\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert all(len(row) == n for row in A), \"inputs are a matrix\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n)))",
    "sols": [
      "def sol(A=[[0.35120738216503444, 0.6305426964442432, 0.09361690123750299, 0.17215263015782456, 0.3569473010721259], [0.9341169088059124, 0.43769720086284414, 0.35911118735479475, 0.37956863261812823, 0.9170151449695092]], eps=0.1):\n    MAX_ITER = 10**4\n    m, n = len(A), len(A[0])\n    a = [0 for _i in range(m)]\n    b = [0 for _j in range(n)]\n\n    for count in range(1, MAX_ITER):\n        i_star = max(range(m), key=lambda i: sum(A[i][j] * b[j] for j in range(n)))\n        j_star = min(range(n), key=lambda j: sum(A[i][j] * a[i] for i in range(m)))\n        a[i_star] += 1\n        b[j_star] += 1\n        p = [x / (count + 1e-6) for x in a]\n        p[-1] = 1 - sum(p[:-1])  # rounding issues\n        q = [x / (count + 1e-6) for x in b]\n        q[-1] = 1 - sum(q[:-1])  # rounding issues\n\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        if (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n))):\n            return [p, q]"
    ],
    "module": "game_theory",
    "notes": "Compute minimax optimal strategies for a given\n[zero-sum game](https://en.wikipedia.org/wiki/Zero-sum_game). This problem is known to be equivalent to\nLinear Programming. Note that the provided instances are all quite easy---harder solutions could readily\nbe made by decreasing the accuracy tolerance `eps` at which point the solution we provided would fail and\nmore efficient algorithms would be needed.",
    "taint_date": "2021-4-26",
    "weight": 0.05
  },
  {
    "name": "ZeroSum_4",
    "sat": "def sat(strategies: List[List[float]], A=[[0.6637255179009651, 0.9756262037263238, 0.4926064602986052, 0.4097654368373934, 0.9284930704872523], [0.21641001481296873, 0.3381822244340763, 0.10113277325663139, 0.867285215856176, 0.27100572371021947], [0.7831143244052009, 0.6045743236145783, 0.10582868480749341, 0.5591604978434377, 0.27602687543748194], [0.8431935916393734, 0.09227518008541435, 0.06352450108543961, 0.13377427705288458, 0.8928593671227156], [0.15573895145866545, 0.3897235344943152, 0.5095156356106815, 0.25893802778092634, 0.4730747656010391]], eps=0.1):\n    \"\"\"\n    Compute minimax optimal strategies for a given zero-sum game up to error tolerance eps.\n    For example, rock paper scissors has\n    A = [[0., -1., 1.], [1., 0., -1.], [-1., 1., 0.]] and strategies = [[0.33, 0.33, 0.34]] * 2\n    \"\"\"\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert all(len(row) == n for row in A), \"inputs are a matrix\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n)))",
    "sols": [
      "def sol(A=[[0.6637255179009651, 0.9756262037263238, 0.4926064602986052, 0.4097654368373934, 0.9284930704872523], [0.21641001481296873, 0.3381822244340763, 0.10113277325663139, 0.867285215856176, 0.27100572371021947], [0.7831143244052009, 0.6045743236145783, 0.10582868480749341, 0.5591604978434377, 0.27602687543748194], [0.8431935916393734, 0.09227518008541435, 0.06352450108543961, 0.13377427705288458, 0.8928593671227156], [0.15573895145866545, 0.3897235344943152, 0.5095156356106815, 0.25893802778092634, 0.4730747656010391]], eps=0.1):\n    MAX_ITER = 10**4\n    m, n = len(A), len(A[0])\n    a = [0 for _i in range(m)]\n    b = [0 for _j in range(n)]\n\n    for count in range(1, MAX_ITER):\n        i_star = max(range(m), key=lambda i: sum(A[i][j] * b[j] for j in range(n)))\n        j_star = min(range(n), key=lambda j: sum(A[i][j] * a[i] for i in range(m)))\n        a[i_star] += 1\n        b[j_star] += 1\n        p = [x / (count + 1e-6) for x in a]\n        p[-1] = 1 - sum(p[:-1])  # rounding issues\n        q = [x / (count + 1e-6) for x in b]\n        q[-1] = 1 - sum(q[:-1])  # rounding issues\n\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        if (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n))):\n            return [p, q]"
    ],
    "module": "game_theory",
    "notes": "Compute minimax optimal strategies for a given\n[zero-sum game](https://en.wikipedia.org/wiki/Zero-sum_game). This problem is known to be equivalent to\nLinear Programming. Note that the provided instances are all quite easy---harder solutions could readily\nbe made by decreasing the accuracy tolerance `eps` at which point the solution we provided would fail and\nmore efficient algorithms would be needed.",
    "taint_date": "2021-4-26",
    "weight": 0.05
  },
  {
    "name": "ZeroSum_5",
    "sat": "def sat(strategies: List[List[float]], A=[[0.5427170435019993, 0.8314387839901554, 0.40265673273776437], [0.8879202542582866, 0.9167404477056673, 0.6264251270454744], [0.9565483780322627, 0.9927960278935438, 0.7725293776030325], [0.9508769988672289, 0.6588794531264988, 0.5308476467902518], [0.48798202071070185, 0.41670404524107596, 0.017619877250776073], [0.3023387135778959, 0.3414973944050095, 0.6837221105285238]], eps=0.5):\n    \"\"\"\n    Compute minimax optimal strategies for a given zero-sum game up to error tolerance eps.\n    For example, rock paper scissors has\n    A = [[0., -1., 1.], [1., 0., -1.], [-1., 1., 0.]] and strategies = [[0.33, 0.33, 0.34]] * 2\n    \"\"\"\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert all(len(row) == n for row in A), \"inputs are a matrix\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n)))",
    "sols": [
      "def sol(A=[[0.5427170435019993, 0.8314387839901554, 0.40265673273776437], [0.8879202542582866, 0.9167404477056673, 0.6264251270454744], [0.9565483780322627, 0.9927960278935438, 0.7725293776030325], [0.9508769988672289, 0.6588794531264988, 0.5308476467902518], [0.48798202071070185, 0.41670404524107596, 0.017619877250776073], [0.3023387135778959, 0.3414973944050095, 0.6837221105285238]], eps=0.5):\n    MAX_ITER = 10**4\n    m, n = len(A), len(A[0])\n    a = [0 for _i in range(m)]\n    b = [0 for _j in range(n)]\n\n    for count in range(1, MAX_ITER):\n        i_star = max(range(m), key=lambda i: sum(A[i][j] * b[j] for j in range(n)))\n        j_star = min(range(n), key=lambda j: sum(A[i][j] * a[i] for i in range(m)))\n        a[i_star] += 1\n        b[j_star] += 1\n        p = [x / (count + 1e-6) for x in a]\n        p[-1] = 1 - sum(p[:-1])  # rounding issues\n        q = [x / (count + 1e-6) for x in b]\n        q[-1] = 1 - sum(q[:-1])  # rounding issues\n\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        if (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n))):\n            return [p, q]"
    ],
    "module": "game_theory",
    "notes": "Compute minimax optimal strategies for a given\n[zero-sum game](https://en.wikipedia.org/wiki/Zero-sum_game). This problem is known to be equivalent to\nLinear Programming. Note that the provided instances are all quite easy---harder solutions could readily\nbe made by decreasing the accuracy tolerance `eps` at which point the solution we provided would fail and\nmore efficient algorithms would be needed.",
    "taint_date": "2021-4-26",
    "weight": 0.05
  },
  {
    "name": "ZeroSum_6",
    "sat": "def sat(strategies: List[List[float]], A=[[0.6972221817943854, 0.9955028071960343, 0.03463887607986338, 0.638657923012996, 0.8537012825970901], [0.16559730897385594, 0.8394646305946671, 0.769697042626638, 0.6867647405809145, 0.3945056609649893], [0.5619928261209739, 0.24336330577953846, 0.07584130014440837, 0.6385191455869482, 0.0007916075338669781], [0.16569887288415097, 0.49008648775079067, 0.761578050649744, 0.5176275439913738, 0.18150271687483688], [0.043155723587307904, 0.15453917685064722, 0.30538290181479955, 0.46332924213029014, 0.2600926879113151], [0.8268020460676769, 0.45309157564522917, 0.3336754086871935, 0.8408515675083248, 0.23026311105317387], [0.23610302502618818, 0.7284673848642883, 0.5960249213974684, 0.8148021440627474, 0.10158962537712557]], eps=0.01):\n    \"\"\"\n    Compute minimax optimal strategies for a given zero-sum game up to error tolerance eps.\n    For example, rock paper scissors has\n    A = [[0., -1., 1.], [1., 0., -1.], [-1., 1., 0.]] and strategies = [[0.33, 0.33, 0.34]] * 2\n    \"\"\"\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert all(len(row) == n for row in A), \"inputs are a matrix\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n)))",
    "sols": [
      "def sol(A=[[0.6972221817943854, 0.9955028071960343, 0.03463887607986338, 0.638657923012996, 0.8537012825970901], [0.16559730897385594, 0.8394646305946671, 0.769697042626638, 0.6867647405809145, 0.3945056609649893], [0.5619928261209739, 0.24336330577953846, 0.07584130014440837, 0.6385191455869482, 0.0007916075338669781], [0.16569887288415097, 0.49008648775079067, 0.761578050649744, 0.5176275439913738, 0.18150271687483688], [0.043155723587307904, 0.15453917685064722, 0.30538290181479955, 0.46332924213029014, 0.2600926879113151], [0.8268020460676769, 0.45309157564522917, 0.3336754086871935, 0.8408515675083248, 0.23026311105317387], [0.23610302502618818, 0.7284673848642883, 0.5960249213974684, 0.8148021440627474, 0.10158962537712557]], eps=0.01):\n    MAX_ITER = 10**4\n    m, n = len(A), len(A[0])\n    a = [0 for _i in range(m)]\n    b = [0 for _j in range(n)]\n\n    for count in range(1, MAX_ITER):\n        i_star = max(range(m), key=lambda i: sum(A[i][j] * b[j] for j in range(n)))\n        j_star = min(range(n), key=lambda j: sum(A[i][j] * a[i] for i in range(m)))\n        a[i_star] += 1\n        b[j_star] += 1\n        p = [x / (count + 1e-6) for x in a]\n        p[-1] = 1 - sum(p[:-1])  # rounding issues\n        q = [x / (count + 1e-6) for x in b]\n        q[-1] = 1 - sum(q[:-1])  # rounding issues\n\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        if (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n))):\n            return [p, q]"
    ],
    "module": "game_theory",
    "notes": "Compute minimax optimal strategies for a given\n[zero-sum game](https://en.wikipedia.org/wiki/Zero-sum_game). This problem is known to be equivalent to\nLinear Programming. Note that the provided instances are all quite easy---harder solutions could readily\nbe made by decreasing the accuracy tolerance `eps` at which point the solution we provided would fail and\nmore efficient algorithms would be needed.",
    "taint_date": "2021-4-26",
    "weight": 0.05
  },
  {
    "name": "ZeroSum_7",
    "sat": "def sat(strategies: List[List[float]], A=[[0.863962708361941, 0.7267648611659883, 0.25333940861520887, 0.3578877074038227, 0.7624222188481827, 0.25727277324847797], [0.008704912029144696, 0.831746935419515, 0.24183035927564067, 0.11243165687766432, 0.3331518522717235, 0.5423338539568184]], eps=0.1):\n    \"\"\"\n    Compute minimax optimal strategies for a given zero-sum game up to error tolerance eps.\n    For example, rock paper scissors has\n    A = [[0., -1., 1.], [1., 0., -1.], [-1., 1., 0.]] and strategies = [[0.33, 0.33, 0.34]] * 2\n    \"\"\"\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert all(len(row) == n for row in A), \"inputs are a matrix\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n)))",
    "sols": [
      "def sol(A=[[0.863962708361941, 0.7267648611659883, 0.25333940861520887, 0.3578877074038227, 0.7624222188481827, 0.25727277324847797], [0.008704912029144696, 0.831746935419515, 0.24183035927564067, 0.11243165687766432, 0.3331518522717235, 0.5423338539568184]], eps=0.1):\n    MAX_ITER = 10**4\n    m, n = len(A), len(A[0])\n    a = [0 for _i in range(m)]\n    b = [0 for _j in range(n)]\n\n    for count in range(1, MAX_ITER):\n        i_star = max(range(m), key=lambda i: sum(A[i][j] * b[j] for j in range(n)))\n        j_star = min(range(n), key=lambda j: sum(A[i][j] * a[i] for i in range(m)))\n        a[i_star] += 1\n        b[j_star] += 1\n        p = [x / (count + 1e-6) for x in a]\n        p[-1] = 1 - sum(p[:-1])  # rounding issues\n        q = [x / (count + 1e-6) for x in b]\n        q[-1] = 1 - sum(q[:-1])  # rounding issues\n\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        if (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n))):\n            return [p, q]"
    ],
    "module": "game_theory",
    "notes": "Compute minimax optimal strategies for a given\n[zero-sum game](https://en.wikipedia.org/wiki/Zero-sum_game). This problem is known to be equivalent to\nLinear Programming. Note that the provided instances are all quite easy---harder solutions could readily\nbe made by decreasing the accuracy tolerance `eps` at which point the solution we provided would fail and\nmore efficient algorithms would be needed.",
    "taint_date": "2021-4-26",
    "weight": 0.05
  },
  {
    "name": "ZeroSum_8",
    "sat": "def sat(strategies: List[List[float]], A=[[0.7341661289830135, 0.14904516362745412, 0.12233727280546125, 0.18914930565254684, 0.8167614139739929], [0.9936175164088098, 0.6990640104344674, 0.932021987248477, 0.12887770796685383, 0.29561803987966284], [0.29239455940666237, 0.5544417423009688, 0.2614377407533791, 0.05917034729370352, 0.24119420203251596], [0.5176395633710928, 0.26737409633987963, 0.5314243854814823, 0.8931458084867675, 0.49502080159123585], [0.39274090195455913, 0.2458125384374379, 0.08999209122107266, 0.8493123966405037, 0.5564380133581945], [0.8272998974698198, 0.17122551653768692, 0.10755028266099409, 0.08889544880629319, 0.779478196590326], [0.034173450711001974, 0.8835026280433949, 0.4784767191357908, 0.47702037976755807, 0.6415599896168853], [0.12826323397316342, 0.6866359762459922, 0.8784740812028159, 0.8501760201164382, 0.5174720503330829]], eps=0.1):\n    \"\"\"\n    Compute minimax optimal strategies for a given zero-sum game up to error tolerance eps.\n    For example, rock paper scissors has\n    A = [[0., -1., 1.], [1., 0., -1.], [-1., 1., 0.]] and strategies = [[0.33, 0.33, 0.34]] * 2\n    \"\"\"\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert all(len(row) == n for row in A), \"inputs are a matrix\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n)))",
    "sols": [
      "def sol(A=[[0.7341661289830135, 0.14904516362745412, 0.12233727280546125, 0.18914930565254684, 0.8167614139739929], [0.9936175164088098, 0.6990640104344674, 0.932021987248477, 0.12887770796685383, 0.29561803987966284], [0.29239455940666237, 0.5544417423009688, 0.2614377407533791, 0.05917034729370352, 0.24119420203251596], [0.5176395633710928, 0.26737409633987963, 0.5314243854814823, 0.8931458084867675, 0.49502080159123585], [0.39274090195455913, 0.2458125384374379, 0.08999209122107266, 0.8493123966405037, 0.5564380133581945], [0.8272998974698198, 0.17122551653768692, 0.10755028266099409, 0.08889544880629319, 0.779478196590326], [0.034173450711001974, 0.8835026280433949, 0.4784767191357908, 0.47702037976755807, 0.6415599896168853], [0.12826323397316342, 0.6866359762459922, 0.8784740812028159, 0.8501760201164382, 0.5174720503330829]], eps=0.1):\n    MAX_ITER = 10**4\n    m, n = len(A), len(A[0])\n    a = [0 for _i in range(m)]\n    b = [0 for _j in range(n)]\n\n    for count in range(1, MAX_ITER):\n        i_star = max(range(m), key=lambda i: sum(A[i][j] * b[j] for j in range(n)))\n        j_star = min(range(n), key=lambda j: sum(A[i][j] * a[i] for i in range(m)))\n        a[i_star] += 1\n        b[j_star] += 1\n        p = [x / (count + 1e-6) for x in a]\n        p[-1] = 1 - sum(p[:-1])  # rounding issues\n        q = [x / (count + 1e-6) for x in b]\n        q[-1] = 1 - sum(q[:-1])  # rounding issues\n\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        if (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n))):\n            return [p, q]"
    ],
    "module": "game_theory",
    "notes": "Compute minimax optimal strategies for a given\n[zero-sum game](https://en.wikipedia.org/wiki/Zero-sum_game). This problem is known to be equivalent to\nLinear Programming. Note that the provided instances are all quite easy---harder solutions could readily\nbe made by decreasing the accuracy tolerance `eps` at which point the solution we provided would fail and\nmore efficient algorithms would be needed.",
    "taint_date": "2021-4-26",
    "weight": 0.05
  },
  {
    "name": "ZeroSum_9",
    "sat": "def sat(strategies: List[List[float]], A=[[0.6554663257783704, 0.15029504459122212, 0.5559299563430086, 0.20589476603778367, 0.7643064152711786, 0.6061820149665644, 0.8807920264568392], [0.7052229233506515, 0.5603338206982549, 0.8274118128945858, 0.8071001911431841, 0.06186832278763432, 0.980364619124097, 0.6896361000010167], [0.018209866058666258, 0.8564736786315749, 0.7957292442666065, 0.9519170033377001, 0.07263645857173984, 0.7331321653724924, 0.5196558167705689], [0.10579739406903566, 0.934689927710577, 0.6922956278288943, 0.14492641276580875, 0.796810429850541, 0.5899737140304394, 0.2047655778435571], [0.39979079423605857, 0.9126901622329138, 0.35224147681493423, 0.823524289848973, 0.7819966476418646, 0.608636155106744, 0.07598349435456653], [0.4984477840166731, 0.9516414856389805, 0.22295289737196256, 0.04124192865530141, 0.30698520530579365, 0.6782972240748913, 0.9960645166028709]], eps=0.01):\n    \"\"\"\n    Compute minimax optimal strategies for a given zero-sum game up to error tolerance eps.\n    For example, rock paper scissors has\n    A = [[0., -1., 1.], [1., 0., -1.], [-1., 1., 0.]] and strategies = [[0.33, 0.33, 0.34]] * 2\n    \"\"\"\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert all(len(row) == n for row in A), \"inputs are a matrix\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n)))",
    "sols": [
      "def sol(A=[[0.6554663257783704, 0.15029504459122212, 0.5559299563430086, 0.20589476603778367, 0.7643064152711786, 0.6061820149665644, 0.8807920264568392], [0.7052229233506515, 0.5603338206982549, 0.8274118128945858, 0.8071001911431841, 0.06186832278763432, 0.980364619124097, 0.6896361000010167], [0.018209866058666258, 0.8564736786315749, 0.7957292442666065, 0.9519170033377001, 0.07263645857173984, 0.7331321653724924, 0.5196558167705689], [0.10579739406903566, 0.934689927710577, 0.6922956278288943, 0.14492641276580875, 0.796810429850541, 0.5899737140304394, 0.2047655778435571], [0.39979079423605857, 0.9126901622329138, 0.35224147681493423, 0.823524289848973, 0.7819966476418646, 0.608636155106744, 0.07598349435456653], [0.4984477840166731, 0.9516414856389805, 0.22295289737196256, 0.04124192865530141, 0.30698520530579365, 0.6782972240748913, 0.9960645166028709]], eps=0.01):\n    MAX_ITER = 10**4\n    m, n = len(A), len(A[0])\n    a = [0 for _i in range(m)]\n    b = [0 for _j in range(n)]\n\n    for count in range(1, MAX_ITER):\n        i_star = max(range(m), key=lambda i: sum(A[i][j] * b[j] for j in range(n)))\n        j_star = min(range(n), key=lambda j: sum(A[i][j] * a[i] for i in range(m)))\n        a[i_star] += 1\n        b[j_star] += 1\n        p = [x / (count + 1e-6) for x in a]\n        p[-1] = 1 - sum(p[:-1])  # rounding issues\n        q = [x / (count + 1e-6) for x in b]\n        q[-1] = 1 - sum(q[:-1])  # rounding issues\n\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        if (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n))):\n            return [p, q]"
    ],
    "module": "game_theory",
    "notes": "Compute minimax optimal strategies for a given\n[zero-sum game](https://en.wikipedia.org/wiki/Zero-sum_game). This problem is known to be equivalent to\nLinear Programming. Note that the provided instances are all quite easy---harder solutions could readily\nbe made by decreasing the accuracy tolerance `eps` at which point the solution we provided would fail and\nmore efficient algorithms would be needed.",
    "taint_date": "2021-4-26",
    "weight": 0.05
  },
  {
    "name": "Conway99_0",
    "sat": "def sat(edges: List[List[int]]):\n    \"\"\"\n    Find an undirected graph with 99 vertices, in which each two adjacent vertices have exactly one common\n    neighbor, and in which each two non-adjacent vertices have exactly two common neighbors.\n    \"\"\"\n    # first compute neighbors sets, N:\n    N = {i: {j for j in range(99) if j != i and ([i, j] in edges or [j, i] in edges)} for i in range(99)}\n    return all(len(N[i].intersection(N[j])) == (1 if j in N[i] else 2) for i in range(99) for j in range(i))",
    "sols": [],
    "module": "graphs",
    "notes": "Conway's 99-graph problem (*unsolved*, open problem)\n\nConway's 99-graph problem is an unsolved problem in graph theory.\nIn Conway's terminology, from [Five $1,000 Problems (Update 2017)](https://oeis.org/A248380/a248380.pdf)\n\"Is there a graph with 99 vertices in which every edge (i.e. pair of joined vertices) belongs to a unique\ntriangle and every nonedge (pair of unjoined vertices) to a unique quadrilateral?\"\n\nSee also this [Wikipedia article](https://en.wikipedia.org/w/index.php?title=Conway%27s_99-graph_problem).",
    "taint_date": "2021-4-26",
    "weight": 0.08333333333333333
  },
  {
    "name": "AnyEdge_0",
    "sat": "def sat(e: List[int], edges=[[0, 217], [40, 11], [17, 29], [11, 12], [31, 51]]):\n    \"\"\"Find any edge in edges.\"\"\"\n    return e in edges",
    "sols": [
      "def sol(edges=[[0, 217], [40, 11], [17, 29], [11, 12], [31, 51]]):\n    return edges[0]"
    ],
    "module": "graphs",
    "notes": "Trivial [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyEdge_1",
    "sat": "def sat(e: List[int], edges=[[0, 1], [1, 1], [0, 0]]):\n    \"\"\"Find any edge in edges.\"\"\"\n    return e in edges",
    "sols": [
      "def sol(edges=[[0, 1], [1, 1], [0, 0]]):\n    return edges[0]"
    ],
    "module": "graphs",
    "notes": "Trivial [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyEdge_2",
    "sat": "def sat(e: List[int], edges=[[1, 0], [0, 1], [1, 1]]):\n    \"\"\"Find any edge in edges.\"\"\"\n    return e in edges",
    "sols": [
      "def sol(edges=[[1, 0], [0, 1], [1, 1]]):\n    return edges[0]"
    ],
    "module": "graphs",
    "notes": "Trivial [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyEdge_3",
    "sat": "def sat(e: List[int], edges=[[1, 15], [15, 3], [5, 12], [11, 0], [8, 5], [1, 9], [3, 6], [5, 10], [12, 0], [6, 6], [9, 2], [13, 15], [2, 9], [5, 1], [10, 11], [4, 12], [0, 6], [8, 12], [15, 14], [1, 13], [11, 7], [15, 4], [13, 5], [7, 14], [14, 5], [12, 2], [7, 8], [2, 14], [3, 15], [2, 2], [7, 2], [3, 4], [4, 2], [1, 3], [4, 4], [3, 11], [14, 6], [14, 8], [14, 12], [7, 15], [7, 3], [7, 10], [10, 8], [7, 13], [2, 15], [14, 0], [1, 5], [11, 15], [1, 8], [6, 4], [15, 8], [9, 3], [1, 10], [2, 3], [4, 13], [7, 5], [2, 11], [0, 1], [15, 6], [0, 2], [5, 5]]):\n    \"\"\"Find any edge in edges.\"\"\"\n    return e in edges",
    "sols": [
      "def sol(edges=[[1, 15], [15, 3], [5, 12], [11, 0], [8, 5], [1, 9], [3, 6], [5, 10], [12, 0], [6, 6], [9, 2], [13, 15], [2, 9], [5, 1], [10, 11], [4, 12], [0, 6], [8, 12], [15, 14], [1, 13], [11, 7], [15, 4], [13, 5], [7, 14], [14, 5], [12, 2], [7, 8], [2, 14], [3, 15], [2, 2], [7, 2], [3, 4], [4, 2], [1, 3], [4, 4], [3, 11], [14, 6], [14, 8], [14, 12], [7, 15], [7, 3], [7, 10], [10, 8], [7, 13], [2, 15], [14, 0], [1, 5], [11, 15], [1, 8], [6, 4], [15, 8], [9, 3], [1, 10], [2, 3], [4, 13], [7, 5], [2, 11], [0, 1], [15, 6], [0, 2], [5, 5]]):\n    return edges[0]"
    ],
    "module": "graphs",
    "notes": "Trivial [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyEdge_4",
    "sat": "def sat(e: List[int], edges=[[7, 84], [72, 0], [65, 93], [66, 13], [39, 15], [91, 6], [16, 77], [43, 71], [34, 72], [83, 1], [91, 93], [41, 20], [71, 69], [51, 60], [75, 22], [25, 82], [93, 45], [54, 31], [38, 22], [76, 33], [18, 81], [91, 74], [28, 97], [39, 69], [15, 26], [83, 75], [57, 24], [94, 38], [26, 23], [40, 48], [37, 20], [90, 84], [75, 8], [36, 21], [93, 11], [97, 74], [79, 74], [69, 36], [3, 29], [66, 82], [49, 15], [52, 43], [76, 25], [39, 11], [9, 93], [68, 55], [53, 46], [29, 90], [12, 81], [44, 66], [54, 55], [2, 30], [1, 6], [8, 61], [67, 10], [61, 84], [72, 51], [13, 27], [93, 53], [44, 38], [86, 14], [90, 8], [22, 62], [5, 72], [63, 36], [31, 51], [83, 5], [36, 53], [92, 78], [44, 80], [23, 16], [43, 16], [18, 37], [34, 14], [23, 6], [19, 61], [59, 10], [85, 30], [25, 80], [76, 39], [21, 28], [60, 47], [15, 43], [26, 80], [59, 19], [83, 81], [4, 64], [3, 71], [52, 34], [90, 14], [44, 84], [37, 56], [76, 10], [69, 89], [30, 38], [17, 38], [42, 7], [79, 62], [15, 87], [45, 4], [96, 0], [44, 43], [84, 42], [26, 22], [1, 91], [1, 11], [68, 7], [72, 32], [8, 0], [64, 59], [16, 86], [25, 46], [65, 30], [10, 43], [89, 43], [55, 0], [91, 66], [49, 0], [22, 77], [80, 21], [16, 58], [55, 45], [64, 13], [55, 56], [89, 96], [84, 20], [11, 74], [92, 91], [36, 15], [51, 8], [4, 44], [55, 55], [6, 83], [76, 5], [3, 11], [15, 96], [18, 15], [43, 58], [19, 70], [87, 41], [43, 47], [2, 51], [47, 32], [14, 93], [27, 61], [21, 26], [78, 88], [52, 40], [21, 79], [12, 8], [74, 73], [5, 22], [50, 4], [15, 67], [87, 10], [90, 24], [17, 45], [75, 96], [27, 81], [76, 29], [52, 93], [74, 40], [48, 62], [5, 75], [68, 58], [61, 19], [56, 54], [4, 29], [26, 60], [24, 1], [37, 41], [95, 63], [49, 37], [81, 18], [79, 91], [82, 8], [29, 73], [55, 84], [18, 13], [32, 7], [77, 63], [26, 72], [90, 5], [95, 4], [46, 13], [0, 64], [84, 34], [52, 51], [32, 30], [24, 55], [51, 17], [12, 7], [73, 34], [54, 47], [96, 95], [65, 67], [46, 90], [58, 17], [54, 2], [45, 10], [84, 45], [46, 6], [0, 4], [16, 60], [50, 35], [86, 45], [89, 19], [48, 10], [4, 57], [43, 62], [19, 30], [2, 35], [83, 68], [36, 26], [69, 4], [41, 82], [12, 52], [77, 95], [90, 75], [78, 58], [93, 29], [38, 87], [15, 82], [42, 86], [39, 90], [20, 53], [79, 25], [68, 81], [64, 82], [45, 56], [14, 85], [97, 13], [46, 15], [46, 43], [8, 71], [90, 72], [97, 66], [80, 57], [25, 8], [90, 74]]):\n    \"\"\"Find any edge in edges.\"\"\"\n    return e in edges",
    "sols": [
      "def sol(edges=[[7, 84], [72, 0], [65, 93], [66, 13], [39, 15], [91, 6], [16, 77], [43, 71], [34, 72], [83, 1], [91, 93], [41, 20], [71, 69], [51, 60], [75, 22], [25, 82], [93, 45], [54, 31], [38, 22], [76, 33], [18, 81], [91, 74], [28, 97], [39, 69], [15, 26], [83, 75], [57, 24], [94, 38], [26, 23], [40, 48], [37, 20], [90, 84], [75, 8], [36, 21], [93, 11], [97, 74], [79, 74], [69, 36], [3, 29], [66, 82], [49, 15], [52, 43], [76, 25], [39, 11], [9, 93], [68, 55], [53, 46], [29, 90], [12, 81], [44, 66], [54, 55], [2, 30], [1, 6], [8, 61], [67, 10], [61, 84], [72, 51], [13, 27], [93, 53], [44, 38], [86, 14], [90, 8], [22, 62], [5, 72], [63, 36], [31, 51], [83, 5], [36, 53], [92, 78], [44, 80], [23, 16], [43, 16], [18, 37], [34, 14], [23, 6], [19, 61], [59, 10], [85, 30], [25, 80], [76, 39], [21, 28], [60, 47], [15, 43], [26, 80], [59, 19], [83, 81], [4, 64], [3, 71], [52, 34], [90, 14], [44, 84], [37, 56], [76, 10], [69, 89], [30, 38], [17, 38], [42, 7], [79, 62], [15, 87], [45, 4], [96, 0], [44, 43], [84, 42], [26, 22], [1, 91], [1, 11], [68, 7], [72, 32], [8, 0], [64, 59], [16, 86], [25, 46], [65, 30], [10, 43], [89, 43], [55, 0], [91, 66], [49, 0], [22, 77], [80, 21], [16, 58], [55, 45], [64, 13], [55, 56], [89, 96], [84, 20], [11, 74], [92, 91], [36, 15], [51, 8], [4, 44], [55, 55], [6, 83], [76, 5], [3, 11], [15, 96], [18, 15], [43, 58], [19, 70], [87, 41], [43, 47], [2, 51], [47, 32], [14, 93], [27, 61], [21, 26], [78, 88], [52, 40], [21, 79], [12, 8], [74, 73], [5, 22], [50, 4], [15, 67], [87, 10], [90, 24], [17, 45], [75, 96], [27, 81], [76, 29], [52, 93], [74, 40], [48, 62], [5, 75], [68, 58], [61, 19], [56, 54], [4, 29], [26, 60], [24, 1], [37, 41], [95, 63], [49, 37], [81, 18], [79, 91], [82, 8], [29, 73], [55, 84], [18, 13], [32, 7], [77, 63], [26, 72], [90, 5], [95, 4], [46, 13], [0, 64], [84, 34], [52, 51], [32, 30], [24, 55], [51, 17], [12, 7], [73, 34], [54, 47], [96, 95], [65, 67], [46, 90], [58, 17], [54, 2], [45, 10], [84, 45], [46, 6], [0, 4], [16, 60], [50, 35], [86, 45], [89, 19], [48, 10], [4, 57], [43, 62], [19, 30], [2, 35], [83, 68], [36, 26], [69, 4], [41, 82], [12, 52], [77, 95], [90, 75], [78, 58], [93, 29], [38, 87], [15, 82], [42, 86], [39, 90], [20, 53], [79, 25], [68, 81], [64, 82], [45, 56], [14, 85], [97, 13], [46, 15], [46, 43], [8, 71], [90, 72], [97, 66], [80, 57], [25, 8], [90, 74]]):\n    return edges[0]"
    ],
    "module": "graphs",
    "notes": "Trivial [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyEdge_5",
    "sat": "def sat(e: List[int], edges=[[7, 8], [5, 3], [4, 9], [3, 9], [8, 5], [6, 8], [0, 7], [5, 2], [4, 7], [7, 9], [8, 9], [1, 2], [1, 8], [9, 0], [6, 9], [8, 2], [1, 1], [6, 4], [6, 0], [5, 8], [0, 6], [5, 0], [2, 6], [1, 5], [2, 0], [2, 3], [6, 5], [1, 9], [6, 2], [5, 5], [8, 4], [2, 2], [8, 0], [8, 7], [1, 4], [3, 6], [2, 8], [3, 8], [9, 7], [8, 1], [7, 6], [3, 3], [4, 4], [2, 9], [9, 9], [7, 2], [9, 8], [8, 6]]):\n    \"\"\"Find any edge in edges.\"\"\"\n    return e in edges",
    "sols": [
      "def sol(edges=[[7, 8], [5, 3], [4, 9], [3, 9], [8, 5], [6, 8], [0, 7], [5, 2], [4, 7], [7, 9], [8, 9], [1, 2], [1, 8], [9, 0], [6, 9], [8, 2], [1, 1], [6, 4], [6, 0], [5, 8], [0, 6], [5, 0], [2, 6], [1, 5], [2, 0], [2, 3], [6, 5], [1, 9], [6, 2], [5, 5], [8, 4], [2, 2], [8, 0], [8, 7], [1, 4], [3, 6], [2, 8], [3, 8], [9, 7], [8, 1], [7, 6], [3, 3], [4, 4], [2, 9], [9, 9], [7, 2], [9, 8], [8, 6]]):\n    return edges[0]"
    ],
    "module": "graphs",
    "notes": "Trivial [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyEdge_6",
    "sat": "def sat(e: List[int], edges=[[2, 0], [2, 3], [1, 1], [1, 0], [3, 0], [3, 3], [2, 1], [0, 0], [0, 3], [2, 2], [0, 2], [1, 3], [0, 1], [3, 2]]):\n    \"\"\"Find any edge in edges.\"\"\"\n    return e in edges",
    "sols": [
      "def sol(edges=[[2, 0], [2, 3], [1, 1], [1, 0], [3, 0], [3, 3], [2, 1], [0, 0], [0, 3], [2, 2], [0, 2], [1, 3], [0, 1], [3, 2]]):\n    return edges[0]"
    ],
    "module": "graphs",
    "notes": "Trivial [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyEdge_7",
    "sat": "def sat(e: List[int], edges=[[3, 3], [13, 12], [5, 6], [6, 10], [6, 7], [12, 3], [1, 3], [2, 6], [4, 0], [8, 5], [10, 11], [0, 2], [2, 7], [9, 1], [7, 1], [14, 3], [14, 5], [11, 9], [1, 11], [14, 9], [5, 12], [1, 7], [8, 9], [7, 6], [7, 12], [4, 3], [7, 10], [1, 6], [14, 0], [7, 8], [3, 13], [0, 8], [14, 1], [8, 2]]):\n    \"\"\"Find any edge in edges.\"\"\"\n    return e in edges",
    "sols": [
      "def sol(edges=[[3, 3], [13, 12], [5, 6], [6, 10], [6, 7], [12, 3], [1, 3], [2, 6], [4, 0], [8, 5], [10, 11], [0, 2], [2, 7], [9, 1], [7, 1], [14, 3], [14, 5], [11, 9], [1, 11], [14, 9], [5, 12], [1, 7], [8, 9], [7, 6], [7, 12], [4, 3], [7, 10], [1, 6], [14, 0], [7, 8], [3, 13], [0, 8], [14, 1], [8, 2]]):\n    return edges[0]"
    ],
    "module": "graphs",
    "notes": "Trivial [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyEdge_8",
    "sat": "def sat(e: List[int], edges=[[66, 14], [35, 71], [6, 72], [85, 21], [82, 19], [35, 24], [5, 38], [72, 35], [33, 75], [55, 36], [26, 28], [44, 77], [69, 49], [79, 38], [14, 83], [35, 42], [30, 2], [7, 25], [86, 54], [76, 81], [9, 68], [63, 8], [16, 8], [74, 69], [18, 1], [43, 37], [44, 49], [70, 43], [14, 52], [29, 49], [81, 24], [85, 83], [27, 78], [5, 35], [60, 47], [27, 32], [66, 24], [11, 81], [25, 61], [6, 67], [3, 14], [62, 76], [49, 6], [7, 41], [31, 64], [15, 54], [9, 64], [1, 34], [52, 40], [79, 43], [2, 85], [40, 18], [28, 11], [39, 4], [44, 84], [32, 55], [64, 35], [63, 29], [83, 85], [17, 34], [9, 26], [21, 67], [8, 24], [20, 40], [48, 47], [31, 12], [72, 56], [38, 6], [79, 26], [47, 83], [76, 13], [6, 14], [2, 48], [18, 75], [55, 53], [64, 21], [25, 23], [27, 59], [65, 82], [59, 38], [59, 56], [8, 54], [5, 59], [51, 49], [44, 37], [43, 49], [32, 27], [27, 39], [23, 17], [3, 24], [7, 86], [86, 85], [54, 70], [65, 40], [46, 46], [23, 67], [31, 15], [49, 49], [44, 39], [77, 3], [66, 50], [48, 13], [2, 83], [15, 27], [75, 23], [18, 63], [70, 53], [78, 30], [34, 21], [28, 50], [64, 72], [18, 53], [68, 71], [73, 58], [30, 74], [57, 58], [73, 60], [86, 51], [47, 56], [7, 20], [53, 8], [5, 71], [51, 46], [70, 46], [78, 17], [59, 63], [23, 78], [37, 9], [66, 68], [19, 2], [70, 59], [34, 54], [50, 69], [30, 79], [82, 39], [26, 27], [80, 67], [82, 30], [38, 46], [51, 10], [58, 19], [28, 36], [22, 50], [42, 66], [72, 19], [23, 60], [55, 32], [56, 25], [47, 7], [13, 40], [37, 13], [15, 29], [17, 40], [1, 26], [25, 20], [35, 32], [80, 13], [21, 25], [74, 6], [21, 35], [26, 68], [52, 53], [20, 65], [33, 22], [69, 12], [30, 23], [50, 75], [52, 80], [49, 47], [8, 37], [64, 16], [12, 38], [15, 55], [6, 54], [77, 74], [82, 27], [3, 58], [1, 1], [64, 31], [63, 0], [37, 26], [43, 48], [13, 6], [74, 1], [55, 20], [36, 44], [43, 65], [14, 71], [57, 14], [84, 27], [78, 29], [7, 54], [47, 75], [38, 12], [48, 29], [36, 58], [2, 4], [75, 63], [50, 40], [76, 62], [31, 29], [73, 42], [71, 58], [2, 72], [14, 86], [34, 20], [4, 14], [67, 44], [30, 13], [42, 53], [43, 11], [33, 81], [72, 18], [26, 80], [62, 70], [56, 68], [11, 47], [9, 53], [38, 20], [19, 45], [76, 83], [82, 25], [23, 74], [40, 57], [15, 0], [51, 37], [68, 34], [63, 76], [52, 63], [7, 24], [8, 52], [67, 41], [42, 47], [50, 67], [45, 14], [12, 57], [37, 79], [9, 62], [31, 13], [5, 66], [26, 63], [19, 20], [16, 10], [76, 79], [71, 21], [2, 5], [35, 51], [23, 0], [30, 51], [24, 53], [85, 14], [84, 25], [2, 66], [39, 33], [61, 82], [10, 20], [69, 7], [41, 27], [45, 70], [45, 4], [7, 46], [56, 70], [60, 24], [58, 20], [74, 48], [5, 85], [68, 10], [65, 8], [37, 47], [40, 14], [32, 9], [9, 66], [35, 35], [49, 20], [23, 15], [54, 53], [76, 23], [13, 27], [7, 72], [53, 39], [19, 13], [25, 0], [63, 64], [59, 9], [20, 47], [8, 36], [53, 67], [82, 6], [53, 36], [49, 51], [26, 56], [47, 60], [28, 55], [42, 30], [58, 6], [54, 67], [74, 33], [80, 63], [84, 6], [74, 52], [79, 36], [49, 23], [30, 27], [23, 46], [37, 45], [64, 34], [85, 49], [29, 43], [12, 26], [68, 7], [5, 70], [83, 82], [82, 0], [16, 74], [83, 17], [13, 15], [9, 23], [60, 51], [37, 66], [50, 52], [0, 20], [49, 81], [78, 57], [11, 40], [12, 54], [17, 70], [17, 17], [76, 39], [5, 32], [80, 75], [41, 11], [23, 85], [46, 81], [71, 49], [22, 73], [62, 17], [28, 49], [77, 38], [74, 83], [48, 16], [19, 43], [52, 59], [39, 15], [30, 69], [77, 30], [1, 44], [69, 41], [3, 10], [38, 82], [47, 65], [42, 71], [42, 65], [21, 83], [20, 24], [15, 25], [20, 33], [47, 2], [9, 11], [50, 55], [41, 2], [1, 41], [75, 5], [66, 9], [81, 77], [56, 19], [70, 34], [78, 12], [29, 78], [42, 29], [56, 39], [43, 2], [1, 67], [2, 2], [20, 70], [42, 22], [39, 11], [30, 61], [22, 58], [4, 83], [32, 23], [27, 34], [82, 49], [23, 42], [69, 3], [61, 16], [17, 15], [51, 17], [78, 76], [85, 82], [7, 18], [85, 16], [21, 24], [84, 76], [24, 41], [69, 26], [29, 5], [73, 67], [0, 25], [86, 81], [58, 62], [58, 17], [53, 25], [64, 80], [78, 3], [60, 1], [58, 79], [35, 81], [33, 84], [31, 45], [69, 63], [24, 38], [1, 10], [58, 2], [60, 78], [72, 63], [32, 31], [23, 31], [50, 72], [16, 16], [16, 18], [26, 78], [21, 79], [52, 1], [77, 22], [43, 14], [73, 69], [22, 63], [17, 55], [41, 54], [13, 29], [13, 18], [5, 5], [49, 4], [64, 50], [17, 67], [14, 42], [71, 50], [57, 31], [80, 10], [42, 19], [43, 81], [75, 80], [8, 0], [70, 1], [48, 46], [59, 15], [28, 41], [54, 56], [46, 0], [69, 70], [80, 20], [72, 25], [16, 28], [1, 24], [63, 33], [27, 73], [60, 16], [64, 86], [82, 12], [1, 64], [49, 48], [52, 4], [2, 26], [10, 12], [49, 62], [19, 61], [17, 43], [77, 13], [24, 79], [54, 42], [22, 45], [70, 31], [52, 17], [15, 32], [1, 62], [64, 76], [5, 6], [39, 60], [13, 67], [76, 8], [31, 75], [65, 60], [79, 33], [43, 60], [53, 37], [24, 64], [77, 62], [63, 48], [11, 29], [31, 31], [49, 61], [46, 21], [22, 16], [67, 22], [69, 42], [40, 69], [60, 66], [31, 37], [34, 6], [83, 3], [83, 12], [49, 40], [85, 24], [2, 17], [3, 25], [59, 81], [35, 72], [51, 74], [63, 77], [36, 54], [40, 79], [86, 61], [9, 6], [23, 41], [45, 12], [80, 43], [49, 31], [6, 68], [76, 27], [33, 0], [2, 38], [74, 50], [4, 8], [79, 79], [83, 18], [39, 77], [32, 34], [55, 17], [43, 32], [43, 55], [85, 67], [84, 5], [51, 66], [28, 47], [64, 60], [18, 86], [9, 72], [48, 5], [61, 62], [83, 70], [36, 8], [21, 54], [10, 14], [53, 13], [43, 6], [38, 36], [37, 20], [17, 22], [82, 86], [25, 83], [84, 70], [38, 33], [45, 19], [5, 78], [86, 33], [57, 54], [24, 62], [33, 42], [84, 4], [12, 67], [31, 57], [54, 74], [26, 85], [29, 8], [30, 19], [41, 81], [85, 34], [50, 60], [25, 22], [49, 45], [21, 36], [63, 37], [39, 0], [39, 61], [78, 6], [23, 37], [1, 37], [11, 48], [39, 54], [22, 80], [73, 13], [78, 55], [32, 81], [66, 75], [51, 51], [8, 20], [45, 59], [3, 54], [22, 15], [25, 29], [54, 2], [34, 51], [44, 9], [24, 43], [47, 43], [13, 86], [13, 57], [19, 74], [34, 48], [39, 66], [17, 25], [10, 16], [38, 8], [33, 78], [67, 28], [34, 3], [31, 19], [1, 49], [72, 2], [62, 29], [8, 71], [16, 52], [15, 9], [14, 4], [41, 46], [8, 4], [63, 34], [49, 15], [12, 61], [24, 25], [49, 82], [85, 6], [21, 68], [66, 77], [58, 22], [49, 84], [77, 27], [22, 9], [8, 39], [4, 30], [33, 8], [80, 61], [0, 27], [46, 47], [62, 0], [24, 0], [64, 2], [15, 8], [60, 6], [83, 24], [9, 82], [13, 10], [80, 3], [9, 4], [6, 75], [11, 5], [78, 16], [50, 77], [37, 31], [47, 85], [46, 1], [19, 32], [64, 82], [0, 8], [7, 36], [57, 39], [50, 34], [34, 74], [7, 9], [71, 62], [11, 67], [40, 17], [55, 34], [48, 77], [49, 46], [19, 38], [1, 4], [24, 73], [14, 84], [79, 74], [1, 18], [56, 55], [30, 25], [10, 57], [59, 43], [7, 58], [8, 28]]):\n    \"\"\"Find any edge in edges.\"\"\"\n    return e in edges",
    "sols": [
      "def sol(edges=[[66, 14], [35, 71], [6, 72], [85, 21], [82, 19], [35, 24], [5, 38], [72, 35], [33, 75], [55, 36], [26, 28], [44, 77], [69, 49], [79, 38], [14, 83], [35, 42], [30, 2], [7, 25], [86, 54], [76, 81], [9, 68], [63, 8], [16, 8], [74, 69], [18, 1], [43, 37], [44, 49], [70, 43], [14, 52], [29, 49], [81, 24], [85, 83], [27, 78], [5, 35], [60, 47], [27, 32], [66, 24], [11, 81], [25, 61], [6, 67], [3, 14], [62, 76], [49, 6], [7, 41], [31, 64], [15, 54], [9, 64], [1, 34], [52, 40], [79, 43], [2, 85], [40, 18], [28, 11], [39, 4], [44, 84], [32, 55], [64, 35], [63, 29], [83, 85], [17, 34], [9, 26], [21, 67], [8, 24], [20, 40], [48, 47], [31, 12], [72, 56], [38, 6], [79, 26], [47, 83], [76, 13], [6, 14], [2, 48], [18, 75], [55, 53], [64, 21], [25, 23], [27, 59], [65, 82], [59, 38], [59, 56], [8, 54], [5, 59], [51, 49], [44, 37], [43, 49], [32, 27], [27, 39], [23, 17], [3, 24], [7, 86], [86, 85], [54, 70], [65, 40], [46, 46], [23, 67], [31, 15], [49, 49], [44, 39], [77, 3], [66, 50], [48, 13], [2, 83], [15, 27], [75, 23], [18, 63], [70, 53], [78, 30], [34, 21], [28, 50], [64, 72], [18, 53], [68, 71], [73, 58], [30, 74], [57, 58], [73, 60], [86, 51], [47, 56], [7, 20], [53, 8], [5, 71], [51, 46], [70, 46], [78, 17], [59, 63], [23, 78], [37, 9], [66, 68], [19, 2], [70, 59], [34, 54], [50, 69], [30, 79], [82, 39], [26, 27], [80, 67], [82, 30], [38, 46], [51, 10], [58, 19], [28, 36], [22, 50], [42, 66], [72, 19], [23, 60], [55, 32], [56, 25], [47, 7], [13, 40], [37, 13], [15, 29], [17, 40], [1, 26], [25, 20], [35, 32], [80, 13], [21, 25], [74, 6], [21, 35], [26, 68], [52, 53], [20, 65], [33, 22], [69, 12], [30, 23], [50, 75], [52, 80], [49, 47], [8, 37], [64, 16], [12, 38], [15, 55], [6, 54], [77, 74], [82, 27], [3, 58], [1, 1], [64, 31], [63, 0], [37, 26], [43, 48], [13, 6], [74, 1], [55, 20], [36, 44], [43, 65], [14, 71], [57, 14], [84, 27], [78, 29], [7, 54], [47, 75], [38, 12], [48, 29], [36, 58], [2, 4], [75, 63], [50, 40], [76, 62], [31, 29], [73, 42], [71, 58], [2, 72], [14, 86], [34, 20], [4, 14], [67, 44], [30, 13], [42, 53], [43, 11], [33, 81], [72, 18], [26, 80], [62, 70], [56, 68], [11, 47], [9, 53], [38, 20], [19, 45], [76, 83], [82, 25], [23, 74], [40, 57], [15, 0], [51, 37], [68, 34], [63, 76], [52, 63], [7, 24], [8, 52], [67, 41], [42, 47], [50, 67], [45, 14], [12, 57], [37, 79], [9, 62], [31, 13], [5, 66], [26, 63], [19, 20], [16, 10], [76, 79], [71, 21], [2, 5], [35, 51], [23, 0], [30, 51], [24, 53], [85, 14], [84, 25], [2, 66], [39, 33], [61, 82], [10, 20], [69, 7], [41, 27], [45, 70], [45, 4], [7, 46], [56, 70], [60, 24], [58, 20], [74, 48], [5, 85], [68, 10], [65, 8], [37, 47], [40, 14], [32, 9], [9, 66], [35, 35], [49, 20], [23, 15], [54, 53], [76, 23], [13, 27], [7, 72], [53, 39], [19, 13], [25, 0], [63, 64], [59, 9], [20, 47], [8, 36], [53, 67], [82, 6], [53, 36], [49, 51], [26, 56], [47, 60], [28, 55], [42, 30], [58, 6], [54, 67], [74, 33], [80, 63], [84, 6], [74, 52], [79, 36], [49, 23], [30, 27], [23, 46], [37, 45], [64, 34], [85, 49], [29, 43], [12, 26], [68, 7], [5, 70], [83, 82], [82, 0], [16, 74], [83, 17], [13, 15], [9, 23], [60, 51], [37, 66], [50, 52], [0, 20], [49, 81], [78, 57], [11, 40], [12, 54], [17, 70], [17, 17], [76, 39], [5, 32], [80, 75], [41, 11], [23, 85], [46, 81], [71, 49], [22, 73], [62, 17], [28, 49], [77, 38], [74, 83], [48, 16], [19, 43], [52, 59], [39, 15], [30, 69], [77, 30], [1, 44], [69, 41], [3, 10], [38, 82], [47, 65], [42, 71], [42, 65], [21, 83], [20, 24], [15, 25], [20, 33], [47, 2], [9, 11], [50, 55], [41, 2], [1, 41], [75, 5], [66, 9], [81, 77], [56, 19], [70, 34], [78, 12], [29, 78], [42, 29], [56, 39], [43, 2], [1, 67], [2, 2], [20, 70], [42, 22], [39, 11], [30, 61], [22, 58], [4, 83], [32, 23], [27, 34], [82, 49], [23, 42], [69, 3], [61, 16], [17, 15], [51, 17], [78, 76], [85, 82], [7, 18], [85, 16], [21, 24], [84, 76], [24, 41], [69, 26], [29, 5], [73, 67], [0, 25], [86, 81], [58, 62], [58, 17], [53, 25], [64, 80], [78, 3], [60, 1], [58, 79], [35, 81], [33, 84], [31, 45], [69, 63], [24, 38], [1, 10], [58, 2], [60, 78], [72, 63], [32, 31], [23, 31], [50, 72], [16, 16], [16, 18], [26, 78], [21, 79], [52, 1], [77, 22], [43, 14], [73, 69], [22, 63], [17, 55], [41, 54], [13, 29], [13, 18], [5, 5], [49, 4], [64, 50], [17, 67], [14, 42], [71, 50], [57, 31], [80, 10], [42, 19], [43, 81], [75, 80], [8, 0], [70, 1], [48, 46], [59, 15], [28, 41], [54, 56], [46, 0], [69, 70], [80, 20], [72, 25], [16, 28], [1, 24], [63, 33], [27, 73], [60, 16], [64, 86], [82, 12], [1, 64], [49, 48], [52, 4], [2, 26], [10, 12], [49, 62], [19, 61], [17, 43], [77, 13], [24, 79], [54, 42], [22, 45], [70, 31], [52, 17], [15, 32], [1, 62], [64, 76], [5, 6], [39, 60], [13, 67], [76, 8], [31, 75], [65, 60], [79, 33], [43, 60], [53, 37], [24, 64], [77, 62], [63, 48], [11, 29], [31, 31], [49, 61], [46, 21], [22, 16], [67, 22], [69, 42], [40, 69], [60, 66], [31, 37], [34, 6], [83, 3], [83, 12], [49, 40], [85, 24], [2, 17], [3, 25], [59, 81], [35, 72], [51, 74], [63, 77], [36, 54], [40, 79], [86, 61], [9, 6], [23, 41], [45, 12], [80, 43], [49, 31], [6, 68], [76, 27], [33, 0], [2, 38], [74, 50], [4, 8], [79, 79], [83, 18], [39, 77], [32, 34], [55, 17], [43, 32], [43, 55], [85, 67], [84, 5], [51, 66], [28, 47], [64, 60], [18, 86], [9, 72], [48, 5], [61, 62], [83, 70], [36, 8], [21, 54], [10, 14], [53, 13], [43, 6], [38, 36], [37, 20], [17, 22], [82, 86], [25, 83], [84, 70], [38, 33], [45, 19], [5, 78], [86, 33], [57, 54], [24, 62], [33, 42], [84, 4], [12, 67], [31, 57], [54, 74], [26, 85], [29, 8], [30, 19], [41, 81], [85, 34], [50, 60], [25, 22], [49, 45], [21, 36], [63, 37], [39, 0], [39, 61], [78, 6], [23, 37], [1, 37], [11, 48], [39, 54], [22, 80], [73, 13], [78, 55], [32, 81], [66, 75], [51, 51], [8, 20], [45, 59], [3, 54], [22, 15], [25, 29], [54, 2], [34, 51], [44, 9], [24, 43], [47, 43], [13, 86], [13, 57], [19, 74], [34, 48], [39, 66], [17, 25], [10, 16], [38, 8], [33, 78], [67, 28], [34, 3], [31, 19], [1, 49], [72, 2], [62, 29], [8, 71], [16, 52], [15, 9], [14, 4], [41, 46], [8, 4], [63, 34], [49, 15], [12, 61], [24, 25], [49, 82], [85, 6], [21, 68], [66, 77], [58, 22], [49, 84], [77, 27], [22, 9], [8, 39], [4, 30], [33, 8], [80, 61], [0, 27], [46, 47], [62, 0], [24, 0], [64, 2], [15, 8], [60, 6], [83, 24], [9, 82], [13, 10], [80, 3], [9, 4], [6, 75], [11, 5], [78, 16], [50, 77], [37, 31], [47, 85], [46, 1], [19, 32], [64, 82], [0, 8], [7, 36], [57, 39], [50, 34], [34, 74], [7, 9], [71, 62], [11, 67], [40, 17], [55, 34], [48, 77], [49, 46], [19, 38], [1, 4], [24, 73], [14, 84], [79, 74], [1, 18], [56, 55], [30, 25], [10, 57], [59, 43], [7, 58], [8, 28]]):\n    return edges[0]"
    ],
    "module": "graphs",
    "notes": "Trivial [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyEdge_9",
    "sat": "def sat(e: List[int], edges=[[3, 1], [4, 3], [2, 0], [4, 0], [1, 0], [0, 0], [1, 1], [1, 3], [4, 1], [0, 2], [0, 1], [3, 3], [2, 2], [3, 0], [0, 3], [4, 4], [2, 3], [3, 2], [2, 1], [1, 4]]):\n    \"\"\"Find any edge in edges.\"\"\"\n    return e in edges",
    "sols": [
      "def sol(edges=[[3, 1], [4, 3], [2, 0], [4, 0], [1, 0], [0, 0], [1, 1], [1, 3], [4, 1], [0, 2], [0, 1], [3, 3], [2, 2], [3, 0], [0, 3], [4, 4], [2, 3], [3, 2], [2, 1], [1, 4]]):\n    return edges[0]"
    ],
    "module": "graphs",
    "notes": "Trivial [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyTriangle_0",
    "sat": "def sat(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    \"\"\"Find any triangle in the given directed graph.\"\"\"\n    a, b, c = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and a != b != c != a",
    "sols": [
      "def sol(edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass"
    ],
    "module": "graphs",
    "notes": "Easy [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem,\nsee [triangle](https://en.wikipedia.org/w/index.php?title=Triangle_graph)",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyTriangle_1",
    "sat": "def sat(tri: List[int], edges=[[19, 48], [14, 42], [19, 14], [56, 3], [37, 16], [46, 5], [14, 14], [62, 40], [12, 41], [37, 1], [46, 40], [4, 9], [70, 39], [75, 49], [61, 55], [65, 61], [5, 1], [67, 44], [46, 68], [49, 62], [41, 61], [39, 43], [44, 60], [71, 40], [8, 42], [54, 67], [33, 27], [25, 70], [50, 3], [53, 22], [61, 34], [5, 16], [39, 62], [30, 44], [10, 3], [21, 67], [41, 54], [10, 66], [34, 1], [45, 44], [38, 47], [25, 36], [2, 47], [46, 2], [38, 4], [50, 66], [45, 18], [45, 50], [63, 57], [19, 43], [39, 66], [29, 13], [39, 65], [63, 39], [7, 25], [34, 51], [65, 54], [13, 64], [9, 70], [28, 12], [41, 69], [67, 53], [33, 38], [59, 27], [18, 37], [11, 3], [13, 23], [33, 50], [44, 49], [9, 50], [23, 55], [59, 66], [4, 74], [50, 12], [14, 24], [0, 28], [75, 29], [62, 60], [68, 35], [69, 55], [3, 19], [72, 30], [25, 9], [12, 58], [3, 66], [43, 8], [12, 11], [15, 56], [30, 75], [35, 57], [19, 20], [71, 36], [34, 35], [30, 17], [7, 52], [49, 31], [39, 58], [48, 32], [4, 57], [75, 31], [42, 1], [0, 48], [22, 13], [18, 17], [71, 52], [41, 19], [48, 12], [9, 48], [63, 65], [68, 63], [46, 39], [24, 30], [46, 61], [55, 25], [75, 36], [49, 5], [44, 12], [29, 5], [64, 69], [15, 64], [8, 66], [49, 25], [24, 53], [7, 39], [41, 2], [29, 48], [51, 30], [41, 21], [46, 30], [63, 75], [19, 3], [58, 72], [62, 59], [68, 54], [9, 61], [70, 74], [56, 48], [74, 48], [2, 9], [51, 22], [69, 61], [0, 35], [28, 46], [7, 11], [56, 57], [14, 67], [15, 4], [53, 12], [64, 42], [20, 15], [52, 53], [44, 16], [8, 7], [21, 7], [42, 45], [4, 66], [39, 59], [20, 1], [60, 0], [52, 28], [75, 63], [59, 14], [40, 69], [74, 46], [60, 67], [6, 57], [38, 68], [24, 22], [59, 61], [53, 30], [10, 56], [49, 59], [12, 27], [75, 22], [24, 25], [37, 11], [56, 12], [62, 47], [22, 9], [34, 17], [57, 10], [52, 43], [17, 22], [14, 73], [54, 75], [28, 22], [18, 51], [38, 46], [6, 22], [75, 15], [10, 1], [37, 12], [67, 34], [28, 43], [5, 2], [60, 40], [9, 22], [3, 75], [50, 1], [19, 8], [17, 57], [43, 60], [45, 60], [57, 32], [52, 35], [18, 22], [11, 38], [16, 57], [31, 39], [13, 18], [61, 54], [25, 10], [23, 46], [47, 5], [42, 66], [73, 67], [44, 28], [65, 34], [35, 50], [67, 1], [12, 44], [17, 51], [70, 23], [44, 35], [0, 16], [65, 53], [10, 74], [5, 60], [45, 8], [13, 46], [57, 6], [72, 47], [1, 36], [60, 4], [11, 31], [46, 21], [60, 29], [58, 44], [53, 41], [33, 44], [47, 34], [58, 35], [74, 51], [71, 35], [58, 10], [47, 59], [32, 36], [16, 67], [62, 9], [14, 44], [12, 32], [6, 19], [35, 21], [49, 71], [7, 7], [25, 39], [25, 24], [45, 40], [44, 20], [9, 37], [58, 18], [59, 52], [12, 23], [26, 49], [62, 69], [8, 2], [66, 52], [25, 42], [34, 70], [64, 1], [29, 57], [8, 26], [25, 63], [75, 56], [51, 49], [70, 9], [63, 51], [6, 28], [1, 38], [47, 27], [74, 26], [27, 63], [20, 47], [25, 37], [31, 67], [59, 71], [56, 32], [28, 65], [37, 10], [30, 50], [42, 32], [56, 63], [32, 65], [48, 70], [37, 21], [10, 11], [5, 24], [51, 8], [46, 6], [75, 23], [42, 28], [60, 26], [37, 9], [0, 19], [11, 34], [66, 51], [49, 42], [16, 37], [52, 55], [20, 39], [46, 12], [1, 70], [45, 37], [18, 63], [63, 23], [54, 7], [18, 11], [51, 28], [21, 65], [28, 71], [46, 53], [14, 36], [35, 71], [30, 5], [50, 62], [32, 28], [64, 38], [66, 61], [0, 10]]):\n    \"\"\"Find any triangle in the given directed graph.\"\"\"\n    a, b, c = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and a != b != c != a",
    "sols": [
      "def sol(edges=[[19, 48], [14, 42], [19, 14], [56, 3], [37, 16], [46, 5], [14, 14], [62, 40], [12, 41], [37, 1], [46, 40], [4, 9], [70, 39], [75, 49], [61, 55], [65, 61], [5, 1], [67, 44], [46, 68], [49, 62], [41, 61], [39, 43], [44, 60], [71, 40], [8, 42], [54, 67], [33, 27], [25, 70], [50, 3], [53, 22], [61, 34], [5, 16], [39, 62], [30, 44], [10, 3], [21, 67], [41, 54], [10, 66], [34, 1], [45, 44], [38, 47], [25, 36], [2, 47], [46, 2], [38, 4], [50, 66], [45, 18], [45, 50], [63, 57], [19, 43], [39, 66], [29, 13], [39, 65], [63, 39], [7, 25], [34, 51], [65, 54], [13, 64], [9, 70], [28, 12], [41, 69], [67, 53], [33, 38], [59, 27], [18, 37], [11, 3], [13, 23], [33, 50], [44, 49], [9, 50], [23, 55], [59, 66], [4, 74], [50, 12], [14, 24], [0, 28], [75, 29], [62, 60], [68, 35], [69, 55], [3, 19], [72, 30], [25, 9], [12, 58], [3, 66], [43, 8], [12, 11], [15, 56], [30, 75], [35, 57], [19, 20], [71, 36], [34, 35], [30, 17], [7, 52], [49, 31], [39, 58], [48, 32], [4, 57], [75, 31], [42, 1], [0, 48], [22, 13], [18, 17], [71, 52], [41, 19], [48, 12], [9, 48], [63, 65], [68, 63], [46, 39], [24, 30], [46, 61], [55, 25], [75, 36], [49, 5], [44, 12], [29, 5], [64, 69], [15, 64], [8, 66], [49, 25], [24, 53], [7, 39], [41, 2], [29, 48], [51, 30], [41, 21], [46, 30], [63, 75], [19, 3], [58, 72], [62, 59], [68, 54], [9, 61], [70, 74], [56, 48], [74, 48], [2, 9], [51, 22], [69, 61], [0, 35], [28, 46], [7, 11], [56, 57], [14, 67], [15, 4], [53, 12], [64, 42], [20, 15], [52, 53], [44, 16], [8, 7], [21, 7], [42, 45], [4, 66], [39, 59], [20, 1], [60, 0], [52, 28], [75, 63], [59, 14], [40, 69], [74, 46], [60, 67], [6, 57], [38, 68], [24, 22], [59, 61], [53, 30], [10, 56], [49, 59], [12, 27], [75, 22], [24, 25], [37, 11], [56, 12], [62, 47], [22, 9], [34, 17], [57, 10], [52, 43], [17, 22], [14, 73], [54, 75], [28, 22], [18, 51], [38, 46], [6, 22], [75, 15], [10, 1], [37, 12], [67, 34], [28, 43], [5, 2], [60, 40], [9, 22], [3, 75], [50, 1], [19, 8], [17, 57], [43, 60], [45, 60], [57, 32], [52, 35], [18, 22], [11, 38], [16, 57], [31, 39], [13, 18], [61, 54], [25, 10], [23, 46], [47, 5], [42, 66], [73, 67], [44, 28], [65, 34], [35, 50], [67, 1], [12, 44], [17, 51], [70, 23], [44, 35], [0, 16], [65, 53], [10, 74], [5, 60], [45, 8], [13, 46], [57, 6], [72, 47], [1, 36], [60, 4], [11, 31], [46, 21], [60, 29], [58, 44], [53, 41], [33, 44], [47, 34], [58, 35], [74, 51], [71, 35], [58, 10], [47, 59], [32, 36], [16, 67], [62, 9], [14, 44], [12, 32], [6, 19], [35, 21], [49, 71], [7, 7], [25, 39], [25, 24], [45, 40], [44, 20], [9, 37], [58, 18], [59, 52], [12, 23], [26, 49], [62, 69], [8, 2], [66, 52], [25, 42], [34, 70], [64, 1], [29, 57], [8, 26], [25, 63], [75, 56], [51, 49], [70, 9], [63, 51], [6, 28], [1, 38], [47, 27], [74, 26], [27, 63], [20, 47], [25, 37], [31, 67], [59, 71], [56, 32], [28, 65], [37, 10], [30, 50], [42, 32], [56, 63], [32, 65], [48, 70], [37, 21], [10, 11], [5, 24], [51, 8], [46, 6], [75, 23], [42, 28], [60, 26], [37, 9], [0, 19], [11, 34], [66, 51], [49, 42], [16, 37], [52, 55], [20, 39], [46, 12], [1, 70], [45, 37], [18, 63], [63, 23], [54, 7], [18, 11], [51, 28], [21, 65], [28, 71], [46, 53], [14, 36], [35, 71], [30, 5], [50, 62], [32, 28], [64, 38], [66, 61], [0, 10]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass"
    ],
    "module": "graphs",
    "notes": "Easy [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem,\nsee [triangle](https://en.wikipedia.org/w/index.php?title=Triangle_graph)",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyTriangle_2",
    "sat": "def sat(tri: List[int], edges=[[51, 44], [11, 59], [57, 15], [18, 1], [41, 1], [44, 6], [58, 44], [43, 10], [41, 9], [50, 43], [56, 0], [47, 4], [42, 45], [51, 15], [60, 18], [11, 56], [21, 45], [39, 42], [57, 34], [60, 25], [57, 33], [6, 17], [26, 43], [38, 25], [29, 18], [39, 43], [34, 4], [22, 61], [0, 9], [1, 20], [36, 28], [10, 37], [53, 7], [49, 60], [12, 48], [31, 33], [4, 8], [5, 56], [27, 59], [56, 29], [60, 17], [17, 27], [24, 58], [46, 47], [60, 35], [4, 37], [41, 43], [37, 33], [30, 7], [53, 31], [3, 60], [24, 39], [14, 41], [14, 54], [33, 35], [50, 1], [60, 57], [23, 17], [34, 15], [60, 26], [22, 0], [5, 4], [8, 41], [16, 4], [56, 40], [60, 44], [2, 26], [42, 21], [21, 28], [58, 32], [58, 12], [31, 22], [43, 0], [28, 3], [35, 21], [54, 18], [0, 58], [3, 9], [6, 59], [57, 46], [48, 45], [30, 12], [46, 27], [41, 55], [52, 58], [30, 21], [51, 24], [23, 18], [31, 59], [34, 49], [41, 34], [19, 58], [1, 32], [52, 16], [17, 8], [20, 3], [56, 12], [3, 51], [60, 31], [41, 5], [58, 23], [59, 6], [39, 2], [6, 6], [11, 38], [3, 44], [61, 58], [13, 46], [56, 1], [35, 14], [25, 7], [29, 60], [16, 32], [32, 32], [7, 44], [3, 48], [38, 21], [19, 43], [60, 4], [56, 56], [21, 33], [15, 11], [32, 0], [8, 10], [44, 11], [37, 36], [24, 28], [4, 23], [37, 22], [44, 4], [34, 28], [1, 7], [15, 48], [11, 20], [60, 13], [7, 30], [51, 18], [3, 56], [14, 57], [14, 22], [55, 13], [47, 50], [36, 14], [42, 46], [7, 29], [58, 36], [52, 49], [33, 4], [51, 51], [47, 55], [7, 60], [4, 17], [53, 6], [59, 28], [51, 52], [50, 24], [30, 18], [37, 42], [51, 30], [6, 37], [0, 41], [38, 30], [0, 24], [43, 38], [33, 2], [10, 21], [44, 33], [57, 29], [28, 45], [2, 27], [59, 38], [41, 28], [49, 61], [54, 23], [44, 32], [58, 33], [2, 43], [34, 39], [37, 28], [40, 56], [55, 59], [28, 43], [36, 36], [29, 41], [16, 35], [50, 33], [51, 4], [33, 11], [26, 17], [2, 49], [7, 18], [15, 60], [14, 47], [40, 16], [47, 19], [18, 43], [38, 53], [28, 10], [46, 12], [26, 48], [1, 45], [9, 45], [2, 12], [8, 55], [19, 24], [2, 10], [17, 38], [30, 48], [2, 13], [59, 22], [11, 39], [32, 47], [23, 26], [43, 25], [9, 34], [46, 30], [36, 32], [33, 36], [38, 54], [33, 14], [48, 46], [29, 53], [46, 60], [14, 10], [0, 3], [13, 39], [53, 53], [22, 16], [33, 31], [33, 13], [54, 51], [25, 34], [14, 33], [19, 56], [51, 10], [58, 43], [4, 20], [28, 54], [3, 34], [47, 45], [1, 58], [55, 43], [13, 21], [31, 46], [23, 57], [58, 15], [54, 36], [44, 7], [16, 52], [20, 40], [46, 18], [59, 19], [14, 44], [3, 4], [58, 52], [31, 42], [21, 17], [42, 18], [46, 57], [7, 35], [52, 4], [30, 11], [17, 14], [60, 10], [57, 59], [59, 46], [18, 15], [35, 27], [46, 31], [49, 18], [21, 23], [50, 25], [24, 59], [51, 26], [36, 34], [27, 17], [13, 16], [54, 56], [53, 13], [27, 25], [8, 33], [52, 7], [45, 61], [39, 0], [6, 51], [35, 23], [31, 5], [38, 33], [47, 58], [28, 61], [36, 0], [18, 30], [51, 11], [39, 51], [39, 36], [60, 37], [37, 43], [46, 42]]):\n    \"\"\"Find any triangle in the given directed graph.\"\"\"\n    a, b, c = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and a != b != c != a",
    "sols": [
      "def sol(edges=[[51, 44], [11, 59], [57, 15], [18, 1], [41, 1], [44, 6], [58, 44], [43, 10], [41, 9], [50, 43], [56, 0], [47, 4], [42, 45], [51, 15], [60, 18], [11, 56], [21, 45], [39, 42], [57, 34], [60, 25], [57, 33], [6, 17], [26, 43], [38, 25], [29, 18], [39, 43], [34, 4], [22, 61], [0, 9], [1, 20], [36, 28], [10, 37], [53, 7], [49, 60], [12, 48], [31, 33], [4, 8], [5, 56], [27, 59], [56, 29], [60, 17], [17, 27], [24, 58], [46, 47], [60, 35], [4, 37], [41, 43], [37, 33], [30, 7], [53, 31], [3, 60], [24, 39], [14, 41], [14, 54], [33, 35], [50, 1], [60, 57], [23, 17], [34, 15], [60, 26], [22, 0], [5, 4], [8, 41], [16, 4], [56, 40], [60, 44], [2, 26], [42, 21], [21, 28], [58, 32], [58, 12], [31, 22], [43, 0], [28, 3], [35, 21], [54, 18], [0, 58], [3, 9], [6, 59], [57, 46], [48, 45], [30, 12], [46, 27], [41, 55], [52, 58], [30, 21], [51, 24], [23, 18], [31, 59], [34, 49], [41, 34], [19, 58], [1, 32], [52, 16], [17, 8], [20, 3], [56, 12], [3, 51], [60, 31], [41, 5], [58, 23], [59, 6], [39, 2], [6, 6], [11, 38], [3, 44], [61, 58], [13, 46], [56, 1], [35, 14], [25, 7], [29, 60], [16, 32], [32, 32], [7, 44], [3, 48], [38, 21], [19, 43], [60, 4], [56, 56], [21, 33], [15, 11], [32, 0], [8, 10], [44, 11], [37, 36], [24, 28], [4, 23], [37, 22], [44, 4], [34, 28], [1, 7], [15, 48], [11, 20], [60, 13], [7, 30], [51, 18], [3, 56], [14, 57], [14, 22], [55, 13], [47, 50], [36, 14], [42, 46], [7, 29], [58, 36], [52, 49], [33, 4], [51, 51], [47, 55], [7, 60], [4, 17], [53, 6], [59, 28], [51, 52], [50, 24], [30, 18], [37, 42], [51, 30], [6, 37], [0, 41], [38, 30], [0, 24], [43, 38], [33, 2], [10, 21], [44, 33], [57, 29], [28, 45], [2, 27], [59, 38], [41, 28], [49, 61], [54, 23], [44, 32], [58, 33], [2, 43], [34, 39], [37, 28], [40, 56], [55, 59], [28, 43], [36, 36], [29, 41], [16, 35], [50, 33], [51, 4], [33, 11], [26, 17], [2, 49], [7, 18], [15, 60], [14, 47], [40, 16], [47, 19], [18, 43], [38, 53], [28, 10], [46, 12], [26, 48], [1, 45], [9, 45], [2, 12], [8, 55], [19, 24], [2, 10], [17, 38], [30, 48], [2, 13], [59, 22], [11, 39], [32, 47], [23, 26], [43, 25], [9, 34], [46, 30], [36, 32], [33, 36], [38, 54], [33, 14], [48, 46], [29, 53], [46, 60], [14, 10], [0, 3], [13, 39], [53, 53], [22, 16], [33, 31], [33, 13], [54, 51], [25, 34], [14, 33], [19, 56], [51, 10], [58, 43], [4, 20], [28, 54], [3, 34], [47, 45], [1, 58], [55, 43], [13, 21], [31, 46], [23, 57], [58, 15], [54, 36], [44, 7], [16, 52], [20, 40], [46, 18], [59, 19], [14, 44], [3, 4], [58, 52], [31, 42], [21, 17], [42, 18], [46, 57], [7, 35], [52, 4], [30, 11], [17, 14], [60, 10], [57, 59], [59, 46], [18, 15], [35, 27], [46, 31], [49, 18], [21, 23], [50, 25], [24, 59], [51, 26], [36, 34], [27, 17], [13, 16], [54, 56], [53, 13], [27, 25], [8, 33], [52, 7], [45, 61], [39, 0], [6, 51], [35, 23], [31, 5], [38, 33], [47, 58], [28, 61], [36, 0], [18, 30], [51, 11], [39, 51], [39, 36], [60, 37], [37, 43], [46, 42]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass"
    ],
    "module": "graphs",
    "notes": "Easy [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem,\nsee [triangle](https://en.wikipedia.org/w/index.php?title=Triangle_graph)",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyTriangle_3",
    "sat": "def sat(tri: List[int], edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    \"\"\"Find any triangle in the given directed graph.\"\"\"\n    a, b, c = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and a != b != c != a",
    "sols": [
      "def sol(edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass"
    ],
    "module": "graphs",
    "notes": "Easy [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem,\nsee [triangle](https://en.wikipedia.org/w/index.php?title=Triangle_graph)",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyTriangle_4",
    "sat": "def sat(tri: List[int], edges=[[4, 4], [5, 5], [3, 5], [3, 1], [0, 1], [4, 0], [3, 2], [5, 3], [1, 3], [2, 5], [2, 0]]):\n    \"\"\"Find any triangle in the given directed graph.\"\"\"\n    a, b, c = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and a != b != c != a",
    "sols": [
      "def sol(edges=[[4, 4], [5, 5], [3, 5], [3, 1], [0, 1], [4, 0], [3, 2], [5, 3], [1, 3], [2, 5], [2, 0]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass"
    ],
    "module": "graphs",
    "notes": "Easy [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem,\nsee [triangle](https://en.wikipedia.org/w/index.php?title=Triangle_graph)",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyTriangle_5",
    "sat": "def sat(tri: List[int], edges=[[4, 6], [3, 4], [0, 2], [3, 5], [2, 2], [1, 6], [1, 0], [1, 4], [6, 4], [3, 2], [6, 0], [6, 2], [2, 4], [5, 5], [2, 0], [3, 0], [0, 5], [6, 1], [5, 1], [6, 3], [4, 5]]):\n    \"\"\"Find any triangle in the given directed graph.\"\"\"\n    a, b, c = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and a != b != c != a",
    "sols": [
      "def sol(edges=[[4, 6], [3, 4], [0, 2], [3, 5], [2, 2], [1, 6], [1, 0], [1, 4], [6, 4], [3, 2], [6, 0], [6, 2], [2, 4], [5, 5], [2, 0], [3, 0], [0, 5], [6, 1], [5, 1], [6, 3], [4, 5]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass"
    ],
    "module": "graphs",
    "notes": "Easy [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem,\nsee [triangle](https://en.wikipedia.org/w/index.php?title=Triangle_graph)",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyTriangle_6",
    "sat": "def sat(tri: List[int], edges=[[13, 41], [44, 76], [7, 77], [84, 52], [5, 16], [92, 90], [13, 73], [76, 72], [33, 33], [64, 42], [24, 34], [86, 76], [10, 51], [13, 50], [36, 80], [7, 54], [77, 43], [71, 44], [20, 52], [33, 32], [7, 50], [43, 92], [53, 68], [11, 65], [54, 10], [66, 89], [18, 0], [0, 1], [84, 77], [37, 82], [45, 34], [40, 24], [34, 37], [23, 59], [20, 20], [4, 8], [78, 20], [49, 73], [63, 79], [41, 33], [80, 42], [22, 56], [61, 29], [11, 36], [65, 14], [30, 43], [29, 3], [53, 71], [22, 70], [64, 47], [16, 35], [71, 75], [81, 39], [44, 90], [90, 36], [55, 83], [82, 18], [26, 3], [25, 54], [11, 14], [3, 90], [47, 49], [14, 66], [48, 36], [17, 75], [5, 49], [11, 4], [30, 11], [20, 6], [57, 1], [23, 8], [43, 58], [62, 16], [50, 93], [4, 79], [41, 57], [62, 87], [75, 52], [52, 49], [35, 10], [87, 10], [27, 49], [22, 41], [4, 60], [31, 32], [19, 87], [54, 70], [6, 13], [66, 47], [82, 6], [47, 16], [72, 35], [55, 14], [3, 16], [26, 33], [84, 1], [84, 11], [2, 58], [35, 33], [30, 25], [79, 23], [77, 83], [54, 52], [13, 84], [19, 49], [52, 91], [61, 76], [57, 17], [89, 17], [48, 78], [49, 18], [82, 43], [60, 15], [30, 63], [59, 69], [24, 56], [29, 28], [58, 37], [4, 77], [69, 87], [83, 78], [7, 91], [8, 42], [51, 30], [46, 72], [57, 92], [86, 45], [84, 28], [39, 89], [56, 72], [68, 12], [4, 19], [53, 39], [64, 48], [88, 1], [75, 56], [0, 3], [44, 81], [80, 22], [26, 32], [13, 61], [32, 53], [54, 45], [16, 7], [62, 18], [83, 12], [59, 10], [63, 51], [38, 13], [17, 22], [37, 38], [27, 50], [14, 57], [42, 43], [45, 75], [26, 22], [71, 47], [14, 32], [57, 52], [75, 73], [30, 90], [34, 39], [42, 70], [23, 50], [72, 79], [43, 41], [41, 66], [73, 53], [31, 15], [5, 48], [56, 69], [7, 9], [74, 14], [17, 9], [63, 33], [63, 6], [88, 52], [46, 93], [33, 77], [63, 91], [79, 55], [63, 83], [33, 66], [15, 9], [90, 33], [21, 46], [22, 88], [32, 51], [51, 13], [23, 32], [93, 70], [59, 67], [80, 23], [73, 36], [27, 75], [22, 20], [78, 14], [12, 30], [37, 35], [28, 80], [80, 43], [69, 30], [30, 67], [57, 26], [84, 33], [90, 76], [26, 35], [18, 90], [78, 10], [43, 43], [46, 2], [44, 28], [15, 92], [71, 33], [43, 79], [43, 52], [25, 6], [58, 92], [24, 33], [24, 11], [0, 87], [8, 2], [5, 0], [33, 50], [71, 5], [19, 38], [23, 79], [0, 60], [17, 76], [35, 88], [31, 16], [47, 18], [72, 76], [47, 58], [5, 26], [26, 61], [83, 25], [88, 70], [56, 20], [55, 10], [67, 54], [69, 36], [33, 68], [16, 91], [13, 2], [75, 66], [63, 16], [7, 45], [46, 25], [37, 25], [5, 2], [24, 67], [53, 72], [10, 37], [36, 91], [85, 50], [25, 51], [32, 11], [70, 62], [28, 90], [51, 85], [51, 10], [20, 87], [35, 72], [0, 25], [12, 0], [7, 66], [11, 26], [60, 90], [35, 79], [34, 15], [58, 72], [87, 5], [18, 29], [58, 88], [83, 80], [76, 33], [10, 60], [72, 83], [52, 38], [80, 38], [81, 93], [57, 33], [41, 53], [73, 64], [88, 36], [32, 57], [47, 17], [17, 86], [76, 51], [7, 86], [64, 2], [44, 35], [50, 56], [12, 62], [15, 59], [29, 22], [86, 92], [55, 49], [27, 46], [87, 65], [0, 81], [72, 32], [57, 86], [12, 77], [78, 89], [20, 59], [55, 19], [68, 62], [12, 64], [33, 18], [90, 80], [3, 79], [83, 45], [34, 71], [51, 45], [92, 27], [65, 58], [92, 25], [87, 67], [67, 82], [48, 76], [82, 39], [39, 50], [42, 38], [28, 32], [3, 51], [47, 87], [70, 67], [68, 29], [17, 30], [29, 52], [24, 89], [81, 57], [28, 28], [64, 6], [21, 31], [7, 84], [84, 19], [11, 31], [47, 77], [26, 16], [41, 47], [67, 10], [7, 3], [12, 74], [49, 83], [39, 84], [10, 70], [50, 46], [37, 7], [64, 15], [52, 32], [26, 34], [52, 89], [69, 42], [62, 12], [46, 77], [13, 88], [38, 26], [73, 2], [31, 18], [39, 71], [88, 6], [28, 86], [43, 82], [42, 13], [55, 63], [80, 14], [35, 29], [71, 68], [67, 15], [28, 43], [54, 73], [47, 85], [59, 71], [38, 74], [0, 73], [65, 75], [63, 17], [6, 62], [70, 11], [39, 80], [76, 1], [67, 86], [35, 71], [10, 87], [26, 19], [87, 0], [18, 15], [80, 72], [12, 57], [3, 89], [51, 21], [8, 50], [6, 70], [5, 77], [14, 38], [24, 64], [34, 57], [64, 18], [42, 62], [11, 16], [25, 69], [2, 16], [10, 53], [36, 44], [9, 56], [87, 1], [10, 45], [36, 27], [49, 37], [51, 57], [85, 16], [34, 34], [49, 4], [50, 78], [56, 57], [38, 71], [42, 25], [12, 83], [47, 31], [75, 11], [37, 54], [84, 39], [67, 59], [80, 91], [58, 8], [6, 4], [21, 40], [87, 26], [35, 31], [77, 39], [75, 26], [79, 0], [73, 65], [14, 35], [3, 20], [75, 34], [28, 25], [48, 72], [19, 17], [61, 5], [52, 26], [62, 23], [85, 76], [70, 47], [32, 17], [65, 78], [90, 88], [63, 27], [0, 16], [5, 59], [90, 22], [9, 89], [17, 13], [64, 36], [34, 59], [70, 66], [59, 38], [93, 83], [22, 9], [4, 41], [52, 71], [62, 37], [72, 91], [69, 63], [26, 30], [84, 72], [46, 10], [75, 25], [55, 70], [62, 33], [6, 39], [24, 18], [9, 21], [22, 68], [74, 81], [50, 58], [20, 76], [76, 45], [54, 69], [73, 74], [32, 64], [71, 70], [50, 38], [53, 85], [24, 84], [40, 63], [27, 54], [25, 11], [49, 35], [19, 18], [84, 49], [2, 36], [34, 4], [24, 2], [75, 88], [36, 0], [20, 21], [66, 48], [88, 9], [21, 85], [53, 33], [45, 44], [34, 64], [43, 32], [17, 48], [74, 67], [88, 12], [0, 92], [17, 45], [78, 2], [45, 42], [86, 88], [92, 49], [15, 48], [60, 42], [90, 25], [91, 85], [51, 59], [53, 92], [6, 84], [60, 31], [63, 80], [62, 21], [7, 18], [15, 31], [70, 53], [79, 37], [45, 45], [15, 45], [72, 84], [61, 53], [75, 85], [62, 26], [72, 26], [90, 64], [38, 90], [78, 69], [92, 26], [3, 19], [92, 31], [93, 7], [20, 18], [21, 71], [68, 88], [37, 85], [34, 88], [93, 18], [30, 35], [66, 30], [36, 76], [2, 25], [21, 47], [3, 17], [11, 81], [1, 55], [53, 88], [91, 17], [20, 39], [40, 56], [37, 10], [81, 5], [6, 50], [83, 57], [22, 16], [17, 16], [86, 50], [54, 1], [20, 37], [26, 66], [40, 17], [43, 71], [33, 72], [43, 55], [37, 2], [30, 2], [80, 69], [12, 67], [38, 5], [32, 74], [84, 89], [67, 81], [62, 62], [70, 37], [30, 26], [0, 50], [49, 90], [44, 70], [93, 10], [5, 57], [44, 16], [45, 81], [3, 2], [93, 16], [57, 42], [40, 13], [84, 32], [47, 81], [84, 4], [49, 44], [69, 37], [65, 63], [17, 27], [70, 27], [44, 79], [21, 65], [48, 82], [53, 67], [83, 50], [83, 81], [5, 56], [83, 82], [10, 43], [19, 72], [86, 35], [0, 80], [6, 15], [72, 18], [93, 88], [18, 55], [69, 56], [61, 0], [27, 79], [23, 47], [86, 36], [45, 73], [66, 74], [6, 7], [39, 6], [53, 44], [1, 22], [38, 51], [10, 31], [88, 40], [80, 32], [34, 90], [4, 66], [81, 55], [36, 29], [46, 76], [25, 78], [32, 10], [90, 70], [1, 70], [39, 27], [60, 5], [16, 84], [14, 5], [66, 4], [75, 51], [21, 80], [50, 53], [68, 91], [28, 82], [83, 44], [13, 81], [88, 82], [66, 54], [79, 80], [68, 42], [5, 53], [0, 85], [51, 63], [22, 26], [93, 43], [77, 10], [64, 52], [73, 9], [24, 45], [91, 47], [73, 93], [12, 56], [50, 13], [82, 54], [29, 47], [77, 28], [26, 24], [59, 7], [21, 61], [76, 9], [75, 92], [10, 27], [4, 88], [2, 72], [32, 66], [92, 76], [12, 78], [11, 27], [12, 44], [90, 26], [81, 28], [15, 24], [21, 32], [89, 77], [1, 48], [44, 89], [45, 51], [19, 63], [34, 19], [83, 14], [54, 27], [93, 55], [5, 86], [87, 38], [91, 65], [62, 3], [31, 35], [61, 66], [37, 49], [46, 44], [36, 5], [77, 63], [4, 67], [70, 63], [81, 40], [34, 27], [29, 43], [91, 27], [71, 72], [33, 23], [63, 28], [11, 70], [9, 10]]):\n    \"\"\"Find any triangle in the given directed graph.\"\"\"\n    a, b, c = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and a != b != c != a",
    "sols": [
      "def sol(edges=[[13, 41], [44, 76], [7, 77], [84, 52], [5, 16], [92, 90], [13, 73], [76, 72], [33, 33], [64, 42], [24, 34], [86, 76], [10, 51], [13, 50], [36, 80], [7, 54], [77, 43], [71, 44], [20, 52], [33, 32], [7, 50], [43, 92], [53, 68], [11, 65], [54, 10], [66, 89], [18, 0], [0, 1], [84, 77], [37, 82], [45, 34], [40, 24], [34, 37], [23, 59], [20, 20], [4, 8], [78, 20], [49, 73], [63, 79], [41, 33], [80, 42], [22, 56], [61, 29], [11, 36], [65, 14], [30, 43], [29, 3], [53, 71], [22, 70], [64, 47], [16, 35], [71, 75], [81, 39], [44, 90], [90, 36], [55, 83], [82, 18], [26, 3], [25, 54], [11, 14], [3, 90], [47, 49], [14, 66], [48, 36], [17, 75], [5, 49], [11, 4], [30, 11], [20, 6], [57, 1], [23, 8], [43, 58], [62, 16], [50, 93], [4, 79], [41, 57], [62, 87], [75, 52], [52, 49], [35, 10], [87, 10], [27, 49], [22, 41], [4, 60], [31, 32], [19, 87], [54, 70], [6, 13], [66, 47], [82, 6], [47, 16], [72, 35], [55, 14], [3, 16], [26, 33], [84, 1], [84, 11], [2, 58], [35, 33], [30, 25], [79, 23], [77, 83], [54, 52], [13, 84], [19, 49], [52, 91], [61, 76], [57, 17], [89, 17], [48, 78], [49, 18], [82, 43], [60, 15], [30, 63], [59, 69], [24, 56], [29, 28], [58, 37], [4, 77], [69, 87], [83, 78], [7, 91], [8, 42], [51, 30], [46, 72], [57, 92], [86, 45], [84, 28], [39, 89], [56, 72], [68, 12], [4, 19], [53, 39], [64, 48], [88, 1], [75, 56], [0, 3], [44, 81], [80, 22], [26, 32], [13, 61], [32, 53], [54, 45], [16, 7], [62, 18], [83, 12], [59, 10], [63, 51], [38, 13], [17, 22], [37, 38], [27, 50], [14, 57], [42, 43], [45, 75], [26, 22], [71, 47], [14, 32], [57, 52], [75, 73], [30, 90], [34, 39], [42, 70], [23, 50], [72, 79], [43, 41], [41, 66], [73, 53], [31, 15], [5, 48], [56, 69], [7, 9], [74, 14], [17, 9], [63, 33], [63, 6], [88, 52], [46, 93], [33, 77], [63, 91], [79, 55], [63, 83], [33, 66], [15, 9], [90, 33], [21, 46], [22, 88], [32, 51], [51, 13], [23, 32], [93, 70], [59, 67], [80, 23], [73, 36], [27, 75], [22, 20], [78, 14], [12, 30], [37, 35], [28, 80], [80, 43], [69, 30], [30, 67], [57, 26], [84, 33], [90, 76], [26, 35], [18, 90], [78, 10], [43, 43], [46, 2], [44, 28], [15, 92], [71, 33], [43, 79], [43, 52], [25, 6], [58, 92], [24, 33], [24, 11], [0, 87], [8, 2], [5, 0], [33, 50], [71, 5], [19, 38], [23, 79], [0, 60], [17, 76], [35, 88], [31, 16], [47, 18], [72, 76], [47, 58], [5, 26], [26, 61], [83, 25], [88, 70], [56, 20], [55, 10], [67, 54], [69, 36], [33, 68], [16, 91], [13, 2], [75, 66], [63, 16], [7, 45], [46, 25], [37, 25], [5, 2], [24, 67], [53, 72], [10, 37], [36, 91], [85, 50], [25, 51], [32, 11], [70, 62], [28, 90], [51, 85], [51, 10], [20, 87], [35, 72], [0, 25], [12, 0], [7, 66], [11, 26], [60, 90], [35, 79], [34, 15], [58, 72], [87, 5], [18, 29], [58, 88], [83, 80], [76, 33], [10, 60], [72, 83], [52, 38], [80, 38], [81, 93], [57, 33], [41, 53], [73, 64], [88, 36], [32, 57], [47, 17], [17, 86], [76, 51], [7, 86], [64, 2], [44, 35], [50, 56], [12, 62], [15, 59], [29, 22], [86, 92], [55, 49], [27, 46], [87, 65], [0, 81], [72, 32], [57, 86], [12, 77], [78, 89], [20, 59], [55, 19], [68, 62], [12, 64], [33, 18], [90, 80], [3, 79], [83, 45], [34, 71], [51, 45], [92, 27], [65, 58], [92, 25], [87, 67], [67, 82], [48, 76], [82, 39], [39, 50], [42, 38], [28, 32], [3, 51], [47, 87], [70, 67], [68, 29], [17, 30], [29, 52], [24, 89], [81, 57], [28, 28], [64, 6], [21, 31], [7, 84], [84, 19], [11, 31], [47, 77], [26, 16], [41, 47], [67, 10], [7, 3], [12, 74], [49, 83], [39, 84], [10, 70], [50, 46], [37, 7], [64, 15], [52, 32], [26, 34], [52, 89], [69, 42], [62, 12], [46, 77], [13, 88], [38, 26], [73, 2], [31, 18], [39, 71], [88, 6], [28, 86], [43, 82], [42, 13], [55, 63], [80, 14], [35, 29], [71, 68], [67, 15], [28, 43], [54, 73], [47, 85], [59, 71], [38, 74], [0, 73], [65, 75], [63, 17], [6, 62], [70, 11], [39, 80], [76, 1], [67, 86], [35, 71], [10, 87], [26, 19], [87, 0], [18, 15], [80, 72], [12, 57], [3, 89], [51, 21], [8, 50], [6, 70], [5, 77], [14, 38], [24, 64], [34, 57], [64, 18], [42, 62], [11, 16], [25, 69], [2, 16], [10, 53], [36, 44], [9, 56], [87, 1], [10, 45], [36, 27], [49, 37], [51, 57], [85, 16], [34, 34], [49, 4], [50, 78], [56, 57], [38, 71], [42, 25], [12, 83], [47, 31], [75, 11], [37, 54], [84, 39], [67, 59], [80, 91], [58, 8], [6, 4], [21, 40], [87, 26], [35, 31], [77, 39], [75, 26], [79, 0], [73, 65], [14, 35], [3, 20], [75, 34], [28, 25], [48, 72], [19, 17], [61, 5], [52, 26], [62, 23], [85, 76], [70, 47], [32, 17], [65, 78], [90, 88], [63, 27], [0, 16], [5, 59], [90, 22], [9, 89], [17, 13], [64, 36], [34, 59], [70, 66], [59, 38], [93, 83], [22, 9], [4, 41], [52, 71], [62, 37], [72, 91], [69, 63], [26, 30], [84, 72], [46, 10], [75, 25], [55, 70], [62, 33], [6, 39], [24, 18], [9, 21], [22, 68], [74, 81], [50, 58], [20, 76], [76, 45], [54, 69], [73, 74], [32, 64], [71, 70], [50, 38], [53, 85], [24, 84], [40, 63], [27, 54], [25, 11], [49, 35], [19, 18], [84, 49], [2, 36], [34, 4], [24, 2], [75, 88], [36, 0], [20, 21], [66, 48], [88, 9], [21, 85], [53, 33], [45, 44], [34, 64], [43, 32], [17, 48], [74, 67], [88, 12], [0, 92], [17, 45], [78, 2], [45, 42], [86, 88], [92, 49], [15, 48], [60, 42], [90, 25], [91, 85], [51, 59], [53, 92], [6, 84], [60, 31], [63, 80], [62, 21], [7, 18], [15, 31], [70, 53], [79, 37], [45, 45], [15, 45], [72, 84], [61, 53], [75, 85], [62, 26], [72, 26], [90, 64], [38, 90], [78, 69], [92, 26], [3, 19], [92, 31], [93, 7], [20, 18], [21, 71], [68, 88], [37, 85], [34, 88], [93, 18], [30, 35], [66, 30], [36, 76], [2, 25], [21, 47], [3, 17], [11, 81], [1, 55], [53, 88], [91, 17], [20, 39], [40, 56], [37, 10], [81, 5], [6, 50], [83, 57], [22, 16], [17, 16], [86, 50], [54, 1], [20, 37], [26, 66], [40, 17], [43, 71], [33, 72], [43, 55], [37, 2], [30, 2], [80, 69], [12, 67], [38, 5], [32, 74], [84, 89], [67, 81], [62, 62], [70, 37], [30, 26], [0, 50], [49, 90], [44, 70], [93, 10], [5, 57], [44, 16], [45, 81], [3, 2], [93, 16], [57, 42], [40, 13], [84, 32], [47, 81], [84, 4], [49, 44], [69, 37], [65, 63], [17, 27], [70, 27], [44, 79], [21, 65], [48, 82], [53, 67], [83, 50], [83, 81], [5, 56], [83, 82], [10, 43], [19, 72], [86, 35], [0, 80], [6, 15], [72, 18], [93, 88], [18, 55], [69, 56], [61, 0], [27, 79], [23, 47], [86, 36], [45, 73], [66, 74], [6, 7], [39, 6], [53, 44], [1, 22], [38, 51], [10, 31], [88, 40], [80, 32], [34, 90], [4, 66], [81, 55], [36, 29], [46, 76], [25, 78], [32, 10], [90, 70], [1, 70], [39, 27], [60, 5], [16, 84], [14, 5], [66, 4], [75, 51], [21, 80], [50, 53], [68, 91], [28, 82], [83, 44], [13, 81], [88, 82], [66, 54], [79, 80], [68, 42], [5, 53], [0, 85], [51, 63], [22, 26], [93, 43], [77, 10], [64, 52], [73, 9], [24, 45], [91, 47], [73, 93], [12, 56], [50, 13], [82, 54], [29, 47], [77, 28], [26, 24], [59, 7], [21, 61], [76, 9], [75, 92], [10, 27], [4, 88], [2, 72], [32, 66], [92, 76], [12, 78], [11, 27], [12, 44], [90, 26], [81, 28], [15, 24], [21, 32], [89, 77], [1, 48], [44, 89], [45, 51], [19, 63], [34, 19], [83, 14], [54, 27], [93, 55], [5, 86], [87, 38], [91, 65], [62, 3], [31, 35], [61, 66], [37, 49], [46, 44], [36, 5], [77, 63], [4, 67], [70, 63], [81, 40], [34, 27], [29, 43], [91, 27], [71, 72], [33, 23], [63, 28], [11, 70], [9, 10]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass"
    ],
    "module": "graphs",
    "notes": "Easy [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem,\nsee [triangle](https://en.wikipedia.org/w/index.php?title=Triangle_graph)",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyTriangle_7",
    "sat": "def sat(tri: List[int], edges=[[1, 27], [32, 31], [61, 17], [19, 79], [53, 54], [35, 46], [36, 48], [45, 68], [90, 71], [82, 85], [90, 67], [21, 90], [13, 78], [41, 75], [1, 30], [80, 24], [23, 52], [46, 71], [64, 37], [49, 85], [1, 1], [17, 44], [89, 69], [69, 64], [55, 55], [45, 27], [64, 78], [74, 25], [49, 58], [66, 48], [1, 77], [20, 58], [86, 24], [33, 33], [37, 83], [12, 30], [20, 8], [28, 53], [30, 75], [22, 59], [6, 25], [17, 3], [55, 58], [62, 68], [90, 39], [20, 11], [78, 18], [25, 62], [45, 10], [67, 78], [65, 18], [21, 29], [22, 42], [9, 89], [8, 7], [44, 39], [67, 42], [89, 14], [78, 56], [44, 72], [87, 75], [70, 87], [57, 55], [65, 71], [61, 77], [87, 32], [6, 20], [2, 48], [74, 59], [57, 64], [78, 73], [37, 85], [85, 54], [40, 33], [72, 26], [20, 10], [80, 68], [45, 13], [70, 44], [14, 73], [69, 59], [68, 6], [52, 81], [84, 45], [79, 47], [36, 56], [77, 67], [59, 0], [13, 26], [23, 49], [3, 15], [28, 81], [25, 69], [45, 0], [25, 1], [36, 58], [40, 19], [73, 7], [64, 79], [81, 3], [82, 54], [17, 31], [11, 51], [34, 22], [57, 30], [30, 57], [35, 61], [63, 79], [31, 55], [13, 84], [50, 2], [32, 84], [38, 49], [68, 50], [78, 50], [19, 83], [19, 50], [18, 24], [14, 78], [35, 47], [24, 74], [54, 6], [40, 7], [69, 39], [81, 56], [7, 5], [26, 15], [74, 58], [1, 81], [3, 23], [36, 11], [22, 2], [29, 59], [52, 88], [81, 84], [17, 60], [72, 68], [36, 79], [0, 49], [75, 90], [71, 77], [37, 70], [51, 53], [72, 74], [88, 76], [54, 64], [14, 52], [53, 15], [15, 59], [34, 34], [81, 51], [15, 77], [39, 81], [23, 86], [55, 2], [25, 80], [88, 46], [57, 26], [5, 77], [50, 62], [53, 66], [34, 49], [4, 13], [79, 40], [52, 8], [5, 74], [74, 86], [90, 51], [8, 88], [7, 29], [44, 32], [42, 6], [2, 68], [54, 58], [19, 88], [33, 58], [90, 33], [75, 70], [56, 85], [14, 33], [84, 48], [75, 53], [90, 11], [86, 79], [79, 27], [49, 50], [81, 48], [38, 21], [83, 39], [35, 85], [4, 7], [35, 32], [29, 6], [45, 24], [58, 20], [84, 65], [50, 87], [17, 89], [49, 78], [11, 56], [70, 89], [67, 45], [82, 0], [18, 68], [74, 72], [62, 30], [42, 3], [90, 90], [72, 30], [35, 72], [81, 16], [30, 37], [14, 9], [37, 50], [8, 17], [1, 85], [24, 42], [74, 52], [65, 81], [77, 6], [61, 44], [37, 69], [36, 76], [33, 76], [81, 68], [48, 77], [42, 88], [17, 15], [64, 77], [17, 43], [38, 40], [33, 61], [54, 88], [30, 6], [79, 85], [16, 6], [61, 12], [78, 83], [63, 90], [43, 59], [72, 76], [46, 74], [44, 49], [25, 27], [42, 43], [86, 22], [81, 12], [9, 1], [71, 5], [66, 54], [16, 8], [62, 3], [75, 20], [62, 54], [17, 81], [27, 3], [64, 52], [58, 64], [9, 32], [12, 54], [32, 78], [3, 40], [77, 5], [58, 39], [88, 80], [84, 57], [81, 32], [42, 5], [39, 70], [59, 62], [9, 56], [0, 56], [64, 49], [19, 61], [36, 33], [43, 62], [67, 21], [8, 13], [69, 75], [44, 76], [68, 18], [72, 84], [44, 42], [19, 78], [77, 76], [9, 42], [33, 83], [61, 61], [62, 35], [22, 25], [14, 45], [19, 6], [3, 88], [50, 26], [18, 15], [56, 8], [82, 67], [33, 89], [45, 25], [82, 72], [30, 17], [54, 50], [35, 45], [80, 10], [82, 62], [17, 35], [27, 47], [3, 14], [6, 50], [80, 85], [4, 19], [18, 7], [90, 60], [16, 51], [77, 71], [81, 25], [8, 60], [55, 73], [49, 28], [6, 46], [29, 40], [65, 74], [58, 48], [82, 12], [45, 86], [49, 80], [25, 25], [35, 74], [43, 76], [76, 58], [40, 52], [74, 7], [57, 52], [7, 34], [83, 87], [63, 66], [50, 38], [28, 87], [43, 17], [60, 42], [1, 19], [23, 65], [6, 59], [7, 47], [55, 47], [14, 37], [63, 27], [30, 59], [8, 9], [3, 36], [34, 78], [65, 66], [87, 55], [42, 50], [56, 35], [29, 0], [19, 13], [54, 59], [78, 52], [38, 19], [42, 53], [54, 0], [33, 15], [80, 75], [28, 83], [31, 81], [46, 13], [24, 54], [49, 30], [24, 30], [18, 27], [68, 33], [50, 68], [26, 26], [21, 53], [47, 3], [8, 45], [2, 55], [1, 61], [59, 68], [75, 86], [46, 56], [0, 78], [24, 57], [32, 87], [58, 38], [69, 70], [3, 80], [85, 44], [66, 74], [59, 88], [68, 7], [39, 43], [16, 18], [38, 35], [39, 18], [81, 18], [12, 90], [52, 1], [41, 14], [44, 63], [63, 69], [71, 66], [65, 82], [76, 68], [54, 51], [74, 78], [3, 28], [34, 75], [87, 40], [26, 75], [58, 82], [58, 16], [89, 40], [23, 80], [36, 44], [77, 79], [76, 89], [89, 12], [18, 51], [33, 7], [24, 78], [24, 75], [74, 21], [89, 2], [36, 63], [37, 36], [32, 60], [65, 68], [48, 4], [12, 75], [11, 27], [19, 3], [2, 35], [7, 72], [25, 18], [62, 41], [12, 84], [88, 0], [42, 18], [54, 37], [43, 36], [82, 57], [89, 63], [55, 12], [18, 36], [65, 80], [45, 35], [46, 69], [40, 15], [61, 80], [79, 56], [27, 56], [78, 65], [23, 69], [55, 70], [74, 42], [26, 77], [65, 34], [64, 75], [44, 79], [74, 12], [8, 48], [36, 36], [3, 43], [50, 47], [31, 59], [65, 19], [37, 62], [80, 48], [38, 56], [44, 82], [33, 32], [85, 51], [53, 11], [26, 22], [20, 38], [79, 6], [3, 0], [1, 51], [80, 37], [34, 60], [56, 59], [32, 33], [80, 67], [2, 33], [18, 35], [51, 52], [49, 52], [35, 54], [54, 26], [18, 65], [53, 43], [42, 15], [85, 61], [52, 50], [46, 52], [49, 2], [80, 60], [75, 41], [13, 4], [64, 26], [56, 42], [34, 17], [39, 6], [78, 40], [74, 47], [60, 27], [29, 32], [5, 13], [5, 42], [10, 31], [64, 62], [65, 62], [72, 78], [50, 9], [24, 38], [26, 62], [7, 22], [11, 0], [13, 88], [49, 38], [10, 58], [16, 12], [40, 71], [20, 56], [26, 43], [40, 82], [13, 7], [89, 48], [31, 29], [86, 37], [3, 2], [22, 71], [30, 80], [16, 24], [89, 28], [87, 6], [42, 11], [27, 17], [20, 45], [60, 67], [2, 8], [32, 79], [10, 81], [30, 16], [80, 65], [8, 3], [56, 29], [12, 81], [2, 28], [58, 24], [34, 54], [56, 84], [28, 67], [69, 34], [65, 89], [59, 82], [61, 0], [6, 72], [16, 52], [14, 82], [57, 72], [75, 75], [54, 12], [34, 38], [31, 45], [14, 88], [63, 19], [58, 1], [58, 84], [40, 17], [88, 40], [60, 38], [45, 14], [76, 11], [73, 53], [15, 53], [22, 18], [74, 77], [18, 86], [77, 2], [25, 28], [19, 67], [48, 29], [27, 48], [62, 28], [9, 11], [36, 37], [3, 81], [27, 83], [68, 14], [0, 39], [67, 31], [68, 57], [17, 4], [24, 66], [14, 39], [20, 9], [30, 71], [63, 22], [24, 52], [37, 65], [7, 1], [62, 84], [59, 3], [74, 67], [48, 83], [33, 81], [15, 35], [65, 58], [84, 20], [50, 7], [28, 0], [12, 67], [57, 35], [70, 49], [17, 66], [1, 13], [24, 55], [83, 78], [38, 51], [60, 16], [77, 82], [46, 70], [78, 69], [76, 13], [61, 34], [81, 54], [43, 32], [89, 61], [67, 65], [0, 2], [34, 30], [28, 13], [24, 56], [47, 88], [7, 17], [37, 33], [83, 7], [77, 87], [37, 44], [52, 76], [41, 56], [21, 30], [64, 24], [12, 6], [57, 53], [30, 2], [44, 17], [36, 0], [47, 45], [70, 56], [53, 3], [56, 47], [30, 74], [6, 55], [14, 43], [0, 25], [82, 56], [88, 56], [35, 51], [34, 42], [74, 31], [8, 29], [39, 20], [65, 83], [25, 9], [66, 60], [23, 48], [90, 68], [36, 90], [44, 83], [63, 67], [76, 85], [73, 3], [4, 66], [74, 43], [56, 66], [69, 30], [89, 47], [88, 4], [88, 26], [88, 7], [62, 90], [24, 87], [71, 62], [78, 45], [86, 80], [6, 9], [8, 19], [89, 25], [57, 20], [38, 47], [63, 47], [65, 6], [76, 0], [40, 78], [54, 14], [74, 44], [40, 69], [24, 36], [51, 1], [1, 60], [36, 13], [48, 31]]):\n    \"\"\"Find any triangle in the given directed graph.\"\"\"\n    a, b, c = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and a != b != c != a",
    "sols": [
      "def sol(edges=[[1, 27], [32, 31], [61, 17], [19, 79], [53, 54], [35, 46], [36, 48], [45, 68], [90, 71], [82, 85], [90, 67], [21, 90], [13, 78], [41, 75], [1, 30], [80, 24], [23, 52], [46, 71], [64, 37], [49, 85], [1, 1], [17, 44], [89, 69], [69, 64], [55, 55], [45, 27], [64, 78], [74, 25], [49, 58], [66, 48], [1, 77], [20, 58], [86, 24], [33, 33], [37, 83], [12, 30], [20, 8], [28, 53], [30, 75], [22, 59], [6, 25], [17, 3], [55, 58], [62, 68], [90, 39], [20, 11], [78, 18], [25, 62], [45, 10], [67, 78], [65, 18], [21, 29], [22, 42], [9, 89], [8, 7], [44, 39], [67, 42], [89, 14], [78, 56], [44, 72], [87, 75], [70, 87], [57, 55], [65, 71], [61, 77], [87, 32], [6, 20], [2, 48], [74, 59], [57, 64], [78, 73], [37, 85], [85, 54], [40, 33], [72, 26], [20, 10], [80, 68], [45, 13], [70, 44], [14, 73], [69, 59], [68, 6], [52, 81], [84, 45], [79, 47], [36, 56], [77, 67], [59, 0], [13, 26], [23, 49], [3, 15], [28, 81], [25, 69], [45, 0], [25, 1], [36, 58], [40, 19], [73, 7], [64, 79], [81, 3], [82, 54], [17, 31], [11, 51], [34, 22], [57, 30], [30, 57], [35, 61], [63, 79], [31, 55], [13, 84], [50, 2], [32, 84], [38, 49], [68, 50], [78, 50], [19, 83], [19, 50], [18, 24], [14, 78], [35, 47], [24, 74], [54, 6], [40, 7], [69, 39], [81, 56], [7, 5], [26, 15], [74, 58], [1, 81], [3, 23], [36, 11], [22, 2], [29, 59], [52, 88], [81, 84], [17, 60], [72, 68], [36, 79], [0, 49], [75, 90], [71, 77], [37, 70], [51, 53], [72, 74], [88, 76], [54, 64], [14, 52], [53, 15], [15, 59], [34, 34], [81, 51], [15, 77], [39, 81], [23, 86], [55, 2], [25, 80], [88, 46], [57, 26], [5, 77], [50, 62], [53, 66], [34, 49], [4, 13], [79, 40], [52, 8], [5, 74], [74, 86], [90, 51], [8, 88], [7, 29], [44, 32], [42, 6], [2, 68], [54, 58], [19, 88], [33, 58], [90, 33], [75, 70], [56, 85], [14, 33], [84, 48], [75, 53], [90, 11], [86, 79], [79, 27], [49, 50], [81, 48], [38, 21], [83, 39], [35, 85], [4, 7], [35, 32], [29, 6], [45, 24], [58, 20], [84, 65], [50, 87], [17, 89], [49, 78], [11, 56], [70, 89], [67, 45], [82, 0], [18, 68], [74, 72], [62, 30], [42, 3], [90, 90], [72, 30], [35, 72], [81, 16], [30, 37], [14, 9], [37, 50], [8, 17], [1, 85], [24, 42], [74, 52], [65, 81], [77, 6], [61, 44], [37, 69], [36, 76], [33, 76], [81, 68], [48, 77], [42, 88], [17, 15], [64, 77], [17, 43], [38, 40], [33, 61], [54, 88], [30, 6], [79, 85], [16, 6], [61, 12], [78, 83], [63, 90], [43, 59], [72, 76], [46, 74], [44, 49], [25, 27], [42, 43], [86, 22], [81, 12], [9, 1], [71, 5], [66, 54], [16, 8], [62, 3], [75, 20], [62, 54], [17, 81], [27, 3], [64, 52], [58, 64], [9, 32], [12, 54], [32, 78], [3, 40], [77, 5], [58, 39], [88, 80], [84, 57], [81, 32], [42, 5], [39, 70], [59, 62], [9, 56], [0, 56], [64, 49], [19, 61], [36, 33], [43, 62], [67, 21], [8, 13], [69, 75], [44, 76], [68, 18], [72, 84], [44, 42], [19, 78], [77, 76], [9, 42], [33, 83], [61, 61], [62, 35], [22, 25], [14, 45], [19, 6], [3, 88], [50, 26], [18, 15], [56, 8], [82, 67], [33, 89], [45, 25], [82, 72], [30, 17], [54, 50], [35, 45], [80, 10], [82, 62], [17, 35], [27, 47], [3, 14], [6, 50], [80, 85], [4, 19], [18, 7], [90, 60], [16, 51], [77, 71], [81, 25], [8, 60], [55, 73], [49, 28], [6, 46], [29, 40], [65, 74], [58, 48], [82, 12], [45, 86], [49, 80], [25, 25], [35, 74], [43, 76], [76, 58], [40, 52], [74, 7], [57, 52], [7, 34], [83, 87], [63, 66], [50, 38], [28, 87], [43, 17], [60, 42], [1, 19], [23, 65], [6, 59], [7, 47], [55, 47], [14, 37], [63, 27], [30, 59], [8, 9], [3, 36], [34, 78], [65, 66], [87, 55], [42, 50], [56, 35], [29, 0], [19, 13], [54, 59], [78, 52], [38, 19], [42, 53], [54, 0], [33, 15], [80, 75], [28, 83], [31, 81], [46, 13], [24, 54], [49, 30], [24, 30], [18, 27], [68, 33], [50, 68], [26, 26], [21, 53], [47, 3], [8, 45], [2, 55], [1, 61], [59, 68], [75, 86], [46, 56], [0, 78], [24, 57], [32, 87], [58, 38], [69, 70], [3, 80], [85, 44], [66, 74], [59, 88], [68, 7], [39, 43], [16, 18], [38, 35], [39, 18], [81, 18], [12, 90], [52, 1], [41, 14], [44, 63], [63, 69], [71, 66], [65, 82], [76, 68], [54, 51], [74, 78], [3, 28], [34, 75], [87, 40], [26, 75], [58, 82], [58, 16], [89, 40], [23, 80], [36, 44], [77, 79], [76, 89], [89, 12], [18, 51], [33, 7], [24, 78], [24, 75], [74, 21], [89, 2], [36, 63], [37, 36], [32, 60], [65, 68], [48, 4], [12, 75], [11, 27], [19, 3], [2, 35], [7, 72], [25, 18], [62, 41], [12, 84], [88, 0], [42, 18], [54, 37], [43, 36], [82, 57], [89, 63], [55, 12], [18, 36], [65, 80], [45, 35], [46, 69], [40, 15], [61, 80], [79, 56], [27, 56], [78, 65], [23, 69], [55, 70], [74, 42], [26, 77], [65, 34], [64, 75], [44, 79], [74, 12], [8, 48], [36, 36], [3, 43], [50, 47], [31, 59], [65, 19], [37, 62], [80, 48], [38, 56], [44, 82], [33, 32], [85, 51], [53, 11], [26, 22], [20, 38], [79, 6], [3, 0], [1, 51], [80, 37], [34, 60], [56, 59], [32, 33], [80, 67], [2, 33], [18, 35], [51, 52], [49, 52], [35, 54], [54, 26], [18, 65], [53, 43], [42, 15], [85, 61], [52, 50], [46, 52], [49, 2], [80, 60], [75, 41], [13, 4], [64, 26], [56, 42], [34, 17], [39, 6], [78, 40], [74, 47], [60, 27], [29, 32], [5, 13], [5, 42], [10, 31], [64, 62], [65, 62], [72, 78], [50, 9], [24, 38], [26, 62], [7, 22], [11, 0], [13, 88], [49, 38], [10, 58], [16, 12], [40, 71], [20, 56], [26, 43], [40, 82], [13, 7], [89, 48], [31, 29], [86, 37], [3, 2], [22, 71], [30, 80], [16, 24], [89, 28], [87, 6], [42, 11], [27, 17], [20, 45], [60, 67], [2, 8], [32, 79], [10, 81], [30, 16], [80, 65], [8, 3], [56, 29], [12, 81], [2, 28], [58, 24], [34, 54], [56, 84], [28, 67], [69, 34], [65, 89], [59, 82], [61, 0], [6, 72], [16, 52], [14, 82], [57, 72], [75, 75], [54, 12], [34, 38], [31, 45], [14, 88], [63, 19], [58, 1], [58, 84], [40, 17], [88, 40], [60, 38], [45, 14], [76, 11], [73, 53], [15, 53], [22, 18], [74, 77], [18, 86], [77, 2], [25, 28], [19, 67], [48, 29], [27, 48], [62, 28], [9, 11], [36, 37], [3, 81], [27, 83], [68, 14], [0, 39], [67, 31], [68, 57], [17, 4], [24, 66], [14, 39], [20, 9], [30, 71], [63, 22], [24, 52], [37, 65], [7, 1], [62, 84], [59, 3], [74, 67], [48, 83], [33, 81], [15, 35], [65, 58], [84, 20], [50, 7], [28, 0], [12, 67], [57, 35], [70, 49], [17, 66], [1, 13], [24, 55], [83, 78], [38, 51], [60, 16], [77, 82], [46, 70], [78, 69], [76, 13], [61, 34], [81, 54], [43, 32], [89, 61], [67, 65], [0, 2], [34, 30], [28, 13], [24, 56], [47, 88], [7, 17], [37, 33], [83, 7], [77, 87], [37, 44], [52, 76], [41, 56], [21, 30], [64, 24], [12, 6], [57, 53], [30, 2], [44, 17], [36, 0], [47, 45], [70, 56], [53, 3], [56, 47], [30, 74], [6, 55], [14, 43], [0, 25], [82, 56], [88, 56], [35, 51], [34, 42], [74, 31], [8, 29], [39, 20], [65, 83], [25, 9], [66, 60], [23, 48], [90, 68], [36, 90], [44, 83], [63, 67], [76, 85], [73, 3], [4, 66], [74, 43], [56, 66], [69, 30], [89, 47], [88, 4], [88, 26], [88, 7], [62, 90], [24, 87], [71, 62], [78, 45], [86, 80], [6, 9], [8, 19], [89, 25], [57, 20], [38, 47], [63, 47], [65, 6], [76, 0], [40, 78], [54, 14], [74, 44], [40, 69], [24, 36], [51, 1], [1, 60], [36, 13], [48, 31]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass"
    ],
    "module": "graphs",
    "notes": "Easy [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem,\nsee [triangle](https://en.wikipedia.org/w/index.php?title=Triangle_graph)",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyTriangle_8",
    "sat": "def sat(tri: List[int], edges=[[7, 6], [1, 8], [7, 5], [6, 0], [8, 5], [5, 6], [8, 8], [3, 7], [6, 7], [1, 5], [2, 8], [5, 8], [4, 6], [9, 1], [4, 0], [7, 9], [2, 4], [3, 2], [0, 0], [5, 9], [6, 6], [5, 2], [7, 0], [4, 9], [1, 2], [8, 3], [9, 3], [7, 1], [5, 4], [7, 7], [3, 1], [7, 2], [3, 0], [7, 8], [1, 3], [1, 6], [5, 3], [4, 7], [0, 9], [3, 4], [9, 8], [2, 7], [6, 5], [3, 9], [8, 7], [2, 9], [6, 1], [9, 9], [8, 9], [6, 3], [1, 1], [0, 6], [8, 0], [5, 5], [6, 4], [4, 1], [8, 2]]):\n    \"\"\"Find any triangle in the given directed graph.\"\"\"\n    a, b, c = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and a != b != c != a",
    "sols": [
      "def sol(edges=[[7, 6], [1, 8], [7, 5], [6, 0], [8, 5], [5, 6], [8, 8], [3, 7], [6, 7], [1, 5], [2, 8], [5, 8], [4, 6], [9, 1], [4, 0], [7, 9], [2, 4], [3, 2], [0, 0], [5, 9], [6, 6], [5, 2], [7, 0], [4, 9], [1, 2], [8, 3], [9, 3], [7, 1], [5, 4], [7, 7], [3, 1], [7, 2], [3, 0], [7, 8], [1, 3], [1, 6], [5, 3], [4, 7], [0, 9], [3, 4], [9, 8], [2, 7], [6, 5], [3, 9], [8, 7], [2, 9], [6, 1], [9, 9], [8, 9], [6, 3], [1, 1], [0, 6], [8, 0], [5, 5], [6, 4], [4, 1], [8, 2]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass"
    ],
    "module": "graphs",
    "notes": "Easy [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem,\nsee [triangle](https://en.wikipedia.org/w/index.php?title=Triangle_graph)",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyTriangle_9",
    "sat": "def sat(tri: List[int], edges=[[2, 5], [1, 8], [1, 5], [5, 1], [7, 1], [5, 2], [6, 5], [1, 9], [0, 9], [5, 0], [6, 9], [1, 6], [7, 4], [4, 8], [5, 4], [6, 4], [4, 7], [3, 3], [2, 9], [1, 4], [1, 1], [7, 8], [4, 9], [3, 4], [8, 9], [8, 7], [0, 4], [8, 4], [5, 7], [1, 7], [6, 0], [5, 5], [4, 6], [8, 2], [4, 3], [9, 7], [5, 8]]):\n    \"\"\"Find any triangle in the given directed graph.\"\"\"\n    a, b, c = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and a != b != c != a",
    "sols": [
      "def sol(edges=[[2, 5], [1, 8], [1, 5], [5, 1], [7, 1], [5, 2], [6, 5], [1, 9], [0, 9], [5, 0], [6, 9], [1, 6], [7, 4], [4, 8], [5, 4], [6, 4], [4, 7], [3, 3], [2, 9], [1, 4], [1, 1], [7, 8], [4, 9], [3, 4], [8, 9], [8, 7], [0, 4], [8, 4], [5, 7], [1, 7], [6, 0], [5, 5], [4, 6], [8, 2], [4, 3], [9, 7], [5, 8]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass"
    ],
    "module": "graphs",
    "notes": "Easy [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem,\nsee [triangle](https://en.wikipedia.org/w/index.php?title=Triangle_graph)",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "PlantedClique_0",
    "sat": "def sat(nodes: List[int], size=3, edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    \"\"\"Find a clique of the given size in the given undirected graph. It is guaranteed that such a clique exists.\"\"\"\n    assert len(nodes) == len(set(nodes)) >= size\n    edge_set = {(a, b) for (a, b) in edges}\n    for a in nodes:\n        for b in nodes:\n            assert a == b or (a, b) in edge_set or (b, a) in edge_set\n\n    return True",
    "sols": [
      "def sol(size=3, edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):  # brute force (finds list in increasing order), but with a tiny bit of speedup\n    if size == 0:\n        return []\n    from collections import defaultdict\n    neighbors = defaultdict(set)\n    n = max(max(e) for e in edges)\n    for (a, b) in edges:\n        if a != b:\n            neighbors[a].add(b)\n            neighbors[b].add(a)\n    pools = [list(range(n + 1))]\n    indices = [-1]\n    while pools:\n        indices[-1] += 1\n        if indices[-1] >= len(pools[-1]) - size + len(pools):  # since list is increasing order\n            indices.pop()\n            pools.pop()\n            continue\n        if len(pools) == size:\n            return [pool[i] for pool, i in zip(pools, indices)]\n        a = (pools[-1])[indices[-1]]\n        pools.append([i for i in pools[-1] if i > a and i in neighbors[a]])\n        indices.append(-1)\n    assert False, f\"No clique of size {size}\""
    ],
    "module": "graphs",
    "notes": "Find a [planted clique](https://en.wikipedia.org/w/index.php?title=Planted_clique) of a given size\nin an undirected graph. Finding a polynomial-time algorithm for this problem has been *unsolved* for\nsome time.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "PlantedClique_1",
    "sat": "def sat(nodes: List[int], size=0, edges=[[1, 0]]):\n    \"\"\"Find a clique of the given size in the given undirected graph. It is guaranteed that such a clique exists.\"\"\"\n    assert len(nodes) == len(set(nodes)) >= size\n    edge_set = {(a, b) for (a, b) in edges}\n    for a in nodes:\n        for b in nodes:\n            assert a == b or (a, b) in edge_set or (b, a) in edge_set\n\n    return True",
    "sols": [
      "def sol(size=0, edges=[[1, 0]]):  # brute force (finds list in increasing order), but with a tiny bit of speedup\n    if size == 0:\n        return []\n    from collections import defaultdict\n    neighbors = defaultdict(set)\n    n = max(max(e) for e in edges)\n    for (a, b) in edges:\n        if a != b:\n            neighbors[a].add(b)\n            neighbors[b].add(a)\n    pools = [list(range(n + 1))]\n    indices = [-1]\n    while pools:\n        indices[-1] += 1\n        if indices[-1] >= len(pools[-1]) - size + len(pools):  # since list is increasing order\n            indices.pop()\n            pools.pop()\n            continue\n        if len(pools) == size:\n            return [pool[i] for pool, i in zip(pools, indices)]\n        a = (pools[-1])[indices[-1]]\n        pools.append([i for i in pools[-1] if i > a and i in neighbors[a]])\n        indices.append(-1)\n    assert False, f\"No clique of size {size}\""
    ],
    "module": "graphs",
    "notes": "Find a [planted clique](https://en.wikipedia.org/w/index.php?title=Planted_clique) of a given size\nin an undirected graph. Finding a polynomial-time algorithm for this problem has been *unsolved* for\nsome time.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "PlantedClique_2",
    "sat": "def sat(nodes: List[int], size=15, edges=[[36, 31], [31, 39], [16, 41], [62, 39], [57, 38], [29, 46], [39, 30], [71, 41], [18, 0], [73, 71], [20, 23], [41, 53], [17, 12], [76, 23], [36, 29], [53, 32], [34, 61], [58, 29], [39, 46], [18, 73], [21, 51], [74, 26], [67, 10], [71, 74], [27, 71], [67, 39], [41, 26], [51, 20], [5, 2], [24, 3], [14, 60], [28, 21], [61, 1], [56, 75], [62, 37], [67, 41], [32, 69], [22, 16], [1, 67], [37, 14], [55, 40], [0, 58], [16, 63], [8, 59], [26, 61], [34, 51], [43, 66], [31, 33], [7, 51], [1, 0], [22, 9], [59, 68], [9, 10], [8, 74], [62, 8], [26, 16], [45, 69], [51, 52], [72, 67], [37, 53], [48, 5], [18, 41], [15, 11], [72, 43], [64, 51], [4, 9], [54, 42], [62, 15], [12, 38], [30, 31], [56, 37], [29, 2], [14, 9], [43, 43], [51, 28], [10, 15], [20, 5], [24, 61], [53, 2], [69, 1], [35, 63], [12, 64], [50, 12], [69, 65], [60, 75], [56, 48], [36, 67], [21, 6], [38, 67], [15, 34], [46, 54], [37, 18], [32, 2], [12, 49], [52, 15], [60, 2], [67, 43], [13, 49], [55, 59], [33, 72], [37, 30], [11, 27], [67, 2], [57, 55], [21, 65], [54, 66], [6, 63], [71, 59], [20, 59], [47, 34], [66, 67], [4, 8], [73, 61], [68, 41], [61, 7], [52, 38], [8, 51], [50, 15], [5, 12], [76, 74], [66, 33], [59, 18], [13, 55], [6, 16], [13, 26], [29, 44], [18, 43], [63, 47], [46, 30], [41, 18], [66, 18], [34, 26], [57, 28], [38, 10], [34, 57], [73, 41], [67, 3], [47, 57], [63, 62], [36, 30], [72, 45], [68, 19], [7, 28], [50, 23], [42, 29], [3, 66], [56, 45], [4, 25], [2, 43], [4, 38], [56, 74], [55, 10], [0, 13], [9, 19], [38, 69], [40, 57], [70, 41], [49, 45], [47, 27], [11, 8], [32, 5], [9, 38], [76, 64], [24, 33], [74, 63], [73, 58], [58, 41], [75, 0], [33, 55], [74, 2], [41, 72], [1, 64], [36, 74], [51, 71], [75, 9], [53, 36], [8, 70], [53, 42], [58, 25], [29, 37], [34, 46], [37, 39], [59, 61], [52, 20], [16, 58], [39, 43], [37, 40], [10, 72], [76, 14], [49, 13], [21, 37], [42, 2], [10, 29], [76, 19], [57, 66], [55, 62], [76, 53], [0, 0], [58, 5], [14, 2], [5, 32], [70, 57], [20, 18], [74, 66], [39, 57], [32, 36], [15, 30], [56, 23], [67, 16], [66, 51], [6, 74], [43, 59], [33, 70], [11, 71], [59, 28], [75, 29], [17, 13], [75, 67], [70, 1], [68, 10], [8, 46], [37, 27], [20, 24], [72, 75], [37, 41], [68, 24], [35, 10], [67, 66], [18, 24], [52, 3], [55, 34], [28, 75], [41, 3], [44, 3], [44, 30], [23, 17], [44, 4], [72, 73], [67, 12], [43, 21], [16, 55], [59, 71], [26, 62], [34, 60], [15, 22], [5, 10], [2, 55], [48, 15], [60, 34], [39, 35], [52, 36], [11, 46], [18, 10], [3, 43], [37, 6], [34, 47], [73, 29], [59, 29], [49, 72], [64, 73], [20, 76], [39, 39], [0, 16], [62, 73], [15, 36], [73, 18], [16, 34], [18, 68], [66, 45], [16, 66], [47, 52], [46, 66], [73, 43], [22, 55], [70, 58], [63, 11], [40, 2], [58, 60], [47, 29], [19, 45], [15, 41], [54, 5], [1, 18], [36, 38], [16, 19], [32, 4], [56, 14], [15, 51], [14, 35], [74, 10], [7, 20], [25, 38], [35, 13], [57, 34], [3, 16], [56, 28], [21, 56], [63, 65], [46, 35], [17, 57], [2, 30], [52, 73], [68, 73], [53, 10], [58, 59], [29, 16], [11, 20], [42, 27], [10, 66], [73, 5], [61, 58], [68, 67], [14, 47], [19, 59], [8, 42], [31, 12], [3, 2], [52, 66], [28, 72], [30, 56], [27, 12], [29, 18], [38, 56], [11, 17], [59, 66], [70, 7], [1, 54], [2, 16], [1, 14], [25, 20], [69, 72], [20, 74], [10, 59], [72, 52], [26, 15], [44, 42], [5, 51], [76, 69], [16, 10], [75, 39], [5, 44], [0, 46], [16, 76], [66, 73], [66, 72], [11, 11], [47, 13], [20, 26], [73, 59], [3, 10], [46, 49], [17, 38], [32, 62], [41, 2], [16, 72], [76, 61], [15, 37], [74, 69], [38, 46], [68, 58], [51, 70], [20, 46], [59, 2], [35, 21], [72, 37], [69, 20], [3, 72], [43, 71], [1, 71], [48, 59], [43, 58], [74, 5], [59, 72], [45, 24], [66, 69], [35, 38], [16, 5], [40, 24], [63, 30], [16, 18], [72, 29], [72, 58], [42, 5], [17, 30], [14, 21], [48, 23], [53, 44], [1, 47], [57, 33], [47, 69], [65, 52], [51, 44], [60, 35], [41, 9], [59, 75], [57, 73], [58, 28], [65, 23], [36, 48], [26, 40], [39, 41], [58, 3], [40, 42], [58, 49], [28, 42], [33, 36], [44, 24], [2, 68], [30, 57], [10, 51], [3, 68], [26, 42], [51, 13], [12, 69], [19, 60], [58, 39], [1, 45], [66, 16], [41, 27], [56, 1], [28, 18], [66, 29], [37, 49], [59, 4], [29, 67], [38, 29], [54, 57], [47, 61], [68, 29], [38, 9], [51, 41], [41, 10], [19, 61], [3, 22], [72, 23], [18, 11], [27, 17], [72, 74], [5, 37], [66, 68], [2, 3], [60, 27], [68, 72], [64, 20], [67, 18], [6, 66], [24, 60], [14, 75], [9, 11], [71, 50], [66, 43], [6, 60], [54, 22], [71, 53], [51, 7], [49, 40], [7, 74], [72, 30], [20, 71], [28, 74], [36, 55], [16, 17], [66, 2], [53, 8], [18, 2], [62, 63], [63, 26], [19, 34], [26, 27], [67, 51], [61, 46], [37, 29], [66, 41], [51, 54], [3, 17], [35, 6], [50, 51], [8, 15], [15, 55], [10, 65], [57, 59], [69, 21], [73, 70], [21, 30], [28, 28], [67, 59], [39, 76], [56, 12], [22, 69], [76, 7], [63, 66], [9, 40], [64, 28], [65, 31], [6, 59], [73, 73], [24, 29], [44, 18], [67, 1], [16, 12], [73, 2], [74, 27], [25, 58], [18, 52], [12, 66], [32, 25], [26, 4], [34, 27], [51, 39], [23, 11], [13, 65], [18, 28], [19, 6], [68, 59], [51, 72], [59, 74], [59, 3], [41, 29], [36, 6], [49, 37], [71, 39], [33, 13], [38, 68], [34, 19], [64, 36], [4, 29], [72, 60], [52, 41], [36, 66], [34, 70], [22, 32], [67, 40], [3, 73], [19, 12], [17, 0], [22, 8], [42, 35], [34, 54], [71, 29], [6, 7], [10, 43], [8, 56], [2, 58], [72, 2], [67, 65], [1, 23], [13, 21], [62, 38], [2, 66], [42, 62], [38, 27], [1, 22], [16, 29], [39, 54], [41, 0], [42, 54], [50, 58], [62, 45], [59, 76], [40, 44], [72, 18], [45, 40], [31, 3], [13, 45], [38, 64], [1, 21], [10, 32], [35, 12], [32, 6], [62, 75], [52, 59], [1, 42], [72, 31], [55, 17], [18, 50], [43, 29], [48, 37], [73, 16], [43, 68], [47, 12], [55, 46], [41, 30], [69, 32], [55, 14], [74, 61], [55, 72], [75, 24], [63, 40], [10, 58], [67, 73], [20, 11], [42, 40], [27, 53], [5, 8], [10, 2], [27, 49], [50, 48], [18, 58], [60, 25], [74, 71], [0, 30], [3, 29], [59, 5], [43, 16], [59, 41], [74, 4], [19, 20], [53, 19], [57, 50], [60, 11], [16, 68], [9, 50], [71, 17], [73, 66], [59, 43], [68, 32], [75, 31], [27, 56], [47, 24], [29, 7], [27, 25], [48, 36], [0, 53], [0, 72], [24, 53], [13, 64], [19, 44], [9, 56], [35, 75], [75, 17], [47, 16], [11, 42], [40, 45], [43, 60], [21, 59], [29, 50], [8, 9], [3, 18], [7, 57], [32, 9], [61, 6], [11, 6], [7, 72], [42, 61], [73, 75], [68, 44], [68, 66], [25, 56], [14, 20], [3, 50], [32, 57], [67, 58], [41, 68], [19, 26], [30, 3], [23, 45], [16, 60], [41, 43], [5, 30], [5, 25], [72, 16], [16, 73], [21, 17], [16, 59], [8, 34], [4, 39], [23, 72], [35, 53], [31, 50], [20, 44], [50, 13], [72, 1], [8, 8], [74, 54], [1, 1], [16, 43], [39, 36], [51, 2], [23, 54], [66, 58], [60, 33], [2, 63], [73, 10]]):\n    \"\"\"Find a clique of the given size in the given undirected graph. It is guaranteed that such a clique exists.\"\"\"\n    assert len(nodes) == len(set(nodes)) >= size\n    edge_set = {(a, b) for (a, b) in edges}\n    for a in nodes:\n        for b in nodes:\n            assert a == b or (a, b) in edge_set or (b, a) in edge_set\n\n    return True",
    "sols": [],
    "module": "graphs",
    "notes": "Find a [planted clique](https://en.wikipedia.org/w/index.php?title=Planted_clique) of a given size\nin an undirected graph. Finding a polynomial-time algorithm for this problem has been *unsolved* for\nsome time.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "PlantedClique_3",
    "sat": "def sat(nodes: List[int], size=18, edges=[[34, 43], [45, 8], [7, 46], [53, 11], [48, 24], [47, 46], [20, 46], [11, 57], [39, 17], [25, 13], [9, 49], [47, 51], [5, 22], [56, 8], [5, 20], [11, 26], [40, 20], [30, 42], [46, 35], [41, 11], [49, 57], [24, 46], [40, 27], [3, 13], [25, 36], [20, 49], [57, 24], [56, 26], [1, 52], [8, 26], [17, 44], [1, 21], [5, 6], [45, 45], [39, 25], [48, 27], [26, 17], [37, 25], [17, 16], [49, 0], [17, 56], [33, 43], [20, 43], [24, 20], [31, 56], [54, 28], [25, 27], [50, 5], [21, 43], [54, 25], [57, 45], [48, 5], [45, 34], [18, 46], [25, 47], [56, 48], [17, 57], [15, 29], [40, 22], [23, 57], [17, 27], [1, 14], [7, 54], [15, 24], [27, 44], [24, 44], [6, 7], [59, 13], [56, 51], [49, 46], [1, 32], [20, 36], [46, 13], [15, 46], [6, 46], [59, 51], [35, 5], [27, 10], [3, 16], [24, 33], [34, 49], [4, 38], [46, 24], [46, 3], [41, 39], [12, 9], [44, 39], [27, 23], [33, 11], [16, 24], [29, 59], [47, 39], [32, 10], [23, 36], [48, 30], [48, 20], [18, 43], [36, 9], [36, 16], [27, 57], [29, 35], [13, 41], [52, 12], [32, 20], [9, 50], [29, 27], [47, 44], [57, 39], [48, 57], [35, 45], [9, 23], [25, 55], [32, 25], [5, 57], [44, 16], [5, 27], [16, 37], [15, 25], [39, 51], [43, 14], [13, 44], [2, 5], [40, 4], [58, 30], [43, 6], [25, 28], [16, 35], [57, 44], [51, 54], [21, 11], [18, 19], [41, 20], [44, 48], [14, 54], [57, 16], [15, 5], [37, 15], [44, 49], [15, 20], [11, 20], [45, 1], [3, 32], [7, 22], [48, 39], [28, 37], [11, 51], [20, 16], [32, 4], [13, 17], [16, 15], [20, 37], [37, 46], [33, 59], [46, 25], [42, 1], [32, 33], [13, 53], [46, 18], [44, 23], [17, 48], [5, 24], [10, 40], [19, 11], [37, 47], [11, 42], [13, 24], [13, 27], [42, 9], [13, 5], [29, 17], [57, 4], [31, 25], [38, 32], [21, 45], [0, 21], [1, 0], [20, 13], [24, 37], [20, 25], [5, 17], [20, 47], [46, 41], [11, 0], [25, 22], [5, 28], [44, 5], [10, 11], [41, 22], [17, 25], [25, 20], [20, 17], [39, 46], [49, 25], [41, 0], [12, 44], [41, 49], [55, 8], [47, 49], [27, 49], [2, 11], [38, 11], [27, 46], [16, 9], [41, 47], [17, 15], [37, 31], [48, 48], [53, 59], [25, 24], [3, 44], [34, 48], [33, 13], [15, 47], [16, 39], [48, 8], [32, 55], [38, 22], [11, 23], [41, 16], [21, 44], [20, 27], [13, 57], [27, 41], [29, 32], [56, 39], [31, 51], [46, 20], [24, 49], [25, 3], [57, 37], [15, 44], [9, 41], [15, 48], [42, 57], [47, 5], [48, 37], [45, 49], [44, 41], [7, 3], [39, 49], [49, 37], [24, 16], [57, 41], [56, 2], [49, 20], [19, 5], [58, 18], [7, 31], [24, 5], [41, 32], [34, 23], [17, 5], [47, 27], [49, 41], [31, 12], [0, 11], [49, 15], [13, 15], [29, 31], [14, 56], [24, 41], [35, 1], [16, 25], [26, 28], [16, 49], [12, 46], [47, 16], [17, 37], [37, 39], [3, 22], [27, 24], [20, 39], [24, 4], [33, 15], [53, 50], [32, 1], [23, 40], [33, 25], [4, 24], [48, 25], [47, 57], [25, 8], [39, 30], [17, 53], [41, 53], [31, 8], [39, 33], [33, 16], [32, 19], [41, 5], [49, 17], [53, 40], [42, 52], [24, 17], [30, 59], [13, 14], [43, 27], [48, 16], [24, 47], [37, 23], [30, 47], [49, 10], [47, 12], [5, 37], [48, 47], [59, 27], [57, 17], [27, 33], [12, 30], [41, 48], [5, 46], [12, 25], [53, 46], [54, 8], [48, 1], [22, 25], [20, 44], [14, 38], [48, 13], [3, 3], [59, 4], [14, 7], [49, 26], [36, 5], [28, 32], [57, 46], [22, 34], [11, 54], [27, 58], [4, 11], [24, 39], [57, 25], [15, 27], [6, 15], [27, 29], [51, 37], [48, 23], [15, 57], [27, 25], [0, 57], [49, 48], [27, 34], [21, 5], [31, 40], [38, 45], [15, 1], [17, 42], [5, 16], [59, 32], [13, 51], [17, 47], [38, 54], [4, 43], [54, 9], [42, 31], [16, 13], [20, 57], [58, 10], [41, 30], [52, 19], [52, 35], [46, 44], [51, 4], [30, 39], [47, 13], [30, 32], [36, 42], [39, 15], [3, 19], [12, 16], [46, 16], [12, 37], [46, 48], [58, 46], [5, 25], [46, 6], [49, 44], [18, 23], [50, 24], [16, 16], [49, 53], [37, 33], [4, 15], [46, 17], [7, 20], [25, 41], [27, 56], [37, 41], [38, 55], [59, 28], [31, 7], [10, 47], [40, 23], [49, 5], [44, 25], [8, 36], [26, 39], [34, 3], [5, 12], [54, 22], [15, 41], [40, 19], [21, 12], [16, 5], [13, 49], [39, 5], [9, 9], [11, 53], [27, 16], [27, 39], [52, 14], [3, 56], [27, 37], [30, 15], [41, 17], [1, 34], [55, 32], [28, 22], [49, 27], [10, 55], [39, 37], [30, 17], [23, 9], [22, 11], [44, 37], [41, 37], [37, 13], [51, 18], [4, 34], [23, 12], [39, 13], [32, 9], [58, 14], [25, 48], [29, 14], [52, 2]]):\n    \"\"\"Find a clique of the given size in the given undirected graph. It is guaranteed that such a clique exists.\"\"\"\n    assert len(nodes) == len(set(nodes)) >= size\n    edge_set = {(a, b) for (a, b) in edges}\n    for a in nodes:\n        for b in nodes:\n            assert a == b or (a, b) in edge_set or (b, a) in edge_set\n\n    return True",
    "sols": [],
    "module": "graphs",
    "notes": "Find a [planted clique](https://en.wikipedia.org/w/index.php?title=Planted_clique) of a given size\nin an undirected graph. Finding a polynomial-time algorithm for this problem has been *unsolved* for\nsome time.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "PlantedClique_4",
    "sat": "def sat(nodes: List[int], size=0, edges=[[0, 1], [1, 0]]):\n    \"\"\"Find a clique of the given size in the given undirected graph. It is guaranteed that such a clique exists.\"\"\"\n    assert len(nodes) == len(set(nodes)) >= size\n    edge_set = {(a, b) for (a, b) in edges}\n    for a in nodes:\n        for b in nodes:\n            assert a == b or (a, b) in edge_set or (b, a) in edge_set\n\n    return True",
    "sols": [
      "def sol(size=0, edges=[[0, 1], [1, 0]]):  # brute force (finds list in increasing order), but with a tiny bit of speedup\n    if size == 0:\n        return []\n    from collections import defaultdict\n    neighbors = defaultdict(set)\n    n = max(max(e) for e in edges)\n    for (a, b) in edges:\n        if a != b:\n            neighbors[a].add(b)\n            neighbors[b].add(a)\n    pools = [list(range(n + 1))]\n    indices = [-1]\n    while pools:\n        indices[-1] += 1\n        if indices[-1] >= len(pools[-1]) - size + len(pools):  # since list is increasing order\n            indices.pop()\n            pools.pop()\n            continue\n        if len(pools) == size:\n            return [pool[i] for pool, i in zip(pools, indices)]\n        a = (pools[-1])[indices[-1]]\n        pools.append([i for i in pools[-1] if i > a and i in neighbors[a]])\n        indices.append(-1)\n    assert False, f\"No clique of size {size}\""
    ],
    "module": "graphs",
    "notes": "Find a [planted clique](https://en.wikipedia.org/w/index.php?title=Planted_clique) of a given size\nin an undirected graph. Finding a polynomial-time algorithm for this problem has been *unsolved* for\nsome time.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "PlantedClique_5",
    "sat": "def sat(nodes: List[int], size=6, edges=[[7, 17], [4, 2], [9, 12], [9, 0], [17, 9], [5, 0], [12, 16], [7, 5], [15, 9], [17, 12], [11, 16], [0, 17], [12, 5], [9, 7], [7, 12], [17, 5], [9, 5], [15, 13], [0, 7], [0, 12], [9, 14]]):\n    \"\"\"Find a clique of the given size in the given undirected graph. It is guaranteed that such a clique exists.\"\"\"\n    assert len(nodes) == len(set(nodes)) >= size\n    edge_set = {(a, b) for (a, b) in edges}\n    for a in nodes:\n        for b in nodes:\n            assert a == b or (a, b) in edge_set or (b, a) in edge_set\n\n    return True",
    "sols": [
      "def sol(size=6, edges=[[7, 17], [4, 2], [9, 12], [9, 0], [17, 9], [5, 0], [12, 16], [7, 5], [15, 9], [17, 12], [11, 16], [0, 17], [12, 5], [9, 7], [7, 12], [17, 5], [9, 5], [15, 13], [0, 7], [0, 12], [9, 14]]):  # brute force (finds list in increasing order), but with a tiny bit of speedup\n    if size == 0:\n        return []\n    from collections import defaultdict\n    neighbors = defaultdict(set)\n    n = max(max(e) for e in edges)\n    for (a, b) in edges:\n        if a != b:\n            neighbors[a].add(b)\n            neighbors[b].add(a)\n    pools = [list(range(n + 1))]\n    indices = [-1]\n    while pools:\n        indices[-1] += 1\n        if indices[-1] >= len(pools[-1]) - size + len(pools):  # since list is increasing order\n            indices.pop()\n            pools.pop()\n            continue\n        if len(pools) == size:\n            return [pool[i] for pool, i in zip(pools, indices)]\n        a = (pools[-1])[indices[-1]]\n        pools.append([i for i in pools[-1] if i > a and i in neighbors[a]])\n        indices.append(-1)\n    assert False, f\"No clique of size {size}\""
    ],
    "module": "graphs",
    "notes": "Find a [planted clique](https://en.wikipedia.org/w/index.php?title=Planted_clique) of a given size\nin an undirected graph. Finding a polynomial-time algorithm for this problem has been *unsolved* for\nsome time.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "PlantedClique_6",
    "sat": "def sat(nodes: List[int], size=19, edges=[[17, 63], [8, 12], [91, 66], [4, 21], [92, 4], [6, 59], [57, 74], [4, 45], [81, 66], [85, 68], [72, 35], [57, 88], [57, 81], [15, 3], [77, 42], [4, 91], [17, 85], [50, 65], [38, 70], [85, 33], [29, 88], [8, 18], [59, 27], [7, 10], [41, 11], [81, 79], [38, 1], [45, 48], [92, 66], [28, 49], [80, 69], [40, 59], [88, 67], [50, 88], [21, 57], [67, 81], [4, 77], [58, 83], [92, 81], [88, 45], [74, 48], [96, 3], [48, 78], [93, 23], [61, 39], [54, 23], [0, 28], [4, 50], [79, 6], [55, 81], [57, 91], [59, 70], [81, 91], [25, 34], [73, 83], [22, 32], [0, 90], [4, 48], [65, 45], [33, 91], [24, 93], [74, 50], [95, 95], [39, 73], [57, 30], [30, 4], [78, 76], [48, 17], [78, 34], [7, 75], [87, 64], [85, 21], [50, 54], [80, 41], [28, 69], [74, 30], [49, 41], [87, 54], [21, 10], [93, 84], [6, 55], [36, 89], [28, 23], [38, 59], [45, 30], [7, 83], [98, 87], [68, 35], [92, 55], [60, 49], [92, 72], [73, 77], [10, 11], [60, 82], [48, 57], [36, 12], [76, 15], [33, 35], [67, 6], [56, 38], [61, 22], [74, 85], [75, 49], [30, 85], [70, 50], [98, 52], [51, 7], [6, 21], [6, 91], [0, 64], [67, 21], [46, 28], [88, 55], [6, 66], [15, 43], [89, 28], [4, 55], [73, 78], [60, 28], [84, 62], [93, 46], [67, 74], [85, 91], [23, 22], [87, 82], [45, 74], [50, 91], [55, 50], [74, 17], [67, 4], [73, 32], [17, 30], [45, 66], [15, 67], [59, 43], [91, 30], [70, 68], [45, 17], [55, 91], [59, 88], [55, 61], [3, 13], [59, 45], [24, 31], [66, 67], [55, 57], [4, 34], [82, 48], [55, 21], [85, 55], [56, 30], [85, 81], [59, 57], [81, 45], [11, 45], [58, 76], [21, 97], [13, 15], [67, 50], [48, 88], [85, 45], [71, 52], [74, 21], [33, 51], [70, 80], [1, 42], [33, 56], [88, 92], [44, 85], [68, 57], [14, 82], [57, 6], [82, 12], [97, 86], [21, 94], [0, 8], [12, 0], [89, 94], [43, 75], [46, 64], [39, 22], [57, 4], [30, 42], [83, 71], [14, 14], [0, 45], [65, 10], [87, 4], [88, 74], [30, 13], [67, 65], [20, 43], [74, 0], [13, 49], [59, 85], [85, 92], [9, 42], [6, 50], [73, 81], [50, 21], [75, 30], [1, 31], [66, 17], [44, 59], [30, 66], [50, 77], [48, 42], [35, 94], [45, 92], [66, 57], [26, 29], [15, 46], [5, 49], [35, 95], [77, 50], [79, 95], [49, 80], [85, 66], [59, 50], [67, 91], [59, 48], [81, 50], [55, 85], [6, 19], [9, 96], [9, 3], [59, 17], [59, 92], [76, 49], [38, 30], [36, 26], [81, 27], [87, 75], [30, 45], [92, 50], [45, 94], [4, 46], [17, 36], [0, 15], [34, 11], [30, 50], [92, 85], [30, 81], [6, 88], [17, 6], [86, 64], [13, 25], [29, 20], [45, 50], [55, 59], [90, 87], [19, 45], [59, 81], [63, 57], [91, 45], [1, 74], [32, 56], [85, 6], [30, 55], [2, 3], [12, 43], [61, 52], [28, 2], [36, 85], [27, 37], [21, 92], [26, 98], [55, 17], [22, 45], [48, 55], [83, 60], [12, 72], [59, 67], [68, 84], [85, 4], [43, 89], [4, 6], [91, 59], [57, 77], [66, 55], [88, 21], [8, 48], [37, 79], [19, 46], [93, 21], [44, 70], [11, 25], [26, 75], [23, 20], [64, 83], [84, 19], [30, 67], [27, 82], [92, 57], [81, 13], [45, 57], [17, 67], [29, 17], [34, 82], [74, 66], [37, 65], [87, 61], [48, 67], [69, 60], [67, 45], [69, 22], [83, 94], [60, 8], [21, 30], [74, 92], [17, 20], [90, 48], [32, 77], [96, 95], [34, 87], [68, 9], [50, 71], [84, 43], [33, 66], [92, 30], [21, 91], [16, 71], [18, 54], [74, 27], [66, 4], [30, 75], [66, 74], [78, 39], [33, 45], [34, 59], [9, 48], [18, 26], [24, 73], [67, 55], [2, 61], [50, 66], [88, 4], [92, 17], [12, 67], [2, 49], [21, 59], [18, 11], [48, 66], [21, 48], [85, 67], [6, 74], [83, 10], [66, 22], [28, 1], [17, 50], [98, 85], [55, 27], [98, 76], [6, 81], [57, 15], [88, 66], [45, 21], [4, 17], [59, 30], [91, 42], [48, 26], [1, 80], [85, 51], [17, 21], [36, 87], [39, 54], [96, 49], [6, 48], [64, 35], [48, 81], [0, 4], [56, 15], [8, 94], [2, 44], [38, 88], [42, 7], [26, 94], [2, 77], [5, 67], [72, 50], [85, 88], [88, 91], [56, 81], [80, 18], [85, 48], [17, 83], [6, 92], [92, 23], [57, 67], [28, 34], [31, 28], [66, 21], [50, 85], [54, 20], [28, 89], [87, 19], [7, 36], [2, 28], [44, 22], [16, 65], [1, 27], [22, 76], [91, 48], [19, 62], [26, 7], [83, 90], [48, 50], [17, 81], [48, 92], [2, 95], [34, 68], [35, 90], [43, 17], [76, 33], [50, 57], [85, 57], [80, 3], [29, 18], [13, 89], [67, 24], [74, 59], [24, 13], [88, 83], [58, 12], [81, 88], [41, 78], [30, 88], [4, 74], [92, 91], [53, 22], [74, 91], [21, 46], [55, 45], [1, 33], [74, 86], [78, 69], [23, 63], [94, 47], [52, 30], [1, 92], [92, 67], [95, 18], [28, 31], [66, 59], [81, 4], [6, 45], [24, 71], [55, 74], [17, 57], [48, 30], [74, 89], [63, 79], [21, 81], [32, 76], [91, 17], [6, 30], [81, 74], [95, 60], [1, 68], [62, 32], [81, 51], [27, 47], [79, 23], [88, 17], [4, 59], [71, 35], [4, 41], [61, 69], [5, 34]]):\n    \"\"\"Find a clique of the given size in the given undirected graph. It is guaranteed that such a clique exists.\"\"\"\n    assert len(nodes) == len(set(nodes)) >= size\n    edge_set = {(a, b) for (a, b) in edges}\n    for a in nodes:\n        for b in nodes:\n            assert a == b or (a, b) in edge_set or (b, a) in edge_set\n\n    return True",
    "sols": [],
    "module": "graphs",
    "notes": "Find a [planted clique](https://en.wikipedia.org/w/index.php?title=Planted_clique) of a given size\nin an undirected graph. Finding a polynomial-time algorithm for this problem has been *unsolved* for\nsome time.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "PlantedClique_7",
    "sat": "def sat(nodes: List[int], size=12, edges=[[52, 42], [28, 30], [7, 3], [41, 35], [47, 56], [52, 11], [15, 52], [26, 30], [2, 12], [36, 51], [40, 56], [38, 18], [17, 16], [1, 17], [41, 59], [31, 24], [30, 18], [26, 44], [53, 13], [1, 34], [27, 24], [27, 40], [37, 15], [49, 5], [46, 23], [42, 29], [6, 41], [21, 33], [2, 47], [42, 26], [5, 58], [41, 42], [16, 49], [44, 5], [4, 33], [34, 33], [7, 1], [0, 4], [40, 59], [19, 24], [6, 14], [14, 2], [55, 9], [3, 43], [39, 57], [35, 20], [30, 42], [21, 40], [56, 30], [9, 55], [55, 10], [41, 9], [34, 35], [22, 33], [31, 17], [40, 0], [58, 44], [5, 24], [22, 30], [53, 17], [52, 1], [50, 22], [2, 58], [55, 30], [32, 46], [35, 50], [33, 38], [34, 18], [36, 17], [5, 13], [6, 35], [55, 13], [12, 30], [1, 58], [25, 12], [7, 40], [25, 3], [56, 21], [50, 41], [49, 20], [42, 0], [15, 35], [0, 10], [14, 46], [11, 2], [20, 11], [58, 59], [30, 28], [37, 54], [44, 55], [34, 21], [48, 13], [57, 6], [18, 11], [37, 22], [17, 8], [41, 22], [59, 54], [21, 51], [26, 25], [50, 15], [21, 30], [57, 23], [1, 18], [53, 47], [16, 18], [53, 50], [2, 55], [45, 22], [46, 4], [40, 53], [26, 58], [28, 34], [44, 46], [38, 54], [3, 4], [17, 2], [20, 1], [58, 23], [20, 2], [24, 45], [12, 43], [24, 34], [2, 28], [38, 0], [55, 53], [8, 4], [22, 0], [13, 33], [57, 20], [58, 12], [1, 33], [34, 8], [31, 28], [28, 13], [57, 27], [55, 35], [57, 32], [4, 54], [44, 8], [53, 30], [26, 28], [39, 45], [2, 42], [35, 35], [2, 36], [22, 42], [24, 27], [21, 7], [16, 11], [37, 10], [28, 27], [9, 3], [9, 20], [17, 42], [50, 35], [10, 41], [28, 12], [57, 28], [43, 30], [2, 19], [23, 8], [13, 52], [6, 0], [27, 47], [57, 26], [50, 42], [9, 16], [5, 0], [57, 22], [26, 57], [41, 50], [44, 24], [18, 59], [54, 43], [38, 38], [53, 32], [30, 0], [34, 45], [14, 7], [2, 41], [6, 6], [28, 28], [22, 59], [13, 40], [32, 1], [28, 25], [39, 5], [5, 35], [50, 51], [4, 58], [22, 47], [59, 53], [48, 16], [32, 42], [28, 2], [54, 48], [51, 44], [36, 47], [56, 32], [57, 30], [17, 35], [33, 40], [39, 10], [57, 42], [2, 10], [24, 11], [52, 24], [22, 58], [43, 38], [37, 51], [2, 27], [57, 0], [9, 54], [49, 59], [0, 35], [29, 9], [55, 20], [19, 54], [38, 46], [6, 28], [55, 38], [28, 40], [42, 37], [46, 7], [10, 39], [18, 54], [53, 56], [42, 53], [23, 55], [35, 33], [32, 9], [41, 54], [0, 53], [22, 36], [43, 51], [54, 36], [18, 46], [14, 44], [26, 26], [37, 37], [12, 18], [41, 58], [15, 43], [42, 35], [16, 52], [33, 51], [3, 58], [18, 27], [54, 20], [56, 38], [45, 48], [22, 54], [8, 3], [20, 7], [28, 50], [51, 40], [7, 59], [27, 36], [1, 54], [25, 43], [39, 13], [32, 57], [40, 32], [38, 48], [16, 40], [41, 53], [50, 36], [7, 24], [54, 41], [25, 36], [30, 54], [33, 12], [25, 1], [41, 39], [2, 5], [54, 57], [53, 27], [33, 1], [13, 53], [52, 15], [46, 58], [33, 5], [57, 35], [53, 28], [44, 45], [28, 35], [8, 28], [30, 41], [8, 41], [9, 8], [50, 21], [50, 57], [24, 57], [24, 3], [36, 30], [19, 6], [45, 39], [56, 20], [18, 52], [53, 41], [42, 44], [49, 6], [22, 53], [25, 42], [58, 47], [47, 50], [28, 54], [42, 41], [27, 50], [45, 50], [41, 40], [21, 5], [31, 14], [22, 57], [32, 59], [30, 35], [42, 46], [53, 7], [50, 0], [28, 0], [35, 54], [10, 45], [55, 21], [32, 39], [41, 37], [22, 29], [45, 30], [3, 41], [16, 36], [24, 19], [45, 21], [25, 27], [36, 13], [12, 11], [40, 54], [15, 7], [21, 31], [53, 35], [14, 36], [27, 54], [50, 26], [15, 46], [15, 37], [14, 9], [48, 24], [45, 36], [9, 40], [34, 42], [9, 10], [43, 22], [13, 27], [45, 57], [46, 32], [44, 25], [7, 15], [7, 25], [43, 13], [23, 16], [14, 35], [14, 22], [47, 22], [0, 3], [8, 8], [41, 0], [51, 6], [30, 36], [22, 55], [20, 38], [34, 57], [10, 18], [53, 6], [2, 48], [9, 15], [33, 33], [45, 11], [19, 8], [10, 5], [54, 42], [8, 16], [20, 39], [6, 17], [5, 27], [59, 13], [56, 11], [42, 10], [11, 6], [50, 30], [59, 39], [42, 28], [33, 14], [22, 12], [16, 34], [34, 40], [6, 30], [15, 59], [11, 3], [15, 11], [11, 37], [36, 5], [24, 32], [48, 25], [37, 53], [53, 25], [21, 8], [42, 11], [3, 51], [47, 31], [6, 54], [52, 43], [13, 31], [22, 49], [52, 30], [22, 50], [17, 19], [29, 14], [9, 56], [5, 19], [33, 0], [12, 42], [17, 51], [33, 8], [17, 28], [30, 6], [56, 27], [41, 28], [22, 20], [32, 51], [44, 2], [58, 15], [58, 38], [16, 51], [22, 35], [21, 17], [23, 4], [23, 40], [51, 19], [40, 39], [26, 24], [42, 6], [23, 48], [0, 7], [53, 54], [18, 28], [19, 52], [27, 58], [17, 7], [31, 1], [11, 5], [36, 28], [48, 1], [59, 27], [30, 7], [59, 51], [53, 36], [40, 5], [54, 23], [6, 53], [48, 46], [31, 9], [51, 18], [33, 23], [31, 42], [55, 49], [29, 41], [59, 0], [54, 35], [41, 57], [2, 21], [59, 32], [15, 12], [15, 49], [47, 8], [28, 22], [14, 21], [45, 58], [13, 11], [49, 35], [54, 0], [12, 6], [56, 57], [27, 31], [50, 56], [46, 3], [27, 3], [54, 22], [41, 3], [35, 56], [23, 46], [9, 35], [6, 50], [38, 14], [10, 57], [2, 25], [32, 25], [32, 8], [22, 11], [45, 55], [25, 32], [43, 21], [18, 22], [53, 59], [0, 58], [51, 8], [6, 8], [25, 37], [46, 47], [14, 50], [15, 4], [37, 43], [7, 6], [22, 23], [46, 29], [34, 17], [6, 23], [4, 3], [13, 38], [24, 17], [18, 0], [5, 41], [34, 55], [57, 53], [44, 22], [43, 23], [45, 2], [54, 50], [22, 6], [16, 17], [10, 44], [40, 27], [38, 49], [37, 4], [43, 56], [42, 57], [26, 51], [8, 29], [47, 27], [4, 12], [0, 46], [30, 40], [4, 55], [49, 28], [18, 26], [21, 39], [14, 3], [18, 3], [49, 10], [19, 33], [25, 48], [30, 3], [37, 58], [43, 20], [3, 28], [41, 20], [6, 57], [20, 46], [7, 47]]):\n    \"\"\"Find a clique of the given size in the given undirected graph. It is guaranteed that such a clique exists.\"\"\"\n    assert len(nodes) == len(set(nodes)) >= size\n    edge_set = {(a, b) for (a, b) in edges}\n    for a in nodes:\n        for b in nodes:\n            assert a == b or (a, b) in edge_set or (b, a) in edge_set\n\n    return True",
    "sols": [],
    "module": "graphs",
    "notes": "Find a [planted clique](https://en.wikipedia.org/w/index.php?title=Planted_clique) of a given size\nin an undirected graph. Finding a polynomial-time algorithm for this problem has been *unsolved* for\nsome time.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "PlantedClique_8",
    "sat": "def sat(nodes: List[int], size=1, edges=[[3, 2], [1, 3], [4, 2], [3, 3], [4, 3], [3, 1], [3, 4], [2, 3], [2, 1], [2, 0]]):\n    \"\"\"Find a clique of the given size in the given undirected graph. It is guaranteed that such a clique exists.\"\"\"\n    assert len(nodes) == len(set(nodes)) >= size\n    edge_set = {(a, b) for (a, b) in edges}\n    for a in nodes:\n        for b in nodes:\n            assert a == b or (a, b) in edge_set or (b, a) in edge_set\n\n    return True",
    "sols": [
      "def sol(size=1, edges=[[3, 2], [1, 3], [4, 2], [3, 3], [4, 3], [3, 1], [3, 4], [2, 3], [2, 1], [2, 0]]):  # brute force (finds list in increasing order), but with a tiny bit of speedup\n    if size == 0:\n        return []\n    from collections import defaultdict\n    neighbors = defaultdict(set)\n    n = max(max(e) for e in edges)\n    for (a, b) in edges:\n        if a != b:\n            neighbors[a].add(b)\n            neighbors[b].add(a)\n    pools = [list(range(n + 1))]\n    indices = [-1]\n    while pools:\n        indices[-1] += 1\n        if indices[-1] >= len(pools[-1]) - size + len(pools):  # since list is increasing order\n            indices.pop()\n            pools.pop()\n            continue\n        if len(pools) == size:\n            return [pool[i] for pool, i in zip(pools, indices)]\n        a = (pools[-1])[indices[-1]]\n        pools.append([i for i in pools[-1] if i > a and i in neighbors[a]])\n        indices.append(-1)\n    assert False, f\"No clique of size {size}\""
    ],
    "module": "graphs",
    "notes": "Find a [planted clique](https://en.wikipedia.org/w/index.php?title=Planted_clique) of a given size\nin an undirected graph. Finding a polynomial-time algorithm for this problem has been *unsolved* for\nsome time.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "PlantedClique_9",
    "sat": "def sat(nodes: List[int], size=4, edges=[[10, 14], [3, 0], [7, 9], [10, 4], [0, 15], [0, 6], [7, 1], [6, 9], [3, 10], [11, 15], [14, 5], [2, 0], [5, 5], [1, 8], [4, 6], [7, 10], [10, 3], [5, 6], [11, 6], [8, 4], [0, 14], [13, 5], [15, 6], [2, 12], [15, 7], [15, 3], [12, 4], [4, 8], [11, 11], [3, 1], [7, 6], [4, 14], [7, 0], [8, 0], [5, 12], [9, 8], [5, 4], [5, 8], [1, 15], [6, 10], [8, 12], [3, 11], [3, 6], [12, 8], [2, 3], [1, 9], [13, 8], [0, 0], [2, 13], [12, 3], [3, 2], [3, 7], [0, 7], [1, 14], [15, 11], [11, 4], [9, 7], [1, 2], [5, 13], [10, 10], [9, 5], [12, 13], [7, 12], [6, 0], [3, 14], [7, 13], [5, 14], [7, 14], [12, 5], [4, 10], [2, 6]]):\n    \"\"\"Find a clique of the given size in the given undirected graph. It is guaranteed that such a clique exists.\"\"\"\n    assert len(nodes) == len(set(nodes)) >= size\n    edge_set = {(a, b) for (a, b) in edges}\n    for a in nodes:\n        for b in nodes:\n            assert a == b or (a, b) in edge_set or (b, a) in edge_set\n\n    return True",
    "sols": [
      "def sol(size=4, edges=[[10, 14], [3, 0], [7, 9], [10, 4], [0, 15], [0, 6], [7, 1], [6, 9], [3, 10], [11, 15], [14, 5], [2, 0], [5, 5], [1, 8], [4, 6], [7, 10], [10, 3], [5, 6], [11, 6], [8, 4], [0, 14], [13, 5], [15, 6], [2, 12], [15, 7], [15, 3], [12, 4], [4, 8], [11, 11], [3, 1], [7, 6], [4, 14], [7, 0], [8, 0], [5, 12], [9, 8], [5, 4], [5, 8], [1, 15], [6, 10], [8, 12], [3, 11], [3, 6], [12, 8], [2, 3], [1, 9], [13, 8], [0, 0], [2, 13], [12, 3], [3, 2], [3, 7], [0, 7], [1, 14], [15, 11], [11, 4], [9, 7], [1, 2], [5, 13], [10, 10], [9, 5], [12, 13], [7, 12], [6, 0], [3, 14], [7, 13], [5, 14], [7, 14], [12, 5], [4, 10], [2, 6]]):  # brute force (finds list in increasing order), but with a tiny bit of speedup\n    if size == 0:\n        return []\n    from collections import defaultdict\n    neighbors = defaultdict(set)\n    n = max(max(e) for e in edges)\n    for (a, b) in edges:\n        if a != b:\n            neighbors[a].add(b)\n            neighbors[b].add(a)\n    pools = [list(range(n + 1))]\n    indices = [-1]\n    while pools:\n        indices[-1] += 1\n        if indices[-1] >= len(pools[-1]) - size + len(pools):  # since list is increasing order\n            indices.pop()\n            pools.pop()\n            continue\n        if len(pools) == size:\n            return [pool[i] for pool, i in zip(pools, indices)]\n        a = (pools[-1])[indices[-1]]\n        pools.append([i for i in pools[-1] if i > a and i in neighbors[a]])\n        indices.append(-1)\n    assert False, f\"No clique of size {size}\""
    ],
    "module": "graphs",
    "notes": "Find a [planted clique](https://en.wikipedia.org/w/index.php?title=Planted_clique) of a given size\nin an undirected graph. Finding a polynomial-time algorithm for this problem has been *unsolved* for\nsome time.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "ShortestPath_0",
    "sat": "def sat(path: List[int], weights=[{1: 20, 2: 1}, {2: 2, 3: 5}, {1: 10}], bound=11):\n    \"\"\"\n    Find a path from node 0 to node 1, of length at most bound, in the given digraph.\n    weights[a][b] is weight on edge [a,b] for (int) nodes a, b\n    \"\"\"\n    return path[0] == 0 and path[-1] == 1 and sum(weights[a][b] for a, b in zip(path, path[1:])) <= bound",
    "sols": [
      "def sol(weights=[{1: 20, 2: 1}, {2: 2, 3: 5}, {1: 10}], bound=11):  # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs",
    "notes": "Shortest Path, see (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "ShortestPath_1",
    "sat": "def sat(path: List[int], weights=[{3: 210, 0: 513, 1: 66, 5: 612}, {0: 794, 1: 111, 3: 598}, {4: 295, 0: 601}, {}, {3: 452, 0: 689, 5: 124, 1: 406}, {2: 289, 5: 660, 3: 498}], bound=66):\n    \"\"\"\n    Find a path from node 0 to node 1, of length at most bound, in the given digraph.\n    weights[a][b] is weight on edge [a,b] for (int) nodes a, b\n    \"\"\"\n    return path[0] == 0 and path[-1] == 1 and sum(weights[a][b] for a, b in zip(path, path[1:])) <= bound",
    "sols": [
      "def sol(weights=[{3: 210, 0: 513, 1: 66, 5: 612}, {0: 794, 1: 111, 3: 598}, {4: 295, 0: 601}, {}, {3: 452, 0: 689, 5: 124, 1: 406}, {2: 289, 5: 660, 3: 498}], bound=66):  # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs",
    "notes": "Shortest Path, see (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "ShortestPath_2",
    "sat": "def sat(path: List[int], weights=[{25: 594, 24: 349}, {}, {29: 745}, {}, {7: 245}, {9: 384}, {1: 490, 21: 253, 22: 904, 13: 526}, {4: 452, 27: 179, 28: 673}, {22: 30, 29: 307, 8: 104}, {12: 399, 0: 792}, {}, {}, {20: 349, 6: 53}, {}, {}, {}, {14: 223}, {23: 705}, {13: 903, 21: 159}, {}, {27: 144, 28: 181}, {26: 922, 20: 241}, {}, {24: 966, 29: 78}, {26: 107}, {1: 121}, {18: 898, 0: 280, 12: 425}, {}, {18: 750, 25: 440, 28: 152, 29: 109, 6: 330}, {23: 298}], bound=715):\n    \"\"\"\n    Find a path from node 0 to node 1, of length at most bound, in the given digraph.\n    weights[a][b] is weight on edge [a,b] for (int) nodes a, b\n    \"\"\"\n    return path[0] == 0 and path[-1] == 1 and sum(weights[a][b] for a, b in zip(path, path[1:])) <= bound",
    "sols": [
      "def sol(weights=[{25: 594, 24: 349}, {}, {29: 745}, {}, {7: 245}, {9: 384}, {1: 490, 21: 253, 22: 904, 13: 526}, {4: 452, 27: 179, 28: 673}, {22: 30, 29: 307, 8: 104}, {12: 399, 0: 792}, {}, {}, {20: 349, 6: 53}, {}, {}, {}, {14: 223}, {23: 705}, {13: 903, 21: 159}, {}, {27: 144, 28: 181}, {26: 922, 20: 241}, {}, {24: 966, 29: 78}, {26: 107}, {1: 121}, {18: 898, 0: 280, 12: 425}, {}, {18: 750, 25: 440, 28: 152, 29: 109, 6: 330}, {23: 298}], bound=715):  # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs",
    "notes": "Shortest Path, see (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "ShortestPath_3",
    "sat": "def sat(path: List[int], weights=[{1: 239}, {0: 602, 2: 280}, {2: 293, 0: 816, 3: 925}, {}], bound=239):\n    \"\"\"\n    Find a path from node 0 to node 1, of length at most bound, in the given digraph.\n    weights[a][b] is weight on edge [a,b] for (int) nodes a, b\n    \"\"\"\n    return path[0] == 0 and path[-1] == 1 and sum(weights[a][b] for a, b in zip(path, path[1:])) <= bound",
    "sols": [
      "def sol(weights=[{1: 239}, {0: 602, 2: 280}, {2: 293, 0: 816, 3: 925}, {}], bound=239):  # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs",
    "notes": "Shortest Path, see (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "ShortestPath_4",
    "sat": "def sat(path: List[int], weights=[{1: 996, 2: 237, 4: 264}, {4: 329, 5: 12, 2: 542, 0: 419}, {2: 170, 6: 339, 5: 211}, {1: 714, 5: 885, 3: 640}, {5: 652, 4: 3, 3: 26, 6: 74}, {0: 647, 5: 346}, {2: 297, 6: 358, 3: 636, 0: 722, 4: 942}], bound=996):\n    \"\"\"\n    Find a path from node 0 to node 1, of length at most bound, in the given digraph.\n    weights[a][b] is weight on edge [a,b] for (int) nodes a, b\n    \"\"\"\n    return path[0] == 0 and path[-1] == 1 and sum(weights[a][b] for a, b in zip(path, path[1:])) <= bound",
    "sols": [
      "def sol(weights=[{1: 996, 2: 237, 4: 264}, {4: 329, 5: 12, 2: 542, 0: 419}, {2: 170, 6: 339, 5: 211}, {1: 714, 5: 885, 3: 640}, {5: 652, 4: 3, 3: 26, 6: 74}, {0: 647, 5: 346}, {2: 297, 6: 358, 3: 636, 0: 722, 4: 942}], bound=996):  # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs",
    "notes": "Shortest Path, see (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "ShortestPath_5",
    "sat": "def sat(path: List[int], weights=[{0: 634, 1: 558}, {2: 606}, {0: 181, 2: 776, 1: 103}], bound=558):\n    \"\"\"\n    Find a path from node 0 to node 1, of length at most bound, in the given digraph.\n    weights[a][b] is weight on edge [a,b] for (int) nodes a, b\n    \"\"\"\n    return path[0] == 0 and path[-1] == 1 and sum(weights[a][b] for a, b in zip(path, path[1:])) <= bound",
    "sols": [
      "def sol(weights=[{0: 634, 1: 558}, {2: 606}, {0: 181, 2: 776, 1: 103}], bound=558):  # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs",
    "notes": "Shortest Path, see (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "ShortestPath_6",
    "sat": "def sat(path: List[int], weights=[{3: 832, 0: 192, 4: 70}, {1: 270, 5: 579, 4: 901, 0: 42}, {3: 139, 1: 891, 2: 912, 5: 370}, {0: 965, 4: 156}, {1: 960, 5: 235}, {3: 174, 5: 920}], bound=1030):\n    \"\"\"\n    Find a path from node 0 to node 1, of length at most bound, in the given digraph.\n    weights[a][b] is weight on edge [a,b] for (int) nodes a, b\n    \"\"\"\n    return path[0] == 0 and path[-1] == 1 and sum(weights[a][b] for a, b in zip(path, path[1:])) <= bound",
    "sols": [
      "def sol(weights=[{3: 832, 0: 192, 4: 70}, {1: 270, 5: 579, 4: 901, 0: 42}, {3: 139, 1: 891, 2: 912, 5: 370}, {0: 965, 4: 156}, {1: 960, 5: 235}, {3: 174, 5: 920}], bound=1030):  # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs",
    "notes": "Shortest Path, see (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "ShortestPath_7",
    "sat": "def sat(path: List[int], weights=[{1: 577, 0: 315}, {0: 976}], bound=577):\n    \"\"\"\n    Find a path from node 0 to node 1, of length at most bound, in the given digraph.\n    weights[a][b] is weight on edge [a,b] for (int) nodes a, b\n    \"\"\"\n    return path[0] == 0 and path[-1] == 1 and sum(weights[a][b] for a, b in zip(path, path[1:])) <= bound",
    "sols": [
      "def sol(weights=[{1: 577, 0: 315}, {0: 976}], bound=577):  # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs",
    "notes": "Shortest Path, see (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "ShortestPath_8",
    "sat": "def sat(path: List[int], weights=[{3: 422, 0: 36, 2: 186}, {3: 821, 2: 896, 1: 942, 0: 824}, {3: 214}, {1: 951}], bound=1351):\n    \"\"\"\n    Find a path from node 0 to node 1, of length at most bound, in the given digraph.\n    weights[a][b] is weight on edge [a,b] for (int) nodes a, b\n    \"\"\"\n    return path[0] == 0 and path[-1] == 1 and sum(weights[a][b] for a, b in zip(path, path[1:])) <= bound",
    "sols": [
      "def sol(weights=[{3: 422, 0: 36, 2: 186}, {3: 821, 2: 896, 1: 942, 0: 824}, {3: 214}, {1: 951}], bound=1351):  # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs",
    "notes": "Shortest Path, see (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "ShortestPath_9",
    "sat": "def sat(path: List[int], weights=[{34: 621, 43: 275, 54: 343, 22: 186, 41: 960, 21: 989}, {51: 539}, {43: 426}, {21: 997, 5: 385, 48: 51, 50: 423, 38: 840}, {2: 612, 1: 720, 11: 934, 52: 223}, {15: 757}, {8: 736, 18: 512, 46: 133}, {6: 5, 51: 842, 56: 409}, {59: 151, 17: 797}, {38: 475, 6: 999, 4: 840}, {49: 412, 33: 833, 44: 644}, {55: 207, 36: 435, 49: 950, 29: 281}, {39: 999, 31: 374, 53: 259, 41: 617}, {39: 121, 14: 234, 45: 602}, {52: 151, 3: 577, 27: 384}, {52: 226}, {54: 745, 6: 236, 3: 214}, {23: 473}, {37: 823, 35: 160, 9: 2}, {32: 224}, {50: 677, 6: 545, 10: 232, 23: 66, 12: 927}, {57: 49, 3: 415}, {9: 567, 5: 489, 21: 946}, {45: 370, 28: 351, 49: 101}, {41: 223, 55: 244, 22: 266, 19: 907, 45: 460}, {37: 553}, {24: 210, 5: 429, 22: 38, 30: 13}, {}, {6: 783, 43: 761, 16: 730, 28: 573, 5: 83, 19: 399}, {58: 871}, {11: 307, 22: 519, 29: 991, 52: 676, 21: 129, 42: 154, 40: 544, 38: 755}, {25: 847, 32: 390}, {26: 580, 52: 846, 22: 483, 46: 682, 44: 965, 51: 749}, {4: 81, 11: 58, 17: 393, 13: 851, 38: 314}, {14: 614, 29: 328}, {2: 682, 32: 536, 49: 736, 5: 470}, {3: 378, 34: 99, 30: 285}, {0: 767}, {36: 827, 50: 591, 7: 348, 25: 366, 4: 614}, {}, {5: 707, 38: 673, 17: 859}, {40: 773, 2: 418, 49: 932}, {39: 670, 13: 533, 12: 72, 8: 833}, {40: 573, 4: 255, 27: 743, 48: 520}, {35: 293, 11: 189, 21: 714}, {20: 766, 51: 713, 56: 383, 53: 682, 3: 957}, {47: 755, 46: 681, 0: 260, 48: 949, 37: 234, 15: 83}, {2: 640, 36: 495, 29: 544, 31: 799, 59: 612}, {16: 455, 27: 230, 36: 483, 23: 732, 20: 435, 7: 656, 31: 196}, {10: 264, 31: 493, 0: 329}, {33: 756, 18: 577, 3: 112, 28: 961, 0: 150}, {7: 732, 37: 294}, {58: 162, 55: 968, 15: 695, 11: 280}, {36: 408}, {26: 27, 36: 639, 6: 725, 24: 228}, {48: 673, 40: 113, 22: 114, 58: 835}, {49: 519, 25: 556, 35: 910, 56: 541, 53: 623}, {50: 2, 31: 375}, {56: 279, 55: 438, 15: 732, 20: 346, 23: 487}, {42: 250, 9: 585, 43: 843, 28: 684}], bound=1250):\n    \"\"\"\n    Find a path from node 0 to node 1, of length at most bound, in the given digraph.\n    weights[a][b] is weight on edge [a,b] for (int) nodes a, b\n    \"\"\"\n    return path[0] == 0 and path[-1] == 1 and sum(weights[a][b] for a, b in zip(path, path[1:])) <= bound",
    "sols": [
      "def sol(weights=[{34: 621, 43: 275, 54: 343, 22: 186, 41: 960, 21: 989}, {51: 539}, {43: 426}, {21: 997, 5: 385, 48: 51, 50: 423, 38: 840}, {2: 612, 1: 720, 11: 934, 52: 223}, {15: 757}, {8: 736, 18: 512, 46: 133}, {6: 5, 51: 842, 56: 409}, {59: 151, 17: 797}, {38: 475, 6: 999, 4: 840}, {49: 412, 33: 833, 44: 644}, {55: 207, 36: 435, 49: 950, 29: 281}, {39: 999, 31: 374, 53: 259, 41: 617}, {39: 121, 14: 234, 45: 602}, {52: 151, 3: 577, 27: 384}, {52: 226}, {54: 745, 6: 236, 3: 214}, {23: 473}, {37: 823, 35: 160, 9: 2}, {32: 224}, {50: 677, 6: 545, 10: 232, 23: 66, 12: 927}, {57: 49, 3: 415}, {9: 567, 5: 489, 21: 946}, {45: 370, 28: 351, 49: 101}, {41: 223, 55: 244, 22: 266, 19: 907, 45: 460}, {37: 553}, {24: 210, 5: 429, 22: 38, 30: 13}, {}, {6: 783, 43: 761, 16: 730, 28: 573, 5: 83, 19: 399}, {58: 871}, {11: 307, 22: 519, 29: 991, 52: 676, 21: 129, 42: 154, 40: 544, 38: 755}, {25: 847, 32: 390}, {26: 580, 52: 846, 22: 483, 46: 682, 44: 965, 51: 749}, {4: 81, 11: 58, 17: 393, 13: 851, 38: 314}, {14: 614, 29: 328}, {2: 682, 32: 536, 49: 736, 5: 470}, {3: 378, 34: 99, 30: 285}, {0: 767}, {36: 827, 50: 591, 7: 348, 25: 366, 4: 614}, {}, {5: 707, 38: 673, 17: 859}, {40: 773, 2: 418, 49: 932}, {39: 670, 13: 533, 12: 72, 8: 833}, {40: 573, 4: 255, 27: 743, 48: 520}, {35: 293, 11: 189, 21: 714}, {20: 766, 51: 713, 56: 383, 53: 682, 3: 957}, {47: 755, 46: 681, 0: 260, 48: 949, 37: 234, 15: 83}, {2: 640, 36: 495, 29: 544, 31: 799, 59: 612}, {16: 455, 27: 230, 36: 483, 23: 732, 20: 435, 7: 656, 31: 196}, {10: 264, 31: 493, 0: 329}, {33: 756, 18: 577, 3: 112, 28: 961, 0: 150}, {7: 732, 37: 294}, {58: 162, 55: 968, 15: 695, 11: 280}, {36: 408}, {26: 27, 36: 639, 6: 725, 24: 228}, {48: 673, 40: 113, 22: 114, 58: 835}, {49: 519, 25: 556, 35: 910, 56: 541, 53: 623}, {50: 2, 31: 375}, {56: 279, 55: 438, 15: 732, 20: 346, 23: 487}, {42: 250, 9: 585, 43: 843, 28: 684}], bound=1250):  # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs",
    "notes": "Shortest Path, see (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "UnweightedShortestPath_0",
    "sat": "def sat(path: List[int], edges=[[0, 11], [0, 7], [7, 5], [0, 22], [11, 22], [11, 33], [22, 33]], u=0, v=33, bound=3):\n    \"\"\"Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == u and path[-1] == v and all([i, j] in edges for i, j in zip(path, path[1:]))\n    return len(path) <= bound",
    "sols": [
      "def sol(edges=[[0, 11], [0, 7], [7, 5], [0, 22], [11, 22], [11, 33], [22, 33]], u=0, v=33, bound=3):  # Dijkstra's algorithm\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs",
    "notes": "Unweighted Shortest Path\n\nSee (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "UnweightedShortestPath_1",
    "sat": "def sat(path: List[int], edges=[[12, 4], [33, 15], [37, 12], [11, 1], [34, 19], [42, 36], [2, 38], [6, 25], [29, 25], [30, 6], [16, 31], [10, 41], [15, 2], [3, 19], [1, 26], [17, 17], [19, 4], [0, 6], [42, 5], [11, 13], [22, 15], [39, 11], [35, 34], [39, 20], [7, 31], [38, 27], [9, 30], [31, 25], [0, 9], [13, 34], [31, 34], [19, 42], [37, 32], [4, 13], [11, 43], [14, 0], [22, 41], [20, 17], [0, 15], [13, 4], [20, 6], [34, 42], [42, 10], [32, 19], [41, 8], [26, 42], [0, 13], [28, 42], [9, 0], [32, 26], [6, 4], [27, 19], [37, 9], [7, 6], [25, 14], [23, 14], [31, 39], [18, 27], [34, 36], [24, 16], [24, 31], [16, 17], [2, 4], [34, 40], [28, 6], [41, 9], [17, 18], [43, 11], [11, 39], [43, 29], [1, 19], [27, 27], [4, 42], [0, 16], [16, 14], [40, 22], [22, 22], [38, 16], [3, 34], [33, 23], [2, 18], [3, 11], [4, 5], [18, 3], [23, 11], [41, 22], [7, 26], [31, 42], [35, 33], [15, 28], [34, 10], [36, 3], [9, 38], [17, 5], [3, 9], [37, 21], [36, 1], [25, 6], [22, 12], [42, 3], [16, 32], [0, 11], [24, 33], [15, 31], [18, 34], [11, 8], [30, 41], [19, 19], [4, 11], [22, 16], [1, 13], [6, 22], [12, 30], [19, 15], [3, 21], [38, 29], [32, 39], [1, 17], [16, 20], [10, 39], [32, 27], [37, 6], [18, 18], [22, 32], [31, 32], [24, 32], [22, 25], [38, 18], [38, 21], [39, 12], [9, 17], [10, 42], [29, 36], [34, 23], [27, 29], [17, 24], [24, 28], [31, 23], [28, 7], [5, 2], [24, 26], [27, 13], [43, 19], [37, 36], [2, 13], [10, 11], [30, 11], [29, 32], [4, 24], [17, 27], [21, 2], [24, 43], [26, 37], [16, 6], [43, 35], [42, 27], [26, 12], [39, 3], [38, 25], [20, 5], [36, 8], [25, 42], [27, 40], [39, 23], [6, 12], [27, 32], [12, 34], [2, 5], [40, 35], [15, 12], [22, 29], [21, 11], [0, 22], [13, 23], [27, 4], [35, 24], [32, 29], [4, 14], [9, 7], [32, 11], [11, 26], [26, 41], [2, 16], [38, 23], [30, 29], [6, 31], [1, 34], [4, 39], [24, 3], [25, 22], [9, 14], [33, 26], [34, 38], [35, 29], [32, 38], [5, 42], [42, 24], [15, 38], [41, 14], [39, 9], [4, 36], [21, 24], [36, 9]], u=14, v=1, bound=4):\n    \"\"\"Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == u and path[-1] == v and all([i, j] in edges for i, j in zip(path, path[1:]))\n    return len(path) <= bound",
    "sols": [
      "def sol(edges=[[12, 4], [33, 15], [37, 12], [11, 1], [34, 19], [42, 36], [2, 38], [6, 25], [29, 25], [30, 6], [16, 31], [10, 41], [15, 2], [3, 19], [1, 26], [17, 17], [19, 4], [0, 6], [42, 5], [11, 13], [22, 15], [39, 11], [35, 34], [39, 20], [7, 31], [38, 27], [9, 30], [31, 25], [0, 9], [13, 34], [31, 34], [19, 42], [37, 32], [4, 13], [11, 43], [14, 0], [22, 41], [20, 17], [0, 15], [13, 4], [20, 6], [34, 42], [42, 10], [32, 19], [41, 8], [26, 42], [0, 13], [28, 42], [9, 0], [32, 26], [6, 4], [27, 19], [37, 9], [7, 6], [25, 14], [23, 14], [31, 39], [18, 27], [34, 36], [24, 16], [24, 31], [16, 17], [2, 4], [34, 40], [28, 6], [41, 9], [17, 18], [43, 11], [11, 39], [43, 29], [1, 19], [27, 27], [4, 42], [0, 16], [16, 14], [40, 22], [22, 22], [38, 16], [3, 34], [33, 23], [2, 18], [3, 11], [4, 5], [18, 3], [23, 11], [41, 22], [7, 26], [31, 42], [35, 33], [15, 28], [34, 10], [36, 3], [9, 38], [17, 5], [3, 9], [37, 21], [36, 1], [25, 6], [22, 12], [42, 3], [16, 32], [0, 11], [24, 33], [15, 31], [18, 34], [11, 8], [30, 41], [19, 19], [4, 11], [22, 16], [1, 13], [6, 22], [12, 30], [19, 15], [3, 21], [38, 29], [32, 39], [1, 17], [16, 20], [10, 39], [32, 27], [37, 6], [18, 18], [22, 32], [31, 32], [24, 32], [22, 25], [38, 18], [38, 21], [39, 12], [9, 17], [10, 42], [29, 36], [34, 23], [27, 29], [17, 24], [24, 28], [31, 23], [28, 7], [5, 2], [24, 26], [27, 13], [43, 19], [37, 36], [2, 13], [10, 11], [30, 11], [29, 32], [4, 24], [17, 27], [21, 2], [24, 43], [26, 37], [16, 6], [43, 35], [42, 27], [26, 12], [39, 3], [38, 25], [20, 5], [36, 8], [25, 42], [27, 40], [39, 23], [6, 12], [27, 32], [12, 34], [2, 5], [40, 35], [15, 12], [22, 29], [21, 11], [0, 22], [13, 23], [27, 4], [35, 24], [32, 29], [4, 14], [9, 7], [32, 11], [11, 26], [26, 41], [2, 16], [38, 23], [30, 29], [6, 31], [1, 34], [4, 39], [24, 3], [25, 22], [9, 14], [33, 26], [34, 38], [35, 29], [32, 38], [5, 42], [42, 24], [15, 38], [41, 14], [39, 9], [4, 36], [21, 24], [36, 9]], u=14, v=1, bound=4):  # Dijkstra's algorithm\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs",
    "notes": "Unweighted Shortest Path\n\nSee (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "UnweightedShortestPath_2",
    "sat": "def sat(path: List[int], edges=[[2, 6], [6, 2], [2, 5], [4, 7], [4, 1], [0, 2], [3, 3], [6, 1], [4, 0], [1, 3], [5, 2], [4, 2], [6, 7], [2, 2], [2, 3], [4, 4], [5, 0], [0, 7], [4, 3], [6, 4], [0, 0], [3, 0], [2, 7], [1, 7], [3, 2], [1, 2], [2, 4], [7, 5]], u=1, v=2, bound=2):\n    \"\"\"Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == u and path[-1] == v and all([i, j] in edges for i, j in zip(path, path[1:]))\n    return len(path) <= bound",
    "sols": [
      "def sol(edges=[[2, 6], [6, 2], [2, 5], [4, 7], [4, 1], [0, 2], [3, 3], [6, 1], [4, 0], [1, 3], [5, 2], [4, 2], [6, 7], [2, 2], [2, 3], [4, 4], [5, 0], [0, 7], [4, 3], [6, 4], [0, 0], [3, 0], [2, 7], [1, 7], [3, 2], [1, 2], [2, 4], [7, 5]], u=1, v=2, bound=2):  # Dijkstra's algorithm\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs",
    "notes": "Unweighted Shortest Path\n\nSee (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "UnweightedShortestPath_3",
    "sat": "def sat(path: List[int], edges=[[6, 0], [6, 2], [6, 5], [6, 4], [1, 4], [4, 3], [5, 3], [4, 4], [3, 1], [4, 6], [4, 2], [0, 2], [6, 6], [2, 3], [1, 0], [1, 5], [0, 0], [5, 4], [0, 1], [1, 2], [0, 4], [2, 5], [3, 0]], u=4, v=2, bound=2):\n    \"\"\"Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == u and path[-1] == v and all([i, j] in edges for i, j in zip(path, path[1:]))\n    return len(path) <= bound",
    "sols": [
      "def sol(edges=[[6, 0], [6, 2], [6, 5], [6, 4], [1, 4], [4, 3], [5, 3], [4, 4], [3, 1], [4, 6], [4, 2], [0, 2], [6, 6], [2, 3], [1, 0], [1, 5], [0, 0], [5, 4], [0, 1], [1, 2], [0, 4], [2, 5], [3, 0]], u=4, v=2, bound=2):  # Dijkstra's algorithm\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs",
    "notes": "Unweighted Shortest Path\n\nSee (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "UnweightedShortestPath_4",
    "sat": "def sat(path: List[int], edges=[[1, 1], [2, 0], [1, 0], [2, 2]], u=1, v=1, bound=1):\n    \"\"\"Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == u and path[-1] == v and all([i, j] in edges for i, j in zip(path, path[1:]))\n    return len(path) <= bound",
    "sols": [
      "def sol(edges=[[1, 1], [2, 0], [1, 0], [2, 2]], u=1, v=1, bound=1):  # Dijkstra's algorithm\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs",
    "notes": "Unweighted Shortest Path\n\nSee (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "UnweightedShortestPath_5",
    "sat": "def sat(path: List[int], edges=[[1, 3], [3, 3], [2, 3], [0, 1], [3, 0], [3, 1], [0, 2], [1, 0], [1, 1]], u=1, v=1, bound=1):\n    \"\"\"Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == u and path[-1] == v and all([i, j] in edges for i, j in zip(path, path[1:]))\n    return len(path) <= bound",
    "sols": [
      "def sol(edges=[[1, 3], [3, 3], [2, 3], [0, 1], [3, 0], [3, 1], [0, 2], [1, 0], [1, 1]], u=1, v=1, bound=1):  # Dijkstra's algorithm\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs",
    "notes": "Unweighted Shortest Path\n\nSee (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "UnweightedShortestPath_6",
    "sat": "def sat(path: List[int], edges=[[5, 8], [5, 5], [0, 1], [4, 3], [1, 7], [2, 2], [2, 7], [6, 8], [6, 2], [4, 6], [7, 1], [2, 8], [7, 8], [0, 4], [5, 4], [0, 6], [6, 0], [0, 3], [4, 4], [6, 7], [2, 6], [7, 0], [0, 8], [1, 3], [0, 5], [3, 1], [4, 0], [2, 5], [7, 5], [1, 5], [7, 2], [7, 6]], u=0, v=0, bound=1):\n    \"\"\"Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == u and path[-1] == v and all([i, j] in edges for i, j in zip(path, path[1:]))\n    return len(path) <= bound",
    "sols": [
      "def sol(edges=[[5, 8], [5, 5], [0, 1], [4, 3], [1, 7], [2, 2], [2, 7], [6, 8], [6, 2], [4, 6], [7, 1], [2, 8], [7, 8], [0, 4], [5, 4], [0, 6], [6, 0], [0, 3], [4, 4], [6, 7], [2, 6], [7, 0], [0, 8], [1, 3], [0, 5], [3, 1], [4, 0], [2, 5], [7, 5], [1, 5], [7, 2], [7, 6]], u=0, v=0, bound=1):  # Dijkstra's algorithm\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs",
    "notes": "Unweighted Shortest Path\n\nSee (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "UnweightedShortestPath_7",
    "sat": "def sat(path: List[int], edges=[[1, 0], [6, 1], [0, 8], [3, 6], [7, 7], [0, 6], [9, 5], [7, 3], [7, 4], [1, 8], [7, 6], [4, 2], [5, 9], [4, 5], [9, 9], [0, 4], [2, 5], [9, 3], [1, 3], [1, 5], [5, 4], [4, 1], [0, 0], [8, 5], [9, 6], [9, 1], [2, 3], [8, 4], [0, 3], [5, 0], [5, 3], [6, 9], [6, 6], [5, 2], [6, 8]], u=7, v=8, bound=3):\n    \"\"\"Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == u and path[-1] == v and all([i, j] in edges for i, j in zip(path, path[1:]))\n    return len(path) <= bound",
    "sols": [
      "def sol(edges=[[1, 0], [6, 1], [0, 8], [3, 6], [7, 7], [0, 6], [9, 5], [7, 3], [7, 4], [1, 8], [7, 6], [4, 2], [5, 9], [4, 5], [9, 9], [0, 4], [2, 5], [9, 3], [1, 3], [1, 5], [5, 4], [4, 1], [0, 0], [8, 5], [9, 6], [9, 1], [2, 3], [8, 4], [0, 3], [5, 0], [5, 3], [6, 9], [6, 6], [5, 2], [6, 8]], u=7, v=8, bound=3):  # Dijkstra's algorithm\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs",
    "notes": "Unweighted Shortest Path\n\nSee (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "UnweightedShortestPath_8",
    "sat": "def sat(path: List[int], edges=[[0, 4], [2, 7], [2, 5], [0, 6], [4, 9], [0, 5], [9, 1], [8, 4], [6, 4], [2, 0], [4, 1], [9, 5], [8, 9], [4, 8], [8, 1], [1, 4], [2, 8], [5, 8], [9, 4], [7, 0], [8, 3], [6, 8], [9, 3], [4, 3], [7, 8], [7, 4], [1, 8], [6, 2], [3, 8], [7, 9], [1, 5], [5, 0], [9, 6], [6, 0], [1, 7], [8, 2], [4, 7]], u=3, v=5, bound=4):\n    \"\"\"Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == u and path[-1] == v and all([i, j] in edges for i, j in zip(path, path[1:]))\n    return len(path) <= bound",
    "sols": [
      "def sol(edges=[[0, 4], [2, 7], [2, 5], [0, 6], [4, 9], [0, 5], [9, 1], [8, 4], [6, 4], [2, 0], [4, 1], [9, 5], [8, 9], [4, 8], [8, 1], [1, 4], [2, 8], [5, 8], [9, 4], [7, 0], [8, 3], [6, 8], [9, 3], [4, 3], [7, 8], [7, 4], [1, 8], [6, 2], [3, 8], [7, 9], [1, 5], [5, 0], [9, 6], [6, 0], [1, 7], [8, 2], [4, 7]], u=3, v=5, bound=4):  # Dijkstra's algorithm\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs",
    "notes": "Unweighted Shortest Path\n\nSee (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "UnweightedShortestPath_9",
    "sat": "def sat(path: List[int], edges=[[14, 24], [21, 5], [20, 1], [2, 26], [2, 23], [19, 17], [14, 8], [9, 20], [15, 16], [10, 9], [1, 5], [22, 26], [11, 9], [22, 24], [18, 23], [14, 5], [3, 7], [26, 6], [3, 10], [19, 21], [3, 14], [17, 8], [10, 25], [5, 23], [23, 15], [22, 16], [13, 24], [17, 0], [20, 8], [23, 3], [7, 13], [13, 13], [20, 26], [6, 24], [21, 18], [8, 22], [0, 6], [16, 22], [22, 14], [6, 25], [23, 0], [11, 21], [17, 14], [14, 25], [16, 11], [5, 14], [23, 5], [6, 17], [5, 12], [17, 9], [2, 14], [3, 20], [4, 12], [9, 16], [18, 21], [24, 14], [22, 11], [18, 19], [23, 10], [25, 7], [13, 5], [7, 8], [6, 23], [22, 17], [18, 13], [2, 1], [14, 0], [8, 8], [24, 1], [0, 19], [3, 6], [13, 10], [17, 3], [0, 14], [15, 15], [13, 6], [15, 13], [15, 10], [22, 4], [25, 21], [14, 16], [12, 7], [18, 14], [16, 20], [22, 23], [20, 16], [17, 5], [8, 0], [2, 7], [20, 14], [5, 25], [1, 26], [19, 11], [24, 20], [4, 19], [0, 7], [13, 25], [12, 5], [4, 5], [8, 26], [0, 1], [24, 7], [15, 8], [0, 24], [22, 10], [19, 14], [8, 21], [5, 17], [20, 10], [6, 12], [20, 24], [3, 25], [20, 15], [1, 15], [24, 15], [25, 11], [4, 16], [9, 24], [14, 9]], u=14, v=24, bound=2):\n    \"\"\"Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == u and path[-1] == v and all([i, j] in edges for i, j in zip(path, path[1:]))\n    return len(path) <= bound",
    "sols": [
      "def sol(edges=[[14, 24], [21, 5], [20, 1], [2, 26], [2, 23], [19, 17], [14, 8], [9, 20], [15, 16], [10, 9], [1, 5], [22, 26], [11, 9], [22, 24], [18, 23], [14, 5], [3, 7], [26, 6], [3, 10], [19, 21], [3, 14], [17, 8], [10, 25], [5, 23], [23, 15], [22, 16], [13, 24], [17, 0], [20, 8], [23, 3], [7, 13], [13, 13], [20, 26], [6, 24], [21, 18], [8, 22], [0, 6], [16, 22], [22, 14], [6, 25], [23, 0], [11, 21], [17, 14], [14, 25], [16, 11], [5, 14], [23, 5], [6, 17], [5, 12], [17, 9], [2, 14], [3, 20], [4, 12], [9, 16], [18, 21], [24, 14], [22, 11], [18, 19], [23, 10], [25, 7], [13, 5], [7, 8], [6, 23], [22, 17], [18, 13], [2, 1], [14, 0], [8, 8], [24, 1], [0, 19], [3, 6], [13, 10], [17, 3], [0, 14], [15, 15], [13, 6], [15, 13], [15, 10], [22, 4], [25, 21], [14, 16], [12, 7], [18, 14], [16, 20], [22, 23], [20, 16], [17, 5], [8, 0], [2, 7], [20, 14], [5, 25], [1, 26], [19, 11], [24, 20], [4, 19], [0, 7], [13, 25], [12, 5], [4, 5], [8, 26], [0, 1], [24, 7], [15, 8], [0, 24], [22, 10], [19, 14], [8, 21], [5, 17], [20, 10], [6, 12], [20, 24], [3, 25], [20, 15], [1, 15], [24, 15], [25, 11], [4, 16], [9, 24], [14, 9]], u=14, v=24, bound=2):  # Dijkstra's algorithm\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs",
    "notes": "Unweighted Shortest Path\n\nSee (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyPath_0",
    "sat": "def sat(path: List[int], edges=[[0, 1], [0, 2], [1, 2], [1, 3], [2, 3]]):\n    \"\"\" Find any path from node 0 to node n in a given digraph on vertices 0, 1,..., n.\"\"\"\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max(max(edge) for edge in edges)\n    return True",
    "sols": [
      "def sol(edges=[[0, 1], [0, 2], [1, 2], [1, 3], [2, 3]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)"
    ],
    "module": "graphs",
    "notes": "Any Path",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyPath_1",
    "sat": "def sat(path: List[int], edges=[[16, 8], [13, 33], [29, 37], [25, 10], [3, 33], [43, 10], [19, 9], [26, 16], [0, 9], [18, 36], [40, 32], [24, 10], [25, 35], [15, 14], [18, 2], [17, 5], [15, 26], [28, 28], [4, 39], [26, 9], [35, 22], [42, 11], [44, 13], [6, 34], [33, 0], [36, 34], [41, 34], [31, 1], [41, 27], [20, 43], [30, 33], [15, 18], [8, 20], [31, 14], [21, 33], [40, 28], [35, 39], [19, 14], [35, 10], [3, 34], [14, 11], [34, 36], [29, 3], [20, 33], [27, 14], [5, 29], [15, 6], [21, 20], [36, 1], [30, 40], [44, 6], [24, 43], [24, 30], [3, 16], [8, 34], [15, 36], [33, 36], [19, 17], [35, 17], [20, 29], [0, 27], [36, 38], [1, 0], [43, 18], [5, 36], [22, 10], [5, 32], [11, 34], [4, 15], [4, 9], [4, 6], [24, 12], [8, 27], [42, 38], [25, 2], [2, 12], [1, 34], [36, 22], [24, 42], [4, 18], [30, 13], [16, 44], [4, 21], [22, 35], [33, 32], [24, 26], [21, 44]]):\n    \"\"\" Find any path from node 0 to node n in a given digraph on vertices 0, 1,..., n.\"\"\"\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max(max(edge) for edge in edges)\n    return True",
    "sols": [
      "def sol(edges=[[16, 8], [13, 33], [29, 37], [25, 10], [3, 33], [43, 10], [19, 9], [26, 16], [0, 9], [18, 36], [40, 32], [24, 10], [25, 35], [15, 14], [18, 2], [17, 5], [15, 26], [28, 28], [4, 39], [26, 9], [35, 22], [42, 11], [44, 13], [6, 34], [33, 0], [36, 34], [41, 34], [31, 1], [41, 27], [20, 43], [30, 33], [15, 18], [8, 20], [31, 14], [21, 33], [40, 28], [35, 39], [19, 14], [35, 10], [3, 34], [14, 11], [34, 36], [29, 3], [20, 33], [27, 14], [5, 29], [15, 6], [21, 20], [36, 1], [30, 40], [44, 6], [24, 43], [24, 30], [3, 16], [8, 34], [15, 36], [33, 36], [19, 17], [35, 17], [20, 29], [0, 27], [36, 38], [1, 0], [43, 18], [5, 36], [22, 10], [5, 32], [11, 34], [4, 15], [4, 9], [4, 6], [24, 12], [8, 27], [42, 38], [25, 2], [2, 12], [1, 34], [36, 22], [24, 42], [4, 18], [30, 13], [16, 44], [4, 21], [22, 35], [33, 32], [24, 26], [21, 44]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)"
    ],
    "module": "graphs",
    "notes": "Any Path",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyPath_2",
    "sat": "def sat(path: List[int], edges=[[0, 0]]):\n    \"\"\" Find any path from node 0 to node n in a given digraph on vertices 0, 1,..., n.\"\"\"\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max(max(edge) for edge in edges)\n    return True",
    "sols": [
      "def sol(edges=[[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)"
    ],
    "module": "graphs",
    "notes": "Any Path",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyPath_3",
    "sat": "def sat(path: List[int], edges=[[2, 33], [39, 59], [22, 21], [55, 39], [34, 13], [28, 62], [34, 56], [41, 23], [52, 39], [27, 62], [19, 12], [14, 63], [48, 1], [53, 1], [47, 55], [43, 35], [13, 51], [18, 30], [7, 17], [25, 52], [35, 46], [16, 45], [7, 22], [42, 40], [35, 41], [21, 52], [35, 43], [22, 30], [20, 47], [48, 25], [32, 11], [38, 35], [39, 35], [34, 62], [19, 32], [15, 51], [62, 29], [54, 26], [1, 6], [42, 51], [26, 62], [18, 8], [47, 40], [30, 41], [42, 15], [35, 36], [12, 55], [38, 53], [52, 37], [4, 44], [13, 61], [2, 58], [9, 48], [2, 11], [52, 0], [11, 35], [33, 7], [49, 40], [21, 46], [1, 30], [60, 34], [36, 46], [8, 52], [43, 58], [53, 63], [61, 16], [50, 16], [33, 44], [23, 26], [27, 16], [52, 18], [59, 1], [29, 44], [37, 57], [25, 2], [3, 15], [33, 19], [22, 6], [59, 51], [58, 32], [46, 37], [15, 9], [1, 35], [48, 6], [15, 59], [58, 28], [6, 24], [4, 38], [37, 20], [52, 28], [43, 40], [28, 39], [58, 31], [62, 35], [63, 11], [24, 40], [44, 38], [0, 44], [57, 11], [0, 16], [41, 1], [62, 55], [8, 51], [5, 8], [46, 26], [40, 6], [45, 42], [24, 32], [19, 31], [6, 55], [30, 2], [43, 57], [25, 48], [53, 31], [29, 13], [63, 39], [37, 46], [32, 40], [16, 16], [53, 59], [11, 57], [33, 20], [19, 11], [47, 51], [50, 15], [19, 36]]):\n    \"\"\" Find any path from node 0 to node n in a given digraph on vertices 0, 1,..., n.\"\"\"\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max(max(edge) for edge in edges)\n    return True",
    "sols": [
      "def sol(edges=[[2, 33], [39, 59], [22, 21], [55, 39], [34, 13], [28, 62], [34, 56], [41, 23], [52, 39], [27, 62], [19, 12], [14, 63], [48, 1], [53, 1], [47, 55], [43, 35], [13, 51], [18, 30], [7, 17], [25, 52], [35, 46], [16, 45], [7, 22], [42, 40], [35, 41], [21, 52], [35, 43], [22, 30], [20, 47], [48, 25], [32, 11], [38, 35], [39, 35], [34, 62], [19, 32], [15, 51], [62, 29], [54, 26], [1, 6], [42, 51], [26, 62], [18, 8], [47, 40], [30, 41], [42, 15], [35, 36], [12, 55], [38, 53], [52, 37], [4, 44], [13, 61], [2, 58], [9, 48], [2, 11], [52, 0], [11, 35], [33, 7], [49, 40], [21, 46], [1, 30], [60, 34], [36, 46], [8, 52], [43, 58], [53, 63], [61, 16], [50, 16], [33, 44], [23, 26], [27, 16], [52, 18], [59, 1], [29, 44], [37, 57], [25, 2], [3, 15], [33, 19], [22, 6], [59, 51], [58, 32], [46, 37], [15, 9], [1, 35], [48, 6], [15, 59], [58, 28], [6, 24], [4, 38], [37, 20], [52, 28], [43, 40], [28, 39], [58, 31], [62, 35], [63, 11], [24, 40], [44, 38], [0, 44], [57, 11], [0, 16], [41, 1], [62, 55], [8, 51], [5, 8], [46, 26], [40, 6], [45, 42], [24, 32], [19, 31], [6, 55], [30, 2], [43, 57], [25, 48], [53, 31], [29, 13], [63, 39], [37, 46], [32, 40], [16, 16], [53, 59], [11, 57], [33, 20], [19, 11], [47, 51], [50, 15], [19, 36]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)"
    ],
    "module": "graphs",
    "notes": "Any Path",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyPath_4",
    "sat": "def sat(path: List[int], edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]):\n    \"\"\" Find any path from node 0 to node n in a given digraph on vertices 0, 1,..., n.\"\"\"\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max(max(edge) for edge in edges)\n    return True",
    "sols": [
      "def sol(edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)"
    ],
    "module": "graphs",
    "notes": "Any Path",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyPath_5",
    "sat": "def sat(path: List[int], edges=[[12, 0], [24, 29], [2, 1], [18, 27], [13, 11], [17, 1], [1, 19], [3, 6], [0, 30], [19, 26], [5, 9], [6, 13], [30, 19], [30, 26], [15, 27], [10, 11], [4, 8], [0, 21], [18, 0], [1, 16], [26, 30], [17, 19], [27, 9], [11, 29], [30, 14], [12, 3], [3, 18], [26, 7], [15, 4], [10, 14], [10, 30], [23, 2], [30, 6], [23, 21], [27, 23], [9, 20], [5, 24], [7, 6], [6, 3], [23, 25], [22, 14], [26, 24], [2, 13], [27, 0], [2, 11], [26, 18], [0, 7], [4, 25], [2, 20], [20, 5], [30, 5], [16, 16], [11, 27], [17, 2], [9, 6], [14, 19], [13, 25], [21, 23], [8, 13], [14, 2], [23, 26], [22, 7]]):\n    \"\"\" Find any path from node 0 to node n in a given digraph on vertices 0, 1,..., n.\"\"\"\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max(max(edge) for edge in edges)\n    return True",
    "sols": [
      "def sol(edges=[[12, 0], [24, 29], [2, 1], [18, 27], [13, 11], [17, 1], [1, 19], [3, 6], [0, 30], [19, 26], [5, 9], [6, 13], [30, 19], [30, 26], [15, 27], [10, 11], [4, 8], [0, 21], [18, 0], [1, 16], [26, 30], [17, 19], [27, 9], [11, 29], [30, 14], [12, 3], [3, 18], [26, 7], [15, 4], [10, 14], [10, 30], [23, 2], [30, 6], [23, 21], [27, 23], [9, 20], [5, 24], [7, 6], [6, 3], [23, 25], [22, 14], [26, 24], [2, 13], [27, 0], [2, 11], [26, 18], [0, 7], [4, 25], [2, 20], [20, 5], [30, 5], [16, 16], [11, 27], [17, 2], [9, 6], [14, 19], [13, 25], [21, 23], [8, 13], [14, 2], [23, 26], [22, 7]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)"
    ],
    "module": "graphs",
    "notes": "Any Path",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyPath_6",
    "sat": "def sat(path: List[int], edges=[[21, 25], [21, 10], [33, 72], [72, 29], [72, 60], [18, 24], [73, 5], [26, 75], [53, 57], [4, 4], [19, 52], [47, 76], [55, 77], [29, 40], [19, 69], [41, 17], [60, 67], [6, 22], [1, 58], [65, 30], [33, 63], [14, 59], [4, 12], [37, 18], [54, 25], [8, 38], [68, 31], [16, 13], [37, 0], [1, 11], [10, 23], [1, 78], [16, 17], [58, 60], [20, 37], [27, 62], [23, 15], [15, 44], [77, 78], [18, 42], [6, 34], [36, 45], [23, 2], [43, 51], [46, 27], [49, 55], [24, 79], [19, 30], [59, 14], [32, 26], [63, 26], [75, 0], [70, 12], [28, 51], [7, 14], [6, 5], [74, 50], [73, 63], [39, 42], [75, 64], [23, 46], [9, 52], [3, 64], [30, 48], [42, 32], [11, 2], [58, 41], [16, 78], [31, 9], [64, 3], [6, 30], [35, 11], [65, 45], [3, 52], [56, 72], [54, 62], [37, 37], [54, 17], [0, 62], [69, 55], [20, 48], [10, 55], [9, 14], [67, 35], [44, 25], [25, 57], [9, 62], [24, 58], [36, 71], [54, 47], [34, 7], [34, 12], [25, 31], [46, 11], [15, 68], [7, 34], [56, 12], [79, 22], [24, 70], [22, 76], [18, 76], [21, 57], [40, 53], [28, 3], [75, 14], [21, 72], [23, 34], [38, 70], [5, 22], [15, 6], [45, 49], [74, 46], [57, 35], [78, 42], [40, 4], [45, 58], [4, 61], [73, 0], [67, 65], [4, 66], [34, 26], [64, 27], [57, 27], [2, 59], [48, 4], [23, 17], [15, 0], [25, 72], [62, 40], [12, 27], [4, 18], [12, 68], [4, 15], [66, 47], [73, 42], [79, 79], [13, 7], [48, 22], [47, 69], [7, 6], [59, 12], [18, 78], [1, 0], [15, 20], [52, 55], [39, 34], [5, 42], [75, 29], [5, 7], [38, 63], [18, 9], [41, 6], [17, 43], [6, 10], [50, 44], [10, 54], [22, 65], [62, 66], [19, 62]]):\n    \"\"\" Find any path from node 0 to node n in a given digraph on vertices 0, 1,..., n.\"\"\"\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max(max(edge) for edge in edges)\n    return True",
    "sols": [
      "def sol(edges=[[21, 25], [21, 10], [33, 72], [72, 29], [72, 60], [18, 24], [73, 5], [26, 75], [53, 57], [4, 4], [19, 52], [47, 76], [55, 77], [29, 40], [19, 69], [41, 17], [60, 67], [6, 22], [1, 58], [65, 30], [33, 63], [14, 59], [4, 12], [37, 18], [54, 25], [8, 38], [68, 31], [16, 13], [37, 0], [1, 11], [10, 23], [1, 78], [16, 17], [58, 60], [20, 37], [27, 62], [23, 15], [15, 44], [77, 78], [18, 42], [6, 34], [36, 45], [23, 2], [43, 51], [46, 27], [49, 55], [24, 79], [19, 30], [59, 14], [32, 26], [63, 26], [75, 0], [70, 12], [28, 51], [7, 14], [6, 5], [74, 50], [73, 63], [39, 42], [75, 64], [23, 46], [9, 52], [3, 64], [30, 48], [42, 32], [11, 2], [58, 41], [16, 78], [31, 9], [64, 3], [6, 30], [35, 11], [65, 45], [3, 52], [56, 72], [54, 62], [37, 37], [54, 17], [0, 62], [69, 55], [20, 48], [10, 55], [9, 14], [67, 35], [44, 25], [25, 57], [9, 62], [24, 58], [36, 71], [54, 47], [34, 7], [34, 12], [25, 31], [46, 11], [15, 68], [7, 34], [56, 12], [79, 22], [24, 70], [22, 76], [18, 76], [21, 57], [40, 53], [28, 3], [75, 14], [21, 72], [23, 34], [38, 70], [5, 22], [15, 6], [45, 49], [74, 46], [57, 35], [78, 42], [40, 4], [45, 58], [4, 61], [73, 0], [67, 65], [4, 66], [34, 26], [64, 27], [57, 27], [2, 59], [48, 4], [23, 17], [15, 0], [25, 72], [62, 40], [12, 27], [4, 18], [12, 68], [4, 15], [66, 47], [73, 42], [79, 79], [13, 7], [48, 22], [47, 69], [7, 6], [59, 12], [18, 78], [1, 0], [15, 20], [52, 55], [39, 34], [5, 42], [75, 29], [5, 7], [38, 63], [18, 9], [41, 6], [17, 43], [6, 10], [50, 44], [10, 54], [22, 65], [62, 66], [19, 62]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)"
    ],
    "module": "graphs",
    "notes": "Any Path",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyPath_7",
    "sat": "def sat(path: List[int], edges=[[0, 8], [6, 8], [5, 0], [6, 6], [3, 2], [3, 7], [2, 1], [3, 4], [3, 0], [6, 0], [5, 1], [2, 7], [1, 7], [4, 8], [4, 0], [6, 2]]):\n    \"\"\" Find any path from node 0 to node n in a given digraph on vertices 0, 1,..., n.\"\"\"\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max(max(edge) for edge in edges)\n    return True",
    "sols": [
      "def sol(edges=[[0, 8], [6, 8], [5, 0], [6, 6], [3, 2], [3, 7], [2, 1], [3, 4], [3, 0], [6, 0], [5, 1], [2, 7], [1, 7], [4, 8], [4, 0], [6, 2]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)"
    ],
    "module": "graphs",
    "notes": "Any Path",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyPath_8",
    "sat": "def sat(path: List[int], edges=[[12, 21], [5, 34], [1, 37], [22, 15], [23, 8], [40, 0], [0, 35], [28, 4], [18, 7], [41, 40], [17, 32], [0, 40], [12, 5], [18, 22], [40, 35], [10, 4], [39, 31], [16, 9], [4, 37], [31, 28], [40, 5], [38, 1], [21, 6], [32, 30], [1, 7], [14, 21], [40, 29], [11, 6], [22, 33], [19, 13], [20, 34], [30, 42], [10, 1], [19, 16], [5, 28], [13, 1], [37, 32], [27, 14], [36, 34], [4, 39], [38, 17], [15, 33], [14, 36], [17, 30], [16, 1], [11, 10], [20, 32], [2, 3], [2, 35], [37, 27], [22, 40], [37, 25], [18, 9], [5, 6], [24, 2], [4, 31], [12, 25], [42, 36], [9, 29], [39, 29], [25, 37], [32, 17], [21, 13], [10, 20], [22, 0], [15, 9], [13, 11], [35, 41], [5, 22], [10, 11], [20, 16], [7, 21], [6, 37], [33, 36], [36, 38], [15, 14], [33, 17], [10, 6], [24, 7], [1, 3], [2, 28], [5, 17], [31, 8], [42, 31], [23, 20]]):\n    \"\"\" Find any path from node 0 to node n in a given digraph on vertices 0, 1,..., n.\"\"\"\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max(max(edge) for edge in edges)\n    return True",
    "sols": [
      "def sol(edges=[[12, 21], [5, 34], [1, 37], [22, 15], [23, 8], [40, 0], [0, 35], [28, 4], [18, 7], [41, 40], [17, 32], [0, 40], [12, 5], [18, 22], [40, 35], [10, 4], [39, 31], [16, 9], [4, 37], [31, 28], [40, 5], [38, 1], [21, 6], [32, 30], [1, 7], [14, 21], [40, 29], [11, 6], [22, 33], [19, 13], [20, 34], [30, 42], [10, 1], [19, 16], [5, 28], [13, 1], [37, 32], [27, 14], [36, 34], [4, 39], [38, 17], [15, 33], [14, 36], [17, 30], [16, 1], [11, 10], [20, 32], [2, 3], [2, 35], [37, 27], [22, 40], [37, 25], [18, 9], [5, 6], [24, 2], [4, 31], [12, 25], [42, 36], [9, 29], [39, 29], [25, 37], [32, 17], [21, 13], [10, 20], [22, 0], [15, 9], [13, 11], [35, 41], [5, 22], [10, 11], [20, 16], [7, 21], [6, 37], [33, 36], [36, 38], [15, 14], [33, 17], [10, 6], [24, 7], [1, 3], [2, 28], [5, 17], [31, 8], [42, 31], [23, 20]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)"
    ],
    "module": "graphs",
    "notes": "Any Path",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "AnyPath_9",
    "sat": "def sat(path: List[int], edges=[[48, 60], [32, 30], [52, 52], [27, 53], [6, 34], [26, 19], [60, 25], [67, 11], [37, 34], [75, 25], [18, 5], [60, 33], [48, 42], [38, 23], [31, 68], [72, 39], [75, 22], [16, 48], [25, 19], [35, 58], [9, 46], [38, 14], [69, 5], [21, 26], [1, 70], [7, 30], [18, 62], [42, 37], [41, 0], [25, 8], [35, 47], [35, 34], [6, 18], [60, 71], [20, 50], [2, 31], [51, 26], [26, 22], [73, 68], [11, 65], [27, 3], [63, 36], [56, 11], [28, 73], [15, 46], [5, 14], [49, 39], [67, 36], [16, 33], [35, 49], [69, 56], [31, 21], [41, 70], [43, 21], [51, 12], [39, 62], [22, 73], [54, 50], [9, 64], [64, 23], [45, 66], [33, 2], [65, 47], [21, 46], [59, 42], [64, 54], [13, 71], [1, 14], [74, 5], [72, 8], [32, 48], [54, 38], [7, 72], [71, 59], [30, 43], [30, 66], [0, 61], [11, 12], [4, 31], [58, 67], [6, 30], [71, 45], [36, 74], [36, 3], [68, 47], [14, 73], [20, 36], [25, 69], [69, 42], [27, 74], [33, 43], [41, 24], [4, 24], [57, 41], [63, 65], [66, 7], [27, 37], [19, 35], [75, 20], [31, 32], [1, 37], [57, 66], [19, 2], [58, 47], [23, 51], [50, 28], [19, 75], [4, 13], [1, 38], [5, 2], [73, 47], [16, 1], [46, 10], [44, 28], [10, 55], [9, 74], [74, 55], [27, 10], [22, 0], [38, 75], [7, 29], [34, 70], [57, 28], [34, 61], [3, 63], [71, 63], [29, 43], [57, 17], [6, 11], [27, 42], [14, 46], [40, 16], [48, 14], [23, 55], [69, 45], [39, 46], [70, 68], [3, 50], [19, 67], [6, 73], [12, 46], [45, 68], [68, 8], [28, 69], [44, 41], [43, 29], [61, 20], [66, 8], [12, 41], [64, 72], [19, 16], [14, 70]]):\n    \"\"\" Find any path from node 0 to node n in a given digraph on vertices 0, 1,..., n.\"\"\"\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max(max(edge) for edge in edges)\n    return True",
    "sols": [
      "def sol(edges=[[48, 60], [32, 30], [52, 52], [27, 53], [6, 34], [26, 19], [60, 25], [67, 11], [37, 34], [75, 25], [18, 5], [60, 33], [48, 42], [38, 23], [31, 68], [72, 39], [75, 22], [16, 48], [25, 19], [35, 58], [9, 46], [38, 14], [69, 5], [21, 26], [1, 70], [7, 30], [18, 62], [42, 37], [41, 0], [25, 8], [35, 47], [35, 34], [6, 18], [60, 71], [20, 50], [2, 31], [51, 26], [26, 22], [73, 68], [11, 65], [27, 3], [63, 36], [56, 11], [28, 73], [15, 46], [5, 14], [49, 39], [67, 36], [16, 33], [35, 49], [69, 56], [31, 21], [41, 70], [43, 21], [51, 12], [39, 62], [22, 73], [54, 50], [9, 64], [64, 23], [45, 66], [33, 2], [65, 47], [21, 46], [59, 42], [64, 54], [13, 71], [1, 14], [74, 5], [72, 8], [32, 48], [54, 38], [7, 72], [71, 59], [30, 43], [30, 66], [0, 61], [11, 12], [4, 31], [58, 67], [6, 30], [71, 45], [36, 74], [36, 3], [68, 47], [14, 73], [20, 36], [25, 69], [69, 42], [27, 74], [33, 43], [41, 24], [4, 24], [57, 41], [63, 65], [66, 7], [27, 37], [19, 35], [75, 20], [31, 32], [1, 37], [57, 66], [19, 2], [58, 47], [23, 51], [50, 28], [19, 75], [4, 13], [1, 38], [5, 2], [73, 47], [16, 1], [46, 10], [44, 28], [10, 55], [9, 74], [74, 55], [27, 10], [22, 0], [38, 75], [7, 29], [34, 70], [57, 28], [34, 61], [3, 63], [71, 63], [29, 43], [57, 17], [6, 11], [27, 42], [14, 46], [40, 16], [48, 14], [23, 55], [69, 45], [39, 46], [70, 68], [3, 50], [19, 67], [6, 73], [12, 46], [45, 68], [68, 8], [28, 69], [44, 41], [43, 29], [61, 20], [66, 8], [12, 41], [64, 72], [19, 16], [14, 70]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)"
    ],
    "module": "graphs",
    "notes": "Any Path",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "EvenPath_0",
    "sat": "def sat(path: List[int], edges=[[0, 2], [0, 1], [2, 1], [2, 3], [1, 3]]):\n    \"\"\"Find a path with an even number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == 0 and path[-1] == max(max(e) for e in edges)\n    assert all([[a, b] in edges for a, b in zip(path, path[1:])])\n    return len(path) % 2 == 0",
    "sols": [
      "def sol(edges=[[0, 2], [0, 1], [2, 1], [2, 3], [1, 3]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)"
    ],
    "module": "graphs",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "EvenPath_1",
    "sat": "def sat(path: List[int], edges=[[3, 2], [2, 1], [0, 2], [1, 0], [2, 2], [2, 3], [2, 0]]):\n    \"\"\"Find a path with an even number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == 0 and path[-1] == max(max(e) for e in edges)\n    assert all([[a, b] in edges for a, b in zip(path, path[1:])])\n    return len(path) % 2 == 0",
    "sols": [
      "def sol(edges=[[3, 2], [2, 1], [0, 2], [1, 0], [2, 2], [2, 3], [2, 0]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)"
    ],
    "module": "graphs",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "EvenPath_2",
    "sat": "def sat(path: List[int], edges=[[5, 15], [51, 42], [23, 5], [36, 2], [18, 43], [8, 47], [37, 6], [20, 25], [13, 25], [17, 2], [53, 30], [4, 50], [25, 47], [27, 5], [47, 7], [6, 18], [16, 30], [51, 3], [6, 13], [3, 12], [30, 13], [14, 43], [0, 5], [20, 7], [8, 3], [29, 55], [13, 11], [18, 39], [37, 13], [25, 8], [45, 30], [32, 8], [55, 43], [34, 42], [31, 21], [26, 19], [18, 1], [51, 35], [51, 51], [53, 22], [8, 23], [29, 21], [0, 44], [16, 38], [7, 16], [22, 45], [37, 16], [54, 20], [24, 13], [47, 37], [11, 10], [31, 31], [37, 55], [18, 6], [27, 43], [51, 38], [33, 38], [31, 3], [15, 35], [42, 11], [53, 4], [51, 24], [14, 27], [13, 18], [9, 55], [29, 0], [50, 31], [16, 18], [46, 3], [42, 44], [25, 12], [50, 10], [28, 51], [3, 25], [18, 26], [16, 0], [15, 37], [45, 48], [23, 50], [1, 15], [29, 35], [48, 32], [27, 10], [39, 49], [0, 36], [46, 2], [51, 29], [39, 6], [51, 33], [30, 54], [53, 2], [26, 6], [6, 4], [15, 2], [35, 27], [6, 36], [53, 19], [49, 54], [4, 44], [53, 6], [47, 41], [37, 21], [50, 48], [42, 47], [6, 2], [5, 46], [2, 50], [39, 29], [11, 42], [46, 33], [11, 22]]):\n    \"\"\"Find a path with an even number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == 0 and path[-1] == max(max(e) for e in edges)\n    assert all([[a, b] in edges for a, b in zip(path, path[1:])])\n    return len(path) % 2 == 0",
    "sols": [
      "def sol(edges=[[5, 15], [51, 42], [23, 5], [36, 2], [18, 43], [8, 47], [37, 6], [20, 25], [13, 25], [17, 2], [53, 30], [4, 50], [25, 47], [27, 5], [47, 7], [6, 18], [16, 30], [51, 3], [6, 13], [3, 12], [30, 13], [14, 43], [0, 5], [20, 7], [8, 3], [29, 55], [13, 11], [18, 39], [37, 13], [25, 8], [45, 30], [32, 8], [55, 43], [34, 42], [31, 21], [26, 19], [18, 1], [51, 35], [51, 51], [53, 22], [8, 23], [29, 21], [0, 44], [16, 38], [7, 16], [22, 45], [37, 16], [54, 20], [24, 13], [47, 37], [11, 10], [31, 31], [37, 55], [18, 6], [27, 43], [51, 38], [33, 38], [31, 3], [15, 35], [42, 11], [53, 4], [51, 24], [14, 27], [13, 18], [9, 55], [29, 0], [50, 31], [16, 18], [46, 3], [42, 44], [25, 12], [50, 10], [28, 51], [3, 25], [18, 26], [16, 0], [15, 37], [45, 48], [23, 50], [1, 15], [29, 35], [48, 32], [27, 10], [39, 49], [0, 36], [46, 2], [51, 29], [39, 6], [51, 33], [30, 54], [53, 2], [26, 6], [6, 4], [15, 2], [35, 27], [6, 36], [53, 19], [49, 54], [4, 44], [53, 6], [47, 41], [37, 21], [50, 48], [42, 47], [6, 2], [5, 46], [2, 50], [39, 29], [11, 42], [46, 33], [11, 22]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)"
    ],
    "module": "graphs",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "EvenPath_3",
    "sat": "def sat(path: List[int], edges=[[13, 29], [70, 66], [46, 37], [1, 57], [37, 1], [43, 0], [71, 49], [49, 49], [1, 0], [13, 38], [34, 7], [56, 74], [44, 74], [35, 54], [41, 59], [53, 47], [48, 28], [52, 46], [36, 22], [74, 72], [43, 36], [65, 24], [14, 67], [64, 28], [8, 39], [71, 14], [22, 24], [20, 43], [67, 21], [12, 39], [40, 41], [54, 19], [26, 69], [48, 14], [24, 25], [24, 16], [45, 62], [43, 57], [71, 1], [31, 24], [27, 66], [64, 18], [73, 33], [25, 22], [31, 60], [67, 3], [4, 44], [41, 55], [0, 23], [7, 14], [46, 50], [40, 53], [4, 33], [8, 12], [64, 55], [19, 52], [52, 62], [3, 42], [33, 10], [67, 10], [1, 33], [39, 18], [18, 7], [2, 47], [29, 55], [29, 42], [44, 67], [55, 55], [25, 42], [39, 53], [59, 21], [44, 50], [31, 30], [60, 71], [49, 9], [20, 16], [37, 68], [58, 73], [41, 7], [30, 74], [61, 31], [71, 42], [72, 19], [66, 33], [24, 33], [57, 40], [3, 28], [59, 64], [16, 12], [72, 20], [3, 5], [59, 52], [70, 8], [71, 13], [20, 71], [64, 31], [22, 27], [53, 36], [49, 23], [40, 4], [55, 68], [32, 12], [21, 15], [57, 63], [8, 70], [72, 56], [33, 3], [41, 28], [4, 0], [44, 10], [33, 2], [36, 24], [59, 58], [45, 33], [61, 66], [21, 48], [10, 54], [46, 13], [40, 25], [28, 6], [65, 53], [0, 53], [51, 22], [71, 17], [52, 9], [30, 34], [68, 64], [54, 8], [35, 13], [64, 54], [45, 67], [47, 22], [69, 52], [18, 73], [21, 60], [72, 29], [7, 36], [68, 56], [17, 14], [44, 54], [46, 29], [72, 67], [17, 53], [54, 51], [26, 46], [65, 21], [27, 3], [50, 5]]):\n    \"\"\"Find a path with an even number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == 0 and path[-1] == max(max(e) for e in edges)\n    assert all([[a, b] in edges for a, b in zip(path, path[1:])])\n    return len(path) % 2 == 0",
    "sols": [
      "def sol(edges=[[13, 29], [70, 66], [46, 37], [1, 57], [37, 1], [43, 0], [71, 49], [49, 49], [1, 0], [13, 38], [34, 7], [56, 74], [44, 74], [35, 54], [41, 59], [53, 47], [48, 28], [52, 46], [36, 22], [74, 72], [43, 36], [65, 24], [14, 67], [64, 28], [8, 39], [71, 14], [22, 24], [20, 43], [67, 21], [12, 39], [40, 41], [54, 19], [26, 69], [48, 14], [24, 25], [24, 16], [45, 62], [43, 57], [71, 1], [31, 24], [27, 66], [64, 18], [73, 33], [25, 22], [31, 60], [67, 3], [4, 44], [41, 55], [0, 23], [7, 14], [46, 50], [40, 53], [4, 33], [8, 12], [64, 55], [19, 52], [52, 62], [3, 42], [33, 10], [67, 10], [1, 33], [39, 18], [18, 7], [2, 47], [29, 55], [29, 42], [44, 67], [55, 55], [25, 42], [39, 53], [59, 21], [44, 50], [31, 30], [60, 71], [49, 9], [20, 16], [37, 68], [58, 73], [41, 7], [30, 74], [61, 31], [71, 42], [72, 19], [66, 33], [24, 33], [57, 40], [3, 28], [59, 64], [16, 12], [72, 20], [3, 5], [59, 52], [70, 8], [71, 13], [20, 71], [64, 31], [22, 27], [53, 36], [49, 23], [40, 4], [55, 68], [32, 12], [21, 15], [57, 63], [8, 70], [72, 56], [33, 3], [41, 28], [4, 0], [44, 10], [33, 2], [36, 24], [59, 58], [45, 33], [61, 66], [21, 48], [10, 54], [46, 13], [40, 25], [28, 6], [65, 53], [0, 53], [51, 22], [71, 17], [52, 9], [30, 34], [68, 64], [54, 8], [35, 13], [64, 54], [45, 67], [47, 22], [69, 52], [18, 73], [21, 60], [72, 29], [7, 36], [68, 56], [17, 14], [44, 54], [46, 29], [72, 67], [17, 53], [54, 51], [26, 46], [65, 21], [27, 3], [50, 5]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)"
    ],
    "module": "graphs",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "EvenPath_4",
    "sat": "def sat(path: List[int], edges=[[67, 92], [18, 52], [25, 21], [83, 58], [36, 36], [26, 63], [48, 15], [53, 32], [62, 30], [41, 21], [91, 25], [82, 79], [33, 58], [65, 81], [57, 57], [62, 36], [85, 24], [14, 19], [58, 11], [20, 31], [76, 82], [92, 37], [73, 88], [90, 37], [68, 18], [70, 18], [45, 65], [45, 78], [87, 36], [41, 72], [66, 4], [25, 58], [18, 16], [72, 68], [21, 0], [44, 8], [51, 21], [30, 15], [18, 90], [75, 47], [42, 7], [13, 13], [27, 46], [78, 39], [71, 28], [85, 39], [56, 52], [60, 37], [37, 18], [82, 83], [84, 9], [31, 54], [81, 32], [46, 82], [10, 66], [85, 71], [3, 5], [15, 18], [83, 64], [9, 50], [60, 70], [7, 13], [81, 63], [32, 6], [18, 80], [22, 34], [60, 0], [88, 72], [9, 19], [74, 0], [87, 22], [41, 17], [66, 80], [33, 9], [71, 46], [23, 79], [64, 44], [40, 67], [78, 4], [8, 31], [15, 41], [42, 92], [22, 28], [57, 84], [69, 65], [35, 16], [1, 10], [7, 82], [62, 52], [8, 12], [51, 12], [5, 2], [83, 30], [76, 83], [0, 27], [30, 80], [33, 14], [39, 12], [51, 78], [30, 47], [25, 26], [11, 63], [52, 24], [32, 49], [0, 74], [51, 16], [1, 16], [14, 90], [49, 74], [69, 14], [72, 30], [61, 31], [54, 20], [46, 78], [4, 50], [13, 37], [61, 1], [4, 35], [29, 70], [20, 89], [28, 6], [74, 9], [86, 53], [58, 6], [57, 91], [10, 40], [15, 74], [23, 60], [5, 37], [50, 68], [78, 22], [90, 59], [74, 21], [80, 71], [92, 82], [42, 43], [68, 74], [43, 55], [67, 90], [87, 68], [40, 2], [55, 68], [52, 30], [10, 21], [44, 1], [39, 9], [12, 18], [61, 38], [65, 37], [10, 12], [21, 10], [81, 3], [65, 20], [31, 25], [59, 77], [43, 59], [75, 75], [71, 13], [17, 37], [31, 13], [6, 33], [24, 40], [52, 70], [70, 5], [4, 8], [20, 29], [11, 10], [43, 67], [11, 80], [49, 19], [81, 64], [44, 28], [18, 20], [91, 91], [90, 92], [81, 16], [31, 81], [7, 81], [54, 53], [65, 16], [91, 32]]):\n    \"\"\"Find a path with an even number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == 0 and path[-1] == max(max(e) for e in edges)\n    assert all([[a, b] in edges for a, b in zip(path, path[1:])])\n    return len(path) % 2 == 0",
    "sols": [
      "def sol(edges=[[67, 92], [18, 52], [25, 21], [83, 58], [36, 36], [26, 63], [48, 15], [53, 32], [62, 30], [41, 21], [91, 25], [82, 79], [33, 58], [65, 81], [57, 57], [62, 36], [85, 24], [14, 19], [58, 11], [20, 31], [76, 82], [92, 37], [73, 88], [90, 37], [68, 18], [70, 18], [45, 65], [45, 78], [87, 36], [41, 72], [66, 4], [25, 58], [18, 16], [72, 68], [21, 0], [44, 8], [51, 21], [30, 15], [18, 90], [75, 47], [42, 7], [13, 13], [27, 46], [78, 39], [71, 28], [85, 39], [56, 52], [60, 37], [37, 18], [82, 83], [84, 9], [31, 54], [81, 32], [46, 82], [10, 66], [85, 71], [3, 5], [15, 18], [83, 64], [9, 50], [60, 70], [7, 13], [81, 63], [32, 6], [18, 80], [22, 34], [60, 0], [88, 72], [9, 19], [74, 0], [87, 22], [41, 17], [66, 80], [33, 9], [71, 46], [23, 79], [64, 44], [40, 67], [78, 4], [8, 31], [15, 41], [42, 92], [22, 28], [57, 84], [69, 65], [35, 16], [1, 10], [7, 82], [62, 52], [8, 12], [51, 12], [5, 2], [83, 30], [76, 83], [0, 27], [30, 80], [33, 14], [39, 12], [51, 78], [30, 47], [25, 26], [11, 63], [52, 24], [32, 49], [0, 74], [51, 16], [1, 16], [14, 90], [49, 74], [69, 14], [72, 30], [61, 31], [54, 20], [46, 78], [4, 50], [13, 37], [61, 1], [4, 35], [29, 70], [20, 89], [28, 6], [74, 9], [86, 53], [58, 6], [57, 91], [10, 40], [15, 74], [23, 60], [5, 37], [50, 68], [78, 22], [90, 59], [74, 21], [80, 71], [92, 82], [42, 43], [68, 74], [43, 55], [67, 90], [87, 68], [40, 2], [55, 68], [52, 30], [10, 21], [44, 1], [39, 9], [12, 18], [61, 38], [65, 37], [10, 12], [21, 10], [81, 3], [65, 20], [31, 25], [59, 77], [43, 59], [75, 75], [71, 13], [17, 37], [31, 13], [6, 33], [24, 40], [52, 70], [70, 5], [4, 8], [20, 29], [11, 10], [43, 67], [11, 80], [49, 19], [81, 64], [44, 28], [18, 20], [91, 91], [90, 92], [81, 16], [31, 81], [7, 81], [54, 53], [65, 16], [91, 32]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)"
    ],
    "module": "graphs",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "EvenPath_5",
    "sat": "def sat(path: List[int], edges=[[4, 14], [50, 30], [59, 52], [18, 38], [9, 27], [36, 24], [32, 19], [21, 24], [16, 49], [40, 27], [36, 22], [43, 5], [45, 16], [29, 35], [54, 46], [4, 0], [50, 51], [41, 40], [5, 48], [40, 61], [18, 20], [54, 45], [50, 2], [23, 37], [24, 34], [32, 50], [20, 21], [40, 9], [9, 33], [42, 35], [13, 13], [50, 53], [61, 58], [45, 9], [30, 51], [5, 24], [28, 41], [57, 39], [0, 32], [52, 28], [44, 51], [21, 14], [40, 1], [11, 25], [55, 39], [43, 60], [6, 4], [7, 29], [36, 5], [11, 26], [48, 3], [48, 5], [40, 26], [60, 27], [42, 52], [42, 46], [43, 31], [22, 55], [54, 27], [16, 53], [4, 32], [8, 30], [17, 17], [19, 24], [18, 48], [41, 33], [32, 3], [20, 8], [38, 52], [59, 3], [54, 33], [23, 24], [32, 35], [6, 22], [30, 32], [7, 24], [5, 53], [32, 25], [61, 60], [42, 14], [50, 42], [3, 58], [58, 31], [30, 23], [0, 45], [54, 15], [54, 1], [41, 48], [53, 30], [1, 0], [21, 37], [3, 4], [50, 50], [53, 5], [13, 6], [9, 32], [41, 5], [27, 2], [48, 23], [18, 27], [42, 45], [53, 32], [6, 11], [24, 0], [47, 49], [45, 58], [28, 5], [47, 43], [61, 31], [44, 60], [51, 54], [9, 13], [30, 34], [2, 26], [61, 14], [16, 37], [6, 43], [49, 27], [59, 44], [55, 52], [10, 45], [40, 37], [52, 60]]):\n    \"\"\"Find a path with an even number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == 0 and path[-1] == max(max(e) for e in edges)\n    assert all([[a, b] in edges for a, b in zip(path, path[1:])])\n    return len(path) % 2 == 0",
    "sols": [
      "def sol(edges=[[4, 14], [50, 30], [59, 52], [18, 38], [9, 27], [36, 24], [32, 19], [21, 24], [16, 49], [40, 27], [36, 22], [43, 5], [45, 16], [29, 35], [54, 46], [4, 0], [50, 51], [41, 40], [5, 48], [40, 61], [18, 20], [54, 45], [50, 2], [23, 37], [24, 34], [32, 50], [20, 21], [40, 9], [9, 33], [42, 35], [13, 13], [50, 53], [61, 58], [45, 9], [30, 51], [5, 24], [28, 41], [57, 39], [0, 32], [52, 28], [44, 51], [21, 14], [40, 1], [11, 25], [55, 39], [43, 60], [6, 4], [7, 29], [36, 5], [11, 26], [48, 3], [48, 5], [40, 26], [60, 27], [42, 52], [42, 46], [43, 31], [22, 55], [54, 27], [16, 53], [4, 32], [8, 30], [17, 17], [19, 24], [18, 48], [41, 33], [32, 3], [20, 8], [38, 52], [59, 3], [54, 33], [23, 24], [32, 35], [6, 22], [30, 32], [7, 24], [5, 53], [32, 25], [61, 60], [42, 14], [50, 42], [3, 58], [58, 31], [30, 23], [0, 45], [54, 15], [54, 1], [41, 48], [53, 30], [1, 0], [21, 37], [3, 4], [50, 50], [53, 5], [13, 6], [9, 32], [41, 5], [27, 2], [48, 23], [18, 27], [42, 45], [53, 32], [6, 11], [24, 0], [47, 49], [45, 58], [28, 5], [47, 43], [61, 31], [44, 60], [51, 54], [9, 13], [30, 34], [2, 26], [61, 14], [16, 37], [6, 43], [49, 27], [59, 44], [55, 52], [10, 45], [40, 37], [52, 60]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)"
    ],
    "module": "graphs",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "EvenPath_6",
    "sat": "def sat(path: List[int], edges=[[13, 14], [13, 31], [30, 30], [28, 21], [23, 27], [22, 10], [0, 30], [5, 27], [31, 22], [5, 24], [22, 22], [35, 21], [16, 4], [11, 2], [26, 27], [9, 26], [26, 14], [0, 19], [12, 4], [25, 2], [4, 35], [22, 2], [3, 13], [15, 6], [26, 18], [10, 12], [19, 7], [15, 25], [26, 9], [29, 12], [21, 23], [20, 21], [13, 1], [21, 13], [12, 19], [5, 7], [7, 2], [22, 27], [22, 31], [2, 34], [18, 3], [8, 30], [31, 0], [19, 26], [31, 34], [1, 32], [4, 4], [4, 26], [22, 24], [31, 31], [28, 35], [16, 13], [20, 26], [23, 13], [11, 14], [35, 28], [1, 8], [10, 10], [21, 9], [23, 30], [18, 9], [23, 15], [19, 11], [10, 1], [22, 17], [33, 8], [6, 25], [32, 15], [9, 34]]):\n    \"\"\"Find a path with an even number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == 0 and path[-1] == max(max(e) for e in edges)\n    assert all([[a, b] in edges for a, b in zip(path, path[1:])])\n    return len(path) % 2 == 0",
    "sols": [
      "def sol(edges=[[13, 14], [13, 31], [30, 30], [28, 21], [23, 27], [22, 10], [0, 30], [5, 27], [31, 22], [5, 24], [22, 22], [35, 21], [16, 4], [11, 2], [26, 27], [9, 26], [26, 14], [0, 19], [12, 4], [25, 2], [4, 35], [22, 2], [3, 13], [15, 6], [26, 18], [10, 12], [19, 7], [15, 25], [26, 9], [29, 12], [21, 23], [20, 21], [13, 1], [21, 13], [12, 19], [5, 7], [7, 2], [22, 27], [22, 31], [2, 34], [18, 3], [8, 30], [31, 0], [19, 26], [31, 34], [1, 32], [4, 4], [4, 26], [22, 24], [31, 31], [28, 35], [16, 13], [20, 26], [23, 13], [11, 14], [35, 28], [1, 8], [10, 10], [21, 9], [23, 30], [18, 9], [23, 15], [19, 11], [10, 1], [22, 17], [33, 8], [6, 25], [32, 15], [9, 34]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)"
    ],
    "module": "graphs",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "EvenPath_7",
    "sat": "def sat(path: List[int], edges=[[92, 45], [95, 59], [1, 43], [51, 64], [6, 47], [76, 76], [12, 26], [38, 27], [35, 7], [31, 82], [63, 4], [5, 64], [26, 90], [88, 62], [1, 27], [44, 40], [74, 62], [58, 13], [75, 67], [27, 45], [58, 7], [43, 11], [39, 53], [86, 5], [77, 45], [45, 81], [54, 75], [20, 81], [36, 3], [6, 31], [41, 69], [75, 1], [39, 45], [14, 68], [8, 27], [68, 42], [23, 51], [24, 49], [61, 38], [8, 90], [82, 13], [11, 76], [90, 68], [26, 10], [46, 34], [48, 32], [5, 62], [20, 42], [15, 0], [95, 5], [21, 35], [10, 8], [54, 84], [96, 9], [10, 87], [95, 84], [93, 20], [79, 31], [85, 55], [20, 26], [55, 50], [39, 20], [2, 96], [63, 53], [46, 71], [92, 40], [8, 47], [29, 24], [7, 32], [43, 90], [87, 13], [80, 82], [11, 32], [45, 22], [87, 38], [36, 4], [6, 75], [22, 62], [51, 15], [46, 65], [44, 13], [0, 42], [37, 0], [70, 11], [4, 36], [15, 69], [24, 22], [88, 29], [31, 17], [77, 11], [3, 13], [6, 37], [64, 77], [49, 35], [95, 4], [69, 44], [62, 33], [72, 75], [96, 8], [33, 58], [9, 46], [54, 45], [23, 47], [30, 21], [88, 77], [28, 78], [20, 63], [64, 32], [67, 40], [74, 1], [82, 35], [6, 65], [83, 1], [68, 72], [94, 76], [31, 56], [20, 76], [73, 69], [27, 75], [96, 72], [64, 39], [9, 65], [95, 44], [54, 3], [66, 68], [41, 45], [75, 77], [90, 83], [38, 0], [27, 15], [85, 78], [83, 23], [31, 95], [73, 74], [44, 58], [6, 50], [38, 20], [50, 13], [44, 70], [61, 54], [85, 43], [75, 26], [34, 9], [11, 90], [30, 20], [64, 80], [83, 71], [14, 46], [65, 50], [27, 86], [15, 91], [23, 26], [26, 2], [4, 95], [47, 63], [39, 93], [79, 48], [61, 72], [50, 10], [70, 16], [10, 67], [93, 54], [56, 66], [65, 45], [81, 44], [68, 7], [85, 19], [0, 75], [77, 63], [27, 88], [94, 64], [32, 28], [75, 23], [67, 69], [43, 44], [82, 80], [55, 11], [8, 75], [78, 72], [81, 19], [27, 70], [31, 28], [40, 55], [5, 37], [15, 25], [57, 56], [53, 7], [94, 56], [0, 9], [38, 6], [1, 13], [41, 10], [12, 30]]):\n    \"\"\"Find a path with an even number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == 0 and path[-1] == max(max(e) for e in edges)\n    assert all([[a, b] in edges for a, b in zip(path, path[1:])])\n    return len(path) % 2 == 0",
    "sols": [
      "def sol(edges=[[92, 45], [95, 59], [1, 43], [51, 64], [6, 47], [76, 76], [12, 26], [38, 27], [35, 7], [31, 82], [63, 4], [5, 64], [26, 90], [88, 62], [1, 27], [44, 40], [74, 62], [58, 13], [75, 67], [27, 45], [58, 7], [43, 11], [39, 53], [86, 5], [77, 45], [45, 81], [54, 75], [20, 81], [36, 3], [6, 31], [41, 69], [75, 1], [39, 45], [14, 68], [8, 27], [68, 42], [23, 51], [24, 49], [61, 38], [8, 90], [82, 13], [11, 76], [90, 68], [26, 10], [46, 34], [48, 32], [5, 62], [20, 42], [15, 0], [95, 5], [21, 35], [10, 8], [54, 84], [96, 9], [10, 87], [95, 84], [93, 20], [79, 31], [85, 55], [20, 26], [55, 50], [39, 20], [2, 96], [63, 53], [46, 71], [92, 40], [8, 47], [29, 24], [7, 32], [43, 90], [87, 13], [80, 82], [11, 32], [45, 22], [87, 38], [36, 4], [6, 75], [22, 62], [51, 15], [46, 65], [44, 13], [0, 42], [37, 0], [70, 11], [4, 36], [15, 69], [24, 22], [88, 29], [31, 17], [77, 11], [3, 13], [6, 37], [64, 77], [49, 35], [95, 4], [69, 44], [62, 33], [72, 75], [96, 8], [33, 58], [9, 46], [54, 45], [23, 47], [30, 21], [88, 77], [28, 78], [20, 63], [64, 32], [67, 40], [74, 1], [82, 35], [6, 65], [83, 1], [68, 72], [94, 76], [31, 56], [20, 76], [73, 69], [27, 75], [96, 72], [64, 39], [9, 65], [95, 44], [54, 3], [66, 68], [41, 45], [75, 77], [90, 83], [38, 0], [27, 15], [85, 78], [83, 23], [31, 95], [73, 74], [44, 58], [6, 50], [38, 20], [50, 13], [44, 70], [61, 54], [85, 43], [75, 26], [34, 9], [11, 90], [30, 20], [64, 80], [83, 71], [14, 46], [65, 50], [27, 86], [15, 91], [23, 26], [26, 2], [4, 95], [47, 63], [39, 93], [79, 48], [61, 72], [50, 10], [70, 16], [10, 67], [93, 54], [56, 66], [65, 45], [81, 44], [68, 7], [85, 19], [0, 75], [77, 63], [27, 88], [94, 64], [32, 28], [75, 23], [67, 69], [43, 44], [82, 80], [55, 11], [8, 75], [78, 72], [81, 19], [27, 70], [31, 28], [40, 55], [5, 37], [15, 25], [57, 56], [53, 7], [94, 56], [0, 9], [38, 6], [1, 13], [41, 10], [12, 30]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)"
    ],
    "module": "graphs",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "EvenPath_8",
    "sat": "def sat(path: List[int], edges=[[0, 0], [2, 1], [1, 2], [0, 1]]):\n    \"\"\"Find a path with an even number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == 0 and path[-1] == max(max(e) for e in edges)\n    assert all([[a, b] in edges for a, b in zip(path, path[1:])])\n    return len(path) % 2 == 0",
    "sols": [
      "def sol(edges=[[0, 0], [2, 1], [1, 2], [0, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)"
    ],
    "module": "graphs",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "EvenPath_9",
    "sat": "def sat(path: List[int], edges=[[5, 6], [4, 3], [1, 5], [3, 1], [1, 0], [5, 5], [3, 2], [3, 3], [0, 5], [6, 1], [4, 2], [5, 4], [5, 2]]):\n    \"\"\"Find a path with an even number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == 0 and path[-1] == max(max(e) for e in edges)\n    assert all([[a, b] in edges for a, b in zip(path, path[1:])])\n    return len(path) % 2 == 0",
    "sols": [
      "def sol(edges=[[5, 6], [4, 3], [1, 5], [3, 1], [1, 0], [5, 5], [3, 2], [3, 3], [0, 5], [6, 1], [4, 2], [5, 4], [5, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)"
    ],
    "module": "graphs",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "OddPath_0",
    "sat": "def sat(p: List[int], edges=[[0, 1], [0, 2], [1, 2], [3, 1], [2, 3]]):\n    \"\"\"Find a path with an even number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for a, b in zip(p, p[1:])])",
    "sols": [
      "def sol(edges=[[0, 1], [0, 2], [1, 2], [3, 1], [2, 3]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)"
    ],
    "module": "graphs",
    "notes": "To make it even more different than EvenPath, we changed to go from node 0 to node *1*.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "OddPath_1",
    "sat": "def sat(p: List[int], edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]):\n    \"\"\"Find a path with an even number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for a, b in zip(p, p[1:])])",
    "sols": [
      "def sol(edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)"
    ],
    "module": "graphs",
    "notes": "To make it even more different than EvenPath, we changed to go from node 0 to node *1*.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "OddPath_2",
    "sat": "def sat(p: List[int], edges=[[40, 31], [16, 32], [41, 10], [14, 9], [36, 26], [14, 12], [22, 6], [36, 6], [13, 22], [0, 34], [6, 28], [27, 22], [31, 5], [2, 3], [34, 37], [17, 14], [1, 4], [22, 26], [32, 18], [20, 10], [28, 17], [2, 22], [22, 30], [36, 41], [7, 35], [24, 29], [31, 31], [26, 39], [14, 32], [33, 27], [33, 9], [30, 37], [40, 14], [19, 17], [15, 11], [7, 40], [6, 36], [20, 19], [7, 12], [17, 25], [14, 24], [34, 25], [27, 34], [35, 41], [34, 3], [25, 12], [34, 29], [21, 23], [2, 12], [25, 26], [28, 16], [17, 2], [15, 28], [29, 0], [32, 16], [13, 29], [23, 26], [3, 11], [39, 3], [40, 16], [22, 39], [12, 30], [12, 24], [38, 24], [5, 1], [21, 39], [33, 39], [29, 36], [23, 40], [34, 20], [35, 10], [13, 7], [10, 2], [32, 26], [37, 4], [36, 21], [1, 18], [23, 11], [19, 11], [35, 5], [10, 32], [9, 17], [21, 2]]):\n    \"\"\"Find a path with an even number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for a, b in zip(p, p[1:])])",
    "sols": [
      "def sol(edges=[[40, 31], [16, 32], [41, 10], [14, 9], [36, 26], [14, 12], [22, 6], [36, 6], [13, 22], [0, 34], [6, 28], [27, 22], [31, 5], [2, 3], [34, 37], [17, 14], [1, 4], [22, 26], [32, 18], [20, 10], [28, 17], [2, 22], [22, 30], [36, 41], [7, 35], [24, 29], [31, 31], [26, 39], [14, 32], [33, 27], [33, 9], [30, 37], [40, 14], [19, 17], [15, 11], [7, 40], [6, 36], [20, 19], [7, 12], [17, 25], [14, 24], [34, 25], [27, 34], [35, 41], [34, 3], [25, 12], [34, 29], [21, 23], [2, 12], [25, 26], [28, 16], [17, 2], [15, 28], [29, 0], [32, 16], [13, 29], [23, 26], [3, 11], [39, 3], [40, 16], [22, 39], [12, 30], [12, 24], [38, 24], [5, 1], [21, 39], [33, 39], [29, 36], [23, 40], [34, 20], [35, 10], [13, 7], [10, 2], [32, 26], [37, 4], [36, 21], [1, 18], [23, 11], [19, 11], [35, 5], [10, 32], [9, 17], [21, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)"
    ],
    "module": "graphs",
    "notes": "To make it even more different than EvenPath, we changed to go from node 0 to node *1*.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "OddPath_3",
    "sat": "def sat(p: List[int], edges=[[6, 6], [3, 6], [5, 0], [7, 16], [9, 12], [10, 3], [3, 5], [14, 17], [10, 14], [15, 3], [17, 15], [8, 18], [1, 12], [3, 7], [12, 17], [15, 15], [6, 2], [10, 9], [5, 13], [2, 15], [8, 5], [9, 15], [10, 6], [10, 17], [3, 9], [2, 6], [4, 1], [7, 12], [13, 1], [15, 17], [13, 5], [14, 10], [0, 17], [0, 11], [4, 17], [1, 11], [12, 18]]):\n    \"\"\"Find a path with an even number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for a, b in zip(p, p[1:])])",
    "sols": [
      "def sol(edges=[[6, 6], [3, 6], [5, 0], [7, 16], [9, 12], [10, 3], [3, 5], [14, 17], [10, 14], [15, 3], [17, 15], [8, 18], [1, 12], [3, 7], [12, 17], [15, 15], [6, 2], [10, 9], [5, 13], [2, 15], [8, 5], [9, 15], [10, 6], [10, 17], [3, 9], [2, 6], [4, 1], [7, 12], [13, 1], [15, 17], [13, 5], [14, 10], [0, 17], [0, 11], [4, 17], [1, 11], [12, 18]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)"
    ],
    "module": "graphs",
    "notes": "To make it even more different than EvenPath, we changed to go from node 0 to node *1*.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "OddPath_4",
    "sat": "def sat(p: List[int], edges=[[4, 8], [7, 6], [2, 0], [3, 2], [6, 3], [4, 5], [11, 5], [11, 0], [1, 5], [12, 12], [12, 1], [4, 11], [3, 3], [2, 10], [10, 6], [0, 7], [2, 7], [6, 11], [2, 9], [7, 7], [8, 9], [2, 1], [4, 6], [9, 4]]):\n    \"\"\"Find a path with an even number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for a, b in zip(p, p[1:])])",
    "sols": [
      "def sol(edges=[[4, 8], [7, 6], [2, 0], [3, 2], [6, 3], [4, 5], [11, 5], [11, 0], [1, 5], [12, 12], [12, 1], [4, 11], [3, 3], [2, 10], [10, 6], [0, 7], [2, 7], [6, 11], [2, 9], [7, 7], [8, 9], [2, 1], [4, 6], [9, 4]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)"
    ],
    "module": "graphs",
    "notes": "To make it even more different than EvenPath, we changed to go from node 0 to node *1*.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "OddPath_5",
    "sat": "def sat(p: List[int], edges=[[18, 10], [73, 40], [5, 44], [5, 35], [9, 53], [49, 6], [34, 0], [26, 14], [47, 3], [68, 45], [16, 44], [5, 21], [62, 11], [51, 4], [74, 50], [72, 12], [44, 40], [41, 64], [50, 24], [67, 2], [9, 72], [74, 7], [4, 58], [71, 11], [70, 1], [50, 37], [27, 58], [8, 68], [45, 62], [74, 62], [41, 54], [71, 23], [35, 19], [6, 5], [17, 5], [56, 18], [37, 2], [58, 48], [11, 45], [19, 17], [74, 29], [51, 20], [24, 29], [49, 11], [52, 34], [4, 49], [24, 17], [8, 11], [55, 42], [32, 57], [14, 39], [37, 15], [74, 3], [37, 1], [28, 11], [33, 27], [25, 55], [9, 68], [43, 58], [58, 64], [64, 16], [7, 64], [24, 63], [5, 11], [69, 22], [59, 21], [52, 27], [70, 36], [15, 34], [6, 14], [63, 13], [27, 16], [63, 61], [29, 52], [33, 60], [44, 69], [37, 34], [39, 48], [56, 26], [28, 46], [61, 31], [28, 66], [54, 29], [66, 9], [57, 6], [15, 73], [30, 71], [49, 39], [43, 1], [44, 33], [6, 63], [74, 14], [71, 38], [46, 33], [64, 34], [33, 53], [72, 53], [39, 16], [31, 5], [45, 49], [52, 19], [67, 71], [2, 14], [6, 40], [7, 41], [68, 50], [0, 33], [30, 29], [32, 66], [25, 7], [70, 28], [34, 16], [23, 10], [68, 1], [43, 72], [34, 1], [68, 2], [30, 7], [46, 31], [56, 66], [23, 4], [74, 34], [54, 59], [50, 6], [13, 26], [61, 49], [68, 72], [48, 61], [25, 19], [19, 46], [36, 34], [11, 59], [32, 5], [28, 5], [52, 32], [49, 26], [66, 13], [13, 48], [74, 46], [41, 52], [62, 62], [48, 21], [18, 20]]):\n    \"\"\"Find a path with an even number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for a, b in zip(p, p[1:])])",
    "sols": [
      "def sol(edges=[[18, 10], [73, 40], [5, 44], [5, 35], [9, 53], [49, 6], [34, 0], [26, 14], [47, 3], [68, 45], [16, 44], [5, 21], [62, 11], [51, 4], [74, 50], [72, 12], [44, 40], [41, 64], [50, 24], [67, 2], [9, 72], [74, 7], [4, 58], [71, 11], [70, 1], [50, 37], [27, 58], [8, 68], [45, 62], [74, 62], [41, 54], [71, 23], [35, 19], [6, 5], [17, 5], [56, 18], [37, 2], [58, 48], [11, 45], [19, 17], [74, 29], [51, 20], [24, 29], [49, 11], [52, 34], [4, 49], [24, 17], [8, 11], [55, 42], [32, 57], [14, 39], [37, 15], [74, 3], [37, 1], [28, 11], [33, 27], [25, 55], [9, 68], [43, 58], [58, 64], [64, 16], [7, 64], [24, 63], [5, 11], [69, 22], [59, 21], [52, 27], [70, 36], [15, 34], [6, 14], [63, 13], [27, 16], [63, 61], [29, 52], [33, 60], [44, 69], [37, 34], [39, 48], [56, 26], [28, 46], [61, 31], [28, 66], [54, 29], [66, 9], [57, 6], [15, 73], [30, 71], [49, 39], [43, 1], [44, 33], [6, 63], [74, 14], [71, 38], [46, 33], [64, 34], [33, 53], [72, 53], [39, 16], [31, 5], [45, 49], [52, 19], [67, 71], [2, 14], [6, 40], [7, 41], [68, 50], [0, 33], [30, 29], [32, 66], [25, 7], [70, 28], [34, 16], [23, 10], [68, 1], [43, 72], [34, 1], [68, 2], [30, 7], [46, 31], [56, 66], [23, 4], [74, 34], [54, 59], [50, 6], [13, 26], [61, 49], [68, 72], [48, 61], [25, 19], [19, 46], [36, 34], [11, 59], [32, 5], [28, 5], [52, 32], [49, 26], [66, 13], [13, 48], [74, 46], [41, 52], [62, 62], [48, 21], [18, 20]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)"
    ],
    "module": "graphs",
    "notes": "To make it even more different than EvenPath, we changed to go from node 0 to node *1*.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "OddPath_6",
    "sat": "def sat(p: List[int], edges=[[1, 1], [0, 1], [1, 0]]):\n    \"\"\"Find a path with an even number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for a, b in zip(p, p[1:])])",
    "sols": [
      "def sol(edges=[[1, 1], [0, 1], [1, 0]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)"
    ],
    "module": "graphs",
    "notes": "To make it even more different than EvenPath, we changed to go from node 0 to node *1*.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "OddPath_7",
    "sat": "def sat(p: List[int], edges=[[3, 2], [2, 0], [2, 1], [0, 1], [0, 2], [2, 2], [3, 1]]):\n    \"\"\"Find a path with an even number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for a, b in zip(p, p[1:])])",
    "sols": [
      "def sol(edges=[[3, 2], [2, 0], [2, 1], [0, 1], [0, 2], [2, 2], [3, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)"
    ],
    "module": "graphs",
    "notes": "To make it even more different than EvenPath, we changed to go from node 0 to node *1*.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "OddPath_8",
    "sat": "def sat(p: List[int], edges=[[3, 7], [5, 1], [0, 0], [5, 5], [6, 1], [2, 0], [2, 4], [1, 5], [0, 3], [7, 5], [0, 4], [6, 6], [3, 1], [4, 5]]):\n    \"\"\"Find a path with an even number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for a, b in zip(p, p[1:])])",
    "sols": [
      "def sol(edges=[[3, 7], [5, 1], [0, 0], [5, 5], [6, 1], [2, 0], [2, 4], [1, 5], [0, 3], [7, 5], [0, 4], [6, 6], [3, 1], [4, 5]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)"
    ],
    "module": "graphs",
    "notes": "To make it even more different than EvenPath, we changed to go from node 0 to node *1*.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "OddPath_9",
    "sat": "def sat(p: List[int], edges=[[11, 40], [20, 85], [16, 63], [66, 6], [81, 51], [92, 32], [56, 68], [77, 8], [16, 77], [20, 18], [73, 40], [73, 7], [30, 74], [71, 31], [8, 74], [23, 38], [14, 26], [21, 43], [41, 64], [10, 1], [77, 64], [90, 42], [66, 56], [59, 82], [95, 32], [57, 47], [24, 23], [63, 3], [10, 21], [57, 1], [93, 0], [15, 63], [90, 43], [0, 44], [80, 24], [19, 42], [85, 14], [62, 35], [55, 68], [25, 51], [72, 53], [52, 0], [32, 93], [69, 18], [93, 5], [10, 65], [22, 84], [61, 86], [82, 54], [9, 30], [1, 74], [72, 67], [59, 60], [52, 33], [86, 9], [85, 5], [96, 26], [16, 70], [88, 84], [75, 25], [68, 5], [49, 53], [81, 35], [15, 62], [62, 13], [64, 9], [64, 34], [92, 47], [18, 87], [18, 41], [17, 41], [3, 69], [10, 96], [82, 41], [19, 47], [48, 83], [10, 68], [89, 1], [56, 8], [56, 52], [13, 3], [22, 92], [42, 47], [68, 65], [12, 56], [19, 66], [34, 26], [42, 29], [95, 7], [27, 77], [44, 73], [79, 29], [53, 68], [21, 33], [59, 94], [29, 79], [12, 4], [74, 61], [72, 1], [35, 47], [8, 82], [62, 60], [35, 66], [30, 81], [38, 96], [3, 93], [33, 64], [13, 11], [12, 85], [15, 64], [67, 25], [70, 84], [32, 32], [46, 5], [1, 76], [51, 60], [3, 19], [51, 40], [50, 43], [51, 33], [26, 32], [20, 53], [57, 68], [21, 56], [79, 88], [8, 45], [19, 24], [37, 47], [34, 88], [2, 69], [6, 35], [47, 66], [47, 34], [46, 4], [76, 87], [94, 15], [15, 47], [67, 13], [45, 69], [86, 88], [18, 76], [5, 43], [2, 42], [88, 90], [78, 6], [55, 38], [47, 95], [32, 21], [66, 55], [44, 72], [83, 17], [77, 1], [92, 85], [16, 28], [61, 19], [69, 43], [76, 71], [86, 23], [57, 37], [78, 20], [36, 94], [60, 86], [59, 90], [9, 23], [38, 6], [76, 11], [38, 22], [88, 65], [36, 92], [44, 29], [68, 63], [53, 66], [32, 54], [75, 95], [1, 42], [45, 82], [82, 35], [5, 28], [14, 43], [83, 58], [79, 11], [30, 8], [3, 58], [83, 13], [8, 81], [90, 84], [83, 64], [91, 23], [26, 78], [95, 50], [86, 49], [68, 24], [20, 79], [68, 46]]):\n    \"\"\"Find a path with an even number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for a, b in zip(p, p[1:])])",
    "sols": [
      "def sol(edges=[[11, 40], [20, 85], [16, 63], [66, 6], [81, 51], [92, 32], [56, 68], [77, 8], [16, 77], [20, 18], [73, 40], [73, 7], [30, 74], [71, 31], [8, 74], [23, 38], [14, 26], [21, 43], [41, 64], [10, 1], [77, 64], [90, 42], [66, 56], [59, 82], [95, 32], [57, 47], [24, 23], [63, 3], [10, 21], [57, 1], [93, 0], [15, 63], [90, 43], [0, 44], [80, 24], [19, 42], [85, 14], [62, 35], [55, 68], [25, 51], [72, 53], [52, 0], [32, 93], [69, 18], [93, 5], [10, 65], [22, 84], [61, 86], [82, 54], [9, 30], [1, 74], [72, 67], [59, 60], [52, 33], [86, 9], [85, 5], [96, 26], [16, 70], [88, 84], [75, 25], [68, 5], [49, 53], [81, 35], [15, 62], [62, 13], [64, 9], [64, 34], [92, 47], [18, 87], [18, 41], [17, 41], [3, 69], [10, 96], [82, 41], [19, 47], [48, 83], [10, 68], [89, 1], [56, 8], [56, 52], [13, 3], [22, 92], [42, 47], [68, 65], [12, 56], [19, 66], [34, 26], [42, 29], [95, 7], [27, 77], [44, 73], [79, 29], [53, 68], [21, 33], [59, 94], [29, 79], [12, 4], [74, 61], [72, 1], [35, 47], [8, 82], [62, 60], [35, 66], [30, 81], [38, 96], [3, 93], [33, 64], [13, 11], [12, 85], [15, 64], [67, 25], [70, 84], [32, 32], [46, 5], [1, 76], [51, 60], [3, 19], [51, 40], [50, 43], [51, 33], [26, 32], [20, 53], [57, 68], [21, 56], [79, 88], [8, 45], [19, 24], [37, 47], [34, 88], [2, 69], [6, 35], [47, 66], [47, 34], [46, 4], [76, 87], [94, 15], [15, 47], [67, 13], [45, 69], [86, 88], [18, 76], [5, 43], [2, 42], [88, 90], [78, 6], [55, 38], [47, 95], [32, 21], [66, 55], [44, 72], [83, 17], [77, 1], [92, 85], [16, 28], [61, 19], [69, 43], [76, 71], [86, 23], [57, 37], [78, 20], [36, 94], [60, 86], [59, 90], [9, 23], [38, 6], [76, 11], [38, 22], [88, 65], [36, 92], [44, 29], [68, 63], [53, 66], [32, 54], [75, 95], [1, 42], [45, 82], [82, 35], [5, 28], [14, 43], [83, 58], [79, 11], [30, 8], [3, 58], [83, 13], [8, 81], [90, 84], [83, 64], [91, 23], [26, 78], [95, 50], [86, 49], [68, 24], [20, 79], [68, 46]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)"
    ],
    "module": "graphs",
    "notes": "To make it even more different than EvenPath, we changed to go from node 0 to node *1*.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "Zarankiewicz_0",
    "sat": "def sat(edges: List[List[int]]):\n    \"\"\"Find a bipartite graph with 4 vertices on each side, 13 edges, and no K_3,3 subgraph.\"\"\"\n    assert len(edges) == len({(a, b) for a, b in edges}) == 13  #  13 edges, no duplicates\n    assert all(i in range(4) for li in edges for i in li)  # 4 nodes on each side\n    for i in range(4):\n        v = [m for m in range(4) if m != i]\n        for j in range(4):\n            u = [m for m in range(4) if m != j]\n            if all([m, n] in edges for m in v for n in u):\n                return False\n    return True",
    "sols": [
      "def sol():\n    return [[i, j] for i in range(4) for j in range(4) if i != j or i == 0]"
    ],
    "module": "graphs",
    "notes": "[Zarankiewicz problem](https://en.wikipedia.org/wiki/Zarankiewicz_problem)",
    "taint_date": "2021-4-26",
    "weight": 0.08333333333333333
  },
  {
    "name": "GraphIsomorphism_0",
    "sat": "def sat(bi: List[int], g1=[[0, 1], [1, 2], [2, 3], [3, 4]], g2=[[0, 4], [4, 1], [1, 2], [2, 3]]):\n    \"\"\"\n    You are given two graphs which are permutations of one another and the goal is to find the permutation.\n    Each graph is specified by a list of edges where each edge is a pair of integer vertex numbers.\n    \"\"\"\n    return len(bi) == len(set(bi)) and {(i, j) for i, j in g1} == {(bi[i], bi[j]) for i, j in g2}",
    "sols": [
      "def sol(g1=[[0, 1], [1, 2], [2, 3], [3, 4]], g2=[[0, 4], [4, 1], [1, 2], [2, 3]]):  # exponentially slow\n    from itertools import permutations\n    n = max(i for g in [g1, g2] for e in g for i in e) + 1\n    g1_set = {(i, j) for i, j in g1}\n    for pi in permutations(range(n)):\n        if all((pi[i], pi[j]) in g1_set for i, j in g2):\n            return list(pi)\n    assert False, f\"Graphs are not isomorphic {g1}, {g2}\""
    ],
    "module": "graphs",
    "notes": "The classic [Graph Isomorphism](https://en.wikipedia.org/wiki/Graph_isomorphism) problem.\nIt is unknown whether or not there exists a polynomial-time algorithm\nfor this problem, though an unpublished quasi-polynomial-time algorithm has been announced by Babai.\n\nThe classic version is a decision problem: given two graphs, determine whether or not they are isomorphic.\nHowever, it is polynomial-time equivalent to the one below through a standard reduction. In particular, if you\ncould solve the search problem below (finding the actual bijection), then you can decide isomorphism because the\nsearch solver would simply fail on non-isomorphic graphs. Conversely, if you could solve the decision problem,\nthen you can find a bijection as follows: if the decider determines that the graphs are isomorphic, for each node\nin the first graph, find a corresponding node in the second graph as follows. Add N self-edges from the node to\nitself where N is the maximum degree in the graph + 1, and do that for each candidate node in the second graph.\nFor each of these additions, test isomorphism. If the graphs are isomorphic then there must be a bijection that maps\nthe first node to the second. Repeat this for each node until you have found a bijection. (If self-loops are not\nallowed, one can do this by adding N additional nodes for each test.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "GraphIsomorphism_1",
    "sat": "def sat(bi: List[int], g1=[[0, 6], [0, 8], [0, 10], [0, 11], [1, 3], [1, 5], [1, 7], [1, 10], [2, 4], [2, 5], [2, 7], [2, 8], [2, 9], [3, 5], [3, 7], [3, 10], [4, 4], [5, 1], [5, 2], [5, 7], [5, 8], [5, 10], [6, 1], [6, 2], [6, 3], [6, 4], [6, 6], [6, 7], [6, 8], [6, 9], [6, 10], [6, 11], [7, 0], [7, 2], [7, 9], [8, 4], [8, 6], [8, 9], [8, 10], [9, 1], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 9], [9, 10], [9, 11], [10, 1], [10, 3], [10, 6], [10, 8], [11, 1], [11, 2], [11, 4], [11, 8], [11, 9], [11, 11]], g2=[[0, 11], [9, 2], [10, 10], [6, 11], [7, 5], [5, 0], [9, 3], [8, 2], [10, 8], [2, 11], [4, 8], [0, 7], [2, 10], [11, 11], [4, 5], [10, 11], [6, 10], [9, 7], [6, 6], [8, 10], [1, 5], [2, 9], [10, 3], [0, 2], [9, 8], [5, 4], [0, 5], [6, 2], [8, 1], [1, 6], [6, 3], [0, 10], [0, 8], [10, 5], [2, 7], [0, 6], [0, 0], [10, 0], [3, 8], [5, 3], [5, 7], [10, 6], [6, 7], [7, 0], [3, 9], [3, 4], [0, 3], [0, 4], [1, 7], [4, 9], [7, 10], [9, 5], [7, 11], [3, 5], [10, 4], [10, 9], [2, 8], [1, 0]]):\n    \"\"\"\n    You are given two graphs which are permutations of one another and the goal is to find the permutation.\n    Each graph is specified by a list of edges where each edge is a pair of integer vertex numbers.\n    \"\"\"\n    return len(bi) == len(set(bi)) and {(i, j) for i, j in g1} == {(bi[i], bi[j]) for i, j in g2}",
    "sols": [],
    "module": "graphs",
    "notes": "The classic [Graph Isomorphism](https://en.wikipedia.org/wiki/Graph_isomorphism) problem.\nIt is unknown whether or not there exists a polynomial-time algorithm\nfor this problem, though an unpublished quasi-polynomial-time algorithm has been announced by Babai.\n\nThe classic version is a decision problem: given two graphs, determine whether or not they are isomorphic.\nHowever, it is polynomial-time equivalent to the one below through a standard reduction. In particular, if you\ncould solve the search problem below (finding the actual bijection), then you can decide isomorphism because the\nsearch solver would simply fail on non-isomorphic graphs. Conversely, if you could solve the decision problem,\nthen you can find a bijection as follows: if the decider determines that the graphs are isomorphic, for each node\nin the first graph, find a corresponding node in the second graph as follows. Add N self-edges from the node to\nitself where N is the maximum degree in the graph + 1, and do that for each candidate node in the second graph.\nFor each of these additions, test isomorphism. If the graphs are isomorphic then there must be a bijection that maps\nthe first node to the second. Repeat this for each node until you have found a bijection. (If self-loops are not\nallowed, one can do this by adding N additional nodes for each test.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "GraphIsomorphism_2",
    "sat": "def sat(bi: List[int], g1=[[0, 1], [0, 7], [1, 1], [2, 0], [2, 3], [2, 5], [2, 6], [3, 0], [3, 1], [3, 2], [3, 5], [3, 6], [3, 7], [4, 3], [4, 5], [4, 6], [5, 0], [5, 2], [5, 3], [6, 0], [6, 5], [6, 7], [7, 0], [7, 4], [7, 6]], g2=[[0, 7], [7, 1], [0, 2], [3, 1], [2, 0], [7, 0], [0, 6], [4, 7], [2, 7], [7, 6], [1, 6], [3, 6], [6, 5], [1, 3], [7, 3], [4, 0], [1, 0], [3, 4], [2, 1], [2, 6], [7, 2], [6, 3], [7, 5], [4, 1], [5, 5]]):\n    \"\"\"\n    You are given two graphs which are permutations of one another and the goal is to find the permutation.\n    Each graph is specified by a list of edges where each edge is a pair of integer vertex numbers.\n    \"\"\"\n    return len(bi) == len(set(bi)) and {(i, j) for i, j in g1} == {(bi[i], bi[j]) for i, j in g2}",
    "sols": [
      "def sol(g1=[[0, 1], [0, 7], [1, 1], [2, 0], [2, 3], [2, 5], [2, 6], [3, 0], [3, 1], [3, 2], [3, 5], [3, 6], [3, 7], [4, 3], [4, 5], [4, 6], [5, 0], [5, 2], [5, 3], [6, 0], [6, 5], [6, 7], [7, 0], [7, 4], [7, 6]], g2=[[0, 7], [7, 1], [0, 2], [3, 1], [2, 0], [7, 0], [0, 6], [4, 7], [2, 7], [7, 6], [1, 6], [3, 6], [6, 5], [1, 3], [7, 3], [4, 0], [1, 0], [3, 4], [2, 1], [2, 6], [7, 2], [6, 3], [7, 5], [4, 1], [5, 5]]):  # exponentially slow\n    from itertools import permutations\n    n = max(i for g in [g1, g2] for e in g for i in e) + 1\n    g1_set = {(i, j) for i, j in g1}\n    for pi in permutations(range(n)):\n        if all((pi[i], pi[j]) in g1_set for i, j in g2):\n            return list(pi)\n    assert False, f\"Graphs are not isomorphic {g1}, {g2}\""
    ],
    "module": "graphs",
    "notes": "The classic [Graph Isomorphism](https://en.wikipedia.org/wiki/Graph_isomorphism) problem.\nIt is unknown whether or not there exists a polynomial-time algorithm\nfor this problem, though an unpublished quasi-polynomial-time algorithm has been announced by Babai.\n\nThe classic version is a decision problem: given two graphs, determine whether or not they are isomorphic.\nHowever, it is polynomial-time equivalent to the one below through a standard reduction. In particular, if you\ncould solve the search problem below (finding the actual bijection), then you can decide isomorphism because the\nsearch solver would simply fail on non-isomorphic graphs. Conversely, if you could solve the decision problem,\nthen you can find a bijection as follows: if the decider determines that the graphs are isomorphic, for each node\nin the first graph, find a corresponding node in the second graph as follows. Add N self-edges from the node to\nitself where N is the maximum degree in the graph + 1, and do that for each candidate node in the second graph.\nFor each of these additions, test isomorphism. If the graphs are isomorphic then there must be a bijection that maps\nthe first node to the second. Repeat this for each node until you have found a bijection. (If self-loops are not\nallowed, one can do this by adding N additional nodes for each test.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "GraphIsomorphism_3",
    "sat": "def sat(bi: List[int], g1=[[0, 0], [0, 5], [0, 6], [0, 9], [1, 1], [1, 2], [1, 3], [1, 5], [1, 7], [1, 8], [2, 1], [2, 4], [2, 8], [2, 9], [3, 0], [3, 4], [3, 7], [3, 9], [4, 2], [4, 3], [4, 5], [4, 9], [5, 6], [5, 7], [5, 8], [5, 9], [6, 0], [6, 4], [6, 7], [7, 5], [7, 6], [7, 8], [8, 1], [8, 7], [9, 1], [9, 4], [9, 8], [9, 9]], g2=[[1, 0], [2, 5], [0, 1], [5, 0], [6, 2], [8, 8], [0, 2], [9, 3], [3, 7], [5, 8], [1, 8], [8, 3], [5, 3], [0, 9], [6, 7], [1, 5], [8, 2], [7, 4], [6, 3], [9, 0], [4, 1], [1, 1], [7, 3], [7, 5], [2, 4], [5, 9], [3, 9], [7, 7], [7, 9], [4, 9], [4, 8], [8, 7], [7, 6], [9, 5], [6, 8], [2, 8], [4, 2], [2, 6]]):\n    \"\"\"\n    You are given two graphs which are permutations of one another and the goal is to find the permutation.\n    Each graph is specified by a list of edges where each edge is a pair of integer vertex numbers.\n    \"\"\"\n    return len(bi) == len(set(bi)) and {(i, j) for i, j in g1} == {(bi[i], bi[j]) for i, j in g2}",
    "sols": [],
    "module": "graphs",
    "notes": "The classic [Graph Isomorphism](https://en.wikipedia.org/wiki/Graph_isomorphism) problem.\nIt is unknown whether or not there exists a polynomial-time algorithm\nfor this problem, though an unpublished quasi-polynomial-time algorithm has been announced by Babai.\n\nThe classic version is a decision problem: given two graphs, determine whether or not they are isomorphic.\nHowever, it is polynomial-time equivalent to the one below through a standard reduction. In particular, if you\ncould solve the search problem below (finding the actual bijection), then you can decide isomorphism because the\nsearch solver would simply fail on non-isomorphic graphs. Conversely, if you could solve the decision problem,\nthen you can find a bijection as follows: if the decider determines that the graphs are isomorphic, for each node\nin the first graph, find a corresponding node in the second graph as follows. Add N self-edges from the node to\nitself where N is the maximum degree in the graph + 1, and do that for each candidate node in the second graph.\nFor each of these additions, test isomorphism. If the graphs are isomorphic then there must be a bijection that maps\nthe first node to the second. Repeat this for each node until you have found a bijection. (If self-loops are not\nallowed, one can do this by adding N additional nodes for each test.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "GraphIsomorphism_4",
    "sat": "def sat(bi: List[int], g1=[[1, 0], [1, 1], [1, 2], [2, 1]], g2=[[0, 2], [2, 2], [2, 0], [2, 1]]):\n    \"\"\"\n    You are given two graphs which are permutations of one another and the goal is to find the permutation.\n    Each graph is specified by a list of edges where each edge is a pair of integer vertex numbers.\n    \"\"\"\n    return len(bi) == len(set(bi)) and {(i, j) for i, j in g1} == {(bi[i], bi[j]) for i, j in g2}",
    "sols": [
      "def sol(g1=[[1, 0], [1, 1], [1, 2], [2, 1]], g2=[[0, 2], [2, 2], [2, 0], [2, 1]]):  # exponentially slow\n    from itertools import permutations\n    n = max(i for g in [g1, g2] for e in g for i in e) + 1\n    g1_set = {(i, j) for i, j in g1}\n    for pi in permutations(range(n)):\n        if all((pi[i], pi[j]) in g1_set for i, j in g2):\n            return list(pi)\n    assert False, f\"Graphs are not isomorphic {g1}, {g2}\""
    ],
    "module": "graphs",
    "notes": "The classic [Graph Isomorphism](https://en.wikipedia.org/wiki/Graph_isomorphism) problem.\nIt is unknown whether or not there exists a polynomial-time algorithm\nfor this problem, though an unpublished quasi-polynomial-time algorithm has been announced by Babai.\n\nThe classic version is a decision problem: given two graphs, determine whether or not they are isomorphic.\nHowever, it is polynomial-time equivalent to the one below through a standard reduction. In particular, if you\ncould solve the search problem below (finding the actual bijection), then you can decide isomorphism because the\nsearch solver would simply fail on non-isomorphic graphs. Conversely, if you could solve the decision problem,\nthen you can find a bijection as follows: if the decider determines that the graphs are isomorphic, for each node\nin the first graph, find a corresponding node in the second graph as follows. Add N self-edges from the node to\nitself where N is the maximum degree in the graph + 1, and do that for each candidate node in the second graph.\nFor each of these additions, test isomorphism. If the graphs are isomorphic then there must be a bijection that maps\nthe first node to the second. Repeat this for each node until you have found a bijection. (If self-loops are not\nallowed, one can do this by adding N additional nodes for each test.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "GraphIsomorphism_5",
    "sat": "def sat(bi: List[int], g1=[[0, 0], [0, 2], [0, 5], [1, 1], [1, 5], [2, 2], [2, 5], [3, 3], [3, 5], [3, 6], [3, 7], [3, 8], [4, 1], [4, 4], [4, 5], [5, 2], [5, 4], [5, 6], [5, 7], [5, 8], [6, 0], [6, 2], [6, 8], [7, 1], [7, 6], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 7], [8, 8]], g2=[[4, 5], [3, 3], [6, 0], [4, 1], [5, 5], [4, 8], [4, 6], [0, 8], [1, 7], [5, 6], [2, 8], [7, 7], [5, 3], [1, 2], [1, 5], [5, 0], [2, 2], [3, 8], [8, 1], [5, 2], [4, 4], [5, 7], [8, 6], [3, 0], [6, 1], [5, 4], [7, 2], [8, 3], [7, 8], [8, 2], [5, 8], [0, 0], [8, 5]]):\n    \"\"\"\n    You are given two graphs which are permutations of one another and the goal is to find the permutation.\n    Each graph is specified by a list of edges where each edge is a pair of integer vertex numbers.\n    \"\"\"\n    return len(bi) == len(set(bi)) and {(i, j) for i, j in g1} == {(bi[i], bi[j]) for i, j in g2}",
    "sols": [
      "def sol(g1=[[0, 0], [0, 2], [0, 5], [1, 1], [1, 5], [2, 2], [2, 5], [3, 3], [3, 5], [3, 6], [3, 7], [3, 8], [4, 1], [4, 4], [4, 5], [5, 2], [5, 4], [5, 6], [5, 7], [5, 8], [6, 0], [6, 2], [6, 8], [7, 1], [7, 6], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 7], [8, 8]], g2=[[4, 5], [3, 3], [6, 0], [4, 1], [5, 5], [4, 8], [4, 6], [0, 8], [1, 7], [5, 6], [2, 8], [7, 7], [5, 3], [1, 2], [1, 5], [5, 0], [2, 2], [3, 8], [8, 1], [5, 2], [4, 4], [5, 7], [8, 6], [3, 0], [6, 1], [5, 4], [7, 2], [8, 3], [7, 8], [8, 2], [5, 8], [0, 0], [8, 5]]):  # exponentially slow\n    from itertools import permutations\n    n = max(i for g in [g1, g2] for e in g for i in e) + 1\n    g1_set = {(i, j) for i, j in g1}\n    for pi in permutations(range(n)):\n        if all((pi[i], pi[j]) in g1_set for i, j in g2):\n            return list(pi)\n    assert False, f\"Graphs are not isomorphic {g1}, {g2}\""
    ],
    "module": "graphs",
    "notes": "The classic [Graph Isomorphism](https://en.wikipedia.org/wiki/Graph_isomorphism) problem.\nIt is unknown whether or not there exists a polynomial-time algorithm\nfor this problem, though an unpublished quasi-polynomial-time algorithm has been announced by Babai.\n\nThe classic version is a decision problem: given two graphs, determine whether or not they are isomorphic.\nHowever, it is polynomial-time equivalent to the one below through a standard reduction. In particular, if you\ncould solve the search problem below (finding the actual bijection), then you can decide isomorphism because the\nsearch solver would simply fail on non-isomorphic graphs. Conversely, if you could solve the decision problem,\nthen you can find a bijection as follows: if the decider determines that the graphs are isomorphic, for each node\nin the first graph, find a corresponding node in the second graph as follows. Add N self-edges from the node to\nitself where N is the maximum degree in the graph + 1, and do that for each candidate node in the second graph.\nFor each of these additions, test isomorphism. If the graphs are isomorphic then there must be a bijection that maps\nthe first node to the second. Repeat this for each node until you have found a bijection. (If self-loops are not\nallowed, one can do this by adding N additional nodes for each test.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "GraphIsomorphism_6",
    "sat": "def sat(bi: List[int], g1=[[0, 1], [0, 3], [0, 6], [0, 7], [0, 8], [0, 9], [1, 2], [1, 5], [1, 9], [2, 1], [2, 3], [2, 4], [2, 5], [2, 7], [2, 8], [2, 10], [2, 11], [2, 12], [3, 2], [3, 3], [3, 5], [3, 9], [3, 10], [3, 11], [4, 0], [4, 1], [4, 2], [4, 4], [4, 5], [4, 7], [4, 8], [4, 9], [4, 11], [5, 1], [5, 2], [5, 4], [5, 5], [5, 12], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 6], [6, 8], [6, 10], [6, 12], [7, 1], [7, 4], [7, 5], [7, 8], [7, 9], [8, 7], [8, 8], [8, 12], [9, 1], [9, 2], [9, 3], [9, 4], [9, 6], [10, 3], [10, 4], [10, 10], [10, 11], [11, 8], [12, 1], [12, 2], [12, 3], [12, 4], [12, 10]], g2=[[2, 0], [7, 7], [1, 9], [0, 9], [1, 0], [9, 10], [11, 11], [3, 10], [0, 1], [4, 5], [5, 3], [5, 4], [9, 8], [2, 5], [7, 8], [10, 2], [10, 6], [2, 1], [11, 7], [12, 4], [10, 1], [0, 2], [11, 10], [9, 3], [2, 8], [2, 3], [12, 1], [11, 6], [11, 1], [6, 9], [3, 3], [3, 1], [11, 9], [11, 12], [1, 3], [9, 5], [0, 11], [6, 8], [10, 9], [9, 1], [2, 2], [12, 5], [4, 4], [5, 1], [5, 0], [12, 11], [12, 0], [7, 6], [2, 9], [9, 2], [5, 2], [6, 6], [9, 6], [11, 2], [9, 4], [0, 6], [9, 7], [12, 6], [7, 2], [11, 4], [2, 12], [6, 3], [4, 10], [3, 9], [6, 7], [3, 2], [8, 4], [6, 0], [10, 7], [2, 4]]):\n    \"\"\"\n    You are given two graphs which are permutations of one another and the goal is to find the permutation.\n    Each graph is specified by a list of edges where each edge is a pair of integer vertex numbers.\n    \"\"\"\n    return len(bi) == len(set(bi)) and {(i, j) for i, j in g1} == {(bi[i], bi[j]) for i, j in g2}",
    "sols": [],
    "module": "graphs",
    "notes": "The classic [Graph Isomorphism](https://en.wikipedia.org/wiki/Graph_isomorphism) problem.\nIt is unknown whether or not there exists a polynomial-time algorithm\nfor this problem, though an unpublished quasi-polynomial-time algorithm has been announced by Babai.\n\nThe classic version is a decision problem: given two graphs, determine whether or not they are isomorphic.\nHowever, it is polynomial-time equivalent to the one below through a standard reduction. In particular, if you\ncould solve the search problem below (finding the actual bijection), then you can decide isomorphism because the\nsearch solver would simply fail on non-isomorphic graphs. Conversely, if you could solve the decision problem,\nthen you can find a bijection as follows: if the decider determines that the graphs are isomorphic, for each node\nin the first graph, find a corresponding node in the second graph as follows. Add N self-edges from the node to\nitself where N is the maximum degree in the graph + 1, and do that for each candidate node in the second graph.\nFor each of these additions, test isomorphism. If the graphs are isomorphic then there must be a bijection that maps\nthe first node to the second. Repeat this for each node until you have found a bijection. (If self-loops are not\nallowed, one can do this by adding N additional nodes for each test.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "GraphIsomorphism_7",
    "sat": "def sat(bi: List[int], g1=[[0, 0], [0, 2], [0, 3], [0, 4], [0, 6], [1, 1], [1, 4], [2, 4], [2, 6], [3, 0], [3, 2], [4, 0], [4, 3], [4, 4], [5, 0], [5, 1], [5, 2], [5, 4], [6, 5], [6, 6]], g2=[[5, 1], [0, 2], [3, 3], [1, 3], [2, 2], [1, 5], [3, 4], [6, 2], [2, 1], [0, 0], [4, 6], [1, 2], [2, 5], [5, 6], [4, 2], [1, 1], [1, 6], [6, 3], [4, 1], [4, 0]]):\n    \"\"\"\n    You are given two graphs which are permutations of one another and the goal is to find the permutation.\n    Each graph is specified by a list of edges where each edge is a pair of integer vertex numbers.\n    \"\"\"\n    return len(bi) == len(set(bi)) and {(i, j) for i, j in g1} == {(bi[i], bi[j]) for i, j in g2}",
    "sols": [
      "def sol(g1=[[0, 0], [0, 2], [0, 3], [0, 4], [0, 6], [1, 1], [1, 4], [2, 4], [2, 6], [3, 0], [3, 2], [4, 0], [4, 3], [4, 4], [5, 0], [5, 1], [5, 2], [5, 4], [6, 5], [6, 6]], g2=[[5, 1], [0, 2], [3, 3], [1, 3], [2, 2], [1, 5], [3, 4], [6, 2], [2, 1], [0, 0], [4, 6], [1, 2], [2, 5], [5, 6], [4, 2], [1, 1], [1, 6], [6, 3], [4, 1], [4, 0]]):  # exponentially slow\n    from itertools import permutations\n    n = max(i for g in [g1, g2] for e in g for i in e) + 1\n    g1_set = {(i, j) for i, j in g1}\n    for pi in permutations(range(n)):\n        if all((pi[i], pi[j]) in g1_set for i, j in g2):\n            return list(pi)\n    assert False, f\"Graphs are not isomorphic {g1}, {g2}\""
    ],
    "module": "graphs",
    "notes": "The classic [Graph Isomorphism](https://en.wikipedia.org/wiki/Graph_isomorphism) problem.\nIt is unknown whether or not there exists a polynomial-time algorithm\nfor this problem, though an unpublished quasi-polynomial-time algorithm has been announced by Babai.\n\nThe classic version is a decision problem: given two graphs, determine whether or not they are isomorphic.\nHowever, it is polynomial-time equivalent to the one below through a standard reduction. In particular, if you\ncould solve the search problem below (finding the actual bijection), then you can decide isomorphism because the\nsearch solver would simply fail on non-isomorphic graphs. Conversely, if you could solve the decision problem,\nthen you can find a bijection as follows: if the decider determines that the graphs are isomorphic, for each node\nin the first graph, find a corresponding node in the second graph as follows. Add N self-edges from the node to\nitself where N is the maximum degree in the graph + 1, and do that for each candidate node in the second graph.\nFor each of these additions, test isomorphism. If the graphs are isomorphic then there must be a bijection that maps\nthe first node to the second. Repeat this for each node until you have found a bijection. (If self-loops are not\nallowed, one can do this by adding N additional nodes for each test.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "GraphIsomorphism_8",
    "sat": "def sat(bi: List[int], g1=[[0, 1], [0, 2], [0, 3], [0, 7], [0, 8], [0, 9], [1, 4], [1, 6], [1, 8], [1, 9], [2, 4], [2, 5], [2, 11], [3, 1], [3, 3], [3, 5], [3, 8], [3, 12], [4, 7], [5, 2], [5, 4], [5, 10], [5, 11], [6, 0], [6, 3], [6, 4], [6, 6], [6, 7], [6, 8], [6, 9], [6, 10], [7, 1], [7, 6], [7, 9], [7, 10], [8, 2], [8, 6], [8, 7], [8, 8], [8, 9], [8, 10], [9, 0], [9, 2], [9, 3], [9, 5], [9, 6], [9, 10], [9, 12], [10, 0], [10, 2], [10, 3], [10, 6], [10, 8], [10, 11], [11, 1], [11, 5], [11, 6], [11, 12], [12, 0], [12, 2], [12, 3], [12, 4], [12, 5]], g2=[[11, 10], [7, 1], [10, 12], [0, 2], [5, 11], [3, 0], [6, 12], [4, 1], [11, 12], [10, 2], [4, 8], [11, 4], [8, 5], [5, 6], [5, 0], [11, 1], [1, 9], [2, 6], [5, 2], [10, 3], [12, 7], [0, 5], [11, 6], [6, 5], [12, 3], [6, 8], [8, 1], [1, 6], [11, 7], [2, 11], [9, 2], [0, 6], [1, 8], [6, 10], [3, 11], [6, 4], [3, 9], [10, 11], [7, 12], [8, 3], [0, 0], [7, 4], [7, 9], [2, 3], [5, 5], [12, 1], [0, 11], [7, 10], [12, 0], [8, 7], [12, 12], [5, 10], [4, 9], [10, 4], [1, 4], [11, 5], [3, 5], [0, 4], [10, 0], [2, 5], [5, 9], [6, 0], [5, 12]]):\n    \"\"\"\n    You are given two graphs which are permutations of one another and the goal is to find the permutation.\n    Each graph is specified by a list of edges where each edge is a pair of integer vertex numbers.\n    \"\"\"\n    return len(bi) == len(set(bi)) and {(i, j) for i, j in g1} == {(bi[i], bi[j]) for i, j in g2}",
    "sols": [],
    "module": "graphs",
    "notes": "The classic [Graph Isomorphism](https://en.wikipedia.org/wiki/Graph_isomorphism) problem.\nIt is unknown whether or not there exists a polynomial-time algorithm\nfor this problem, though an unpublished quasi-polynomial-time algorithm has been announced by Babai.\n\nThe classic version is a decision problem: given two graphs, determine whether or not they are isomorphic.\nHowever, it is polynomial-time equivalent to the one below through a standard reduction. In particular, if you\ncould solve the search problem below (finding the actual bijection), then you can decide isomorphism because the\nsearch solver would simply fail on non-isomorphic graphs. Conversely, if you could solve the decision problem,\nthen you can find a bijection as follows: if the decider determines that the graphs are isomorphic, for each node\nin the first graph, find a corresponding node in the second graph as follows. Add N self-edges from the node to\nitself where N is the maximum degree in the graph + 1, and do that for each candidate node in the second graph.\nFor each of these additions, test isomorphism. If the graphs are isomorphic then there must be a bijection that maps\nthe first node to the second. Repeat this for each node until you have found a bijection. (If self-loops are not\nallowed, one can do this by adding N additional nodes for each test.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "GraphIsomorphism_9",
    "sat": "def sat(bi: List[int], g1=[[0, 6], [0, 8], [1, 0], [1, 1], [1, 2], [1, 6], [1, 8], [2, 3], [2, 6], [2, 7], [3, 0], [3, 1], [3, 4], [3, 5], [3, 6], [3, 8], [4, 0], [4, 5], [4, 7], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 6], [6, 0], [6, 1], [6, 5], [6, 6], [6, 7], [7, 3], [7, 4], [7, 7], [8, 1], [8, 3], [8, 6]], g2=[[5, 7], [3, 0], [6, 4], [4, 1], [3, 4], [3, 1], [7, 7], [0, 4], [2, 6], [3, 8], [8, 1], [4, 7], [3, 2], [1, 8], [1, 6], [2, 3], [7, 3], [5, 2], [8, 4], [4, 4], [4, 2], [7, 5], [1, 0], [8, 3], [3, 5], [6, 7], [1, 1], [2, 5], [4, 0], [2, 1], [1, 4], [5, 0], [2, 0], [6, 3], [2, 4], [0, 8]]):\n    \"\"\"\n    You are given two graphs which are permutations of one another and the goal is to find the permutation.\n    Each graph is specified by a list of edges where each edge is a pair of integer vertex numbers.\n    \"\"\"\n    return len(bi) == len(set(bi)) and {(i, j) for i, j in g1} == {(bi[i], bi[j]) for i, j in g2}",
    "sols": [
      "def sol(g1=[[0, 6], [0, 8], [1, 0], [1, 1], [1, 2], [1, 6], [1, 8], [2, 3], [2, 6], [2, 7], [3, 0], [3, 1], [3, 4], [3, 5], [3, 6], [3, 8], [4, 0], [4, 5], [4, 7], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 6], [6, 0], [6, 1], [6, 5], [6, 6], [6, 7], [7, 3], [7, 4], [7, 7], [8, 1], [8, 3], [8, 6]], g2=[[5, 7], [3, 0], [6, 4], [4, 1], [3, 4], [3, 1], [7, 7], [0, 4], [2, 6], [3, 8], [8, 1], [4, 7], [3, 2], [1, 8], [1, 6], [2, 3], [7, 3], [5, 2], [8, 4], [4, 4], [4, 2], [7, 5], [1, 0], [8, 3], [3, 5], [6, 7], [1, 1], [2, 5], [4, 0], [2, 1], [1, 4], [5, 0], [2, 0], [6, 3], [2, 4], [0, 8]]):  # exponentially slow\n    from itertools import permutations\n    n = max(i for g in [g1, g2] for e in g for i in e) + 1\n    g1_set = {(i, j) for i, j in g1}\n    for pi in permutations(range(n)):\n        if all((pi[i], pi[j]) in g1_set for i, j in g2):\n            return list(pi)\n    assert False, f\"Graphs are not isomorphic {g1}, {g2}\""
    ],
    "module": "graphs",
    "notes": "The classic [Graph Isomorphism](https://en.wikipedia.org/wiki/Graph_isomorphism) problem.\nIt is unknown whether or not there exists a polynomial-time algorithm\nfor this problem, though an unpublished quasi-polynomial-time algorithm has been announced by Babai.\n\nThe classic version is a decision problem: given two graphs, determine whether or not they are isomorphic.\nHowever, it is polynomial-time equivalent to the one below through a standard reduction. In particular, if you\ncould solve the search problem below (finding the actual bijection), then you can decide isomorphism because the\nsearch solver would simply fail on non-isomorphic graphs. Conversely, if you could solve the decision problem,\nthen you can find a bijection as follows: if the decider determines that the graphs are isomorphic, for each node\nin the first graph, find a corresponding node in the second graph as follows. Add N self-edges from the node to\nitself where N is the maximum degree in the graph + 1, and do that for each candidate node in the second graph.\nFor each of these additions, test isomorphism. If the graphs are isomorphic then there must be a bijection that maps\nthe first node to the second. Repeat this for each node until you have found a bijection. (If self-loops are not\nallowed, one can do this by adding N additional nodes for each test.",
    "taint_date": "2021-4-26",
    "weight": 0.008333333333333333
  },
  {
    "name": "ShortIntegerPath_0",
    "sat": "def sat(li: List[int]):\n    \"\"\"\n    Find a list of nine integers, starting with 0 and ending with 128, such that each integer either differs from\n    the previous one by one or is thrice the previous one.\n    \"\"\"\n    return all(j in {i - 1, i + 1, 3 * i} for i, j in zip([0] + li, li + [128])) and len(li) == 9",
    "sols": [
      "def sol():\n    return [1, 3, 4, 12, 13, 14, 42, 126, 127]"
    ],
    "module": "graphs",
    "notes": "This is a more interesting version of Study_20 with an additional length constraint. One can think of the graph\ndefined by the integer pairs.",
    "taint_date": "2021-4-26",
    "weight": 0.08333333333333333
  },
  {
    "name": "BiPermutations_0",
    "sat": "def sat(perms: List[List[int]], prices0=[7, 7, 9, 5, 3, 7, 1, 2], prices1=[5, 5, 5, 4, 2, 5, 1, 1], heights0=[2, 4, 9, 3, 8, 5, 5, 4], heights1=[1, 3, 8, 1, 5, 4, 4, 2]):\n    \"\"\"\n    There are two rows of objects. Given the length-n integer arrays of prices and heights of objects in each\n    row, find a permutation of both rows so that the permuted prices are non-decreasing in each row and\n    so that the first row is taller than the second row.\n    \"\"\"\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[7, 7, 9, 5, 3, 7, 1, 2], prices1=[5, 5, 5, 4, 2, 5, 1, 1], heights0=[2, 4, 9, 3, 8, 5, 5, 4], heights1=[1, 3, 8, 1, 5, 4, 4, 2]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem A: Azulejos](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 2,287 characters.",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "BiPermutations_1",
    "sat": "def sat(perms: List[List[int]], prices0=[0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0], heights0=[12, 5, 8, 13, 7], heights1=[2, 10, 4, 5, 9]):\n    \"\"\"\n    There are two rows of objects. Given the length-n integer arrays of prices and heights of objects in each\n    row, find a permutation of both rows so that the permuted prices are non-decreasing in each row and\n    so that the first row is taller than the second row.\n    \"\"\"\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0], heights0=[12, 5, 8, 13, 7], heights1=[2, 10, 4, 5, 9]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem A: Azulejos](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 2,287 characters.",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "BiPermutations_2",
    "sat": "def sat(perms: List[List[int]], prices0=[0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0], heights0=[9, 10, 12, 14, 14], heights1=[6, 5, 7, 10, 10]):\n    \"\"\"\n    There are two rows of objects. Given the length-n integer arrays of prices and heights of objects in each\n    row, find a permutation of both rows so that the permuted prices are non-decreasing in each row and\n    so that the first row is taller than the second row.\n    \"\"\"\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0], heights0=[9, 10, 12, 14, 14], heights1=[6, 5, 7, 10, 10]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem A: Azulejos](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 2,287 characters.",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "BiPermutations_3",
    "sat": "def sat(perms: List[List[int]], prices0=[2, 5, 4, 2, 7, 3, 4, 5, 2, 3, 2, 1, 2, 7, 6, 1, 5, 2, 4, 6, 3, 7, 1, 2, 3, 5, 2, 2, 2, 2, 6, 5, 0, 2, 2, 0, 7, 3, 6, 4, 7, 0, 1, 5, 6, 1, 7, 6, 5, 4, 7, 7, 2, 5, 4, 5, 1, 4, 3, 3, 0, 2, 4, 0, 3, 0, 6, 4, 2, 6, 7, 5, 0, 5, 6, 2], prices1=[4, 5, 2, 5, 7, 0, 6, 6, 4, 5, 5, 6, 6, 2, 5, 4, 6, 0, 3, 3, 4, 5, 7, 7, 3, 3, 2, 5, 1, 7, 5, 6, 6, 3, 1, 4, 5, 0, 6, 7, 3, 7, 1, 5, 7, 4, 1, 0, 3, 6, 0, 1, 3, 3, 3, 5, 0, 4, 7, 3, 3, 2, 2, 3, 7, 7, 1, 1, 2, 2, 2, 5, 4, 7, 3, 0], heights0=[5, 4, 8, 9, 9, 11, 13, 6, 6, 6, 9, 13, 15, 8, 7, 14, 6, 5, 12, 7, 14, 9, 6, 13, 3, 10, 11, 8, 4, 14, 10, 10, 4, 8, 3, 7, 11, 8, 5, 5, 10, 11, 9, 9, 7, 11, 3, 13, 15, 5, 3, 7, 8, 10, 8, 13, 12, 3, 4, 13, 7, 7, 5, 5, 6, 10, 8, 11, 7, 5, 10, 15, 4, 15, 6, 8], heights1=[5, 9, 4, 4, 8, 7, 10, 1, 2, 5, 5, 3, 4, 1, 10, 1, 5, 3, 3, 5, 4, 8, 3, 9, 10, 5, 6, 9, 10, 2, 10, 4, 6, 10, 4, 3, 2, 4, 9, 2, 7, 8, 7, 7, 9, 10, 9, 1, 7, 6, 2, 4, 2, 10, 6, 6, 10, 2, 5, 3, 10, 5, 10, 4, 6, 2, 8, 5, 3, 10, 1, 8, 6, 2, 2, 2]):\n    \"\"\"\n    There are two rows of objects. Given the length-n integer arrays of prices and heights of objects in each\n    row, find a permutation of both rows so that the permuted prices are non-decreasing in each row and\n    so that the first row is taller than the second row.\n    \"\"\"\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[2, 5, 4, 2, 7, 3, 4, 5, 2, 3, 2, 1, 2, 7, 6, 1, 5, 2, 4, 6, 3, 7, 1, 2, 3, 5, 2, 2, 2, 2, 6, 5, 0, 2, 2, 0, 7, 3, 6, 4, 7, 0, 1, 5, 6, 1, 7, 6, 5, 4, 7, 7, 2, 5, 4, 5, 1, 4, 3, 3, 0, 2, 4, 0, 3, 0, 6, 4, 2, 6, 7, 5, 0, 5, 6, 2], prices1=[4, 5, 2, 5, 7, 0, 6, 6, 4, 5, 5, 6, 6, 2, 5, 4, 6, 0, 3, 3, 4, 5, 7, 7, 3, 3, 2, 5, 1, 7, 5, 6, 6, 3, 1, 4, 5, 0, 6, 7, 3, 7, 1, 5, 7, 4, 1, 0, 3, 6, 0, 1, 3, 3, 3, 5, 0, 4, 7, 3, 3, 2, 2, 3, 7, 7, 1, 1, 2, 2, 2, 5, 4, 7, 3, 0], heights0=[5, 4, 8, 9, 9, 11, 13, 6, 6, 6, 9, 13, 15, 8, 7, 14, 6, 5, 12, 7, 14, 9, 6, 13, 3, 10, 11, 8, 4, 14, 10, 10, 4, 8, 3, 7, 11, 8, 5, 5, 10, 11, 9, 9, 7, 11, 3, 13, 15, 5, 3, 7, 8, 10, 8, 13, 12, 3, 4, 13, 7, 7, 5, 5, 6, 10, 8, 11, 7, 5, 10, 15, 4, 15, 6, 8], heights1=[5, 9, 4, 4, 8, 7, 10, 1, 2, 5, 5, 3, 4, 1, 10, 1, 5, 3, 3, 5, 4, 8, 3, 9, 10, 5, 6, 9, 10, 2, 10, 4, 6, 10, 4, 3, 2, 4, 9, 2, 7, 8, 7, 7, 9, 10, 9, 1, 7, 6, 2, 4, 2, 10, 6, 6, 10, 2, 5, 3, 10, 5, 10, 4, 6, 2, 8, 5, 3, 10, 1, 8, 6, 2, 2, 2]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem A: Azulejos](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 2,287 characters.",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "BiPermutations_4",
    "sat": "def sat(perms: List[List[int]], prices0=[3, 6, 4, 0, 5, 6, 4, 3, 1, 7, 0, 4, 7, 5, 6, 1, 3, 3, 7, 4, 2, 5, 1, 7, 6, 7, 6, 3, 0, 2, 1, 7, 4, 3, 2, 7, 1, 3, 7, 6, 7, 0, 2, 0, 1, 1, 1, 3, 1, 1, 0, 0, 5, 2, 4, 6, 1, 5, 2, 5, 1, 5, 5, 3, 1, 7, 7, 1, 3, 6, 0, 6, 0, 0, 3, 6, 1], prices1=[1, 4, 0, 6, 3, 1, 4, 6, 3, 0, 4, 7, 2, 6, 4, 0, 2, 4, 6, 7, 7, 0, 4, 2, 6, 1, 6, 3, 0, 5, 3, 6, 0, 1, 4, 1, 0, 5, 1, 3, 4, 0, 0, 2, 5, 5, 5, 1, 2, 7, 7, 0, 7, 0, 7, 7, 5, 0, 1, 1, 0, 5, 7, 1, 0, 0, 2, 4, 1, 2, 6, 2, 3, 4, 0, 7, 6], heights0=[12, 13, 8, 14, 12, 10, 15, 4, 13, 8, 7, 4, 8, 4, 7, 13, 7, 11, 6, 7, 11, 14, 11, 13, 10, 10, 5, 9, 12, 5, 11, 12, 12, 6, 4, 11, 5, 3, 4, 6, 3, 4, 3, 15, 4, 13, 8, 10, 10, 10, 14, 6, 10, 7, 6, 4, 6, 12, 8, 11, 7, 9, 7, 12, 6, 8, 6, 7, 8, 5, 13, 6, 10, 13, 5, 7, 10], heights1=[5, 8, 9, 3, 4, 7, 2, 7, 10, 10, 10, 3, 3, 8, 3, 9, 4, 5, 8, 9, 1, 4, 2, 2, 5, 3, 4, 4, 2, 6, 8, 2, 6, 9, 9, 6, 10, 7, 2, 7, 1, 10, 8, 6, 2, 10, 6, 8, 4, 3, 3, 9, 5, 9, 3, 7, 5, 10, 3, 1, 8, 10, 5, 6, 3, 8, 1, 7, 3, 1, 10, 4, 8, 1, 2, 5, 2]):\n    \"\"\"\n    There are two rows of objects. Given the length-n integer arrays of prices and heights of objects in each\n    row, find a permutation of both rows so that the permuted prices are non-decreasing in each row and\n    so that the first row is taller than the second row.\n    \"\"\"\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[3, 6, 4, 0, 5, 6, 4, 3, 1, 7, 0, 4, 7, 5, 6, 1, 3, 3, 7, 4, 2, 5, 1, 7, 6, 7, 6, 3, 0, 2, 1, 7, 4, 3, 2, 7, 1, 3, 7, 6, 7, 0, 2, 0, 1, 1, 1, 3, 1, 1, 0, 0, 5, 2, 4, 6, 1, 5, 2, 5, 1, 5, 5, 3, 1, 7, 7, 1, 3, 6, 0, 6, 0, 0, 3, 6, 1], prices1=[1, 4, 0, 6, 3, 1, 4, 6, 3, 0, 4, 7, 2, 6, 4, 0, 2, 4, 6, 7, 7, 0, 4, 2, 6, 1, 6, 3, 0, 5, 3, 6, 0, 1, 4, 1, 0, 5, 1, 3, 4, 0, 0, 2, 5, 5, 5, 1, 2, 7, 7, 0, 7, 0, 7, 7, 5, 0, 1, 1, 0, 5, 7, 1, 0, 0, 2, 4, 1, 2, 6, 2, 3, 4, 0, 7, 6], heights0=[12, 13, 8, 14, 12, 10, 15, 4, 13, 8, 7, 4, 8, 4, 7, 13, 7, 11, 6, 7, 11, 14, 11, 13, 10, 10, 5, 9, 12, 5, 11, 12, 12, 6, 4, 11, 5, 3, 4, 6, 3, 4, 3, 15, 4, 13, 8, 10, 10, 10, 14, 6, 10, 7, 6, 4, 6, 12, 8, 11, 7, 9, 7, 12, 6, 8, 6, 7, 8, 5, 13, 6, 10, 13, 5, 7, 10], heights1=[5, 8, 9, 3, 4, 7, 2, 7, 10, 10, 10, 3, 3, 8, 3, 9, 4, 5, 8, 9, 1, 4, 2, 2, 5, 3, 4, 4, 2, 6, 8, 2, 6, 9, 9, 6, 10, 7, 2, 7, 1, 10, 8, 6, 2, 10, 6, 8, 4, 3, 3, 9, 5, 9, 3, 7, 5, 10, 3, 1, 8, 10, 5, 6, 3, 8, 1, 7, 3, 1, 10, 4, 8, 1, 2, 5, 2]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem A: Azulejos](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 2,287 characters.",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "BiPermutations_5",
    "sat": "def sat(perms: List[List[int]], prices0=[1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], prices1=[1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0], heights0=[12, 4, 10, 5, 12, 2, 11, 6, 3, 8, 6, 7, 14, 11, 12, 9, 11, 13], heights1=[9, 8, 2, 2, 3, 2, 8, 8, 6, 1, 2, 4, 7, 10, 7, 9, 9, 8]):\n    \"\"\"\n    There are two rows of objects. Given the length-n integer arrays of prices and heights of objects in each\n    row, find a permutation of both rows so that the permuted prices are non-decreasing in each row and\n    so that the first row is taller than the second row.\n    \"\"\"\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], prices1=[1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0], heights0=[12, 4, 10, 5, 12, 2, 11, 6, 3, 8, 6, 7, 14, 11, 12, 9, 11, 13], heights1=[9, 8, 2, 2, 3, 2, 8, 8, 6, 1, 2, 4, 7, 10, 7, 9, 9, 8]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem A: Azulejos](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 2,287 characters.",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "BiPermutations_6",
    "sat": "def sat(perms: List[List[int]], prices0=[0, 0, 0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0, 0, 0], heights0=[10, 7, 6, 8, 9, 10, 6, 10, 4], heights1=[6, 5, 2, 1, 7, 5, 6, 4, 1]):\n    \"\"\"\n    There are two rows of objects. Given the length-n integer arrays of prices and heights of objects in each\n    row, find a permutation of both rows so that the permuted prices are non-decreasing in each row and\n    so that the first row is taller than the second row.\n    \"\"\"\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0, 0, 0], heights0=[10, 7, 6, 8, 9, 10, 6, 10, 4], heights1=[6, 5, 2, 1, 7, 5, 6, 4, 1]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem A: Azulejos](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 2,287 characters.",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "BiPermutations_7",
    "sat": "def sat(perms: List[List[int]], prices0=[1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], prices1=[0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], heights0=[13, 6, 5, 8, 11, 11, 10, 10, 9, 5, 4, 5, 5, 3, 12, 8, 4], heights1=[4, 3, 2, 7, 8, 5, 5, 2, 2, 3, 5, 10, 4, 3, 2, 10, 6]):\n    \"\"\"\n    There are two rows of objects. Given the length-n integer arrays of prices and heights of objects in each\n    row, find a permutation of both rows so that the permuted prices are non-decreasing in each row and\n    so that the first row is taller than the second row.\n    \"\"\"\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], prices1=[0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], heights0=[13, 6, 5, 8, 11, 11, 10, 10, 9, 5, 4, 5, 5, 3, 12, 8, 4], heights1=[4, 3, 2, 7, 8, 5, 5, 2, 2, 3, 5, 10, 4, 3, 2, 10, 6]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem A: Azulejos](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 2,287 characters.",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "BiPermutations_8",
    "sat": "def sat(perms: List[List[int]], prices0=[1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], prices1=[1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0], heights0=[12, 12, 5, 11, 13, 8, 6, 8, 7, 3, 13, 9, 6, 8, 12, 10, 8], heights1=[8, 3, 7, 8, 5, 9, 5, 3, 5, 4, 6, 6, 10, 9, 9, 1, 5]):\n    \"\"\"\n    There are two rows of objects. Given the length-n integer arrays of prices and heights of objects in each\n    row, find a permutation of both rows so that the permuted prices are non-decreasing in each row and\n    so that the first row is taller than the second row.\n    \"\"\"\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], prices1=[1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0], heights0=[12, 12, 5, 11, 13, 8, 6, 8, 7, 3, 13, 9, 6, 8, 12, 10, 8], heights1=[8, 3, 7, 8, 5, 9, 5, 3, 5, 4, 6, 6, 10, 9, 9, 1, 5]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem A: Azulejos](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 2,287 characters.",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "BiPermutations_9",
    "sat": "def sat(perms: List[List[int]], prices0=[0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1], prices1=[0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0], heights0=[9, 8, 4, 6, 13, 3, 6, 6, 6, 8, 10, 9, 10, 13, 7, 8], heights1=[5, 10, 5, 3, 1, 2, 5, 3, 2, 1, 5, 3, 6, 3, 8, 5]):\n    \"\"\"\n    There are two rows of objects. Given the length-n integer arrays of prices and heights of objects in each\n    row, find a permutation of both rows so that the permuted prices are non-decreasing in each row and\n    so that the first row is taller than the second row.\n    \"\"\"\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1], prices1=[0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0], heights0=[9, 8, 4, 6, 13, 3, 6, 6, 6, 8, 10, 9, 10, 13, 7, 8], heights1=[5, 10, 5, 3, 1, 2, 5, 3, 2, 1, 5, 3, 6, 3, 8, 5]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem A: Azulejos](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 2,287 characters.",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "OptimalBridges_0",
    "sat": "def sat(indices: List[int], H=60, alpha=18, beta=2, xs=[0, 10, 20, 30, 50, 80, 100, 120, 160, 190, 200], ys=[0, 30, 10, 30, 50, 40, 10, 20, 20, 55, 10], thresh=26020):\n    \"\"\"\n    You are to choose locations for bridge bases from among a given set of mountain peaks located at\n    `xs, ys`, where `xs` and `ys` are lists of n integers of the same length. Your answer should be a sorted\n    list of indices starting at 0 and ending at n-1. The goal is to minimize building costs such that the bridges\n    are feasible. The bridges are all semicircles placed on top of the pillars. The feasibility constraints are that:\n    * The bridges may not extend above a given height `H`. Mathematically, if the distance between the two xs\n    of adjacent pillars is d, then the semicircle will have radius `d/2` and therefore the heights of the\n    selected mountain peaks must both be at most `H - d/2`.\n    *  The bridges must clear all the mountain peaks, which means that the semicircle must lie above the tops of the\n    peak. See the code for how this is determined mathematically.\n    * The total cost of all the bridges must be at most `thresh`, where the cost is parameter alpha * (the sum of\n    all pillar heights) + beta * (the sum of the squared diameters)\n    \"\"\"\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=60, alpha=18, beta=2, xs=[0, 10, 20, 30, 50, 80, 100, 120, 160, 190, 200], ys=[0, 30, 10, 30, 50, 40, 10, 20, 20, 55, 10], thresh=26020):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem B: Bridges](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 3,003 characters.",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "OptimalBridges_1",
    "sat": "def sat(indices: List[int], H=100000, alpha=17, beta=6, xs=[0, 3069, 5319, 5373, 5466, 5479, 5519, 6629, 9652, 9919, 11009, 11175, 11348, 12167, 13016, 13109, 13216, 13250, 13253, 14265, 15018, 16389, 20993, 22240, 23259, 23276, 23410, 25158, 27034, 30140, 31404, 31521, 31619, 31683, 31692, 31705, 34207, 55515, 64781, 71416, 76305, 77516, 81021, 85257, 85806, 86243, 91008, 97806, 100000], ys=[81112, 12485, 94379, 88854, 987, 76485, 42941, 64723, 81743, 86552, 93967, 41028, 583, 23986, 45831, 34204, 5856, 40242, 63968, 6777, 16745, 36621, 70993, 45840, 41901, 19003, 56321, 76109, 36482, 43746, 94401, 24752, 56908, 76875, 59498, 38391, 6693, 23419, 73740, 47413, 27170, 34095, 80071, 53942, 76129, 80538, 44026, 72982, 75701], thresh=4786941056):\n    \"\"\"\n    You are to choose locations for bridge bases from among a given set of mountain peaks located at\n    `xs, ys`, where `xs` and `ys` are lists of n integers of the same length. Your answer should be a sorted\n    list of indices starting at 0 and ending at n-1. The goal is to minimize building costs such that the bridges\n    are feasible. The bridges are all semicircles placed on top of the pillars. The feasibility constraints are that:\n    * The bridges may not extend above a given height `H`. Mathematically, if the distance between the two xs\n    of adjacent pillars is d, then the semicircle will have radius `d/2` and therefore the heights of the\n    selected mountain peaks must both be at most `H - d/2`.\n    *  The bridges must clear all the mountain peaks, which means that the semicircle must lie above the tops of the\n    peak. See the code for how this is determined mathematically.\n    * The total cost of all the bridges must be at most `thresh`, where the cost is parameter alpha * (the sum of\n    all pillar heights) + beta * (the sum of the squared diameters)\n    \"\"\"\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=17, beta=6, xs=[0, 3069, 5319, 5373, 5466, 5479, 5519, 6629, 9652, 9919, 11009, 11175, 11348, 12167, 13016, 13109, 13216, 13250, 13253, 14265, 15018, 16389, 20993, 22240, 23259, 23276, 23410, 25158, 27034, 30140, 31404, 31521, 31619, 31683, 31692, 31705, 34207, 55515, 64781, 71416, 76305, 77516, 81021, 85257, 85806, 86243, 91008, 97806, 100000], ys=[81112, 12485, 94379, 88854, 987, 76485, 42941, 64723, 81743, 86552, 93967, 41028, 583, 23986, 45831, 34204, 5856, 40242, 63968, 6777, 16745, 36621, 70993, 45840, 41901, 19003, 56321, 76109, 36482, 43746, 94401, 24752, 56908, 76875, 59498, 38391, 6693, 23419, 73740, 47413, 27170, 34095, 80071, 53942, 76129, 80538, 44026, 72982, 75701], thresh=4786941056):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem B: Bridges](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 3,003 characters.",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "OptimalBridges_2",
    "sat": "def sat(indices: List[int], H=100000, alpha=21, beta=40, xs=[0, 8094, 57578, 62776, 83547, 87398, 95828, 100000], ys=[14832, 27072, 77311, 50782, 82688, 11061, 50767, 3696], thresh=143624404582):\n    \"\"\"\n    You are to choose locations for bridge bases from among a given set of mountain peaks located at\n    `xs, ys`, where `xs` and `ys` are lists of n integers of the same length. Your answer should be a sorted\n    list of indices starting at 0 and ending at n-1. The goal is to minimize building costs such that the bridges\n    are feasible. The bridges are all semicircles placed on top of the pillars. The feasibility constraints are that:\n    * The bridges may not extend above a given height `H`. Mathematically, if the distance between the two xs\n    of adjacent pillars is d, then the semicircle will have radius `d/2` and therefore the heights of the\n    selected mountain peaks must both be at most `H - d/2`.\n    *  The bridges must clear all the mountain peaks, which means that the semicircle must lie above the tops of the\n    peak. See the code for how this is determined mathematically.\n    * The total cost of all the bridges must be at most `thresh`, where the cost is parameter alpha * (the sum of\n    all pillar heights) + beta * (the sum of the squared diameters)\n    \"\"\"\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=21, beta=40, xs=[0, 8094, 57578, 62776, 83547, 87398, 95828, 100000], ys=[14832, 27072, 77311, 50782, 82688, 11061, 50767, 3696], thresh=143624404582):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem B: Bridges](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 3,003 characters.",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "OptimalBridges_3",
    "sat": "def sat(indices: List[int], H=100000, alpha=975, beta=546, xs=[0, 102, 174, 281, 458, 554, 583, 590, 646, 1592, 1795, 1805, 1835, 1839, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1843, 2357, 2683, 3152, 3159, 3167, 3170, 3170, 3171, 3171, 3172, 3172, 3172, 3172, 3172, 3173, 4025, 4274, 4282, 4465, 4520, 4529, 4666, 4676, 4901, 4905, 5003, 5295, 5510, 5553, 5585, 5585, 5638, 5973, 6136, 6317, 6329, 6374, 6400, 6405, 6407, 6407, 6409, 6409, 6409, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6411, 6456, 6462, 6462, 6469, 6482, 6486, 6881, 6919, 7240, 7510, 7599, 7995, 8173, 8249, 8284, 8296, 8298, 8298, 8299, 8301, 8427, 8701, 8751, 8945, 9141, 9166, 9208, 9308, 9321, 9327, 9332, 9332, 9332, 9332, 9332, 9332, 9332, 9332, 9332, 9333, 10630, 11062, 11173, 11286, 11294, 11319, 11322, 11367, 11372, 11376, 11398, 11399, 11403, 11409, 11451, 11459, 11519, 11660, 11687, 11691, 11694, 11694, 11697, 12232, 12313, 12314, 12316, 12321, 12322, 12322, 12322, 12323, 13101, 13207, 13274, 13445, 13512, 13687, 13911, 13987, 14251, 14255, 14306, 14570, 14594, 14606, 14606, 14608, 14998, 15232, 15237, 15633, 15795, 15831, 15991, 16176, 16179, 16189, 16228, 16339, 16450, 16540, 16777, 16851, 16889, 17291, 17694, 18333, 18356, 19390, 19449, 19454, 19750, 20562, 22013, 22332, 22374, 22591, 23234, 23276, 23281, 23296, 23351, 23397, 23762, 23844, 23859, 23866, 23894, 23943, 24311, 24379, 24958, 25140, 25160, 25178, 25211, 25219, 25235, 25378, 25929, 26078, 26181, 26474, 26804, 26821, 26838, 26843, 26858, 26894, 26894, 26894, 26895, 27181, 27302, 27329, 27365, 27374, 27380, 27381, 27382, 27382, 27382, 27382, 27382, 27382, 27382, 27382, 27382, 27382, 27383, 27386, 27418, 27450, 27463, 27525, 27529, 27552, 27559, 27562, 27562, 27563, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27565, 27721, 27801, 27818, 27882, 28083, 28148, 28673, 29079, 29102, 29155, 29158, 29162, 29193, 29256, 29576, 29991, 29992, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29997, 30025, 30083, 30088, 30146, 30173, 30182, 30305, 30408, 30596, 30905, 31000, 31405, 31558, 31588, 31663, 31664, 31664, 31667, 31670, 31674, 31676, 31703, 32815, 32821, 32949, 33977, 34036, 34403, 34413, 34464, 34505, 34509, 34511, 34772, 34972, 35021, 35068, 35259, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35273, 35311, 35343, 35611, 35950, 36192, 36400, 36410, 36622, 36820, 36883, 36959, 36960, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36964, 37010, 37035, 37311, 37660, 37733, 37934, 38287, 38539, 39425, 39441, 39473, 40033, 40124, 40319, 40609, 40643, 40673, 40727, 40741, 40742, 40744, 40750, 41021, 41080, 41311, 41319, 41321, 41335, 41344, 41344, 41345, 41345, 41345, 41345, 41345, 41346, 41532, 41554, 42011, 42164, 42187, 42276, 42566, 42675, 43393, 43473, 43480, 43504, 43504, 43504, 43504, 43504, 43505, 44026, 44718, 45006, 45128, 45193, 45581, 45643, 45679, 45684, 45687, 45858, 45958, 46022, 46126, 46367, 46712, 46849, 47743, 47968, 48262, 49272, 49376, 50058, 50436, 51804, 51966, 52122, 52374, 53401, 53638, 54722, 55797, 55906, 56812, 56839, 57005, 58384, 58720, 58959, 59074, 59209, 59512, 59785, 60798, 61136, 61198, 61505, 62052, 62540, 62555, 62783, 63241, 63829, 64155, 64422, 64520, 65271, 65297, 67452, 67628, 68258, 68379, 69233, 69496, 69613, 69774, 70090, 70092, 70759, 70770, 70809, 71196, 71265, 71529, 72250, 72476, 72523, 72556, 72829, 73209, 73477, 73739, 73843, 74249, 74728, 74988, 75425, 75988, 76032, 76096, 76152, 76222, 76751, 77227, 77631, 77995, 78061, 78169, 78400, 78784, 79499, 80385, 80551, 80627, 80660, 81059, 81143, 81405, 81665, 82904, 83595, 83957, 83996, 84043, 84739, 85031, 85987, 86319, 86864, 86933, 86947, 87127, 87520, 87543, 87848, 88057, 88437, 89195, 89401, 90469, 90756, 90761, 91175, 91975, 92907, 92987, 94337, 94470, 95290, 96267, 96378, 96635, 97113, 97608, 97663, 97721, 98148, 98536, 98629, 98960, 99036, 99763, 99793, 100000], ys=[2773, 47376, 17008, 24785, 21921, 60359, 33137, 72146, 76002, 49654, 25696, 25832, 72474, 2917, 18229, 2385, 66151, 51868, 4760, 69187, 67221, 14320, 24425, 88890, 24553, 78751, 70869, 11279, 12625, 84959, 28885, 87499, 61816, 41222, 81997, 1265, 63632, 12863, 54939, 56081, 35629, 37122, 49133, 24893, 41731, 9182, 34407, 90952, 42360, 43861, 99296, 80331, 78826, 19484, 90699, 30578, 71697, 10304, 61318, 89870, 38599, 71160, 22805, 17850, 60106, 76742, 14571, 74280, 88847, 53537, 84726, 7279, 55376, 47707, 78111, 14855, 20855, 89936, 20706, 98672, 5385, 76357, 90172, 48891, 6243, 82298, 64602, 99637, 83220, 87261, 26190, 39457, 12610, 44567, 54545, 71246, 96608, 5086, 65811, 15907, 21012, 17278, 1139, 54815, 52416, 19440, 44857, 16066, 22379, 73573, 36087, 54255, 60304, 30497, 1202, 95520, 48378, 68296, 14032, 50456, 60555, 80390, 70975, 17531, 3761, 46399, 48927, 96320, 79008, 25360, 67058, 26409, 29891, 324, 67141, 24534, 69987, 11711, 99837, 82260, 8818, 67647, 66046, 76727, 25049, 48694, 96244, 42767, 13120, 53729, 90754, 47498, 40257, 7844, 79665, 35900, 33567, 80332, 68427, 29914, 91621, 38959, 35796, 7435, 65460, 434, 2785, 4710, 80793, 20827, 22155, 90320, 5066, 24178, 18875, 51294, 5222, 95816, 14268, 68478, 96761, 66479, 67335, 51513, 78673, 73143, 11679, 85300, 88785, 1004, 18064, 91085, 18999, 25640, 45379, 74924, 94706, 46916, 32682, 31715, 3086, 49466, 85098, 49913, 44647, 82331, 27219, 13875, 58769, 3667, 10298, 44795, 62204, 21497, 58731, 12965, 62569, 72238, 49525, 22899, 84200, 3845, 98178, 924, 35984, 32417, 22686, 22620, 47458, 87867, 29566, 77085, 10960, 14876, 89730, 21641, 13636, 79167, 53472, 30103, 56335, 39274, 74071, 68958, 66408, 47354, 84728, 28113, 99860, 49955, 79844, 1186, 85981, 39037, 60464, 80363, 89186, 92541, 16343, 48363, 7581, 73306, 68325, 65829, 84163, 74355, 53786, 58715, 98906, 39439, 27860, 76391, 76589, 39834, 27137, 81688, 64132, 49120, 56144, 86941, 95518, 72009, 82728, 96067, 97712, 79469, 44330, 67454, 39941, 97408, 58132, 5066, 93590, 77162, 72882, 39621, 31441, 23172, 65710, 88436, 34469, 86816, 9665, 5643, 68076, 70549, 80805, 94994, 91769, 84542, 62168, 74918, 61406, 45287, 5793, 54563, 3652, 92584, 61367, 28505, 30248, 20120, 86422, 81094, 83631, 58464, 55958, 40896, 81384, 55062, 40915, 58556, 32091, 34368, 54084, 77250, 25828, 15620, 90399, 20250, 73405, 26695, 2032, 83486, 95048, 94554, 30946, 28573, 74157, 43422, 85194, 47436, 36847, 40337, 44865, 44811, 69652, 13169, 41240, 48298, 72630, 51768, 49849, 81558, 51868, 75819, 14511, 36733, 35093, 77864, 36881, 97122, 60008, 48465, 10154, 94832, 12514, 47840, 15591, 65517, 68261, 63597, 80341, 6530, 76786, 97631, 2526, 47318, 83685, 23732, 20477, 36378, 4066, 79691, 93070, 83021, 37168, 52019, 85092, 72854, 20879, 55104, 61225, 87611, 84521, 9011, 27496, 39666, 61677, 49131, 80714, 29320, 98393, 71579, 39547, 34736, 99974, 53333, 26106, 50745, 92975, 84628, 24607, 5133, 38793, 24284, 43324, 50981, 51005, 22088, 10404, 59675, 84882, 52975, 94861, 17852, 74017, 42533, 53763, 1986, 59478, 96769, 77976, 58875, 25744, 68724, 10130, 52144, 73428, 10610, 97509, 64410, 37812, 59809, 8455, 65712, 89789, 87542, 22274, 94253, 59627, 42450, 26524, 12018, 35043, 27433, 94055, 79108, 64297, 39011, 68974, 69586, 87982, 71372, 62430, 43056, 15425, 80083, 68963, 38661, 45853, 44335, 71876, 28982, 2264, 61889, 6454, 58072, 242, 93781, 71755, 66290, 90497, 54071, 55444, 64765, 4058, 79429, 41630, 15024, 64603, 98934, 48326, 56618, 55522, 37470, 57495, 31975, 70970, 31709, 31945, 64378, 12831, 51921, 76994, 31476, 72360, 63265, 35422, 88813, 58864, 74401, 91076, 37836, 55027, 95549, 15618, 34969, 60039, 61528, 3321, 94087, 37316, 81288, 81268, 71368, 95150, 57625, 34979, 60444, 45713, 87417, 17729, 30256, 98375, 2527, 95619, 71929, 47741, 59345, 50186, 73234, 74055, 49179, 14980, 21318, 96240, 9917, 75849, 56534, 85371, 63765, 23611, 47419, 34402, 48943, 26048, 69611, 29375, 29430, 6553, 97428, 97806, 80481, 26953, 42600, 59032, 65854, 66035, 48964, 22269, 52171, 14513, 65468, 66339, 25356, 52393, 7853, 24853, 78187, 83930, 67307, 45091, 41518, 52101, 76047, 40529, 36318, 3755, 62784, 77519, 22200, 70689, 33135, 81934, 72265, 2971, 91369, 53872, 45818, 57790, 21607, 66120, 26696, 92619, 47305, 65861, 60602, 66559, 2054, 57820, 19261, 6596, 56435, 12167, 29581, 17598, 1729, 77111, 26411, 66914, 14722, 39615, 27758, 96587, 69153, 65407, 65952, 52604, 28856, 58297, 94511, 71028, 75000, 60829, 12334, 21754, 20048, 5488, 11184, 80078, 64552, 23655, 75130, 79850, 40299, 92970, 89686, 72265, 49906, 84405, 90304, 74509, 97608, 32383, 77555, 89457, 96493, 25090, 79130, 5238, 44242, 54197, 87027, 77862, 44899, 39596, 50314, 66002, 34789, 83144, 62992, 9580, 89205, 9252, 54862, 53171, 64280, 13361, 17974, 66583, 40129, 4768, 25940, 96021, 80579, 7235, 63726, 87348, 21304, 86007, 94534, 57733, 43068, 31145, 34295, 12128, 97580, 83653, 28797, 69504, 29790, 73946, 59341, 48155, 1463, 80083, 32469, 71782, 20850, 96205, 42015, 73041, 55026, 56528, 41902, 12404, 62462, 81533, 16708, 7415, 68387, 80571, 32027, 35225, 10946, 94144, 4194, 43504, 49796, 50362, 95023, 52994, 95205, 36035, 71247, 41720, 6865, 17427, 36924, 61894, 38538, 67742, 44575, 14625, 79002, 90627, 8841, 84462, 7945, 24927, 82064, 46459, 52759, 31226, 5657, 79441, 64942, 70601, 84159, 3713, 5819, 33208, 82518, 79984, 11805, 65691, 27461, 79491, 31649, 44872, 55358, 59545, 43403, 25937, 57129, 95086, 33073, 66761, 54601, 58418, 97317, 55033, 52664, 98134, 37723, 11301, 82638, 57741, 7107, 3684, 12886, 23805, 51818, 91767, 69982, 49206, 31880, 98404, 66281, 65126, 58401, 7132, 42216, 82869, 16032, 26488, 60581, 34013, 63817, 6519, 89872, 31855, 22997, 69212, 73604, 76079, 64953, 98735, 44812, 4732, 94488, 84054, 42787, 46869, 45010, 20732, 5560, 56309, 77803, 42883, 66324, 49402, 64847, 31627, 94225, 77195, 95635, 68166, 31386, 63128, 31631, 70432, 46143, 52182, 8113, 84606, 51625, 55982, 29418, 64146, 69813, 44592, 79603, 46634, 32362, 62318, 18402, 68531, 53415, 19852, 28919, 62513, 79532, 49718, 33065, 56835, 64306, 60638, 70658, 79161, 27512, 68976, 89331, 29937, 12813, 57173, 27550, 84813, 60721, 11582, 44931, 88702, 7688, 52433, 55498, 95194, 39528, 6913, 6693, 94386, 842, 12398, 45874, 68922, 71749, 4672, 93255, 10276, 30051, 18146, 1369, 34708, 13026, 81431, 18801, 4379, 1238, 53213, 33648, 8064, 76802, 41132, 22338, 2817, 16671, 85926, 86066, 41124, 36200, 37286, 96525, 59693, 83181, 87393, 35298, 17208, 90473, 22239, 61861, 41594, 2519, 54614, 59722, 37429, 49717, 81394, 55456, 64709, 76277, 23690, 55080, 41336, 29750, 97329, 28604, 24728, 76992, 67044, 34563, 32395, 24170, 30848, 56474, 78881, 4772, 23177, 28993, 11230, 77390, 62191, 24747, 29986, 50371, 34979, 66772, 80075, 19549, 78848, 11352, 48373, 96733, 93428, 45892, 86184, 62894, 19948, 70176, 16630, 69200, 28933, 93458, 73504, 54975, 55489, 8787, 47519, 97887, 16335], thresh=44238370995):\n    \"\"\"\n    You are to choose locations for bridge bases from among a given set of mountain peaks located at\n    `xs, ys`, where `xs` and `ys` are lists of n integers of the same length. Your answer should be a sorted\n    list of indices starting at 0 and ending at n-1. The goal is to minimize building costs such that the bridges\n    are feasible. The bridges are all semicircles placed on top of the pillars. The feasibility constraints are that:\n    * The bridges may not extend above a given height `H`. Mathematically, if the distance between the two xs\n    of adjacent pillars is d, then the semicircle will have radius `d/2` and therefore the heights of the\n    selected mountain peaks must both be at most `H - d/2`.\n    *  The bridges must clear all the mountain peaks, which means that the semicircle must lie above the tops of the\n    peak. See the code for how this is determined mathematically.\n    * The total cost of all the bridges must be at most `thresh`, where the cost is parameter alpha * (the sum of\n    all pillar heights) + beta * (the sum of the squared diameters)\n    \"\"\"\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=975, beta=546, xs=[0, 102, 174, 281, 458, 554, 583, 590, 646, 1592, 1795, 1805, 1835, 1839, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1843, 2357, 2683, 3152, 3159, 3167, 3170, 3170, 3171, 3171, 3172, 3172, 3172, 3172, 3172, 3173, 4025, 4274, 4282, 4465, 4520, 4529, 4666, 4676, 4901, 4905, 5003, 5295, 5510, 5553, 5585, 5585, 5638, 5973, 6136, 6317, 6329, 6374, 6400, 6405, 6407, 6407, 6409, 6409, 6409, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6411, 6456, 6462, 6462, 6469, 6482, 6486, 6881, 6919, 7240, 7510, 7599, 7995, 8173, 8249, 8284, 8296, 8298, 8298, 8299, 8301, 8427, 8701, 8751, 8945, 9141, 9166, 9208, 9308, 9321, 9327, 9332, 9332, 9332, 9332, 9332, 9332, 9332, 9332, 9332, 9333, 10630, 11062, 11173, 11286, 11294, 11319, 11322, 11367, 11372, 11376, 11398, 11399, 11403, 11409, 11451, 11459, 11519, 11660, 11687, 11691, 11694, 11694, 11697, 12232, 12313, 12314, 12316, 12321, 12322, 12322, 12322, 12323, 13101, 13207, 13274, 13445, 13512, 13687, 13911, 13987, 14251, 14255, 14306, 14570, 14594, 14606, 14606, 14608, 14998, 15232, 15237, 15633, 15795, 15831, 15991, 16176, 16179, 16189, 16228, 16339, 16450, 16540, 16777, 16851, 16889, 17291, 17694, 18333, 18356, 19390, 19449, 19454, 19750, 20562, 22013, 22332, 22374, 22591, 23234, 23276, 23281, 23296, 23351, 23397, 23762, 23844, 23859, 23866, 23894, 23943, 24311, 24379, 24958, 25140, 25160, 25178, 25211, 25219, 25235, 25378, 25929, 26078, 26181, 26474, 26804, 26821, 26838, 26843, 26858, 26894, 26894, 26894, 26895, 27181, 27302, 27329, 27365, 27374, 27380, 27381, 27382, 27382, 27382, 27382, 27382, 27382, 27382, 27382, 27382, 27382, 27383, 27386, 27418, 27450, 27463, 27525, 27529, 27552, 27559, 27562, 27562, 27563, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27565, 27721, 27801, 27818, 27882, 28083, 28148, 28673, 29079, 29102, 29155, 29158, 29162, 29193, 29256, 29576, 29991, 29992, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29997, 30025, 30083, 30088, 30146, 30173, 30182, 30305, 30408, 30596, 30905, 31000, 31405, 31558, 31588, 31663, 31664, 31664, 31667, 31670, 31674, 31676, 31703, 32815, 32821, 32949, 33977, 34036, 34403, 34413, 34464, 34505, 34509, 34511, 34772, 34972, 35021, 35068, 35259, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35273, 35311, 35343, 35611, 35950, 36192, 36400, 36410, 36622, 36820, 36883, 36959, 36960, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36964, 37010, 37035, 37311, 37660, 37733, 37934, 38287, 38539, 39425, 39441, 39473, 40033, 40124, 40319, 40609, 40643, 40673, 40727, 40741, 40742, 40744, 40750, 41021, 41080, 41311, 41319, 41321, 41335, 41344, 41344, 41345, 41345, 41345, 41345, 41345, 41346, 41532, 41554, 42011, 42164, 42187, 42276, 42566, 42675, 43393, 43473, 43480, 43504, 43504, 43504, 43504, 43504, 43505, 44026, 44718, 45006, 45128, 45193, 45581, 45643, 45679, 45684, 45687, 45858, 45958, 46022, 46126, 46367, 46712, 46849, 47743, 47968, 48262, 49272, 49376, 50058, 50436, 51804, 51966, 52122, 52374, 53401, 53638, 54722, 55797, 55906, 56812, 56839, 57005, 58384, 58720, 58959, 59074, 59209, 59512, 59785, 60798, 61136, 61198, 61505, 62052, 62540, 62555, 62783, 63241, 63829, 64155, 64422, 64520, 65271, 65297, 67452, 67628, 68258, 68379, 69233, 69496, 69613, 69774, 70090, 70092, 70759, 70770, 70809, 71196, 71265, 71529, 72250, 72476, 72523, 72556, 72829, 73209, 73477, 73739, 73843, 74249, 74728, 74988, 75425, 75988, 76032, 76096, 76152, 76222, 76751, 77227, 77631, 77995, 78061, 78169, 78400, 78784, 79499, 80385, 80551, 80627, 80660, 81059, 81143, 81405, 81665, 82904, 83595, 83957, 83996, 84043, 84739, 85031, 85987, 86319, 86864, 86933, 86947, 87127, 87520, 87543, 87848, 88057, 88437, 89195, 89401, 90469, 90756, 90761, 91175, 91975, 92907, 92987, 94337, 94470, 95290, 96267, 96378, 96635, 97113, 97608, 97663, 97721, 98148, 98536, 98629, 98960, 99036, 99763, 99793, 100000], ys=[2773, 47376, 17008, 24785, 21921, 60359, 33137, 72146, 76002, 49654, 25696, 25832, 72474, 2917, 18229, 2385, 66151, 51868, 4760, 69187, 67221, 14320, 24425, 88890, 24553, 78751, 70869, 11279, 12625, 84959, 28885, 87499, 61816, 41222, 81997, 1265, 63632, 12863, 54939, 56081, 35629, 37122, 49133, 24893, 41731, 9182, 34407, 90952, 42360, 43861, 99296, 80331, 78826, 19484, 90699, 30578, 71697, 10304, 61318, 89870, 38599, 71160, 22805, 17850, 60106, 76742, 14571, 74280, 88847, 53537, 84726, 7279, 55376, 47707, 78111, 14855, 20855, 89936, 20706, 98672, 5385, 76357, 90172, 48891, 6243, 82298, 64602, 99637, 83220, 87261, 26190, 39457, 12610, 44567, 54545, 71246, 96608, 5086, 65811, 15907, 21012, 17278, 1139, 54815, 52416, 19440, 44857, 16066, 22379, 73573, 36087, 54255, 60304, 30497, 1202, 95520, 48378, 68296, 14032, 50456, 60555, 80390, 70975, 17531, 3761, 46399, 48927, 96320, 79008, 25360, 67058, 26409, 29891, 324, 67141, 24534, 69987, 11711, 99837, 82260, 8818, 67647, 66046, 76727, 25049, 48694, 96244, 42767, 13120, 53729, 90754, 47498, 40257, 7844, 79665, 35900, 33567, 80332, 68427, 29914, 91621, 38959, 35796, 7435, 65460, 434, 2785, 4710, 80793, 20827, 22155, 90320, 5066, 24178, 18875, 51294, 5222, 95816, 14268, 68478, 96761, 66479, 67335, 51513, 78673, 73143, 11679, 85300, 88785, 1004, 18064, 91085, 18999, 25640, 45379, 74924, 94706, 46916, 32682, 31715, 3086, 49466, 85098, 49913, 44647, 82331, 27219, 13875, 58769, 3667, 10298, 44795, 62204, 21497, 58731, 12965, 62569, 72238, 49525, 22899, 84200, 3845, 98178, 924, 35984, 32417, 22686, 22620, 47458, 87867, 29566, 77085, 10960, 14876, 89730, 21641, 13636, 79167, 53472, 30103, 56335, 39274, 74071, 68958, 66408, 47354, 84728, 28113, 99860, 49955, 79844, 1186, 85981, 39037, 60464, 80363, 89186, 92541, 16343, 48363, 7581, 73306, 68325, 65829, 84163, 74355, 53786, 58715, 98906, 39439, 27860, 76391, 76589, 39834, 27137, 81688, 64132, 49120, 56144, 86941, 95518, 72009, 82728, 96067, 97712, 79469, 44330, 67454, 39941, 97408, 58132, 5066, 93590, 77162, 72882, 39621, 31441, 23172, 65710, 88436, 34469, 86816, 9665, 5643, 68076, 70549, 80805, 94994, 91769, 84542, 62168, 74918, 61406, 45287, 5793, 54563, 3652, 92584, 61367, 28505, 30248, 20120, 86422, 81094, 83631, 58464, 55958, 40896, 81384, 55062, 40915, 58556, 32091, 34368, 54084, 77250, 25828, 15620, 90399, 20250, 73405, 26695, 2032, 83486, 95048, 94554, 30946, 28573, 74157, 43422, 85194, 47436, 36847, 40337, 44865, 44811, 69652, 13169, 41240, 48298, 72630, 51768, 49849, 81558, 51868, 75819, 14511, 36733, 35093, 77864, 36881, 97122, 60008, 48465, 10154, 94832, 12514, 47840, 15591, 65517, 68261, 63597, 80341, 6530, 76786, 97631, 2526, 47318, 83685, 23732, 20477, 36378, 4066, 79691, 93070, 83021, 37168, 52019, 85092, 72854, 20879, 55104, 61225, 87611, 84521, 9011, 27496, 39666, 61677, 49131, 80714, 29320, 98393, 71579, 39547, 34736, 99974, 53333, 26106, 50745, 92975, 84628, 24607, 5133, 38793, 24284, 43324, 50981, 51005, 22088, 10404, 59675, 84882, 52975, 94861, 17852, 74017, 42533, 53763, 1986, 59478, 96769, 77976, 58875, 25744, 68724, 10130, 52144, 73428, 10610, 97509, 64410, 37812, 59809, 8455, 65712, 89789, 87542, 22274, 94253, 59627, 42450, 26524, 12018, 35043, 27433, 94055, 79108, 64297, 39011, 68974, 69586, 87982, 71372, 62430, 43056, 15425, 80083, 68963, 38661, 45853, 44335, 71876, 28982, 2264, 61889, 6454, 58072, 242, 93781, 71755, 66290, 90497, 54071, 55444, 64765, 4058, 79429, 41630, 15024, 64603, 98934, 48326, 56618, 55522, 37470, 57495, 31975, 70970, 31709, 31945, 64378, 12831, 51921, 76994, 31476, 72360, 63265, 35422, 88813, 58864, 74401, 91076, 37836, 55027, 95549, 15618, 34969, 60039, 61528, 3321, 94087, 37316, 81288, 81268, 71368, 95150, 57625, 34979, 60444, 45713, 87417, 17729, 30256, 98375, 2527, 95619, 71929, 47741, 59345, 50186, 73234, 74055, 49179, 14980, 21318, 96240, 9917, 75849, 56534, 85371, 63765, 23611, 47419, 34402, 48943, 26048, 69611, 29375, 29430, 6553, 97428, 97806, 80481, 26953, 42600, 59032, 65854, 66035, 48964, 22269, 52171, 14513, 65468, 66339, 25356, 52393, 7853, 24853, 78187, 83930, 67307, 45091, 41518, 52101, 76047, 40529, 36318, 3755, 62784, 77519, 22200, 70689, 33135, 81934, 72265, 2971, 91369, 53872, 45818, 57790, 21607, 66120, 26696, 92619, 47305, 65861, 60602, 66559, 2054, 57820, 19261, 6596, 56435, 12167, 29581, 17598, 1729, 77111, 26411, 66914, 14722, 39615, 27758, 96587, 69153, 65407, 65952, 52604, 28856, 58297, 94511, 71028, 75000, 60829, 12334, 21754, 20048, 5488, 11184, 80078, 64552, 23655, 75130, 79850, 40299, 92970, 89686, 72265, 49906, 84405, 90304, 74509, 97608, 32383, 77555, 89457, 96493, 25090, 79130, 5238, 44242, 54197, 87027, 77862, 44899, 39596, 50314, 66002, 34789, 83144, 62992, 9580, 89205, 9252, 54862, 53171, 64280, 13361, 17974, 66583, 40129, 4768, 25940, 96021, 80579, 7235, 63726, 87348, 21304, 86007, 94534, 57733, 43068, 31145, 34295, 12128, 97580, 83653, 28797, 69504, 29790, 73946, 59341, 48155, 1463, 80083, 32469, 71782, 20850, 96205, 42015, 73041, 55026, 56528, 41902, 12404, 62462, 81533, 16708, 7415, 68387, 80571, 32027, 35225, 10946, 94144, 4194, 43504, 49796, 50362, 95023, 52994, 95205, 36035, 71247, 41720, 6865, 17427, 36924, 61894, 38538, 67742, 44575, 14625, 79002, 90627, 8841, 84462, 7945, 24927, 82064, 46459, 52759, 31226, 5657, 79441, 64942, 70601, 84159, 3713, 5819, 33208, 82518, 79984, 11805, 65691, 27461, 79491, 31649, 44872, 55358, 59545, 43403, 25937, 57129, 95086, 33073, 66761, 54601, 58418, 97317, 55033, 52664, 98134, 37723, 11301, 82638, 57741, 7107, 3684, 12886, 23805, 51818, 91767, 69982, 49206, 31880, 98404, 66281, 65126, 58401, 7132, 42216, 82869, 16032, 26488, 60581, 34013, 63817, 6519, 89872, 31855, 22997, 69212, 73604, 76079, 64953, 98735, 44812, 4732, 94488, 84054, 42787, 46869, 45010, 20732, 5560, 56309, 77803, 42883, 66324, 49402, 64847, 31627, 94225, 77195, 95635, 68166, 31386, 63128, 31631, 70432, 46143, 52182, 8113, 84606, 51625, 55982, 29418, 64146, 69813, 44592, 79603, 46634, 32362, 62318, 18402, 68531, 53415, 19852, 28919, 62513, 79532, 49718, 33065, 56835, 64306, 60638, 70658, 79161, 27512, 68976, 89331, 29937, 12813, 57173, 27550, 84813, 60721, 11582, 44931, 88702, 7688, 52433, 55498, 95194, 39528, 6913, 6693, 94386, 842, 12398, 45874, 68922, 71749, 4672, 93255, 10276, 30051, 18146, 1369, 34708, 13026, 81431, 18801, 4379, 1238, 53213, 33648, 8064, 76802, 41132, 22338, 2817, 16671, 85926, 86066, 41124, 36200, 37286, 96525, 59693, 83181, 87393, 35298, 17208, 90473, 22239, 61861, 41594, 2519, 54614, 59722, 37429, 49717, 81394, 55456, 64709, 76277, 23690, 55080, 41336, 29750, 97329, 28604, 24728, 76992, 67044, 34563, 32395, 24170, 30848, 56474, 78881, 4772, 23177, 28993, 11230, 77390, 62191, 24747, 29986, 50371, 34979, 66772, 80075, 19549, 78848, 11352, 48373, 96733, 93428, 45892, 86184, 62894, 19948, 70176, 16630, 69200, 28933, 93458, 73504, 54975, 55489, 8787, 47519, 97887, 16335], thresh=44238370995):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem B: Bridges](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 3,003 characters.",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "OptimalBridges_4",
    "sat": "def sat(indices: List[int], H=100000, alpha=6, beta=2, xs=[0, 75202, 97997, 100000], ys=[24586, 7488, 4413, 30235], thresh=12359929344):\n    \"\"\"\n    You are to choose locations for bridge bases from among a given set of mountain peaks located at\n    `xs, ys`, where `xs` and `ys` are lists of n integers of the same length. Your answer should be a sorted\n    list of indices starting at 0 and ending at n-1. The goal is to minimize building costs such that the bridges\n    are feasible. The bridges are all semicircles placed on top of the pillars. The feasibility constraints are that:\n    * The bridges may not extend above a given height `H`. Mathematically, if the distance between the two xs\n    of adjacent pillars is d, then the semicircle will have radius `d/2` and therefore the heights of the\n    selected mountain peaks must both be at most `H - d/2`.\n    *  The bridges must clear all the mountain peaks, which means that the semicircle must lie above the tops of the\n    peak. See the code for how this is determined mathematically.\n    * The total cost of all the bridges must be at most `thresh`, where the cost is parameter alpha * (the sum of\n    all pillar heights) + beta * (the sum of the squared diameters)\n    \"\"\"\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=6, beta=2, xs=[0, 75202, 97997, 100000], ys=[24586, 7488, 4413, 30235], thresh=12359929344):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem B: Bridges](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 3,003 characters.",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "OptimalBridges_5",
    "sat": "def sat(indices: List[int], H=100000, alpha=7, beta=12, xs=[0, 27471, 41263, 43238, 56183, 75871, 86174, 92027, 96943, 99152, 99752, 99766, 99893, 99989, 99996, 99997, 100000], ys=[41920, 55614, 26024, 3407, 53805, 24576, 12897, 53748, 52677, 71707, 56373, 13704, 33023, 44816, 47272, 7780, 69509], thresh=20090869297):\n    \"\"\"\n    You are to choose locations for bridge bases from among a given set of mountain peaks located at\n    `xs, ys`, where `xs` and `ys` are lists of n integers of the same length. Your answer should be a sorted\n    list of indices starting at 0 and ending at n-1. The goal is to minimize building costs such that the bridges\n    are feasible. The bridges are all semicircles placed on top of the pillars. The feasibility constraints are that:\n    * The bridges may not extend above a given height `H`. Mathematically, if the distance between the two xs\n    of adjacent pillars is d, then the semicircle will have radius `d/2` and therefore the heights of the\n    selected mountain peaks must both be at most `H - d/2`.\n    *  The bridges must clear all the mountain peaks, which means that the semicircle must lie above the tops of the\n    peak. See the code for how this is determined mathematically.\n    * The total cost of all the bridges must be at most `thresh`, where the cost is parameter alpha * (the sum of\n    all pillar heights) + beta * (the sum of the squared diameters)\n    \"\"\"\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=7, beta=12, xs=[0, 27471, 41263, 43238, 56183, 75871, 86174, 92027, 96943, 99152, 99752, 99766, 99893, 99989, 99996, 99997, 100000], ys=[41920, 55614, 26024, 3407, 53805, 24576, 12897, 53748, 52677, 71707, 56373, 13704, 33023, 44816, 47272, 7780, 69509], thresh=20090869297):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem B: Bridges](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 3,003 characters.",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "OptimalBridges_6",
    "sat": "def sat(indices: List[int], H=100000, alpha=4, beta=4, xs=[0, 15244, 47279, 77951, 95877, 96537, 98528, 99838, 100000], ys=[26403, 46577, 2102, 56028, 69347, 3090, 62826, 74881, 11486], thresh=10109692424):\n    \"\"\"\n    You are to choose locations for bridge bases from among a given set of mountain peaks located at\n    `xs, ys`, where `xs` and `ys` are lists of n integers of the same length. Your answer should be a sorted\n    list of indices starting at 0 and ending at n-1. The goal is to minimize building costs such that the bridges\n    are feasible. The bridges are all semicircles placed on top of the pillars. The feasibility constraints are that:\n    * The bridges may not extend above a given height `H`. Mathematically, if the distance between the two xs\n    of adjacent pillars is d, then the semicircle will have radius `d/2` and therefore the heights of the\n    selected mountain peaks must both be at most `H - d/2`.\n    *  The bridges must clear all the mountain peaks, which means that the semicircle must lie above the tops of the\n    peak. See the code for how this is determined mathematically.\n    * The total cost of all the bridges must be at most `thresh`, where the cost is parameter alpha * (the sum of\n    all pillar heights) + beta * (the sum of the squared diameters)\n    \"\"\"\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=4, beta=4, xs=[0, 15244, 47279, 77951, 95877, 96537, 98528, 99838, 100000], ys=[26403, 46577, 2102, 56028, 69347, 3090, 62826, 74881, 11486], thresh=10109692424):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem B: Bridges](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 3,003 characters.",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "OptimalBridges_7",
    "sat": "def sat(indices: List[int], H=100000, alpha=69, beta=19, xs=[0, 1861, 3666, 4139, 4225, 9507, 11409, 13945, 14037, 14248, 14659, 14713, 14961, 16378, 16435, 16480, 16920, 17859, 18235, 18263, 18513, 29862, 33584, 33743, 34559, 35127, 36023, 36655, 37979, 42312, 43152, 43941, 45343, 50462, 51995, 52104, 52186, 52194, 52204, 52208, 52208, 52210, 53608, 59391, 60850, 74440, 82226, 94858, 99237, 99757, 99851, 99879, 99892, 99978, 99987, 99988, 100000], ys=[24286, 19579, 73826, 48796, 66150, 67780, 74191, 46449, 16310, 21967, 43424, 16854, 39749, 29163, 4366, 59696, 81721, 53496, 56798, 36578, 53690, 16115, 80852, 28170, 64188, 64150, 9371, 51702, 39408, 29402, 70783, 5954, 21079, 95331, 87710, 63157, 53527, 62573, 4672, 3008, 59925, 14193, 12032, 86986, 94617, 46800, 18096, 35674, 29566, 51198, 49371, 50996, 58026, 84672, 2295, 22895, 54013], thresh=14340908539):\n    \"\"\"\n    You are to choose locations for bridge bases from among a given set of mountain peaks located at\n    `xs, ys`, where `xs` and `ys` are lists of n integers of the same length. Your answer should be a sorted\n    list of indices starting at 0 and ending at n-1. The goal is to minimize building costs such that the bridges\n    are feasible. The bridges are all semicircles placed on top of the pillars. The feasibility constraints are that:\n    * The bridges may not extend above a given height `H`. Mathematically, if the distance between the two xs\n    of adjacent pillars is d, then the semicircle will have radius `d/2` and therefore the heights of the\n    selected mountain peaks must both be at most `H - d/2`.\n    *  The bridges must clear all the mountain peaks, which means that the semicircle must lie above the tops of the\n    peak. See the code for how this is determined mathematically.\n    * The total cost of all the bridges must be at most `thresh`, where the cost is parameter alpha * (the sum of\n    all pillar heights) + beta * (the sum of the squared diameters)\n    \"\"\"\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=69, beta=19, xs=[0, 1861, 3666, 4139, 4225, 9507, 11409, 13945, 14037, 14248, 14659, 14713, 14961, 16378, 16435, 16480, 16920, 17859, 18235, 18263, 18513, 29862, 33584, 33743, 34559, 35127, 36023, 36655, 37979, 42312, 43152, 43941, 45343, 50462, 51995, 52104, 52186, 52194, 52204, 52208, 52208, 52210, 53608, 59391, 60850, 74440, 82226, 94858, 99237, 99757, 99851, 99879, 99892, 99978, 99987, 99988, 100000], ys=[24286, 19579, 73826, 48796, 66150, 67780, 74191, 46449, 16310, 21967, 43424, 16854, 39749, 29163, 4366, 59696, 81721, 53496, 56798, 36578, 53690, 16115, 80852, 28170, 64188, 64150, 9371, 51702, 39408, 29402, 70783, 5954, 21079, 95331, 87710, 63157, 53527, 62573, 4672, 3008, 59925, 14193, 12032, 86986, 94617, 46800, 18096, 35674, 29566, 51198, 49371, 50996, 58026, 84672, 2295, 22895, 54013], thresh=14340908539):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem B: Bridges](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 3,003 characters.",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "OptimalBridges_8",
    "sat": "def sat(indices: List[int], H=100000, alpha=3, beta=0, xs=[0, 14431, 16747, 17428, 17469, 17514, 17548, 17672, 18434, 18466, 22244, 22573, 25887, 32701, 38105, 62470, 69286, 83392, 100000], ys=[90814, 93364, 70029, 14375, 45159, 63782, 87025, 31504, 76266, 86153, 29074, 55790, 47404, 69118, 65327, 79334, 91305, 90505, 73683], thresh=300078):\n    \"\"\"\n    You are to choose locations for bridge bases from among a given set of mountain peaks located at\n    `xs, ys`, where `xs` and `ys` are lists of n integers of the same length. Your answer should be a sorted\n    list of indices starting at 0 and ending at n-1. The goal is to minimize building costs such that the bridges\n    are feasible. The bridges are all semicircles placed on top of the pillars. The feasibility constraints are that:\n    * The bridges may not extend above a given height `H`. Mathematically, if the distance between the two xs\n    of adjacent pillars is d, then the semicircle will have radius `d/2` and therefore the heights of the\n    selected mountain peaks must both be at most `H - d/2`.\n    *  The bridges must clear all the mountain peaks, which means that the semicircle must lie above the tops of the\n    peak. See the code for how this is determined mathematically.\n    * The total cost of all the bridges must be at most `thresh`, where the cost is parameter alpha * (the sum of\n    all pillar heights) + beta * (the sum of the squared diameters)\n    \"\"\"\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=3, beta=0, xs=[0, 14431, 16747, 17428, 17469, 17514, 17548, 17672, 18434, 18466, 22244, 22573, 25887, 32701, 38105, 62470, 69286, 83392, 100000], ys=[90814, 93364, 70029, 14375, 45159, 63782, 87025, 31504, 76266, 86153, 29074, 55790, 47404, 69118, 65327, 79334, 91305, 90505, 73683], thresh=300078):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem B: Bridges](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 3,003 characters.",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "OptimalBridges_9",
    "sat": "def sat(indices: List[int], H=100000, alpha=16, beta=9, xs=[0, 339, 8724, 8849, 8945, 9068, 9108, 9227, 9240, 9245, 9249, 9249, 9249, 9250, 9251, 44027, 65325, 73972, 100000], ys=[33900, 43692, 85964, 17578, 41788, 88753, 48083, 59785, 43280, 89762, 68888, 86676, 62115, 40817, 71248, 26896, 24053, 24113, 8592], thresh=22379880720):\n    \"\"\"\n    You are to choose locations for bridge bases from among a given set of mountain peaks located at\n    `xs, ys`, where `xs` and `ys` are lists of n integers of the same length. Your answer should be a sorted\n    list of indices starting at 0 and ending at n-1. The goal is to minimize building costs such that the bridges\n    are feasible. The bridges are all semicircles placed on top of the pillars. The feasibility constraints are that:\n    * The bridges may not extend above a given height `H`. Mathematically, if the distance between the two xs\n    of adjacent pillars is d, then the semicircle will have radius `d/2` and therefore the heights of the\n    selected mountain peaks must both be at most `H - d/2`.\n    *  The bridges must clear all the mountain peaks, which means that the semicircle must lie above the tops of the\n    peak. See the code for how this is determined mathematically.\n    * The total cost of all the bridges must be at most `thresh`, where the cost is parameter alpha * (the sum of\n    all pillar heights) + beta * (the sum of the squared diameters)\n    \"\"\"\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=16, beta=9, xs=[0, 339, 8724, 8849, 8945, 9068, 9108, 9227, 9240, 9245, 9249, 9249, 9249, 9250, 9251, 44027, 65325, 73972, 100000], ys=[33900, 43692, 85964, 17578, 41788, 88753, 48083, 59785, 43280, 89762, 68888, 86676, 62115, 40817, 71248, 26896, 24053, 24113, 8592], thresh=22379880720):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem B: Bridges](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 3,003 characters.",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "CheckersPosition_0",
    "sat": "def sat(position: List[List[int]], transcript=[[[3, 3], [5, 5], [3, 7]], [[5, 3], [6, 4]]]):\n    \"\"\"\n    You are given a partial transcript a checkers game. Find an initial position such that the transcript\n    would be a legal set of moves. The board positions are [x, y] pairs with 0 <= x, y < 8 and x + y even.\n    There are two players which we call -1 and 1 for convenience, and player 1 must move first in transcript.\n    The initial position is represented as a list [x, y, piece] where piece means:\n    * 0 is empty square\n    * 1 or -1 is piece that moves only in the y = 1 or y = -1 dir, respectively\n    * 2 or -2 is king for player 1 or player 2 respectively\n\n    Additional rules:\n    * You must jump if you can, and you must continue jumping until one can't any longer.\n    * You cannot start the position with any non-kings on your last rank.\n    * Promotion happens after the turn ends\n    \"\"\"\n    board = {(x, y): 0 for x in range(8) for y in range(8) if (x + y) % 2 == 0}  # empty board, 0 = empty\n    for x, y, p in position:\n        assert -2 <= p <= 2 and board[x, y] == 0  # -1, 1 is regular piece, -2, 2 is king\n        board[x, y] = p\n\n    def has_a_jump(x, y):\n        p = board[x, y]  # piece to move\n        deltas = [(dx, dy) for dx in [-1, 1] for dy in [-1, 1] if dy != -p]  # don't check backwards for non-kings\n        return any(board.get((x + 2 * dx, y + 2 * dy)) == 0 and board[x + dx, y + dy] * p < 0 for dx, dy in deltas)\n\n    sign = 1  # player 1 moves first\n    for move in transcript:\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = board[start]  # piece to move\n        assert p * sign > 0, \"Moving square must be non-empty and players must be alternate signs\"\n        assert all(board[x, y] == 0 for x, y in move if [x, y] != move[0]), \"Moved to an occupied square\"\n\n        for (x1, y1), (x2, y2) in zip(move, move[1:]):\n            assert abs(p) != 1 or (y2 - y1) * p > 0, \"Non-kings can only move forward (in direction of sign)\"\n            if abs(x2 - x1) == 1:  # non-jump\n                assert not any(has_a_jump(*a) for a in board if board[a] * p > 0), \"Must make a jump if possible\"\n                break\n            mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n            assert board[mid] * p < 0, \"Can only jump over piece of opposite sign\"\n            board[mid] = 0\n        board[start], board[end] = 0, p\n        assert abs(x2 - x1) == 1 or not has_a_jump(*end)\n        if abs(p) == 1 and any(y in {0, 7} for x, y in move[1:]):\n            board[end] *= 2  # king me at the end of turn after any jumps are done!\n        sign *= -1\n\n    return True",
    "sols": [
      "def sol(transcript=[[[3, 3], [5, 5], [3, 7]], [[5, 3], [6, 4]]]):\n    START_PLAYER = 1  # assumed\n\n    class InitOpts:\n        def __init__(self, x, y):\n            self.x, self.y = x, y\n            self.opts = {-2, -1, 0, 1, 2}\n            if y == 0:\n                self.opts.remove(-1)\n            if y == 7:\n                self.opts.remove(1)\n            self.promoted = 2 ** 63  # on which step was it promoted t >= 0\n            self.jumped = 2 ** 63  # on which step was it jumped t >= 0\n\n    # def board2str(board):  # for debugging\n    #     mapping = \".bBWw\"\n    #     ans = \"\"\n    #     for y in range(7, -1, -1):\n    #         ans += \"\".join(\" \" if (x+y)%2 else mapping[board[x,y]] for x in range(8)) + \"\\n\"\n    #     return ans\n\n    init_opts = {(x, y): InitOpts(x, y) for x in range(8) for y in range(8) if (x + y) % 2 == 0}\n    # board = {(x, y): (1 if y < 3 else -1 if y > 4 else 0) for x in range(8) for y in range(8) if\n    #          (x + y) % 2 == 0}  # new board\n\n    transcript = [[tuple(a) for a in move] for move in transcript]\n\n    permuted_opts = init_opts.copy()\n    sign = START_PLAYER\n    for t, move in enumerate(transcript):\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = permuted_opts[start]  # opts to move\n        assert p.jumped >= t\n        p.opts -= {-sign, -2 * sign, 0}\n        if any((y2 - y1) * sign < 0 for (x1, y1), (x2, y2) in zip(move, move[1:])):  # backward move!\n            if p.promoted >= t:\n                p.opts -= {sign}  # must be a king!\n\n        for a, b in zip(move, move[1:]):\n            if permuted_opts[b].jumped >= t:\n                permuted_opts[b].opts -= {-2, -1, 1, 2}  # must be empty\n            assert permuted_opts[a].jumped >= t\n            permuted_opts[a], permuted_opts[b] = permuted_opts[b], permuted_opts[a]\n            # board[a], board[b] = board[b], board[a]\n            (x1, y1), (x2, y2) = a, b\n            if abs(x2 - x1) == 2:  # jump\n                mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n                assert permuted_opts[mid].jumped >= t\n                permuted_opts[mid].opts -= {0, sign, 2 * sign}  # Can only jump over piece of opposite sign\n                permuted_opts[mid].jumped = t\n                # board[mid] = 0\n\n        if any(y in {0, 7} for x, y in move[1:]):\n            if p.promoted > t:\n                p.promoted = t\n            # if abs(board[x2, y2]) == 1:\n            #     board[x2, y2] *= 2\n\n        sign *= -1\n\n    for y in range(7, -1, -1):\n        for x in range(8):\n            if (x, y) in init_opts:\n                s = init_opts[x, y].opts\n                if {1, 2} <= s:\n                    s.remove(2)\n                if {-1, -2} <= s:\n                    s.remove(-2)\n\n    def helper():  # returns True if success and store everything, otherwise None\n        my_opts = init_opts.copy()\n        sign = START_PLAYER  # player 1 always starts\n\n        for t, move in enumerate(transcript):\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                check_no_jumps = [a for a, p in my_opts.items() if p.jumped >= t and p.opts <= {sign, 2 * sign}]\n            else:\n                for a, b in zip(move, move[1:]):\n                    my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n                check_no_jumps = [b]\n\n            for x, y in check_no_jumps:\n                p = my_opts[x, y]\n                [o] = p.opts\n                assert o * sign > 0\n                dys = [o] if (abs(o) == 1 and p.promoted >= t) else [-1, 1]  # only check forward jumps\n                for dx in [-1, 1]:\n                    for dy in dys:\n                        target_o = my_opts.get((x + 2 * dx, y + 2 * dy))\n                        if target_o is not None and (0 in target_o.opts or target_o.jumped < t):\n                            mid_o = my_opts[x + dx, y + dy]\n                            if mid_o.jumped > t and mid_o.opts <= {-sign, -2 * sign}:  # ok if jumped at t\n                                if target_o.jumped < t or target_o.opts == {0}:\n                                    return False\n                                old_opts = target_o.opts\n                                for v in target_o.opts:\n                                    if v != 0:\n                                        target_o.opts = {v}\n                                        h = helper()\n                                        if h:\n                                            return True\n                                target_o.opts = old_opts\n                                return False\n\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                a, b = move[0], move[1]\n                my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n\n            sign *= -1\n        return True\n\n    res = helper()\n    assert res\n\n    def get_opt(opts):\n        if 0 in opts.opts:\n            return 0\n        assert len(opts.opts) == 1\n        return list(opts.opts)[0]\n\n    return [[x, y, get_opt(opts)] for (x, y), opts in init_opts.items()]"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem C: Checks Post Facto](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nNobody solved this problem during the competition -- it is pretty difficult!",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "CheckersPosition_1",
    "sat": "def sat(position: List[List[int]], transcript: List[List[List[int]]]=[]):\n    \"\"\"\n    You are given a partial transcript a checkers game. Find an initial position such that the transcript\n    would be a legal set of moves. The board positions are [x, y] pairs with 0 <= x, y < 8 and x + y even.\n    There are two players which we call -1 and 1 for convenience, and player 1 must move first in transcript.\n    The initial position is represented as a list [x, y, piece] where piece means:\n    * 0 is empty square\n    * 1 or -1 is piece that moves only in the y = 1 or y = -1 dir, respectively\n    * 2 or -2 is king for player 1 or player 2 respectively\n\n    Additional rules:\n    * You must jump if you can, and you must continue jumping until one can't any longer.\n    * You cannot start the position with any non-kings on your last rank.\n    * Promotion happens after the turn ends\n    \"\"\"\n    board = {(x, y): 0 for x in range(8) for y in range(8) if (x + y) % 2 == 0}  # empty board, 0 = empty\n    for x, y, p in position:\n        assert -2 <= p <= 2 and board[x, y] == 0  # -1, 1 is regular piece, -2, 2 is king\n        board[x, y] = p\n\n    def has_a_jump(x, y):\n        p = board[x, y]  # piece to move\n        deltas = [(dx, dy) for dx in [-1, 1] for dy in [-1, 1] if dy != -p]  # don't check backwards for non-kings\n        return any(board.get((x + 2 * dx, y + 2 * dy)) == 0 and board[x + dx, y + dy] * p < 0 for dx, dy in deltas)\n\n    sign = 1  # player 1 moves first\n    for move in transcript:\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = board[start]  # piece to move\n        assert p * sign > 0, \"Moving square must be non-empty and players must be alternate signs\"\n        assert all(board[x, y] == 0 for x, y in move if [x, y] != move[0]), \"Moved to an occupied square\"\n\n        for (x1, y1), (x2, y2) in zip(move, move[1:]):\n            assert abs(p) != 1 or (y2 - y1) * p > 0, \"Non-kings can only move forward (in direction of sign)\"\n            if abs(x2 - x1) == 1:  # non-jump\n                assert not any(has_a_jump(*a) for a in board if board[a] * p > 0), \"Must make a jump if possible\"\n                break\n            mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n            assert board[mid] * p < 0, \"Can only jump over piece of opposite sign\"\n            board[mid] = 0\n        board[start], board[end] = 0, p\n        assert abs(x2 - x1) == 1 or not has_a_jump(*end)\n        if abs(p) == 1 and any(y in {0, 7} for x, y in move[1:]):\n            board[end] *= 2  # king me at the end of turn after any jumps are done!\n        sign *= -1\n\n    return True",
    "sols": [
      "def sol(transcript=[]):\n    START_PLAYER = 1  # assumed\n\n    class InitOpts:\n        def __init__(self, x, y):\n            self.x, self.y = x, y\n            self.opts = {-2, -1, 0, 1, 2}\n            if y == 0:\n                self.opts.remove(-1)\n            if y == 7:\n                self.opts.remove(1)\n            self.promoted = 2 ** 63  # on which step was it promoted t >= 0\n            self.jumped = 2 ** 63  # on which step was it jumped t >= 0\n\n    # def board2str(board):  # for debugging\n    #     mapping = \".bBWw\"\n    #     ans = \"\"\n    #     for y in range(7, -1, -1):\n    #         ans += \"\".join(\" \" if (x+y)%2 else mapping[board[x,y]] for x in range(8)) + \"\\n\"\n    #     return ans\n\n    init_opts = {(x, y): InitOpts(x, y) for x in range(8) for y in range(8) if (x + y) % 2 == 0}\n    # board = {(x, y): (1 if y < 3 else -1 if y > 4 else 0) for x in range(8) for y in range(8) if\n    #          (x + y) % 2 == 0}  # new board\n\n    transcript = [[tuple(a) for a in move] for move in transcript]\n\n    permuted_opts = init_opts.copy()\n    sign = START_PLAYER\n    for t, move in enumerate(transcript):\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = permuted_opts[start]  # opts to move\n        assert p.jumped >= t\n        p.opts -= {-sign, -2 * sign, 0}\n        if any((y2 - y1) * sign < 0 for (x1, y1), (x2, y2) in zip(move, move[1:])):  # backward move!\n            if p.promoted >= t:\n                p.opts -= {sign}  # must be a king!\n\n        for a, b in zip(move, move[1:]):\n            if permuted_opts[b].jumped >= t:\n                permuted_opts[b].opts -= {-2, -1, 1, 2}  # must be empty\n            assert permuted_opts[a].jumped >= t\n            permuted_opts[a], permuted_opts[b] = permuted_opts[b], permuted_opts[a]\n            # board[a], board[b] = board[b], board[a]\n            (x1, y1), (x2, y2) = a, b\n            if abs(x2 - x1) == 2:  # jump\n                mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n                assert permuted_opts[mid].jumped >= t\n                permuted_opts[mid].opts -= {0, sign, 2 * sign}  # Can only jump over piece of opposite sign\n                permuted_opts[mid].jumped = t\n                # board[mid] = 0\n\n        if any(y in {0, 7} for x, y in move[1:]):\n            if p.promoted > t:\n                p.promoted = t\n            # if abs(board[x2, y2]) == 1:\n            #     board[x2, y2] *= 2\n\n        sign *= -1\n\n    for y in range(7, -1, -1):\n        for x in range(8):\n            if (x, y) in init_opts:\n                s = init_opts[x, y].opts\n                if {1, 2} <= s:\n                    s.remove(2)\n                if {-1, -2} <= s:\n                    s.remove(-2)\n\n    def helper():  # returns True if success and store everything, otherwise None\n        my_opts = init_opts.copy()\n        sign = START_PLAYER  # player 1 always starts\n\n        for t, move in enumerate(transcript):\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                check_no_jumps = [a for a, p in my_opts.items() if p.jumped >= t and p.opts <= {sign, 2 * sign}]\n            else:\n                for a, b in zip(move, move[1:]):\n                    my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n                check_no_jumps = [b]\n\n            for x, y in check_no_jumps:\n                p = my_opts[x, y]\n                [o] = p.opts\n                assert o * sign > 0\n                dys = [o] if (abs(o) == 1 and p.promoted >= t) else [-1, 1]  # only check forward jumps\n                for dx in [-1, 1]:\n                    for dy in dys:\n                        target_o = my_opts.get((x + 2 * dx, y + 2 * dy))\n                        if target_o is not None and (0 in target_o.opts or target_o.jumped < t):\n                            mid_o = my_opts[x + dx, y + dy]\n                            if mid_o.jumped > t and mid_o.opts <= {-sign, -2 * sign}:  # ok if jumped at t\n                                if target_o.jumped < t or target_o.opts == {0}:\n                                    return False\n                                old_opts = target_o.opts\n                                for v in target_o.opts:\n                                    if v != 0:\n                                        target_o.opts = {v}\n                                        h = helper()\n                                        if h:\n                                            return True\n                                target_o.opts = old_opts\n                                return False\n\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                a, b = move[0], move[1]\n                my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n\n            sign *= -1\n        return True\n\n    res = helper()\n    assert res\n\n    def get_opt(opts):\n        if 0 in opts.opts:\n            return 0\n        assert len(opts.opts) == 1\n        return list(opts.opts)[0]\n\n    return [[x, y, get_opt(opts)] for (x, y), opts in init_opts.items()]"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem C: Checks Post Facto](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nNobody solved this problem during the competition -- it is pretty difficult!",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "CheckersPosition_2",
    "sat": "def sat(position: List[List[int]], transcript=[[[6, 4], [5, 5]], [[4, 6], [6, 4]], [[7, 3], [5, 5]], [[3, 5], [4, 4]], [[4, 2], [6, 4]], [[3, 7], [2, 6]], [[5, 5], [6, 6]], [[7, 7], [5, 5], [7, 3]], [[1, 1], [0, 2]], [[7, 3], [6, 2]], [[0, 0], [1, 1]], [[6, 2], [5, 1]], [[4, 0], [6, 2]], [[4, 4], [3, 3]], [[1, 1], [2, 2]], [[3, 3], [1, 1]], [[6, 2], [7, 3]], [[5, 7], [6, 6]], [[0, 2], [1, 3]], [[2, 4], [0, 2]], [[3, 1], [2, 2]], [[1, 7], [0, 6]]]):\n    \"\"\"\n    You are given a partial transcript a checkers game. Find an initial position such that the transcript\n    would be a legal set of moves. The board positions are [x, y] pairs with 0 <= x, y < 8 and x + y even.\n    There are two players which we call -1 and 1 for convenience, and player 1 must move first in transcript.\n    The initial position is represented as a list [x, y, piece] where piece means:\n    * 0 is empty square\n    * 1 or -1 is piece that moves only in the y = 1 or y = -1 dir, respectively\n    * 2 or -2 is king for player 1 or player 2 respectively\n\n    Additional rules:\n    * You must jump if you can, and you must continue jumping until one can't any longer.\n    * You cannot start the position with any non-kings on your last rank.\n    * Promotion happens after the turn ends\n    \"\"\"\n    board = {(x, y): 0 for x in range(8) for y in range(8) if (x + y) % 2 == 0}  # empty board, 0 = empty\n    for x, y, p in position:\n        assert -2 <= p <= 2 and board[x, y] == 0  # -1, 1 is regular piece, -2, 2 is king\n        board[x, y] = p\n\n    def has_a_jump(x, y):\n        p = board[x, y]  # piece to move\n        deltas = [(dx, dy) for dx in [-1, 1] for dy in [-1, 1] if dy != -p]  # don't check backwards for non-kings\n        return any(board.get((x + 2 * dx, y + 2 * dy)) == 0 and board[x + dx, y + dy] * p < 0 for dx, dy in deltas)\n\n    sign = 1  # player 1 moves first\n    for move in transcript:\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = board[start]  # piece to move\n        assert p * sign > 0, \"Moving square must be non-empty and players must be alternate signs\"\n        assert all(board[x, y] == 0 for x, y in move if [x, y] != move[0]), \"Moved to an occupied square\"\n\n        for (x1, y1), (x2, y2) in zip(move, move[1:]):\n            assert abs(p) != 1 or (y2 - y1) * p > 0, \"Non-kings can only move forward (in direction of sign)\"\n            if abs(x2 - x1) == 1:  # non-jump\n                assert not any(has_a_jump(*a) for a in board if board[a] * p > 0), \"Must make a jump if possible\"\n                break\n            mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n            assert board[mid] * p < 0, \"Can only jump over piece of opposite sign\"\n            board[mid] = 0\n        board[start], board[end] = 0, p\n        assert abs(x2 - x1) == 1 or not has_a_jump(*end)\n        if abs(p) == 1 and any(y in {0, 7} for x, y in move[1:]):\n            board[end] *= 2  # king me at the end of turn after any jumps are done!\n        sign *= -1\n\n    return True",
    "sols": [
      "def sol(transcript=[[[6, 4], [5, 5]], [[4, 6], [6, 4]], [[7, 3], [5, 5]], [[3, 5], [4, 4]], [[4, 2], [6, 4]], [[3, 7], [2, 6]], [[5, 5], [6, 6]], [[7, 7], [5, 5], [7, 3]], [[1, 1], [0, 2]], [[7, 3], [6, 2]], [[0, 0], [1, 1]], [[6, 2], [5, 1]], [[4, 0], [6, 2]], [[4, 4], [3, 3]], [[1, 1], [2, 2]], [[3, 3], [1, 1]], [[6, 2], [7, 3]], [[5, 7], [6, 6]], [[0, 2], [1, 3]], [[2, 4], [0, 2]], [[3, 1], [2, 2]], [[1, 7], [0, 6]]]):\n    START_PLAYER = 1  # assumed\n\n    class InitOpts:\n        def __init__(self, x, y):\n            self.x, self.y = x, y\n            self.opts = {-2, -1, 0, 1, 2}\n            if y == 0:\n                self.opts.remove(-1)\n            if y == 7:\n                self.opts.remove(1)\n            self.promoted = 2 ** 63  # on which step was it promoted t >= 0\n            self.jumped = 2 ** 63  # on which step was it jumped t >= 0\n\n    # def board2str(board):  # for debugging\n    #     mapping = \".bBWw\"\n    #     ans = \"\"\n    #     for y in range(7, -1, -1):\n    #         ans += \"\".join(\" \" if (x+y)%2 else mapping[board[x,y]] for x in range(8)) + \"\\n\"\n    #     return ans\n\n    init_opts = {(x, y): InitOpts(x, y) for x in range(8) for y in range(8) if (x + y) % 2 == 0}\n    # board = {(x, y): (1 if y < 3 else -1 if y > 4 else 0) for x in range(8) for y in range(8) if\n    #          (x + y) % 2 == 0}  # new board\n\n    transcript = [[tuple(a) for a in move] for move in transcript]\n\n    permuted_opts = init_opts.copy()\n    sign = START_PLAYER\n    for t, move in enumerate(transcript):\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = permuted_opts[start]  # opts to move\n        assert p.jumped >= t\n        p.opts -= {-sign, -2 * sign, 0}\n        if any((y2 - y1) * sign < 0 for (x1, y1), (x2, y2) in zip(move, move[1:])):  # backward move!\n            if p.promoted >= t:\n                p.opts -= {sign}  # must be a king!\n\n        for a, b in zip(move, move[1:]):\n            if permuted_opts[b].jumped >= t:\n                permuted_opts[b].opts -= {-2, -1, 1, 2}  # must be empty\n            assert permuted_opts[a].jumped >= t\n            permuted_opts[a], permuted_opts[b] = permuted_opts[b], permuted_opts[a]\n            # board[a], board[b] = board[b], board[a]\n            (x1, y1), (x2, y2) = a, b\n            if abs(x2 - x1) == 2:  # jump\n                mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n                assert permuted_opts[mid].jumped >= t\n                permuted_opts[mid].opts -= {0, sign, 2 * sign}  # Can only jump over piece of opposite sign\n                permuted_opts[mid].jumped = t\n                # board[mid] = 0\n\n        if any(y in {0, 7} for x, y in move[1:]):\n            if p.promoted > t:\n                p.promoted = t\n            # if abs(board[x2, y2]) == 1:\n            #     board[x2, y2] *= 2\n\n        sign *= -1\n\n    for y in range(7, -1, -1):\n        for x in range(8):\n            if (x, y) in init_opts:\n                s = init_opts[x, y].opts\n                if {1, 2} <= s:\n                    s.remove(2)\n                if {-1, -2} <= s:\n                    s.remove(-2)\n\n    def helper():  # returns True if success and store everything, otherwise None\n        my_opts = init_opts.copy()\n        sign = START_PLAYER  # player 1 always starts\n\n        for t, move in enumerate(transcript):\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                check_no_jumps = [a for a, p in my_opts.items() if p.jumped >= t and p.opts <= {sign, 2 * sign}]\n            else:\n                for a, b in zip(move, move[1:]):\n                    my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n                check_no_jumps = [b]\n\n            for x, y in check_no_jumps:\n                p = my_opts[x, y]\n                [o] = p.opts\n                assert o * sign > 0\n                dys = [o] if (abs(o) == 1 and p.promoted >= t) else [-1, 1]  # only check forward jumps\n                for dx in [-1, 1]:\n                    for dy in dys:\n                        target_o = my_opts.get((x + 2 * dx, y + 2 * dy))\n                        if target_o is not None and (0 in target_o.opts or target_o.jumped < t):\n                            mid_o = my_opts[x + dx, y + dy]\n                            if mid_o.jumped > t and mid_o.opts <= {-sign, -2 * sign}:  # ok if jumped at t\n                                if target_o.jumped < t or target_o.opts == {0}:\n                                    return False\n                                old_opts = target_o.opts\n                                for v in target_o.opts:\n                                    if v != 0:\n                                        target_o.opts = {v}\n                                        h = helper()\n                                        if h:\n                                            return True\n                                target_o.opts = old_opts\n                                return False\n\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                a, b = move[0], move[1]\n                my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n\n            sign *= -1\n        return True\n\n    res = helper()\n    assert res\n\n    def get_opt(opts):\n        if 0 in opts.opts:\n            return 0\n        assert len(opts.opts) == 1\n        return list(opts.opts)[0]\n\n    return [[x, y, get_opt(opts)] for (x, y), opts in init_opts.items()]"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem C: Checks Post Facto](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nNobody solved this problem during the competition -- it is pretty difficult!",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "CheckersPosition_3",
    "sat": "def sat(position: List[List[int]], transcript=[[[3, 1], [1, 3]]]):\n    \"\"\"\n    You are given a partial transcript a checkers game. Find an initial position such that the transcript\n    would be a legal set of moves. The board positions are [x, y] pairs with 0 <= x, y < 8 and x + y even.\n    There are two players which we call -1 and 1 for convenience, and player 1 must move first in transcript.\n    The initial position is represented as a list [x, y, piece] where piece means:\n    * 0 is empty square\n    * 1 or -1 is piece that moves only in the y = 1 or y = -1 dir, respectively\n    * 2 or -2 is king for player 1 or player 2 respectively\n\n    Additional rules:\n    * You must jump if you can, and you must continue jumping until one can't any longer.\n    * You cannot start the position with any non-kings on your last rank.\n    * Promotion happens after the turn ends\n    \"\"\"\n    board = {(x, y): 0 for x in range(8) for y in range(8) if (x + y) % 2 == 0}  # empty board, 0 = empty\n    for x, y, p in position:\n        assert -2 <= p <= 2 and board[x, y] == 0  # -1, 1 is regular piece, -2, 2 is king\n        board[x, y] = p\n\n    def has_a_jump(x, y):\n        p = board[x, y]  # piece to move\n        deltas = [(dx, dy) for dx in [-1, 1] for dy in [-1, 1] if dy != -p]  # don't check backwards for non-kings\n        return any(board.get((x + 2 * dx, y + 2 * dy)) == 0 and board[x + dx, y + dy] * p < 0 for dx, dy in deltas)\n\n    sign = 1  # player 1 moves first\n    for move in transcript:\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = board[start]  # piece to move\n        assert p * sign > 0, \"Moving square must be non-empty and players must be alternate signs\"\n        assert all(board[x, y] == 0 for x, y in move if [x, y] != move[0]), \"Moved to an occupied square\"\n\n        for (x1, y1), (x2, y2) in zip(move, move[1:]):\n            assert abs(p) != 1 or (y2 - y1) * p > 0, \"Non-kings can only move forward (in direction of sign)\"\n            if abs(x2 - x1) == 1:  # non-jump\n                assert not any(has_a_jump(*a) for a in board if board[a] * p > 0), \"Must make a jump if possible\"\n                break\n            mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n            assert board[mid] * p < 0, \"Can only jump over piece of opposite sign\"\n            board[mid] = 0\n        board[start], board[end] = 0, p\n        assert abs(x2 - x1) == 1 or not has_a_jump(*end)\n        if abs(p) == 1 and any(y in {0, 7} for x, y in move[1:]):\n            board[end] *= 2  # king me at the end of turn after any jumps are done!\n        sign *= -1\n\n    return True",
    "sols": [
      "def sol(transcript=[[[3, 1], [1, 3]]]):\n    START_PLAYER = 1  # assumed\n\n    class InitOpts:\n        def __init__(self, x, y):\n            self.x, self.y = x, y\n            self.opts = {-2, -1, 0, 1, 2}\n            if y == 0:\n                self.opts.remove(-1)\n            if y == 7:\n                self.opts.remove(1)\n            self.promoted = 2 ** 63  # on which step was it promoted t >= 0\n            self.jumped = 2 ** 63  # on which step was it jumped t >= 0\n\n    # def board2str(board):  # for debugging\n    #     mapping = \".bBWw\"\n    #     ans = \"\"\n    #     for y in range(7, -1, -1):\n    #         ans += \"\".join(\" \" if (x+y)%2 else mapping[board[x,y]] for x in range(8)) + \"\\n\"\n    #     return ans\n\n    init_opts = {(x, y): InitOpts(x, y) for x in range(8) for y in range(8) if (x + y) % 2 == 0}\n    # board = {(x, y): (1 if y < 3 else -1 if y > 4 else 0) for x in range(8) for y in range(8) if\n    #          (x + y) % 2 == 0}  # new board\n\n    transcript = [[tuple(a) for a in move] for move in transcript]\n\n    permuted_opts = init_opts.copy()\n    sign = START_PLAYER\n    for t, move in enumerate(transcript):\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = permuted_opts[start]  # opts to move\n        assert p.jumped >= t\n        p.opts -= {-sign, -2 * sign, 0}\n        if any((y2 - y1) * sign < 0 for (x1, y1), (x2, y2) in zip(move, move[1:])):  # backward move!\n            if p.promoted >= t:\n                p.opts -= {sign}  # must be a king!\n\n        for a, b in zip(move, move[1:]):\n            if permuted_opts[b].jumped >= t:\n                permuted_opts[b].opts -= {-2, -1, 1, 2}  # must be empty\n            assert permuted_opts[a].jumped >= t\n            permuted_opts[a], permuted_opts[b] = permuted_opts[b], permuted_opts[a]\n            # board[a], board[b] = board[b], board[a]\n            (x1, y1), (x2, y2) = a, b\n            if abs(x2 - x1) == 2:  # jump\n                mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n                assert permuted_opts[mid].jumped >= t\n                permuted_opts[mid].opts -= {0, sign, 2 * sign}  # Can only jump over piece of opposite sign\n                permuted_opts[mid].jumped = t\n                # board[mid] = 0\n\n        if any(y in {0, 7} for x, y in move[1:]):\n            if p.promoted > t:\n                p.promoted = t\n            # if abs(board[x2, y2]) == 1:\n            #     board[x2, y2] *= 2\n\n        sign *= -1\n\n    for y in range(7, -1, -1):\n        for x in range(8):\n            if (x, y) in init_opts:\n                s = init_opts[x, y].opts\n                if {1, 2} <= s:\n                    s.remove(2)\n                if {-1, -2} <= s:\n                    s.remove(-2)\n\n    def helper():  # returns True if success and store everything, otherwise None\n        my_opts = init_opts.copy()\n        sign = START_PLAYER  # player 1 always starts\n\n        for t, move in enumerate(transcript):\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                check_no_jumps = [a for a, p in my_opts.items() if p.jumped >= t and p.opts <= {sign, 2 * sign}]\n            else:\n                for a, b in zip(move, move[1:]):\n                    my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n                check_no_jumps = [b]\n\n            for x, y in check_no_jumps:\n                p = my_opts[x, y]\n                [o] = p.opts\n                assert o * sign > 0\n                dys = [o] if (abs(o) == 1 and p.promoted >= t) else [-1, 1]  # only check forward jumps\n                for dx in [-1, 1]:\n                    for dy in dys:\n                        target_o = my_opts.get((x + 2 * dx, y + 2 * dy))\n                        if target_o is not None and (0 in target_o.opts or target_o.jumped < t):\n                            mid_o = my_opts[x + dx, y + dy]\n                            if mid_o.jumped > t and mid_o.opts <= {-sign, -2 * sign}:  # ok if jumped at t\n                                if target_o.jumped < t or target_o.opts == {0}:\n                                    return False\n                                old_opts = target_o.opts\n                                for v in target_o.opts:\n                                    if v != 0:\n                                        target_o.opts = {v}\n                                        h = helper()\n                                        if h:\n                                            return True\n                                target_o.opts = old_opts\n                                return False\n\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                a, b = move[0], move[1]\n                my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n\n            sign *= -1\n        return True\n\n    res = helper()\n    assert res\n\n    def get_opt(opts):\n        if 0 in opts.opts:\n            return 0\n        assert len(opts.opts) == 1\n        return list(opts.opts)[0]\n\n    return [[x, y, get_opt(opts)] for (x, y), opts in init_opts.items()]"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem C: Checks Post Facto](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nNobody solved this problem during the competition -- it is pretty difficult!",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "CheckersPosition_4",
    "sat": "def sat(position: List[List[int]], transcript=[[[5, 1], [3, 3], [5, 5], [3, 7]], [[7, 3], [5, 1]], [[6, 0], [4, 2]], [[3, 5], [2, 4]], [[1, 3], [3, 5]], [[7, 5], [6, 4]], [[1, 1], [2, 2]], [[6, 4], [7, 3]], [[4, 2], [3, 3]], [[6, 6], [5, 5]], [[0, 2], [1, 3]], [[5, 7], [4, 6]], [[3, 5], [5, 7]], [[1, 5], [2, 4]], [[3, 3], [1, 5]], [[0, 6], [2, 4], [0, 2]], [[2, 2], [1, 3]], [[5, 5], [4, 4]], [[7, 1], [6, 2]], [[7, 3], [5, 1]], [[1, 3], [2, 4]], [[7, 7], [6, 6]], [[5, 7], [7, 5]], [[0, 2], [1, 1]], [[0, 0], [2, 2]], [[4, 4], [5, 3]], [[7, 5], [6, 4]], [[5, 3], [4, 2]], [[6, 4], [7, 5]], [[5, 1], [6, 0]], [[2, 4], [3, 5]], [[6, 0], [7, 1]], [[2, 2], [1, 3]], [[7, 1], [6, 0]], [[3, 5], [4, 6]], [[4, 2], [5, 1]], [[2, 0], [3, 1]], [[6, 0], [7, 1]], [[1, 3], [0, 4]], [[5, 1], [6, 0]], [[7, 5], [6, 6]], [[7, 1], [6, 2]], [[6, 6], [7, 7]], [[6, 0], [5, 1]], [[7, 7], [6, 6]], [[6, 2], [5, 3]], [[3, 1], [4, 2]], [[5, 3], [3, 1]], [[6, 6], [5, 5]], [[3, 1], [2, 0]], [[3, 7], [2, 6]], [[2, 0], [3, 1]], [[5, 5], [4, 4]], [[5, 1], [6, 2]], [[4, 4], [5, 5]], [[3, 1], [2, 2]], [[0, 4], [1, 5]], [[2, 2], [3, 3]], [[2, 6], [1, 7]], [[3, 3], [2, 2]], [[4, 6], [5, 7]], [[2, 2], [3, 3]], [[1, 7], [2, 6]], [[6, 2], [5, 3]], [[5, 7], [4, 6]]]):\n    \"\"\"\n    You are given a partial transcript a checkers game. Find an initial position such that the transcript\n    would be a legal set of moves. The board positions are [x, y] pairs with 0 <= x, y < 8 and x + y even.\n    There are two players which we call -1 and 1 for convenience, and player 1 must move first in transcript.\n    The initial position is represented as a list [x, y, piece] where piece means:\n    * 0 is empty square\n    * 1 or -1 is piece that moves only in the y = 1 or y = -1 dir, respectively\n    * 2 or -2 is king for player 1 or player 2 respectively\n\n    Additional rules:\n    * You must jump if you can, and you must continue jumping until one can't any longer.\n    * You cannot start the position with any non-kings on your last rank.\n    * Promotion happens after the turn ends\n    \"\"\"\n    board = {(x, y): 0 for x in range(8) for y in range(8) if (x + y) % 2 == 0}  # empty board, 0 = empty\n    for x, y, p in position:\n        assert -2 <= p <= 2 and board[x, y] == 0  # -1, 1 is regular piece, -2, 2 is king\n        board[x, y] = p\n\n    def has_a_jump(x, y):\n        p = board[x, y]  # piece to move\n        deltas = [(dx, dy) for dx in [-1, 1] for dy in [-1, 1] if dy != -p]  # don't check backwards for non-kings\n        return any(board.get((x + 2 * dx, y + 2 * dy)) == 0 and board[x + dx, y + dy] * p < 0 for dx, dy in deltas)\n\n    sign = 1  # player 1 moves first\n    for move in transcript:\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = board[start]  # piece to move\n        assert p * sign > 0, \"Moving square must be non-empty and players must be alternate signs\"\n        assert all(board[x, y] == 0 for x, y in move if [x, y] != move[0]), \"Moved to an occupied square\"\n\n        for (x1, y1), (x2, y2) in zip(move, move[1:]):\n            assert abs(p) != 1 or (y2 - y1) * p > 0, \"Non-kings can only move forward (in direction of sign)\"\n            if abs(x2 - x1) == 1:  # non-jump\n                assert not any(has_a_jump(*a) for a in board if board[a] * p > 0), \"Must make a jump if possible\"\n                break\n            mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n            assert board[mid] * p < 0, \"Can only jump over piece of opposite sign\"\n            board[mid] = 0\n        board[start], board[end] = 0, p\n        assert abs(x2 - x1) == 1 or not has_a_jump(*end)\n        if abs(p) == 1 and any(y in {0, 7} for x, y in move[1:]):\n            board[end] *= 2  # king me at the end of turn after any jumps are done!\n        sign *= -1\n\n    return True",
    "sols": [
      "def sol(transcript=[[[5, 1], [3, 3], [5, 5], [3, 7]], [[7, 3], [5, 1]], [[6, 0], [4, 2]], [[3, 5], [2, 4]], [[1, 3], [3, 5]], [[7, 5], [6, 4]], [[1, 1], [2, 2]], [[6, 4], [7, 3]], [[4, 2], [3, 3]], [[6, 6], [5, 5]], [[0, 2], [1, 3]], [[5, 7], [4, 6]], [[3, 5], [5, 7]], [[1, 5], [2, 4]], [[3, 3], [1, 5]], [[0, 6], [2, 4], [0, 2]], [[2, 2], [1, 3]], [[5, 5], [4, 4]], [[7, 1], [6, 2]], [[7, 3], [5, 1]], [[1, 3], [2, 4]], [[7, 7], [6, 6]], [[5, 7], [7, 5]], [[0, 2], [1, 1]], [[0, 0], [2, 2]], [[4, 4], [5, 3]], [[7, 5], [6, 4]], [[5, 3], [4, 2]], [[6, 4], [7, 5]], [[5, 1], [6, 0]], [[2, 4], [3, 5]], [[6, 0], [7, 1]], [[2, 2], [1, 3]], [[7, 1], [6, 0]], [[3, 5], [4, 6]], [[4, 2], [5, 1]], [[2, 0], [3, 1]], [[6, 0], [7, 1]], [[1, 3], [0, 4]], [[5, 1], [6, 0]], [[7, 5], [6, 6]], [[7, 1], [6, 2]], [[6, 6], [7, 7]], [[6, 0], [5, 1]], [[7, 7], [6, 6]], [[6, 2], [5, 3]], [[3, 1], [4, 2]], [[5, 3], [3, 1]], [[6, 6], [5, 5]], [[3, 1], [2, 0]], [[3, 7], [2, 6]], [[2, 0], [3, 1]], [[5, 5], [4, 4]], [[5, 1], [6, 2]], [[4, 4], [5, 5]], [[3, 1], [2, 2]], [[0, 4], [1, 5]], [[2, 2], [3, 3]], [[2, 6], [1, 7]], [[3, 3], [2, 2]], [[4, 6], [5, 7]], [[2, 2], [3, 3]], [[1, 7], [2, 6]], [[6, 2], [5, 3]], [[5, 7], [4, 6]]]):\n    START_PLAYER = 1  # assumed\n\n    class InitOpts:\n        def __init__(self, x, y):\n            self.x, self.y = x, y\n            self.opts = {-2, -1, 0, 1, 2}\n            if y == 0:\n                self.opts.remove(-1)\n            if y == 7:\n                self.opts.remove(1)\n            self.promoted = 2 ** 63  # on which step was it promoted t >= 0\n            self.jumped = 2 ** 63  # on which step was it jumped t >= 0\n\n    # def board2str(board):  # for debugging\n    #     mapping = \".bBWw\"\n    #     ans = \"\"\n    #     for y in range(7, -1, -1):\n    #         ans += \"\".join(\" \" if (x+y)%2 else mapping[board[x,y]] for x in range(8)) + \"\\n\"\n    #     return ans\n\n    init_opts = {(x, y): InitOpts(x, y) for x in range(8) for y in range(8) if (x + y) % 2 == 0}\n    # board = {(x, y): (1 if y < 3 else -1 if y > 4 else 0) for x in range(8) for y in range(8) if\n    #          (x + y) % 2 == 0}  # new board\n\n    transcript = [[tuple(a) for a in move] for move in transcript]\n\n    permuted_opts = init_opts.copy()\n    sign = START_PLAYER\n    for t, move in enumerate(transcript):\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = permuted_opts[start]  # opts to move\n        assert p.jumped >= t\n        p.opts -= {-sign, -2 * sign, 0}\n        if any((y2 - y1) * sign < 0 for (x1, y1), (x2, y2) in zip(move, move[1:])):  # backward move!\n            if p.promoted >= t:\n                p.opts -= {sign}  # must be a king!\n\n        for a, b in zip(move, move[1:]):\n            if permuted_opts[b].jumped >= t:\n                permuted_opts[b].opts -= {-2, -1, 1, 2}  # must be empty\n            assert permuted_opts[a].jumped >= t\n            permuted_opts[a], permuted_opts[b] = permuted_opts[b], permuted_opts[a]\n            # board[a], board[b] = board[b], board[a]\n            (x1, y1), (x2, y2) = a, b\n            if abs(x2 - x1) == 2:  # jump\n                mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n                assert permuted_opts[mid].jumped >= t\n                permuted_opts[mid].opts -= {0, sign, 2 * sign}  # Can only jump over piece of opposite sign\n                permuted_opts[mid].jumped = t\n                # board[mid] = 0\n\n        if any(y in {0, 7} for x, y in move[1:]):\n            if p.promoted > t:\n                p.promoted = t\n            # if abs(board[x2, y2]) == 1:\n            #     board[x2, y2] *= 2\n\n        sign *= -1\n\n    for y in range(7, -1, -1):\n        for x in range(8):\n            if (x, y) in init_opts:\n                s = init_opts[x, y].opts\n                if {1, 2} <= s:\n                    s.remove(2)\n                if {-1, -2} <= s:\n                    s.remove(-2)\n\n    def helper():  # returns True if success and store everything, otherwise None\n        my_opts = init_opts.copy()\n        sign = START_PLAYER  # player 1 always starts\n\n        for t, move in enumerate(transcript):\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                check_no_jumps = [a for a, p in my_opts.items() if p.jumped >= t and p.opts <= {sign, 2 * sign}]\n            else:\n                for a, b in zip(move, move[1:]):\n                    my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n                check_no_jumps = [b]\n\n            for x, y in check_no_jumps:\n                p = my_opts[x, y]\n                [o] = p.opts\n                assert o * sign > 0\n                dys = [o] if (abs(o) == 1 and p.promoted >= t) else [-1, 1]  # only check forward jumps\n                for dx in [-1, 1]:\n                    for dy in dys:\n                        target_o = my_opts.get((x + 2 * dx, y + 2 * dy))\n                        if target_o is not None and (0 in target_o.opts or target_o.jumped < t):\n                            mid_o = my_opts[x + dx, y + dy]\n                            if mid_o.jumped > t and mid_o.opts <= {-sign, -2 * sign}:  # ok if jumped at t\n                                if target_o.jumped < t or target_o.opts == {0}:\n                                    return False\n                                old_opts = target_o.opts\n                                for v in target_o.opts:\n                                    if v != 0:\n                                        target_o.opts = {v}\n                                        h = helper()\n                                        if h:\n                                            return True\n                                target_o.opts = old_opts\n                                return False\n\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                a, b = move[0], move[1]\n                my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n\n            sign *= -1\n        return True\n\n    res = helper()\n    assert res\n\n    def get_opt(opts):\n        if 0 in opts.opts:\n            return 0\n        assert len(opts.opts) == 1\n        return list(opts.opts)[0]\n\n    return [[x, y, get_opt(opts)] for (x, y), opts in init_opts.items()]"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem C: Checks Post Facto](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nNobody solved this problem during the competition -- it is pretty difficult!",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "CheckersPosition_5",
    "sat": "def sat(position: List[List[int]], transcript=[[[5, 1], [4, 2]], [[2, 6], [3, 5]], [[4, 2], [5, 3]], [[4, 0], [3, 1]], [[2, 0], [4, 2]], [[5, 7], [6, 6]], [[5, 3], [4, 4]], [[3, 5], [5, 3], [3, 1]], [[7, 3], [6, 4]], [[7, 5], [5, 3]], [[1, 1], [2, 2]], [[5, 3], [6, 2]], [[0, 2], [1, 3]], [[6, 6], [5, 5]], [[1, 3], [0, 4]], [[5, 5], [4, 4]], [[0, 4], [1, 5]], [[0, 6], [2, 4]], [[2, 2], [3, 3]]]):\n    \"\"\"\n    You are given a partial transcript a checkers game. Find an initial position such that the transcript\n    would be a legal set of moves. The board positions are [x, y] pairs with 0 <= x, y < 8 and x + y even.\n    There are two players which we call -1 and 1 for convenience, and player 1 must move first in transcript.\n    The initial position is represented as a list [x, y, piece] where piece means:\n    * 0 is empty square\n    * 1 or -1 is piece that moves only in the y = 1 or y = -1 dir, respectively\n    * 2 or -2 is king for player 1 or player 2 respectively\n\n    Additional rules:\n    * You must jump if you can, and you must continue jumping until one can't any longer.\n    * You cannot start the position with any non-kings on your last rank.\n    * Promotion happens after the turn ends\n    \"\"\"\n    board = {(x, y): 0 for x in range(8) for y in range(8) if (x + y) % 2 == 0}  # empty board, 0 = empty\n    for x, y, p in position:\n        assert -2 <= p <= 2 and board[x, y] == 0  # -1, 1 is regular piece, -2, 2 is king\n        board[x, y] = p\n\n    def has_a_jump(x, y):\n        p = board[x, y]  # piece to move\n        deltas = [(dx, dy) for dx in [-1, 1] for dy in [-1, 1] if dy != -p]  # don't check backwards for non-kings\n        return any(board.get((x + 2 * dx, y + 2 * dy)) == 0 and board[x + dx, y + dy] * p < 0 for dx, dy in deltas)\n\n    sign = 1  # player 1 moves first\n    for move in transcript:\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = board[start]  # piece to move\n        assert p * sign > 0, \"Moving square must be non-empty and players must be alternate signs\"\n        assert all(board[x, y] == 0 for x, y in move if [x, y] != move[0]), \"Moved to an occupied square\"\n\n        for (x1, y1), (x2, y2) in zip(move, move[1:]):\n            assert abs(p) != 1 or (y2 - y1) * p > 0, \"Non-kings can only move forward (in direction of sign)\"\n            if abs(x2 - x1) == 1:  # non-jump\n                assert not any(has_a_jump(*a) for a in board if board[a] * p > 0), \"Must make a jump if possible\"\n                break\n            mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n            assert board[mid] * p < 0, \"Can only jump over piece of opposite sign\"\n            board[mid] = 0\n        board[start], board[end] = 0, p\n        assert abs(x2 - x1) == 1 or not has_a_jump(*end)\n        if abs(p) == 1 and any(y in {0, 7} for x, y in move[1:]):\n            board[end] *= 2  # king me at the end of turn after any jumps are done!\n        sign *= -1\n\n    return True",
    "sols": [
      "def sol(transcript=[[[5, 1], [4, 2]], [[2, 6], [3, 5]], [[4, 2], [5, 3]], [[4, 0], [3, 1]], [[2, 0], [4, 2]], [[5, 7], [6, 6]], [[5, 3], [4, 4]], [[3, 5], [5, 3], [3, 1]], [[7, 3], [6, 4]], [[7, 5], [5, 3]], [[1, 1], [2, 2]], [[5, 3], [6, 2]], [[0, 2], [1, 3]], [[6, 6], [5, 5]], [[1, 3], [0, 4]], [[5, 5], [4, 4]], [[0, 4], [1, 5]], [[0, 6], [2, 4]], [[2, 2], [3, 3]]]):\n    START_PLAYER = 1  # assumed\n\n    class InitOpts:\n        def __init__(self, x, y):\n            self.x, self.y = x, y\n            self.opts = {-2, -1, 0, 1, 2}\n            if y == 0:\n                self.opts.remove(-1)\n            if y == 7:\n                self.opts.remove(1)\n            self.promoted = 2 ** 63  # on which step was it promoted t >= 0\n            self.jumped = 2 ** 63  # on which step was it jumped t >= 0\n\n    # def board2str(board):  # for debugging\n    #     mapping = \".bBWw\"\n    #     ans = \"\"\n    #     for y in range(7, -1, -1):\n    #         ans += \"\".join(\" \" if (x+y)%2 else mapping[board[x,y]] for x in range(8)) + \"\\n\"\n    #     return ans\n\n    init_opts = {(x, y): InitOpts(x, y) for x in range(8) for y in range(8) if (x + y) % 2 == 0}\n    # board = {(x, y): (1 if y < 3 else -1 if y > 4 else 0) for x in range(8) for y in range(8) if\n    #          (x + y) % 2 == 0}  # new board\n\n    transcript = [[tuple(a) for a in move] for move in transcript]\n\n    permuted_opts = init_opts.copy()\n    sign = START_PLAYER\n    for t, move in enumerate(transcript):\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = permuted_opts[start]  # opts to move\n        assert p.jumped >= t\n        p.opts -= {-sign, -2 * sign, 0}\n        if any((y2 - y1) * sign < 0 for (x1, y1), (x2, y2) in zip(move, move[1:])):  # backward move!\n            if p.promoted >= t:\n                p.opts -= {sign}  # must be a king!\n\n        for a, b in zip(move, move[1:]):\n            if permuted_opts[b].jumped >= t:\n                permuted_opts[b].opts -= {-2, -1, 1, 2}  # must be empty\n            assert permuted_opts[a].jumped >= t\n            permuted_opts[a], permuted_opts[b] = permuted_opts[b], permuted_opts[a]\n            # board[a], board[b] = board[b], board[a]\n            (x1, y1), (x2, y2) = a, b\n            if abs(x2 - x1) == 2:  # jump\n                mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n                assert permuted_opts[mid].jumped >= t\n                permuted_opts[mid].opts -= {0, sign, 2 * sign}  # Can only jump over piece of opposite sign\n                permuted_opts[mid].jumped = t\n                # board[mid] = 0\n\n        if any(y in {0, 7} for x, y in move[1:]):\n            if p.promoted > t:\n                p.promoted = t\n            # if abs(board[x2, y2]) == 1:\n            #     board[x2, y2] *= 2\n\n        sign *= -1\n\n    for y in range(7, -1, -1):\n        for x in range(8):\n            if (x, y) in init_opts:\n                s = init_opts[x, y].opts\n                if {1, 2} <= s:\n                    s.remove(2)\n                if {-1, -2} <= s:\n                    s.remove(-2)\n\n    def helper():  # returns True if success and store everything, otherwise None\n        my_opts = init_opts.copy()\n        sign = START_PLAYER  # player 1 always starts\n\n        for t, move in enumerate(transcript):\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                check_no_jumps = [a for a, p in my_opts.items() if p.jumped >= t and p.opts <= {sign, 2 * sign}]\n            else:\n                for a, b in zip(move, move[1:]):\n                    my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n                check_no_jumps = [b]\n\n            for x, y in check_no_jumps:\n                p = my_opts[x, y]\n                [o] = p.opts\n                assert o * sign > 0\n                dys = [o] if (abs(o) == 1 and p.promoted >= t) else [-1, 1]  # only check forward jumps\n                for dx in [-1, 1]:\n                    for dy in dys:\n                        target_o = my_opts.get((x + 2 * dx, y + 2 * dy))\n                        if target_o is not None and (0 in target_o.opts or target_o.jumped < t):\n                            mid_o = my_opts[x + dx, y + dy]\n                            if mid_o.jumped > t and mid_o.opts <= {-sign, -2 * sign}:  # ok if jumped at t\n                                if target_o.jumped < t or target_o.opts == {0}:\n                                    return False\n                                old_opts = target_o.opts\n                                for v in target_o.opts:\n                                    if v != 0:\n                                        target_o.opts = {v}\n                                        h = helper()\n                                        if h:\n                                            return True\n                                target_o.opts = old_opts\n                                return False\n\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                a, b = move[0], move[1]\n                my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n\n            sign *= -1\n        return True\n\n    res = helper()\n    assert res\n\n    def get_opt(opts):\n        if 0 in opts.opts:\n            return 0\n        assert len(opts.opts) == 1\n        return list(opts.opts)[0]\n\n    return [[x, y, get_opt(opts)] for (x, y), opts in init_opts.items()]"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem C: Checks Post Facto](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nNobody solved this problem during the competition -- it is pretty difficult!",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "CheckersPosition_6",
    "sat": "def sat(position: List[List[int]], transcript=[[[0, 0], [1, 1]], [[7, 7], [6, 6]], [[1, 1], [2, 2]], [[6, 2], [7, 1]], [[5, 1], [4, 2]], [[1, 7], [2, 6]], [[0, 6], [1, 7]], [[7, 3], [6, 2]], [[1, 7], [3, 5]], [[5, 5], [4, 4]], [[3, 5], [5, 3]], [[7, 5], [6, 4]], [[5, 3], [7, 5], [5, 7]], [[6, 2], [5, 1]], [[4, 0], [6, 2]], [[1, 3], [0, 2]], [[5, 7], [6, 6]], [[0, 2], [1, 1]], [[4, 2], [5, 3]], [[1, 1], [0, 0]], [[3, 1], [4, 2]], [[0, 4], [1, 3]], [[2, 2], [0, 4]], [[0, 0], [1, 1]], [[5, 3], [4, 4]], [[1, 1], [0, 2]], [[6, 0], [5, 1]], [[0, 2], [1, 1]], [[6, 6], [7, 5]], [[1, 1], [2, 0]], [[6, 2], [7, 3]], [[2, 0], [1, 1]], [[4, 4], [3, 5]], [[7, 1], [6, 0]], [[7, 5], [6, 6]], [[1, 1], [2, 0]], [[7, 3], [6, 4]], [[6, 0], [7, 1]], [[6, 6], [7, 7]], [[7, 1], [6, 0]], [[6, 4], [5, 5]], [[6, 0], [7, 1]], [[5, 1], [6, 2]], [[7, 1], [5, 3], [3, 1]], [[3, 3], [2, 4]], [[3, 1], [4, 0]], [[7, 7], [6, 6]], [[2, 0], [1, 1]], [[6, 6], [7, 7]], [[1, 1], [0, 2]], [[7, 7], [6, 6]], [[4, 0], [3, 1]], [[3, 5], [4, 6]], [[3, 1], [2, 0]], [[2, 4], [1, 5]], [[2, 0], [1, 1]], [[1, 5], [0, 6]], [[0, 2], [1, 3]], [[4, 6], [5, 7]], [[1, 1], [0, 2]], [[5, 5], [4, 6]], [[0, 2], [1, 1]], [[0, 6], [1, 7]], [[1, 1], [2, 2]], [[1, 7], [2, 6]], [[2, 2], [3, 1]], [[2, 6], [3, 5]], [[3, 1], [2, 2]], [[6, 6], [7, 7]], [[2, 2], [1, 1]], [[3, 5], [2, 6]], [[1, 3], [2, 4]], [[2, 6], [1, 7]], [[1, 1], [0, 2]], [[4, 6], [3, 7]], [[2, 4], [3, 5]], [[1, 7], [0, 6]], [[3, 5], [4, 6]], [[3, 7], [5, 5]], [[0, 2], [1, 1]], [[5, 5], [4, 4]], [[1, 1], [2, 0]], [[4, 4], [5, 5]], [[2, 0], [3, 1]], [[5, 7], [4, 6]], [[3, 1], [2, 2]], [[0, 4], [1, 5]], [[2, 2], [1, 1]], [[7, 7], [6, 6]], [[1, 1], [0, 0]], [[4, 6], [3, 7]], [[0, 0], [1, 1]], [[5, 5], [4, 4]], [[1, 1], [2, 0]], [[4, 4], [3, 3]]]):\n    \"\"\"\n    You are given a partial transcript a checkers game. Find an initial position such that the transcript\n    would be a legal set of moves. The board positions are [x, y] pairs with 0 <= x, y < 8 and x + y even.\n    There are two players which we call -1 and 1 for convenience, and player 1 must move first in transcript.\n    The initial position is represented as a list [x, y, piece] where piece means:\n    * 0 is empty square\n    * 1 or -1 is piece that moves only in the y = 1 or y = -1 dir, respectively\n    * 2 or -2 is king for player 1 or player 2 respectively\n\n    Additional rules:\n    * You must jump if you can, and you must continue jumping until one can't any longer.\n    * You cannot start the position with any non-kings on your last rank.\n    * Promotion happens after the turn ends\n    \"\"\"\n    board = {(x, y): 0 for x in range(8) for y in range(8) if (x + y) % 2 == 0}  # empty board, 0 = empty\n    for x, y, p in position:\n        assert -2 <= p <= 2 and board[x, y] == 0  # -1, 1 is regular piece, -2, 2 is king\n        board[x, y] = p\n\n    def has_a_jump(x, y):\n        p = board[x, y]  # piece to move\n        deltas = [(dx, dy) for dx in [-1, 1] for dy in [-1, 1] if dy != -p]  # don't check backwards for non-kings\n        return any(board.get((x + 2 * dx, y + 2 * dy)) == 0 and board[x + dx, y + dy] * p < 0 for dx, dy in deltas)\n\n    sign = 1  # player 1 moves first\n    for move in transcript:\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = board[start]  # piece to move\n        assert p * sign > 0, \"Moving square must be non-empty and players must be alternate signs\"\n        assert all(board[x, y] == 0 for x, y in move if [x, y] != move[0]), \"Moved to an occupied square\"\n\n        for (x1, y1), (x2, y2) in zip(move, move[1:]):\n            assert abs(p) != 1 or (y2 - y1) * p > 0, \"Non-kings can only move forward (in direction of sign)\"\n            if abs(x2 - x1) == 1:  # non-jump\n                assert not any(has_a_jump(*a) for a in board if board[a] * p > 0), \"Must make a jump if possible\"\n                break\n            mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n            assert board[mid] * p < 0, \"Can only jump over piece of opposite sign\"\n            board[mid] = 0\n        board[start], board[end] = 0, p\n        assert abs(x2 - x1) == 1 or not has_a_jump(*end)\n        if abs(p) == 1 and any(y in {0, 7} for x, y in move[1:]):\n            board[end] *= 2  # king me at the end of turn after any jumps are done!\n        sign *= -1\n\n    return True",
    "sols": [
      "def sol(transcript=[[[0, 0], [1, 1]], [[7, 7], [6, 6]], [[1, 1], [2, 2]], [[6, 2], [7, 1]], [[5, 1], [4, 2]], [[1, 7], [2, 6]], [[0, 6], [1, 7]], [[7, 3], [6, 2]], [[1, 7], [3, 5]], [[5, 5], [4, 4]], [[3, 5], [5, 3]], [[7, 5], [6, 4]], [[5, 3], [7, 5], [5, 7]], [[6, 2], [5, 1]], [[4, 0], [6, 2]], [[1, 3], [0, 2]], [[5, 7], [6, 6]], [[0, 2], [1, 1]], [[4, 2], [5, 3]], [[1, 1], [0, 0]], [[3, 1], [4, 2]], [[0, 4], [1, 3]], [[2, 2], [0, 4]], [[0, 0], [1, 1]], [[5, 3], [4, 4]], [[1, 1], [0, 2]], [[6, 0], [5, 1]], [[0, 2], [1, 1]], [[6, 6], [7, 5]], [[1, 1], [2, 0]], [[6, 2], [7, 3]], [[2, 0], [1, 1]], [[4, 4], [3, 5]], [[7, 1], [6, 0]], [[7, 5], [6, 6]], [[1, 1], [2, 0]], [[7, 3], [6, 4]], [[6, 0], [7, 1]], [[6, 6], [7, 7]], [[7, 1], [6, 0]], [[6, 4], [5, 5]], [[6, 0], [7, 1]], [[5, 1], [6, 2]], [[7, 1], [5, 3], [3, 1]], [[3, 3], [2, 4]], [[3, 1], [4, 0]], [[7, 7], [6, 6]], [[2, 0], [1, 1]], [[6, 6], [7, 7]], [[1, 1], [0, 2]], [[7, 7], [6, 6]], [[4, 0], [3, 1]], [[3, 5], [4, 6]], [[3, 1], [2, 0]], [[2, 4], [1, 5]], [[2, 0], [1, 1]], [[1, 5], [0, 6]], [[0, 2], [1, 3]], [[4, 6], [5, 7]], [[1, 1], [0, 2]], [[5, 5], [4, 6]], [[0, 2], [1, 1]], [[0, 6], [1, 7]], [[1, 1], [2, 2]], [[1, 7], [2, 6]], [[2, 2], [3, 1]], [[2, 6], [3, 5]], [[3, 1], [2, 2]], [[6, 6], [7, 7]], [[2, 2], [1, 1]], [[3, 5], [2, 6]], [[1, 3], [2, 4]], [[2, 6], [1, 7]], [[1, 1], [0, 2]], [[4, 6], [3, 7]], [[2, 4], [3, 5]], [[1, 7], [0, 6]], [[3, 5], [4, 6]], [[3, 7], [5, 5]], [[0, 2], [1, 1]], [[5, 5], [4, 4]], [[1, 1], [2, 0]], [[4, 4], [5, 5]], [[2, 0], [3, 1]], [[5, 7], [4, 6]], [[3, 1], [2, 2]], [[0, 4], [1, 5]], [[2, 2], [1, 1]], [[7, 7], [6, 6]], [[1, 1], [0, 0]], [[4, 6], [3, 7]], [[0, 0], [1, 1]], [[5, 5], [4, 4]], [[1, 1], [2, 0]], [[4, 4], [3, 3]]]):\n    START_PLAYER = 1  # assumed\n\n    class InitOpts:\n        def __init__(self, x, y):\n            self.x, self.y = x, y\n            self.opts = {-2, -1, 0, 1, 2}\n            if y == 0:\n                self.opts.remove(-1)\n            if y == 7:\n                self.opts.remove(1)\n            self.promoted = 2 ** 63  # on which step was it promoted t >= 0\n            self.jumped = 2 ** 63  # on which step was it jumped t >= 0\n\n    # def board2str(board):  # for debugging\n    #     mapping = \".bBWw\"\n    #     ans = \"\"\n    #     for y in range(7, -1, -1):\n    #         ans += \"\".join(\" \" if (x+y)%2 else mapping[board[x,y]] for x in range(8)) + \"\\n\"\n    #     return ans\n\n    init_opts = {(x, y): InitOpts(x, y) for x in range(8) for y in range(8) if (x + y) % 2 == 0}\n    # board = {(x, y): (1 if y < 3 else -1 if y > 4 else 0) for x in range(8) for y in range(8) if\n    #          (x + y) % 2 == 0}  # new board\n\n    transcript = [[tuple(a) for a in move] for move in transcript]\n\n    permuted_opts = init_opts.copy()\n    sign = START_PLAYER\n    for t, move in enumerate(transcript):\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = permuted_opts[start]  # opts to move\n        assert p.jumped >= t\n        p.opts -= {-sign, -2 * sign, 0}\n        if any((y2 - y1) * sign < 0 for (x1, y1), (x2, y2) in zip(move, move[1:])):  # backward move!\n            if p.promoted >= t:\n                p.opts -= {sign}  # must be a king!\n\n        for a, b in zip(move, move[1:]):\n            if permuted_opts[b].jumped >= t:\n                permuted_opts[b].opts -= {-2, -1, 1, 2}  # must be empty\n            assert permuted_opts[a].jumped >= t\n            permuted_opts[a], permuted_opts[b] = permuted_opts[b], permuted_opts[a]\n            # board[a], board[b] = board[b], board[a]\n            (x1, y1), (x2, y2) = a, b\n            if abs(x2 - x1) == 2:  # jump\n                mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n                assert permuted_opts[mid].jumped >= t\n                permuted_opts[mid].opts -= {0, sign, 2 * sign}  # Can only jump over piece of opposite sign\n                permuted_opts[mid].jumped = t\n                # board[mid] = 0\n\n        if any(y in {0, 7} for x, y in move[1:]):\n            if p.promoted > t:\n                p.promoted = t\n            # if abs(board[x2, y2]) == 1:\n            #     board[x2, y2] *= 2\n\n        sign *= -1\n\n    for y in range(7, -1, -1):\n        for x in range(8):\n            if (x, y) in init_opts:\n                s = init_opts[x, y].opts\n                if {1, 2} <= s:\n                    s.remove(2)\n                if {-1, -2} <= s:\n                    s.remove(-2)\n\n    def helper():  # returns True if success and store everything, otherwise None\n        my_opts = init_opts.copy()\n        sign = START_PLAYER  # player 1 always starts\n\n        for t, move in enumerate(transcript):\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                check_no_jumps = [a for a, p in my_opts.items() if p.jumped >= t and p.opts <= {sign, 2 * sign}]\n            else:\n                for a, b in zip(move, move[1:]):\n                    my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n                check_no_jumps = [b]\n\n            for x, y in check_no_jumps:\n                p = my_opts[x, y]\n                [o] = p.opts\n                assert o * sign > 0\n                dys = [o] if (abs(o) == 1 and p.promoted >= t) else [-1, 1]  # only check forward jumps\n                for dx in [-1, 1]:\n                    for dy in dys:\n                        target_o = my_opts.get((x + 2 * dx, y + 2 * dy))\n                        if target_o is not None and (0 in target_o.opts or target_o.jumped < t):\n                            mid_o = my_opts[x + dx, y + dy]\n                            if mid_o.jumped > t and mid_o.opts <= {-sign, -2 * sign}:  # ok if jumped at t\n                                if target_o.jumped < t or target_o.opts == {0}:\n                                    return False\n                                old_opts = target_o.opts\n                                for v in target_o.opts:\n                                    if v != 0:\n                                        target_o.opts = {v}\n                                        h = helper()\n                                        if h:\n                                            return True\n                                target_o.opts = old_opts\n                                return False\n\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                a, b = move[0], move[1]\n                my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n\n            sign *= -1\n        return True\n\n    res = helper()\n    assert res\n\n    def get_opt(opts):\n        if 0 in opts.opts:\n            return 0\n        assert len(opts.opts) == 1\n        return list(opts.opts)[0]\n\n    return [[x, y, get_opt(opts)] for (x, y), opts in init_opts.items()]"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem C: Checks Post Facto](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nNobody solved this problem during the competition -- it is pretty difficult!",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "CheckersPosition_7",
    "sat": "def sat(position: List[List[int]], transcript=[[[5, 7], [4, 6]], [[5, 3], [4, 4]], [[6, 6], [5, 7]], [[4, 4], [5, 3]], [[0, 6], [1, 7]], [[5, 3], [4, 2]], [[4, 6], [3, 7]], [[4, 2], [3, 1]], [[3, 7], [2, 6]], [[5, 1], [4, 0]], [[5, 7], [4, 6]], [[3, 1], [2, 2]], [[2, 6], [1, 5]], [[4, 0], [3, 1]]]):\n    \"\"\"\n    You are given a partial transcript a checkers game. Find an initial position such that the transcript\n    would be a legal set of moves. The board positions are [x, y] pairs with 0 <= x, y < 8 and x + y even.\n    There are two players which we call -1 and 1 for convenience, and player 1 must move first in transcript.\n    The initial position is represented as a list [x, y, piece] where piece means:\n    * 0 is empty square\n    * 1 or -1 is piece that moves only in the y = 1 or y = -1 dir, respectively\n    * 2 or -2 is king for player 1 or player 2 respectively\n\n    Additional rules:\n    * You must jump if you can, and you must continue jumping until one can't any longer.\n    * You cannot start the position with any non-kings on your last rank.\n    * Promotion happens after the turn ends\n    \"\"\"\n    board = {(x, y): 0 for x in range(8) for y in range(8) if (x + y) % 2 == 0}  # empty board, 0 = empty\n    for x, y, p in position:\n        assert -2 <= p <= 2 and board[x, y] == 0  # -1, 1 is regular piece, -2, 2 is king\n        board[x, y] = p\n\n    def has_a_jump(x, y):\n        p = board[x, y]  # piece to move\n        deltas = [(dx, dy) for dx in [-1, 1] for dy in [-1, 1] if dy != -p]  # don't check backwards for non-kings\n        return any(board.get((x + 2 * dx, y + 2 * dy)) == 0 and board[x + dx, y + dy] * p < 0 for dx, dy in deltas)\n\n    sign = 1  # player 1 moves first\n    for move in transcript:\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = board[start]  # piece to move\n        assert p * sign > 0, \"Moving square must be non-empty and players must be alternate signs\"\n        assert all(board[x, y] == 0 for x, y in move if [x, y] != move[0]), \"Moved to an occupied square\"\n\n        for (x1, y1), (x2, y2) in zip(move, move[1:]):\n            assert abs(p) != 1 or (y2 - y1) * p > 0, \"Non-kings can only move forward (in direction of sign)\"\n            if abs(x2 - x1) == 1:  # non-jump\n                assert not any(has_a_jump(*a) for a in board if board[a] * p > 0), \"Must make a jump if possible\"\n                break\n            mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n            assert board[mid] * p < 0, \"Can only jump over piece of opposite sign\"\n            board[mid] = 0\n        board[start], board[end] = 0, p\n        assert abs(x2 - x1) == 1 or not has_a_jump(*end)\n        if abs(p) == 1 and any(y in {0, 7} for x, y in move[1:]):\n            board[end] *= 2  # king me at the end of turn after any jumps are done!\n        sign *= -1\n\n    return True",
    "sols": [
      "def sol(transcript=[[[5, 7], [4, 6]], [[5, 3], [4, 4]], [[6, 6], [5, 7]], [[4, 4], [5, 3]], [[0, 6], [1, 7]], [[5, 3], [4, 2]], [[4, 6], [3, 7]], [[4, 2], [3, 1]], [[3, 7], [2, 6]], [[5, 1], [4, 0]], [[5, 7], [4, 6]], [[3, 1], [2, 2]], [[2, 6], [1, 5]], [[4, 0], [3, 1]]]):\n    START_PLAYER = 1  # assumed\n\n    class InitOpts:\n        def __init__(self, x, y):\n            self.x, self.y = x, y\n            self.opts = {-2, -1, 0, 1, 2}\n            if y == 0:\n                self.opts.remove(-1)\n            if y == 7:\n                self.opts.remove(1)\n            self.promoted = 2 ** 63  # on which step was it promoted t >= 0\n            self.jumped = 2 ** 63  # on which step was it jumped t >= 0\n\n    # def board2str(board):  # for debugging\n    #     mapping = \".bBWw\"\n    #     ans = \"\"\n    #     for y in range(7, -1, -1):\n    #         ans += \"\".join(\" \" if (x+y)%2 else mapping[board[x,y]] for x in range(8)) + \"\\n\"\n    #     return ans\n\n    init_opts = {(x, y): InitOpts(x, y) for x in range(8) for y in range(8) if (x + y) % 2 == 0}\n    # board = {(x, y): (1 if y < 3 else -1 if y > 4 else 0) for x in range(8) for y in range(8) if\n    #          (x + y) % 2 == 0}  # new board\n\n    transcript = [[tuple(a) for a in move] for move in transcript]\n\n    permuted_opts = init_opts.copy()\n    sign = START_PLAYER\n    for t, move in enumerate(transcript):\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = permuted_opts[start]  # opts to move\n        assert p.jumped >= t\n        p.opts -= {-sign, -2 * sign, 0}\n        if any((y2 - y1) * sign < 0 for (x1, y1), (x2, y2) in zip(move, move[1:])):  # backward move!\n            if p.promoted >= t:\n                p.opts -= {sign}  # must be a king!\n\n        for a, b in zip(move, move[1:]):\n            if permuted_opts[b].jumped >= t:\n                permuted_opts[b].opts -= {-2, -1, 1, 2}  # must be empty\n            assert permuted_opts[a].jumped >= t\n            permuted_opts[a], permuted_opts[b] = permuted_opts[b], permuted_opts[a]\n            # board[a], board[b] = board[b], board[a]\n            (x1, y1), (x2, y2) = a, b\n            if abs(x2 - x1) == 2:  # jump\n                mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n                assert permuted_opts[mid].jumped >= t\n                permuted_opts[mid].opts -= {0, sign, 2 * sign}  # Can only jump over piece of opposite sign\n                permuted_opts[mid].jumped = t\n                # board[mid] = 0\n\n        if any(y in {0, 7} for x, y in move[1:]):\n            if p.promoted > t:\n                p.promoted = t\n            # if abs(board[x2, y2]) == 1:\n            #     board[x2, y2] *= 2\n\n        sign *= -1\n\n    for y in range(7, -1, -1):\n        for x in range(8):\n            if (x, y) in init_opts:\n                s = init_opts[x, y].opts\n                if {1, 2} <= s:\n                    s.remove(2)\n                if {-1, -2} <= s:\n                    s.remove(-2)\n\n    def helper():  # returns True if success and store everything, otherwise None\n        my_opts = init_opts.copy()\n        sign = START_PLAYER  # player 1 always starts\n\n        for t, move in enumerate(transcript):\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                check_no_jumps = [a for a, p in my_opts.items() if p.jumped >= t and p.opts <= {sign, 2 * sign}]\n            else:\n                for a, b in zip(move, move[1:]):\n                    my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n                check_no_jumps = [b]\n\n            for x, y in check_no_jumps:\n                p = my_opts[x, y]\n                [o] = p.opts\n                assert o * sign > 0\n                dys = [o] if (abs(o) == 1 and p.promoted >= t) else [-1, 1]  # only check forward jumps\n                for dx in [-1, 1]:\n                    for dy in dys:\n                        target_o = my_opts.get((x + 2 * dx, y + 2 * dy))\n                        if target_o is not None and (0 in target_o.opts or target_o.jumped < t):\n                            mid_o = my_opts[x + dx, y + dy]\n                            if mid_o.jumped > t and mid_o.opts <= {-sign, -2 * sign}:  # ok if jumped at t\n                                if target_o.jumped < t or target_o.opts == {0}:\n                                    return False\n                                old_opts = target_o.opts\n                                for v in target_o.opts:\n                                    if v != 0:\n                                        target_o.opts = {v}\n                                        h = helper()\n                                        if h:\n                                            return True\n                                target_o.opts = old_opts\n                                return False\n\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                a, b = move[0], move[1]\n                my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n\n            sign *= -1\n        return True\n\n    res = helper()\n    assert res\n\n    def get_opt(opts):\n        if 0 in opts.opts:\n            return 0\n        assert len(opts.opts) == 1\n        return list(opts.opts)[0]\n\n    return [[x, y, get_opt(opts)] for (x, y), opts in init_opts.items()]"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem C: Checks Post Facto](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nNobody solved this problem during the competition -- it is pretty difficult!",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "CheckersPosition_8",
    "sat": "def sat(position: List[List[int]], transcript=[[[2, 2], [1, 3]], [[1, 7], [0, 6]], [[6, 2], [7, 3]]]):\n    \"\"\"\n    You are given a partial transcript a checkers game. Find an initial position such that the transcript\n    would be a legal set of moves. The board positions are [x, y] pairs with 0 <= x, y < 8 and x + y even.\n    There are two players which we call -1 and 1 for convenience, and player 1 must move first in transcript.\n    The initial position is represented as a list [x, y, piece] where piece means:\n    * 0 is empty square\n    * 1 or -1 is piece that moves only in the y = 1 or y = -1 dir, respectively\n    * 2 or -2 is king for player 1 or player 2 respectively\n\n    Additional rules:\n    * You must jump if you can, and you must continue jumping until one can't any longer.\n    * You cannot start the position with any non-kings on your last rank.\n    * Promotion happens after the turn ends\n    \"\"\"\n    board = {(x, y): 0 for x in range(8) for y in range(8) if (x + y) % 2 == 0}  # empty board, 0 = empty\n    for x, y, p in position:\n        assert -2 <= p <= 2 and board[x, y] == 0  # -1, 1 is regular piece, -2, 2 is king\n        board[x, y] = p\n\n    def has_a_jump(x, y):\n        p = board[x, y]  # piece to move\n        deltas = [(dx, dy) for dx in [-1, 1] for dy in [-1, 1] if dy != -p]  # don't check backwards for non-kings\n        return any(board.get((x + 2 * dx, y + 2 * dy)) == 0 and board[x + dx, y + dy] * p < 0 for dx, dy in deltas)\n\n    sign = 1  # player 1 moves first\n    for move in transcript:\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = board[start]  # piece to move\n        assert p * sign > 0, \"Moving square must be non-empty and players must be alternate signs\"\n        assert all(board[x, y] == 0 for x, y in move if [x, y] != move[0]), \"Moved to an occupied square\"\n\n        for (x1, y1), (x2, y2) in zip(move, move[1:]):\n            assert abs(p) != 1 or (y2 - y1) * p > 0, \"Non-kings can only move forward (in direction of sign)\"\n            if abs(x2 - x1) == 1:  # non-jump\n                assert not any(has_a_jump(*a) for a in board if board[a] * p > 0), \"Must make a jump if possible\"\n                break\n            mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n            assert board[mid] * p < 0, \"Can only jump over piece of opposite sign\"\n            board[mid] = 0\n        board[start], board[end] = 0, p\n        assert abs(x2 - x1) == 1 or not has_a_jump(*end)\n        if abs(p) == 1 and any(y in {0, 7} for x, y in move[1:]):\n            board[end] *= 2  # king me at the end of turn after any jumps are done!\n        sign *= -1\n\n    return True",
    "sols": [
      "def sol(transcript=[[[2, 2], [1, 3]], [[1, 7], [0, 6]], [[6, 2], [7, 3]]]):\n    START_PLAYER = 1  # assumed\n\n    class InitOpts:\n        def __init__(self, x, y):\n            self.x, self.y = x, y\n            self.opts = {-2, -1, 0, 1, 2}\n            if y == 0:\n                self.opts.remove(-1)\n            if y == 7:\n                self.opts.remove(1)\n            self.promoted = 2 ** 63  # on which step was it promoted t >= 0\n            self.jumped = 2 ** 63  # on which step was it jumped t >= 0\n\n    # def board2str(board):  # for debugging\n    #     mapping = \".bBWw\"\n    #     ans = \"\"\n    #     for y in range(7, -1, -1):\n    #         ans += \"\".join(\" \" if (x+y)%2 else mapping[board[x,y]] for x in range(8)) + \"\\n\"\n    #     return ans\n\n    init_opts = {(x, y): InitOpts(x, y) for x in range(8) for y in range(8) if (x + y) % 2 == 0}\n    # board = {(x, y): (1 if y < 3 else -1 if y > 4 else 0) for x in range(8) for y in range(8) if\n    #          (x + y) % 2 == 0}  # new board\n\n    transcript = [[tuple(a) for a in move] for move in transcript]\n\n    permuted_opts = init_opts.copy()\n    sign = START_PLAYER\n    for t, move in enumerate(transcript):\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = permuted_opts[start]  # opts to move\n        assert p.jumped >= t\n        p.opts -= {-sign, -2 * sign, 0}\n        if any((y2 - y1) * sign < 0 for (x1, y1), (x2, y2) in zip(move, move[1:])):  # backward move!\n            if p.promoted >= t:\n                p.opts -= {sign}  # must be a king!\n\n        for a, b in zip(move, move[1:]):\n            if permuted_opts[b].jumped >= t:\n                permuted_opts[b].opts -= {-2, -1, 1, 2}  # must be empty\n            assert permuted_opts[a].jumped >= t\n            permuted_opts[a], permuted_opts[b] = permuted_opts[b], permuted_opts[a]\n            # board[a], board[b] = board[b], board[a]\n            (x1, y1), (x2, y2) = a, b\n            if abs(x2 - x1) == 2:  # jump\n                mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n                assert permuted_opts[mid].jumped >= t\n                permuted_opts[mid].opts -= {0, sign, 2 * sign}  # Can only jump over piece of opposite sign\n                permuted_opts[mid].jumped = t\n                # board[mid] = 0\n\n        if any(y in {0, 7} for x, y in move[1:]):\n            if p.promoted > t:\n                p.promoted = t\n            # if abs(board[x2, y2]) == 1:\n            #     board[x2, y2] *= 2\n\n        sign *= -1\n\n    for y in range(7, -1, -1):\n        for x in range(8):\n            if (x, y) in init_opts:\n                s = init_opts[x, y].opts\n                if {1, 2} <= s:\n                    s.remove(2)\n                if {-1, -2} <= s:\n                    s.remove(-2)\n\n    def helper():  # returns True if success and store everything, otherwise None\n        my_opts = init_opts.copy()\n        sign = START_PLAYER  # player 1 always starts\n\n        for t, move in enumerate(transcript):\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                check_no_jumps = [a for a, p in my_opts.items() if p.jumped >= t and p.opts <= {sign, 2 * sign}]\n            else:\n                for a, b in zip(move, move[1:]):\n                    my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n                check_no_jumps = [b]\n\n            for x, y in check_no_jumps:\n                p = my_opts[x, y]\n                [o] = p.opts\n                assert o * sign > 0\n                dys = [o] if (abs(o) == 1 and p.promoted >= t) else [-1, 1]  # only check forward jumps\n                for dx in [-1, 1]:\n                    for dy in dys:\n                        target_o = my_opts.get((x + 2 * dx, y + 2 * dy))\n                        if target_o is not None and (0 in target_o.opts or target_o.jumped < t):\n                            mid_o = my_opts[x + dx, y + dy]\n                            if mid_o.jumped > t and mid_o.opts <= {-sign, -2 * sign}:  # ok if jumped at t\n                                if target_o.jumped < t or target_o.opts == {0}:\n                                    return False\n                                old_opts = target_o.opts\n                                for v in target_o.opts:\n                                    if v != 0:\n                                        target_o.opts = {v}\n                                        h = helper()\n                                        if h:\n                                            return True\n                                target_o.opts = old_opts\n                                return False\n\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                a, b = move[0], move[1]\n                my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n\n            sign *= -1\n        return True\n\n    res = helper()\n    assert res\n\n    def get_opt(opts):\n        if 0 in opts.opts:\n            return 0\n        assert len(opts.opts) == 1\n        return list(opts.opts)[0]\n\n    return [[x, y, get_opt(opts)] for (x, y), opts in init_opts.items()]"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem C: Checks Post Facto](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nNobody solved this problem during the competition -- it is pretty difficult!",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "CheckersPosition_9",
    "sat": "def sat(position: List[List[int]], transcript=[[[4, 4], [3, 5]], [[3, 1], [4, 0]], [[6, 6], [5, 5]], [[5, 1], [4, 2]], [[3, 5], [2, 6]], [[0, 0], [1, 1]], [[5, 5], [6, 6]], [[1, 1], [2, 2]], [[6, 6], [7, 5]], [[4, 0], [3, 1]], [[2, 6], [1, 7]], [[3, 1], [4, 0]], [[1, 7], [0, 6]], [[7, 1], [6, 0]], [[0, 6], [1, 7]], [[4, 2], [5, 1]], [[1, 7], [0, 6]], [[5, 1], [6, 2]], [[0, 6], [1, 7]], [[2, 2], [1, 1]], [[7, 5], [6, 6]], [[1, 1], [2, 0]], [[6, 6], [5, 5]], [[6, 2], [5, 1]], [[5, 5], [6, 6]], [[6, 0], [7, 1]], [[6, 6], [5, 7]], [[7, 1], [6, 2]], [[1, 7], [0, 6]], [[6, 2], [7, 3]], [[5, 7], [6, 6]], [[4, 0], [3, 1]], [[6, 6], [7, 5]], [[5, 1], [4, 2]], [[7, 5], [6, 4]], [[7, 3], [5, 5]], [[0, 6], [1, 7]], [[2, 0], [1, 1]]]):\n    \"\"\"\n    You are given a partial transcript a checkers game. Find an initial position such that the transcript\n    would be a legal set of moves. The board positions are [x, y] pairs with 0 <= x, y < 8 and x + y even.\n    There are two players which we call -1 and 1 for convenience, and player 1 must move first in transcript.\n    The initial position is represented as a list [x, y, piece] where piece means:\n    * 0 is empty square\n    * 1 or -1 is piece that moves only in the y = 1 or y = -1 dir, respectively\n    * 2 or -2 is king for player 1 or player 2 respectively\n\n    Additional rules:\n    * You must jump if you can, and you must continue jumping until one can't any longer.\n    * You cannot start the position with any non-kings on your last rank.\n    * Promotion happens after the turn ends\n    \"\"\"\n    board = {(x, y): 0 for x in range(8) for y in range(8) if (x + y) % 2 == 0}  # empty board, 0 = empty\n    for x, y, p in position:\n        assert -2 <= p <= 2 and board[x, y] == 0  # -1, 1 is regular piece, -2, 2 is king\n        board[x, y] = p\n\n    def has_a_jump(x, y):\n        p = board[x, y]  # piece to move\n        deltas = [(dx, dy) for dx in [-1, 1] for dy in [-1, 1] if dy != -p]  # don't check backwards for non-kings\n        return any(board.get((x + 2 * dx, y + 2 * dy)) == 0 and board[x + dx, y + dy] * p < 0 for dx, dy in deltas)\n\n    sign = 1  # player 1 moves first\n    for move in transcript:\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = board[start]  # piece to move\n        assert p * sign > 0, \"Moving square must be non-empty and players must be alternate signs\"\n        assert all(board[x, y] == 0 for x, y in move if [x, y] != move[0]), \"Moved to an occupied square\"\n\n        for (x1, y1), (x2, y2) in zip(move, move[1:]):\n            assert abs(p) != 1 or (y2 - y1) * p > 0, \"Non-kings can only move forward (in direction of sign)\"\n            if abs(x2 - x1) == 1:  # non-jump\n                assert not any(has_a_jump(*a) for a in board if board[a] * p > 0), \"Must make a jump if possible\"\n                break\n            mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n            assert board[mid] * p < 0, \"Can only jump over piece of opposite sign\"\n            board[mid] = 0\n        board[start], board[end] = 0, p\n        assert abs(x2 - x1) == 1 or not has_a_jump(*end)\n        if abs(p) == 1 and any(y in {0, 7} for x, y in move[1:]):\n            board[end] *= 2  # king me at the end of turn after any jumps are done!\n        sign *= -1\n\n    return True",
    "sols": [
      "def sol(transcript=[[[4, 4], [3, 5]], [[3, 1], [4, 0]], [[6, 6], [5, 5]], [[5, 1], [4, 2]], [[3, 5], [2, 6]], [[0, 0], [1, 1]], [[5, 5], [6, 6]], [[1, 1], [2, 2]], [[6, 6], [7, 5]], [[4, 0], [3, 1]], [[2, 6], [1, 7]], [[3, 1], [4, 0]], [[1, 7], [0, 6]], [[7, 1], [6, 0]], [[0, 6], [1, 7]], [[4, 2], [5, 1]], [[1, 7], [0, 6]], [[5, 1], [6, 2]], [[0, 6], [1, 7]], [[2, 2], [1, 1]], [[7, 5], [6, 6]], [[1, 1], [2, 0]], [[6, 6], [5, 5]], [[6, 2], [5, 1]], [[5, 5], [6, 6]], [[6, 0], [7, 1]], [[6, 6], [5, 7]], [[7, 1], [6, 2]], [[1, 7], [0, 6]], [[6, 2], [7, 3]], [[5, 7], [6, 6]], [[4, 0], [3, 1]], [[6, 6], [7, 5]], [[5, 1], [4, 2]], [[7, 5], [6, 4]], [[7, 3], [5, 5]], [[0, 6], [1, 7]], [[2, 0], [1, 1]]]):\n    START_PLAYER = 1  # assumed\n\n    class InitOpts:\n        def __init__(self, x, y):\n            self.x, self.y = x, y\n            self.opts = {-2, -1, 0, 1, 2}\n            if y == 0:\n                self.opts.remove(-1)\n            if y == 7:\n                self.opts.remove(1)\n            self.promoted = 2 ** 63  # on which step was it promoted t >= 0\n            self.jumped = 2 ** 63  # on which step was it jumped t >= 0\n\n    # def board2str(board):  # for debugging\n    #     mapping = \".bBWw\"\n    #     ans = \"\"\n    #     for y in range(7, -1, -1):\n    #         ans += \"\".join(\" \" if (x+y)%2 else mapping[board[x,y]] for x in range(8)) + \"\\n\"\n    #     return ans\n\n    init_opts = {(x, y): InitOpts(x, y) for x in range(8) for y in range(8) if (x + y) % 2 == 0}\n    # board = {(x, y): (1 if y < 3 else -1 if y > 4 else 0) for x in range(8) for y in range(8) if\n    #          (x + y) % 2 == 0}  # new board\n\n    transcript = [[tuple(a) for a in move] for move in transcript]\n\n    permuted_opts = init_opts.copy()\n    sign = START_PLAYER\n    for t, move in enumerate(transcript):\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = permuted_opts[start]  # opts to move\n        assert p.jumped >= t\n        p.opts -= {-sign, -2 * sign, 0}\n        if any((y2 - y1) * sign < 0 for (x1, y1), (x2, y2) in zip(move, move[1:])):  # backward move!\n            if p.promoted >= t:\n                p.opts -= {sign}  # must be a king!\n\n        for a, b in zip(move, move[1:]):\n            if permuted_opts[b].jumped >= t:\n                permuted_opts[b].opts -= {-2, -1, 1, 2}  # must be empty\n            assert permuted_opts[a].jumped >= t\n            permuted_opts[a], permuted_opts[b] = permuted_opts[b], permuted_opts[a]\n            # board[a], board[b] = board[b], board[a]\n            (x1, y1), (x2, y2) = a, b\n            if abs(x2 - x1) == 2:  # jump\n                mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n                assert permuted_opts[mid].jumped >= t\n                permuted_opts[mid].opts -= {0, sign, 2 * sign}  # Can only jump over piece of opposite sign\n                permuted_opts[mid].jumped = t\n                # board[mid] = 0\n\n        if any(y in {0, 7} for x, y in move[1:]):\n            if p.promoted > t:\n                p.promoted = t\n            # if abs(board[x2, y2]) == 1:\n            #     board[x2, y2] *= 2\n\n        sign *= -1\n\n    for y in range(7, -1, -1):\n        for x in range(8):\n            if (x, y) in init_opts:\n                s = init_opts[x, y].opts\n                if {1, 2} <= s:\n                    s.remove(2)\n                if {-1, -2} <= s:\n                    s.remove(-2)\n\n    def helper():  # returns True if success and store everything, otherwise None\n        my_opts = init_opts.copy()\n        sign = START_PLAYER  # player 1 always starts\n\n        for t, move in enumerate(transcript):\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                check_no_jumps = [a for a, p in my_opts.items() if p.jumped >= t and p.opts <= {sign, 2 * sign}]\n            else:\n                for a, b in zip(move, move[1:]):\n                    my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n                check_no_jumps = [b]\n\n            for x, y in check_no_jumps:\n                p = my_opts[x, y]\n                [o] = p.opts\n                assert o * sign > 0\n                dys = [o] if (abs(o) == 1 and p.promoted >= t) else [-1, 1]  # only check forward jumps\n                for dx in [-1, 1]:\n                    for dy in dys:\n                        target_o = my_opts.get((x + 2 * dx, y + 2 * dy))\n                        if target_o is not None and (0 in target_o.opts or target_o.jumped < t):\n                            mid_o = my_opts[x + dx, y + dy]\n                            if mid_o.jumped > t and mid_o.opts <= {-sign, -2 * sign}:  # ok if jumped at t\n                                if target_o.jumped < t or target_o.opts == {0}:\n                                    return False\n                                old_opts = target_o.opts\n                                for v in target_o.opts:\n                                    if v != 0:\n                                        target_o.opts = {v}\n                                        h = helper()\n                                        if h:\n                                            return True\n                                target_o.opts = old_opts\n                                return False\n\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                a, b = move[0], move[1]\n                my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n\n            sign *= -1\n        return True\n\n    res = helper()\n    assert res\n\n    def get_opt(opts):\n        if 0 in opts.opts:\n            return 0\n        assert len(opts.opts) == 1\n        return list(opts.opts)[0]\n\n    return [[x, y, get_opt(opts)] for (x, y), opts in init_opts.items()]"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem C: Checks Post Facto](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nNobody solved this problem during the competition -- it is pretty difficult!",
    "taint_date": "2021-4-26",
    "weight": 0.025
  },
  {
    "name": "MatchingMarkers_0",
    "sat": "def sat(cut_position: int, ring=\"yRrsmOkLCHSDJywpVDEDsjgCwSUmtvHMefxxPFdmBIpM\", lower=5):\n    \"\"\"\n    The input is a string of start and end markers \"aaBAcGeg\" where upper-case characters indicate start markers\n    and lower-case characters indicate ending markers. The string indicates a ring (joined at the ends) and the goal is\n    to find a location to split the ring so that there are a maximal number of matched start/end chars where a character\n    (like \"a\"/\"A\") is matched if starting at the split and going around the ring, the start-end pairs form a valid\n    nesting like nested parentheses. Can you solve it in linear time?\n    \"\"\"\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= (1 if matches[c] > 0 else len(line))\n        else:\n            matches[c.lower()] += 1\n    return sum(i == 0 for i in matches.values()) >= lower",
    "sols": [
      "def sol(ring=\"yRrsmOkLCHSDJywpVDEDsjgCwSUmtvHMefxxPFdmBIpM\", lower=5):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem D: Circular DNA](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nThis is trivial in quadratic time, but the challenge is to solve it quickly (i.e., linear time).",
    "taint_date": "2019-3-31",
    "weight": 0.025
  },
  {
    "name": "MatchingMarkers_1",
    "sat": "def sat(cut_position: int, ring=\"MvI\", lower=0):\n    \"\"\"\n    The input is a string of start and end markers \"aaBAcGeg\" where upper-case characters indicate start markers\n    and lower-case characters indicate ending markers. The string indicates a ring (joined at the ends) and the goal is\n    to find a location to split the ring so that there are a maximal number of matched start/end chars where a character\n    (like \"a\"/\"A\") is matched if starting at the split and going around the ring, the start-end pairs form a valid\n    nesting like nested parentheses. Can you solve it in linear time?\n    \"\"\"\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= (1 if matches[c] > 0 else len(line))\n        else:\n            matches[c.lower()] += 1\n    return sum(i == 0 for i in matches.values()) >= lower",
    "sols": [
      "def sol(ring=\"MvI\", lower=0):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem D: Circular DNA](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nThis is trivial in quadratic time, but the challenge is to solve it quickly (i.e., linear time).",
    "taint_date": "2019-3-31",
    "weight": 0.025
  },
  {
    "name": "MatchingMarkers_2",
    "sat": "def sat(cut_position: int, ring=\"s\", lower=0):\n    \"\"\"\n    The input is a string of start and end markers \"aaBAcGeg\" where upper-case characters indicate start markers\n    and lower-case characters indicate ending markers. The string indicates a ring (joined at the ends) and the goal is\n    to find a location to split the ring so that there are a maximal number of matched start/end chars where a character\n    (like \"a\"/\"A\") is matched if starting at the split and going around the ring, the start-end pairs form a valid\n    nesting like nested parentheses. Can you solve it in linear time?\n    \"\"\"\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= (1 if matches[c] > 0 else len(line))\n        else:\n            matches[c.lower()] += 1\n    return sum(i == 0 for i in matches.values()) >= lower",
    "sols": [
      "def sol(ring=\"s\", lower=0):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem D: Circular DNA](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nThis is trivial in quadratic time, but the challenge is to solve it quickly (i.e., linear time).",
    "taint_date": "2019-3-31",
    "weight": 0.025
  },
  {
    "name": "MatchingMarkers_3",
    "sat": "def sat(cut_position: int, ring=\"fyVYVBfGHVYsBrYVgsgHYvVD\", lower=0):\n    \"\"\"\n    The input is a string of start and end markers \"aaBAcGeg\" where upper-case characters indicate start markers\n    and lower-case characters indicate ending markers. The string indicates a ring (joined at the ends) and the goal is\n    to find a location to split the ring so that there are a maximal number of matched start/end chars where a character\n    (like \"a\"/\"A\") is matched if starting at the split and going around the ring, the start-end pairs form a valid\n    nesting like nested parentheses. Can you solve it in linear time?\n    \"\"\"\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= (1 if matches[c] > 0 else len(line))\n        else:\n            matches[c.lower()] += 1\n    return sum(i == 0 for i in matches.values()) >= lower",
    "sols": [
      "def sol(ring=\"fyVYVBfGHVYsBrYVgsgHYvVD\", lower=0):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem D: Circular DNA](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nThis is trivial in quadratic time, but the challenge is to solve it quickly (i.e., linear time).",
    "taint_date": "2019-3-31",
    "weight": 0.025
  },
  {
    "name": "MatchingMarkers_4",
    "sat": "def sat(cut_position: int, ring=\"ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf\", lower=1):\n    \"\"\"\n    The input is a string of start and end markers \"aaBAcGeg\" where upper-case characters indicate start markers\n    and lower-case characters indicate ending markers. The string indicates a ring (joined at the ends) and the goal is\n    to find a location to split the ring so that there are a maximal number of matched start/end chars where a character\n    (like \"a\"/\"A\") is matched if starting at the split and going around the ring, the start-end pairs form a valid\n    nesting like nested parentheses. Can you solve it in linear time?\n    \"\"\"\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= (1 if matches[c] > 0 else len(line))\n        else:\n            matches[c.lower()] += 1\n    return sum(i == 0 for i in matches.values()) >= lower",
    "sols": [
      "def sol(ring=\"ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf\", lower=1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem D: Circular DNA](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nThis is trivial in quadratic time, but the challenge is to solve it quickly (i.e., linear time).",
    "taint_date": "2019-3-31",
    "weight": 0.025
  },
  {
    "name": "MatchingMarkers_5",
    "sat": "def sat(cut_position: int, ring=\"GWGwwUiRRGaglFcwzHlcHljrtehOGTcjgWuHlUHlcrLcuUCeuToMowHEELLlcvCgreTATIjFTTGvMcJztRVHIMWUmwRijwuERITMuwltjGIoTgAEoAewWZvETIfziHfAmUIijzFvcRlajeMrIUvmTGeAzRoIgirLTEwvRiMJRumMTEeTaTZvmJjOCJCIAJOEmZvHMCziurfrHwMEJggGclhaoIIcATMajWGaIOchaetioGGRtzOUvIzHGzRiUhVv\", lower=2):\n    \"\"\"\n    The input is a string of start and end markers \"aaBAcGeg\" where upper-case characters indicate start markers\n    and lower-case characters indicate ending markers. The string indicates a ring (joined at the ends) and the goal is\n    to find a location to split the ring so that there are a maximal number of matched start/end chars where a character\n    (like \"a\"/\"A\") is matched if starting at the split and going around the ring, the start-end pairs form a valid\n    nesting like nested parentheses. Can you solve it in linear time?\n    \"\"\"\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= (1 if matches[c] > 0 else len(line))\n        else:\n            matches[c.lower()] += 1\n    return sum(i == 0 for i in matches.values()) >= lower",
    "sols": [
      "def sol(ring=\"GWGwwUiRRGaglFcwzHlcHljrtehOGTcjgWuHlUHlcrLcuUCeuToMowHEELLlcvCgreTATIjFTTGvMcJztRVHIMWUmwRijwuERITMuwltjGIoTgAEoAewWZvETIfziHfAmUIijzFvcRlajeMrIUvmTGeAzRoIgirLTEwvRiMJRumMTEeTaTZvmJjOCJCIAJOEmZvHMCziurfrHwMEJggGclhaoIIcATMajWGaIOchaetioGGRtzOUvIzHGzRiUhVv\", lower=2):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem D: Circular DNA](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nThis is trivial in quadratic time, but the challenge is to solve it quickly (i.e., linear time).",
    "taint_date": "2019-3-31",
    "weight": 0.025
  },
  {
    "name": "MatchingMarkers_6",
    "sat": "def sat(cut_position: int, ring=\"YduEpdTboudPuxbxtoqXoxPeqQeYoU\", lower=1):\n    \"\"\"\n    The input is a string of start and end markers \"aaBAcGeg\" where upper-case characters indicate start markers\n    and lower-case characters indicate ending markers. The string indicates a ring (joined at the ends) and the goal is\n    to find a location to split the ring so that there are a maximal number of matched start/end chars where a character\n    (like \"a\"/\"A\") is matched if starting at the split and going around the ring, the start-end pairs form a valid\n    nesting like nested parentheses. Can you solve it in linear time?\n    \"\"\"\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= (1 if matches[c] > 0 else len(line))\n        else:\n            matches[c.lower()] += 1\n    return sum(i == 0 for i in matches.values()) >= lower",
    "sols": [
      "def sol(ring=\"YduEpdTboudPuxbxtoqXoxPeqQeYoU\", lower=1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem D: Circular DNA](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nThis is trivial in quadratic time, but the challenge is to solve it quickly (i.e., linear time).",
    "taint_date": "2019-3-31",
    "weight": 0.025
  },
  {
    "name": "MatchingMarkers_7",
    "sat": "def sat(cut_position: int, ring=\"bjyJYvZJZzzvJvByyZYVbjvjbbzjYYvVjBjjYYvjzjJYjZJyYJZzjj\", lower=1):\n    \"\"\"\n    The input is a string of start and end markers \"aaBAcGeg\" where upper-case characters indicate start markers\n    and lower-case characters indicate ending markers. The string indicates a ring (joined at the ends) and the goal is\n    to find a location to split the ring so that there are a maximal number of matched start/end chars where a character\n    (like \"a\"/\"A\") is matched if starting at the split and going around the ring, the start-end pairs form a valid\n    nesting like nested parentheses. Can you solve it in linear time?\n    \"\"\"\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= (1 if matches[c] > 0 else len(line))\n        else:\n            matches[c.lower()] += 1\n    return sum(i == 0 for i in matches.values()) >= lower",
    "sols": [
      "def sol(ring=\"bjyJYvZJZzzvJvByyZYVbjvjbbzjYYvVjBjjYYvjzjJYjZJyYJZzjj\", lower=1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem D: Circular DNA](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nThis is trivial in quadratic time, but the challenge is to solve it quickly (i.e., linear time).",
    "taint_date": "2019-3-31",
    "weight": 0.025
  },
  {
    "name": "MatchingMarkers_8",
    "sat": "def sat(cut_position: int, ring=\"pZqPZbV\", lower=1):\n    \"\"\"\n    The input is a string of start and end markers \"aaBAcGeg\" where upper-case characters indicate start markers\n    and lower-case characters indicate ending markers. The string indicates a ring (joined at the ends) and the goal is\n    to find a location to split the ring so that there are a maximal number of matched start/end chars where a character\n    (like \"a\"/\"A\") is matched if starting at the split and going around the ring, the start-end pairs form a valid\n    nesting like nested parentheses. Can you solve it in linear time?\n    \"\"\"\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= (1 if matches[c] > 0 else len(line))\n        else:\n            matches[c.lower()] += 1\n    return sum(i == 0 for i in matches.values()) >= lower",
    "sols": [
      "def sol(ring=\"pZqPZbV\", lower=1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem D: Circular DNA](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nThis is trivial in quadratic time, but the challenge is to solve it quickly (i.e., linear time).",
    "taint_date": "2019-3-31",
    "weight": 0.025
  },
  {
    "name": "MatchingMarkers_9",
    "sat": "def sat(cut_position: int, ring=\"NKMmijveYDwliKeeiTm\", lower=0):\n    \"\"\"\n    The input is a string of start and end markers \"aaBAcGeg\" where upper-case characters indicate start markers\n    and lower-case characters indicate ending markers. The string indicates a ring (joined at the ends) and the goal is\n    to find a location to split the ring so that there are a maximal number of matched start/end chars where a character\n    (like \"a\"/\"A\") is matched if starting at the split and going around the ring, the start-end pairs form a valid\n    nesting like nested parentheses. Can you solve it in linear time?\n    \"\"\"\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= (1 if matches[c] > 0 else len(line))\n        else:\n            matches[c.lower()] += 1\n    return sum(i == 0 for i in matches.values()) >= lower",
    "sols": [
      "def sol(ring=\"NKMmijveYDwliKeeiTm\", lower=0):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i"
    ],
    "module": "ICPC",
    "notes": "Inspired by\n[ICPC 2019 Problem D: Circular DNA](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nThis is trivial in quadratic time, but the challenge is to solve it quickly (i.e., linear time).",
    "taint_date": "2019-3-31",
    "weight": 0.025
  },
  {
    "name": "ExponentialCoinMoves_0",
    "sat": "def sat(states: List[List[int]], n=16385):\n    \"\"\"\n    There are five boxes each having one coin initially. Two types of moves are allowed:\n    * (advance) remove `k > 0` coins from box `i` and add `2k` coins to box `i + 1`\n    * (swap) remove a coin from box `i` and swap the contents of boxes `i+1` and `i+2`\n    Given `0 <= n <= 16385`, find a sequence of states that result in 2^n coins in the last box.\n    Note that `n` can be as large as 16385 yielding 2^16385 coins (a number with 4,933 digits) in the last\n    box. Encode each state as a list of the numbers of coins in the five boxes.\n\n    Sample Input:\n    `n = 2`\n\n    Sample Output:\n    `[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 1, 5, 1, 1], [0, 1, 4, 1, 1], [0, 0, 1, 4, 1], [0, 0, 0, 1, 4]]`\n\n    The last box now has 2^2 coins. This is a sequence of two advances followed by three swaps.\n\n    states is encoded by lists of 5 coin counts\n    \"\"\"\n    assert states[0] == [1] * 5 and all(len(li) == 5 for li in states) and all(i >= 0 for li in states for i in li)\n    for prev, cur in zip(states, states[1:]):\n        for i in range(5):\n            if cur[i] != prev[i]:\n                break\n        assert cur[i] < prev[i]\n        assert (\n                cur[i + 1] - prev[i + 1] == 2 * (prev[i] - cur[i]) and cur[i + 2:] == prev[i + 2:]  # k decrements\n                or\n                cur[i:i + 3] == [prev[i] - 1, prev[i + 2], prev[i + 1]] and cur[i + 3:] == prev[i + 3:]  # swap\n        )\n\n    return states[-1][-1] == 2 ** n",
    "sols": [
      "def sol(n=16385):\n    assert n >= 1\n    ans = [[1] * 5, [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0],\n           [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0]]\n\n    def exp_move():  # shifts last 3 [..., a, 0, 0] to [..., 0, 2^a, 0] for a>0\n        state = ans[-1][:]\n        state[2] -= 1\n        state[3] += 2\n        ans.append(state[:])\n        while state[2]:\n            state[3], state[4] = 0, 2 * state[3]\n            ans.append(state[:])\n            state[2:] = [state[2] - 1, state[4], 0]\n            ans.append(state[:])\n\n    exp_move()\n    assert ans[-1] == [0, 1, 0, 2 ** 14, 0]\n    ans.append([0, 0, 2 ** 14, 0, 0])\n    if n <= 16:\n        ans.append([0, 0, 0, 2 ** 15, 0])\n    else:\n        exp_move()\n        assert ans[-1] == [0, 0, 0, 2 ** (2 ** 14), 0]\n    state = ans[-1][:]\n    state[-2] -= 2 ** (n - 1)\n    state[-1] = 2 ** n\n    ans.append(state)\n    return ans"
    ],
    "module": "IMO",
    "notes": "This problem has *long* answers, not that the code to solve it is long but that what the solution outputs is long.\n\nThe version below uses only 5 boxes (unlike the IMO problem with 6 boxes since 2010^2010^2010 is too big\nfor computers) but the solution is quite similar to the solution to the IMO problem. Because the solution\nrequires exponential many moves, our representation allows combining multiple Type-1 (advance) operations\ninto a single step.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2010-7-2",
    "weight": 0.06666666666666667
  },
  {
    "name": "ExponentialCoinMoves_1",
    "sat": "def sat(states: List[List[int]], n=1):\n    \"\"\"\n    There are five boxes each having one coin initially. Two types of moves are allowed:\n    * (advance) remove `k > 0` coins from box `i` and add `2k` coins to box `i + 1`\n    * (swap) remove a coin from box `i` and swap the contents of boxes `i+1` and `i+2`\n    Given `0 <= n <= 16385`, find a sequence of states that result in 2^n coins in the last box.\n    Note that `n` can be as large as 16385 yielding 2^16385 coins (a number with 4,933 digits) in the last\n    box. Encode each state as a list of the numbers of coins in the five boxes.\n\n    Sample Input:\n    `n = 2`\n\n    Sample Output:\n    `[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 1, 5, 1, 1], [0, 1, 4, 1, 1], [0, 0, 1, 4, 1], [0, 0, 0, 1, 4]]`\n\n    The last box now has 2^2 coins. This is a sequence of two advances followed by three swaps.\n\n    states is encoded by lists of 5 coin counts\n    \"\"\"\n    assert states[0] == [1] * 5 and all(len(li) == 5 for li in states) and all(i >= 0 for li in states for i in li)\n    for prev, cur in zip(states, states[1:]):\n        for i in range(5):\n            if cur[i] != prev[i]:\n                break\n        assert cur[i] < prev[i]\n        assert (\n                cur[i + 1] - prev[i + 1] == 2 * (prev[i] - cur[i]) and cur[i + 2:] == prev[i + 2:]  # k decrements\n                or\n                cur[i:i + 3] == [prev[i] - 1, prev[i + 2], prev[i + 1]] and cur[i + 3:] == prev[i + 3:]  # swap\n        )\n\n    return states[-1][-1] == 2 ** n",
    "sols": [
      "def sol(n=1):\n    assert n >= 1\n    ans = [[1] * 5, [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0],\n           [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0]]\n\n    def exp_move():  # shifts last 3 [..., a, 0, 0] to [..., 0, 2^a, 0] for a>0\n        state = ans[-1][:]\n        state[2] -= 1\n        state[3] += 2\n        ans.append(state[:])\n        while state[2]:\n            state[3], state[4] = 0, 2 * state[3]\n            ans.append(state[:])\n            state[2:] = [state[2] - 1, state[4], 0]\n            ans.append(state[:])\n\n    exp_move()\n    assert ans[-1] == [0, 1, 0, 2 ** 14, 0]\n    ans.append([0, 0, 2 ** 14, 0, 0])\n    if n <= 16:\n        ans.append([0, 0, 0, 2 ** 15, 0])\n    else:\n        exp_move()\n        assert ans[-1] == [0, 0, 0, 2 ** (2 ** 14), 0]\n    state = ans[-1][:]\n    state[-2] -= 2 ** (n - 1)\n    state[-1] = 2 ** n\n    ans.append(state)\n    return ans"
    ],
    "module": "IMO",
    "notes": "This problem has *long* answers, not that the code to solve it is long but that what the solution outputs is long.\n\nThe version below uses only 5 boxes (unlike the IMO problem with 6 boxes since 2010^2010^2010 is too big\nfor computers) but the solution is quite similar to the solution to the IMO problem. Because the solution\nrequires exponential many moves, our representation allows combining multiple Type-1 (advance) operations\ninto a single step.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2010-7-2",
    "weight": 0.06666666666666667
  },
  {
    "name": "ExponentialCoinMoves_2",
    "sat": "def sat(states: List[List[int]], n=2):\n    \"\"\"\n    There are five boxes each having one coin initially. Two types of moves are allowed:\n    * (advance) remove `k > 0` coins from box `i` and add `2k` coins to box `i + 1`\n    * (swap) remove a coin from box `i` and swap the contents of boxes `i+1` and `i+2`\n    Given `0 <= n <= 16385`, find a sequence of states that result in 2^n coins in the last box.\n    Note that `n` can be as large as 16385 yielding 2^16385 coins (a number with 4,933 digits) in the last\n    box. Encode each state as a list of the numbers of coins in the five boxes.\n\n    Sample Input:\n    `n = 2`\n\n    Sample Output:\n    `[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 1, 5, 1, 1], [0, 1, 4, 1, 1], [0, 0, 1, 4, 1], [0, 0, 0, 1, 4]]`\n\n    The last box now has 2^2 coins. This is a sequence of two advances followed by three swaps.\n\n    states is encoded by lists of 5 coin counts\n    \"\"\"\n    assert states[0] == [1] * 5 and all(len(li) == 5 for li in states) and all(i >= 0 for li in states for i in li)\n    for prev, cur in zip(states, states[1:]):\n        for i in range(5):\n            if cur[i] != prev[i]:\n                break\n        assert cur[i] < prev[i]\n        assert (\n                cur[i + 1] - prev[i + 1] == 2 * (prev[i] - cur[i]) and cur[i + 2:] == prev[i + 2:]  # k decrements\n                or\n                cur[i:i + 3] == [prev[i] - 1, prev[i + 2], prev[i + 1]] and cur[i + 3:] == prev[i + 3:]  # swap\n        )\n\n    return states[-1][-1] == 2 ** n",
    "sols": [
      "def sol(n=2):\n    assert n >= 1\n    ans = [[1] * 5, [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0],\n           [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0]]\n\n    def exp_move():  # shifts last 3 [..., a, 0, 0] to [..., 0, 2^a, 0] for a>0\n        state = ans[-1][:]\n        state[2] -= 1\n        state[3] += 2\n        ans.append(state[:])\n        while state[2]:\n            state[3], state[4] = 0, 2 * state[3]\n            ans.append(state[:])\n            state[2:] = [state[2] - 1, state[4], 0]\n            ans.append(state[:])\n\n    exp_move()\n    assert ans[-1] == [0, 1, 0, 2 ** 14, 0]\n    ans.append([0, 0, 2 ** 14, 0, 0])\n    if n <= 16:\n        ans.append([0, 0, 0, 2 ** 15, 0])\n    else:\n        exp_move()\n        assert ans[-1] == [0, 0, 0, 2 ** (2 ** 14), 0]\n    state = ans[-1][:]\n    state[-2] -= 2 ** (n - 1)\n    state[-1] = 2 ** n\n    ans.append(state)\n    return ans"
    ],
    "module": "IMO",
    "notes": "This problem has *long* answers, not that the code to solve it is long but that what the solution outputs is long.\n\nThe version below uses only 5 boxes (unlike the IMO problem with 6 boxes since 2010^2010^2010 is too big\nfor computers) but the solution is quite similar to the solution to the IMO problem. Because the solution\nrequires exponential many moves, our representation allows combining multiple Type-1 (advance) operations\ninto a single step.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2010-7-2",
    "weight": 0.06666666666666667
  },
  {
    "name": "ExponentialCoinMoves_3",
    "sat": "def sat(states: List[List[int]], n=4):\n    \"\"\"\n    There are five boxes each having one coin initially. Two types of moves are allowed:\n    * (advance) remove `k > 0` coins from box `i` and add `2k` coins to box `i + 1`\n    * (swap) remove a coin from box `i` and swap the contents of boxes `i+1` and `i+2`\n    Given `0 <= n <= 16385`, find a sequence of states that result in 2^n coins in the last box.\n    Note that `n` can be as large as 16385 yielding 2^16385 coins (a number with 4,933 digits) in the last\n    box. Encode each state as a list of the numbers of coins in the five boxes.\n\n    Sample Input:\n    `n = 2`\n\n    Sample Output:\n    `[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 1, 5, 1, 1], [0, 1, 4, 1, 1], [0, 0, 1, 4, 1], [0, 0, 0, 1, 4]]`\n\n    The last box now has 2^2 coins. This is a sequence of two advances followed by three swaps.\n\n    states is encoded by lists of 5 coin counts\n    \"\"\"\n    assert states[0] == [1] * 5 and all(len(li) == 5 for li in states) and all(i >= 0 for li in states for i in li)\n    for prev, cur in zip(states, states[1:]):\n        for i in range(5):\n            if cur[i] != prev[i]:\n                break\n        assert cur[i] < prev[i]\n        assert (\n                cur[i + 1] - prev[i + 1] == 2 * (prev[i] - cur[i]) and cur[i + 2:] == prev[i + 2:]  # k decrements\n                or\n                cur[i:i + 3] == [prev[i] - 1, prev[i + 2], prev[i + 1]] and cur[i + 3:] == prev[i + 3:]  # swap\n        )\n\n    return states[-1][-1] == 2 ** n",
    "sols": [
      "def sol(n=4):\n    assert n >= 1\n    ans = [[1] * 5, [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0],\n           [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0]]\n\n    def exp_move():  # shifts last 3 [..., a, 0, 0] to [..., 0, 2^a, 0] for a>0\n        state = ans[-1][:]\n        state[2] -= 1\n        state[3] += 2\n        ans.append(state[:])\n        while state[2]:\n            state[3], state[4] = 0, 2 * state[3]\n            ans.append(state[:])\n            state[2:] = [state[2] - 1, state[4], 0]\n            ans.append(state[:])\n\n    exp_move()\n    assert ans[-1] == [0, 1, 0, 2 ** 14, 0]\n    ans.append([0, 0, 2 ** 14, 0, 0])\n    if n <= 16:\n        ans.append([0, 0, 0, 2 ** 15, 0])\n    else:\n        exp_move()\n        assert ans[-1] == [0, 0, 0, 2 ** (2 ** 14), 0]\n    state = ans[-1][:]\n    state[-2] -= 2 ** (n - 1)\n    state[-1] = 2 ** n\n    ans.append(state)\n    return ans"
    ],
    "module": "IMO",
    "notes": "This problem has *long* answers, not that the code to solve it is long but that what the solution outputs is long.\n\nThe version below uses only 5 boxes (unlike the IMO problem with 6 boxes since 2010^2010^2010 is too big\nfor computers) but the solution is quite similar to the solution to the IMO problem. Because the solution\nrequires exponential many moves, our representation allows combining multiple Type-1 (advance) operations\ninto a single step.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2010-7-2",
    "weight": 0.06666666666666667
  },
  {
    "name": "ExponentialCoinMoves_4",
    "sat": "def sat(states: List[List[int]], n=8):\n    \"\"\"\n    There are five boxes each having one coin initially. Two types of moves are allowed:\n    * (advance) remove `k > 0` coins from box `i` and add `2k` coins to box `i + 1`\n    * (swap) remove a coin from box `i` and swap the contents of boxes `i+1` and `i+2`\n    Given `0 <= n <= 16385`, find a sequence of states that result in 2^n coins in the last box.\n    Note that `n` can be as large as 16385 yielding 2^16385 coins (a number with 4,933 digits) in the last\n    box. Encode each state as a list of the numbers of coins in the five boxes.\n\n    Sample Input:\n    `n = 2`\n\n    Sample Output:\n    `[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 1, 5, 1, 1], [0, 1, 4, 1, 1], [0, 0, 1, 4, 1], [0, 0, 0, 1, 4]]`\n\n    The last box now has 2^2 coins. This is a sequence of two advances followed by three swaps.\n\n    states is encoded by lists of 5 coin counts\n    \"\"\"\n    assert states[0] == [1] * 5 and all(len(li) == 5 for li in states) and all(i >= 0 for li in states for i in li)\n    for prev, cur in zip(states, states[1:]):\n        for i in range(5):\n            if cur[i] != prev[i]:\n                break\n        assert cur[i] < prev[i]\n        assert (\n                cur[i + 1] - prev[i + 1] == 2 * (prev[i] - cur[i]) and cur[i + 2:] == prev[i + 2:]  # k decrements\n                or\n                cur[i:i + 3] == [prev[i] - 1, prev[i + 2], prev[i + 1]] and cur[i + 3:] == prev[i + 3:]  # swap\n        )\n\n    return states[-1][-1] == 2 ** n",
    "sols": [
      "def sol(n=8):\n    assert n >= 1\n    ans = [[1] * 5, [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0],\n           [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0]]\n\n    def exp_move():  # shifts last 3 [..., a, 0, 0] to [..., 0, 2^a, 0] for a>0\n        state = ans[-1][:]\n        state[2] -= 1\n        state[3] += 2\n        ans.append(state[:])\n        while state[2]:\n            state[3], state[4] = 0, 2 * state[3]\n            ans.append(state[:])\n            state[2:] = [state[2] - 1, state[4], 0]\n            ans.append(state[:])\n\n    exp_move()\n    assert ans[-1] == [0, 1, 0, 2 ** 14, 0]\n    ans.append([0, 0, 2 ** 14, 0, 0])\n    if n <= 16:\n        ans.append([0, 0, 0, 2 ** 15, 0])\n    else:\n        exp_move()\n        assert ans[-1] == [0, 0, 0, 2 ** (2 ** 14), 0]\n    state = ans[-1][:]\n    state[-2] -= 2 ** (n - 1)\n    state[-1] = 2 ** n\n    ans.append(state)\n    return ans"
    ],
    "module": "IMO",
    "notes": "This problem has *long* answers, not that the code to solve it is long but that what the solution outputs is long.\n\nThe version below uses only 5 boxes (unlike the IMO problem with 6 boxes since 2010^2010^2010 is too big\nfor computers) but the solution is quite similar to the solution to the IMO problem. Because the solution\nrequires exponential many moves, our representation allows combining multiple Type-1 (advance) operations\ninto a single step.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2010-7-2",
    "weight": 0.06666666666666667
  },
  {
    "name": "ExponentialCoinMoves_5",
    "sat": "def sat(states: List[List[int]], n=16):\n    \"\"\"\n    There are five boxes each having one coin initially. Two types of moves are allowed:\n    * (advance) remove `k > 0` coins from box `i` and add `2k` coins to box `i + 1`\n    * (swap) remove a coin from box `i` and swap the contents of boxes `i+1` and `i+2`\n    Given `0 <= n <= 16385`, find a sequence of states that result in 2^n coins in the last box.\n    Note that `n` can be as large as 16385 yielding 2^16385 coins (a number with 4,933 digits) in the last\n    box. Encode each state as a list of the numbers of coins in the five boxes.\n\n    Sample Input:\n    `n = 2`\n\n    Sample Output:\n    `[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 1, 5, 1, 1], [0, 1, 4, 1, 1], [0, 0, 1, 4, 1], [0, 0, 0, 1, 4]]`\n\n    The last box now has 2^2 coins. This is a sequence of two advances followed by three swaps.\n\n    states is encoded by lists of 5 coin counts\n    \"\"\"\n    assert states[0] == [1] * 5 and all(len(li) == 5 for li in states) and all(i >= 0 for li in states for i in li)\n    for prev, cur in zip(states, states[1:]):\n        for i in range(5):\n            if cur[i] != prev[i]:\n                break\n        assert cur[i] < prev[i]\n        assert (\n                cur[i + 1] - prev[i + 1] == 2 * (prev[i] - cur[i]) and cur[i + 2:] == prev[i + 2:]  # k decrements\n                or\n                cur[i:i + 3] == [prev[i] - 1, prev[i + 2], prev[i + 1]] and cur[i + 3:] == prev[i + 3:]  # swap\n        )\n\n    return states[-1][-1] == 2 ** n",
    "sols": [
      "def sol(n=16):\n    assert n >= 1\n    ans = [[1] * 5, [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0],\n           [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0]]\n\n    def exp_move():  # shifts last 3 [..., a, 0, 0] to [..., 0, 2^a, 0] for a>0\n        state = ans[-1][:]\n        state[2] -= 1\n        state[3] += 2\n        ans.append(state[:])\n        while state[2]:\n            state[3], state[4] = 0, 2 * state[3]\n            ans.append(state[:])\n            state[2:] = [state[2] - 1, state[4], 0]\n            ans.append(state[:])\n\n    exp_move()\n    assert ans[-1] == [0, 1, 0, 2 ** 14, 0]\n    ans.append([0, 0, 2 ** 14, 0, 0])\n    if n <= 16:\n        ans.append([0, 0, 0, 2 ** 15, 0])\n    else:\n        exp_move()\n        assert ans[-1] == [0, 0, 0, 2 ** (2 ** 14), 0]\n    state = ans[-1][:]\n    state[-2] -= 2 ** (n - 1)\n    state[-1] = 2 ** n\n    ans.append(state)\n    return ans"
    ],
    "module": "IMO",
    "notes": "This problem has *long* answers, not that the code to solve it is long but that what the solution outputs is long.\n\nThe version below uses only 5 boxes (unlike the IMO problem with 6 boxes since 2010^2010^2010 is too big\nfor computers) but the solution is quite similar to the solution to the IMO problem. Because the solution\nrequires exponential many moves, our representation allows combining multiple Type-1 (advance) operations\ninto a single step.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2010-7-2",
    "weight": 0.06666666666666667
  },
  {
    "name": "ExponentialCoinMoves_6",
    "sat": "def sat(states: List[List[int]], n=32):\n    \"\"\"\n    There are five boxes each having one coin initially. Two types of moves are allowed:\n    * (advance) remove `k > 0` coins from box `i` and add `2k` coins to box `i + 1`\n    * (swap) remove a coin from box `i` and swap the contents of boxes `i+1` and `i+2`\n    Given `0 <= n <= 16385`, find a sequence of states that result in 2^n coins in the last box.\n    Note that `n` can be as large as 16385 yielding 2^16385 coins (a number with 4,933 digits) in the last\n    box. Encode each state as a list of the numbers of coins in the five boxes.\n\n    Sample Input:\n    `n = 2`\n\n    Sample Output:\n    `[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 1, 5, 1, 1], [0, 1, 4, 1, 1], [0, 0, 1, 4, 1], [0, 0, 0, 1, 4]]`\n\n    The last box now has 2^2 coins. This is a sequence of two advances followed by three swaps.\n\n    states is encoded by lists of 5 coin counts\n    \"\"\"\n    assert states[0] == [1] * 5 and all(len(li) == 5 for li in states) and all(i >= 0 for li in states for i in li)\n    for prev, cur in zip(states, states[1:]):\n        for i in range(5):\n            if cur[i] != prev[i]:\n                break\n        assert cur[i] < prev[i]\n        assert (\n                cur[i + 1] - prev[i + 1] == 2 * (prev[i] - cur[i]) and cur[i + 2:] == prev[i + 2:]  # k decrements\n                or\n                cur[i:i + 3] == [prev[i] - 1, prev[i + 2], prev[i + 1]] and cur[i + 3:] == prev[i + 3:]  # swap\n        )\n\n    return states[-1][-1] == 2 ** n",
    "sols": [
      "def sol(n=32):\n    assert n >= 1\n    ans = [[1] * 5, [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0],\n           [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0]]\n\n    def exp_move():  # shifts last 3 [..., a, 0, 0] to [..., 0, 2^a, 0] for a>0\n        state = ans[-1][:]\n        state[2] -= 1\n        state[3] += 2\n        ans.append(state[:])\n        while state[2]:\n            state[3], state[4] = 0, 2 * state[3]\n            ans.append(state[:])\n            state[2:] = [state[2] - 1, state[4], 0]\n            ans.append(state[:])\n\n    exp_move()\n    assert ans[-1] == [0, 1, 0, 2 ** 14, 0]\n    ans.append([0, 0, 2 ** 14, 0, 0])\n    if n <= 16:\n        ans.append([0, 0, 0, 2 ** 15, 0])\n    else:\n        exp_move()\n        assert ans[-1] == [0, 0, 0, 2 ** (2 ** 14), 0]\n    state = ans[-1][:]\n    state[-2] -= 2 ** (n - 1)\n    state[-1] = 2 ** n\n    ans.append(state)\n    return ans"
    ],
    "module": "IMO",
    "notes": "This problem has *long* answers, not that the code to solve it is long but that what the solution outputs is long.\n\nThe version below uses only 5 boxes (unlike the IMO problem with 6 boxes since 2010^2010^2010 is too big\nfor computers) but the solution is quite similar to the solution to the IMO problem. Because the solution\nrequires exponential many moves, our representation allows combining multiple Type-1 (advance) operations\ninto a single step.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2010-7-2",
    "weight": 0.06666666666666667
  },
  {
    "name": "ExponentialCoinMoves_7",
    "sat": "def sat(states: List[List[int]], n=64):\n    \"\"\"\n    There are five boxes each having one coin initially. Two types of moves are allowed:\n    * (advance) remove `k > 0` coins from box `i` and add `2k` coins to box `i + 1`\n    * (swap) remove a coin from box `i` and swap the contents of boxes `i+1` and `i+2`\n    Given `0 <= n <= 16385`, find a sequence of states that result in 2^n coins in the last box.\n    Note that `n` can be as large as 16385 yielding 2^16385 coins (a number with 4,933 digits) in the last\n    box. Encode each state as a list of the numbers of coins in the five boxes.\n\n    Sample Input:\n    `n = 2`\n\n    Sample Output:\n    `[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 1, 5, 1, 1], [0, 1, 4, 1, 1], [0, 0, 1, 4, 1], [0, 0, 0, 1, 4]]`\n\n    The last box now has 2^2 coins. This is a sequence of two advances followed by three swaps.\n\n    states is encoded by lists of 5 coin counts\n    \"\"\"\n    assert states[0] == [1] * 5 and all(len(li) == 5 for li in states) and all(i >= 0 for li in states for i in li)\n    for prev, cur in zip(states, states[1:]):\n        for i in range(5):\n            if cur[i] != prev[i]:\n                break\n        assert cur[i] < prev[i]\n        assert (\n                cur[i + 1] - prev[i + 1] == 2 * (prev[i] - cur[i]) and cur[i + 2:] == prev[i + 2:]  # k decrements\n                or\n                cur[i:i + 3] == [prev[i] - 1, prev[i + 2], prev[i + 1]] and cur[i + 3:] == prev[i + 3:]  # swap\n        )\n\n    return states[-1][-1] == 2 ** n",
    "sols": [
      "def sol(n=64):\n    assert n >= 1\n    ans = [[1] * 5, [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0],\n           [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0]]\n\n    def exp_move():  # shifts last 3 [..., a, 0, 0] to [..., 0, 2^a, 0] for a>0\n        state = ans[-1][:]\n        state[2] -= 1\n        state[3] += 2\n        ans.append(state[:])\n        while state[2]:\n            state[3], state[4] = 0, 2 * state[3]\n            ans.append(state[:])\n            state[2:] = [state[2] - 1, state[4], 0]\n            ans.append(state[:])\n\n    exp_move()\n    assert ans[-1] == [0, 1, 0, 2 ** 14, 0]\n    ans.append([0, 0, 2 ** 14, 0, 0])\n    if n <= 16:\n        ans.append([0, 0, 0, 2 ** 15, 0])\n    else:\n        exp_move()\n        assert ans[-1] == [0, 0, 0, 2 ** (2 ** 14), 0]\n    state = ans[-1][:]\n    state[-2] -= 2 ** (n - 1)\n    state[-1] = 2 ** n\n    ans.append(state)\n    return ans"
    ],
    "module": "IMO",
    "notes": "This problem has *long* answers, not that the code to solve it is long but that what the solution outputs is long.\n\nThe version below uses only 5 boxes (unlike the IMO problem with 6 boxes since 2010^2010^2010 is too big\nfor computers) but the solution is quite similar to the solution to the IMO problem. Because the solution\nrequires exponential many moves, our representation allows combining multiple Type-1 (advance) operations\ninto a single step.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2010-7-2",
    "weight": 0.06666666666666667
  },
  {
    "name": "ExponentialCoinMoves_8",
    "sat": "def sat(states: List[List[int]], n=128):\n    \"\"\"\n    There are five boxes each having one coin initially. Two types of moves are allowed:\n    * (advance) remove `k > 0` coins from box `i` and add `2k` coins to box `i + 1`\n    * (swap) remove a coin from box `i` and swap the contents of boxes `i+1` and `i+2`\n    Given `0 <= n <= 16385`, find a sequence of states that result in 2^n coins in the last box.\n    Note that `n` can be as large as 16385 yielding 2^16385 coins (a number with 4,933 digits) in the last\n    box. Encode each state as a list of the numbers of coins in the five boxes.\n\n    Sample Input:\n    `n = 2`\n\n    Sample Output:\n    `[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 1, 5, 1, 1], [0, 1, 4, 1, 1], [0, 0, 1, 4, 1], [0, 0, 0, 1, 4]]`\n\n    The last box now has 2^2 coins. This is a sequence of two advances followed by three swaps.\n\n    states is encoded by lists of 5 coin counts\n    \"\"\"\n    assert states[0] == [1] * 5 and all(len(li) == 5 for li in states) and all(i >= 0 for li in states for i in li)\n    for prev, cur in zip(states, states[1:]):\n        for i in range(5):\n            if cur[i] != prev[i]:\n                break\n        assert cur[i] < prev[i]\n        assert (\n                cur[i + 1] - prev[i + 1] == 2 * (prev[i] - cur[i]) and cur[i + 2:] == prev[i + 2:]  # k decrements\n                or\n                cur[i:i + 3] == [prev[i] - 1, prev[i + 2], prev[i + 1]] and cur[i + 3:] == prev[i + 3:]  # swap\n        )\n\n    return states[-1][-1] == 2 ** n",
    "sols": [
      "def sol(n=128):\n    assert n >= 1\n    ans = [[1] * 5, [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0],\n           [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0]]\n\n    def exp_move():  # shifts last 3 [..., a, 0, 0] to [..., 0, 2^a, 0] for a>0\n        state = ans[-1][:]\n        state[2] -= 1\n        state[3] += 2\n        ans.append(state[:])\n        while state[2]:\n            state[3], state[4] = 0, 2 * state[3]\n            ans.append(state[:])\n            state[2:] = [state[2] - 1, state[4], 0]\n            ans.append(state[:])\n\n    exp_move()\n    assert ans[-1] == [0, 1, 0, 2 ** 14, 0]\n    ans.append([0, 0, 2 ** 14, 0, 0])\n    if n <= 16:\n        ans.append([0, 0, 0, 2 ** 15, 0])\n    else:\n        exp_move()\n        assert ans[-1] == [0, 0, 0, 2 ** (2 ** 14), 0]\n    state = ans[-1][:]\n    state[-2] -= 2 ** (n - 1)\n    state[-1] = 2 ** n\n    ans.append(state)\n    return ans"
    ],
    "module": "IMO",
    "notes": "This problem has *long* answers, not that the code to solve it is long but that what the solution outputs is long.\n\nThe version below uses only 5 boxes (unlike the IMO problem with 6 boxes since 2010^2010^2010 is too big\nfor computers) but the solution is quite similar to the solution to the IMO problem. Because the solution\nrequires exponential many moves, our representation allows combining multiple Type-1 (advance) operations\ninto a single step.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2010-7-2",
    "weight": 0.06666666666666667
  },
  {
    "name": "ExponentialCoinMoves_9",
    "sat": "def sat(states: List[List[int]], n=256):\n    \"\"\"\n    There are five boxes each having one coin initially. Two types of moves are allowed:\n    * (advance) remove `k > 0` coins from box `i` and add `2k` coins to box `i + 1`\n    * (swap) remove a coin from box `i` and swap the contents of boxes `i+1` and `i+2`\n    Given `0 <= n <= 16385`, find a sequence of states that result in 2^n coins in the last box.\n    Note that `n` can be as large as 16385 yielding 2^16385 coins (a number with 4,933 digits) in the last\n    box. Encode each state as a list of the numbers of coins in the five boxes.\n\n    Sample Input:\n    `n = 2`\n\n    Sample Output:\n    `[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 1, 5, 1, 1], [0, 1, 4, 1, 1], [0, 0, 1, 4, 1], [0, 0, 0, 1, 4]]`\n\n    The last box now has 2^2 coins. This is a sequence of two advances followed by three swaps.\n\n    states is encoded by lists of 5 coin counts\n    \"\"\"\n    assert states[0] == [1] * 5 and all(len(li) == 5 for li in states) and all(i >= 0 for li in states for i in li)\n    for prev, cur in zip(states, states[1:]):\n        for i in range(5):\n            if cur[i] != prev[i]:\n                break\n        assert cur[i] < prev[i]\n        assert (\n                cur[i + 1] - prev[i + 1] == 2 * (prev[i] - cur[i]) and cur[i + 2:] == prev[i + 2:]  # k decrements\n                or\n                cur[i:i + 3] == [prev[i] - 1, prev[i + 2], prev[i + 1]] and cur[i + 3:] == prev[i + 3:]  # swap\n        )\n\n    return states[-1][-1] == 2 ** n",
    "sols": [
      "def sol(n=256):\n    assert n >= 1\n    ans = [[1] * 5, [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0],\n           [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0]]\n\n    def exp_move():  # shifts last 3 [..., a, 0, 0] to [..., 0, 2^a, 0] for a>0\n        state = ans[-1][:]\n        state[2] -= 1\n        state[3] += 2\n        ans.append(state[:])\n        while state[2]:\n            state[3], state[4] = 0, 2 * state[3]\n            ans.append(state[:])\n            state[2:] = [state[2] - 1, state[4], 0]\n            ans.append(state[:])\n\n    exp_move()\n    assert ans[-1] == [0, 1, 0, 2 ** 14, 0]\n    ans.append([0, 0, 2 ** 14, 0, 0])\n    if n <= 16:\n        ans.append([0, 0, 0, 2 ** 15, 0])\n    else:\n        exp_move()\n        assert ans[-1] == [0, 0, 0, 2 ** (2 ** 14), 0]\n    state = ans[-1][:]\n    state[-2] -= 2 ** (n - 1)\n    state[-1] = 2 ** n\n    ans.append(state)\n    return ans"
    ],
    "module": "IMO",
    "notes": "This problem has *long* answers, not that the code to solve it is long but that what the solution outputs is long.\n\nThe version below uses only 5 boxes (unlike the IMO problem with 6 boxes since 2010^2010^2010 is too big\nfor computers) but the solution is quite similar to the solution to the IMO problem. Because the solution\nrequires exponential many moves, our representation allows combining multiple Type-1 (advance) operations\ninto a single step.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2010-7-2",
    "weight": 0.06666666666666667
  },
  {
    "name": "NoRelativePrimes_0",
    "sat": "def sat(nums: List[int], b=6, m=2):\n    \"\"\"\n    Let P(n) = n^2 + n + 1.\n\n    Given b>=6 and m>=1, find m non-negative integers for which the set {P(a+1), P(a+2), ..., P(a+b)} has\n    the property that there is no element that is relatively prime to every other element.\n\n    Sample input:\n    b = 6\n    m = 2\n\n    Sample output:\n    [195, 196]\n    \"\"\"\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums)\n\n    return True",
    "sols": [
      "def sol(b=6, m=2):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2016 Problem 4](https://www.imo-official.org/problems.aspx)\n\nQuestion: Is there a more efficient solution than the brute-force one we give, perhaps using the Chinese remainder\ntheorem?",
    "taint_date": "2016-7-1",
    "weight": 0.006666666666666666
  },
  {
    "name": "NoRelativePrimes_1",
    "sat": "def sat(nums: List[int], b=7, m=26):\n    \"\"\"\n    Let P(n) = n^2 + n + 1.\n\n    Given b>=6 and m>=1, find m non-negative integers for which the set {P(a+1), P(a+2), ..., P(a+b)} has\n    the property that there is no element that is relatively prime to every other element.\n\n    Sample input:\n    b = 6\n    m = 2\n\n    Sample output:\n    [195, 196]\n    \"\"\"\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums)\n\n    return True",
    "sols": [
      "def sol(b=7, m=26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2016 Problem 4](https://www.imo-official.org/problems.aspx)\n\nQuestion: Is there a more efficient solution than the brute-force one we give, perhaps using the Chinese remainder\ntheorem?",
    "taint_date": "2016-7-1",
    "weight": 0.006666666666666666
  },
  {
    "name": "NoRelativePrimes_2",
    "sat": "def sat(nums: List[int], b=6, m=73):\n    \"\"\"\n    Let P(n) = n^2 + n + 1.\n\n    Given b>=6 and m>=1, find m non-negative integers for which the set {P(a+1), P(a+2), ..., P(a+b)} has\n    the property that there is no element that is relatively prime to every other element.\n\n    Sample input:\n    b = 6\n    m = 2\n\n    Sample output:\n    [195, 196]\n    \"\"\"\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums)\n\n    return True",
    "sols": [
      "def sol(b=6, m=73):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2016 Problem 4](https://www.imo-official.org/problems.aspx)\n\nQuestion: Is there a more efficient solution than the brute-force one we give, perhaps using the Chinese remainder\ntheorem?",
    "taint_date": "2016-7-1",
    "weight": 0.006666666666666666
  },
  {
    "name": "NoRelativePrimes_3",
    "sat": "def sat(nums: List[int], b=17, m=37):\n    \"\"\"\n    Let P(n) = n^2 + n + 1.\n\n    Given b>=6 and m>=1, find m non-negative integers for which the set {P(a+1), P(a+2), ..., P(a+b)} has\n    the property that there is no element that is relatively prime to every other element.\n\n    Sample input:\n    b = 6\n    m = 2\n\n    Sample output:\n    [195, 196]\n    \"\"\"\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums)\n\n    return True",
    "sols": [],
    "module": "IMO",
    "notes": "Inspired by [IMO 2016 Problem 4](https://www.imo-official.org/problems.aspx)\n\nQuestion: Is there a more efficient solution than the brute-force one we give, perhaps using the Chinese remainder\ntheorem?",
    "taint_date": "2016-7-1",
    "weight": 0.006666666666666666
  },
  {
    "name": "NoRelativePrimes_4",
    "sat": "def sat(nums: List[int], b=7, m=92):\n    \"\"\"\n    Let P(n) = n^2 + n + 1.\n\n    Given b>=6 and m>=1, find m non-negative integers for which the set {P(a+1), P(a+2), ..., P(a+b)} has\n    the property that there is no element that is relatively prime to every other element.\n\n    Sample input:\n    b = 6\n    m = 2\n\n    Sample output:\n    [195, 196]\n    \"\"\"\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums)\n\n    return True",
    "sols": [
      "def sol(b=7, m=92):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2016 Problem 4](https://www.imo-official.org/problems.aspx)\n\nQuestion: Is there a more efficient solution than the brute-force one we give, perhaps using the Chinese remainder\ntheorem?",
    "taint_date": "2016-7-1",
    "weight": 0.006666666666666666
  },
  {
    "name": "NoRelativePrimes_5",
    "sat": "def sat(nums: List[int], b=7, m=83):\n    \"\"\"\n    Let P(n) = n^2 + n + 1.\n\n    Given b>=6 and m>=1, find m non-negative integers for which the set {P(a+1), P(a+2), ..., P(a+b)} has\n    the property that there is no element that is relatively prime to every other element.\n\n    Sample input:\n    b = 6\n    m = 2\n\n    Sample output:\n    [195, 196]\n    \"\"\"\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums)\n\n    return True",
    "sols": [
      "def sol(b=7, m=83):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2016 Problem 4](https://www.imo-official.org/problems.aspx)\n\nQuestion: Is there a more efficient solution than the brute-force one we give, perhaps using the Chinese remainder\ntheorem?",
    "taint_date": "2016-7-1",
    "weight": 0.006666666666666666
  },
  {
    "name": "NoRelativePrimes_6",
    "sat": "def sat(nums: List[int], b=16, m=31):\n    \"\"\"\n    Let P(n) = n^2 + n + 1.\n\n    Given b>=6 and m>=1, find m non-negative integers for which the set {P(a+1), P(a+2), ..., P(a+b)} has\n    the property that there is no element that is relatively prime to every other element.\n\n    Sample input:\n    b = 6\n    m = 2\n\n    Sample output:\n    [195, 196]\n    \"\"\"\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums)\n\n    return True",
    "sols": [],
    "module": "IMO",
    "notes": "Inspired by [IMO 2016 Problem 4](https://www.imo-official.org/problems.aspx)\n\nQuestion: Is there a more efficient solution than the brute-force one we give, perhaps using the Chinese remainder\ntheorem?",
    "taint_date": "2016-7-1",
    "weight": 0.006666666666666666
  },
  {
    "name": "NoRelativePrimes_7",
    "sat": "def sat(nums: List[int], b=7, m=90):\n    \"\"\"\n    Let P(n) = n^2 + n + 1.\n\n    Given b>=6 and m>=1, find m non-negative integers for which the set {P(a+1), P(a+2), ..., P(a+b)} has\n    the property that there is no element that is relatively prime to every other element.\n\n    Sample input:\n    b = 6\n    m = 2\n\n    Sample output:\n    [195, 196]\n    \"\"\"\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums)\n\n    return True",
    "sols": [
      "def sol(b=7, m=90):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2016 Problem 4](https://www.imo-official.org/problems.aspx)\n\nQuestion: Is there a more efficient solution than the brute-force one we give, perhaps using the Chinese remainder\ntheorem?",
    "taint_date": "2016-7-1",
    "weight": 0.006666666666666666
  },
  {
    "name": "NoRelativePrimes_8",
    "sat": "def sat(nums: List[int], b=15, m=73):\n    \"\"\"\n    Let P(n) = n^2 + n + 1.\n\n    Given b>=6 and m>=1, find m non-negative integers for which the set {P(a+1), P(a+2), ..., P(a+b)} has\n    the property that there is no element that is relatively prime to every other element.\n\n    Sample input:\n    b = 6\n    m = 2\n\n    Sample output:\n    [195, 196]\n    \"\"\"\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums)\n\n    return True",
    "sols": [],
    "module": "IMO",
    "notes": "Inspired by [IMO 2016 Problem 4](https://www.imo-official.org/problems.aspx)\n\nQuestion: Is there a more efficient solution than the brute-force one we give, perhaps using the Chinese remainder\ntheorem?",
    "taint_date": "2016-7-1",
    "weight": 0.006666666666666666
  },
  {
    "name": "NoRelativePrimes_9",
    "sat": "def sat(nums: List[int], b=19, m=31):\n    \"\"\"\n    Let P(n) = n^2 + n + 1.\n\n    Given b>=6 and m>=1, find m non-negative integers for which the set {P(a+1), P(a+2), ..., P(a+b)} has\n    the property that there is no element that is relatively prime to every other element.\n\n    Sample input:\n    b = 6\n    m = 2\n\n    Sample output:\n    [195, 196]\n    \"\"\"\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums)\n\n    return True",
    "sols": [],
    "module": "IMO",
    "notes": "Inspired by [IMO 2016 Problem 4](https://www.imo-official.org/problems.aspx)\n\nQuestion: Is there a more efficient solution than the brute-force one we give, perhaps using the Chinese remainder\ntheorem?",
    "taint_date": "2016-7-1",
    "weight": 0.006666666666666666
  },
  {
    "name": "FindRepeats_0",
    "sat": "def sat(indices: List[int], a0=123):\n    \"\"\"\n    Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\n    occurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\n    a_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\n\n    For a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\n\n    Sample input:\n    9\n\n    Sample output:\n    [0, 3, 6, ..., 2997]\n\n    The sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\n    all equal in this case.\n    \"\"\"\n    assert a0 >= 0 and a0 % 3 == 0, \"Hint: a_0 is a multiple of 3.\"\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and len({s[i] for i in indices}) == 1",
    "sols": [
      "def sol(a0=123):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans"
    ],
    "module": "IMO",
    "notes": "Note: This problem is much easier than the IMO problem which also required a proof that it is impossible\nfor a_0 not divisible by 3.\n\nInspired by [IMO 2017 Problem 1](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2017-7-12",
    "weight": 0.006666666666666666
  },
  {
    "name": "FindRepeats_1",
    "sat": "def sat(indices: List[int], a0=2827347):\n    \"\"\"\n    Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\n    occurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\n    a_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\n\n    For a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\n\n    Sample input:\n    9\n\n    Sample output:\n    [0, 3, 6, ..., 2997]\n\n    The sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\n    all equal in this case.\n    \"\"\"\n    assert a0 >= 0 and a0 % 3 == 0, \"Hint: a_0 is a multiple of 3.\"\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and len({s[i] for i in indices}) == 1",
    "sols": [
      "def sol(a0=2827347):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans"
    ],
    "module": "IMO",
    "notes": "Note: This problem is much easier than the IMO problem which also required a proof that it is impossible\nfor a_0 not divisible by 3.\n\nInspired by [IMO 2017 Problem 1](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2017-7-12",
    "weight": 0.006666666666666666
  },
  {
    "name": "FindRepeats_2",
    "sat": "def sat(indices: List[int], a0=2362263):\n    \"\"\"\n    Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\n    occurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\n    a_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\n\n    For a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\n\n    Sample input:\n    9\n\n    Sample output:\n    [0, 3, 6, ..., 2997]\n\n    The sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\n    all equal in this case.\n    \"\"\"\n    assert a0 >= 0 and a0 % 3 == 0, \"Hint: a_0 is a multiple of 3.\"\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and len({s[i] for i in indices}) == 1",
    "sols": [
      "def sol(a0=2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans"
    ],
    "module": "IMO",
    "notes": "Note: This problem is much easier than the IMO problem which also required a proof that it is impossible\nfor a_0 not divisible by 3.\n\nInspired by [IMO 2017 Problem 1](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2017-7-12",
    "weight": 0.006666666666666666
  },
  {
    "name": "FindRepeats_3",
    "sat": "def sat(indices: List[int], a0=1703235):\n    \"\"\"\n    Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\n    occurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\n    a_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\n\n    For a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\n\n    Sample input:\n    9\n\n    Sample output:\n    [0, 3, 6, ..., 2997]\n\n    The sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\n    all equal in this case.\n    \"\"\"\n    assert a0 >= 0 and a0 % 3 == 0, \"Hint: a_0 is a multiple of 3.\"\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and len({s[i] for i in indices}) == 1",
    "sols": [
      "def sol(a0=1703235):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans"
    ],
    "module": "IMO",
    "notes": "Note: This problem is much easier than the IMO problem which also required a proof that it is impossible\nfor a_0 not divisible by 3.\n\nInspired by [IMO 2017 Problem 1](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2017-7-12",
    "weight": 0.006666666666666666
  },
  {
    "name": "FindRepeats_4",
    "sat": "def sat(indices: List[int], a0=962856):\n    \"\"\"\n    Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\n    occurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\n    a_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\n\n    For a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\n\n    Sample input:\n    9\n\n    Sample output:\n    [0, 3, 6, ..., 2997]\n\n    The sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\n    all equal in this case.\n    \"\"\"\n    assert a0 >= 0 and a0 % 3 == 0, \"Hint: a_0 is a multiple of 3.\"\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and len({s[i] for i in indices}) == 1",
    "sols": [
      "def sol(a0=962856):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans"
    ],
    "module": "IMO",
    "notes": "Note: This problem is much easier than the IMO problem which also required a proof that it is impossible\nfor a_0 not divisible by 3.\n\nInspired by [IMO 2017 Problem 1](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2017-7-12",
    "weight": 0.006666666666666666
  },
  {
    "name": "FindRepeats_5",
    "sat": "def sat(indices: List[int], a0=2783502):\n    \"\"\"\n    Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\n    occurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\n    a_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\n\n    For a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\n\n    Sample input:\n    9\n\n    Sample output:\n    [0, 3, 6, ..., 2997]\n\n    The sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\n    all equal in this case.\n    \"\"\"\n    assert a0 >= 0 and a0 % 3 == 0, \"Hint: a_0 is a multiple of 3.\"\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and len({s[i] for i in indices}) == 1",
    "sols": [
      "def sol(a0=2783502):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans"
    ],
    "module": "IMO",
    "notes": "Note: This problem is much easier than the IMO problem which also required a proof that it is impossible\nfor a_0 not divisible by 3.\n\nInspired by [IMO 2017 Problem 1](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2017-7-12",
    "weight": 0.006666666666666666
  },
  {
    "name": "FindRepeats_6",
    "sat": "def sat(indices: List[int], a0=157197):\n    \"\"\"\n    Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\n    occurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\n    a_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\n\n    For a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\n\n    Sample input:\n    9\n\n    Sample output:\n    [0, 3, 6, ..., 2997]\n\n    The sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\n    all equal in this case.\n    \"\"\"\n    assert a0 >= 0 and a0 % 3 == 0, \"Hint: a_0 is a multiple of 3.\"\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and len({s[i] for i in indices}) == 1",
    "sols": [
      "def sol(a0=157197):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans"
    ],
    "module": "IMO",
    "notes": "Note: This problem is much easier than the IMO problem which also required a proof that it is impossible\nfor a_0 not divisible by 3.\n\nInspired by [IMO 2017 Problem 1](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2017-7-12",
    "weight": 0.006666666666666666
  },
  {
    "name": "FindRepeats_7",
    "sat": "def sat(indices: List[int], a0=2933850):\n    \"\"\"\n    Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\n    occurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\n    a_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\n\n    For a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\n\n    Sample input:\n    9\n\n    Sample output:\n    [0, 3, 6, ..., 2997]\n\n    The sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\n    all equal in this case.\n    \"\"\"\n    assert a0 >= 0 and a0 % 3 == 0, \"Hint: a_0 is a multiple of 3.\"\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and len({s[i] for i in indices}) == 1",
    "sols": [
      "def sol(a0=2933850):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans"
    ],
    "module": "IMO",
    "notes": "Note: This problem is much easier than the IMO problem which also required a proof that it is impossible\nfor a_0 not divisible by 3.\n\nInspired by [IMO 2017 Problem 1](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2017-7-12",
    "weight": 0.006666666666666666
  },
  {
    "name": "FindRepeats_8",
    "sat": "def sat(indices: List[int], a0=2909385):\n    \"\"\"\n    Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\n    occurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\n    a_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\n\n    For a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\n\n    Sample input:\n    9\n\n    Sample output:\n    [0, 3, 6, ..., 2997]\n\n    The sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\n    all equal in this case.\n    \"\"\"\n    assert a0 >= 0 and a0 % 3 == 0, \"Hint: a_0 is a multiple of 3.\"\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and len({s[i] for i in indices}) == 1",
    "sols": [
      "def sol(a0=2909385):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans"
    ],
    "module": "IMO",
    "notes": "Note: This problem is much easier than the IMO problem which also required a proof that it is impossible\nfor a_0 not divisible by 3.\n\nInspired by [IMO 2017 Problem 1](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2017-7-12",
    "weight": 0.006666666666666666
  },
  {
    "name": "FindRepeats_9",
    "sat": "def sat(indices: List[int], a0=1564314):\n    \"\"\"\n    Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\n    occurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\n    a_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\n\n    For a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\n\n    Sample input:\n    9\n\n    Sample output:\n    [0, 3, 6, ..., 2997]\n\n    The sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\n    all equal in this case.\n    \"\"\"\n    assert a0 >= 0 and a0 % 3 == 0, \"Hint: a_0 is a multiple of 3.\"\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and len({s[i] for i in indices}) == 1",
    "sols": [
      "def sol(a0=1564314):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans"
    ],
    "module": "IMO",
    "notes": "Note: This problem is much easier than the IMO problem which also required a proof that it is impossible\nfor a_0 not divisible by 3.\n\nInspired by [IMO 2017 Problem 1](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2017-7-12",
    "weight": 0.006666666666666666
  },
  {
    "name": "PickNearNeighbors_0",
    "sat": "def sat(keep: List[bool], heights=[10, 2, 14, 1, 8, 19, 16, 6, 12, 3, 17, 0, 9, 18, 5, 7, 11, 13, 15, 4]):\n    \"\"\"\n    Given a permutation of the integers up to n(n+1) as a list, choose 2n numbers to keep (in the same order)\n    so that the remaining list of numbers satisfies:\n    * its largest number is next to its second largest number\n    * its third largest number is next to its fourth largest number\n    ...\n    * its second smallest number is next to its smallest number\n\n    Sample input:\n    [4, 0, 5, 3, 1, 2]\n    n = 2\n\n    Sample output:\n    [True, False, True, False, True, True]\n\n    Keeping these indices results in the sublist [4, 5, 1, 2] where 4 and 5 are adjacent as are 1 and 2.\n    \"\"\"\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * n + n)), \"hint: heights is a permutation of range(n * n + n)\"\n    kept = [i for i, k in zip(heights, keep) if k]\n    assert len(kept) == 2 * n, \"must keep 2n items\"\n    pi = sorted(range(2 * n), key=lambda i: kept[i])  # the sort indices\n    return all(abs(pi[2 * i] - pi[2 * i + 1]) == 1 for i in range(n))",
    "sols": [
      "def sol(heights=[10, 2, 14, 1, 8, 19, 16, 6, 12, 3, 17, 0, 9, 18, 5, 7, 11, 13, 15, 4]): # Based on the judge's solution.\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * (n + 1)))\n    groups = [h // (n + 1) for h in heights]\n    ans = [False] * len(heights)\n    a = 0\n    used_groups = set()\n    while sum(ans) < 2 * n:\n        group_tracker = {}\n        b = a\n        while groups[b] not in group_tracker or groups[b] in used_groups:\n            group_tracker[groups[b]] = b\n            b += 1\n        ans[group_tracker[groups[b]]] = True\n        ans[b] = True\n        used_groups.add(groups[b])\n        a = b + 1\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2017 Problem 5](https://www.imo-official.org/problems.aspx)\n\nThe puzzle solution follows the judge's proof closely.",
    "taint_date": "2017-7-12",
    "weight": 0.006666666666666666
  },
  {
    "name": "PickNearNeighbors_1",
    "sat": "def sat(keep: List[bool], heights=[6, 12, 26, 4, 25, 20, 15, 14, 18, 22, 19, 23, 27, 13, 9, 28, 17, 11, 29, 7, 1, 10, 2, 0, 21, 3, 5, 8, 16, 24]):\n    \"\"\"\n    Given a permutation of the integers up to n(n+1) as a list, choose 2n numbers to keep (in the same order)\n    so that the remaining list of numbers satisfies:\n    * its largest number is next to its second largest number\n    * its third largest number is next to its fourth largest number\n    ...\n    * its second smallest number is next to its smallest number\n\n    Sample input:\n    [4, 0, 5, 3, 1, 2]\n    n = 2\n\n    Sample output:\n    [True, False, True, False, True, True]\n\n    Keeping these indices results in the sublist [4, 5, 1, 2] where 4 and 5 are adjacent as are 1 and 2.\n    \"\"\"\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * n + n)), \"hint: heights is a permutation of range(n * n + n)\"\n    kept = [i for i, k in zip(heights, keep) if k]\n    assert len(kept) == 2 * n, \"must keep 2n items\"\n    pi = sorted(range(2 * n), key=lambda i: kept[i])  # the sort indices\n    return all(abs(pi[2 * i] - pi[2 * i + 1]) == 1 for i in range(n))",
    "sols": [
      "def sol(heights=[6, 12, 26, 4, 25, 20, 15, 14, 18, 22, 19, 23, 27, 13, 9, 28, 17, 11, 29, 7, 1, 10, 2, 0, 21, 3, 5, 8, 16, 24]): # Based on the judge's solution.\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * (n + 1)))\n    groups = [h // (n + 1) for h in heights]\n    ans = [False] * len(heights)\n    a = 0\n    used_groups = set()\n    while sum(ans) < 2 * n:\n        group_tracker = {}\n        b = a\n        while groups[b] not in group_tracker or groups[b] in used_groups:\n            group_tracker[groups[b]] = b\n            b += 1\n        ans[group_tracker[groups[b]]] = True\n        ans[b] = True\n        used_groups.add(groups[b])\n        a = b + 1\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2017 Problem 5](https://www.imo-official.org/problems.aspx)\n\nThe puzzle solution follows the judge's proof closely.",
    "taint_date": "2017-7-12",
    "weight": 0.006666666666666666
  },
  {
    "name": "PickNearNeighbors_2",
    "sat": "def sat(keep: List[bool], heights=[6, 8, 0, 7, 4, 9, 10, 1, 5, 3, 11, 2]):\n    \"\"\"\n    Given a permutation of the integers up to n(n+1) as a list, choose 2n numbers to keep (in the same order)\n    so that the remaining list of numbers satisfies:\n    * its largest number is next to its second largest number\n    * its third largest number is next to its fourth largest number\n    ...\n    * its second smallest number is next to its smallest number\n\n    Sample input:\n    [4, 0, 5, 3, 1, 2]\n    n = 2\n\n    Sample output:\n    [True, False, True, False, True, True]\n\n    Keeping these indices results in the sublist [4, 5, 1, 2] where 4 and 5 are adjacent as are 1 and 2.\n    \"\"\"\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * n + n)), \"hint: heights is a permutation of range(n * n + n)\"\n    kept = [i for i, k in zip(heights, keep) if k]\n    assert len(kept) == 2 * n, \"must keep 2n items\"\n    pi = sorted(range(2 * n), key=lambda i: kept[i])  # the sort indices\n    return all(abs(pi[2 * i] - pi[2 * i + 1]) == 1 for i in range(n))",
    "sols": [
      "def sol(heights=[6, 8, 0, 7, 4, 9, 10, 1, 5, 3, 11, 2]): # Based on the judge's solution.\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * (n + 1)))\n    groups = [h // (n + 1) for h in heights]\n    ans = [False] * len(heights)\n    a = 0\n    used_groups = set()\n    while sum(ans) < 2 * n:\n        group_tracker = {}\n        b = a\n        while groups[b] not in group_tracker or groups[b] in used_groups:\n            group_tracker[groups[b]] = b\n            b += 1\n        ans[group_tracker[groups[b]]] = True\n        ans[b] = True\n        used_groups.add(groups[b])\n        a = b + 1\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2017 Problem 5](https://www.imo-official.org/problems.aspx)\n\nThe puzzle solution follows the judge's proof closely.",
    "taint_date": "2017-7-12",
    "weight": 0.006666666666666666
  },
  {
    "name": "PickNearNeighbors_3",
    "sat": "def sat(keep: List[bool], heights=[46, 61, 80, 16, 71, 32, 13, 12, 2, 75, 62, 56, 17, 28, 67, 54, 22, 27, 38, 63, 69, 84, 70, 57, 86, 72, 66, 8, 41, 3, 23, 88, 83, 58, 36, 50, 65, 30, 34, 25, 39, 20, 78, 79, 59, 4, 21, 73, 45, 37, 48, 77, 10, 44, 14, 43, 42, 0, 33, 29, 7, 52, 5, 60, 68, 9, 26, 49, 40, 76, 31, 6, 85, 74, 24, 51, 1, 89, 11, 47, 18, 19, 81, 87, 35, 64, 82, 15, 55, 53]):\n    \"\"\"\n    Given a permutation of the integers up to n(n+1) as a list, choose 2n numbers to keep (in the same order)\n    so that the remaining list of numbers satisfies:\n    * its largest number is next to its second largest number\n    * its third largest number is next to its fourth largest number\n    ...\n    * its second smallest number is next to its smallest number\n\n    Sample input:\n    [4, 0, 5, 3, 1, 2]\n    n = 2\n\n    Sample output:\n    [True, False, True, False, True, True]\n\n    Keeping these indices results in the sublist [4, 5, 1, 2] where 4 and 5 are adjacent as are 1 and 2.\n    \"\"\"\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * n + n)), \"hint: heights is a permutation of range(n * n + n)\"\n    kept = [i for i, k in zip(heights, keep) if k]\n    assert len(kept) == 2 * n, \"must keep 2n items\"\n    pi = sorted(range(2 * n), key=lambda i: kept[i])  # the sort indices\n    return all(abs(pi[2 * i] - pi[2 * i + 1]) == 1 for i in range(n))",
    "sols": [
      "def sol(heights=[46, 61, 80, 16, 71, 32, 13, 12, 2, 75, 62, 56, 17, 28, 67, 54, 22, 27, 38, 63, 69, 84, 70, 57, 86, 72, 66, 8, 41, 3, 23, 88, 83, 58, 36, 50, 65, 30, 34, 25, 39, 20, 78, 79, 59, 4, 21, 73, 45, 37, 48, 77, 10, 44, 14, 43, 42, 0, 33, 29, 7, 52, 5, 60, 68, 9, 26, 49, 40, 76, 31, 6, 85, 74, 24, 51, 1, 89, 11, 47, 18, 19, 81, 87, 35, 64, 82, 15, 55, 53]): # Based on the judge's solution.\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * (n + 1)))\n    groups = [h // (n + 1) for h in heights]\n    ans = [False] * len(heights)\n    a = 0\n    used_groups = set()\n    while sum(ans) < 2 * n:\n        group_tracker = {}\n        b = a\n        while groups[b] not in group_tracker or groups[b] in used_groups:\n            group_tracker[groups[b]] = b\n            b += 1\n        ans[group_tracker[groups[b]]] = True\n        ans[b] = True\n        used_groups.add(groups[b])\n        a = b + 1\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2017 Problem 5](https://www.imo-official.org/problems.aspx)\n\nThe puzzle solution follows the judge's proof closely.",
    "taint_date": "2017-7-12",
    "weight": 0.006666666666666666
  },
  {
    "name": "PickNearNeighbors_4",
    "sat": "def sat(keep: List[bool], heights=[26, 11, 62, 24, 56, 80, 39, 77, 23, 86, 53, 73, 3, 44, 45, 70, 75, 0, 13, 40, 4, 87, 30, 7, 50, 34, 59, 22, 17, 41, 71, 10, 29, 89, 36, 31, 52, 9, 2, 51, 28, 61, 21, 1, 15, 72, 84, 88, 79, 19, 27, 63, 55, 83, 57, 18, 5, 12, 37, 16, 49, 8, 6, 65, 32, 20, 47, 82, 42, 33, 81, 58, 35, 67, 48, 74, 78, 85, 14, 68, 43, 25, 46, 69, 76, 64, 38, 54, 66, 60]):\n    \"\"\"\n    Given a permutation of the integers up to n(n+1) as a list, choose 2n numbers to keep (in the same order)\n    so that the remaining list of numbers satisfies:\n    * its largest number is next to its second largest number\n    * its third largest number is next to its fourth largest number\n    ...\n    * its second smallest number is next to its smallest number\n\n    Sample input:\n    [4, 0, 5, 3, 1, 2]\n    n = 2\n\n    Sample output:\n    [True, False, True, False, True, True]\n\n    Keeping these indices results in the sublist [4, 5, 1, 2] where 4 and 5 are adjacent as are 1 and 2.\n    \"\"\"\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * n + n)), \"hint: heights is a permutation of range(n * n + n)\"\n    kept = [i for i, k in zip(heights, keep) if k]\n    assert len(kept) == 2 * n, \"must keep 2n items\"\n    pi = sorted(range(2 * n), key=lambda i: kept[i])  # the sort indices\n    return all(abs(pi[2 * i] - pi[2 * i + 1]) == 1 for i in range(n))",
    "sols": [
      "def sol(heights=[26, 11, 62, 24, 56, 80, 39, 77, 23, 86, 53, 73, 3, 44, 45, 70, 75, 0, 13, 40, 4, 87, 30, 7, 50, 34, 59, 22, 17, 41, 71, 10, 29, 89, 36, 31, 52, 9, 2, 51, 28, 61, 21, 1, 15, 72, 84, 88, 79, 19, 27, 63, 55, 83, 57, 18, 5, 12, 37, 16, 49, 8, 6, 65, 32, 20, 47, 82, 42, 33, 81, 58, 35, 67, 48, 74, 78, 85, 14, 68, 43, 25, 46, 69, 76, 64, 38, 54, 66, 60]): # Based on the judge's solution.\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * (n + 1)))\n    groups = [h // (n + 1) for h in heights]\n    ans = [False] * len(heights)\n    a = 0\n    used_groups = set()\n    while sum(ans) < 2 * n:\n        group_tracker = {}\n        b = a\n        while groups[b] not in group_tracker or groups[b] in used_groups:\n            group_tracker[groups[b]] = b\n            b += 1\n        ans[group_tracker[groups[b]]] = True\n        ans[b] = True\n        used_groups.add(groups[b])\n        a = b + 1\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2017 Problem 5](https://www.imo-official.org/problems.aspx)\n\nThe puzzle solution follows the judge's proof closely.",
    "taint_date": "2017-7-12",
    "weight": 0.006666666666666666
  },
  {
    "name": "PickNearNeighbors_5",
    "sat": "def sat(keep: List[bool], heights=[15, 40, 38, 12, 27, 29, 17, 19, 11, 5, 2, 24, 9, 13, 7, 28, 16, 37, 1, 25, 18, 8, 30, 6, 22, 39, 32, 10, 20, 36, 26, 14, 41, 23, 3, 0, 35, 33, 4, 34, 21, 31]):\n    \"\"\"\n    Given a permutation of the integers up to n(n+1) as a list, choose 2n numbers to keep (in the same order)\n    so that the remaining list of numbers satisfies:\n    * its largest number is next to its second largest number\n    * its third largest number is next to its fourth largest number\n    ...\n    * its second smallest number is next to its smallest number\n\n    Sample input:\n    [4, 0, 5, 3, 1, 2]\n    n = 2\n\n    Sample output:\n    [True, False, True, False, True, True]\n\n    Keeping these indices results in the sublist [4, 5, 1, 2] where 4 and 5 are adjacent as are 1 and 2.\n    \"\"\"\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * n + n)), \"hint: heights is a permutation of range(n * n + n)\"\n    kept = [i for i, k in zip(heights, keep) if k]\n    assert len(kept) == 2 * n, \"must keep 2n items\"\n    pi = sorted(range(2 * n), key=lambda i: kept[i])  # the sort indices\n    return all(abs(pi[2 * i] - pi[2 * i + 1]) == 1 for i in range(n))",
    "sols": [
      "def sol(heights=[15, 40, 38, 12, 27, 29, 17, 19, 11, 5, 2, 24, 9, 13, 7, 28, 16, 37, 1, 25, 18, 8, 30, 6, 22, 39, 32, 10, 20, 36, 26, 14, 41, 23, 3, 0, 35, 33, 4, 34, 21, 31]): # Based on the judge's solution.\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * (n + 1)))\n    groups = [h // (n + 1) for h in heights]\n    ans = [False] * len(heights)\n    a = 0\n    used_groups = set()\n    while sum(ans) < 2 * n:\n        group_tracker = {}\n        b = a\n        while groups[b] not in group_tracker or groups[b] in used_groups:\n            group_tracker[groups[b]] = b\n            b += 1\n        ans[group_tracker[groups[b]]] = True\n        ans[b] = True\n        used_groups.add(groups[b])\n        a = b + 1\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2017 Problem 5](https://www.imo-official.org/problems.aspx)\n\nThe puzzle solution follows the judge's proof closely.",
    "taint_date": "2017-7-12",
    "weight": 0.006666666666666666
  },
  {
    "name": "PickNearNeighbors_6",
    "sat": "def sat(keep: List[bool], heights=[20, 2, 41, 19, 52, 76, 12, 1, 67, 8, 35, 82, 60, 24, 28, 83, 80, 66, 69, 40, 81, 23, 29, 17, 25, 48, 72, 85, 58, 26, 84, 89, 16, 73, 15, 7, 5, 53, 13, 36, 55, 88, 44, 47, 3, 54, 50, 10, 87, 75, 70, 56, 30, 4, 6, 49, 0, 31, 77, 42, 45, 71, 57, 79, 37, 65, 64, 33, 34, 27, 78, 11, 74, 21, 32, 61, 18, 51, 38, 63, 9, 62, 46, 14, 39, 86, 59, 43, 22, 68]):\n    \"\"\"\n    Given a permutation of the integers up to n(n+1) as a list, choose 2n numbers to keep (in the same order)\n    so that the remaining list of numbers satisfies:\n    * its largest number is next to its second largest number\n    * its third largest number is next to its fourth largest number\n    ...\n    * its second smallest number is next to its smallest number\n\n    Sample input:\n    [4, 0, 5, 3, 1, 2]\n    n = 2\n\n    Sample output:\n    [True, False, True, False, True, True]\n\n    Keeping these indices results in the sublist [4, 5, 1, 2] where 4 and 5 are adjacent as are 1 and 2.\n    \"\"\"\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * n + n)), \"hint: heights is a permutation of range(n * n + n)\"\n    kept = [i for i, k in zip(heights, keep) if k]\n    assert len(kept) == 2 * n, \"must keep 2n items\"\n    pi = sorted(range(2 * n), key=lambda i: kept[i])  # the sort indices\n    return all(abs(pi[2 * i] - pi[2 * i + 1]) == 1 for i in range(n))",
    "sols": [
      "def sol(heights=[20, 2, 41, 19, 52, 76, 12, 1, 67, 8, 35, 82, 60, 24, 28, 83, 80, 66, 69, 40, 81, 23, 29, 17, 25, 48, 72, 85, 58, 26, 84, 89, 16, 73, 15, 7, 5, 53, 13, 36, 55, 88, 44, 47, 3, 54, 50, 10, 87, 75, 70, 56, 30, 4, 6, 49, 0, 31, 77, 42, 45, 71, 57, 79, 37, 65, 64, 33, 34, 27, 78, 11, 74, 21, 32, 61, 18, 51, 38, 63, 9, 62, 46, 14, 39, 86, 59, 43, 22, 68]): # Based on the judge's solution.\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * (n + 1)))\n    groups = [h // (n + 1) for h in heights]\n    ans = [False] * len(heights)\n    a = 0\n    used_groups = set()\n    while sum(ans) < 2 * n:\n        group_tracker = {}\n        b = a\n        while groups[b] not in group_tracker or groups[b] in used_groups:\n            group_tracker[groups[b]] = b\n            b += 1\n        ans[group_tracker[groups[b]]] = True\n        ans[b] = True\n        used_groups.add(groups[b])\n        a = b + 1\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2017 Problem 5](https://www.imo-official.org/problems.aspx)\n\nThe puzzle solution follows the judge's proof closely.",
    "taint_date": "2017-7-12",
    "weight": 0.006666666666666666
  },
  {
    "name": "PickNearNeighbors_7",
    "sat": "def sat(keep: List[bool], heights=[54, 45, 67, 63, 64, 43, 22, 47, 29, 60, 2, 46, 13, 42, 27, 1, 57, 19, 50, 23, 12, 58, 71, 18, 5, 15, 62, 69, 0, 16, 14, 52, 49, 55, 9, 68, 41, 32, 37, 10, 35, 25, 65, 31, 30, 24, 66, 26, 33, 11, 44, 39, 48, 20, 40, 3, 70, 59, 53, 61, 36, 17, 21, 34, 38, 28, 51, 7, 6, 4, 8, 56]):\n    \"\"\"\n    Given a permutation of the integers up to n(n+1) as a list, choose 2n numbers to keep (in the same order)\n    so that the remaining list of numbers satisfies:\n    * its largest number is next to its second largest number\n    * its third largest number is next to its fourth largest number\n    ...\n    * its second smallest number is next to its smallest number\n\n    Sample input:\n    [4, 0, 5, 3, 1, 2]\n    n = 2\n\n    Sample output:\n    [True, False, True, False, True, True]\n\n    Keeping these indices results in the sublist [4, 5, 1, 2] where 4 and 5 are adjacent as are 1 and 2.\n    \"\"\"\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * n + n)), \"hint: heights is a permutation of range(n * n + n)\"\n    kept = [i for i, k in zip(heights, keep) if k]\n    assert len(kept) == 2 * n, \"must keep 2n items\"\n    pi = sorted(range(2 * n), key=lambda i: kept[i])  # the sort indices\n    return all(abs(pi[2 * i] - pi[2 * i + 1]) == 1 for i in range(n))",
    "sols": [
      "def sol(heights=[54, 45, 67, 63, 64, 43, 22, 47, 29, 60, 2, 46, 13, 42, 27, 1, 57, 19, 50, 23, 12, 58, 71, 18, 5, 15, 62, 69, 0, 16, 14, 52, 49, 55, 9, 68, 41, 32, 37, 10, 35, 25, 65, 31, 30, 24, 66, 26, 33, 11, 44, 39, 48, 20, 40, 3, 70, 59, 53, 61, 36, 17, 21, 34, 38, 28, 51, 7, 6, 4, 8, 56]): # Based on the judge's solution.\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * (n + 1)))\n    groups = [h // (n + 1) for h in heights]\n    ans = [False] * len(heights)\n    a = 0\n    used_groups = set()\n    while sum(ans) < 2 * n:\n        group_tracker = {}\n        b = a\n        while groups[b] not in group_tracker or groups[b] in used_groups:\n            group_tracker[groups[b]] = b\n            b += 1\n        ans[group_tracker[groups[b]]] = True\n        ans[b] = True\n        used_groups.add(groups[b])\n        a = b + 1\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2017 Problem 5](https://www.imo-official.org/problems.aspx)\n\nThe puzzle solution follows the judge's proof closely.",
    "taint_date": "2017-7-12",
    "weight": 0.006666666666666666
  },
  {
    "name": "PickNearNeighbors_8",
    "sat": "def sat(keep: List[bool], heights=[38, 26, 22, 21, 66, 11, 31, 60, 64, 41, 55, 27, 35, 42, 4, 56, 67, 51, 8, 48, 23, 54, 62, 49, 13, 33, 68, 5, 24, 1, 61, 20, 34, 69, 30, 0, 45, 18, 57, 65, 47, 2, 12, 7, 50, 16, 19, 53, 58, 52, 43, 71, 37, 28, 9, 6, 46, 59, 70, 40, 32, 25, 10, 44, 14, 29, 3, 39, 15, 36, 63, 17]):\n    \"\"\"\n    Given a permutation of the integers up to n(n+1) as a list, choose 2n numbers to keep (in the same order)\n    so that the remaining list of numbers satisfies:\n    * its largest number is next to its second largest number\n    * its third largest number is next to its fourth largest number\n    ...\n    * its second smallest number is next to its smallest number\n\n    Sample input:\n    [4, 0, 5, 3, 1, 2]\n    n = 2\n\n    Sample output:\n    [True, False, True, False, True, True]\n\n    Keeping these indices results in the sublist [4, 5, 1, 2] where 4 and 5 are adjacent as are 1 and 2.\n    \"\"\"\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * n + n)), \"hint: heights is a permutation of range(n * n + n)\"\n    kept = [i for i, k in zip(heights, keep) if k]\n    assert len(kept) == 2 * n, \"must keep 2n items\"\n    pi = sorted(range(2 * n), key=lambda i: kept[i])  # the sort indices\n    return all(abs(pi[2 * i] - pi[2 * i + 1]) == 1 for i in range(n))",
    "sols": [
      "def sol(heights=[38, 26, 22, 21, 66, 11, 31, 60, 64, 41, 55, 27, 35, 42, 4, 56, 67, 51, 8, 48, 23, 54, 62, 49, 13, 33, 68, 5, 24, 1, 61, 20, 34, 69, 30, 0, 45, 18, 57, 65, 47, 2, 12, 7, 50, 16, 19, 53, 58, 52, 43, 71, 37, 28, 9, 6, 46, 59, 70, 40, 32, 25, 10, 44, 14, 29, 3, 39, 15, 36, 63, 17]): # Based on the judge's solution.\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * (n + 1)))\n    groups = [h // (n + 1) for h in heights]\n    ans = [False] * len(heights)\n    a = 0\n    used_groups = set()\n    while sum(ans) < 2 * n:\n        group_tracker = {}\n        b = a\n        while groups[b] not in group_tracker or groups[b] in used_groups:\n            group_tracker[groups[b]] = b\n            b += 1\n        ans[group_tracker[groups[b]]] = True\n        ans[b] = True\n        used_groups.add(groups[b])\n        a = b + 1\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2017 Problem 5](https://www.imo-official.org/problems.aspx)\n\nThe puzzle solution follows the judge's proof closely.",
    "taint_date": "2017-7-12",
    "weight": 0.006666666666666666
  },
  {
    "name": "PickNearNeighbors_9",
    "sat": "def sat(keep: List[bool], heights=[9, 12, 76, 10, 53, 17, 70, 60, 30, 80, 51, 44, 26, 52, 16, 5, 39, 72, 19, 87, 7, 63, 36, 66, 11, 43, 56, 29, 14, 68, 74, 48, 83, 32, 27, 8, 24, 69, 89, 71, 77, 13, 25, 81, 45, 82, 31, 15, 50, 37, 0, 49, 78, 84, 22, 58, 35, 62, 59, 47, 34, 65, 3, 85, 88, 33, 2, 4, 42, 20, 54, 73, 86, 23, 64, 79, 38, 40, 28, 18, 1, 75, 55, 57, 21, 46, 6, 67, 41, 61]):\n    \"\"\"\n    Given a permutation of the integers up to n(n+1) as a list, choose 2n numbers to keep (in the same order)\n    so that the remaining list of numbers satisfies:\n    * its largest number is next to its second largest number\n    * its third largest number is next to its fourth largest number\n    ...\n    * its second smallest number is next to its smallest number\n\n    Sample input:\n    [4, 0, 5, 3, 1, 2]\n    n = 2\n\n    Sample output:\n    [True, False, True, False, True, True]\n\n    Keeping these indices results in the sublist [4, 5, 1, 2] where 4 and 5 are adjacent as are 1 and 2.\n    \"\"\"\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * n + n)), \"hint: heights is a permutation of range(n * n + n)\"\n    kept = [i for i, k in zip(heights, keep) if k]\n    assert len(kept) == 2 * n, \"must keep 2n items\"\n    pi = sorted(range(2 * n), key=lambda i: kept[i])  # the sort indices\n    return all(abs(pi[2 * i] - pi[2 * i + 1]) == 1 for i in range(n))",
    "sols": [
      "def sol(heights=[9, 12, 76, 10, 53, 17, 70, 60, 30, 80, 51, 44, 26, 52, 16, 5, 39, 72, 19, 87, 7, 63, 36, 66, 11, 43, 56, 29, 14, 68, 74, 48, 83, 32, 27, 8, 24, 69, 89, 71, 77, 13, 25, 81, 45, 82, 31, 15, 50, 37, 0, 49, 78, 84, 22, 58, 35, 62, 59, 47, 34, 65, 3, 85, 88, 33, 2, 4, 42, 20, 54, 73, 86, 23, 64, 79, 38, 40, 28, 18, 1, 75, 55, 57, 21, 46, 6, 67, 41, 61]): # Based on the judge's solution.\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * (n + 1)))\n    groups = [h // (n + 1) for h in heights]\n    ans = [False] * len(heights)\n    a = 0\n    used_groups = set()\n    while sum(ans) < 2 * n:\n        group_tracker = {}\n        b = a\n        while groups[b] not in group_tracker or groups[b] in used_groups:\n            group_tracker[groups[b]] = b\n            b += 1\n        ans[group_tracker[groups[b]]] = True\n        ans[b] = True\n        used_groups.add(groups[b])\n        a = b + 1\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2017 Problem 5](https://www.imo-official.org/problems.aspx)\n\nThe puzzle solution follows the judge's proof closely.",
    "taint_date": "2017-7-12",
    "weight": 0.006666666666666666
  },
  {
    "name": "FindProductiveList_0",
    "sat": "def sat(li: List[int], n=18):\n    \"\"\"\n    Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\n    where indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\n    that are multiples of 3 (as proven in the IMO problem).\n\n    Sample input:\n    6\n\n    Sample output:\n    [_, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    assert n % 3 == 0, \"Hint: n is a multiple of 3\"\n    return len(li) == n and all(li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n))",
    "sols": [
      "def sol(n=18):\n    return [-1, -1, 2] * (n // 3)"
    ],
    "module": "IMO",
    "notes": "Note: This problem is easier than the IMO problem because the hard part is proving that sequences do not\nexists for non-multiples of 3.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2010-7-2",
    "weight": 0.006666666666666666
  },
  {
    "name": "FindProductiveList_1",
    "sat": "def sat(li: List[int], n=3):\n    \"\"\"\n    Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\n    where indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\n    that are multiples of 3 (as proven in the IMO problem).\n\n    Sample input:\n    6\n\n    Sample output:\n    [_, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    assert n % 3 == 0, \"Hint: n is a multiple of 3\"\n    return len(li) == n and all(li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n))",
    "sols": [
      "def sol(n=3):\n    return [-1, -1, 2] * (n // 3)"
    ],
    "module": "IMO",
    "notes": "Note: This problem is easier than the IMO problem because the hard part is proving that sequences do not\nexists for non-multiples of 3.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2010-7-2",
    "weight": 0.006666666666666666
  },
  {
    "name": "FindProductiveList_2",
    "sat": "def sat(li: List[int], n=6):\n    \"\"\"\n    Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\n    where indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\n    that are multiples of 3 (as proven in the IMO problem).\n\n    Sample input:\n    6\n\n    Sample output:\n    [_, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    assert n % 3 == 0, \"Hint: n is a multiple of 3\"\n    return len(li) == n and all(li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n))",
    "sols": [
      "def sol(n=6):\n    return [-1, -1, 2] * (n // 3)"
    ],
    "module": "IMO",
    "notes": "Note: This problem is easier than the IMO problem because the hard part is proving that sequences do not\nexists for non-multiples of 3.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2010-7-2",
    "weight": 0.006666666666666666
  },
  {
    "name": "FindProductiveList_3",
    "sat": "def sat(li: List[int], n=9):\n    \"\"\"\n    Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\n    where indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\n    that are multiples of 3 (as proven in the IMO problem).\n\n    Sample input:\n    6\n\n    Sample output:\n    [_, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    assert n % 3 == 0, \"Hint: n is a multiple of 3\"\n    return len(li) == n and all(li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n))",
    "sols": [
      "def sol(n=9):\n    return [-1, -1, 2] * (n // 3)"
    ],
    "module": "IMO",
    "notes": "Note: This problem is easier than the IMO problem because the hard part is proving that sequences do not\nexists for non-multiples of 3.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2010-7-2",
    "weight": 0.006666666666666666
  },
  {
    "name": "FindProductiveList_4",
    "sat": "def sat(li: List[int], n=12):\n    \"\"\"\n    Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\n    where indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\n    that are multiples of 3 (as proven in the IMO problem).\n\n    Sample input:\n    6\n\n    Sample output:\n    [_, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    assert n % 3 == 0, \"Hint: n is a multiple of 3\"\n    return len(li) == n and all(li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n))",
    "sols": [
      "def sol(n=12):\n    return [-1, -1, 2] * (n // 3)"
    ],
    "module": "IMO",
    "notes": "Note: This problem is easier than the IMO problem because the hard part is proving that sequences do not\nexists for non-multiples of 3.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2010-7-2",
    "weight": 0.006666666666666666
  },
  {
    "name": "FindProductiveList_5",
    "sat": "def sat(li: List[int], n=15):\n    \"\"\"\n    Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\n    where indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\n    that are multiples of 3 (as proven in the IMO problem).\n\n    Sample input:\n    6\n\n    Sample output:\n    [_, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    assert n % 3 == 0, \"Hint: n is a multiple of 3\"\n    return len(li) == n and all(li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n))",
    "sols": [
      "def sol(n=15):\n    return [-1, -1, 2] * (n // 3)"
    ],
    "module": "IMO",
    "notes": "Note: This problem is easier than the IMO problem because the hard part is proving that sequences do not\nexists for non-multiples of 3.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2010-7-2",
    "weight": 0.006666666666666666
  },
  {
    "name": "FindProductiveList_6",
    "sat": "def sat(li: List[int], n=21):\n    \"\"\"\n    Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\n    where indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\n    that are multiples of 3 (as proven in the IMO problem).\n\n    Sample input:\n    6\n\n    Sample output:\n    [_, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    assert n % 3 == 0, \"Hint: n is a multiple of 3\"\n    return len(li) == n and all(li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n))",
    "sols": [
      "def sol(n=21):\n    return [-1, -1, 2] * (n // 3)"
    ],
    "module": "IMO",
    "notes": "Note: This problem is easier than the IMO problem because the hard part is proving that sequences do not\nexists for non-multiples of 3.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2010-7-2",
    "weight": 0.006666666666666666
  },
  {
    "name": "FindProductiveList_7",
    "sat": "def sat(li: List[int], n=24):\n    \"\"\"\n    Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\n    where indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\n    that are multiples of 3 (as proven in the IMO problem).\n\n    Sample input:\n    6\n\n    Sample output:\n    [_, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    assert n % 3 == 0, \"Hint: n is a multiple of 3\"\n    return len(li) == n and all(li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n))",
    "sols": [
      "def sol(n=24):\n    return [-1, -1, 2] * (n // 3)"
    ],
    "module": "IMO",
    "notes": "Note: This problem is easier than the IMO problem because the hard part is proving that sequences do not\nexists for non-multiples of 3.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2010-7-2",
    "weight": 0.006666666666666666
  },
  {
    "name": "FindProductiveList_8",
    "sat": "def sat(li: List[int], n=27):\n    \"\"\"\n    Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\n    where indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\n    that are multiples of 3 (as proven in the IMO problem).\n\n    Sample input:\n    6\n\n    Sample output:\n    [_, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    assert n % 3 == 0, \"Hint: n is a multiple of 3\"\n    return len(li) == n and all(li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n))",
    "sols": [
      "def sol(n=27):\n    return [-1, -1, 2] * (n // 3)"
    ],
    "module": "IMO",
    "notes": "Note: This problem is easier than the IMO problem because the hard part is proving that sequences do not\nexists for non-multiples of 3.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2010-7-2",
    "weight": 0.006666666666666666
  },
  {
    "name": "FindProductiveList_9",
    "sat": "def sat(li: List[int], n=30):\n    \"\"\"\n    Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\n    where indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\n    that are multiples of 3 (as proven in the IMO problem).\n\n    Sample input:\n    6\n\n    Sample output:\n    [_, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    assert n % 3 == 0, \"Hint: n is a multiple of 3\"\n    return len(li) == n and all(li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n))",
    "sols": [
      "def sol(n=30):\n    return [-1, -1, 2] * (n // 3)"
    ],
    "module": "IMO",
    "notes": "Note: This problem is easier than the IMO problem because the hard part is proving that sequences do not\nexists for non-multiples of 3.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2010-7-2",
    "weight": 0.006666666666666666
  },
  {
    "name": "HalfTag_0",
    "sat": "def sat(li: List[int], n=3, tags=[0, 1, 2, 0, 0, 1, 1, 1, 2, 2, 0, 2]):\n    \"\"\"\n    The input tags is a list of 4n integer tags each in range(n) with each tag occurring 4 times.\n    The goal is to find a subset (list) li of half the indices such that:\n    * The sum of the indices equals the sum of the sum of the missing indices.\n    * The tags of the chosen indices contains exactly each number in range(n) twice.\n\n    Sample input:\n    n = 3\n    tags = [0, 1, 2, 0, 0, 1, 1, 1, 2, 2, 0, 2]\n\n    Sample output:\n    [0, 3, 5, 6, 8, 11]\n\n    Note the sum of the output is 33 = (0+1+2+...+11)/2 and the selected tags are [0, 0, 1, 1, 2, 2]\n    \"\"\"\n    assert sorted(tags) == sorted(list(range(n)) * 4), \"hint: each tag occurs exactly four times\"\n    assert len(li) == len(set(li)) and min(li) >= 0\n    return sum(li) * 2 == sum(range(4 * n)) and sorted([tags[i] for i in li]) == [i // 2 for i in range(2 * n)]",
    "sols": [
      "def sol(n=3, tags=[0, 1, 2, 0, 0, 1, 1, 1, 2, 2, 0, 2]):\n    pairs = {(i, 4 * n - i - 1) for i in range(2 * n)}\n    by_tag = {tag: [] for tag in range(n)}\n    for p in pairs:\n        a, b = [tags[i] for i in p]\n        by_tag[a].append(p)\n        by_tag[b].append(p)\n    cycles = []\n    cycle = []\n    while pairs:\n        if not cycle:  # start new cycle\n            p = pairs.pop()\n            pairs.add(p)  # just to pick a tag\n            tag = tags[p[0]]\n            # print(\"Starting cycle with tag\", tag)\n        p = by_tag[tag].pop()\n        a, b = [tags[i] for i in p]\n        # print(p, a, b)\n        tag = a if a != tag else b\n        by_tag[tag].remove(p)\n        cycle.append(p if tag == b else p[::-1])\n        pairs.remove(p)\n        if not by_tag[tag]:\n            cycles.append(cycle)\n            cycle = []\n\n    while any(len(c) % 2 for c in cycles):\n        cycle_tags = [{tags[k] for p in c for k in p} for c in cycles]\n        merged = False\n        for i in range(len(cycles)):\n            for j in range(i):\n                intersection = cycle_tags[i].intersection(cycle_tags[j])\n                if intersection:\n                    c = intersection.pop()\n                    # print(f\"Merging cycle {i} and cycle {j} at tag {c}\", cycles)\n                    cycle_i = cycles.pop(i)\n                    for i1, p in enumerate(cycle_i):\n                        if tags[p[0]] == c:\n                            break\n                    for j1, p in enumerate(cycles[j]):\n                        if tags[p[0]] == c:\n                            break\n                    cycles[j][j1:j1] = cycle_i[i1:] + cycle_i[:i1]\n                    merged = True\n                    break\n            if merged:\n                break\n\n    ans = []\n    for c in cycles:\n        for i, p in enumerate(c):\n            if i % 2:\n                ans += p\n\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2020 Problem 3](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2020-9-19",
    "weight": 0.006666666666666666
  },
  {
    "name": "HalfTag_1",
    "sat": "def sat(li: List[int], n=4, tags=[2, 3, 1, 0, 3, 3, 0, 2, 1, 3, 1, 0, 1, 2, 2, 0]):\n    \"\"\"\n    The input tags is a list of 4n integer tags each in range(n) with each tag occurring 4 times.\n    The goal is to find a subset (list) li of half the indices such that:\n    * The sum of the indices equals the sum of the sum of the missing indices.\n    * The tags of the chosen indices contains exactly each number in range(n) twice.\n\n    Sample input:\n    n = 3\n    tags = [0, 1, 2, 0, 0, 1, 1, 1, 2, 2, 0, 2]\n\n    Sample output:\n    [0, 3, 5, 6, 8, 11]\n\n    Note the sum of the output is 33 = (0+1+2+...+11)/2 and the selected tags are [0, 0, 1, 1, 2, 2]\n    \"\"\"\n    assert sorted(tags) == sorted(list(range(n)) * 4), \"hint: each tag occurs exactly four times\"\n    assert len(li) == len(set(li)) and min(li) >= 0\n    return sum(li) * 2 == sum(range(4 * n)) and sorted([tags[i] for i in li]) == [i // 2 for i in range(2 * n)]",
    "sols": [
      "def sol(n=4, tags=[2, 3, 1, 0, 3, 3, 0, 2, 1, 3, 1, 0, 1, 2, 2, 0]):\n    pairs = {(i, 4 * n - i - 1) for i in range(2 * n)}\n    by_tag = {tag: [] for tag in range(n)}\n    for p in pairs:\n        a, b = [tags[i] for i in p]\n        by_tag[a].append(p)\n        by_tag[b].append(p)\n    cycles = []\n    cycle = []\n    while pairs:\n        if not cycle:  # start new cycle\n            p = pairs.pop()\n            pairs.add(p)  # just to pick a tag\n            tag = tags[p[0]]\n            # print(\"Starting cycle with tag\", tag)\n        p = by_tag[tag].pop()\n        a, b = [tags[i] for i in p]\n        # print(p, a, b)\n        tag = a if a != tag else b\n        by_tag[tag].remove(p)\n        cycle.append(p if tag == b else p[::-1])\n        pairs.remove(p)\n        if not by_tag[tag]:\n            cycles.append(cycle)\n            cycle = []\n\n    while any(len(c) % 2 for c in cycles):\n        cycle_tags = [{tags[k] for p in c for k in p} for c in cycles]\n        merged = False\n        for i in range(len(cycles)):\n            for j in range(i):\n                intersection = cycle_tags[i].intersection(cycle_tags[j])\n                if intersection:\n                    c = intersection.pop()\n                    # print(f\"Merging cycle {i} and cycle {j} at tag {c}\", cycles)\n                    cycle_i = cycles.pop(i)\n                    for i1, p in enumerate(cycle_i):\n                        if tags[p[0]] == c:\n                            break\n                    for j1, p in enumerate(cycles[j]):\n                        if tags[p[0]] == c:\n                            break\n                    cycles[j][j1:j1] = cycle_i[i1:] + cycle_i[:i1]\n                    merged = True\n                    break\n            if merged:\n                break\n\n    ans = []\n    for c in cycles:\n        for i, p in enumerate(c):\n            if i % 2:\n                ans += p\n\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2020 Problem 3](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2020-9-19",
    "weight": 0.006666666666666666
  },
  {
    "name": "HalfTag_2",
    "sat": "def sat(li: List[int], n=7, tags=[4, 1, 6, 5, 6, 4, 2, 1, 6, 2, 3, 1, 4, 6, 5, 2, 3, 5, 0, 5, 0, 3, 0, 0, 4, 2, 3, 1]):\n    \"\"\"\n    The input tags is a list of 4n integer tags each in range(n) with each tag occurring 4 times.\n    The goal is to find a subset (list) li of half the indices such that:\n    * The sum of the indices equals the sum of the sum of the missing indices.\n    * The tags of the chosen indices contains exactly each number in range(n) twice.\n\n    Sample input:\n    n = 3\n    tags = [0, 1, 2, 0, 0, 1, 1, 1, 2, 2, 0, 2]\n\n    Sample output:\n    [0, 3, 5, 6, 8, 11]\n\n    Note the sum of the output is 33 = (0+1+2+...+11)/2 and the selected tags are [0, 0, 1, 1, 2, 2]\n    \"\"\"\n    assert sorted(tags) == sorted(list(range(n)) * 4), \"hint: each tag occurs exactly four times\"\n    assert len(li) == len(set(li)) and min(li) >= 0\n    return sum(li) * 2 == sum(range(4 * n)) and sorted([tags[i] for i in li]) == [i // 2 for i in range(2 * n)]",
    "sols": [
      "def sol(n=7, tags=[4, 1, 6, 5, 6, 4, 2, 1, 6, 2, 3, 1, 4, 6, 5, 2, 3, 5, 0, 5, 0, 3, 0, 0, 4, 2, 3, 1]):\n    pairs = {(i, 4 * n - i - 1) for i in range(2 * n)}\n    by_tag = {tag: [] for tag in range(n)}\n    for p in pairs:\n        a, b = [tags[i] for i in p]\n        by_tag[a].append(p)\n        by_tag[b].append(p)\n    cycles = []\n    cycle = []\n    while pairs:\n        if not cycle:  # start new cycle\n            p = pairs.pop()\n            pairs.add(p)  # just to pick a tag\n            tag = tags[p[0]]\n            # print(\"Starting cycle with tag\", tag)\n        p = by_tag[tag].pop()\n        a, b = [tags[i] for i in p]\n        # print(p, a, b)\n        tag = a if a != tag else b\n        by_tag[tag].remove(p)\n        cycle.append(p if tag == b else p[::-1])\n        pairs.remove(p)\n        if not by_tag[tag]:\n            cycles.append(cycle)\n            cycle = []\n\n    while any(len(c) % 2 for c in cycles):\n        cycle_tags = [{tags[k] for p in c for k in p} for c in cycles]\n        merged = False\n        for i in range(len(cycles)):\n            for j in range(i):\n                intersection = cycle_tags[i].intersection(cycle_tags[j])\n                if intersection:\n                    c = intersection.pop()\n                    # print(f\"Merging cycle {i} and cycle {j} at tag {c}\", cycles)\n                    cycle_i = cycles.pop(i)\n                    for i1, p in enumerate(cycle_i):\n                        if tags[p[0]] == c:\n                            break\n                    for j1, p in enumerate(cycles[j]):\n                        if tags[p[0]] == c:\n                            break\n                    cycles[j][j1:j1] = cycle_i[i1:] + cycle_i[:i1]\n                    merged = True\n                    break\n            if merged:\n                break\n\n    ans = []\n    for c in cycles:\n        for i, p in enumerate(c):\n            if i % 2:\n                ans += p\n\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2020 Problem 3](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2020-9-19",
    "weight": 0.006666666666666666
  },
  {
    "name": "HalfTag_3",
    "sat": "def sat(li: List[int], n=3, tags=[0, 2, 1, 1, 1, 1, 2, 2, 0, 0, 0, 2]):\n    \"\"\"\n    The input tags is a list of 4n integer tags each in range(n) with each tag occurring 4 times.\n    The goal is to find a subset (list) li of half the indices such that:\n    * The sum of the indices equals the sum of the sum of the missing indices.\n    * The tags of the chosen indices contains exactly each number in range(n) twice.\n\n    Sample input:\n    n = 3\n    tags = [0, 1, 2, 0, 0, 1, 1, 1, 2, 2, 0, 2]\n\n    Sample output:\n    [0, 3, 5, 6, 8, 11]\n\n    Note the sum of the output is 33 = (0+1+2+...+11)/2 and the selected tags are [0, 0, 1, 1, 2, 2]\n    \"\"\"\n    assert sorted(tags) == sorted(list(range(n)) * 4), \"hint: each tag occurs exactly four times\"\n    assert len(li) == len(set(li)) and min(li) >= 0\n    return sum(li) * 2 == sum(range(4 * n)) and sorted([tags[i] for i in li]) == [i // 2 for i in range(2 * n)]",
    "sols": [
      "def sol(n=3, tags=[0, 2, 1, 1, 1, 1, 2, 2, 0, 0, 0, 2]):\n    pairs = {(i, 4 * n - i - 1) for i in range(2 * n)}\n    by_tag = {tag: [] for tag in range(n)}\n    for p in pairs:\n        a, b = [tags[i] for i in p]\n        by_tag[a].append(p)\n        by_tag[b].append(p)\n    cycles = []\n    cycle = []\n    while pairs:\n        if not cycle:  # start new cycle\n            p = pairs.pop()\n            pairs.add(p)  # just to pick a tag\n            tag = tags[p[0]]\n            # print(\"Starting cycle with tag\", tag)\n        p = by_tag[tag].pop()\n        a, b = [tags[i] for i in p]\n        # print(p, a, b)\n        tag = a if a != tag else b\n        by_tag[tag].remove(p)\n        cycle.append(p if tag == b else p[::-1])\n        pairs.remove(p)\n        if not by_tag[tag]:\n            cycles.append(cycle)\n            cycle = []\n\n    while any(len(c) % 2 for c in cycles):\n        cycle_tags = [{tags[k] for p in c for k in p} for c in cycles]\n        merged = False\n        for i in range(len(cycles)):\n            for j in range(i):\n                intersection = cycle_tags[i].intersection(cycle_tags[j])\n                if intersection:\n                    c = intersection.pop()\n                    # print(f\"Merging cycle {i} and cycle {j} at tag {c}\", cycles)\n                    cycle_i = cycles.pop(i)\n                    for i1, p in enumerate(cycle_i):\n                        if tags[p[0]] == c:\n                            break\n                    for j1, p in enumerate(cycles[j]):\n                        if tags[p[0]] == c:\n                            break\n                    cycles[j][j1:j1] = cycle_i[i1:] + cycle_i[:i1]\n                    merged = True\n                    break\n            if merged:\n                break\n\n    ans = []\n    for c in cycles:\n        for i, p in enumerate(c):\n            if i % 2:\n                ans += p\n\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2020 Problem 3](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2020-9-19",
    "weight": 0.006666666666666666
  },
  {
    "name": "HalfTag_4",
    "sat": "def sat(li: List[int], n=8, tags=[1, 2, 6, 0, 6, 2, 4, 7, 4, 0, 0, 5, 0, 3, 2, 1, 7, 5, 5, 3, 1, 7, 2, 7, 6, 6, 3, 3, 1, 4, 4, 5]):\n    \"\"\"\n    The input tags is a list of 4n integer tags each in range(n) with each tag occurring 4 times.\n    The goal is to find a subset (list) li of half the indices such that:\n    * The sum of the indices equals the sum of the sum of the missing indices.\n    * The tags of the chosen indices contains exactly each number in range(n) twice.\n\n    Sample input:\n    n = 3\n    tags = [0, 1, 2, 0, 0, 1, 1, 1, 2, 2, 0, 2]\n\n    Sample output:\n    [0, 3, 5, 6, 8, 11]\n\n    Note the sum of the output is 33 = (0+1+2+...+11)/2 and the selected tags are [0, 0, 1, 1, 2, 2]\n    \"\"\"\n    assert sorted(tags) == sorted(list(range(n)) * 4), \"hint: each tag occurs exactly four times\"\n    assert len(li) == len(set(li)) and min(li) >= 0\n    return sum(li) * 2 == sum(range(4 * n)) and sorted([tags[i] for i in li]) == [i // 2 for i in range(2 * n)]",
    "sols": [
      "def sol(n=8, tags=[1, 2, 6, 0, 6, 2, 4, 7, 4, 0, 0, 5, 0, 3, 2, 1, 7, 5, 5, 3, 1, 7, 2, 7, 6, 6, 3, 3, 1, 4, 4, 5]):\n    pairs = {(i, 4 * n - i - 1) for i in range(2 * n)}\n    by_tag = {tag: [] for tag in range(n)}\n    for p in pairs:\n        a, b = [tags[i] for i in p]\n        by_tag[a].append(p)\n        by_tag[b].append(p)\n    cycles = []\n    cycle = []\n    while pairs:\n        if not cycle:  # start new cycle\n            p = pairs.pop()\n            pairs.add(p)  # just to pick a tag\n            tag = tags[p[0]]\n            # print(\"Starting cycle with tag\", tag)\n        p = by_tag[tag].pop()\n        a, b = [tags[i] for i in p]\n        # print(p, a, b)\n        tag = a if a != tag else b\n        by_tag[tag].remove(p)\n        cycle.append(p if tag == b else p[::-1])\n        pairs.remove(p)\n        if not by_tag[tag]:\n            cycles.append(cycle)\n            cycle = []\n\n    while any(len(c) % 2 for c in cycles):\n        cycle_tags = [{tags[k] for p in c for k in p} for c in cycles]\n        merged = False\n        for i in range(len(cycles)):\n            for j in range(i):\n                intersection = cycle_tags[i].intersection(cycle_tags[j])\n                if intersection:\n                    c = intersection.pop()\n                    # print(f\"Merging cycle {i} and cycle {j} at tag {c}\", cycles)\n                    cycle_i = cycles.pop(i)\n                    for i1, p in enumerate(cycle_i):\n                        if tags[p[0]] == c:\n                            break\n                    for j1, p in enumerate(cycles[j]):\n                        if tags[p[0]] == c:\n                            break\n                    cycles[j][j1:j1] = cycle_i[i1:] + cycle_i[:i1]\n                    merged = True\n                    break\n            if merged:\n                break\n\n    ans = []\n    for c in cycles:\n        for i, p in enumerate(c):\n            if i % 2:\n                ans += p\n\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2020 Problem 3](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2020-9-19",
    "weight": 0.006666666666666666
  },
  {
    "name": "HalfTag_5",
    "sat": "def sat(li: List[int], n=8, tags=[4, 3, 7, 7, 6, 4, 6, 3, 4, 4, 0, 2, 3, 7, 5, 5, 6, 2, 7, 6, 0, 1, 0, 0, 5, 5, 1, 1, 2, 1, 3, 2]):\n    \"\"\"\n    The input tags is a list of 4n integer tags each in range(n) with each tag occurring 4 times.\n    The goal is to find a subset (list) li of half the indices such that:\n    * The sum of the indices equals the sum of the sum of the missing indices.\n    * The tags of the chosen indices contains exactly each number in range(n) twice.\n\n    Sample input:\n    n = 3\n    tags = [0, 1, 2, 0, 0, 1, 1, 1, 2, 2, 0, 2]\n\n    Sample output:\n    [0, 3, 5, 6, 8, 11]\n\n    Note the sum of the output is 33 = (0+1+2+...+11)/2 and the selected tags are [0, 0, 1, 1, 2, 2]\n    \"\"\"\n    assert sorted(tags) == sorted(list(range(n)) * 4), \"hint: each tag occurs exactly four times\"\n    assert len(li) == len(set(li)) and min(li) >= 0\n    return sum(li) * 2 == sum(range(4 * n)) and sorted([tags[i] for i in li]) == [i // 2 for i in range(2 * n)]",
    "sols": [
      "def sol(n=8, tags=[4, 3, 7, 7, 6, 4, 6, 3, 4, 4, 0, 2, 3, 7, 5, 5, 6, 2, 7, 6, 0, 1, 0, 0, 5, 5, 1, 1, 2, 1, 3, 2]):\n    pairs = {(i, 4 * n - i - 1) for i in range(2 * n)}\n    by_tag = {tag: [] for tag in range(n)}\n    for p in pairs:\n        a, b = [tags[i] for i in p]\n        by_tag[a].append(p)\n        by_tag[b].append(p)\n    cycles = []\n    cycle = []\n    while pairs:\n        if not cycle:  # start new cycle\n            p = pairs.pop()\n            pairs.add(p)  # just to pick a tag\n            tag = tags[p[0]]\n            # print(\"Starting cycle with tag\", tag)\n        p = by_tag[tag].pop()\n        a, b = [tags[i] for i in p]\n        # print(p, a, b)\n        tag = a if a != tag else b\n        by_tag[tag].remove(p)\n        cycle.append(p if tag == b else p[::-1])\n        pairs.remove(p)\n        if not by_tag[tag]:\n            cycles.append(cycle)\n            cycle = []\n\n    while any(len(c) % 2 for c in cycles):\n        cycle_tags = [{tags[k] for p in c for k in p} for c in cycles]\n        merged = False\n        for i in range(len(cycles)):\n            for j in range(i):\n                intersection = cycle_tags[i].intersection(cycle_tags[j])\n                if intersection:\n                    c = intersection.pop()\n                    # print(f\"Merging cycle {i} and cycle {j} at tag {c}\", cycles)\n                    cycle_i = cycles.pop(i)\n                    for i1, p in enumerate(cycle_i):\n                        if tags[p[0]] == c:\n                            break\n                    for j1, p in enumerate(cycles[j]):\n                        if tags[p[0]] == c:\n                            break\n                    cycles[j][j1:j1] = cycle_i[i1:] + cycle_i[:i1]\n                    merged = True\n                    break\n            if merged:\n                break\n\n    ans = []\n    for c in cycles:\n        for i, p in enumerate(c):\n            if i % 2:\n                ans += p\n\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2020 Problem 3](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2020-9-19",
    "weight": 0.006666666666666666
  },
  {
    "name": "HalfTag_6",
    "sat": "def sat(li: List[int], n=5, tags=[0, 2, 3, 1, 3, 1, 3, 1, 4, 2, 4, 3, 0, 2, 0, 1, 4, 0, 2, 4]):\n    \"\"\"\n    The input tags is a list of 4n integer tags each in range(n) with each tag occurring 4 times.\n    The goal is to find a subset (list) li of half the indices such that:\n    * The sum of the indices equals the sum of the sum of the missing indices.\n    * The tags of the chosen indices contains exactly each number in range(n) twice.\n\n    Sample input:\n    n = 3\n    tags = [0, 1, 2, 0, 0, 1, 1, 1, 2, 2, 0, 2]\n\n    Sample output:\n    [0, 3, 5, 6, 8, 11]\n\n    Note the sum of the output is 33 = (0+1+2+...+11)/2 and the selected tags are [0, 0, 1, 1, 2, 2]\n    \"\"\"\n    assert sorted(tags) == sorted(list(range(n)) * 4), \"hint: each tag occurs exactly four times\"\n    assert len(li) == len(set(li)) and min(li) >= 0\n    return sum(li) * 2 == sum(range(4 * n)) and sorted([tags[i] for i in li]) == [i // 2 for i in range(2 * n)]",
    "sols": [
      "def sol(n=5, tags=[0, 2, 3, 1, 3, 1, 3, 1, 4, 2, 4, 3, 0, 2, 0, 1, 4, 0, 2, 4]):\n    pairs = {(i, 4 * n - i - 1) for i in range(2 * n)}\n    by_tag = {tag: [] for tag in range(n)}\n    for p in pairs:\n        a, b = [tags[i] for i in p]\n        by_tag[a].append(p)\n        by_tag[b].append(p)\n    cycles = []\n    cycle = []\n    while pairs:\n        if not cycle:  # start new cycle\n            p = pairs.pop()\n            pairs.add(p)  # just to pick a tag\n            tag = tags[p[0]]\n            # print(\"Starting cycle with tag\", tag)\n        p = by_tag[tag].pop()\n        a, b = [tags[i] for i in p]\n        # print(p, a, b)\n        tag = a if a != tag else b\n        by_tag[tag].remove(p)\n        cycle.append(p if tag == b else p[::-1])\n        pairs.remove(p)\n        if not by_tag[tag]:\n            cycles.append(cycle)\n            cycle = []\n\n    while any(len(c) % 2 for c in cycles):\n        cycle_tags = [{tags[k] for p in c for k in p} for c in cycles]\n        merged = False\n        for i in range(len(cycles)):\n            for j in range(i):\n                intersection = cycle_tags[i].intersection(cycle_tags[j])\n                if intersection:\n                    c = intersection.pop()\n                    # print(f\"Merging cycle {i} and cycle {j} at tag {c}\", cycles)\n                    cycle_i = cycles.pop(i)\n                    for i1, p in enumerate(cycle_i):\n                        if tags[p[0]] == c:\n                            break\n                    for j1, p in enumerate(cycles[j]):\n                        if tags[p[0]] == c:\n                            break\n                    cycles[j][j1:j1] = cycle_i[i1:] + cycle_i[:i1]\n                    merged = True\n                    break\n            if merged:\n                break\n\n    ans = []\n    for c in cycles:\n        for i, p in enumerate(c):\n            if i % 2:\n                ans += p\n\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2020 Problem 3](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2020-9-19",
    "weight": 0.006666666666666666
  },
  {
    "name": "HalfTag_7",
    "sat": "def sat(li: List[int], n=6, tags=[3, 4, 4, 3, 4, 1, 0, 2, 2, 0, 0, 2, 5, 5, 1, 1, 1, 3, 0, 3, 4, 5, 2, 5]):\n    \"\"\"\n    The input tags is a list of 4n integer tags each in range(n) with each tag occurring 4 times.\n    The goal is to find a subset (list) li of half the indices such that:\n    * The sum of the indices equals the sum of the sum of the missing indices.\n    * The tags of the chosen indices contains exactly each number in range(n) twice.\n\n    Sample input:\n    n = 3\n    tags = [0, 1, 2, 0, 0, 1, 1, 1, 2, 2, 0, 2]\n\n    Sample output:\n    [0, 3, 5, 6, 8, 11]\n\n    Note the sum of the output is 33 = (0+1+2+...+11)/2 and the selected tags are [0, 0, 1, 1, 2, 2]\n    \"\"\"\n    assert sorted(tags) == sorted(list(range(n)) * 4), \"hint: each tag occurs exactly four times\"\n    assert len(li) == len(set(li)) and min(li) >= 0\n    return sum(li) * 2 == sum(range(4 * n)) and sorted([tags[i] for i in li]) == [i // 2 for i in range(2 * n)]",
    "sols": [
      "def sol(n=6, tags=[3, 4, 4, 3, 4, 1, 0, 2, 2, 0, 0, 2, 5, 5, 1, 1, 1, 3, 0, 3, 4, 5, 2, 5]):\n    pairs = {(i, 4 * n - i - 1) for i in range(2 * n)}\n    by_tag = {tag: [] for tag in range(n)}\n    for p in pairs:\n        a, b = [tags[i] for i in p]\n        by_tag[a].append(p)\n        by_tag[b].append(p)\n    cycles = []\n    cycle = []\n    while pairs:\n        if not cycle:  # start new cycle\n            p = pairs.pop()\n            pairs.add(p)  # just to pick a tag\n            tag = tags[p[0]]\n            # print(\"Starting cycle with tag\", tag)\n        p = by_tag[tag].pop()\n        a, b = [tags[i] for i in p]\n        # print(p, a, b)\n        tag = a if a != tag else b\n        by_tag[tag].remove(p)\n        cycle.append(p if tag == b else p[::-1])\n        pairs.remove(p)\n        if not by_tag[tag]:\n            cycles.append(cycle)\n            cycle = []\n\n    while any(len(c) % 2 for c in cycles):\n        cycle_tags = [{tags[k] for p in c for k in p} for c in cycles]\n        merged = False\n        for i in range(len(cycles)):\n            for j in range(i):\n                intersection = cycle_tags[i].intersection(cycle_tags[j])\n                if intersection:\n                    c = intersection.pop()\n                    # print(f\"Merging cycle {i} and cycle {j} at tag {c}\", cycles)\n                    cycle_i = cycles.pop(i)\n                    for i1, p in enumerate(cycle_i):\n                        if tags[p[0]] == c:\n                            break\n                    for j1, p in enumerate(cycles[j]):\n                        if tags[p[0]] == c:\n                            break\n                    cycles[j][j1:j1] = cycle_i[i1:] + cycle_i[:i1]\n                    merged = True\n                    break\n            if merged:\n                break\n\n    ans = []\n    for c in cycles:\n        for i, p in enumerate(c):\n            if i % 2:\n                ans += p\n\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2020 Problem 3](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2020-9-19",
    "weight": 0.006666666666666666
  },
  {
    "name": "HalfTag_8",
    "sat": "def sat(li: List[int], n=6, tags=[2, 5, 2, 4, 0, 1, 3, 4, 3, 2, 5, 0, 1, 2, 4, 0, 1, 0, 3, 3, 5, 4, 5, 1]):\n    \"\"\"\n    The input tags is a list of 4n integer tags each in range(n) with each tag occurring 4 times.\n    The goal is to find a subset (list) li of half the indices such that:\n    * The sum of the indices equals the sum of the sum of the missing indices.\n    * The tags of the chosen indices contains exactly each number in range(n) twice.\n\n    Sample input:\n    n = 3\n    tags = [0, 1, 2, 0, 0, 1, 1, 1, 2, 2, 0, 2]\n\n    Sample output:\n    [0, 3, 5, 6, 8, 11]\n\n    Note the sum of the output is 33 = (0+1+2+...+11)/2 and the selected tags are [0, 0, 1, 1, 2, 2]\n    \"\"\"\n    assert sorted(tags) == sorted(list(range(n)) * 4), \"hint: each tag occurs exactly four times\"\n    assert len(li) == len(set(li)) and min(li) >= 0\n    return sum(li) * 2 == sum(range(4 * n)) and sorted([tags[i] for i in li]) == [i // 2 for i in range(2 * n)]",
    "sols": [
      "def sol(n=6, tags=[2, 5, 2, 4, 0, 1, 3, 4, 3, 2, 5, 0, 1, 2, 4, 0, 1, 0, 3, 3, 5, 4, 5, 1]):\n    pairs = {(i, 4 * n - i - 1) for i in range(2 * n)}\n    by_tag = {tag: [] for tag in range(n)}\n    for p in pairs:\n        a, b = [tags[i] for i in p]\n        by_tag[a].append(p)\n        by_tag[b].append(p)\n    cycles = []\n    cycle = []\n    while pairs:\n        if not cycle:  # start new cycle\n            p = pairs.pop()\n            pairs.add(p)  # just to pick a tag\n            tag = tags[p[0]]\n            # print(\"Starting cycle with tag\", tag)\n        p = by_tag[tag].pop()\n        a, b = [tags[i] for i in p]\n        # print(p, a, b)\n        tag = a if a != tag else b\n        by_tag[tag].remove(p)\n        cycle.append(p if tag == b else p[::-1])\n        pairs.remove(p)\n        if not by_tag[tag]:\n            cycles.append(cycle)\n            cycle = []\n\n    while any(len(c) % 2 for c in cycles):\n        cycle_tags = [{tags[k] for p in c for k in p} for c in cycles]\n        merged = False\n        for i in range(len(cycles)):\n            for j in range(i):\n                intersection = cycle_tags[i].intersection(cycle_tags[j])\n                if intersection:\n                    c = intersection.pop()\n                    # print(f\"Merging cycle {i} and cycle {j} at tag {c}\", cycles)\n                    cycle_i = cycles.pop(i)\n                    for i1, p in enumerate(cycle_i):\n                        if tags[p[0]] == c:\n                            break\n                    for j1, p in enumerate(cycles[j]):\n                        if tags[p[0]] == c:\n                            break\n                    cycles[j][j1:j1] = cycle_i[i1:] + cycle_i[:i1]\n                    merged = True\n                    break\n            if merged:\n                break\n\n    ans = []\n    for c in cycles:\n        for i, p in enumerate(c):\n            if i % 2:\n                ans += p\n\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2020 Problem 3](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2020-9-19",
    "weight": 0.006666666666666666
  },
  {
    "name": "HalfTag_9",
    "sat": "def sat(li: List[int], n=9, tags=[5, 3, 8, 5, 1, 0, 7, 5, 0, 3, 1, 1, 7, 3, 2, 4, 5, 8, 8, 3, 8, 4, 7, 6, 6, 1, 0, 2, 4, 6, 2, 0, 7, 4, 6, 2]):\n    \"\"\"\n    The input tags is a list of 4n integer tags each in range(n) with each tag occurring 4 times.\n    The goal is to find a subset (list) li of half the indices such that:\n    * The sum of the indices equals the sum of the sum of the missing indices.\n    * The tags of the chosen indices contains exactly each number in range(n) twice.\n\n    Sample input:\n    n = 3\n    tags = [0, 1, 2, 0, 0, 1, 1, 1, 2, 2, 0, 2]\n\n    Sample output:\n    [0, 3, 5, 6, 8, 11]\n\n    Note the sum of the output is 33 = (0+1+2+...+11)/2 and the selected tags are [0, 0, 1, 1, 2, 2]\n    \"\"\"\n    assert sorted(tags) == sorted(list(range(n)) * 4), \"hint: each tag occurs exactly four times\"\n    assert len(li) == len(set(li)) and min(li) >= 0\n    return sum(li) * 2 == sum(range(4 * n)) and sorted([tags[i] for i in li]) == [i // 2 for i in range(2 * n)]",
    "sols": [
      "def sol(n=9, tags=[5, 3, 8, 5, 1, 0, 7, 5, 0, 3, 1, 1, 7, 3, 2, 4, 5, 8, 8, 3, 8, 4, 7, 6, 6, 1, 0, 2, 4, 6, 2, 0, 7, 4, 6, 2]):\n    pairs = {(i, 4 * n - i - 1) for i in range(2 * n)}\n    by_tag = {tag: [] for tag in range(n)}\n    for p in pairs:\n        a, b = [tags[i] for i in p]\n        by_tag[a].append(p)\n        by_tag[b].append(p)\n    cycles = []\n    cycle = []\n    while pairs:\n        if not cycle:  # start new cycle\n            p = pairs.pop()\n            pairs.add(p)  # just to pick a tag\n            tag = tags[p[0]]\n            # print(\"Starting cycle with tag\", tag)\n        p = by_tag[tag].pop()\n        a, b = [tags[i] for i in p]\n        # print(p, a, b)\n        tag = a if a != tag else b\n        by_tag[tag].remove(p)\n        cycle.append(p if tag == b else p[::-1])\n        pairs.remove(p)\n        if not by_tag[tag]:\n            cycles.append(cycle)\n            cycle = []\n\n    while any(len(c) % 2 for c in cycles):\n        cycle_tags = [{tags[k] for p in c for k in p} for c in cycles]\n        merged = False\n        for i in range(len(cycles)):\n            for j in range(i):\n                intersection = cycle_tags[i].intersection(cycle_tags[j])\n                if intersection:\n                    c = intersection.pop()\n                    # print(f\"Merging cycle {i} and cycle {j} at tag {c}\", cycles)\n                    cycle_i = cycles.pop(i)\n                    for i1, p in enumerate(cycle_i):\n                        if tags[p[0]] == c:\n                            break\n                    for j1, p in enumerate(cycles[j]):\n                        if tags[p[0]] == c:\n                            break\n                    cycles[j][j1:j1] = cycle_i[i1:] + cycle_i[:i1]\n                    merged = True\n                    break\n            if merged:\n                break\n\n    ans = []\n    for c in cycles:\n        for i, p in enumerate(c):\n            if i % 2:\n                ans += p\n\n    return ans"
    ],
    "module": "IMO",
    "notes": "Inspired by [IMO 2020 Problem 3](https://www.imo-official.org/problems.aspx)",
    "taint_date": "2020-9-19",
    "weight": 0.006666666666666666
  },
  {
    "name": "LearnParity_0",
    "sat": "def sat(inds: List[int], vecs=[169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]):\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set $S$ of indices such that:\n    $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"\n    return all(sum((v >> i) & 1 for i in inds) % 2 == 1 for v in vecs)",
    "sols": [
      "def sol(vecs=[169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]):  # Gaussian elimination\n    d = 0 # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]"
    ],
    "module": "lattices",
    "notes": "Parity learning (Gaussian elimination)\n\nThe canonical solution to this \n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nis to use \n[Gaussian Elimination](https://en.wikipedia.org/w/index.php?title=Gaussian_elimination).\n\nThe vectors are encoded as binary integers for succinctness.",
    "taint_date": "2021-4-26",
    "weight": 0.0024390243902439024
  },
  {
    "name": "LearnParity_1",
    "sat": "def sat(inds: List[int], vecs=[981, 977, 222, 702, 621, 388, 812, 422, 503, 11, 212, 250, 645, 45, 330, 11, 79, 33, 814, 547, 953, 210, 645, 345, 959, 732]):\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set $S$ of indices such that:\n    $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"\n    return all(sum((v >> i) & 1 for i in inds) % 2 == 1 for v in vecs)",
    "sols": [
      "def sol(vecs=[981, 977, 222, 702, 621, 388, 812, 422, 503, 11, 212, 250, 645, 45, 330, 11, 79, 33, 814, 547, 953, 210, 645, 345, 959, 732]):  # Gaussian elimination\n    d = 0 # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]"
    ],
    "module": "lattices",
    "notes": "Parity learning (Gaussian elimination)\n\nThe canonical solution to this \n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nis to use \n[Gaussian Elimination](https://en.wikipedia.org/w/index.php?title=Gaussian_elimination).\n\nThe vectors are encoded as binary integers for succinctness.",
    "taint_date": "2021-4-26",
    "weight": 0.0024390243902439024
  },
  {
    "name": "LearnParity_2",
    "sat": "def sat(inds: List[int], vecs=[8, 4, 9, 8, 4, 6, 9, 11, 6, 7, 10, 7, 11, 6]):\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set $S$ of indices such that:\n    $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"\n    return all(sum((v >> i) & 1 for i in inds) % 2 == 1 for v in vecs)",
    "sols": [
      "def sol(vecs=[8, 4, 9, 8, 4, 6, 9, 11, 6, 7, 10, 7, 11, 6]):  # Gaussian elimination\n    d = 0 # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]"
    ],
    "module": "lattices",
    "notes": "Parity learning (Gaussian elimination)\n\nThe canonical solution to this \n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nis to use \n[Gaussian Elimination](https://en.wikipedia.org/w/index.php?title=Gaussian_elimination).\n\nThe vectors are encoded as binary integers for succinctness.",
    "taint_date": "2021-4-26",
    "weight": 0.0024390243902439024
  },
  {
    "name": "LearnParity_3",
    "sat": "def sat(inds: List[int], vecs=[5, 4, 3, 4, 5, 3, 2]):\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set $S$ of indices such that:\n    $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"\n    return all(sum((v >> i) & 1 for i in inds) % 2 == 1 for v in vecs)",
    "sols": [
      "def sol(vecs=[5, 4, 3, 4, 5, 3, 2]):  # Gaussian elimination\n    d = 0 # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]"
    ],
    "module": "lattices",
    "notes": "Parity learning (Gaussian elimination)\n\nThe canonical solution to this \n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nis to use \n[Gaussian Elimination](https://en.wikipedia.org/w/index.php?title=Gaussian_elimination).\n\nThe vectors are encoded as binary integers for succinctness.",
    "taint_date": "2021-4-26",
    "weight": 0.0024390243902439024
  },
  {
    "name": "LearnParity_4",
    "sat": "def sat(inds: List[int], vecs=[5473, 3401, 618, 5228, 4348, 2122, 5240, 2176, 782, 7898, 2813, 813, 7655, 6676, 2409, 4461, 1463, 4798, 4442, 5545, 4562, 3705, 4821, 7075, 1095, 4960, 7062, 1830, 7208, 1807, 7614, 6909, 510, 2220, 3927, 7281, 891, 6477, 2652, 4775, 661, 2373, 5253]):\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set $S$ of indices such that:\n    $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"\n    return all(sum((v >> i) & 1 for i in inds) % 2 == 1 for v in vecs)",
    "sols": [
      "def sol(vecs=[5473, 3401, 618, 5228, 4348, 2122, 5240, 2176, 782, 7898, 2813, 813, 7655, 6676, 2409, 4461, 1463, 4798, 4442, 5545, 4562, 3705, 4821, 7075, 1095, 4960, 7062, 1830, 7208, 1807, 7614, 6909, 510, 2220, 3927, 7281, 891, 6477, 2652, 4775, 661, 2373, 5253]):  # Gaussian elimination\n    d = 0 # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]"
    ],
    "module": "lattices",
    "notes": "Parity learning (Gaussian elimination)\n\nThe canonical solution to this \n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nis to use \n[Gaussian Elimination](https://en.wikipedia.org/w/index.php?title=Gaussian_elimination).\n\nThe vectors are encoded as binary integers for succinctness.",
    "taint_date": "2021-4-26",
    "weight": 0.0024390243902439024
  },
  {
    "name": "LearnParity_5",
    "sat": "def sat(inds: List[int], vecs=[5, 5, 5, 14]):\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set $S$ of indices such that:\n    $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"\n    return all(sum((v >> i) & 1 for i in inds) % 2 == 1 for v in vecs)",
    "sols": [
      "def sol(vecs=[5, 5, 5, 14]):  # Gaussian elimination\n    d = 0 # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]"
    ],
    "module": "lattices",
    "notes": "Parity learning (Gaussian elimination)\n\nThe canonical solution to this \n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nis to use \n[Gaussian Elimination](https://en.wikipedia.org/w/index.php?title=Gaussian_elimination).\n\nThe vectors are encoded as binary integers for succinctness.",
    "taint_date": "2021-4-26",
    "weight": 0.0024390243902439024
  },
  {
    "name": "LearnParity_6",
    "sat": "def sat(inds: List[int], vecs=[8, 3, 7, 8, 3, 7, 12, 2, 12, 3, 7, 13, 6, 2, 9, 12, 9, 9]):\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set $S$ of indices such that:\n    $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"\n    return all(sum((v >> i) & 1 for i in inds) % 2 == 1 for v in vecs)",
    "sols": [
      "def sol(vecs=[8, 3, 7, 8, 3, 7, 12, 2, 12, 3, 7, 13, 6, 2, 9, 12, 9, 9]):  # Gaussian elimination\n    d = 0 # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]"
    ],
    "module": "lattices",
    "notes": "Parity learning (Gaussian elimination)\n\nThe canonical solution to this \n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nis to use \n[Gaussian Elimination](https://en.wikipedia.org/w/index.php?title=Gaussian_elimination).\n\nThe vectors are encoded as binary integers for succinctness.",
    "taint_date": "2021-4-26",
    "weight": 0.0024390243902439024
  },
  {
    "name": "LearnParity_7",
    "sat": "def sat(inds: List[int], vecs=[2, 1, 2, 1, 2, 2]):\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set $S$ of indices such that:\n    $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"\n    return all(sum((v >> i) & 1 for i in inds) % 2 == 1 for v in vecs)",
    "sols": [
      "def sol(vecs=[2, 1, 2, 1, 2, 2]):  # Gaussian elimination\n    d = 0 # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]"
    ],
    "module": "lattices",
    "notes": "Parity learning (Gaussian elimination)\n\nThe canonical solution to this \n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nis to use \n[Gaussian Elimination](https://en.wikipedia.org/w/index.php?title=Gaussian_elimination).\n\nThe vectors are encoded as binary integers for succinctness.",
    "taint_date": "2021-4-26",
    "weight": 0.0024390243902439024
  },
  {
    "name": "LearnParity_8",
    "sat": "def sat(inds: List[int], vecs=[623, 950, 472, 766, 203, 749, 283, 344, 501, 424, 5, 85, 343, 380, 541, 480, 522, 775, 3, 394, 780, 344, 704, 988, 990, 482, 551, 953, 122, 115, 948, 1018, 161, 680, 140, 831, 228, 459, 324, 310, 566, 638, 8, 289]):\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set $S$ of indices such that:\n    $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"\n    return all(sum((v >> i) & 1 for i in inds) % 2 == 1 for v in vecs)",
    "sols": [
      "def sol(vecs=[623, 950, 472, 766, 203, 749, 283, 344, 501, 424, 5, 85, 343, 380, 541, 480, 522, 775, 3, 394, 780, 344, 704, 988, 990, 482, 551, 953, 122, 115, 948, 1018, 161, 680, 140, 831, 228, 459, 324, 310, 566, 638, 8, 289]):  # Gaussian elimination\n    d = 0 # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]"
    ],
    "module": "lattices",
    "notes": "Parity learning (Gaussian elimination)\n\nThe canonical solution to this \n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nis to use \n[Gaussian Elimination](https://en.wikipedia.org/w/index.php?title=Gaussian_elimination).\n\nThe vectors are encoded as binary integers for succinctness.",
    "taint_date": "2021-4-26",
    "weight": 0.0024390243902439024
  },
  {
    "name": "LearnParity_9",
    "sat": "def sat(inds: List[int], vecs=[11, 4, 4, 16, 10, 23, 2, 5, 5, 30, 17]):\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set $S$ of indices such that:\n    $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"\n    return all(sum((v >> i) & 1 for i in inds) % 2 == 1 for v in vecs)",
    "sols": [
      "def sol(vecs=[11, 4, 4, 16, 10, 23, 2, 5, 5, 30, 17]):  # Gaussian elimination\n    d = 0 # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]"
    ],
    "module": "lattices",
    "notes": "Parity learning (Gaussian elimination)\n\nThe canonical solution to this \n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nis to use \n[Gaussian Elimination](https://en.wikipedia.org/w/index.php?title=Gaussian_elimination).\n\nThe vectors are encoded as binary integers for succinctness.",
    "taint_date": "2021-4-26",
    "weight": 0.0024390243902439024
  },
  {
    "name": "LearnParityWithNoise_0",
    "sat": "def sat(inds: List[int], vecs=[26, 5, 16, 3, 15, 18, 31, 13, 24, 25, 6, 5, 15, 24, 16, 13, 0, 27, 13]):\n    \"\"\"\n    Learning parity with noise: Given binary vectors, find the secret set $S$ of indices such that, for at least\n    3/4 of the vectors, $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"\n    return sum(sum((v >> i) & 1 for i in inds) % 2 for v in vecs) >= len(vecs) * 3 / 4",
    "sols": [
      "def sol(vecs=[26, 5, 16, 3, 15, 18, 31, 13, 24, 25, 6, 5, 15, 24, 16, 13, 0, 27, 13]):  # brute force\n    d = 0 # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    while True:\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans"
    ],
    "module": "lattices",
    "notes": "Learn parity with noise (*unsolved*)\n\nThe fastest known algorithm to this\n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nruns in time $2^(d/(log d))$",
    "taint_date": "2021-4-26",
    "weight": 0.0975609756097561
  },
  {
    "name": "LearnParityWithNoise_1",
    "sat": "def sat(inds: List[int], vecs=[541463641166815, 836501911182698, 204369742722561, 996228762493585, 393037554634950, 561847321780580, 383843566788061, 50791402437548, 303042618895774, 1087159980717730, 751462893290133, 717203972383473, 61936063012068, 327885412093529, 829008581453248, 82682204900035, 126568193270140, 641995482588733, 865458124272754, 225973598487303, 932017404527410, 857486634842957, 383753222792827, 520005984420171, 204143312736236, 79255198661558, 19424203145940, 524835118507198, 78176684488643, 641587624245938, 871385764240270, 629761402678278, 351708713494899, 1070108072456946, 358446232214123, 312398152219502, 274011963084525, 409373979951238, 132394880735195, 90214520493237, 829104851000793, 1012068842795161, 293003513803709, 174773871154661, 550879461224464, 911485397619621, 48761935107312, 907271010238276, 823851072400528, 505517756398503, 252980176412827, 460114913745498, 645554754407371, 606249093806918, 59379086794876, 71211123750687, 234499981807034, 1009277485829684, 467074129067714, 366224265592543, 755200203782009, 80589293904740, 866991805276416, 103869936645315, 996859943358040, 1125044021870734, 155571302888825, 1117007488286405, 1014533277199991, 1022149666930474, 81067116233699, 465724133554547, 889750915349411, 969017297190273, 960799174327063, 933303422219271, 117886699268136, 79443236425908, 452684568025347, 34587552862340, 1091422557749590, 777041681116090, 63779310817780, 422264778689458, 169358298389373, 4881339628468, 524475267526996, 1003893136962864, 979355145666783, 55133828075657, 40359766618561, 654383514612874, 566885967543537, 418343973765756, 850646251371640, 923188435858076, 827923516310520, 459628606185829, 229381436844152, 622728600135528, 792410937952324, 245216900614598, 574521334111200, 930778047693108, 1037612140145093, 46969657627274, 131529543237835, 632233282135223, 981075950993721, 54398021163978, 670386710877057, 293493625096550, 622538930704865, 487508006825717, 49047059004888, 738717272660644, 1067595248931748, 282402674395080, 391678370810487, 1061452157412375, 685700983856558, 611768326421072, 295538719976926, 1078615825201063, 949171444435668, 1000980167081540, 768479370723950, 772059369360887, 761881229678931, 743895095186174, 930271707561662, 188614518258675, 298528422975541, 565775021521301, 775626775529169, 80421095067503, 82298438018557, 664492303891381, 282615119528894, 686893855903796, 340139318583582, 359564879596168, 859197881626629, 713221480274665, 507886429992730, 255830449759360, 950357525068024, 577666854701789, 389929749160609, 27158396222780, 253473796695702, 995754001272482, 946967879434268, 151525761446711, 751096988850902, 330302288060385, 533058508886678, 448073239588016, 317723640324263, 231555487649199, 1094691308033293, 295190725050160, 677412383674714, 810328016127550, 141217366140840, 1041540045538927, 617636872580732, 181747698845039, 206288765604686, 1016697967285449, 1118498956352212, 451141690079755, 376516823981282, 762977669647226, 680522174009831, 779765453866822, 895732561717960, 997256425106042, 1086703591530704, 314324995746268, 697976993864415, 314458943150521, 1046456425194395, 695571096020161, 1063414460509546, 244920683036349, 21475806716739, 673098992076777, 1076988024532359, 604502739416015, 399572030154774, 950447612879586, 673034038969120, 763766623812515, 771510827412925, 212387593533139, 125239460867122, 1027816175694723, 386005199593320, 383439340293626, 863332217577020, 865883191936909, 94875318712137, 609394252021047, 666722343291063, 274408158524832, 1119355752501496, 155497996620332, 1033542497699221, 978878862321222, 704594635365690, 842514171532211, 85750612144121, 912081543610914, 1052558961410581, 854353899975505, 1087485185473749, 94774529612441, 760722283932952, 144839197903847, 55438496824961, 475624773983941, 368556422486371, 307912168332650, 47340254475173, 1024910897602580, 385906468068688, 162737016086876, 304023630903579, 199360364785950, 608050394504898, 172390873163371, 301488003908068, 35984631006215, 487370274443760, 102068911791559, 419891496911368, 1081309782094596, 509332998884295, 812476433606934, 282669156667428, 1080087994792863, 291857638613096, 808305794439236, 1054101460032026, 987180639907804, 880796696384548, 998670558336764, 491455225948090, 10809118127120, 971889240707265, 673236154243467, 143879097813524, 67876205848433, 28883718881463, 856049470643539, 1060945935411698, 434467186144765, 781577518514349, 581270711543595, 441218400574482, 867557943248669, 187169842929745, 1049590754711617, 81268907758124, 143297925693178, 836835763316768, 562194877151006, 1082884574952652, 908579263643733, 415569548356542, 780159398006833, 340529425422844, 431079014169114, 440151543301266, 590964595112390, 404903830352823, 729927689718447, 378550093658908, 624106064912965, 77674466817708, 938349007428238, 790732179189908, 47334433403329, 463467673640048, 721430796010390, 1105828662364712, 142998217586313, 62423087088164, 209937455508322, 632817523494236, 109443866550599, 834588491780044, 156977748064633, 827882803239954, 840304060280368, 804197298398683, 131793678455405, 50829394142258, 745786977334111, 90468658879031, 185234389856105, 984204558798903, 458180193302131, 26455133930889, 1009996950987715, 1048897429637531, 982702636985964, 435836521917345, 39869011778369, 1086113425704478, 462446171376730, 311253394644783, 15310823490855, 396694301186933, 725785604797831, 1045169393876744, 993997295780260, 727969613537278]):\n    \"\"\"\n    Learning parity with noise: Given binary vectors, find the secret set $S$ of indices such that, for at least\n    3/4 of the vectors, $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"\n    return sum(sum((v >> i) & 1 for i in inds) % 2 for v in vecs) >= len(vecs) * 3 / 4",
    "sols": [],
    "module": "lattices",
    "notes": "Learn parity with noise (*unsolved*)\n\nThe fastest known algorithm to this\n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nruns in time $2^(d/(log d))$",
    "taint_date": "2021-4-26",
    "weight": 0.0975609756097561
  },
  {
    "name": "LearnParityWithNoise_2",
    "sat": "def sat(inds: List[int], vecs=[85, 118, 105, 104, 95, 74, 116, 102, 81, 92, 83, 104, 101, 109, 112, 108, 77, 114, 106, 64, 68, 99, 69, 104, 125, 70, 72, 75, 120, 98, 117, 85, 93, 96, 80, 114, 104, 112, 50, 105, 120, 127, 101, 102, 107, 80, 82, 118, 22, 85, 64, 123, 127, 99, 108, 78, 70, 53, 108, 100, 127, 118, 85, 126, 114, 122, 112, 114]):\n    \"\"\"\n    Learning parity with noise: Given binary vectors, find the secret set $S$ of indices such that, for at least\n    3/4 of the vectors, $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"\n    return sum(sum((v >> i) & 1 for i in inds) % 2 for v in vecs) >= len(vecs) * 3 / 4",
    "sols": [
      "def sol(vecs=[85, 118, 105, 104, 95, 74, 116, 102, 81, 92, 83, 104, 101, 109, 112, 108, 77, 114, 106, 64, 68, 99, 69, 104, 125, 70, 72, 75, 120, 98, 117, 85, 93, 96, 80, 114, 104, 112, 50, 105, 120, 127, 101, 102, 107, 80, 82, 118, 22, 85, 64, 123, 127, 99, 108, 78, 70, 53, 108, 100, 127, 118, 85, 126, 114, 122, 112, 114]):  # brute force\n    d = 0 # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    while True:\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans"
    ],
    "module": "lattices",
    "notes": "Learn parity with noise (*unsolved*)\n\nThe fastest known algorithm to this\n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nruns in time $2^(d/(log d))$",
    "taint_date": "2021-4-26",
    "weight": 0.0975609756097561
  },
  {
    "name": "LearnParityWithNoise_3",
    "sat": "def sat(inds: List[int], vecs=[4377023492, 2725416307, 4575575164, 8237061328, 810108815, 1505904179, 7253931952, 3332035899, 4918253592, 7464508032, 2781888601, 4854482287, 2195189958, 1061245549, 2716454609, 4229473257, 3369619302, 7641078544, 6414803619, 5869561409, 8233604930, 1806428713, 8581855712, 5563574546, 7485355417, 5263111757, 1559804226, 7559201047, 5762788539, 3759231582, 2343983778, 5036600819, 964834502, 8086145823, 4916225163, 3776421936, 8243518168, 1653183863, 3589329243, 6874501226, 1681442252, 2825579257, 4727163474, 609675409, 2987647751, 6639501064, 6758018033, 7350401189, 1915697190, 1030569470, 6593976999, 7737301263, 8166687241, 4764265400, 6244165210, 5865981028, 2722013265, 5990328879, 6222511600, 4157727138, 5672865333, 3270585168, 3823274720, 2761244963, 6721835133, 5602567444, 7661437267, 2430216570, 7928221025, 836281488, 8163830398, 1958494719, 5659370923, 6990994339, 6157416074, 2887935212, 843453193, 401186639, 6140738633, 6331269342, 4602640583, 7379847572, 7298421854, 818045529, 4500250539, 6250820209, 1608180223, 476478575, 395387866, 2032234513, 3178558687, 8549359101, 3059533667, 7666891250, 8205460848, 8569706676, 8507800020, 7922235736, 1365610739, 6224047793, 1588040934, 4971652647, 3892012639, 2038058476, 4764474809, 2333230883, 3760468106, 3348180099, 8548049356, 1233700092, 976743204, 4800651758, 6337808001, 7131440648, 837308168, 1087651947, 1758223256, 8248576369, 6110305362, 2149402189, 2049775843, 6643369581, 5820944487, 723956055, 6129399464, 1435743819, 3445248287, 7006881042, 6246517667, 2248919794, 1380383149, 4809985226, 619856691, 7566372000, 5303251143, 4490148327, 7446123208, 4561827377, 2893702873, 5514085543, 3607781433, 7534115750, 2009177607, 2704806200, 2434148405, 1882440810, 8287262291, 3978684771, 5815490172, 1345052488, 3224426634, 2871407483, 1541167092, 6336115980, 8328868035, 3465033340, 8346422420, 7217667584, 3767277418, 1019051165, 8269746816, 6901079892, 2236545678, 7623606633, 6759268144, 7416927882, 1265230301, 6708234231, 1255392142, 427892223, 8396175862, 1236397297, 8520688996, 8193484421, 421818659, 2634745207, 5328012049, 1134753683, 253235763, 970152368, 43024510, 7534975713, 5015335818, 7212084936, 5724691176, 8168406484, 1065106279, 7960813010, 6966177690, 4902940407, 5961780032, 4296939155, 4394646650, 5811507178, 8246898330, 5952720984, 7669256222, 3150651055, 2771495008, 5882503320, 208569742, 8250547235, 6755041976, 1389463044, 3960399210, 441913105, 7438849618, 1344175424, 3039607364, 970569752, 228962592, 7567148673, 5155388301, 2767781523, 3946684753, 2613876800, 4832430293, 6207371248, 4336286330, 4817261606, 7658390825, 1382799141, 1952915382, 5595179368, 4913653771, 158275818, 874148897, 5469520633, 1168748333, 6307362309, 7452525864, 4533392762, 5295466831, 7870605966, 7982434783, 2660910903, 7629023034, 2089945055, 8241846352, 2250422271, 3998397929, 8409707885, 6755082268, 6919296038, 8030719064, 3286675201, 5413731222, 7721078642, 7604040340, 2412963926, 3664644830, 8498290778, 318032363, 1523534004, 5061317478, 5456067941, 799629135, 6601585928, 1856669956, 2707642857, 4817928081, 5927337241]):\n    \"\"\"\n    Learning parity with noise: Given binary vectors, find the secret set $S$ of indices such that, for at least\n    3/4 of the vectors, $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"\n    return sum(sum((v >> i) & 1 for i in inds) % 2 for v in vecs) >= len(vecs) * 3 / 4",
    "sols": [],
    "module": "lattices",
    "notes": "Learn parity with noise (*unsolved*)\n\nThe fastest known algorithm to this\n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nruns in time $2^(d/(log d))$",
    "taint_date": "2021-4-26",
    "weight": 0.0975609756097561
  },
  {
    "name": "LearnParityWithNoise_4",
    "sat": "def sat(inds: List[int], vecs=[3493942856721065622, 1359942525204655867, 4291023122040486200, 2766553264256283311, 2509845197160063017, 748113310575600102, 742605809159142484, 2308836799009044341, 2001480080927138964, 2571214109281681119, 716093291344468559, 2585453317524389974, 4569964661267108227, 1517945638659177151, 2746040396126518334, 3013038776652157843, 27023287373120594, 2140736170764712513, 3662831357482035190, 1628550458986288365, 2439681146614734317, 717528619957014634, 3927654952598415659, 4328480023310498318, 1844039354577827804, 3620151577898202525, 3246726270480167758, 3603855963235625929, 380678189311538360, 291413949996733664, 1997804101897321258, 1617696725350734575, 3101865116643046912, 3500969217367204853, 2667923342722587359, 4507242661249271685, 4470420264328799255, 294156949588854841, 2932618389969675106, 1468635533554548458, 2707075177328530088, 3083632912275570325, 3136530006696437509, 1565785048590353363, 490102155925286517, 3375121004778703450, 4018002265816879630, 471732204869175425, 3210111278179308677, 2918387522032659938, 2618080184983472773, 830931899951881735, 3364257181561964629, 4486759704752821229, 458364392101066369, 1247859097013665571, 3900259756598776626, 1446006854453720419, 1664828967597054829, 1949390325821445628, 1578412248287263499, 2803240769833333367, 2384723787337705764, 1817725626624320566, 1328051311407035302, 1840815932332293812, 1635429095189551086, 3874297291389021447, 478606850418706924, 2793195565296076345, 2339427522871529963, 1295685747075714691, 373533285279319667, 913078871421014997, 1948032652259777102, 3917733702425354605, 3611509095503159932, 2083498818183414214, 4318280259899560119, 1767583439289014944, 589529710801378740, 210898160527707305, 3317500435014874395, 2525065768617896273, 3637449287118420216, 4010469082555924044, 3205462120789692132, 4297801300655833430, 849551208967015108, 1249092584184011070, 223956162914635194, 2157318590583773002, 4397463745935463607, 600233515359147380, 1264091464457072471, 1158145533186408239, 2646502344461060079, 1743390893536163556, 264802598018940786, 3425172168898407318, 4499044951848166634, 1329764283197645677, 1463818426308877186, 3505074059625705163, 4169113348362381251, 3924844227642780200, 1253532513856569712, 3001550514757036850, 831510328559596328, 3154957244754491340, 4403937644699243117, 2934613545858881970, 4576012865557726254, 3164772032211112847, 198331710608830111, 1408348239316527663, 2444998447522151305, 4411013351005545273, 3454952928590539047, 2134420959950885957, 3537959772139630286, 1911492741663131253, 684859494597678774, 3083034978085309662, 875260877114355353, 3640202348469983280, 2297490860309003740, 997873248559572948, 2608345875129390315, 4385658585005032519, 2628019233645697182, 309592774207232713, 4196493240130626829, 606172131400734888, 890062392307013160, 468453236841355537, 1641769990274423134, 3876532211986023573, 2148655463180364612, 3434955084667924644, 622558497632074094, 2826487812016887315, 3606900038881567567, 939931509658890348, 2454005350092431031, 37730645917117233, 76357252798266739, 4307424527952740945, 3481545200552846645, 4019723825243735177, 1931413009425876596, 1167964297991684358, 2940260193632440797, 3563551547985355205, 3041619144075706364, 2089050002029089396, 3247754494291208637, 3611008889343217868, 1974144287108546450, 2137279206967807465, 2690590745915123884, 3438661695332797153, 4211163967573009766, 1304254966082721872, 241883267299150403, 2580883766397164580, 2146564223204910122, 4270329655512499837, 1558079796162985644, 2382846357790822824, 3999320878311647248, 557804978086136127, 154672625904259953, 2014658687358352948, 926574856223719179, 1611725668918636163, 3775152335922279011, 1477402625145386223, 4262278536715057734, 2343051869087521950, 1534423471327990567, 4117276861163553368, 3989499442924155582, 932511998942959976, 2548981419952939660, 4064230291519767654, 2341335174008495725, 1875096240103129139, 4252370736674328936, 2091301296749030510, 2519219894464979203, 2141736793079616389, 30401243985389194, 1300381149633092420, 4385430980993227854, 3713529800190918661, 3215367429147230309, 3493795543955158831, 3617690063866901486, 473704120343411961, 4596161572518223671, 1234734192218563495, 90271599867563949, 2752035485041844188, 1389793917548995931, 4129317513706538060, 3414715837885251205, 390483391134544488, 2977365266838241004, 467472824984421782, 98165592281204163, 371035742158633039, 3523822689578392308, 298429232214346020, 141524564664302690, 713694840358155365, 1819445960057115160, 3893134249856799769, 332731110588635300, 3941135085189244596, 1203622153992519413, 584561442493538746, 1564380648277523421, 1848112040235491855, 3354533583124000938, 1923388160353591832, 1147194599406329606, 712885856550293506, 1632848219163147982, 4076695234828343063, 969827647561377710, 3623288333357776381, 4184966090850717449, 3599505175205723526, 799977179189333006, 1866523372691583294, 4285300529315715037, 2472498117597447978, 3533296465580088294, 1504766636599501971, 2021176036941118060, 114423265830390568, 3032943106298729924, 3821188683214132853, 817272293348577219, 1910128834962863019, 3063645234909327476, 1808610335164722604, 3782267212354999109, 2438883108272663675, 2446538010218584018, 3747229148226393214, 1254360585390516598, 4443733547026728726, 552245478055391927, 1691229192442854670, 78425463683426374, 3535633696302976999, 3698452168455621787, 3631430505412702106, 3771020419404175289, 652235019292998886, 842718730676198878, 3127671417980574701, 1765391223296488299, 4579201547917939870, 943163264318160845, 4415816781491018877, 3677394336952756435, 2100313945608401816, 2353331639901358276, 1883935956517289728, 3117025302630255179, 2911730931904161279, 2067484294669287600, 4018085812492602133, 4574006069582759425, 3227172913270557266, 3509499778967688883, 4428924377640863666, 89572978905698165, 4263381707522635314, 1546763800481087189, 3795055078997915118, 4147499912786753961, 1988841282812320106, 1764114110534308070, 2178637482440548260, 3029626918803362491, 3384639636606649954, 2813825888698372686, 4021529323077862712, 3046017416787333347, 3375857910451168822, 2917155689814350243, 3819452078577989661, 1063584923323830865, 13148734208842529, 1338080346766795973, 489295290757782487, 2365174929363772371, 4593545655680020347, 3737417588053525975, 2196081287262617030, 1524075315073248456, 4067655774855830940, 213329900496497554, 4501041956422164708, 478305710282688107, 3165220007000872362, 871221149287088813, 628845555287669503, 3443813658714747825, 1427714746352881398, 4351826764986810133, 3038210187007579541, 917323211382123191, 2958986018156469747, 550900531606612949, 2190100760388778707, 21267277347008146, 700962725688468749, 2046194830686039249, 2681392948462220390, 12842568753504539, 1189865955431554334, 3826000162876192442, 1073590835351464359, 2478167983616377819, 4411836174421637102, 4232710377929593714, 4381122009551956294, 4141211756961895789, 1020731956720226738, 3422852480525516686, 3733285778159577437, 3954925649863238659, 724750214256938319, 3849133362350072573, 2970886035595782244, 4331838658111126565, 3994014176086963168, 2800964439538278475, 3018060429773144499, 107528106154491045, 3613412228622742146, 845645476888972718, 1836849415198659796, 921798726304952972, 1691935703249975046, 506178649421681562, 4378829478969138958, 2668761899707069496, 967020761532626868, 4370253350509910273, 1028036406359885473, 636934977966550684, 3639370608263874453, 2565775017553263907, 175440789712466289, 1873342486133521364, 2092239683553213639, 482500200596483250, 1550698972868698354, 2364806142663372471, 4328087142871350370, 2931028751256412451, 4322541984069960348, 802937819854076056, 3052968007675764806, 1316627570552090373, 4572485457738318471, 1410717093617234685, 348677377085526599, 276124381319707699, 2920255525661470900, 2794860833265144455, 3035577908790445243, 1839893420149100145, 1798747244882757528, 2940973496675224523, 24708006533847909, 244179451336578768, 2530682529649877239, 3932127053778438249, 3838784052122588787, 3926626026077089268, 1356252060059847157, 2239172454789039474, 4330341283362865328, 2568515107269597167, 3018318195234033200, 2462493340448871822, 3913523023996859226, 2702694936528801306, 4058506404065775028, 2015893544052313115, 1249604202224913839, 4510266017195119610, 4029725903799007809, 2322054765614528293, 3267713259245470728, 1209228689413104631, 2734862413004204594, 1254859073577279710, 2472167168371799620, 2930439835812963241, 3562870567527967943, 4560074080417496141, 992736095080813822, 2066833536485055506, 4329714598747724400, 3376153876234808728, 4228354375314050276, 3376619411878692034, 1367096078822588173, 2317215995742193890, 345610762991570956, 3088532751238547627, 1917395777951999220, 1019232967572879262, 3544179652195062002, 786621544605275953, 1821039600130061505, 3178730611526524948, 3283759271813002939, 370817921185561615, 3280396979273247006, 3743450946445655880, 288595053677372839, 700577150145864185, 2963968663426185181, 2962968743747087641, 2680514958540083990, 1094010825545196590, 2301496265128566451, 55306646969008064, 3261683911828361463, 2350803819301238278, 3366857276760750730, 248600979066177081, 2753456290761083791, 994266458511586719, 3481238182177649849, 217717170794439433, 3365901237150891377, 4060272243392431503, 3933829052598780867, 3070057594782787203, 4000324264126970360, 1222504803865364237, 2231332679894467188, 3575095080562342706, 676867646453544132, 3240722623567330083, 4284160390053412119, 1625387022447786512, 3289399666211588807, 279875354659289751, 2216590795174580543, 420706191253261630, 2922497353001418435, 3842806868942206558, 835229614857631128, 3058436197486231340, 3905243911896322015, 2796030925316290560, 1626789826437680853, 2410545545442219186, 1830613793078818988]):\n    \"\"\"\n    Learning parity with noise: Given binary vectors, find the secret set $S$ of indices such that, for at least\n    3/4 of the vectors, $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"\n    return sum(sum((v >> i) & 1 for i in inds) % 2 for v in vecs) >= len(vecs) * 3 / 4",
    "sols": [],
    "module": "lattices",
    "notes": "Learn parity with noise (*unsolved*)\n\nThe fastest known algorithm to this\n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nruns in time $2^(d/(log d))$",
    "taint_date": "2021-4-26",
    "weight": 0.0975609756097561
  },
  {
    "name": "LearnParityWithNoise_5",
    "sat": "def sat(inds: List[int], vecs=[168702843075730262429, 369519948633001136839, 347555145332043143302, 250851454857949440584, 69061778219804948792, 475469942545501773953, 209768991399733618773, 514424190838937701219, 268766954207567981479, 7394547680346864749, 126938077425167770745, 318358599261727004830, 315109341249979185557, 515478066228751163894, 403265238946747222029, 188899209183664215234, 24827825782437012520, 335032123588214630071, 384223708642849045389, 48915533105025322086, 101841528868721873075, 311131121832683636871, 32440629668388015197, 327950605702481046957, 475586059094526446213, 72658337956910451442, 317005162159852794021, 304367521642333351368, 270105705391589038389, 259873000154852113416, 177409779721539508354, 553919540439162886074, 564916838808372813330, 170042473831880379928, 46060140196650248226, 143161166854068016409, 493206696748363696618, 376464599835184841670, 409903447977442163690, 26878415769962305746, 259240749338669601135, 60825254039047710704, 419862577048754504175, 130240056969764914220, 275172359505179255972, 236173291408422398326, 233758385403794956255, 377696474632371869760, 412803326917059279334, 59760959267005448763, 560434241444827960050, 438472641451058382196, 77363529381786525854, 460050110083657049526, 55921218387864227549, 284505270151495169775, 220202086505377407524, 270531588014485840862, 502216237290990445250, 90589958566976695557, 367295891604393754927, 262370768212022611593, 64692603328772157466, 331797208741216227461, 275137541328693093112, 572252368107906537501, 102398691219544147038, 205699766581235871944, 448793900048342803295, 102045796395062500667, 561002384555924990286, 90999681088935677299, 130805604488210203295, 457430602631388239062, 96857574787662892662, 395509492614668116065, 1122029418534418993, 318136734449615633993, 79692149622793969597, 522764336671285227554, 292258934101859801821, 469094289328716547258, 176124550195849963401, 198340722830004577317, 290938962178253944971, 384526273257925763866, 208513952620665831165, 178795602370121895119, 8072174275677582922, 327379600101757096981, 179404248525602603003, 86896603678143062414, 278471689791968204208, 511452202630639038767, 500570538280725577670, 338469760682504155951, 492849270649326494514, 347553155718614987892, 27818671729227772068, 122269772685807329541, 512355333632132549028, 527025003772009560544, 471543873608632330365, 311880442873952658437, 176163933013336148783, 274228587943249384325, 463824538718499152688, 347440853223728889661, 279974033448211732014, 66261134761225908332, 441332762798195152276, 417305587888516079546, 298943875932708050175, 333804860621780765072, 367843843510791265722, 277596643503205301520, 581004854949933654124, 248137025434777133938, 400495781761477402105, 211578305746839297222, 454629353289052712636, 184667353210127247162, 413302134066652139153, 507080057174794762508, 114187244737722086993, 174861970013594063904, 385062245838797869480, 573329395904785445239, 266311674353509791851, 62534139516909393971, 551428090898564004439, 471564151568926528189, 408320874192424697213, 379278082740757517011, 304187387456212019594, 151581058588825101901, 89948254976383068545, 286564107063193367315, 182800924036086000145, 252251493294782061263, 523286057606917591388, 98663470714116974968, 88943470417600226072, 10953499770061888447, 454929991531015925222, 14073331460741435004, 469541648381707608797, 60805858430227484236, 463693948479524733654, 567301288422660890358, 310614770531183561251, 416025156262011268001, 456194594407686674157, 524954359230513258983, 569573959716202216189, 98524385776486226934, 72715524728428730488, 313698604145742586754, 386370943538559915034, 225081990502627598794, 96390895417971030450, 221154331049452185052, 485739717945433943863, 172319045326508383706, 401821464592931351730, 405297990545060762469, 466214473135434151259, 293028487990528273941, 326944737010182965094, 242998081647707978621, 415961764985120458032, 371754244893728307625, 169226488578190396435, 330786090186430043051, 259746650577588057507, 302220711069912706186, 433837914100543322781, 149510128406471341933, 475641274014338162160, 182009610745920904343, 176655871445742897467, 305892587401695294093, 584441581088492596398, 389310984337750858128, 254838572146914580852, 245995839746730432930, 69810982477119629534, 128636525204394714948, 420181239276598511828, 501192453800798840574, 583340342085996176408, 155710820924745746931, 55255380343614049590, 161250595104026591029, 101503724746237954404, 92184328263213305681, 323421518014566180144, 316937400358435561266, 364769454064521610930, 7272335518195944378, 473644636666972035893, 145998807990345755391, 370707696032790248564, 399321646806321041522, 405359728055473570257, 511263886774154332657, 335998959511697383083, 554282160430467213149, 386285269555579744289, 399956938664060499678, 479114033139939894030, 160956080476662090592, 527830084262948778912, 237032047817718008731, 230283872631896888681, 243245971588396251303, 343545675366379417131, 582437381277824837064, 521223045693213554220, 582490531067985138939, 195305501966331378096, 359211860333803297670, 501023233579034741545, 139707413235113717326, 536984796830279347760, 184102374641653382234, 327652498376658158353, 309577312065221425340, 417957935533629422048, 548427174431335481193, 535183289699733953668, 300542411401144340844, 319844942158718692294, 560012669472408459863, 26947860235256613180, 338792941344340797038, 256601543835711656735, 227738312717664589039, 522213742028735119572, 532375934987494733593, 232973561453441490230, 153230687077759283358, 388689954999572409656, 68547003031534030724, 61246182014696684610, 95929704338986050903, 449376377915590975060, 260905383922224608217, 110660011702379778402, 167708912036921203617, 10143640667435221370, 382851819952001811305, 371622874028982314660, 95338437986799264316, 116940651616039476837, 381799784236210713569, 196981293740942012272, 454646568531830348819, 31397543077921124101, 243696152665076475563, 102352458741903369932, 435083665765748133669, 43912986596598602849, 200556639698052984577, 498965553899943771457, 360463903084018870383, 485984851663390752810, 75277937080171726111, 472477394337992811747, 11567645437605193401, 399304744153655579611, 459290337243402748559, 205701328765472793854, 10793567897237552969, 111306556034824378143, 435732841039701401927, 381555092197951037198, 187491037767763118077, 588092695937142387036, 295200908555155722510, 388583502532476191207, 452944860997771412566, 163586340114353304029, 443623113452493654889, 445932456251101675677, 198146723156404078163, 14203318186634359963, 155285742673978850300, 293204286427140697454, 234227844492718483297, 420028491164146833652, 435860805905500245658, 488103281455595064525, 517446619815085760406, 312500871421014400093, 514559399310944001282, 306174610456415363042, 434780856561264839661, 225145364240328233356, 458912900423782605299, 459940668107537813713, 372687255111591640025, 251979736684712979472, 31716627044781194605, 40092342177894722326, 206465360815037642484, 572196759536131835983, 542738474655712177740, 460369451147406129140, 530133011355275695407, 447753933148747613987, 157511030749966815296, 100881777683127516199, 472516349455035583846, 407321944910210371492, 3833476285712436615, 230704292280606856319, 227373749780607395068, 192426622909748357232, 425258253315659314112, 254238534543347495626, 78297595532055314833, 247257184318424354053, 349882935499384348954, 333015403959217849907, 530128694941411601563, 307287631970508395856, 254540128445940355631, 127537741211771134015, 140723787925829080574, 15958965145039082217, 354588206823398905980, 534212786687205967200, 372929730346506929406, 400002438801271637556, 312526277442502860471, 532381088055727025462, 355829809699620647482, 69151519419783600358, 220486735074033841298, 342322433680869040764, 401695668944625903868, 262849191404560171716, 361180385287175643693, 390969198706645665770, 419289263853237190367, 188920360518178884363, 388174218958736656609, 118919345304715718506, 523443358756022626204, 378521768982013076751, 133470175469751153516, 134007025009437588124, 87444531857721889115, 100958779651246333260, 447760194307048139358, 589552319599535895500, 484361682150981098225, 373933627062252140075, 576807602532417074024, 378424643857407526307, 140044513240292173296, 501264670081527170010, 214788408841784390625, 363547959661757142706, 171389064248741850840, 478299069951371320333, 10036008305133585432, 420211856958121101184, 41386927541242902616, 486981079483013739283, 566432298928502146476, 11895298275626591016, 579229652649155194576, 569141996688031899325, 199252283607696356996, 453697465917267099594, 60531880958312485478, 161674391440945827527, 153722146120026660276, 90031630753251727127, 126635697042775441965, 471482905466697826455, 478366851898600258042, 60760332343644027068, 457721739976810530174, 429954658832708345893, 173978544424907969451, 329528660957353192259, 531368072575573244975, 336558541191202810624, 404784617826776067110, 10688094447984901855, 155441922249970114090, 398120197709450858058, 128061263732369525221, 177684111887683683284, 299905096329674742174, 452325409596627471676, 589568707375349846444, 237812550895532203974, 425196889050890050151, 448840196775471475257, 252283212856523701875, 241441741700662781018, 486884005907494335105, 442926579724736077099, 31613271590377387685, 332109547434553060488, 433831181578748696947, 171418763591406335032, 439200714700819438839, 167201410782311508502, 229250636916064924381, 556537849775832004398, 495763291208926380336, 134773898047660997243, 497956961909024340193, 281302575056968927789, 24509855420907334837, 498770323820530302672, 301704013100558796468, 72714634883056259534, 58391225559922481557, 548949620302771096373, 526607249247753794575, 300465931753879396962, 102883687014579121695, 50147547878058968532, 315610780397573140492, 283622126692298433683, 451847919502891699928, 390167752763741667973, 194297787202273221431, 286767503741361760250, 223327851123350795712, 155728964295734097924, 432617122426681345154, 51886612043721700633, 262577143028958643132, 96763251699540441883, 326764643839310596761, 550386538046931239714, 392778146407010553003, 415911905226932656493, 252084819753235591955, 269727758721397621073, 450937139614632469260, 10283303673196869675, 75585288509545448900, 129291343541107794177, 163682317051141960831, 220612679629569301991, 467099948455507665848, 78257384105003892892, 306033165872125316507, 535350487688847934748, 358862434091190020812, 127757397834746118654, 567079164568123095216, 339517071293960361570, 442059124371186321099, 449473600464690716685, 77720194001532532326, 285434443894718586642, 583651618922999492582, 66429039740837304359, 201157303035939876636, 339491637588775304106, 274425076061691291904, 213873746638164598336, 73214376406621784996, 260493497684954653456, 162073084391422131293, 569090530762819537543, 511023466068363805328, 29798081933763147265, 435866062633081822537, 296831933018887628143, 107980940071754927134, 458503809327505075147, 372216981046393540492, 407145937463838703594, 44685855198273267933, 392898566916343426301, 149866405801284607920, 456464175899317834197, 166682728097207308234, 407599907604841253403, 227018120527609659859, 260963775925134471144, 539820569551521979696, 315144991730558711298, 479844278605079977821, 50727235877957166513, 400575562011905073543, 91866283261374193127, 149588862060001345540, 284016886466378981331, 519238947229202638512, 407797428406046238385, 361681824321942768186, 148939950137044044316, 96996298195920429411, 179807608225022745796, 506011154659383616704, 122310216146329920391, 43993989153631677516, 377595315541892771215, 435145565306754350789, 546680359407631208616, 466030760615695192125, 304686810762196490620, 350039672276152049139, 328724075099455541124, 555933042735612900100, 423070313513151175848, 19810367283350030327, 533950691345981794084, 149723212633848525248, 553669504400259890191, 53636423875590316869, 219239278142288769567, 241495261733611541105, 249126371630436143532, 25615612187063811247, 492297394481642273854, 478914947091025241587, 444824163528459487454, 344213972099057828979, 61180169349633106920, 429192930246100724766, 220850634492772910648, 522449300988883393132, 323796893894687004174, 143421131904407951250, 281352722254767630024, 29599653424671632745, 159345711759235546872, 330999057478969924748, 512504838800783552233, 110792732517234827341, 131478400534625873264, 86531928642378643912, 552364163170729468380, 320068716521451376531, 467808687872204580255, 119881335294985289352, 295562823291810738914, 34307529552311215488, 316729743057500909576, 556073232050741120981, 48898769428677021364, 561951702872865962404, 19250793687368017155, 148635324954230215544, 530217291215103641179, 300513563499736019290, 458166338758975584473, 560382147333973650638, 367123218573310729852, 401487255388960773926, 57636181856989863122, 516421266238026283697, 34786768224053939295, 11389286010317918004]):\n    \"\"\"\n    Learning parity with noise: Given binary vectors, find the secret set $S$ of indices such that, for at least\n    3/4 of the vectors, $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"\n    return sum(sum((v >> i) & 1 for i in inds) % 2 for v in vecs) >= len(vecs) * 3 / 4",
    "sols": [],
    "module": "lattices",
    "notes": "Learn parity with noise (*unsolved*)\n\nThe fastest known algorithm to this\n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nruns in time $2^(d/(log d))$",
    "taint_date": "2021-4-26",
    "weight": 0.0975609756097561
  },
  {
    "name": "LearnParityWithNoise_6",
    "sat": "def sat(inds: List[int], vecs=[3163812673533625082, 4125577178789370471, 64110048483541818, 707173385026854610, 3755203846867743696, 2817742663890994827, 4412671896751130110, 3429378032388602898, 3027936192050369911, 4033127656015332417, 1323411978058946125, 1088652185726908725, 4097672018242805809, 2096826705280677885, 2562658556838288740, 4579861167331706751, 3954658588123772906, 2595636830103806364, 1015283671733602733, 1702985572994350377, 597108845972195171, 2259961764790974433, 1119260180803612571, 2480217890824132861, 3304891514040013939, 4592357438054436358, 3010611010022495362, 1571445556080689109, 3618286599215634737, 2249207203471635039, 2804179540720411849, 2402063123206776317, 669727508985050441, 1717484499649451571, 2734171852762871692, 2086164310039495899, 3071145274740078614, 1061850653204412416, 1737961297605925268, 1642124536480596645, 4437843249260091090, 4051624983524873455, 520983318812984488, 3427380584699320643, 4270301209154376314, 4115800136719533266, 3928170872897557177, 915105227651190605, 2080582080668872610, 1329597844554690793, 2739863910598623840, 4151573687080590489, 2197888552138543621, 252244303959227394, 3745239920121497803, 649338675922500681, 161617572598678644, 2030478374789928512, 4317791667895615733, 3128420261648657128, 4185383174842149908, 4479821641990227337, 1754915128490944957, 930658320922031770, 2231960832144875528, 4148568798010746811, 156970067364571441, 4351739773822523872, 626988942503289185, 635878656694748266, 1526461192277527785, 1221771093802203836, 1999141136699745072, 1982031221019564953, 4169942875707253098, 880047104916873863, 2650946353735814985, 1599586655793924363, 4303046718893387230, 3287078130713606692, 3317306480398444281, 1540181677757170752, 2859860318472913072, 584582819372451281, 2845698237940098294, 3347985296262653513, 3035907066877176424, 1142642581002365864, 914906220201689637, 3101091935964148285, 3120110276442648430, 938524414290436510, 2646021308984021379, 120989612463426403, 3466860514172752865, 1559028257370518425, 761254082668501122, 46083027102008048, 2690706438178930224, 3326922229474082107, 1412154300250168836, 3557882433309444205, 3643181461249203536, 2813025988618001942, 1745371172348290337, 2681091654822238628, 1052465664771979354, 3276057491901277447, 1524126313753142908, 997855537465238160, 32600111709782282, 3076985290835587955, 603254062140734902, 2142184922649620144, 2904533196309876209, 209504328209078275, 2450457785686075361, 3632434217568443657, 1971499046023015760, 977543417266459644, 2012812006443057369, 4492519780478096668, 1266610402667710825, 557094312901883066, 1105276981205516336, 2099066811187354809, 3932252856652820597, 1866769256906216538, 583040821415850924, 168150787005788011, 4453847761053539887, 3622998884146089202, 2614962428281908066, 2051088684497907431, 2785457047382339172, 4124483699098828149, 54481062653438845, 3215098566377160291, 3451536517374755900, 1405445532608925125, 3610780955132587004, 3458960658713688908, 387824407404364452, 320523133844017142, 3852430672243056800, 2195920228088742827, 1070502113855776853, 1822258816325275863, 3723297023984744207, 51269251458160940, 1368251967786748726, 2891171057137845852, 785891397344876782, 3797941472955242773, 404047287129410159, 3139839438763305557, 4545959032187108832, 3203974405731211854, 683095176620444670, 2561038422554619475, 302097135312046089, 2330615260691603006, 3239412988377924557, 1976762555545015224, 2841336434491260348, 245364679254316424, 2881691113020238972, 4507579989745340779, 3901755261874065182, 2715449968822847541, 2236458704863285709, 2907517431875694082, 1510511751999422248, 2956116894975279787, 2648959181888448246, 3831547048745937025, 4506428080168512235, 1066452984585081754, 977743918838963487, 4092965069038135404, 119201307306512118, 64239405433657860, 1613847205328907643, 1803770109730281876, 2717243840917227323, 1725421186803919148, 100867811624614291, 3246953094070582118, 2093751745433103700, 837200041091615519, 3006601307927216861, 1106717297710787503, 2774249820271246760, 904706661489239971, 623183573264609089, 2426292811742134453, 159489753424180846, 4155912251660958143, 1736950923687565976, 731605582635982242, 2515811357134767991, 1653445483641662160, 1398483649700125872, 3770391117475464589, 1570713212877146342, 3456077309244063736, 2568029914553866077, 2705701823791664581, 1169941227294935826, 279443494406752674, 4505725385375272675, 1581983744004455417, 4350388281110366660, 2889232399699267390, 3386821610839437111, 2340141477865602428, 3054049022571171827, 2529515021190649330, 3471307493201923392, 1664408071244747634, 2906709991859341570, 3059212922136209508, 4174482258531025503, 4442975304617165701, 3707643227069966499, 397158708156138601, 4082441743247395877, 4077670132153086599, 2590330607793773774, 381322446410843374, 161791448371912019, 2210211701134619604, 3859221327244161771, 2079814105791191464, 3218300735773729516, 1306805005128365455, 3435135170461364068, 858461592903215814, 454822256333253568, 2118918823805743221, 2119640191637421454, 1603412635112565066, 3527432197870346922, 4025370849439531582, 159716118414294237, 743290746131741333, 11257584606624539, 4350943959731953271, 3314809214940636420, 1232748431451311937, 2581559943081634491, 1857353989781966292, 2008858458287743530, 1399735098507023912, 1294346393660379265, 3295393421848022877, 2096247085822694944, 892165113713077738, 4033301725414836994, 4493504634403519604, 869697897463433595, 324270213620154145, 2639338961850841729, 3461689674118404597, 2040096094485192046, 3608564690028383279, 622809753724542527, 1700885435969500573, 3747508830981384513, 1458967860314251876, 536237288298472832, 4264847798578238540, 150760795326830642, 2716347697236874567, 1304127041534096992, 387819810602302536, 3416593847594609079, 873280859471665502, 2227641551107770181, 1951854439253996240, 1526871706390028936, 919569561333083661, 1358472157458114379, 3998930211532498867, 2863735620830068020, 92543433771855851, 250430103620249205, 1988085421073698196, 3810755874558613309, 1436079408041441386, 2516285400853509321, 2184793845887227189, 3389042708361267088, 95599732233507452, 1477906790032279432, 606805557559119582, 1854780444774087827, 1775300495553759606, 4272351954539657449, 2139858741049311694, 502071833385601043, 2048536054309966392, 1330382011920338982, 1038010914333803788, 1874011819391934312, 1727949515371740939, 3880881099464573966, 537176707117270741, 1360675743063700600, 4063768038557129876, 4177368043253030705, 3164023653463384829, 4186921038277081937, 2383210727799231225, 3750901830889486209, 4224429527837995480, 3607523490120957366, 4363873527175269450, 1887083408911658981, 1017272594653068883, 2281263382698400937, 1295071375969427849, 4330797573204579620, 2229267851072599813, 821229020271665353, 3252175330995628909, 2961269339680918606, 751533361374542009, 1772764101920016427, 601482291408982345, 185751142736988908, 4276324200248405461, 2309493265511211920, 131212255669611642, 222871332242929735, 1693651002512781684, 383680245375190049, 765966538782252357, 2851724156250815553, 320129477017462404, 1897923825291663314, 2253846470193566364, 4411949861966503379, 3485244416579873536, 764833904938748249, 4141611497928111314, 4487630079795803606, 302409589258410256, 4005383319664282059, 1803502306813342158, 1773240442310211495, 4330929649542920395, 2146777015205867778, 4493298517219815542, 2254789640265341082, 276960851209894065, 1843911883584981378, 4437951810517988799, 191208623986839277, 2357518407659728131, 580068308465104958, 326909400954030245, 311029530967267707, 2581529846038533021, 3795917305163682340, 2956952932593436902, 840476460952958716, 2593869101006112718, 2141576347596232032]):\n    \"\"\"\n    Learning parity with noise: Given binary vectors, find the secret set $S$ of indices such that, for at least\n    3/4 of the vectors, $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"\n    return sum(sum((v >> i) & 1 for i in inds) % 2 for v in vecs) >= len(vecs) * 3 / 4",
    "sols": [],
    "module": "lattices",
    "notes": "Learn parity with noise (*unsolved*)\n\nThe fastest known algorithm to this\n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nruns in time $2^(d/(log d))$",
    "taint_date": "2021-4-26",
    "weight": 0.0975609756097561
  },
  {
    "name": "LearnParityWithNoise_7",
    "sat": "def sat(inds: List[int], vecs=[193632, 185466, 973694, 1586322, 1936492, 1442817, 623508, 1605013, 1495131, 477170, 121217, 858216, 868617, 867403, 746134, 1996958, 1318459, 937946, 671627, 283749, 1383066, 2057510, 41584, 518092, 2095122, 616250, 813384, 1790116, 2015840, 348815, 473813, 2051960, 1951459, 1111824, 766224, 2012601, 1526144, 1752522, 1281635, 161171, 361786, 1470149, 2080491, 1498536, 849075, 1373038, 1810962, 112480, 1346635, 148991, 777870, 1984751, 1230999, 326979, 1004945, 2072011, 828827, 921455, 46527, 1544526, 1330462, 946038, 1569351, 1449696, 967090, 310409, 1996053, 1734028, 482979, 792624, 898222, 1052934, 1476503, 800589, 497221, 157971, 1769399, 2071096, 884695, 1481768, 453305, 712629, 743990, 1243095, 575313, 1788142, 2064214, 2054842, 1986988, 297734, 1841729, 544936, 859440, 455020, 2091584, 1900285, 74724, 816147, 997888, 1959232, 126483, 1379584, 1972314, 1017280, 580238, 1591642, 473148, 967147, 1056693, 266587, 1607608, 580638, 1737911, 1946360, 1921247, 479441, 793313, 171093, 24989, 114971, 1406564, 1961428, 1060148, 575668, 75743, 1504729, 1806107, 671956, 41523, 1675798, 1496237, 1427629, 1990765, 122775, 1544556, 1747931, 1403887, 1492809, 424049, 1073579, 537323, 657183, 1226495, 541847, 1958656, 1089989, 1587585, 1537519, 1781508, 1472891, 1847821, 878567, 217038, 1757425, 1558896, 217133, 1173884, 199758, 970768, 1729081, 1697835, 183539, 1617340, 1521869, 1206868, 13763, 120710, 1374403, 933970, 1177267, 1484031, 2016832, 1473440, 139159, 1548651, 1385654, 975193, 73618, 410753, 655441, 2068023, 1740127, 1081577, 1957488, 345766, 894821, 708254, 1966930, 1957578, 1760438, 1270110, 1140982, 607447, 748118, 1400257, 1802969, 1399849, 1350486, 205140, 444225, 1974139, 652973, 841551]):\n    \"\"\"\n    Learning parity with noise: Given binary vectors, find the secret set $S$ of indices such that, for at least\n    3/4 of the vectors, $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"\n    return sum(sum((v >> i) & 1 for i in inds) % 2 for v in vecs) >= len(vecs) * 3 / 4",
    "sols": [],
    "module": "lattices",
    "notes": "Learn parity with noise (*unsolved*)\n\nThe fastest known algorithm to this\n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nruns in time $2^(d/(log d))$",
    "taint_date": "2021-4-26",
    "weight": 0.0975609756097561
  },
  {
    "name": "LearnParityWithNoise_8",
    "sat": "def sat(inds: List[int], vecs=[408618428692359275031926275246, 361447835328706623540324387161, 495444681047137604478647905317, 603020218583428702663890790452, 51351535733950387547969754620, 452219019167786079423404884354, 190695869294782525532364337196, 107582970716519909798120217551, 417523758578839458574389726342, 569083406640495842255331122204, 419188788647558426466370029111, 590273827112982962184620601505, 37154372939756615956147160071, 400936376268327162484104161759, 290153311504934457143664428647, 300027017151844702379051573568, 98002130323774327603022120155, 20222862555132506487045669473, 89131473714796897392137366735, 391597561573735201539551071915, 277912748444197591271798625986, 79173136692561446749152956228, 52243817365010174173561337117, 76535124031924788039554133414, 457449043549930902735545304718, 57442583051988438199481594510, 472690916878158912530189568598, 151733541107232100448052429629, 385532858580463647025642647118, 125532199800760773072078482444, 356093385952254487367163166287, 107326429107260927508322211969, 496572777723374913328428394926, 381648888252052841927433601622, 275305687313429899815134100281, 207244844851932749349512091571, 399729384396668848857537775692, 303328644986110189304019836207, 233685372688459963969465189121, 109568775868777993909272127505, 609955558679665222200582507752, 210143571787620244253137548898, 35164493062115069395495912957, 211990746199324486264009661706, 562545104074510148622493244082, 298889945487494044362744407140, 290107681857429827439469711073, 595909672641442002049268852184, 426400032630444939558282203725, 237539686053631232678103192065, 330893907644444681468651014633, 186730980280592794415894023778, 96926574841284754934011253101, 40434270036362208272643986802, 442914766386173094793495009689, 583930463593575885380524031115, 75841252798483459790701217537, 555830208783531541514934071207, 587210463933250089636534885090, 220105841303757107532577281557, 115475452760419452491748417332, 536690045262693736861576122606, 463079889851491640733525902119, 434910529912542608374626912531, 511429192709912045941606112748, 244132535841344214057367184644, 337560223518903600203217028444, 446647436060647730207801970552, 564309111411416561551061488861, 156163650774941163726735633535, 537462206922923432051862520504, 126397702929403993942694379152, 408324002583413560428916492031, 237876394068070462879802379801, 488661501029468596237920023396, 601366909301172141206755950945, 561648784803221670594452298246, 29767450812918960721257128137, 602723383838399148687360172521, 277496521357342736905079558072, 438244185135423385182550908450, 118963530657828041783820875498, 540729581775098531406680530877, 172454988139983592976943786069, 580696078375832464060172468540, 373840606438451684920602271080, 117321427209642079951650095844, 548037613488098333309006947532, 187813872613815926730077912851, 269240022380305157120672690982, 76167485396495533140283246013, 539977858407484759919522637008, 351388528902200728685307617655, 630698208213306537369403878935, 251995999714560134079586421448, 437405694159106736219607238694, 140689174700814806078880129093, 203727584755139923008676924211, 410946479616775168766305860042, 394247843195326005534771416468, 431890317741243577712282233165, 586377548202923650876410129654, 552695657366899499281899516024, 488236055200255670834713714798, 128672276482101068052684296857, 325638465525773171812207661576, 92192154486218707439011032394, 78325868673921112040133983915, 415032011171944606307452833058, 537247524675726359518462946957, 491214229788888464803713014470, 542030448136290774253693761084, 152227023713187319366273448958, 125373964745324561240079460436, 258144178329523738732768520322, 376100597780097043058654689115, 428502700184279806994443484025, 111568667435093448579033313449, 182122906421725422256088807819, 632879906410809771098304627456, 527620377338091182238709072282, 197426961978559950999697717009, 51888616456548115810237249974, 104072931202602684200395773026, 257843378047384166897157105842, 276943751177816215630439038644, 385785313584728894223010814511, 331940909555504815009350048980, 227440055349520733837748877320, 1923840139006778278835059743, 609795553074576245230917387852, 192693600791888663401450827996, 173604488808776684818030532860, 426334464980246081476910389517, 417566735378945771563376371128, 376219245533785859577488036214, 74332074574277838970717673920, 199130632263800599226943800465, 437847853488735091225868627820, 47546012806273080460267986596, 410388391967760397179386413470, 157949081384038343071988548032, 244243131789035480183732204998, 632959465687517276425696876132, 91240017266157167641266894991, 245182967601654253440118957271, 49462506514546349222799952252, 104868942249922265070437315999, 457184400825949771164690600936, 160336318827953472936897049001, 480259444469508955996184875464, 17929822124437702195387380762, 228336306181862022446026798137, 480819882601131878315158198662, 59042509470451633961382917124, 564679241675002693850216261964, 508332053367484074910817589188, 555998594365919986385191669384, 158344627255055970280794997895, 153779262914274575909289639908, 480036886627241320670572130433, 369156051103360097033315437609, 623538347833702993754211966654, 117512306000920803731478042275, 233802320392331853582344607791, 345857052121025990190637363363, 283599461222712124506699487568, 204130026603204975332649118312, 495890677055734996770823676706, 363866955493391137216187692305, 65498495750619967310648855008, 6218200883625382259595623274, 391353975857478407810131430415, 14067580600208958076989456330, 370775622418711906439070014828, 595474761866185672001600244213, 322070689867569728672507315272, 595031939443715573078389604600, 427327066615291914591385853879, 365734444110299175280299706035, 115222526659677958472277693578, 80225472601954799735543839458, 114978473959563909727720682259, 256226408668980558434328027830, 218948596580841112171873826044, 29405253059306536126086146888, 239237835464194042301613789700, 470469700417733684052420769972, 527461830762483069014501341931, 193656422786103142308001060626, 352306277742474903295076024702, 564106854493721075239607435380, 211882012583271522140036615854, 103514105756681154755566421557, 266847168381287080406022638090, 479261498806414912506207216898, 621173338218158316870916065289, 483757861396639252885751316424, 83542522668290093189321585041, 605336934044708430940921730500, 328731633156210950314975236442, 538801995106609804094360928441, 472351616556954858195189006172, 497108448709027757850509993186, 528916327379386787742021806708, 198241421203977774859415962708, 409599644627886949253427280035, 616628873866658731847320697670, 511649972414191244583155310743, 292849426247738474953469891283, 508506270841802525008250289363, 341445776988167088741248283685, 465838034445000342008782962007, 324359548655322151791252439598, 277349438664798696697666050844, 494163535024097285953483686123, 564469315098405082438457461034, 66879553408744177777780664513, 401993524447212764275845398622, 459227829693645850310301314003, 489638400220907761137097316434, 379385179961193018544612371332, 232211107772270692880522890640, 627199448994180883269238608045, 479133695591014345057128559919, 281010302750298807489671620208, 514131354587022099564316531550, 259148063189759268957521472311, 590827825980763168818570156527, 458458628900922345958141420468, 247982495706366067581758208906, 461792869088848360751658801275, 446752719684607803003255614133, 223393691789073045237107154916, 527140212452584864148646622335, 160105752008127664355977128583, 186155247433607948637152755264, 303427488001372757145542304864, 418285371238670896709459494407, 231197318160921585607166135683, 158297891781498745083058101845, 278860405120800406784767606721, 425633113279519694805107833223, 398842955175812719080819680959, 141019030646601481726566224622, 575835759934360213226220360367, 368955221040267395513452371371, 140434757436997412975163546284, 392085848544124654610989889999, 384279501891167586565588352013, 47641639473291242355546813778, 299870242576630313692958773821, 622155812555078185619881047569, 36660617883198705181938943745, 420646587681990005804860060994, 21916702966490669744913613457, 510407638878783808357399445268, 49730865519027529816339459558, 161968815498700725219902433228, 318219699380538161157027383696, 187191203845734877450876577760, 243200198408324840905921619751, 225171209503668894335944385127, 58055313177224343994867015671, 223410376715280690105011145244, 562375087392869637062545294917, 122428964064430128792406644214, 518315999727186545632642566227, 230147800563626899660150710715, 170828884274484015369121085203, 500465855418923843456446443355, 221087704355182909986988528104, 189078832782681695874957628174, 260979895300945912211224285575, 104033278761314353024252993263, 97555757618020913288188990558, 65825915425847759874897013088, 392051513079943667485109387606, 256269125534325028524057320787, 538008489068533363710102830311, 371137497948714982032796403349, 172627722484875975101656972331, 327100877537964842128853466153, 451292443458566075281814971686, 434433782045298216647126986828, 173738578033147045785039808799, 389778143025534032658102921613, 158510994784634573565507123568, 121913785177387649113817037526, 569849927355384513344573829305, 632289483886348614576953328686, 52413314817784308045797627787, 286767906831099884558623931940, 235389299699043927409258386050, 514201782280148032184585959468, 260195523043032695205743143807, 579031414580098321787531139194, 576519667039998835082079928567, 218656027405530451827389224053, 394198620376185911012981327279, 530558277575620261794187728223, 533785170994634338438719354419, 327845428721826122983930806462, 215303304126671922120709939646, 510443745259318326568644832666, 5575728489834987986769725926, 176393414773990284322571112847, 105873894971253099430358060419, 451681135303518830514816252601, 466245710459130635427343573779, 407662032155392297206193535499, 324090211771395492601157056839, 614702827181886206348296241934, 60684491633565576253084607008, 211826579328183072797308299784, 539762328779604458758347948873, 469664270090999909820308637516, 291874026608069729105932692935, 206474853305270504184940171592, 464709217533662507457225797420, 352960429208995021218659591898, 99434700859490684271839976887, 153305184644437224551938496044, 125045976030824999167561422451, 284317318860542899737038643294, 394756879841105089757101359622, 62845570212427988884860255521, 632151132860597761326658825303, 467129844203555829318194557069, 144632821859760066069006847151, 345324668014171818740651782314, 40115152485140817507605100641, 65730245817455785293313141749, 589170167913722718151928759159, 543437220897251545392726872727, 394230410397784046474918114217, 294946422052894826327132612492, 147255732920593080318431895221, 101961810312014346554073344151, 609588880221153342282517459662, 167387064666485534325207835802, 117962116888159499691483668565, 565924989039171501146665982536, 511063965856984221025179177438, 383983859882972601764373111145, 567387039003416088010561912477, 359864740760854562348452599561, 190100706749617057496308580565, 330576020427058182448326550674, 145512508624209959757972681332, 46131004468746375165629298223, 306882508203109129172028178012, 569996043496853378519374500917, 141089355085088184480552839690, 256988560623539870642374995017, 370460795369046353249694528424, 441642425542296683284198595912, 494839445494468862593216689216, 428717451309875686938706542377, 619827954165777292181276769601, 207785678944617023204009255951, 583758800611356914535570314288, 596518822804855885885245003928, 626692626733741372505031922923, 463982897618057775739596610165, 509775593407542310694883569669, 119367230854033674122780883283, 302080618514403431989384577174, 300164777152940497523914501868, 198783530183087695153033361084, 360921744855702661210896514936, 564108538752418989803500551032, 486326195271237150203601108057, 91809116573240642554054795933, 195371560094288696121446540790, 632040372069296641746151329966, 39567254310440617762320216078, 420686367018770543915495527972, 523811905249786956973489923754, 23019137697839072027712279359, 203482439105428816247575814179, 192619230691052677518083274876, 475372097487354138244628561976, 247082804404177893571107063468, 412165646388399145566331984318, 365234217354475444926545917181, 544534195374371004418490164896, 589741043119215012152812412937, 362553293575656643332508307695, 486251707475454227411297054698, 498145787133208994583612481349, 548322879925257793656665788517, 606421892125991707022087501810, 320640381657290790184378890423, 465050067300471644142009915035, 581981888064244971854418094768, 545378086426086856722931375369, 553924289444947304386330332479, 140962578953502026769666626319, 127024762823812159480997683226, 595659328382547495481790925840, 456833796217034419883823896583, 496252311944911590170407076820, 85381511479539221645520275359, 169446515879171315561453804671, 451142358354452611269290719817, 619067568151194665288905886764, 156686321795169598533563184755, 453247730079725558184636295341, 24927214427259810863769637418, 467514879402991441280975315914, 570310870427911137395090088106, 362270095748634376831383642446, 567658554771208624655954642035, 570008553167687723364103039040, 182149458054339488928591790799, 317522777849596614556657150495, 162784358597396782005788908358, 478234851208787498182199166672, 405909197692840799493330536169, 60923643255100725716013187460, 232286892064146223123886214973, 233186854649005657627631097134, 103638005898870024157314649059, 413172843424804085558510482795, 27873688738453858071322942944, 434507387836489207106747794160, 261202483270417703939583024766, 555990977492975402495881691656, 134111196413038175366792639806, 3140557114884948246185593176, 390369636320004883540301633232, 624038722741887828794320416396, 354149325478544947990281558503, 337071074844895825295104934405, 540477226796134079886975941575, 509351554881397281798778520068, 527651188450955093552283386894, 111129272479791261125517855879, 601734981386631576588885834660, 149619584979357614066596367360, 623831975705611165329921840567, 427622423795949828025380508828, 8469019969893036244283850917, 618975847663578424378341132760, 138142478511748392371210441100, 199864355057452247682731601527, 615302958782289444556809943485, 35044374167883175014751390870, 74414983460592335588427057785, 188336120136047180034220614140, 491011978571011587950512699681, 202679702287633391876573738049, 355957796260307311971814972981, 37318215782589758540742372193, 147849566951028047431239382435, 121765213886653372678398045517, 444693694722814583414727488531, 439496570900360185167400590264, 103270596047366030773818928553, 225096051509394509662970418935, 161551674989789132414997289569, 369272049736895094166912093961, 233444098439971827780372044585, 273870862050522345056605127746, 253290546359626438940472646331, 301730778567500760603404872713, 594959883241678671120826304307, 608410045641733533188506480149, 140841609082866047301266816643, 416451206589261839228540502885, 400079142856127732679231757756, 177860834311864237512968071870, 287763946276465293951995122142, 603020359589930645939088086580, 383860470962289688670916964893, 265801979302577811488945245955, 188778474156025198004536366791, 526851087355948768225066937296, 625392283215160122079337212206, 313676136099917936135331876554, 293172582378827078548327740697, 587876250877881301661953257524, 379765838232544779415907732285, 292757190083351915549160232056, 185659841367078016692263402032, 346319440566818785710829172754, 353750634372714413869621416203, 418842261565491877555255803583, 34202658569085131904826575836, 568533772981573136430146898706, 582726474381100487487145663965, 88527172218128771170655480232, 630034149082749697695149987422, 602355445228367986830539896876, 31603675796276558892895064180, 442879951007527544112260476581, 18202053396933717404741021049, 414727575984587706267335155620, 7024510174208796847600907910, 220424583750134120413979961542, 217032832470221158187403739768, 518808005753539326620003480708, 243381340233513410478424621071, 581309773797787538430199495309, 531600547208705347264337385780, 429671552302964153024894650790, 570535346083263747899144554920, 243867427121455110302885022197, 328894836555836960708284998717, 75928899107834519164333625866, 272893391456863813815809216602, 589633691797746259822297966621, 489994448652627580079049663661, 50104867535210423468848353199, 299558043801534018217956883494, 523973774729257077150389719805, 192460166229082372677254550214, 409589175737257360297113866323, 517549420148587666209779518474, 322854282933002614076734828728, 631962895252928325387986982118, 581867852576203379616127075237, 140773212414742623318668974681, 360991187906074217612450160519, 447531785249846456114561514836, 491026754876850404181691984867, 243821908037994906600323313794, 126888380923808145761213692723, 291251252086417381790344997183, 56765200683537805238454541352, 114591440329292181242718562312, 145465834388517187397502646058, 588845243223979182700012067020, 371477637278942208834027624658, 354792549841894871452247194270, 314752848724944527717399572610, 417922237639425080911417180868, 462614577558496392545806244976, 176572903273319637794545976479, 224175348916852868431153800057, 35176042370217299193196732319, 117729003021287629821804969314, 445696348703169912622193457877, 111038201975558436077501027636, 115147300447611979771864467957, 381513422012417618142822450944, 161822580884533403632314216600, 108546103949499405157478903163, 574454741601019007668421545886, 253975981614658559749141774920, 98332345023311665762770071539, 455283092786517455327974874822, 552460096548333627362271035840, 24115726485353527479470297145, 581191325943416656063952727316, 496807130587673189382000831779, 133859682788425262724482668115, 450782068884083570024263838868, 179491795941163274263946665537, 533400765916205914928667667662, 631651626665185476822267167087, 186706676658742869315247032430, 318098600468235616589075883002, 272295498402187830637214958628, 510143896647441739740145810333, 552071944478251924244492440732, 423212957268927572810207742334, 353525149983891487880234572966, 18007359637916863884075917554, 120472434382556279835702237406, 336756097058913102435677167781, 455912572184382506505746619260, 599644670863398113509903136749, 20660285967020735955397932507, 523979780650716408568393740093, 230942133263536585619894642339, 277706999510313693983502182364, 470949544950262161828203351155, 436017056118974144876306588451, 482536315361847674031788120187, 46585603801352509840607621002, 544624585995708982910283969359, 424850561111601934663701569638, 285571872926792379132713436060, 396100081416463346392900621366, 476185235501852158558942534117, 329389660755259728040315156162, 124069182705511209519966300732, 175974076825707382812597784629, 116819504949750807868111584179, 622603293584069273178562739961, 529956948146184624411496790172, 96780336280858165617039142568, 99941156196240094773426131807, 440060115243566997042959899775, 310144549471082314111362202478, 140808456369429264456940722181, 297225707307541740873837884532, 440430427947273668679073708330, 328408335404314100036349265178, 344538008883377034876174435579, 161459228808002250445080132808, 125616302937340754613768425538, 175207297665439260676748864371, 450255898845561082959228210005, 498824132128631940057290350935, 67702894775794097427378178005, 314812192103450877297077387878, 88287686644708375229763074355, 425468552446216231331668286913, 620294465541766670723208049839, 526954542508545731813527490394, 60063399589713756532683579838, 346132918944813195572644731643, 354154091709337067825142720960, 630919747708030805809526425447, 493986759343622876565850301536, 549028719118286328821542722452, 355624986447655403370619933269, 582727679763304752016697805611, 122019965563396470659954888505, 207442202406836444655222630988, 573590322514859983920243688130, 96591385333667448879601610003, 28688436164881823111041539939, 368363281948562905736832599500, 264543587152623589464721218200, 132387477305621312828662861389, 567506558062530626135362130818, 90892583834347827075855477398, 550335214912058443388189275125, 253861476275153408819472963716, 93544378748629493433274853228, 67306027554938180064353392868, 163469085884690016914353624741, 27425152898749004736893136674, 387000470158409617833286601901, 599483930979579301528644391304, 165076053463904052487787104938, 229398191736717633587677609561, 194093024744358184484444152899, 291399412841398859743333895802, 366684939650630593547672813894, 401818210478903794824913883766, 443967903697350733234325653821, 368690946042496239102383220765, 556747787628678658992994625517, 397543310041016457618314320161, 377419542476293782508490550678, 144903728714837116852756926094, 448442277175280289723827539083, 334059209614405728846236825101, 186775459609697083481867292138, 319205654353929412217453740955, 541768906973844854201459093351, 424780774621917863662842966251, 144035764441502282891678233532, 147585461325418603058211659552, 304450684092231944223220900115, 590755124585286583377316963154, 409616651188573968129183512620, 604143971369982726604345748009, 614323756982331946918025855636, 530484955383516098604227477302, 258708651296590719281039721540, 127570762053505228027492021388, 306283797970126805714933567264, 404153897800528780323550421069, 494959447710717961355662230168, 420938360146569553639259312328, 628346902366134709486890121950, 531518687283440392247858142273, 600736568908352885167472832101, 503291009635656252566866498930, 524376467446327091631032064348, 479211766088078194656713100926, 370367744744552955252383245813, 419936697954628475134127423355, 397596435877947807428174858740, 423283377446435628367190452023, 229688233829248716577548983795, 161882108171869603020205130996, 6242424651517029373413825376, 14795291114086283442449118066, 111368369712406460437474836295, 442766298992439833583873995562, 460326326439799141214587910773, 553711357271472883175896104544, 44682761615062907330963187428, 376200522778834414982059319041, 102992937317467048534770675333, 31001001814387879812183100644, 41502280125558806642695460478, 354662518956084764413145286924, 489679903345877524502618433605, 83786343476986984038475827184, 622766589425162658612803190968, 350347663596171071705455225086, 40581816942522109894928559026, 351285959496437507675305684624, 574760563550523250180812703486, 432305709563931607859300181705, 547183055165213063466203139222, 602822474381950286376411338467, 98673061769904926645631095204, 294551368640436471452320307545, 430456808529351485094910208660, 625542615851508188044138346772, 850607296152788082892902599, 123245818205619382497015764615, 36397380177543883640621247775, 570523140784927780145399426790, 268959605138149231558417777759, 323401304297611442443355392654, 307510368882450307544211119798, 480136062313266552298859084881, 13873047187733632837582822851, 551058043709872841528500609158, 624170772192513101717196336184, 161150993458569661064962984487, 341875666146289876019039341586, 414232142014849348761454092024, 614684560355348182463334328551, 546634610578297695377653935445, 493968524064149907450071102874, 352189124212678890008677366071, 519776828117121645096742187180, 314263366913037459975039767818, 240710922680814247577689647276, 613437970734460372711465672060, 605846647039032358440509904940, 249231243983427660682793745767, 174472741772239126301493553643, 413986573625246840332072478146, 428730933586952370668574192590, 326705191144467257680920283308, 429752358979347979980269640487, 397748741208320414590973016213, 72240975647170767273776181512, 490963187682073831529416796382, 340099285735953713104340317326, 448389514530425662112198268796, 591077399984765528952377128588, 452356472904990342406809667184, 158910830395679556230766094659, 408510915827231942551675247005, 562908112803470622327991489687, 370283077122503346136081289877, 27409975298297235620509628352, 413447658937745584314523627254, 213811702235622126100627605291, 19854514117499297565415938997, 444359521763008015697711757607, 399647850589582044966337454412, 101500611276584879559824994546, 64641971866865577354477644571, 546040299441872337950269885382, 197051555533019072484821822196]):\n    \"\"\"\n    Learning parity with noise: Given binary vectors, find the secret set $S$ of indices such that, for at least\n    3/4 of the vectors, $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"\n    return sum(sum((v >> i) & 1 for i in inds) % 2 for v in vecs) >= len(vecs) * 3 / 4",
    "sols": [],
    "module": "lattices",
    "notes": "Learn parity with noise (*unsolved*)\n\nThe fastest known algorithm to this\n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nruns in time $2^(d/(log d))$",
    "taint_date": "2021-4-26",
    "weight": 0.0975609756097561
  },
  {
    "name": "LearnParityWithNoise_9",
    "sat": "def sat(inds: List[int], vecs=[4, 16, 21, 23, 27, 14, 13, 31, 31, 23, 4, 6, 31, 14, 16, 9, 16, 14, 6, 6, 26]):\n    \"\"\"\n    Learning parity with noise: Given binary vectors, find the secret set $S$ of indices such that, for at least\n    3/4 of the vectors, $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"\n    return sum(sum((v >> i) & 1 for i in inds) % 2 for v in vecs) >= len(vecs) * 3 / 4",
    "sols": [
      "def sol(vecs=[4, 16, 21, 23, 27, 14, 13, 31, 31, 23, 4, 6, 31, 14, 16, 9, 16, 14, 6, 6, 26]):  # brute force\n    d = 0 # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    while True:\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans"
    ],
    "module": "lattices",
    "notes": "Learn parity with noise (*unsolved*)\n\nThe fastest known algorithm to this\n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nruns in time $2^(d/(log d))$",
    "taint_date": "2021-4-26",
    "weight": 0.0975609756097561
  },
  {
    "name": "FermatsLastTheorem_0",
    "sat": "def sat(nums: List[int]):\n    \"\"\"Find integers a,b,c > 0, n > 2, such such that a^n + b^n == c^n\"\"\"\n    a, b, c, n = nums\n    return (a ** n + b ** n == c ** n) and min(a, b, c) > 0 and n > 2",
    "sols": [],
    "module": "number_theory",
    "notes": "[Fermat's last theorem](https://en.wikipedia.org/w/index.php?title=Fermat%27s_Last_Theorem)\n\nSupposedly unsolvable, but how confident are really in the super-complicated proof?\n\nSee [Wiles, Andrew. \"Modular elliptic curves and Fermat's last theorem.\" Annals of mathematics 141.3 (1995): 443-551.](https://www.jstor.org/stable/2118559)",
    "taint_date": "2021-4-26",
    "weight": 0.0625
  },
  {
    "name": "GCD_0",
    "sat": "def sat(n: int, a=15482, b=23223, lower_bound=5):\n    \"\"\"Find a large common divisor of two integers.\"\"\"\n    return a % n == 0 and b % n == 0 and n >= lower_bound",
    "sols": [
      "def sol(a=15482, b=23223, lower_bound=5):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n",
      "def sol(a=15482, b=23223, lower_bound=5):\n    def gcd(m, n):\n        if m > n:\n            return gcd(n, m)\n        if m == 0:\n            return n\n        return gcd(n % m, m)\n\n    return gcd(a, b)"
    ],
    "module": "number_theory",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "GCD_1",
    "sat": "def sat(n: int, a=9, b=9, lower_bound=6):\n    \"\"\"Find a large common divisor of two integers.\"\"\"\n    return a % n == 0 and b % n == 0 and n >= lower_bound",
    "sols": [
      "def sol(a=9, b=9, lower_bound=6):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n",
      "def sol(a=9, b=9, lower_bound=6):\n    def gcd(m, n):\n        if m > n:\n            return gcd(n, m)\n        if m == 0:\n            return n\n        return gcd(n % m, m)\n\n    return gcd(a, b)"
    ],
    "module": "number_theory",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "GCD_2",
    "sat": "def sat(n: int, a=232610, b=3131721474, lower_bound=15000):\n    \"\"\"Find a large common divisor of two integers.\"\"\"\n    return a % n == 0 and b % n == 0 and n >= lower_bound",
    "sols": [
      "def sol(a=232610, b=3131721474, lower_bound=15000):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n",
      "def sol(a=232610, b=3131721474, lower_bound=15000):\n    def gcd(m, n):\n        if m > n:\n            return gcd(n, m)\n        if m == 0:\n            return n\n        return gcd(n % m, m)\n\n    return gcd(a, b)"
    ],
    "module": "number_theory",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "GCD_3",
    "sat": "def sat(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    \"\"\"Find a large common divisor of two integers.\"\"\"\n    return a % n == 0 and b % n == 0 and n >= lower_bound",
    "sols": [
      "def sol(a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n",
      "def sol(a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    def gcd(m, n):\n        if m > n:\n            return gcd(n, m)\n        if m == 0:\n            return n\n        return gcd(n % m, m)\n\n    return gcd(a, b)"
    ],
    "module": "number_theory",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "GCD_4",
    "sat": "def sat(n: int, a=8797233, b=2370036150831, lower_bound=8364173):\n    \"\"\"Find a large common divisor of two integers.\"\"\"\n    return a % n == 0 and b % n == 0 and n >= lower_bound",
    "sols": [
      "def sol(a=8797233, b=2370036150831, lower_bound=8364173):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n",
      "def sol(a=8797233, b=2370036150831, lower_bound=8364173):\n    def gcd(m, n):\n        if m > n:\n            return gcd(n, m)\n        if m == 0:\n            return n\n        return gcd(n % m, m)\n\n    return gcd(a, b)"
    ],
    "module": "number_theory",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "GCD_5",
    "sat": "def sat(n: int, a=10799897490, b=39426750, lower_bound=4523):\n    \"\"\"Find a large common divisor of two integers.\"\"\"\n    return a % n == 0 and b % n == 0 and n >= lower_bound",
    "sols": [
      "def sol(a=10799897490, b=39426750, lower_bound=4523):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n",
      "def sol(a=10799897490, b=39426750, lower_bound=4523):\n    def gcd(m, n):\n        if m > n:\n            return gcd(n, m)\n        if m == 0:\n            return n\n        return gcd(n % m, m)\n\n    return gcd(a, b)"
    ],
    "module": "number_theory",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "GCD_6",
    "sat": "def sat(n: int, a=821440637766952, b=313059975920048, lower_bound=2773268):\n    \"\"\"Find a large common divisor of two integers.\"\"\"\n    return a % n == 0 and b % n == 0 and n >= lower_bound",
    "sols": [
      "def sol(a=821440637766952, b=313059975920048, lower_bound=2773268):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n",
      "def sol(a=821440637766952, b=313059975920048, lower_bound=2773268):\n    def gcd(m, n):\n        if m > n:\n            return gcd(n, m)\n        if m == 0:\n            return n\n        return gcd(n % m, m)\n\n    return gcd(a, b)"
    ],
    "module": "number_theory",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "GCD_7",
    "sat": "def sat(n: int, a=10, b=5864, lower_bound=1):\n    \"\"\"Find a large common divisor of two integers.\"\"\"\n    return a % n == 0 and b % n == 0 and n >= lower_bound",
    "sols": [
      "def sol(a=10, b=5864, lower_bound=1):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n",
      "def sol(a=10, b=5864, lower_bound=1):\n    def gcd(m, n):\n        if m > n:\n            return gcd(n, m)\n        if m == 0:\n            return n\n        return gcd(n % m, m)\n\n    return gcd(a, b)"
    ],
    "module": "number_theory",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "GCD_8",
    "sat": "def sat(n: int, a=775542538, b=541328691524, lower_bound=221396926):\n    \"\"\"Find a large common divisor of two integers.\"\"\"\n    return a % n == 0 and b % n == 0 and n >= lower_bound",
    "sols": [
      "def sol(a=775542538, b=541328691524, lower_bound=221396926):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n",
      "def sol(a=775542538, b=541328691524, lower_bound=221396926):\n    def gcd(m, n):\n        if m > n:\n            return gcd(n, m)\n        if m == 0:\n            return n\n        return gcd(n % m, m)\n\n    return gcd(a, b)"
    ],
    "module": "number_theory",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "GCD_9",
    "sat": "def sat(n: int, a=828442282, b=51728048756230352, lower_bound=274459911):\n    \"\"\"Find a large common divisor of two integers.\"\"\"\n    return a % n == 0 and b % n == 0 and n >= lower_bound",
    "sols": [
      "def sol(a=828442282, b=51728048756230352, lower_bound=274459911):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n",
      "def sol(a=828442282, b=51728048756230352, lower_bound=274459911):\n    def gcd(m, n):\n        if m > n:\n            return gcd(n, m)\n        if m == 0:\n            return n\n        return gcd(n % m, m)\n\n    return gcd(a, b)"
    ],
    "module": "number_theory",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "GCD_multi_0",
    "sat": "def sat(n: int, nums=[77410, 23223, 54187], lower_bound=2):\n    \"\"\"Find a large common divisor of the list of integers.\"\"\"\n    return all(i % n == 0 for i in nums) and n >= lower_bound",
    "sols": [
      "def sol(nums=[77410, 23223, 54187], lower_bound=2):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n"
    ],
    "module": "number_theory",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "GCD_multi_1",
    "sat": "def sat(n: int, nums=[14, 551755893, 902110495], lower_bound=1):\n    \"\"\"Find a large common divisor of the list of integers.\"\"\"\n    return all(i % n == 0 for i in nums) and n >= lower_bound",
    "sols": [
      "def sol(nums=[14, 551755893, 902110495], lower_bound=1):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n"
    ],
    "module": "number_theory",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "GCD_multi_2",
    "sat": "def sat(n: int, nums=[287260676668, 33263981357337, 47314720, 295717, 2957170], lower_bound=98647):\n    \"\"\"Find a large common divisor of the list of integers.\"\"\"\n    return all(i % n == 0 for i in nums) and n >= lower_bound",
    "sols": [
      "def sol(nums=[287260676668, 33263981357337, 47314720, 295717, 2957170], lower_bound=98647):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n"
    ],
    "module": "number_theory",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "GCD_multi_3",
    "sat": "def sat(n: int, nums=[452452, 111673658096, 83221402264, 5027670648, 61177116, 154154, 116116, 1508784124848, 17036343324, 29091062, 100726626], lower_bound=977):\n    \"\"\"Find a large common divisor of the list of integers.\"\"\"\n    return all(i % n == 0 for i in nums) and n >= lower_bound",
    "sols": [
      "def sol(nums=[452452, 111673658096, 83221402264, 5027670648, 61177116, 154154, 116116, 1508784124848, 17036343324, 29091062, 100726626], lower_bound=977):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n"
    ],
    "module": "number_theory",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "GCD_multi_4",
    "sat": "def sat(n: int, nums=[8154539588421190, 128861795], lower_bound=64216730):\n    \"\"\"Find a large common divisor of the list of integers.\"\"\"\n    return all(i % n == 0 for i in nums) and n >= lower_bound",
    "sols": [
      "def sol(nums=[8154539588421190, 128861795], lower_bound=64216730):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n"
    ],
    "module": "number_theory",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "GCD_multi_5",
    "sat": "def sat(n: int, nums=[22536, 7171497003, 3232038, 4695, 399494733, 57279, 939, 939], lower_bound=2):\n    \"\"\"Find a large common divisor of the list of integers.\"\"\"\n    return all(i % n == 0 for i in nums) and n >= lower_bound",
    "sols": [
      "def sol(nums=[22536, 7171497003, 3232038, 4695, 399494733, 57279, 939, 939], lower_bound=2):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n"
    ],
    "module": "number_theory",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "GCD_multi_6",
    "sat": "def sat(n: int, nums=[8035236835035976, 8864663, 8864663, 5595449367588691, 17729326, 33041861196984, 5162185798779, 2076157262578, 57935031630489, 87999607112293], lower_bound=6511259):\n    \"\"\"Find a large common divisor of the list of integers.\"\"\"\n    return all(i % n == 0 for i in nums) and n >= lower_bound",
    "sols": [
      "def sol(nums=[8035236835035976, 8864663, 8864663, 5595449367588691, 17729326, 33041861196984, 5162185798779, 2076157262578, 57935031630489, 87999607112293], lower_bound=6511259):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n"
    ],
    "module": "number_theory",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "GCD_multi_7",
    "sat": "def sat(n: int, nums=[1348424, 3040049384], lower_bound=2):\n    \"\"\"Find a large common divisor of the list of integers.\"\"\"\n    return all(i % n == 0 for i in nums) and n >= lower_bound",
    "sols": [
      "def sol(nums=[1348424, 3040049384], lower_bound=2):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n"
    ],
    "module": "number_theory",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "GCD_multi_8",
    "sat": "def sat(n: int, nums=[23246503230, 63990, 2275860, 1350, 2400, 8210430, 240, 18828914640], lower_bound=10):\n    \"\"\"Find a large common divisor of the list of integers.\"\"\"\n    return all(i % n == 0 for i in nums) and n >= lower_bound",
    "sols": [
      "def sol(nums=[23246503230, 63990, 2275860, 1350, 2400, 8210430, 240, 18828914640], lower_bound=10):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n"
    ],
    "module": "number_theory",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "GCD_multi_9",
    "sat": "def sat(n: int, nums=[688744389320358, 2256831], lower_bound=259749):\n    \"\"\"Find a large common divisor of the list of integers.\"\"\"\n    return all(i % n == 0 for i in nums) and n >= lower_bound",
    "sols": [
      "def sol(nums=[688744389320358, 2256831], lower_bound=259749):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n"
    ],
    "module": "number_theory",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "LCM_0",
    "sat": "def sat(n: int, a=15, b=27, upper_bound=150):\n    \"\"\"Find a small common multiple of two integers.\"\"\"\n    return n % a == 0 and n % b == 0 and 0 < n <= upper_bound",
    "sols": [
      "def sol(a=15, b=27, upper_bound=150):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)"
    ],
    "module": "number_theory",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "LCM_1",
    "sat": "def sat(n: int, a=41234205765, b=597597185, upper_bound=73349253728):\n    \"\"\"Find a small common multiple of two integers.\"\"\"\n    return n % a == 0 and n % b == 0 and 0 < n <= upper_bound",
    "sols": [
      "def sol(a=41234205765, b=597597185, upper_bound=73349253728):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)"
    ],
    "module": "number_theory",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "LCM_2",
    "sat": "def sat(n: int, a=7601351956456, b=2974663988, upper_bound=389421039754872576):\n    \"\"\"Find a small common multiple of two integers.\"\"\"\n    return n % a == 0 and n % b == 0 and 0 < n <= upper_bound",
    "sols": [
      "def sol(a=7601351956456, b=2974663988, upper_bound=389421039754872576):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)"
    ],
    "module": "number_theory",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "LCM_3",
    "sat": "def sat(n: int, a=201717041833890, b=3585167190, upper_bound=731493653565433):\n    \"\"\"Find a small common multiple of two integers.\"\"\"\n    return n % a == 0 and n % b == 0 and 0 < n <= upper_bound",
    "sols": [
      "def sol(a=201717041833890, b=3585167190, upper_bound=731493653565433):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)"
    ],
    "module": "number_theory",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "LCM_4",
    "sat": "def sat(n: int, a=79680, b=661339968, upper_bound=410128528659):\n    \"\"\"Find a small common multiple of two integers.\"\"\"\n    return n % a == 0 and n % b == 0 and 0 < n <= upper_bound",
    "sols": [
      "def sol(a=79680, b=661339968, upper_bound=410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)"
    ],
    "module": "number_theory",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "LCM_5",
    "sat": "def sat(n: int, a=1184805001069, b=2869829826198, upper_bound=107891010360490480):\n    \"\"\"Find a small common multiple of two integers.\"\"\"\n    return n % a == 0 and n % b == 0 and 0 < n <= upper_bound",
    "sols": [
      "def sol(a=1184805001069, b=2869829826198, upper_bound=107891010360490480):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)"
    ],
    "module": "number_theory",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "LCM_6",
    "sat": "def sat(n: int, a=503565347412, b=340326, upper_bound=157711238221245):\n    \"\"\"Find a small common multiple of two integers.\"\"\"\n    return n % a == 0 and n % b == 0 and 0 < n <= upper_bound",
    "sols": [
      "def sol(a=503565347412, b=340326, upper_bound=157711238221245):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)"
    ],
    "module": "number_theory",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "LCM_7",
    "sat": "def sat(n: int, a=554236750, b=565, upper_bound=1066642513):\n    \"\"\"Find a small common multiple of two integers.\"\"\"\n    return n % a == 0 and n % b == 0 and 0 < n <= upper_bound",
    "sols": [
      "def sol(a=554236750, b=565, upper_bound=1066642513):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)"
    ],
    "module": "number_theory",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "LCM_8",
    "sat": "def sat(n: int, a=26222646, b=35151, upper_bound=51538626):\n    \"\"\"Find a small common multiple of two integers.\"\"\"\n    return n % a == 0 and n % b == 0 and 0 < n <= upper_bound",
    "sols": [
      "def sol(a=26222646, b=35151, upper_bound=51538626):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)"
    ],
    "module": "number_theory",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "LCM_9",
    "sat": "def sat(n: int, a=10400312341586488, b=19168091586437888, upper_bound=7640345911153373632004096):\n    \"\"\"Find a small common multiple of two integers.\"\"\"\n    return n % a == 0 and n % b == 0 and 0 < n <= upper_bound",
    "sols": [
      "def sol(a=10400312341586488, b=19168091586437888, upper_bound=7640345911153373632004096):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)"
    ],
    "module": "number_theory",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "LCM_multi_0",
    "sat": "def sat(n: int, nums=[15, 27, 102], upper_bound=5000):\n    \"\"\"Find a small common multiple of a list of integers.\"\"\"\n    return all(n % i == 0 for i in nums) and n <= upper_bound",
    "sols": [
      "def sol(nums=[15, 27, 102], upper_bound=5000):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans"
    ],
    "module": "number_theory",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "LCM_multi_1",
    "sat": "def sat(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888):\n    \"\"\"Find a small common multiple of a list of integers.\"\"\"\n    return all(n % i == 0 for i in nums) and n <= upper_bound",
    "sols": [
      "def sol(nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans"
    ],
    "module": "number_theory",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "LCM_multi_2",
    "sat": "def sat(n: int, nums=[55040126016, 4373970014334], upper_bound=219074883886936):\n    \"\"\"Find a small common multiple of a list of integers.\"\"\"\n    return all(n % i == 0 for i in nums) and n <= upper_bound",
    "sols": [
      "def sol(nums=[55040126016, 4373970014334], upper_bound=219074883886936):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans"
    ],
    "module": "number_theory",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "LCM_multi_3",
    "sat": "def sat(n: int, nums=[9140, 4882496600, 119119770064, 107772494796, 102424668, 3656, 1188591500932, 116992, 14700627932, 997397016], upper_bound=238661269929569213628364588516267312050595558326272):\n    \"\"\"Find a small common multiple of a list of integers.\"\"\"\n    return all(n % i == 0 for i in nums) and n <= upper_bound",
    "sols": [
      "def sol(nums=[9140, 4882496600, 119119770064, 107772494796, 102424668, 3656, 1188591500932, 116992, 14700627932, 997397016], upper_bound=238661269929569213628364588516267312050595558326272):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans"
    ],
    "module": "number_theory",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "LCM_multi_4",
    "sat": "def sat(n: int, nums=[173261568, 4270662976], upper_bound=17025943527197098):\n    \"\"\"Find a small common multiple of a list of integers.\"\"\"\n    return all(n % i == 0 for i in nums) and n <= upper_bound",
    "sols": [
      "def sol(nums=[173261568, 4270662976], upper_bound=17025943527197098):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans"
    ],
    "module": "number_theory",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "LCM_multi_5",
    "sat": "def sat(n: int, nums=[27309997, 11, 48257, 44, 82533], upper_bound=155742084336245):\n    \"\"\"Find a small common multiple of a list of integers.\"\"\"\n    return all(n % i == 0 for i in nums) and n <= upper_bound",
    "sols": [
      "def sol(nums=[27309997, 11, 48257, 44, 82533], upper_bound=155742084336245):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans"
    ],
    "module": "number_theory",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "LCM_multi_6",
    "sat": "def sat(n: int, nums=[205269770732, 688976, 35462, 4582551620, 182376, 395148, 13081065514, 40528, 5066], upper_bound=242256675588707364896768):\n    \"\"\"Find a small common multiple of a list of integers.\"\"\"\n    return all(n % i == 0 for i in nums) and n <= upper_bound",
    "sols": [
      "def sol(nums=[205269770732, 688976, 35462, 4582551620, 182376, 395148, 13081065514, 40528, 5066], upper_bound=242256675588707364896768):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans"
    ],
    "module": "number_theory",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "LCM_multi_7",
    "sat": "def sat(n: int, nums=[210, 206010, 2766930, 11341667910, 5893438920, 5565191820, 2717700], upper_bound=10860241092132727743714222101422525120512):\n    \"\"\"Find a small common multiple of a list of integers.\"\"\"\n    return all(n % i == 0 for i in nums) and n <= upper_bound",
    "sols": [
      "def sol(nums=[210, 206010, 2766930, 11341667910, 5893438920, 5565191820, 2717700], upper_bound=10860241092132727743714222101422525120512):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans"
    ],
    "module": "number_theory",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "LCM_multi_8",
    "sat": "def sat(n: int, nums=[146369986974, 1648572987, 239653, 5284579675492, 6805378070747, 239653, 958612, 1323603519, 1584585636, 12195941170], upper_bound=709969499924908138716035675220917354496):\n    \"\"\"Find a small common multiple of a list of integers.\"\"\"\n    return all(n % i == 0 for i in nums) and n <= upper_bound",
    "sols": [
      "def sol(nums=[146369986974, 1648572987, 239653, 5284579675492, 6805378070747, 239653, 958612, 1323603519, 1584585636, 12195941170], upper_bound=709969499924908138716035675220917354496):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans"
    ],
    "module": "number_theory",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "LCM_multi_9",
    "sat": "def sat(n: int, nums=[61053, 2, 49025629, 377, 351058174, 1, 8, 8774, 39521, 7, 248734], upper_bound=242169498367847500568417450458775289856):\n    \"\"\"Find a small common multiple of a list of integers.\"\"\"\n    return all(n % i == 0 for i in nums) and n <= upper_bound",
    "sols": [
      "def sol(nums=[61053, 2, 49025629, 377, 351058174, 1, 8, 8774, 39521, 7, 248734], upper_bound=242169498367847500568417450458775289856):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans"
    ],
    "module": "number_theory",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "SmallExponentBigSolution_0",
    "sat": "def sat(n: int, b=2, target=5):\n    \"\"\"Solve for n: b^n = target (mod n)\"\"\"\n    return (b ** n) % n == target",
    "sols": [
      "def sol(b=2, target=5):\n    for n in range(1, 10 ** 5):\n        if pow(b, n, n) == target:\n            return n"
    ],
    "module": "number_theory",
    "notes": "Small exponent, big solution\n\nProblems have small b and target but solution is typically a large n.\nSome of them are really hard, for example, for `b=2, target=3`, the smallest solution is `n=4700063497`\n\nSee [Richard K. Guy \"The strong law of small numbers\", (problem 13)](https://doi.org/10.2307/2322249)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "SmallExponentBigSolution_1",
    "sat": "def sat(n: int, b=2, target=3):\n    \"\"\"Solve for n: b^n = target (mod n)\"\"\"\n    return (b ** n) % n == target",
    "sols": [],
    "module": "number_theory",
    "notes": "Small exponent, big solution\n\nProblems have small b and target but solution is typically a large n.\nSome of them are really hard, for example, for `b=2, target=3`, the smallest solution is `n=4700063497`\n\nSee [Richard K. Guy \"The strong law of small numbers\", (problem 13)](https://doi.org/10.2307/2322249)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "SmallExponentBigSolution_2",
    "sat": "def sat(n: int, b=1, target=2):\n    \"\"\"Solve for n: b^n = target (mod n)\"\"\"\n    return (b ** n) % n == target",
    "sols": [],
    "module": "number_theory",
    "notes": "Small exponent, big solution\n\nProblems have small b and target but solution is typically a large n.\nSome of them are really hard, for example, for `b=2, target=3`, the smallest solution is `n=4700063497`\n\nSee [Richard K. Guy \"The strong law of small numbers\", (problem 13)](https://doi.org/10.2307/2322249)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "SmallExponentBigSolution_3",
    "sat": "def sat(n: int, b=69, target=2):\n    \"\"\"Solve for n: b^n = target (mod n)\"\"\"\n    return (b ** n) % n == target",
    "sols": [
      "def sol(b=69, target=2):\n    for n in range(1, 10 ** 5):\n        if pow(b, n, n) == target:\n            return n"
    ],
    "module": "number_theory",
    "notes": "Small exponent, big solution\n\nProblems have small b and target but solution is typically a large n.\nSome of them are really hard, for example, for `b=2, target=3`, the smallest solution is `n=4700063497`\n\nSee [Richard K. Guy \"The strong law of small numbers\", (problem 13)](https://doi.org/10.2307/2322249)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "SmallExponentBigSolution_4",
    "sat": "def sat(n: int, b=14, target=3):\n    \"\"\"Solve for n: b^n = target (mod n)\"\"\"\n    return (b ** n) % n == target",
    "sols": [
      "def sol(b=14, target=3):\n    for n in range(1, 10 ** 5):\n        if pow(b, n, n) == target:\n            return n"
    ],
    "module": "number_theory",
    "notes": "Small exponent, big solution\n\nProblems have small b and target but solution is typically a large n.\nSome of them are really hard, for example, for `b=2, target=3`, the smallest solution is `n=4700063497`\n\nSee [Richard K. Guy \"The strong law of small numbers\", (problem 13)](https://doi.org/10.2307/2322249)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "SmallExponentBigSolution_5",
    "sat": "def sat(n: int, b=34, target=3):\n    \"\"\"Solve for n: b^n = target (mod n)\"\"\"\n    return (b ** n) % n == target",
    "sols": [
      "def sol(b=34, target=3):\n    for n in range(1, 10 ** 5):\n        if pow(b, n, n) == target:\n            return n"
    ],
    "module": "number_theory",
    "notes": "Small exponent, big solution\n\nProblems have small b and target but solution is typically a large n.\nSome of them are really hard, for example, for `b=2, target=3`, the smallest solution is `n=4700063497`\n\nSee [Richard K. Guy \"The strong law of small numbers\", (problem 13)](https://doi.org/10.2307/2322249)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "SmallExponentBigSolution_6",
    "sat": "def sat(n: int, b=56, target=3):\n    \"\"\"Solve for n: b^n = target (mod n)\"\"\"\n    return (b ** n) % n == target",
    "sols": [
      "def sol(b=56, target=3):\n    for n in range(1, 10 ** 5):\n        if pow(b, n, n) == target:\n            return n"
    ],
    "module": "number_theory",
    "notes": "Small exponent, big solution\n\nProblems have small b and target but solution is typically a large n.\nSome of them are really hard, for example, for `b=2, target=3`, the smallest solution is `n=4700063497`\n\nSee [Richard K. Guy \"The strong law of small numbers\", (problem 13)](https://doi.org/10.2307/2322249)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "SmallExponentBigSolution_7",
    "sat": "def sat(n: int, b=74, target=3):\n    \"\"\"Solve for n: b^n = target (mod n)\"\"\"\n    return (b ** n) % n == target",
    "sols": [
      "def sol(b=74, target=3):\n    for n in range(1, 10 ** 5):\n        if pow(b, n, n) == target:\n            return n"
    ],
    "module": "number_theory",
    "notes": "Small exponent, big solution\n\nProblems have small b and target but solution is typically a large n.\nSome of them are really hard, for example, for `b=2, target=3`, the smallest solution is `n=4700063497`\n\nSee [Richard K. Guy \"The strong law of small numbers\", (problem 13)](https://doi.org/10.2307/2322249)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "SmallExponentBigSolution_8",
    "sat": "def sat(n: int, b=17, target=4):\n    \"\"\"Solve for n: b^n = target (mod n)\"\"\"\n    return (b ** n) % n == target",
    "sols": [
      "def sol(b=17, target=4):\n    for n in range(1, 10 ** 5):\n        if pow(b, n, n) == target:\n            return n"
    ],
    "module": "number_theory",
    "notes": "Small exponent, big solution\n\nProblems have small b and target but solution is typically a large n.\nSome of them are really hard, for example, for `b=2, target=3`, the smallest solution is `n=4700063497`\n\nSee [Richard K. Guy \"The strong law of small numbers\", (problem 13)](https://doi.org/10.2307/2322249)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "SmallExponentBigSolution_9",
    "sat": "def sat(n: int, b=53, target=4):\n    \"\"\"Solve for n: b^n = target (mod n)\"\"\"\n    return (b ** n) % n == target",
    "sols": [
      "def sol(b=53, target=4):\n    for n in range(1, 10 ** 5):\n        if pow(b, n, n) == target:\n            return n"
    ],
    "module": "number_theory",
    "notes": "Small exponent, big solution\n\nProblems have small b and target but solution is typically a large n.\nSome of them are really hard, for example, for `b=2, target=3`, the smallest solution is `n=4700063497`\n\nSee [Richard K. Guy \"The strong law of small numbers\", (problem 13)](https://doi.org/10.2307/2322249)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "ThreeCubes_0",
    "sat": "def sat(nums: List[int], target=10):\n    \"\"\"Given n, find integers a, b, c such that a^3 + b^3 + c^3 = n.\"\"\"\n    assert target % 9 not in [4, 5], \"Hint\"\n    return len(nums) == 3 and sum([i ** 3 for i in nums]) == target",
    "sols": [
      "def sol(target=10):\n    assert target % 9 not in {4, 5}\n    for i in range(20):\n        for j in range(i + 1):\n            for k in range(-20, j + 1):\n                n = i ** 3 + j ** 3 + k ** 3\n                if n == target:\n                    return [i, j, k]\n                if n == -target:\n                    return [-i, -j, -k]"
    ],
    "module": "number_theory",
    "notes": "Sum of three cubes\n\nGiven `n`, find integers `a`, `b`, `c` such that `a**3 + b**3 + c**3 = n`. This is unsolvable for `n % 9 in {4, 5}`.\nConjectured to be true for all other n, i.e., `n % 9 not in {4, 5}`.\n`a`, `b`, `c` may be positive or negative\n\nSee [wikipedia entry](https://en.wikipedia.org/wiki/Sums_of_three_cubes) or\n[Andrew R. Booker, Andrew V. Sutherland (2020). \"On a question of Mordell.\"](https://arxiv.org/abs/2007.01209)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "ThreeCubes_1",
    "sat": "def sat(nums: List[int], target=114):\n    \"\"\"Given n, find integers a, b, c such that a^3 + b^3 + c^3 = n.\"\"\"\n    assert target % 9 not in [4, 5], \"Hint\"\n    return len(nums) == 3 and sum([i ** 3 for i in nums]) == target",
    "sols": [],
    "module": "number_theory",
    "notes": "Sum of three cubes\n\nGiven `n`, find integers `a`, `b`, `c` such that `a**3 + b**3 + c**3 = n`. This is unsolvable for `n % 9 in {4, 5}`.\nConjectured to be true for all other n, i.e., `n % 9 not in {4, 5}`.\n`a`, `b`, `c` may be positive or negative\n\nSee [wikipedia entry](https://en.wikipedia.org/wiki/Sums_of_three_cubes) or\n[Andrew R. Booker, Andrew V. Sutherland (2020). \"On a question of Mordell.\"](https://arxiv.org/abs/2007.01209)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "ThreeCubes_2",
    "sat": "def sat(nums: List[int], target=390):\n    \"\"\"Given n, find integers a, b, c such that a^3 + b^3 + c^3 = n.\"\"\"\n    assert target % 9 not in [4, 5], \"Hint\"\n    return len(nums) == 3 and sum([i ** 3 for i in nums]) == target",
    "sols": [],
    "module": "number_theory",
    "notes": "Sum of three cubes\n\nGiven `n`, find integers `a`, `b`, `c` such that `a**3 + b**3 + c**3 = n`. This is unsolvable for `n % 9 in {4, 5}`.\nConjectured to be true for all other n, i.e., `n % 9 not in {4, 5}`.\n`a`, `b`, `c` may be positive or negative\n\nSee [wikipedia entry](https://en.wikipedia.org/wiki/Sums_of_three_cubes) or\n[Andrew R. Booker, Andrew V. Sutherland (2020). \"On a question of Mordell.\"](https://arxiv.org/abs/2007.01209)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "ThreeCubes_3",
    "sat": "def sat(nums: List[int], target=579):\n    \"\"\"Given n, find integers a, b, c such that a^3 + b^3 + c^3 = n.\"\"\"\n    assert target % 9 not in [4, 5], \"Hint\"\n    return len(nums) == 3 and sum([i ** 3 for i in nums]) == target",
    "sols": [],
    "module": "number_theory",
    "notes": "Sum of three cubes\n\nGiven `n`, find integers `a`, `b`, `c` such that `a**3 + b**3 + c**3 = n`. This is unsolvable for `n % 9 in {4, 5}`.\nConjectured to be true for all other n, i.e., `n % 9 not in {4, 5}`.\n`a`, `b`, `c` may be positive or negative\n\nSee [wikipedia entry](https://en.wikipedia.org/wiki/Sums_of_three_cubes) or\n[Andrew R. Booker, Andrew V. Sutherland (2020). \"On a question of Mordell.\"](https://arxiv.org/abs/2007.01209)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "ThreeCubes_4",
    "sat": "def sat(nums: List[int], target=627):\n    \"\"\"Given n, find integers a, b, c such that a^3 + b^3 + c^3 = n.\"\"\"\n    assert target % 9 not in [4, 5], \"Hint\"\n    return len(nums) == 3 and sum([i ** 3 for i in nums]) == target",
    "sols": [],
    "module": "number_theory",
    "notes": "Sum of three cubes\n\nGiven `n`, find integers `a`, `b`, `c` such that `a**3 + b**3 + c**3 = n`. This is unsolvable for `n % 9 in {4, 5}`.\nConjectured to be true for all other n, i.e., `n % 9 not in {4, 5}`.\n`a`, `b`, `c` may be positive or negative\n\nSee [wikipedia entry](https://en.wikipedia.org/wiki/Sums_of_three_cubes) or\n[Andrew R. Booker, Andrew V. Sutherland (2020). \"On a question of Mordell.\"](https://arxiv.org/abs/2007.01209)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "ThreeCubes_5",
    "sat": "def sat(nums: List[int], target=633):\n    \"\"\"Given n, find integers a, b, c such that a^3 + b^3 + c^3 = n.\"\"\"\n    assert target % 9 not in [4, 5], \"Hint\"\n    return len(nums) == 3 and sum([i ** 3 for i in nums]) == target",
    "sols": [],
    "module": "number_theory",
    "notes": "Sum of three cubes\n\nGiven `n`, find integers `a`, `b`, `c` such that `a**3 + b**3 + c**3 = n`. This is unsolvable for `n % 9 in {4, 5}`.\nConjectured to be true for all other n, i.e., `n % 9 not in {4, 5}`.\n`a`, `b`, `c` may be positive or negative\n\nSee [wikipedia entry](https://en.wikipedia.org/wiki/Sums_of_three_cubes) or\n[Andrew R. Booker, Andrew V. Sutherland (2020). \"On a question of Mordell.\"](https://arxiv.org/abs/2007.01209)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "ThreeCubes_6",
    "sat": "def sat(nums: List[int], target=732):\n    \"\"\"Given n, find integers a, b, c such that a^3 + b^3 + c^3 = n.\"\"\"\n    assert target % 9 not in [4, 5], \"Hint\"\n    return len(nums) == 3 and sum([i ** 3 for i in nums]) == target",
    "sols": [],
    "module": "number_theory",
    "notes": "Sum of three cubes\n\nGiven `n`, find integers `a`, `b`, `c` such that `a**3 + b**3 + c**3 = n`. This is unsolvable for `n % 9 in {4, 5}`.\nConjectured to be true for all other n, i.e., `n % 9 not in {4, 5}`.\n`a`, `b`, `c` may be positive or negative\n\nSee [wikipedia entry](https://en.wikipedia.org/wiki/Sums_of_three_cubes) or\n[Andrew R. Booker, Andrew V. Sutherland (2020). \"On a question of Mordell.\"](https://arxiv.org/abs/2007.01209)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "ThreeCubes_7",
    "sat": "def sat(nums: List[int], target=921):\n    \"\"\"Given n, find integers a, b, c such that a^3 + b^3 + c^3 = n.\"\"\"\n    assert target % 9 not in [4, 5], \"Hint\"\n    return len(nums) == 3 and sum([i ** 3 for i in nums]) == target",
    "sols": [],
    "module": "number_theory",
    "notes": "Sum of three cubes\n\nGiven `n`, find integers `a`, `b`, `c` such that `a**3 + b**3 + c**3 = n`. This is unsolvable for `n % 9 in {4, 5}`.\nConjectured to be true for all other n, i.e., `n % 9 not in {4, 5}`.\n`a`, `b`, `c` may be positive or negative\n\nSee [wikipedia entry](https://en.wikipedia.org/wiki/Sums_of_three_cubes) or\n[Andrew R. Booker, Andrew V. Sutherland (2020). \"On a question of Mordell.\"](https://arxiv.org/abs/2007.01209)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "ThreeCubes_8",
    "sat": "def sat(nums: List[int], target=975):\n    \"\"\"Given n, find integers a, b, c such that a^3 + b^3 + c^3 = n.\"\"\"\n    assert target % 9 not in [4, 5], \"Hint\"\n    return len(nums) == 3 and sum([i ** 3 for i in nums]) == target",
    "sols": [],
    "module": "number_theory",
    "notes": "Sum of three cubes\n\nGiven `n`, find integers `a`, `b`, `c` such that `a**3 + b**3 + c**3 = n`. This is unsolvable for `n % 9 in {4, 5}`.\nConjectured to be true for all other n, i.e., `n % 9 not in {4, 5}`.\n`a`, `b`, `c` may be positive or negative\n\nSee [wikipedia entry](https://en.wikipedia.org/wiki/Sums_of_three_cubes) or\n[Andrew R. Booker, Andrew V. Sutherland (2020). \"On a question of Mordell.\"](https://arxiv.org/abs/2007.01209)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "ThreeCubes_9",
    "sat": "def sat(nums: List[int], target=0):\n    \"\"\"Given n, find integers a, b, c such that a^3 + b^3 + c^3 = n.\"\"\"\n    assert target % 9 not in [4, 5], \"Hint\"\n    return len(nums) == 3 and sum([i ** 3 for i in nums]) == target",
    "sols": [
      "def sol(target=0):\n    assert target % 9 not in {4, 5}\n    for i in range(20):\n        for j in range(i + 1):\n            for k in range(-20, j + 1):\n                n = i ** 3 + j ** 3 + k ** 3\n                if n == target:\n                    return [i, j, k]\n                if n == -target:\n                    return [-i, -j, -k]"
    ],
    "module": "number_theory",
    "notes": "Sum of three cubes\n\nGiven `n`, find integers `a`, `b`, `c` such that `a**3 + b**3 + c**3 = n`. This is unsolvable for `n % 9 in {4, 5}`.\nConjectured to be true for all other n, i.e., `n % 9 not in {4, 5}`.\n`a`, `b`, `c` may be positive or negative\n\nSee [wikipedia entry](https://en.wikipedia.org/wiki/Sums_of_three_cubes) or\n[Andrew R. Booker, Andrew V. Sutherland (2020). \"On a question of Mordell.\"](https://arxiv.org/abs/2007.01209)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "FourSquares_0",
    "sat": "def sat(nums: List[int], n=12345):\n    \"\"\"Find four integers whose squares sum to n\"\"\"\n    return len(nums) <= 4 and sum(i ** 2 for i in nums) == n",
    "sols": [
      "def sol(n=12345):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\""
    ],
    "module": "number_theory",
    "notes": "Sum of four squares\n\n[Lagrange's Four Square Theorem](https://en.wikipedia.org/w/index.php?title=Lagrange%27s_four-square_theorem)\n\nGiven a non-negative integer `n`, a classic theorem of Lagrange says that `n` can be written as the sum of four\nintegers. The problem here is to find them. This is a nice problem and we give an elementary solution\nthat runs in time \tilde{O}(n),\nwhich is not \"polynomial time\" because it is not polynomial in log(n), the length of n. A poly-log(n)\nalgorithm using quaternions is described in the book:\n[\"Randomized algorithms in number theory\" by Michael O. Rabin and Jeffery O. Shallit (1986)](https://doi.org/10.1002/cpa.3160390713)\n\nThe first half of the problems involve small numbers and the second half involve some numbers up to 50 digits.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "FourSquares_1",
    "sat": "def sat(nums: List[int], n=1):\n    \"\"\"Find four integers whose squares sum to n\"\"\"\n    return len(nums) <= 4 and sum(i ** 2 for i in nums) == n",
    "sols": [
      "def sol(n=1):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\""
    ],
    "module": "number_theory",
    "notes": "Sum of four squares\n\n[Lagrange's Four Square Theorem](https://en.wikipedia.org/w/index.php?title=Lagrange%27s_four-square_theorem)\n\nGiven a non-negative integer `n`, a classic theorem of Lagrange says that `n` can be written as the sum of four\nintegers. The problem here is to find them. This is a nice problem and we give an elementary solution\nthat runs in time \tilde{O}(n),\nwhich is not \"polynomial time\" because it is not polynomial in log(n), the length of n. A poly-log(n)\nalgorithm using quaternions is described in the book:\n[\"Randomized algorithms in number theory\" by Michael O. Rabin and Jeffery O. Shallit (1986)](https://doi.org/10.1002/cpa.3160390713)\n\nThe first half of the problems involve small numbers and the second half involve some numbers up to 50 digits.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "FourSquares_2",
    "sat": "def sat(nums: List[int], n=0):\n    \"\"\"Find four integers whose squares sum to n\"\"\"\n    return len(nums) <= 4 and sum(i ** 2 for i in nums) == n",
    "sols": [
      "def sol(n=0):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\""
    ],
    "module": "number_theory",
    "notes": "Sum of four squares\n\n[Lagrange's Four Square Theorem](https://en.wikipedia.org/w/index.php?title=Lagrange%27s_four-square_theorem)\n\nGiven a non-negative integer `n`, a classic theorem of Lagrange says that `n` can be written as the sum of four\nintegers. The problem here is to find them. This is a nice problem and we give an elementary solution\nthat runs in time \tilde{O}(n),\nwhich is not \"polynomial time\" because it is not polynomial in log(n), the length of n. A poly-log(n)\nalgorithm using quaternions is described in the book:\n[\"Randomized algorithms in number theory\" by Michael O. Rabin and Jeffery O. Shallit (1986)](https://doi.org/10.1002/cpa.3160390713)\n\nThe first half of the problems involve small numbers and the second half involve some numbers up to 50 digits.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "FourSquares_3",
    "sat": "def sat(nums: List[int], n=3):\n    \"\"\"Find four integers whose squares sum to n\"\"\"\n    return len(nums) <= 4 and sum(i ** 2 for i in nums) == n",
    "sols": [
      "def sol(n=3):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\""
    ],
    "module": "number_theory",
    "notes": "Sum of four squares\n\n[Lagrange's Four Square Theorem](https://en.wikipedia.org/w/index.php?title=Lagrange%27s_four-square_theorem)\n\nGiven a non-negative integer `n`, a classic theorem of Lagrange says that `n` can be written as the sum of four\nintegers. The problem here is to find them. This is a nice problem and we give an elementary solution\nthat runs in time \tilde{O}(n),\nwhich is not \"polynomial time\" because it is not polynomial in log(n), the length of n. A poly-log(n)\nalgorithm using quaternions is described in the book:\n[\"Randomized algorithms in number theory\" by Michael O. Rabin and Jeffery O. Shallit (1986)](https://doi.org/10.1002/cpa.3160390713)\n\nThe first half of the problems involve small numbers and the second half involve some numbers up to 50 digits.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "FourSquares_4",
    "sat": "def sat(nums: List[int], n=8):\n    \"\"\"Find four integers whose squares sum to n\"\"\"\n    return len(nums) <= 4 and sum(i ** 2 for i in nums) == n",
    "sols": [
      "def sol(n=8):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\""
    ],
    "module": "number_theory",
    "notes": "Sum of four squares\n\n[Lagrange's Four Square Theorem](https://en.wikipedia.org/w/index.php?title=Lagrange%27s_four-square_theorem)\n\nGiven a non-negative integer `n`, a classic theorem of Lagrange says that `n` can be written as the sum of four\nintegers. The problem here is to find them. This is a nice problem and we give an elementary solution\nthat runs in time \tilde{O}(n),\nwhich is not \"polynomial time\" because it is not polynomial in log(n), the length of n. A poly-log(n)\nalgorithm using quaternions is described in the book:\n[\"Randomized algorithms in number theory\" by Michael O. Rabin and Jeffery O. Shallit (1986)](https://doi.org/10.1002/cpa.3160390713)\n\nThe first half of the problems involve small numbers and the second half involve some numbers up to 50 digits.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "FourSquares_5",
    "sat": "def sat(nums: List[int], n=15):\n    \"\"\"Find four integers whose squares sum to n\"\"\"\n    return len(nums) <= 4 and sum(i ** 2 for i in nums) == n",
    "sols": [
      "def sol(n=15):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\""
    ],
    "module": "number_theory",
    "notes": "Sum of four squares\n\n[Lagrange's Four Square Theorem](https://en.wikipedia.org/w/index.php?title=Lagrange%27s_four-square_theorem)\n\nGiven a non-negative integer `n`, a classic theorem of Lagrange says that `n` can be written as the sum of four\nintegers. The problem here is to find them. This is a nice problem and we give an elementary solution\nthat runs in time \tilde{O}(n),\nwhich is not \"polynomial time\" because it is not polynomial in log(n), the length of n. A poly-log(n)\nalgorithm using quaternions is described in the book:\n[\"Randomized algorithms in number theory\" by Michael O. Rabin and Jeffery O. Shallit (1986)](https://doi.org/10.1002/cpa.3160390713)\n\nThe first half of the problems involve small numbers and the second half involve some numbers up to 50 digits.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "FourSquares_6",
    "sat": "def sat(nums: List[int], n=1321806837666853665854863414407013350963513):\n    \"\"\"Find four integers whose squares sum to n\"\"\"\n    return len(nums) <= 4 and sum(i ** 2 for i in nums) == n",
    "sols": [],
    "module": "number_theory",
    "notes": "Sum of four squares\n\n[Lagrange's Four Square Theorem](https://en.wikipedia.org/w/index.php?title=Lagrange%27s_four-square_theorem)\n\nGiven a non-negative integer `n`, a classic theorem of Lagrange says that `n` can be written as the sum of four\nintegers. The problem here is to find them. This is a nice problem and we give an elementary solution\nthat runs in time \tilde{O}(n),\nwhich is not \"polynomial time\" because it is not polynomial in log(n), the length of n. A poly-log(n)\nalgorithm using quaternions is described in the book:\n[\"Randomized algorithms in number theory\" by Michael O. Rabin and Jeffery O. Shallit (1986)](https://doi.org/10.1002/cpa.3160390713)\n\nThe first half of the problems involve small numbers and the second half involve some numbers up to 50 digits.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "FourSquares_7",
    "sat": "def sat(nums: List[int], n=254723967601711775999551029856500295000994603):\n    \"\"\"Find four integers whose squares sum to n\"\"\"\n    return len(nums) <= 4 and sum(i ** 2 for i in nums) == n",
    "sols": [],
    "module": "number_theory",
    "notes": "Sum of four squares\n\n[Lagrange's Four Square Theorem](https://en.wikipedia.org/w/index.php?title=Lagrange%27s_four-square_theorem)\n\nGiven a non-negative integer `n`, a classic theorem of Lagrange says that `n` can be written as the sum of four\nintegers. The problem here is to find them. This is a nice problem and we give an elementary solution\nthat runs in time \tilde{O}(n),\nwhich is not \"polynomial time\" because it is not polynomial in log(n), the length of n. A poly-log(n)\nalgorithm using quaternions is described in the book:\n[\"Randomized algorithms in number theory\" by Michael O. Rabin and Jeffery O. Shallit (1986)](https://doi.org/10.1002/cpa.3160390713)\n\nThe first half of the problems involve small numbers and the second half involve some numbers up to 50 digits.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "FourSquares_8",
    "sat": "def sat(nums: List[int], n=44623301085226399):\n    \"\"\"Find four integers whose squares sum to n\"\"\"\n    return len(nums) <= 4 and sum(i ** 2 for i in nums) == n",
    "sols": [],
    "module": "number_theory",
    "notes": "Sum of four squares\n\n[Lagrange's Four Square Theorem](https://en.wikipedia.org/w/index.php?title=Lagrange%27s_four-square_theorem)\n\nGiven a non-negative integer `n`, a classic theorem of Lagrange says that `n` can be written as the sum of four\nintegers. The problem here is to find them. This is a nice problem and we give an elementary solution\nthat runs in time \tilde{O}(n),\nwhich is not \"polynomial time\" because it is not polynomial in log(n), the length of n. A poly-log(n)\nalgorithm using quaternions is described in the book:\n[\"Randomized algorithms in number theory\" by Michael O. Rabin and Jeffery O. Shallit (1986)](https://doi.org/10.1002/cpa.3160390713)\n\nThe first half of the problems involve small numbers and the second half involve some numbers up to 50 digits.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "FourSquares_9",
    "sat": "def sat(nums: List[int], n=63672004182928567881896369531):\n    \"\"\"Find four integers whose squares sum to n\"\"\"\n    return len(nums) <= 4 and sum(i ** 2 for i in nums) == n",
    "sols": [],
    "module": "number_theory",
    "notes": "Sum of four squares\n\n[Lagrange's Four Square Theorem](https://en.wikipedia.org/w/index.php?title=Lagrange%27s_four-square_theorem)\n\nGiven a non-negative integer `n`, a classic theorem of Lagrange says that `n` can be written as the sum of four\nintegers. The problem here is to find them. This is a nice problem and we give an elementary solution\nthat runs in time \tilde{O}(n),\nwhich is not \"polynomial time\" because it is not polynomial in log(n), the length of n. A poly-log(n)\nalgorithm using quaternions is described in the book:\n[\"Randomized algorithms in number theory\" by Michael O. Rabin and Jeffery O. Shallit (1986)](https://doi.org/10.1002/cpa.3160390713)\n\nThe first half of the problems involve small numbers and the second half involve some numbers up to 50 digits.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "Factoring_0",
    "sat": "def sat(i: int, n=62710561):\n    \"\"\"Find a non-trivial factor of integer n\"\"\"\n    return 1 < i < n and n % i == 0",
    "sols": [
      "def sol(n=62710561):\n    if n % 2 == 0:\n        return 2\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n\n    assert False, \"problem defined for composite n only\""
    ],
    "module": "number_theory",
    "notes": "[Factoring](https://en.wikipedia.org/w/index.php?title=Integer_factorization) and\n[RSA challenge](https://en.wikipedia.org/w/index.php?title=RSA_numbers)\n\n*See class FermatComposite in codex.py for an easier composite test puzzle*\n\nThe factoring problems require one to find any nontrivial factor of n, which is equivalent to factoring by a\nsimple repetition process. Problems range from small (single-digit n) all the way to the \"RSA challenges\"\nwhich include several *unsolved* factoring problems put out by the RSA company. The challenge was closed in 2007,\nwith hundreds of thousands of dollars in unclaimed prize money for factoring their given numbers. People\ncontinue to work on them, nonetheless, and only the first 22/53 have RSA challenges have been solved thusfar.\n\nFrom Wikipedia:\n\nRSA-2048 has 617 decimal digits (2,048 bits). It is the largest of the RSA numbers and carried the largest\ncash prize for its factorization, $200,000. The RSA-2048 may not be factorizable for many years to come,\nunless considerable advances are made in integer factorization or computational power in the near future.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "Factoring_1",
    "sat": "def sat(i: int, n=16):\n    \"\"\"Find a non-trivial factor of integer n\"\"\"\n    return 1 < i < n and n % i == 0",
    "sols": [
      "def sol(n=16):\n    if n % 2 == 0:\n        return 2\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n\n    assert False, \"problem defined for composite n only\""
    ],
    "module": "number_theory",
    "notes": "[Factoring](https://en.wikipedia.org/w/index.php?title=Integer_factorization) and\n[RSA challenge](https://en.wikipedia.org/w/index.php?title=RSA_numbers)\n\n*See class FermatComposite in codex.py for an easier composite test puzzle*\n\nThe factoring problems require one to find any nontrivial factor of n, which is equivalent to factoring by a\nsimple repetition process. Problems range from small (single-digit n) all the way to the \"RSA challenges\"\nwhich include several *unsolved* factoring problems put out by the RSA company. The challenge was closed in 2007,\nwith hundreds of thousands of dollars in unclaimed prize money for factoring their given numbers. People\ncontinue to work on them, nonetheless, and only the first 22/53 have RSA challenges have been solved thusfar.\n\nFrom Wikipedia:\n\nRSA-2048 has 617 decimal digits (2,048 bits). It is the largest of the RSA numbers and carried the largest\ncash prize for its factorization, $200,000. The RSA-2048 may not be factorizable for many years to come,\nunless considerable advances are made in integer factorization or computational power in the near future.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "Factoring_2",
    "sat": "def sat(i: int, n=1522605027922533360535618378132637429718068114961380688657908494580122963258952897654000350692006139):\n    \"\"\"Find a non-trivial factor of integer n\"\"\"\n    return 1 < i < n and n % i == 0",
    "sols": [],
    "module": "number_theory",
    "notes": "[Factoring](https://en.wikipedia.org/w/index.php?title=Integer_factorization) and\n[RSA challenge](https://en.wikipedia.org/w/index.php?title=RSA_numbers)\n\n*See class FermatComposite in codex.py for an easier composite test puzzle*\n\nThe factoring problems require one to find any nontrivial factor of n, which is equivalent to factoring by a\nsimple repetition process. Problems range from small (single-digit n) all the way to the \"RSA challenges\"\nwhich include several *unsolved* factoring problems put out by the RSA company. The challenge was closed in 2007,\nwith hundreds of thousands of dollars in unclaimed prize money for factoring their given numbers. People\ncontinue to work on them, nonetheless, and only the first 22/53 have RSA challenges have been solved thusfar.\n\nFrom Wikipedia:\n\nRSA-2048 has 617 decimal digits (2,048 bits). It is the largest of the RSA numbers and carried the largest\ncash prize for its factorization, $200,000. The RSA-2048 may not be factorizable for many years to come,\nunless considerable advances are made in integer factorization or computational power in the near future.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "Factoring_3",
    "sat": "def sat(i: int, n=35794234179725868774991807832568455403003778024228226193532908190484670252364677411513516111204504060317568667):\n    \"\"\"Find a non-trivial factor of integer n\"\"\"\n    return 1 < i < n and n % i == 0",
    "sols": [],
    "module": "number_theory",
    "notes": "[Factoring](https://en.wikipedia.org/w/index.php?title=Integer_factorization) and\n[RSA challenge](https://en.wikipedia.org/w/index.php?title=RSA_numbers)\n\n*See class FermatComposite in codex.py for an easier composite test puzzle*\n\nThe factoring problems require one to find any nontrivial factor of n, which is equivalent to factoring by a\nsimple repetition process. Problems range from small (single-digit n) all the way to the \"RSA challenges\"\nwhich include several *unsolved* factoring problems put out by the RSA company. The challenge was closed in 2007,\nwith hundreds of thousands of dollars in unclaimed prize money for factoring their given numbers. People\ncontinue to work on them, nonetheless, and only the first 22/53 have RSA challenges have been solved thusfar.\n\nFrom Wikipedia:\n\nRSA-2048 has 617 decimal digits (2,048 bits). It is the largest of the RSA numbers and carried the largest\ncash prize for its factorization, $200,000. The RSA-2048 may not be factorizable for many years to come,\nunless considerable advances are made in integer factorization or computational power in the near future.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "Factoring_4",
    "sat": "def sat(i: int, n=227010481295437363334259960947493668895875336466084780038173258247009162675779735389791151574049166747880487470296548479):\n    \"\"\"Find a non-trivial factor of integer n\"\"\"\n    return 1 < i < n and n % i == 0",
    "sols": [],
    "module": "number_theory",
    "notes": "[Factoring](https://en.wikipedia.org/w/index.php?title=Integer_factorization) and\n[RSA challenge](https://en.wikipedia.org/w/index.php?title=RSA_numbers)\n\n*See class FermatComposite in codex.py for an easier composite test puzzle*\n\nThe factoring problems require one to find any nontrivial factor of n, which is equivalent to factoring by a\nsimple repetition process. Problems range from small (single-digit n) all the way to the \"RSA challenges\"\nwhich include several *unsolved* factoring problems put out by the RSA company. The challenge was closed in 2007,\nwith hundreds of thousands of dollars in unclaimed prize money for factoring their given numbers. People\ncontinue to work on them, nonetheless, and only the first 22/53 have RSA challenges have been solved thusfar.\n\nFrom Wikipedia:\n\nRSA-2048 has 617 decimal digits (2,048 bits). It is the largest of the RSA numbers and carried the largest\ncash prize for its factorization, $200,000. The RSA-2048 may not be factorizable for many years to come,\nunless considerable advances are made in integer factorization or computational power in the near future.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "Factoring_5",
    "sat": "def sat(i: int, n=114381625757888867669235779976146612010218296721242362562561842935706935245733897830597123563958705058989075147599290026879543541):\n    \"\"\"Find a non-trivial factor of integer n\"\"\"\n    return 1 < i < n and n % i == 0",
    "sols": [],
    "module": "number_theory",
    "notes": "[Factoring](https://en.wikipedia.org/w/index.php?title=Integer_factorization) and\n[RSA challenge](https://en.wikipedia.org/w/index.php?title=RSA_numbers)\n\n*See class FermatComposite in codex.py for an easier composite test puzzle*\n\nThe factoring problems require one to find any nontrivial factor of n, which is equivalent to factoring by a\nsimple repetition process. Problems range from small (single-digit n) all the way to the \"RSA challenges\"\nwhich include several *unsolved* factoring problems put out by the RSA company. The challenge was closed in 2007,\nwith hundreds of thousands of dollars in unclaimed prize money for factoring their given numbers. People\ncontinue to work on them, nonetheless, and only the first 22/53 have RSA challenges have been solved thusfar.\n\nFrom Wikipedia:\n\nRSA-2048 has 617 decimal digits (2,048 bits). It is the largest of the RSA numbers and carried the largest\ncash prize for its factorization, $200,000. The RSA-2048 may not be factorizable for many years to come,\nunless considerable advances are made in integer factorization or computational power in the near future.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "Factoring_6",
    "sat": "def sat(i: int, n=1807082088687404805951656164405905566278102516769401349170127021450056662540244048387341127590812303371781887966563182013214880557):\n    \"\"\"Find a non-trivial factor of integer n\"\"\"\n    return 1 < i < n and n % i == 0",
    "sols": [],
    "module": "number_theory",
    "notes": "[Factoring](https://en.wikipedia.org/w/index.php?title=Integer_factorization) and\n[RSA challenge](https://en.wikipedia.org/w/index.php?title=RSA_numbers)\n\n*See class FermatComposite in codex.py for an easier composite test puzzle*\n\nThe factoring problems require one to find any nontrivial factor of n, which is equivalent to factoring by a\nsimple repetition process. Problems range from small (single-digit n) all the way to the \"RSA challenges\"\nwhich include several *unsolved* factoring problems put out by the RSA company. The challenge was closed in 2007,\nwith hundreds of thousands of dollars in unclaimed prize money for factoring their given numbers. People\ncontinue to work on them, nonetheless, and only the first 22/53 have RSA challenges have been solved thusfar.\n\nFrom Wikipedia:\n\nRSA-2048 has 617 decimal digits (2,048 bits). It is the largest of the RSA numbers and carried the largest\ncash prize for its factorization, $200,000. The RSA-2048 may not be factorizable for many years to come,\nunless considerable advances are made in integer factorization or computational power in the near future.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "Factoring_7",
    "sat": "def sat(i: int, n=21290246318258757547497882016271517497806703963277216278233383215381949984056495911366573853021918316783107387995317230889569230873441936471):\n    \"\"\"Find a non-trivial factor of integer n\"\"\"\n    return 1 < i < n and n % i == 0",
    "sols": [],
    "module": "number_theory",
    "notes": "[Factoring](https://en.wikipedia.org/w/index.php?title=Integer_factorization) and\n[RSA challenge](https://en.wikipedia.org/w/index.php?title=RSA_numbers)\n\n*See class FermatComposite in codex.py for an easier composite test puzzle*\n\nThe factoring problems require one to find any nontrivial factor of n, which is equivalent to factoring by a\nsimple repetition process. Problems range from small (single-digit n) all the way to the \"RSA challenges\"\nwhich include several *unsolved* factoring problems put out by the RSA company. The challenge was closed in 2007,\nwith hundreds of thousands of dollars in unclaimed prize money for factoring their given numbers. People\ncontinue to work on them, nonetheless, and only the first 22/53 have RSA challenges have been solved thusfar.\n\nFrom Wikipedia:\n\nRSA-2048 has 617 decimal digits (2,048 bits). It is the largest of the RSA numbers and carried the largest\ncash prize for its factorization, $200,000. The RSA-2048 may not be factorizable for many years to come,\nunless considerable advances are made in integer factorization or computational power in the near future.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "Factoring_8",
    "sat": "def sat(i: int, n=155089812478348440509606754370011861770654545830995430655466945774312632703463465954363335027577729025391453996787414027003501631772186840890795964683):\n    \"\"\"Find a non-trivial factor of integer n\"\"\"\n    return 1 < i < n and n % i == 0",
    "sols": [],
    "module": "number_theory",
    "notes": "[Factoring](https://en.wikipedia.org/w/index.php?title=Integer_factorization) and\n[RSA challenge](https://en.wikipedia.org/w/index.php?title=RSA_numbers)\n\n*See class FermatComposite in codex.py for an easier composite test puzzle*\n\nThe factoring problems require one to find any nontrivial factor of n, which is equivalent to factoring by a\nsimple repetition process. Problems range from small (single-digit n) all the way to the \"RSA challenges\"\nwhich include several *unsolved* factoring problems put out by the RSA company. The challenge was closed in 2007,\nwith hundreds of thousands of dollars in unclaimed prize money for factoring their given numbers. People\ncontinue to work on them, nonetheless, and only the first 22/53 have RSA challenges have been solved thusfar.\n\nFrom Wikipedia:\n\nRSA-2048 has 617 decimal digits (2,048 bits). It is the largest of the RSA numbers and carried the largest\ncash prize for its factorization, $200,000. The RSA-2048 may not be factorizable for many years to come,\nunless considerable advances are made in integer factorization or computational power in the near future.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "Factoring_9",
    "sat": "def sat(i: int, n=10941738641570527421809707322040357612003732945449205990913842131476349984288934784717997257891267332497625752899781833797076537244027146743531593354333897):\n    \"\"\"Find a non-trivial factor of integer n\"\"\"\n    return 1 < i < n and n % i == 0",
    "sols": [],
    "module": "number_theory",
    "notes": "[Factoring](https://en.wikipedia.org/w/index.php?title=Integer_factorization) and\n[RSA challenge](https://en.wikipedia.org/w/index.php?title=RSA_numbers)\n\n*See class FermatComposite in codex.py for an easier composite test puzzle*\n\nThe factoring problems require one to find any nontrivial factor of n, which is equivalent to factoring by a\nsimple repetition process. Problems range from small (single-digit n) all the way to the \"RSA challenges\"\nwhich include several *unsolved* factoring problems put out by the RSA company. The challenge was closed in 2007,\nwith hundreds of thousands of dollars in unclaimed prize money for factoring their given numbers. People\ncontinue to work on them, nonetheless, and only the first 22/53 have RSA challenges have been solved thusfar.\n\nFrom Wikipedia:\n\nRSA-2048 has 617 decimal digits (2,048 bits). It is the largest of the RSA numbers and carried the largest\ncash prize for its factorization, $200,000. The RSA-2048 may not be factorizable for many years to come,\nunless considerable advances are made in integer factorization or computational power in the near future.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "DiscreteLog_0",
    "sat": "def sat(n: int, g=3, p=17, t=13):\n    \"\"\"Find n such that g^n is congruent to t mod n\"\"\"\n    return pow(g, n, p) == t",
    "sols": [
      "def sol(g=3, p=17, t=13):\n    for n in range(p):\n        if pow(g, n, p) == t:\n            return n\n    assert False, f\"unsolvable discrete log problem g={g}, t={t}, p={p}\""
    ],
    "module": "number_theory",
    "notes": "Discrete Log\n\nThe discrete logarithm problem is (given `g`, `t`, and `p`) to find n such that:\n\n`g ** n % p == t`\n\nFrom [Wikipedia article](https://en.wikipedia.org/w/index.php?title=Discrete_logarithm_records):\n\n\"Several important algorithms in public-key cryptography base their security on the assumption\nthat the discrete logarithm problem over carefully chosen problems has no efficient solution.\"\n\nThe problem is *unsolved* in the sense that no known polynomial-time algorithm has been found.\n\nWe include McCurley's discrete log challenge from\n[Weber D., Denny T. (1998) \"The solution of McCurley's discrete log challenge.\"](https://link.springer.com/content/pdf/10.1007/BFb0055747.pdf)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "DiscreteLog_1",
    "sat": "def sat(n: int, g=7, p=204706270385532838059744535166974274803608394340123459695798674591526591372685229510652847339705797622075505069831043486651682279, t=127402180119973946824269244334322849749382042586931621654557735290322914679095998681860978813046595166455458144280588076766033781):\n    \"\"\"Find n such that g^n is congruent to t mod n\"\"\"\n    return pow(g, n, p) == t",
    "sols": [],
    "module": "number_theory",
    "notes": "Discrete Log\n\nThe discrete logarithm problem is (given `g`, `t`, and `p`) to find n such that:\n\n`g ** n % p == t`\n\nFrom [Wikipedia article](https://en.wikipedia.org/w/index.php?title=Discrete_logarithm_records):\n\n\"Several important algorithms in public-key cryptography base their security on the assumption\nthat the discrete logarithm problem over carefully chosen problems has no efficient solution.\"\n\nThe problem is *unsolved* in the sense that no known polynomial-time algorithm has been found.\n\nWe include McCurley's discrete log challenge from\n[Weber D., Denny T. (1998) \"The solution of McCurley's discrete log challenge.\"](https://link.springer.com/content/pdf/10.1007/BFb0055747.pdf)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "DiscreteLog_2",
    "sat": "def sat(n: int, g=13, p=21, t=1):\n    \"\"\"Find n such that g^n is congruent to t mod n\"\"\"\n    return pow(g, n, p) == t",
    "sols": [
      "def sol(g=13, p=21, t=1):\n    for n in range(p):\n        if pow(g, n, p) == t:\n            return n\n    assert False, f\"unsolvable discrete log problem g={g}, t={t}, p={p}\""
    ],
    "module": "number_theory",
    "notes": "Discrete Log\n\nThe discrete logarithm problem is (given `g`, `t`, and `p`) to find n such that:\n\n`g ** n % p == t`\n\nFrom [Wikipedia article](https://en.wikipedia.org/w/index.php?title=Discrete_logarithm_records):\n\n\"Several important algorithms in public-key cryptography base their security on the assumption\nthat the discrete logarithm problem over carefully chosen problems has no efficient solution.\"\n\nThe problem is *unsolved* in the sense that no known polynomial-time algorithm has been found.\n\nWe include McCurley's discrete log challenge from\n[Weber D., Denny T. (1998) \"The solution of McCurley's discrete log challenge.\"](https://link.springer.com/content/pdf/10.1007/BFb0055747.pdf)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "DiscreteLog_3",
    "sat": "def sat(n: int, g=101873924449108026052, p=576036946901458671597, t=330515716425197141833):\n    \"\"\"Find n such that g^n is congruent to t mod n\"\"\"\n    return pow(g, n, p) == t",
    "sols": [],
    "module": "number_theory",
    "notes": "Discrete Log\n\nThe discrete logarithm problem is (given `g`, `t`, and `p`) to find n such that:\n\n`g ** n % p == t`\n\nFrom [Wikipedia article](https://en.wikipedia.org/w/index.php?title=Discrete_logarithm_records):\n\n\"Several important algorithms in public-key cryptography base their security on the assumption\nthat the discrete logarithm problem over carefully chosen problems has no efficient solution.\"\n\nThe problem is *unsolved* in the sense that no known polynomial-time algorithm has been found.\n\nWe include McCurley's discrete log challenge from\n[Weber D., Denny T. (1998) \"The solution of McCurley's discrete log challenge.\"](https://link.springer.com/content/pdf/10.1007/BFb0055747.pdf)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "DiscreteLog_4",
    "sat": "def sat(n: int, g=1696881788, p=8006168143, t=7111327686):\n    \"\"\"Find n such that g^n is congruent to t mod n\"\"\"\n    return pow(g, n, p) == t",
    "sols": [],
    "module": "number_theory",
    "notes": "Discrete Log\n\nThe discrete logarithm problem is (given `g`, `t`, and `p`) to find n such that:\n\n`g ** n % p == t`\n\nFrom [Wikipedia article](https://en.wikipedia.org/w/index.php?title=Discrete_logarithm_records):\n\n\"Several important algorithms in public-key cryptography base their security on the assumption\nthat the discrete logarithm problem over carefully chosen problems has no efficient solution.\"\n\nThe problem is *unsolved* in the sense that no known polynomial-time algorithm has been found.\n\nWe include McCurley's discrete log challenge from\n[Weber D., Denny T. (1998) \"The solution of McCurley's discrete log challenge.\"](https://link.springer.com/content/pdf/10.1007/BFb0055747.pdf)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "DiscreteLog_5",
    "sat": "def sat(n: int, g=165501052943003462970, p=238555574298978772959, t=135765621915673720437):\n    \"\"\"Find n such that g^n is congruent to t mod n\"\"\"\n    return pow(g, n, p) == t",
    "sols": [],
    "module": "number_theory",
    "notes": "Discrete Log\n\nThe discrete logarithm problem is (given `g`, `t`, and `p`) to find n such that:\n\n`g ** n % p == t`\n\nFrom [Wikipedia article](https://en.wikipedia.org/w/index.php?title=Discrete_logarithm_records):\n\n\"Several important algorithms in public-key cryptography base their security on the assumption\nthat the discrete logarithm problem over carefully chosen problems has no efficient solution.\"\n\nThe problem is *unsolved* in the sense that no known polynomial-time algorithm has been found.\n\nWe include McCurley's discrete log challenge from\n[Weber D., Denny T. (1998) \"The solution of McCurley's discrete log challenge.\"](https://link.springer.com/content/pdf/10.1007/BFb0055747.pdf)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "DiscreteLog_6",
    "sat": "def sat(n: int, g=33209740069076319378099, p=95704125926541931977235, t=90713628869078037590764):\n    \"\"\"Find n such that g^n is congruent to t mod n\"\"\"\n    return pow(g, n, p) == t",
    "sols": [],
    "module": "number_theory",
    "notes": "Discrete Log\n\nThe discrete logarithm problem is (given `g`, `t`, and `p`) to find n such that:\n\n`g ** n % p == t`\n\nFrom [Wikipedia article](https://en.wikipedia.org/w/index.php?title=Discrete_logarithm_records):\n\n\"Several important algorithms in public-key cryptography base their security on the assumption\nthat the discrete logarithm problem over carefully chosen problems has no efficient solution.\"\n\nThe problem is *unsolved* in the sense that no known polynomial-time algorithm has been found.\n\nWe include McCurley's discrete log challenge from\n[Weber D., Denny T. (1998) \"The solution of McCurley's discrete log challenge.\"](https://link.springer.com/content/pdf/10.1007/BFb0055747.pdf)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "DiscreteLog_7",
    "sat": "def sat(n: int, g=4, p=11, t=4):\n    \"\"\"Find n such that g^n is congruent to t mod n\"\"\"\n    return pow(g, n, p) == t",
    "sols": [
      "def sol(g=4, p=11, t=4):\n    for n in range(p):\n        if pow(g, n, p) == t:\n            return n\n    assert False, f\"unsolvable discrete log problem g={g}, t={t}, p={p}\""
    ],
    "module": "number_theory",
    "notes": "Discrete Log\n\nThe discrete logarithm problem is (given `g`, `t`, and `p`) to find n such that:\n\n`g ** n % p == t`\n\nFrom [Wikipedia article](https://en.wikipedia.org/w/index.php?title=Discrete_logarithm_records):\n\n\"Several important algorithms in public-key cryptography base their security on the assumption\nthat the discrete logarithm problem over carefully chosen problems has no efficient solution.\"\n\nThe problem is *unsolved* in the sense that no known polynomial-time algorithm has been found.\n\nWe include McCurley's discrete log challenge from\n[Weber D., Denny T. (1998) \"The solution of McCurley's discrete log challenge.\"](https://link.springer.com/content/pdf/10.1007/BFb0055747.pdf)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "DiscreteLog_8",
    "sat": "def sat(n: int, g=34809141888, p=37747830971, t=23954486348):\n    \"\"\"Find n such that g^n is congruent to t mod n\"\"\"\n    return pow(g, n, p) == t",
    "sols": [],
    "module": "number_theory",
    "notes": "Discrete Log\n\nThe discrete logarithm problem is (given `g`, `t`, and `p`) to find n such that:\n\n`g ** n % p == t`\n\nFrom [Wikipedia article](https://en.wikipedia.org/w/index.php?title=Discrete_logarithm_records):\n\n\"Several important algorithms in public-key cryptography base their security on the assumption\nthat the discrete logarithm problem over carefully chosen problems has no efficient solution.\"\n\nThe problem is *unsolved* in the sense that no known polynomial-time algorithm has been found.\n\nWe include McCurley's discrete log challenge from\n[Weber D., Denny T. (1998) \"The solution of McCurley's discrete log challenge.\"](https://link.springer.com/content/pdf/10.1007/BFb0055747.pdf)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "DiscreteLog_9",
    "sat": "def sat(n: int, g=2699298744052143, p=4692531698178911, t=3657439654587029):\n    \"\"\"Find n such that g^n is congruent to t mod n\"\"\"\n    return pow(g, n, p) == t",
    "sols": [],
    "module": "number_theory",
    "notes": "Discrete Log\n\nThe discrete logarithm problem is (given `g`, `t`, and `p`) to find n such that:\n\n`g ** n % p == t`\n\nFrom [Wikipedia article](https://en.wikipedia.org/w/index.php?title=Discrete_logarithm_records):\n\n\"Several important algorithms in public-key cryptography base their security on the assumption\nthat the discrete logarithm problem over carefully chosen problems has no efficient solution.\"\n\nThe problem is *unsolved* in the sense that no known polynomial-time algorithm has been found.\n\nWe include McCurley's discrete log challenge from\n[Weber D., Denny T. (1998) \"The solution of McCurley's discrete log challenge.\"](https://link.springer.com/content/pdf/10.1007/BFb0055747.pdf)",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "GCD17_0",
    "sat": "def sat(n: int):\n    \"\"\"Find n for which gcd(n^17+9, (n+1)^17+9) != 1\"\"\"\n    i = n ** 17 + 9\n    j = (n + 1) ** 17 + 9\n\n    while i != 0:  # compute gcd using Euclid's algorithm\n        (i, j) = (j % i, i)\n\n    return n >= 0 and j != 1",
    "sols": [],
    "module": "number_theory",
    "notes": "According to [this article](https://primes.utm.edu/glossary/page.php?sort=LawOfSmall), the smallest\nsolution is 8424432925592889329288197322308900672459420460792433",
    "taint_date": "2021-4-26",
    "weight": 0.0625
  },
  {
    "name": "Znam_0",
    "sat": "def sat(li: List[int], k=5):\n    \"\"\"Find k positive integers such that each integer divides (the product of the rest plus 1).\"\"\"\n    def prod(nums):\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n\n    return min(li) > 1 and len(li) == k and all((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k))",
    "sols": [
      "def sol(k=5):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans"
    ],
    "module": "number_theory",
    "notes": "[Znam's Problem](https://en.wikipedia.org/wiki/Zn%C3%A1m%27s_problem)\n\nFor example [2, 3, 7, 47, 395] is a solution for k=5",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "Znam_1",
    "sat": "def sat(li: List[int], k=6):\n    \"\"\"Find k positive integers such that each integer divides (the product of the rest plus 1).\"\"\"\n    def prod(nums):\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n\n    return min(li) > 1 and len(li) == k and all((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k))",
    "sols": [
      "def sol(k=6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans"
    ],
    "module": "number_theory",
    "notes": "[Znam's Problem](https://en.wikipedia.org/wiki/Zn%C3%A1m%27s_problem)\n\nFor example [2, 3, 7, 47, 395] is a solution for k=5",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "Znam_2",
    "sat": "def sat(li: List[int], k=7):\n    \"\"\"Find k positive integers such that each integer divides (the product of the rest plus 1).\"\"\"\n    def prod(nums):\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n\n    return min(li) > 1 and len(li) == k and all((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k))",
    "sols": [
      "def sol(k=7):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans"
    ],
    "module": "number_theory",
    "notes": "[Znam's Problem](https://en.wikipedia.org/wiki/Zn%C3%A1m%27s_problem)\n\nFor example [2, 3, 7, 47, 395] is a solution for k=5",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "Znam_3",
    "sat": "def sat(li: List[int], k=8):\n    \"\"\"Find k positive integers such that each integer divides (the product of the rest plus 1).\"\"\"\n    def prod(nums):\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n\n    return min(li) > 1 and len(li) == k and all((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k))",
    "sols": [
      "def sol(k=8):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans"
    ],
    "module": "number_theory",
    "notes": "[Znam's Problem](https://en.wikipedia.org/wiki/Zn%C3%A1m%27s_problem)\n\nFor example [2, 3, 7, 47, 395] is a solution for k=5",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "Znam_4",
    "sat": "def sat(li: List[int], k=9):\n    \"\"\"Find k positive integers such that each integer divides (the product of the rest plus 1).\"\"\"\n    def prod(nums):\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n\n    return min(li) > 1 and len(li) == k and all((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k))",
    "sols": [
      "def sol(k=9):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans"
    ],
    "module": "number_theory",
    "notes": "[Znam's Problem](https://en.wikipedia.org/wiki/Zn%C3%A1m%27s_problem)\n\nFor example [2, 3, 7, 47, 395] is a solution for k=5",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "Znam_5",
    "sat": "def sat(li: List[int], k=10):\n    \"\"\"Find k positive integers such that each integer divides (the product of the rest plus 1).\"\"\"\n    def prod(nums):\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n\n    return min(li) > 1 and len(li) == k and all((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k))",
    "sols": [
      "def sol(k=10):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans"
    ],
    "module": "number_theory",
    "notes": "[Znam's Problem](https://en.wikipedia.org/wiki/Zn%C3%A1m%27s_problem)\n\nFor example [2, 3, 7, 47, 395] is a solution for k=5",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "Znam_6",
    "sat": "def sat(li: List[int], k=11):\n    \"\"\"Find k positive integers such that each integer divides (the product of the rest plus 1).\"\"\"\n    def prod(nums):\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n\n    return min(li) > 1 and len(li) == k and all((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k))",
    "sols": [
      "def sol(k=11):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans"
    ],
    "module": "number_theory",
    "notes": "[Znam's Problem](https://en.wikipedia.org/wiki/Zn%C3%A1m%27s_problem)\n\nFor example [2, 3, 7, 47, 395] is a solution for k=5",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "Znam_7",
    "sat": "def sat(li: List[int], k=12):\n    \"\"\"Find k positive integers such that each integer divides (the product of the rest plus 1).\"\"\"\n    def prod(nums):\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n\n    return min(li) > 1 and len(li) == k and all((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k))",
    "sols": [
      "def sol(k=12):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans"
    ],
    "module": "number_theory",
    "notes": "[Znam's Problem](https://en.wikipedia.org/wiki/Zn%C3%A1m%27s_problem)\n\nFor example [2, 3, 7, 47, 395] is a solution for k=5",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "Znam_8",
    "sat": "def sat(li: List[int], k=13):\n    \"\"\"Find k positive integers such that each integer divides (the product of the rest plus 1).\"\"\"\n    def prod(nums):\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n\n    return min(li) > 1 and len(li) == k and all((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k))",
    "sols": [
      "def sol(k=13):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans"
    ],
    "module": "number_theory",
    "notes": "[Znam's Problem](https://en.wikipedia.org/wiki/Zn%C3%A1m%27s_problem)\n\nFor example [2, 3, 7, 47, 395] is a solution for k=5",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "Znam_9",
    "sat": "def sat(li: List[int], k=14):\n    \"\"\"Find k positive integers such that each integer divides (the product of the rest plus 1).\"\"\"\n    def prod(nums):\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n\n    return min(li) > 1 and len(li) == k and all((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k))",
    "sols": [
      "def sol(k=14):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans"
    ],
    "module": "number_theory",
    "notes": "[Znam's Problem](https://en.wikipedia.org/wiki/Zn%C3%A1m%27s_problem)\n\nFor example [2, 3, 7, 47, 395] is a solution for k=5",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "CollatzCycleUnsolved_0",
    "sat": "def sat(n: int):\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find n > 4 which is part of a cycle of this process\n    \"\"\"\n    m = n\n    while n > 4:\n        n = 3 * n + 1 if n % 2 else n // 2\n        if n == m:\n            return True",
    "sols": [],
    "module": "number_theory",
    "notes": "Collatz Conjecture\n\nA solution to this problem would disprove the *Collatz Conjecture*, also called the *3n + 1 problem*,\nas well as the *Generalized Collatz Conjecture* (see the next problem).\nAccording to the [Wikipedia article](https://en.wikipedia.org/wiki/Collatz_conjecture):\n> Paul Erdos said about the Collatz conjecture: \"Mathematics may not be ready for such problems.\"\n> He also offered US$500 for its solution. Jeffrey Lagarias stated in 2010 that the Collatz conjecture\n> \"is an extraordinarily difficult problem, completely out of reach of present day mathematics.\"\n\nConsider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\n\nThe conjecture is to that all `n > 0` eventually reach `n=1`. If this conjecture is false, then\nthere is either a cycle or a sequence that increases without bound. This problem seeks a cycle.",
    "taint_date": "2021-4-26",
    "weight": 0.0625
  },
  {
    "name": "CollatzGeneralizedUnsolved_0",
    "sat": "def sat(start: int):\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find n which is part of a cycle of this process that has |n| > 1000\n    \"\"\"\n    n = start  # could be positive or negative ...\n    while abs(n) > 1000:\n        n = 3 * n + 1 if n % 2 else n // 2\n        if n == start:\n            return True",
    "sols": [],
    "module": "number_theory",
    "notes": "Generalized Collatz Conjecture\n\nThis version, permits negative n and seek a cycle with a number of magnitude greater than 1000,\nwhich would disprove the Generalized conjecture that states that the only cycles are the known 5 cycles\n(which don't have positive integers).\n\nSee the [Wikipedia article](https://en.wikipedia.org/wiki/Collatz_conjecture)",
    "taint_date": "2021-4-26",
    "weight": 0.0625
  },
  {
    "name": "CollatzDelay_0",
    "sat": "def sat(n: int, t=100, upper=10):\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper",
    "sols": [
      "def sol(t=100, upper=10):  # Faster solution for simultaneously solving multiple problems is of course possible\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)"
    ],
    "module": "number_theory",
    "notes": "Collatz Delay\n\nConsider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n\n\nFor instance,\nthe number `n=9780657630` takes 1,132 steps and the number `n=93,571,393,692,802,302` takes\n2,091 steps, according to the [Wikipedia article](https://en.wikipedia.org/wiki/Collatz_conjecture)\n\nNow, this problem can be solved trivially by taking exponentially large `n = 2 ** t` so we also bound the\nnumber of bits of the solution to be upper.\n\nSee [this webpage](http://www.ericr.nl/wondrous/delrecs.html) for up-to-date records.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "CollatzDelay_1",
    "sat": "def sat(n: int, t=1000, upper=150):\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper",
    "sols": [],
    "module": "number_theory",
    "notes": "Collatz Delay\n\nConsider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n\n\nFor instance,\nthe number `n=9780657630` takes 1,132 steps and the number `n=93,571,393,692,802,302` takes\n2,091 steps, according to the [Wikipedia article](https://en.wikipedia.org/wiki/Collatz_conjecture)\n\nNow, this problem can be solved trivially by taking exponentially large `n = 2 ** t` so we also bound the\nnumber of bits of the solution to be upper.\n\nSee [this webpage](http://www.ericr.nl/wondrous/delrecs.html) for up-to-date records.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "CollatzDelay_2",
    "sat": "def sat(n: int, t=2000, upper=206):\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper",
    "sols": [],
    "module": "number_theory",
    "notes": "Collatz Delay\n\nConsider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n\n\nFor instance,\nthe number `n=9780657630` takes 1,132 steps and the number `n=93,571,393,692,802,302` takes\n2,091 steps, according to the [Wikipedia article](https://en.wikipedia.org/wiki/Collatz_conjecture)\n\nNow, this problem can be solved trivially by taking exponentially large `n = 2 ** t` so we also bound the\nnumber of bits of the solution to be upper.\n\nSee [this webpage](http://www.ericr.nl/wondrous/delrecs.html) for up-to-date records.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "CollatzDelay_3",
    "sat": "def sat(n: int, t=2283, upper=238):\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper",
    "sols": [],
    "module": "number_theory",
    "notes": "Collatz Delay\n\nConsider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n\n\nFor instance,\nthe number `n=9780657630` takes 1,132 steps and the number `n=93,571,393,692,802,302` takes\n2,091 steps, according to the [Wikipedia article](https://en.wikipedia.org/wiki/Collatz_conjecture)\n\nNow, this problem can be solved trivially by taking exponentially large `n = 2 ** t` so we also bound the\nnumber of bits of the solution to be upper.\n\nSee [this webpage](http://www.ericr.nl/wondrous/delrecs.html) for up-to-date records.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "CollatzDelay_4",
    "sat": "def sat(n: int, t=2337, upper=230):\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper",
    "sols": [],
    "module": "number_theory",
    "notes": "Collatz Delay\n\nConsider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n\n\nFor instance,\nthe number `n=9780657630` takes 1,132 steps and the number `n=93,571,393,692,802,302` takes\n2,091 steps, according to the [Wikipedia article](https://en.wikipedia.org/wiki/Collatz_conjecture)\n\nNow, this problem can be solved trivially by taking exponentially large `n = 2 ** t` so we also bound the\nnumber of bits of the solution to be upper.\n\nSee [this webpage](http://www.ericr.nl/wondrous/delrecs.html) for up-to-date records.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "CollatzDelay_5",
    "sat": "def sat(n: int, t=2350, upper=193):\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper",
    "sols": [],
    "module": "number_theory",
    "notes": "Collatz Delay\n\nConsider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n\n\nFor instance,\nthe number `n=9780657630` takes 1,132 steps and the number `n=93,571,393,692,802,302` takes\n2,091 steps, according to the [Wikipedia article](https://en.wikipedia.org/wiki/Collatz_conjecture)\n\nNow, this problem can be solved trivially by taking exponentially large `n = 2 ** t` so we also bound the\nnumber of bits of the solution to be upper.\n\nSee [this webpage](http://www.ericr.nl/wondrous/delrecs.html) for up-to-date records.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "CollatzDelay_6",
    "sat": "def sat(n: int, t=2500, upper=207):\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper",
    "sols": [],
    "module": "number_theory",
    "notes": "Collatz Delay\n\nConsider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n\n\nFor instance,\nthe number `n=9780657630` takes 1,132 steps and the number `n=93,571,393,692,802,302` takes\n2,091 steps, according to the [Wikipedia article](https://en.wikipedia.org/wiki/Collatz_conjecture)\n\nNow, this problem can be solved trivially by taking exponentially large `n = 2 ** t` so we also bound the\nnumber of bits of the solution to be upper.\n\nSee [this webpage](http://www.ericr.nl/wondrous/delrecs.html) for up-to-date records.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "CollatzDelay_7",
    "sat": "def sat(n: int, t=3000, upper=278):\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper",
    "sols": [],
    "module": "number_theory",
    "notes": "Collatz Delay\n\nConsider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n\n\nFor instance,\nthe number `n=9780657630` takes 1,132 steps and the number `n=93,571,393,692,802,302` takes\n2,091 steps, according to the [Wikipedia article](https://en.wikipedia.org/wiki/Collatz_conjecture)\n\nNow, this problem can be solved trivially by taking exponentially large `n = 2 ** t` so we also bound the\nnumber of bits of the solution to be upper.\n\nSee [this webpage](http://www.ericr.nl/wondrous/delrecs.html) for up-to-date records.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "CollatzDelay_8",
    "sat": "def sat(n: int, t=4000, upper=351):\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper",
    "sols": [],
    "module": "number_theory",
    "notes": "Collatz Delay\n\nConsider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n\n\nFor instance,\nthe number `n=9780657630` takes 1,132 steps and the number `n=93,571,393,692,802,302` takes\n2,091 steps, according to the [Wikipedia article](https://en.wikipedia.org/wiki/Collatz_conjecture)\n\nNow, this problem can be solved trivially by taking exponentially large `n = 2 ** t` so we also bound the\nnumber of bits of the solution to be upper.\n\nSee [this webpage](http://www.ericr.nl/wondrous/delrecs.html) for up-to-date records.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "CollatzDelay_9",
    "sat": "def sat(n: int, t=0, upper=75):\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper",
    "sols": [
      "def sol(t=0, upper=75):  # Faster solution for simultaneously solving multiple problems is of course possible\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)"
    ],
    "module": "number_theory",
    "notes": "Collatz Delay\n\nConsider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n\n\nFor instance,\nthe number `n=9780657630` takes 1,132 steps and the number `n=93,571,393,692,802,302` takes\n2,091 steps, according to the [Wikipedia article](https://en.wikipedia.org/wiki/Collatz_conjecture)\n\nNow, this problem can be solved trivially by taking exponentially large `n = 2 ** t` so we also bound the\nnumber of bits of the solution to be upper.\n\nSee [this webpage](http://www.ericr.nl/wondrous/delrecs.html) for up-to-date records.",
    "taint_date": "2021-4-26",
    "weight": 0.00625
  },
  {
    "name": "Lehmer_0",
    "sat": "def sat(n: int):\n    \"\"\"Find n  such that 2^n mod n = 3\"\"\"\n    return pow(2, n, n) == 3",
    "sols": [
      "def sol():\n    return 4700063497"
    ],
    "module": "number_theory",
    "notes": "Lehmer puzzle\n\nAccording to [The Strong Law of Large Numbers](https://doi.org/10.2307/2322249) Richard K. Guy states that\n    D. H. & Emma Lehmer discovered that 2^n = 3 (mod n) for n = 4700063497,\n    but for no smaller n > 1",
    "taint_date": "2021-4-26",
    "weight": 0.0625
  },
  {
    "name": "BirthdayParadox_0",
    "sat": "def sat(n: int, year_len=365):\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    prob = 1.0\n    for i in range(n):\n        prob *= (year_len - i) / year_len\n    return (prob - 0.5) ** 2 <= 1/year_len",
    "sols": [
      "def sol(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability",
    "notes": "Adaptation of the classic\n[Birthday Problem](https://en.wikipedia.org/wiki/Birthday_problem (Mathematical Problems category)).\n\nThe year length is year_len (365 is earth, while Neptune year is 60,182).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BirthdayParadox_1",
    "sat": "def sat(n: int, year_len=60182):\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    prob = 1.0\n    for i in range(n):\n        prob *= (year_len - i) / year_len\n    return (prob - 0.5) ** 2 <= 1/year_len",
    "sols": [
      "def sol(year_len=60182):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability",
    "notes": "Adaptation of the classic\n[Birthday Problem](https://en.wikipedia.org/wiki/Birthday_problem (Mathematical Problems category)).\n\nThe year length is year_len (365 is earth, while Neptune year is 60,182).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BirthdayParadox_2",
    "sat": "def sat(n: int, year_len=2):\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    prob = 1.0\n    for i in range(n):\n        prob *= (year_len - i) / year_len\n    return (prob - 0.5) ** 2 <= 1/year_len",
    "sols": [
      "def sol(year_len=2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability",
    "notes": "Adaptation of the classic\n[Birthday Problem](https://en.wikipedia.org/wiki/Birthday_problem (Mathematical Problems category)).\n\nThe year length is year_len (365 is earth, while Neptune year is 60,182).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BirthdayParadox_3",
    "sat": "def sat(n: int, year_len=3):\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    prob = 1.0\n    for i in range(n):\n        prob *= (year_len - i) / year_len\n    return (prob - 0.5) ** 2 <= 1/year_len",
    "sols": [
      "def sol(year_len=3):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability",
    "notes": "Adaptation of the classic\n[Birthday Problem](https://en.wikipedia.org/wiki/Birthday_problem (Mathematical Problems category)).\n\nThe year length is year_len (365 is earth, while Neptune year is 60,182).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BirthdayParadox_4",
    "sat": "def sat(n: int, year_len=4):\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    prob = 1.0\n    for i in range(n):\n        prob *= (year_len - i) / year_len\n    return (prob - 0.5) ** 2 <= 1/year_len",
    "sols": [
      "def sol(year_len=4):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability",
    "notes": "Adaptation of the classic\n[Birthday Problem](https://en.wikipedia.org/wiki/Birthday_problem (Mathematical Problems category)).\n\nThe year length is year_len (365 is earth, while Neptune year is 60,182).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BirthdayParadox_5",
    "sat": "def sat(n: int, year_len=5):\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    prob = 1.0\n    for i in range(n):\n        prob *= (year_len - i) / year_len\n    return (prob - 0.5) ** 2 <= 1/year_len",
    "sols": [
      "def sol(year_len=5):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability",
    "notes": "Adaptation of the classic\n[Birthday Problem](https://en.wikipedia.org/wiki/Birthday_problem (Mathematical Problems category)).\n\nThe year length is year_len (365 is earth, while Neptune year is 60,182).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BirthdayParadox_6",
    "sat": "def sat(n: int, year_len=6):\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    prob = 1.0\n    for i in range(n):\n        prob *= (year_len - i) / year_len\n    return (prob - 0.5) ** 2 <= 1/year_len",
    "sols": [
      "def sol(year_len=6):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability",
    "notes": "Adaptation of the classic\n[Birthday Problem](https://en.wikipedia.org/wiki/Birthday_problem (Mathematical Problems category)).\n\nThe year length is year_len (365 is earth, while Neptune year is 60,182).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BirthdayParadox_7",
    "sat": "def sat(n: int, year_len=7):\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    prob = 1.0\n    for i in range(n):\n        prob *= (year_len - i) / year_len\n    return (prob - 0.5) ** 2 <= 1/year_len",
    "sols": [
      "def sol(year_len=7):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability",
    "notes": "Adaptation of the classic\n[Birthday Problem](https://en.wikipedia.org/wiki/Birthday_problem (Mathematical Problems category)).\n\nThe year length is year_len (365 is earth, while Neptune year is 60,182).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BirthdayParadox_8",
    "sat": "def sat(n: int, year_len=8):\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    prob = 1.0\n    for i in range(n):\n        prob *= (year_len - i) / year_len\n    return (prob - 0.5) ** 2 <= 1/year_len",
    "sols": [
      "def sol(year_len=8):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability",
    "notes": "Adaptation of the classic\n[Birthday Problem](https://en.wikipedia.org/wiki/Birthday_problem (Mathematical Problems category)).\n\nThe year length is year_len (365 is earth, while Neptune year is 60,182).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BirthdayParadox_9",
    "sat": "def sat(n: int, year_len=9):\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    prob = 1.0\n    for i in range(n):\n        prob *= (year_len - i) / year_len\n    return (prob - 0.5) ** 2 <= 1/year_len",
    "sols": [
      "def sol(year_len=9):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability",
    "notes": "Adaptation of the classic\n[Birthday Problem](https://en.wikipedia.org/wiki/Birthday_problem (Mathematical Problems category)).\n\nThe year length is year_len (365 is earth, while Neptune year is 60,182).",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BirthdayParadoxMonteCarlo_0",
    "sat": "def sat(n: int, year_len=365):\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000  # number of samples\n    prob = sum(len({random.randrange(year_len) for i in range(n)}) < n for j in range(K)) / K\n    return (prob - 0.5) ** 2 <= year_len",
    "sols": [
      "def sol(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability",
    "notes": "A slower, Monte Carlo version of the above Birthday Paradox problem.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BirthdayParadoxMonteCarlo_1",
    "sat": "def sat(n: int, year_len=60182):\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000  # number of samples\n    prob = sum(len({random.randrange(year_len) for i in range(n)}) < n for j in range(K)) / K\n    return (prob - 0.5) ** 2 <= year_len",
    "sols": [
      "def sol(year_len=60182):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability",
    "notes": "A slower, Monte Carlo version of the above Birthday Paradox problem.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BirthdayParadoxMonteCarlo_2",
    "sat": "def sat(n: int, year_len=2):\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000  # number of samples\n    prob = sum(len({random.randrange(year_len) for i in range(n)}) < n for j in range(K)) / K\n    return (prob - 0.5) ** 2 <= year_len",
    "sols": [
      "def sol(year_len=2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability",
    "notes": "A slower, Monte Carlo version of the above Birthday Paradox problem.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BirthdayParadoxMonteCarlo_3",
    "sat": "def sat(n: int, year_len=3):\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000  # number of samples\n    prob = sum(len({random.randrange(year_len) for i in range(n)}) < n for j in range(K)) / K\n    return (prob - 0.5) ** 2 <= year_len",
    "sols": [
      "def sol(year_len=3):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability",
    "notes": "A slower, Monte Carlo version of the above Birthday Paradox problem.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BirthdayParadoxMonteCarlo_4",
    "sat": "def sat(n: int, year_len=4):\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000  # number of samples\n    prob = sum(len({random.randrange(year_len) for i in range(n)}) < n for j in range(K)) / K\n    return (prob - 0.5) ** 2 <= year_len",
    "sols": [
      "def sol(year_len=4):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability",
    "notes": "A slower, Monte Carlo version of the above Birthday Paradox problem.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BirthdayParadoxMonteCarlo_5",
    "sat": "def sat(n: int, year_len=5):\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000  # number of samples\n    prob = sum(len({random.randrange(year_len) for i in range(n)}) < n for j in range(K)) / K\n    return (prob - 0.5) ** 2 <= year_len",
    "sols": [
      "def sol(year_len=5):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability",
    "notes": "A slower, Monte Carlo version of the above Birthday Paradox problem.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BirthdayParadoxMonteCarlo_6",
    "sat": "def sat(n: int, year_len=6):\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000  # number of samples\n    prob = sum(len({random.randrange(year_len) for i in range(n)}) < n for j in range(K)) / K\n    return (prob - 0.5) ** 2 <= year_len",
    "sols": [
      "def sol(year_len=6):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability",
    "notes": "A slower, Monte Carlo version of the above Birthday Paradox problem.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BirthdayParadoxMonteCarlo_7",
    "sat": "def sat(n: int, year_len=7):\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000  # number of samples\n    prob = sum(len({random.randrange(year_len) for i in range(n)}) < n for j in range(K)) / K\n    return (prob - 0.5) ** 2 <= year_len",
    "sols": [
      "def sol(year_len=7):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability",
    "notes": "A slower, Monte Carlo version of the above Birthday Paradox problem.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BirthdayParadoxMonteCarlo_8",
    "sat": "def sat(n: int, year_len=8):\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000  # number of samples\n    prob = sum(len({random.randrange(year_len) for i in range(n)}) < n for j in range(K)) / K\n    return (prob - 0.5) ** 2 <= year_len",
    "sols": [
      "def sol(year_len=8):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability",
    "notes": "A slower, Monte Carlo version of the above Birthday Paradox problem.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BirthdayParadoxMonteCarlo_9",
    "sat": "def sat(n: int, year_len=9):\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000  # number of samples\n    prob = sum(len({random.randrange(year_len) for i in range(n)}) < n for j in range(K)) / K\n    return (prob - 0.5) ** 2 <= year_len",
    "sols": [
      "def sol(year_len=9):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability",
    "notes": "A slower, Monte Carlo version of the above Birthday Paradox problem.",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BallotProblem_0",
    "sat": "def sat(counts: List[int], target_prob=0.5):\n    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"\n    m, n = counts  # m = num 1's, n = num -1's\n    probs = [1.0] + [0.0] * n  # probs[n] is probability for current m, starting with m = 1\n    for i in range(2, m + 1):  # compute probs using dynamic programming for m = i\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = (\n                    j / (i + j) * probs[j - 1]  # last element is a -1 so use probs\n                    +\n                    i / (i + j) * old_probs[j]  # last element is a 1 so use old_probs, m = i - 1\n            )\n    return abs(probs[n] - target_prob) < 1e-6",
    "sols": [
      "def sol(target_prob=0.5):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]"
    ],
    "module": "probability",
    "notes": "See the [Wikipedia article](https://en.wikipedia.org/wiki/Bertrand%27s_ballot_theorem) or\nor  [Addario-Berry L., Reed B.A. (2008) Ballot Theorems, Old and New. In: Gyori E., Katona G.O.H., Lov\u00e1sz L.,\nS\u00e1gi G. (eds) Horizons of Combinatorics. Bolyai Society Mathematical Studies, vol 17.\nSpringer, Berlin, Heidelberg.](https://doi.org/10.1007/978-3-540-77200-2_1)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BallotProblem_1",
    "sat": "def sat(counts: List[int], target_prob=0.1791044776119403):\n    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"\n    m, n = counts  # m = num 1's, n = num -1's\n    probs = [1.0] + [0.0] * n  # probs[n] is probability for current m, starting with m = 1\n    for i in range(2, m + 1):  # compute probs using dynamic programming for m = i\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = (\n                    j / (i + j) * probs[j - 1]  # last element is a -1 so use probs\n                    +\n                    i / (i + j) * old_probs[j]  # last element is a 1 so use old_probs, m = i - 1\n            )\n    return abs(probs[n] - target_prob) < 1e-6",
    "sols": [
      "def sol(target_prob=0.1791044776119403):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]"
    ],
    "module": "probability",
    "notes": "See the [Wikipedia article](https://en.wikipedia.org/wiki/Bertrand%27s_ballot_theorem) or\nor  [Addario-Berry L., Reed B.A. (2008) Ballot Theorems, Old and New. In: Gyori E., Katona G.O.H., Lov\u00e1sz L.,\nS\u00e1gi G. (eds) Horizons of Combinatorics. Bolyai Society Mathematical Studies, vol 17.\nSpringer, Berlin, Heidelberg.](https://doi.org/10.1007/978-3-540-77200-2_1)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BallotProblem_2",
    "sat": "def sat(counts: List[int], target_prob=0.03125):\n    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"\n    m, n = counts  # m = num 1's, n = num -1's\n    probs = [1.0] + [0.0] * n  # probs[n] is probability for current m, starting with m = 1\n    for i in range(2, m + 1):  # compute probs using dynamic programming for m = i\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = (\n                    j / (i + j) * probs[j - 1]  # last element is a -1 so use probs\n                    +\n                    i / (i + j) * old_probs[j]  # last element is a 1 so use old_probs, m = i - 1\n            )\n    return abs(probs[n] - target_prob) < 1e-6",
    "sols": [
      "def sol(target_prob=0.03125):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]"
    ],
    "module": "probability",
    "notes": "See the [Wikipedia article](https://en.wikipedia.org/wiki/Bertrand%27s_ballot_theorem) or\nor  [Addario-Berry L., Reed B.A. (2008) Ballot Theorems, Old and New. In: Gyori E., Katona G.O.H., Lov\u00e1sz L.,\nS\u00e1gi G. (eds) Horizons of Combinatorics. Bolyai Society Mathematical Studies, vol 17.\nSpringer, Berlin, Heidelberg.](https://doi.org/10.1007/978-3-540-77200-2_1)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BallotProblem_3",
    "sat": "def sat(counts: List[int], target_prob=0.5803571428571429):\n    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"\n    m, n = counts  # m = num 1's, n = num -1's\n    probs = [1.0] + [0.0] * n  # probs[n] is probability for current m, starting with m = 1\n    for i in range(2, m + 1):  # compute probs using dynamic programming for m = i\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = (\n                    j / (i + j) * probs[j - 1]  # last element is a -1 so use probs\n                    +\n                    i / (i + j) * old_probs[j]  # last element is a 1 so use old_probs, m = i - 1\n            )\n    return abs(probs[n] - target_prob) < 1e-6",
    "sols": [
      "def sol(target_prob=0.5803571428571429):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]"
    ],
    "module": "probability",
    "notes": "See the [Wikipedia article](https://en.wikipedia.org/wiki/Bertrand%27s_ballot_theorem) or\nor  [Addario-Berry L., Reed B.A. (2008) Ballot Theorems, Old and New. In: Gyori E., Katona G.O.H., Lov\u00e1sz L.,\nS\u00e1gi G. (eds) Horizons of Combinatorics. Bolyai Society Mathematical Studies, vol 17.\nSpringer, Berlin, Heidelberg.](https://doi.org/10.1007/978-3-540-77200-2_1)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BallotProblem_4",
    "sat": "def sat(counts: List[int], target_prob=0.7142857142857143):\n    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"\n    m, n = counts  # m = num 1's, n = num -1's\n    probs = [1.0] + [0.0] * n  # probs[n] is probability for current m, starting with m = 1\n    for i in range(2, m + 1):  # compute probs using dynamic programming for m = i\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = (\n                    j / (i + j) * probs[j - 1]  # last element is a -1 so use probs\n                    +\n                    i / (i + j) * old_probs[j]  # last element is a 1 so use old_probs, m = i - 1\n            )\n    return abs(probs[n] - target_prob) < 1e-6",
    "sols": [
      "def sol(target_prob=0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]"
    ],
    "module": "probability",
    "notes": "See the [Wikipedia article](https://en.wikipedia.org/wiki/Bertrand%27s_ballot_theorem) or\nor  [Addario-Berry L., Reed B.A. (2008) Ballot Theorems, Old and New. In: Gyori E., Katona G.O.H., Lov\u00e1sz L.,\nS\u00e1gi G. (eds) Horizons of Combinatorics. Bolyai Society Mathematical Studies, vol 17.\nSpringer, Berlin, Heidelberg.](https://doi.org/10.1007/978-3-540-77200-2_1)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BallotProblem_5",
    "sat": "def sat(counts: List[int], target_prob=0.7029702970297029):\n    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"\n    m, n = counts  # m = num 1's, n = num -1's\n    probs = [1.0] + [0.0] * n  # probs[n] is probability for current m, starting with m = 1\n    for i in range(2, m + 1):  # compute probs using dynamic programming for m = i\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = (\n                    j / (i + j) * probs[j - 1]  # last element is a -1 so use probs\n                    +\n                    i / (i + j) * old_probs[j]  # last element is a 1 so use old_probs, m = i - 1\n            )\n    return abs(probs[n] - target_prob) < 1e-6",
    "sols": [
      "def sol(target_prob=0.7029702970297029):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]"
    ],
    "module": "probability",
    "notes": "See the [Wikipedia article](https://en.wikipedia.org/wiki/Bertrand%27s_ballot_theorem) or\nor  [Addario-Berry L., Reed B.A. (2008) Ballot Theorems, Old and New. In: Gyori E., Katona G.O.H., Lov\u00e1sz L.,\nS\u00e1gi G. (eds) Horizons of Combinatorics. Bolyai Society Mathematical Studies, vol 17.\nSpringer, Berlin, Heidelberg.](https://doi.org/10.1007/978-3-540-77200-2_1)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BallotProblem_6",
    "sat": "def sat(counts: List[int], target_prob=0.09803921568627451):\n    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"\n    m, n = counts  # m = num 1's, n = num -1's\n    probs = [1.0] + [0.0] * n  # probs[n] is probability for current m, starting with m = 1\n    for i in range(2, m + 1):  # compute probs using dynamic programming for m = i\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = (\n                    j / (i + j) * probs[j - 1]  # last element is a -1 so use probs\n                    +\n                    i / (i + j) * old_probs[j]  # last element is a 1 so use old_probs, m = i - 1\n            )\n    return abs(probs[n] - target_prob) < 1e-6",
    "sols": [
      "def sol(target_prob=0.09803921568627451):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]"
    ],
    "module": "probability",
    "notes": "See the [Wikipedia article](https://en.wikipedia.org/wiki/Bertrand%27s_ballot_theorem) or\nor  [Addario-Berry L., Reed B.A. (2008) Ballot Theorems, Old and New. In: Gyori E., Katona G.O.H., Lov\u00e1sz L.,\nS\u00e1gi G. (eds) Horizons of Combinatorics. Bolyai Society Mathematical Studies, vol 17.\nSpringer, Berlin, Heidelberg.](https://doi.org/10.1007/978-3-540-77200-2_1)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BallotProblem_7",
    "sat": "def sat(counts: List[int], target_prob=0.3333333333333333):\n    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"\n    m, n = counts  # m = num 1's, n = num -1's\n    probs = [1.0] + [0.0] * n  # probs[n] is probability for current m, starting with m = 1\n    for i in range(2, m + 1):  # compute probs using dynamic programming for m = i\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = (\n                    j / (i + j) * probs[j - 1]  # last element is a -1 so use probs\n                    +\n                    i / (i + j) * old_probs[j]  # last element is a 1 so use old_probs, m = i - 1\n            )\n    return abs(probs[n] - target_prob) < 1e-6",
    "sols": [
      "def sol(target_prob=0.3333333333333333):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]"
    ],
    "module": "probability",
    "notes": "See the [Wikipedia article](https://en.wikipedia.org/wiki/Bertrand%27s_ballot_theorem) or\nor  [Addario-Berry L., Reed B.A. (2008) Ballot Theorems, Old and New. In: Gyori E., Katona G.O.H., Lov\u00e1sz L.,\nS\u00e1gi G. (eds) Horizons of Combinatorics. Bolyai Society Mathematical Studies, vol 17.\nSpringer, Berlin, Heidelberg.](https://doi.org/10.1007/978-3-540-77200-2_1)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BallotProblem_8",
    "sat": "def sat(counts: List[int], target_prob=0.2621035058430718):\n    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"\n    m, n = counts  # m = num 1's, n = num -1's\n    probs = [1.0] + [0.0] * n  # probs[n] is probability for current m, starting with m = 1\n    for i in range(2, m + 1):  # compute probs using dynamic programming for m = i\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = (\n                    j / (i + j) * probs[j - 1]  # last element is a -1 so use probs\n                    +\n                    i / (i + j) * old_probs[j]  # last element is a 1 so use old_probs, m = i - 1\n            )\n    return abs(probs[n] - target_prob) < 1e-6",
    "sols": [
      "def sol(target_prob=0.2621035058430718):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]"
    ],
    "module": "probability",
    "notes": "See the [Wikipedia article](https://en.wikipedia.org/wiki/Bertrand%27s_ballot_theorem) or\nor  [Addario-Berry L., Reed B.A. (2008) Ballot Theorems, Old and New. In: Gyori E., Katona G.O.H., Lov\u00e1sz L.,\nS\u00e1gi G. (eds) Horizons of Combinatorics. Bolyai Society Mathematical Studies, vol 17.\nSpringer, Berlin, Heidelberg.](https://doi.org/10.1007/978-3-540-77200-2_1)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BallotProblem_9",
    "sat": "def sat(counts: List[int], target_prob=0.5087719298245614):\n    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"\n    m, n = counts  # m = num 1's, n = num -1's\n    probs = [1.0] + [0.0] * n  # probs[n] is probability for current m, starting with m = 1\n    for i in range(2, m + 1):  # compute probs using dynamic programming for m = i\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = (\n                    j / (i + j) * probs[j - 1]  # last element is a -1 so use probs\n                    +\n                    i / (i + j) * old_probs[j]  # last element is a 1 so use old_probs, m = i - 1\n            )\n    return abs(probs[n] - target_prob) < 1e-6",
    "sols": [
      "def sol(target_prob=0.5087719298245614):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]"
    ],
    "module": "probability",
    "notes": "See the [Wikipedia article](https://en.wikipedia.org/wiki/Bertrand%27s_ballot_theorem) or\nor  [Addario-Berry L., Reed B.A. (2008) Ballot Theorems, Old and New. In: Gyori E., Katona G.O.H., Lov\u00e1sz L.,\nS\u00e1gi G. (eds) Horizons of Combinatorics. Bolyai Society Mathematical Studies, vol 17.\nSpringer, Berlin, Heidelberg.](https://doi.org/10.1007/978-3-540-77200-2_1)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BinomialProbabilities_0",
    "sat": "def sat(counts: List[int], p=0.5, target_prob=0.0625):\n    \"\"\"Find counts = [a, b] so that the probability of  a H's and b T's among a + b coin flips is ~ target_prob.\"\"\"\n    from itertools import product\n    a, b = counts\n    n = a + b\n    prob = (p ** a) * ((1-p) ** b)\n    tot = sum([prob for sample in product([0, 1], repeat=n) if sum(sample) == a])\n    return abs(tot - target_prob) < 1e-6",
    "sols": [
      "def sol(p=0.5, target_prob=0.0625):\n    probs = [1.0]\n    q = 1 - p\n    while len(probs) < 20:\n        probs = [(p * a + q * b) for a, b in zip([0] + probs, probs + [0])]\n        answers = [i for i, p in enumerate(probs) if abs(p - target_prob) < 1e-6]\n        if answers:\n            return [answers[0], len(probs) - 1 - answers[0]]"
    ],
    "module": "probability",
    "notes": "See [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BinomialProbabilities_1",
    "sat": "def sat(counts: List[int], p=0.7588822808660473, target_prob=0.41658075878732215):\n    \"\"\"Find counts = [a, b] so that the probability of  a H's and b T's among a + b coin flips is ~ target_prob.\"\"\"\n    from itertools import product\n    a, b = counts\n    n = a + b\n    prob = (p ** a) * ((1-p) ** b)\n    tot = sum([prob for sample in product([0, 1], repeat=n) if sum(sample) == a])\n    return abs(tot - target_prob) < 1e-6",
    "sols": [
      "def sol(p=0.7588822808660473, target_prob=0.41658075878732215):\n    probs = [1.0]\n    q = 1 - p\n    while len(probs) < 20:\n        probs = [(p * a + q * b) for a, b in zip([0] + probs, probs + [0])]\n        answers = [i for i, p in enumerate(probs) if abs(p - target_prob) < 1e-6]\n        if answers:\n            return [answers[0], len(probs) - 1 - answers[0]]"
    ],
    "module": "probability",
    "notes": "See [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BinomialProbabilities_2",
    "sat": "def sat(counts: List[int], p=0.6569421516251613, target_prob=0.01872902529162693):\n    \"\"\"Find counts = [a, b] so that the probability of  a H's and b T's among a + b coin flips is ~ target_prob.\"\"\"\n    from itertools import product\n    a, b = counts\n    n = a + b\n    prob = (p ** a) * ((1-p) ** b)\n    tot = sum([prob for sample in product([0, 1], repeat=n) if sum(sample) == a])\n    return abs(tot - target_prob) < 1e-6",
    "sols": [
      "def sol(p=0.6569421516251613, target_prob=0.01872902529162693):\n    probs = [1.0]\n    q = 1 - p\n    while len(probs) < 20:\n        probs = [(p * a + q * b) for a, b in zip([0] + probs, probs + [0])]\n        answers = [i for i, p in enumerate(probs) if abs(p - target_prob) < 1e-6]\n        if answers:\n            return [answers[0], len(probs) - 1 - answers[0]]"
    ],
    "module": "probability",
    "notes": "See [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BinomialProbabilities_3",
    "sat": "def sat(counts: List[int], p=0.20001220211746595, target_prob=0.13419930454361995):\n    \"\"\"Find counts = [a, b] so that the probability of  a H's and b T's among a + b coin flips is ~ target_prob.\"\"\"\n    from itertools import product\n    a, b = counts\n    n = a + b\n    prob = (p ** a) * ((1-p) ** b)\n    tot = sum([prob for sample in product([0, 1], repeat=n) if sum(sample) == a])\n    return abs(tot - target_prob) < 1e-6",
    "sols": [
      "def sol(p=0.20001220211746595, target_prob=0.13419930454361995):\n    probs = [1.0]\n    q = 1 - p\n    while len(probs) < 20:\n        probs = [(p * a + q * b) for a, b in zip([0] + probs, probs + [0])]\n        answers = [i for i, p in enumerate(probs) if abs(p - target_prob) < 1e-6]\n        if answers:\n            return [answers[0], len(probs) - 1 - answers[0]]"
    ],
    "module": "probability",
    "notes": "See [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BinomialProbabilities_4",
    "sat": "def sat(counts: List[int], p=0.004837079863490135, target_prob=3.5517791266002235e-13):\n    \"\"\"Find counts = [a, b] so that the probability of  a H's and b T's among a + b coin flips is ~ target_prob.\"\"\"\n    from itertools import product\n    a, b = counts\n    n = a + b\n    prob = (p ** a) * ((1-p) ** b)\n    tot = sum([prob for sample in product([0, 1], repeat=n) if sum(sample) == a])\n    return abs(tot - target_prob) < 1e-6",
    "sols": [
      "def sol(p=0.004837079863490135, target_prob=3.5517791266002235e-13):\n    probs = [1.0]\n    q = 1 - p\n    while len(probs) < 20:\n        probs = [(p * a + q * b) for a, b in zip([0] + probs, probs + [0])]\n        answers = [i for i, p in enumerate(probs) if abs(p - target_prob) < 1e-6]\n        if answers:\n            return [answers[0], len(probs) - 1 - answers[0]]"
    ],
    "module": "probability",
    "notes": "See [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BinomialProbabilities_5",
    "sat": "def sat(counts: List[int], p=0.22301203117936397, target_prob=0.3465553302572367):\n    \"\"\"Find counts = [a, b] so that the probability of  a H's and b T's among a + b coin flips is ~ target_prob.\"\"\"\n    from itertools import product\n    a, b = counts\n    n = a + b\n    prob = (p ** a) * ((1-p) ** b)\n    tot = sum([prob for sample in product([0, 1], repeat=n) if sum(sample) == a])\n    return abs(tot - target_prob) < 1e-6",
    "sols": [
      "def sol(p=0.22301203117936397, target_prob=0.3465553302572367):\n    probs = [1.0]\n    q = 1 - p\n    while len(probs) < 20:\n        probs = [(p * a + q * b) for a, b in zip([0] + probs, probs + [0])]\n        answers = [i for i, p in enumerate(probs) if abs(p - target_prob) < 1e-6]\n        if answers:\n            return [answers[0], len(probs) - 1 - answers[0]]"
    ],
    "module": "probability",
    "notes": "See [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BinomialProbabilities_6",
    "sat": "def sat(counts: List[int], p=0.09186637938262365, target_prob=0.03652982678582358):\n    \"\"\"Find counts = [a, b] so that the probability of  a H's and b T's among a + b coin flips is ~ target_prob.\"\"\"\n    from itertools import product\n    a, b = counts\n    n = a + b\n    prob = (p ** a) * ((1-p) ** b)\n    tot = sum([prob for sample in product([0, 1], repeat=n) if sum(sample) == a])\n    return abs(tot - target_prob) < 1e-6",
    "sols": [
      "def sol(p=0.09186637938262365, target_prob=0.03652982678582358):\n    probs = [1.0]\n    q = 1 - p\n    while len(probs) < 20:\n        probs = [(p * a + q * b) for a, b in zip([0] + probs, probs + [0])]\n        answers = [i for i, p in enumerate(probs) if abs(p - target_prob) < 1e-6]\n        if answers:\n            return [answers[0], len(probs) - 1 - answers[0]]"
    ],
    "module": "probability",
    "notes": "See [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BinomialProbabilities_7",
    "sat": "def sat(counts: List[int], p=0.8084771136120399, target_prob=9.452457811838075e-06):\n    \"\"\"Find counts = [a, b] so that the probability of  a H's and b T's among a + b coin flips is ~ target_prob.\"\"\"\n    from itertools import product\n    a, b = counts\n    n = a + b\n    prob = (p ** a) * ((1-p) ** b)\n    tot = sum([prob for sample in product([0, 1], repeat=n) if sum(sample) == a])\n    return abs(tot - target_prob) < 1e-6",
    "sols": [
      "def sol(p=0.8084771136120399, target_prob=9.452457811838075e-06):\n    probs = [1.0]\n    q = 1 - p\n    while len(probs) < 20:\n        probs = [(p * a + q * b) for a, b in zip([0] + probs, probs + [0])]\n        answers = [i for i, p in enumerate(probs) if abs(p - target_prob) < 1e-6]\n        if answers:\n            return [answers[0], len(probs) - 1 - answers[0]]"
    ],
    "module": "probability",
    "notes": "See [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BinomialProbabilities_8",
    "sat": "def sat(counts: List[int], p=0.8562952242373717, target_prob=0.31611092077661906):\n    \"\"\"Find counts = [a, b] so that the probability of  a H's and b T's among a + b coin flips is ~ target_prob.\"\"\"\n    from itertools import product\n    a, b = counts\n    n = a + b\n    prob = (p ** a) * ((1-p) ** b)\n    tot = sum([prob for sample in product([0, 1], repeat=n) if sum(sample) == a])\n    return abs(tot - target_prob) < 1e-6",
    "sols": [
      "def sol(p=0.8562952242373717, target_prob=0.31611092077661906):\n    probs = [1.0]\n    q = 1 - p\n    while len(probs) < 20:\n        probs = [(p * a + q * b) for a, b in zip([0] + probs, probs + [0])]\n        answers = [i for i, p in enumerate(probs) if abs(p - target_prob) < 1e-6]\n        if answers:\n            return [answers[0], len(probs) - 1 - answers[0]]"
    ],
    "module": "probability",
    "notes": "See [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "BinomialProbabilities_9",
    "sat": "def sat(counts: List[int], p=0.02862444202975356, target_prob=0.02922698016772227):\n    \"\"\"Find counts = [a, b] so that the probability of  a H's and b T's among a + b coin flips is ~ target_prob.\"\"\"\n    from itertools import product\n    a, b = counts\n    n = a + b\n    prob = (p ** a) * ((1-p) ** b)\n    tot = sum([prob for sample in product([0, 1], repeat=n) if sum(sample) == a])\n    return abs(tot - target_prob) < 1e-6",
    "sols": [
      "def sol(p=0.02862444202975356, target_prob=0.02922698016772227):\n    probs = [1.0]\n    q = 1 - p\n    while len(probs) < 20:\n        probs = [(p * a + q * b) for a, b in zip([0] + probs, probs + [0])]\n        answers = [i for i, p in enumerate(probs) if abs(p - target_prob) < 1e-6]\n        if answers:\n            return [answers[0], len(probs) - 1 - answers[0]]"
    ],
    "module": "probability",
    "notes": "See [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "ExponentialProbability_0",
    "sat": "def sat(p_stop: float, steps=10, target_prob=0.5):\n    \"\"\"\n    Find p_stop so that the probability of stopping in steps or fewer time steps is the given target_prob if you\n    stop each step with probability p_stop\n    \"\"\"\n    prob = sum(p_stop*(1-p_stop)**t for t in range(steps))\n    return abs(prob - target_prob) < 1e-6",
    "sols": [
      "def sol(steps=10, target_prob=0.5):\n    return 1 - (1 - target_prob) ** (1.0/steps)"
    ],
    "module": "probability",
    "notes": "See [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "ExponentialProbability_1",
    "sat": "def sat(p_stop: float, steps=43, target_prob=0.2661542669448821):\n    \"\"\"\n    Find p_stop so that the probability of stopping in steps or fewer time steps is the given target_prob if you\n    stop each step with probability p_stop\n    \"\"\"\n    prob = sum(p_stop*(1-p_stop)**t for t in range(steps))\n    return abs(prob - target_prob) < 1e-6",
    "sols": [
      "def sol(steps=43, target_prob=0.2661542669448821):\n    return 1 - (1 - target_prob) ** (1.0/steps)"
    ],
    "module": "probability",
    "notes": "See [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "ExponentialProbability_2",
    "sat": "def sat(p_stop: float, steps=91, target_prob=0.03729141037377781):\n    \"\"\"\n    Find p_stop so that the probability of stopping in steps or fewer time steps is the given target_prob if you\n    stop each step with probability p_stop\n    \"\"\"\n    prob = sum(p_stop*(1-p_stop)**t for t in range(steps))\n    return abs(prob - target_prob) < 1e-6",
    "sols": [
      "def sol(steps=91, target_prob=0.03729141037377781):\n    return 1 - (1 - target_prob) ** (1.0/steps)"
    ],
    "module": "probability",
    "notes": "See [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "ExponentialProbability_3",
    "sat": "def sat(p_stop: float, steps=11, target_prob=0.9742781783529525):\n    \"\"\"\n    Find p_stop so that the probability of stopping in steps or fewer time steps is the given target_prob if you\n    stop each step with probability p_stop\n    \"\"\"\n    prob = sum(p_stop*(1-p_stop)**t for t in range(steps))\n    return abs(prob - target_prob) < 1e-6",
    "sols": [
      "def sol(steps=11, target_prob=0.9742781783529525):\n    return 1 - (1 - target_prob) ** (1.0/steps)"
    ],
    "module": "probability",
    "notes": "See [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "ExponentialProbability_4",
    "sat": "def sat(p_stop: float, steps=65, target_prob=0.8318555442956944):\n    \"\"\"\n    Find p_stop so that the probability of stopping in steps or fewer time steps is the given target_prob if you\n    stop each step with probability p_stop\n    \"\"\"\n    prob = sum(p_stop*(1-p_stop)**t for t in range(steps))\n    return abs(prob - target_prob) < 1e-6",
    "sols": [
      "def sol(steps=65, target_prob=0.8318555442956944):\n    return 1 - (1 - target_prob) ** (1.0/steps)"
    ],
    "module": "probability",
    "notes": "See [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "ExponentialProbability_5",
    "sat": "def sat(p_stop: float, steps=43, target_prob=0.27905046827813074):\n    \"\"\"\n    Find p_stop so that the probability of stopping in steps or fewer time steps is the given target_prob if you\n    stop each step with probability p_stop\n    \"\"\"\n    prob = sum(p_stop*(1-p_stop)**t for t in range(steps))\n    return abs(prob - target_prob) < 1e-6",
    "sols": [
      "def sol(steps=43, target_prob=0.27905046827813074):\n    return 1 - (1 - target_prob) ** (1.0/steps)"
    ],
    "module": "probability",
    "notes": "See [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "ExponentialProbability_6",
    "sat": "def sat(p_stop: float, steps=97, target_prob=0.726143506161244):\n    \"\"\"\n    Find p_stop so that the probability of stopping in steps or fewer time steps is the given target_prob if you\n    stop each step with probability p_stop\n    \"\"\"\n    prob = sum(p_stop*(1-p_stop)**t for t in range(steps))\n    return abs(prob - target_prob) < 1e-6",
    "sols": [
      "def sol(steps=97, target_prob=0.726143506161244):\n    return 1 - (1 - target_prob) ** (1.0/steps)"
    ],
    "module": "probability",
    "notes": "See [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "ExponentialProbability_7",
    "sat": "def sat(p_stop: float, steps=96, target_prob=0.3812708251016994):\n    \"\"\"\n    Find p_stop so that the probability of stopping in steps or fewer time steps is the given target_prob if you\n    stop each step with probability p_stop\n    \"\"\"\n    prob = sum(p_stop*(1-p_stop)**t for t in range(steps))\n    return abs(prob - target_prob) < 1e-6",
    "sols": [
      "def sol(steps=96, target_prob=0.3812708251016994):\n    return 1 - (1 - target_prob) ** (1.0/steps)"
    ],
    "module": "probability",
    "notes": "See [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "ExponentialProbability_8",
    "sat": "def sat(p_stop: float, steps=35, target_prob=0.6293361569545994):\n    \"\"\"\n    Find p_stop so that the probability of stopping in steps or fewer time steps is the given target_prob if you\n    stop each step with probability p_stop\n    \"\"\"\n    prob = sum(p_stop*(1-p_stop)**t for t in range(steps))\n    return abs(prob - target_prob) < 1e-6",
    "sols": [
      "def sol(steps=35, target_prob=0.6293361569545994):\n    return 1 - (1 - target_prob) ** (1.0/steps)"
    ],
    "module": "probability",
    "notes": "See [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "ExponentialProbability_9",
    "sat": "def sat(p_stop: float, steps=22, target_prob=0.2118509983414142):\n    \"\"\"\n    Find p_stop so that the probability of stopping in steps or fewer time steps is the given target_prob if you\n    stop each step with probability p_stop\n    \"\"\"\n    prob = sum(p_stop*(1-p_stop)**t for t in range(steps))\n    return abs(prob - target_prob) < 1e-6",
    "sols": [
      "def sol(steps=22, target_prob=0.2118509983414142):\n    return 1 - (1 - target_prob) ** (1.0/steps)"
    ],
    "module": "probability",
    "notes": "See [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution)",
    "taint_date": "2021-4-26",
    "weight": 0.02
  },
  {
    "name": "HelloWorld_0",
    "sat": "def sat(s: str):\n    \"\"\"Find a string that when concatenated onto 'world' gives 'Hello world'.\"\"\"\n    return s + 'world' == 'Hello world'",
    "sols": [],
    "module": "trivial_inverse",
    "notes": "Trivial example, no solutions provided",
    "taint_date": "2021-4-26",
    "weight": 0.02564102564102564
  },
  {
    "name": "BackWorlds_0",
    "sat": "def sat(s: str):\n    \"\"\"Find a string that when reversed and concatenated onto 'world' gives 'Hello world'.\"\"\"\n    return s[::-1] + 'world' == 'Hello world'",
    "sols": [
      "def sol():\n    return ' olleH'",
      "def sol():  # solution methods must begin with 'sol'\n    return 'Hello '[::-1]"
    ],
    "module": "trivial_inverse",
    "notes": "We provide two solutions",
    "taint_date": "2021-4-26",
    "weight": 0.02564102564102564
  },
  {
    "name": "StrAdd_0",
    "sat": "def sat(st: str, a=\"world\", b=\"Hello world\"):\n    \"\"\"Solve simple string addition problem.\"\"\"\n    return st + a == b",
    "sols": [
      "def sol(a=\"world\", b=\"Hello world\"):\n    return b[:len(b) - len(a)]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrAdd_1",
    "sat": "def sat(st: str, a=\"zine\", b=\"cerofilimybazine\"):\n    \"\"\"Solve simple string addition problem.\"\"\"\n    return st + a == b",
    "sols": [
      "def sol(a=\"zine\", b=\"cerofilimybazine\"):\n    return b[:len(b) - len(a)]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrAdd_2",
    "sat": "def sat(st: str, a=\"id\", b=\"xakid\"):\n    \"\"\"Solve simple string addition problem.\"\"\"\n    return st + a == b",
    "sols": [
      "def sol(a=\"id\", b=\"xakid\"):\n    return b[:len(b) - len(a)]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrAdd_3",
    "sat": "def sat(st: str, a=\"dyr\", b=\"dyr\"):\n    \"\"\"Solve simple string addition problem.\"\"\"\n    return st + a == b",
    "sols": [
      "def sol(a=\"dyr\", b=\"dyr\"):\n    return b[:len(b) - len(a)]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrAdd_4",
    "sat": "def sat(st: str, a=\"s\", b=\"tos\"):\n    \"\"\"Solve simple string addition problem.\"\"\"\n    return st + a == b",
    "sols": [
      "def sol(a=\"s\", b=\"tos\"):\n    return b[:len(b) - len(a)]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrAdd_5",
    "sat": "def sat(st: str, a=\"e\", b=\"le\"):\n    \"\"\"Solve simple string addition problem.\"\"\"\n    return st + a == b",
    "sols": [
      "def sol(a=\"e\", b=\"le\"):\n    return b[:len(b) - len(a)]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrAdd_6",
    "sat": "def sat(st: str, a=\"\", b=\"n\"):\n    \"\"\"Solve simple string addition problem.\"\"\"\n    return st + a == b",
    "sols": [
      "def sol(a=\"\", b=\"n\"):\n    return b[:len(b) - len(a)]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrAdd_7",
    "sat": "def sat(st: str, a=\"\", b=\"di\"):\n    \"\"\"Solve simple string addition problem.\"\"\"\n    return st + a == b",
    "sols": [
      "def sol(a=\"\", b=\"di\"):\n    return b[:len(b) - len(a)]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrAdd_8",
    "sat": "def sat(st: str, a=\"ax\", b=\"quobavuthanuhax\"):\n    \"\"\"Solve simple string addition problem.\"\"\"\n    return st + a == b",
    "sols": [
      "def sol(a=\"ax\", b=\"quobavuthanuhax\"):\n    return b[:len(b) - len(a)]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrAdd_9",
    "sat": "def sat(st: str, a=\"h\", b=\"xylath\"):\n    \"\"\"Solve simple string addition problem.\"\"\"\n    return st + a == b",
    "sols": [
      "def sol(a=\"h\", b=\"xylath\"):\n    return b[:len(b) - len(a)]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSetLen_0",
    "sat": "def sat(s: str, dups=2021):\n    \"\"\"Find a string with dups duplicate chars\"\"\"\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=2021):\n    return \"a\" * (dups + 1)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSetLen_1",
    "sat": "def sat(s: str, dups=0):\n    \"\"\"Find a string with dups duplicate chars\"\"\"\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=0):\n    return \"a\" * (dups + 1)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSetLen_2",
    "sat": "def sat(s: str, dups=1):\n    \"\"\"Find a string with dups duplicate chars\"\"\"\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=1):\n    return \"a\" * (dups + 1)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSetLen_3",
    "sat": "def sat(s: str, dups=2):\n    \"\"\"Find a string with dups duplicate chars\"\"\"\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=2):\n    return \"a\" * (dups + 1)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSetLen_4",
    "sat": "def sat(s: str, dups=3):\n    \"\"\"Find a string with dups duplicate chars\"\"\"\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=3):\n    return \"a\" * (dups + 1)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSetLen_5",
    "sat": "def sat(s: str, dups=4):\n    \"\"\"Find a string with dups duplicate chars\"\"\"\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=4):\n    return \"a\" * (dups + 1)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSetLen_6",
    "sat": "def sat(s: str, dups=5):\n    \"\"\"Find a string with dups duplicate chars\"\"\"\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=5):\n    return \"a\" * (dups + 1)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSetLen_7",
    "sat": "def sat(s: str, dups=6):\n    \"\"\"Find a string with dups duplicate chars\"\"\"\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=6):\n    return \"a\" * (dups + 1)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSetLen_8",
    "sat": "def sat(s: str, dups=7):\n    \"\"\"Find a string with dups duplicate chars\"\"\"\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=7):\n    return \"a\" * (dups + 1)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSetLen_9",
    "sat": "def sat(s: str, dups=8):\n    \"\"\"Find a string with dups duplicate chars\"\"\"\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=8):\n    return \"a\" * (dups + 1)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrMul_0",
    "sat": "def sat(s: str, target=\"foofoofoofoo\", n=2):\n    \"\"\"Find a string which when repeated n times gives target\"\"\"\n    return s * n == target",
    "sols": [
      "def sol(target=\"foofoofoofoo\", n=2):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrMul_1",
    "sat": "def sat(s: str, target=\"biquacagegichisykbiquacagegichisykbiquacagegichisyk\", n=3):\n    \"\"\"Find a string which when repeated n times gives target\"\"\"\n    return s * n == target",
    "sols": [
      "def sol(target=\"biquacagegichisykbiquacagegichisykbiquacagegichisyk\", n=3):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrMul_2",
    "sat": "def sat(s: str, target=\"hutextogoxanithiru\", n=1):\n    \"\"\"Find a string which when repeated n times gives target\"\"\"\n    return s * n == target",
    "sols": [
      "def sol(target=\"hutextogoxanithiru\", n=1):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrMul_3",
    "sat": "def sat(s: str, target=\"sisisisisisisisisisisisisisi\", n=7):\n    \"\"\"Find a string which when repeated n times gives target\"\"\"\n    return s * n == target",
    "sols": [
      "def sol(target=\"sisisisisisisisisisisisisisi\", n=7):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrMul_4",
    "sat": "def sat(s: str, target=\"fuchomurybaxefuchomurybaxefuchomurybaxefuchomurybaxefuchomurybaxefuchomurybaxefuchomurybaxe\", n=7):\n    \"\"\"Find a string which when repeated n times gives target\"\"\"\n    return s * n == target",
    "sols": [
      "def sol(target=\"fuchomurybaxefuchomurybaxefuchomurybaxefuchomurybaxefuchomurybaxefuchomurybaxefuchomurybaxe\", n=7):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrMul_5",
    "sat": "def sat(s: str, target=\"jusocifagasirevyhajusocifagasirevyhajusocifagasirevyhajusocifagasirevyha\", n=2):\n    \"\"\"Find a string which when repeated n times gives target\"\"\"\n    return s * n == target",
    "sols": [
      "def sol(target=\"jusocifagasirevyhajusocifagasirevyhajusocifagasirevyhajusocifagasirevyha\", n=2):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrMul_6",
    "sat": "def sat(s: str, target=\"wwwwwwww\", n=8):\n    \"\"\"Find a string which when repeated n times gives target\"\"\"\n    return s * n == target",
    "sols": [
      "def sol(target=\"wwwwwwww\", n=8):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrMul_7",
    "sat": "def sat(s: str, target=\"butochikifuzozbutochikifuzozbutochikifuzoz\", n=1):\n    \"\"\"Find a string which when repeated n times gives target\"\"\"\n    return s * n == target",
    "sols": [
      "def sol(target=\"butochikifuzozbutochikifuzozbutochikifuzoz\", n=1):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrMul_8",
    "sat": "def sat(s: str, target=\"pechakegopyzepechakegopyzepechakegopyze\", n=3):\n    \"\"\"Find a string which when repeated n times gives target\"\"\"\n    return s * n == target",
    "sols": [
      "def sol(target=\"pechakegopyzepechakegopyzepechakegopyze\", n=3):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrMul_9",
    "sat": "def sat(s: str, target=\"quyvquyvquyvquyvquyvquyvquyvquyvquyvquyvquyvquyvquyvquyv\", n=7):\n    \"\"\"Find a string which when repeated n times gives target\"\"\"\n    return s * n == target",
    "sols": [
      "def sol(target=\"quyvquyvquyvquyvquyvquyvquyvquyvquyvquyvquyvquyvquyvquyv\", n=7):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrMul2_0",
    "sat": "def sat(n: int, target=\"foofoofoofoo\", s=\"foofoo\"):\n    \"\"\"Find n such that s repeated n times gives target\"\"\"\n    return s * n == target",
    "sols": [
      "def sol(target=\"foofoofoofoo\", s=\"foofoo\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrMul2_1",
    "sat": "def sat(n: int, target=\"\", s=\"jan\"):\n    \"\"\"Find n such that s repeated n times gives target\"\"\"\n    return s * n == target",
    "sols": [
      "def sol(target=\"\", s=\"jan\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrMul2_2",
    "sat": "def sat(n: int, target=\"koquuwibehyckoquuwibehyckoquuwibehyckoquuwibehyckoquuwibehyckoquuwibehyckoquuwibehyc\", s=\"koquuwibehyc\"):\n    \"\"\"Find n such that s repeated n times gives target\"\"\"\n    return s * n == target",
    "sols": [
      "def sol(target=\"koquuwibehyckoquuwibehyckoquuwibehyckoquuwibehyckoquuwibehyckoquuwibehyckoquuwibehyc\", s=\"koquuwibehyc\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrMul2_3",
    "sat": "def sat(n: int, target=\"kasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyz\", s=\"kasujyzkasujyz\"):\n    \"\"\"Find n such that s repeated n times gives target\"\"\"\n    return s * n == target",
    "sols": [
      "def sol(target=\"kasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyz\", s=\"kasujyzkasujyz\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrMul2_4",
    "sat": "def sat(n: int, target=\"kedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuth\", s=\"kedezygijithequuthkedezygijithequuth\"):\n    \"\"\"Find n such that s repeated n times gives target\"\"\"\n    return s * n == target",
    "sols": [
      "def sol(target=\"kedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuth\", s=\"kedezygijithequuthkedezygijithequuth\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrMul2_5",
    "sat": "def sat(n: int, target=\"puzitepuzite\", s=\"puzitepuzite\"):\n    \"\"\"Find n such that s repeated n times gives target\"\"\"\n    return s * n == target",
    "sols": [
      "def sol(target=\"puzitepuzite\", s=\"puzitepuzite\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrMul2_6",
    "sat": "def sat(n: int, target=\"vachabimoxezvachabimoxezvachabimoxezvachabimoxez\", s=\"vachabimoxez\"):\n    \"\"\"Find n such that s repeated n times gives target\"\"\"\n    return s * n == target",
    "sols": [
      "def sol(target=\"vachabimoxezvachabimoxezvachabimoxezvachabimoxez\", s=\"vachabimoxez\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrMul2_7",
    "sat": "def sat(n: int, target=\"mumu\", s=\"mu\"):\n    \"\"\"Find n such that s repeated n times gives target\"\"\"\n    return s * n == target",
    "sols": [
      "def sol(target=\"mumu\", s=\"mu\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrMul2_8",
    "sat": "def sat(n: int, target=\"huwysypedetextehehuwysypedetextehehuwysypedetextehehuwysypedetextehehuwysypedetextehehuwysypedetextehehuwysypedetextehehuwysypedetextehehuwysypedetextehehuwysypedetextehehuwysypedetextehehuwysypedetextehe\", s=\"huwysypedetextehehuwysypedetextehehuwysypedetextehe\"):\n    \"\"\"Find n such that s repeated n times gives target\"\"\"\n    return s * n == target",
    "sols": [
      "def sol(target=\"huwysypedetextehehuwysypedetextehehuwysypedetextehehuwysypedetextehehuwysypedetextehehuwysypedetextehehuwysypedetextehehuwysypedetextehehuwysypedetextehehuwysypedetextehehuwysypedetextehehuwysypedetextehe\", s=\"huwysypedetextehehuwysypedetextehehuwysypedetextehe\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrMul2_9",
    "sat": "def sat(n: int, target=\"thyputotufizujathyputotufizujathyputotufizujathyputotufizujathyputotufizujathyputotufizujathyputotufizujathyputotufizuja\", s=\"thyputotufizuja\"):\n    \"\"\"Find n such that s repeated n times gives target\"\"\"\n    return s * n == target",
    "sols": [
      "def sol(target=\"thyputotufizujathyputotufizujathyputotufizujathyputotufizujathyputotufizujathyputotufizujathyputotufizujathyputotufizuja\", s=\"thyputotufizuja\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrLen_0",
    "sat": "def sat(s: str, n=1000):\n    \"\"\"Find a string of length n\"\"\"\n    return len(s) == n",
    "sols": [
      "def sol(n=1000):\n    return 'a' * n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrLen_1",
    "sat": "def sat(s: str, n=39):\n    \"\"\"Find a string of length n\"\"\"\n    return len(s) == n",
    "sols": [
      "def sol(n=39):\n    return 'a' * n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrLen_2",
    "sat": "def sat(s: str, n=790):\n    \"\"\"Find a string of length n\"\"\"\n    return len(s) == n",
    "sols": [
      "def sol(n=790):\n    return 'a' * n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrLen_3",
    "sat": "def sat(s: str, n=485):\n    \"\"\"Find a string of length n\"\"\"\n    return len(s) == n",
    "sols": [
      "def sol(n=485):\n    return 'a' * n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrLen_4",
    "sat": "def sat(s: str, n=4031):\n    \"\"\"Find a string of length n\"\"\"\n    return len(s) == n",
    "sols": [
      "def sol(n=4031):\n    return 'a' * n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrLen_5",
    "sat": "def sat(s: str, n=28):\n    \"\"\"Find a string of length n\"\"\"\n    return len(s) == n",
    "sols": [
      "def sol(n=28):\n    return 'a' * n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrLen_6",
    "sat": "def sat(s: str, n=56):\n    \"\"\"Find a string of length n\"\"\"\n    return len(s) == n",
    "sols": [
      "def sol(n=56):\n    return 'a' * n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrLen_7",
    "sat": "def sat(s: str, n=77):\n    \"\"\"Find a string of length n\"\"\"\n    return len(s) == n",
    "sols": [
      "def sol(n=77):\n    return 'a' * n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrLen_8",
    "sat": "def sat(s: str, n=31):\n    \"\"\"Find a string of length n\"\"\"\n    return len(s) == n",
    "sols": [
      "def sol(n=31):\n    return 'a' * n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrLen_9",
    "sat": "def sat(s: str, n=4016):\n    \"\"\"Find a string of length n\"\"\"\n    return len(s) == n",
    "sols": [
      "def sol(n=4016):\n    return 'a' * n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrAt_0",
    "sat": "def sat(i: int, s=\"cat\", target=\"a\"):\n    \"\"\"Find the index of target in string s\"\"\"\n    return s[i] == target",
    "sols": [
      "def sol(s=\"cat\", target=\"a\"):\n    return s.index(target)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrAt_1",
    "sat": "def sat(i: int, s=\"quadyquady\", target=\"a\"):\n    \"\"\"Find the index of target in string s\"\"\"\n    return s[i] == target",
    "sols": [
      "def sol(s=\"quadyquady\", target=\"a\"):\n    return s.index(target)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrAt_2",
    "sat": "def sat(i: int, s=\"quixatextofazejate\", target=\"i\"):\n    \"\"\"Find the index of target in string s\"\"\"\n    return s[i] == target",
    "sols": [
      "def sol(s=\"quixatextofazejate\", target=\"i\"):\n    return s.index(target)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrAt_3",
    "sat": "def sat(i: int, s=\"thethe\", target=\"e\"):\n    \"\"\"Find the index of target in string s\"\"\"\n    return s[i] == target",
    "sols": [
      "def sol(s=\"thethe\", target=\"e\"):\n    return s.index(target)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrAt_4",
    "sat": "def sat(i: int, s=\"bucudibucudibucudi\", target=\"b\"):\n    \"\"\"Find the index of target in string s\"\"\"\n    return s[i] == target",
    "sols": [
      "def sol(s=\"bucudibucudibucudi\", target=\"b\"):\n    return s.index(target)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrAt_5",
    "sat": "def sat(i: int, s=\"wavipitanymywavipitanymywavipitanymy\", target=\"a\"):\n    \"\"\"Find the index of target in string s\"\"\"\n    return s[i] == target",
    "sols": [
      "def sol(s=\"wavipitanymywavipitanymywavipitanymy\", target=\"a\"):\n    return s.index(target)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrAt_6",
    "sat": "def sat(i: int, s=\"jarofujarofujarofu\", target=\"a\"):\n    \"\"\"Find the index of target in string s\"\"\"\n    return s[i] == target",
    "sols": [
      "def sol(s=\"jarofujarofujarofu\", target=\"a\"):\n    return s.index(target)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrAt_7",
    "sat": "def sat(i: int, s=\"sajehysajehy\", target=\"s\"):\n    \"\"\"Find the index of target in string s\"\"\"\n    return s[i] == target",
    "sols": [
      "def sol(s=\"sajehysajehy\", target=\"s\"):\n    return s.index(target)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrAt_8",
    "sat": "def sat(i: int, s=\"mufetemaduxomufetemaduxo\", target=\"e\"):\n    \"\"\"Find the index of target in string s\"\"\"\n    return s[i] == target",
    "sols": [
      "def sol(s=\"mufetemaduxomufetemaduxo\", target=\"e\"):\n    return s.index(target)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrAt_9",
    "sat": "def sat(i: int, s=\"kochiranutekipohkochiranutekipoh\", target=\"u\"):\n    \"\"\"Find the index of target in string s\"\"\"\n    return s[i] == target",
    "sols": [
      "def sol(s=\"kochiranutekipohkochiranutekipoh\", target=\"u\"):\n    return s.index(target)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrNegAt_0",
    "sat": "def sat(i: int, s=\"cat\", target=\"a\"):\n    \"\"\"Find the index of target in s using a negative index.\"\"\"\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"cat\", target=\"a\"):\n    return - (len(s) - s.index(target))"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrNegAt_1",
    "sat": "def sat(i: int, s=\"ch\", target=\"c\"):\n    \"\"\"Find the index of target in s using a negative index.\"\"\"\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"ch\", target=\"c\"):\n    return - (len(s) - s.index(target))"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrNegAt_2",
    "sat": "def sat(i: int, s=\"nydivimocuvacetext\", target=\"y\"):\n    \"\"\"Find the index of target in s using a negative index.\"\"\"\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"nydivimocuvacetext\", target=\"y\"):\n    return - (len(s) - s.index(target))"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrNegAt_3",
    "sat": "def sat(i: int, s=\"chyxchyx\", target=\"x\"):\n    \"\"\"Find the index of target in s using a negative index.\"\"\"\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"chyxchyx\", target=\"x\"):\n    return - (len(s) - s.index(target))"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrNegAt_4",
    "sat": "def sat(i: int, s=\"tuchuworyquofojyzusutuchuworyquofojyzusutuchuworyquofojyzusu\", target=\"h\"):\n    \"\"\"Find the index of target in s using a negative index.\"\"\"\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"tuchuworyquofojyzusutuchuworyquofojyzusutuchuworyquofojyzusu\", target=\"h\"):\n    return - (len(s) - s.index(target))"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrNegAt_5",
    "sat": "def sat(i: int, s=\"thithowyvofochothithowyvofochothithowyvofocho\", target=\"t\"):\n    \"\"\"Find the index of target in s using a negative index.\"\"\"\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"thithowyvofochothithowyvofochothithowyvofocho\", target=\"t\"):\n    return - (len(s) - s.index(target))"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrNegAt_6",
    "sat": "def sat(i: int, s=\"vazykuz\", target=\"a\"):\n    \"\"\"Find the index of target in s using a negative index.\"\"\"\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"vazykuz\", target=\"a\"):\n    return - (len(s) - s.index(target))"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrNegAt_7",
    "sat": "def sat(i: int, s=\"quevquevquev\", target=\"e\"):\n    \"\"\"Find the index of target in s using a negative index.\"\"\"\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"quevquevquev\", target=\"e\"):\n    return - (len(s) - s.index(target))"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrNegAt_8",
    "sat": "def sat(i: int, s=\"nydobabocidnydobabocid\", target=\"b\"):\n    \"\"\"Find the index of target in s using a negative index.\"\"\"\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"nydobabocidnydobabocid\", target=\"b\"):\n    return - (len(s) - s.index(target))"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrNegAt_9",
    "sat": "def sat(i: int, s=\"ji\", target=\"i\"):\n    \"\"\"Find the index of target in s using a negative index.\"\"\"\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"ji\", target=\"i\"):\n    return - (len(s) - s.index(target))"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSlice_0",
    "sat": "def sat(inds: List[int], s=\"hello world\", target=\"do\"):\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"hello world\", target=\"do\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSlice_1",
    "sat": "def sat(inds: List[int], s=\"ninykofiwimninykofiwim\", target=\"\"):\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"ninykofiwimninykofiwim\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSlice_2",
    "sat": "def sat(inds: List[int], s=\"limerybinylimerybiny\", target=\"n\"):\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"limerybinylimerybiny\", target=\"n\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSlice_3",
    "sat": "def sat(inds: List[int], s=\"fyzihurothevirechahfyzihurothevirechah\", target=\"\"):\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"fyzihurothevirechahfyzihurothevirechah\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSlice_4",
    "sat": "def sat(inds: List[int], s=\"kibozekiboze\", target=\"\"):\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"kibozekiboze\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSlice_5",
    "sat": "def sat(inds: List[int], s=\"mimemimemime\", target=\"\"):\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"mimemimemime\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSlice_6",
    "sat": "def sat(inds: List[int], s=\"xezirojxeziroj\", target=\"x\"):\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"xezirojxeziroj\", target=\"x\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSlice_7",
    "sat": "def sat(inds: List[int], s=\"dacejisycytocdacejisycytoc\", target=\"e\"):\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"dacejisycytocdacejisycytoc\", target=\"e\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSlice_8",
    "sat": "def sat(inds: List[int], s=\"ribuxiq\", target=\"xubir\"):\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"ribuxiq\", target=\"xubir\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSlice_9",
    "sat": "def sat(inds: List[int], s=\"vipikavipika\", target=\"\"):\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"vipikavipika\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIndex_0",
    "sat": "def sat(s: str, big_str=\"foobar\", index=2):\n    \"\"\"Find a string whose *first* index in big_str is index\"\"\"\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"foobar\", index=2):\n    return big_str[index:]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIndex_1",
    "sat": "def sat(s: str, big_str=\"fukulagatextuj\", index=10):\n    \"\"\"Find a string whose *first* index in big_str is index\"\"\"\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"fukulagatextuj\", index=10):\n    return big_str[index:]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIndex_2",
    "sat": "def sat(s: str, big_str=\"nunalurejijunopyrewithocukopojot\", index=12):\n    \"\"\"Find a string whose *first* index in big_str is index\"\"\"\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"nunalurejijunopyrewithocukopojot\", index=12):\n    return big_str[index:]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIndex_3",
    "sat": "def sat(s: str, big_str=\"fu\", index=1):\n    \"\"\"Find a string whose *first* index in big_str is index\"\"\"\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"fu\", index=1):\n    return big_str[index:]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIndex_4",
    "sat": "def sat(s: str, big_str=\"fatextemedyrotichipicecojon\", index=24):\n    \"\"\"Find a string whose *first* index in big_str is index\"\"\"\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"fatextemedyrotichipicecojon\", index=24):\n    return big_str[index:]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIndex_5",
    "sat": "def sat(s: str, big_str=\"wacathiquojakequidarevabehumijikyd\", index=0):\n    \"\"\"Find a string whose *first* index in big_str is index\"\"\"\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"wacathiquojakequidarevabehumijikyd\", index=0):\n    return big_str[index:]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIndex_6",
    "sat": "def sat(s: str, big_str=\"wugesinemisofexotochithelichaceteth\", index=20):\n    \"\"\"Find a string whose *first* index in big_str is index\"\"\"\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"wugesinemisofexotochithelichaceteth\", index=20):\n    return big_str[index:]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIndex_7",
    "sat": "def sat(s: str, big_str=\"quywedohenocugasyfynygotextifyhu\", index=12):\n    \"\"\"Find a string whose *first* index in big_str is index\"\"\"\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"quywedohenocugasyfynygotextifyhu\", index=12):\n    return big_str[index:]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIndex_8",
    "sat": "def sat(s: str, big_str=\"vapapufizipiwajadalujynuthihejixopire\", index=22):\n    \"\"\"Find a string whose *first* index in big_str is index\"\"\"\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"vapapufizipiwajadalujynuthihejixopire\", index=22):\n    return big_str[index:]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIndex_9",
    "sat": "def sat(s: str, big_str=\"sixicethyvewochidefiquolodotheweditytewek\", index=17):\n    \"\"\"Find a string whose *first* index in big_str is index\"\"\"\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"sixicethyvewochidefiquolodotheweditytewek\", index=17):\n    return big_str[index:]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIndex2_0",
    "sat": "def sat(big_str: str, sub_str=\"foobar\", index=2):\n    \"\"\"Find a string whose *first* index of sub_str is index\"\"\"\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"foobar\", index=2):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIndex2_1",
    "sat": "def sat(big_str: str, sub_str=\"quadox\", index=75):\n    \"\"\"Find a string whose *first* index of sub_str is index\"\"\"\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"quadox\", index=75):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIndex2_2",
    "sat": "def sat(big_str: str, sub_str=\"votextymuvethic\", index=880):\n    \"\"\"Find a string whose *first* index of sub_str is index\"\"\"\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"votextymuvethic\", index=880):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIndex2_3",
    "sat": "def sat(big_str: str, sub_str=\"pyrumymasekalihochyvibisamaquythifedetextityvath\", index=0):\n    \"\"\"Find a string whose *first* index of sub_str is index\"\"\"\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"pyrumymasekalihochyvibisamaquythifedetextityvath\", index=0):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIndex2_4",
    "sat": "def sat(big_str: str, sub_str=\"nofufaxunetextesitocedezyxuxexyfoquichitiracyquat\", index=185):\n    \"\"\"Find a string whose *first* index of sub_str is index\"\"\"\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"nofufaxunetextesitocedezyxuxexyfoquichitiracyquat\", index=185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIndex2_5",
    "sat": "def sat(big_str: str, sub_str=\"xu\", index=825):\n    \"\"\"Find a string whose *first* index of sub_str is index\"\"\"\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"xu\", index=825):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIndex2_6",
    "sat": "def sat(big_str: str, sub_str=\"cuhysepytextyhymochuxirirukawexyrifefirich\", index=137):\n    \"\"\"Find a string whose *first* index of sub_str is index\"\"\"\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"cuhysepytextyhymochuxirirukawexyrifefirich\", index=137):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIndex2_7",
    "sat": "def sat(big_str: str, sub_str=\"mewyzasyhevorythyhuhytharache\", index=731):\n    \"\"\"Find a string whose *first* index of sub_str is index\"\"\"\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"mewyzasyhevorythyhuhytharache\", index=731):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIndex2_8",
    "sat": "def sat(big_str: str, sub_str=\"thutusatuboquofikuhynatextizynotextoratexticuwapu\", index=21):\n    \"\"\"Find a string whose *first* index of sub_str is index\"\"\"\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"thutusatuboquofikuhynatextizynotextoratexticuwapu\", index=21):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIndex2_9",
    "sat": "def sat(big_str: str, sub_str=\"mothetextuxelibochyhikygigysolitynevapidi\", index=165):\n    \"\"\"Find a string whose *first* index of sub_str is index\"\"\"\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"mothetextuxelibochyhikygigysolitynevapidi\", index=165):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIn_0",
    "sat": "def sat(s: str, a=\"hello\", b=\"yellow\", length=4):\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"hello\", b=\"yellow\", length=4):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIn_1",
    "sat": "def sat(s: str, a=\"vuzogaguzechicowejeguthemeralic\", b=\"kybyjifidoquifwejeguthemelihitextodeju\", length=11):\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"vuzogaguzechicowejeguthemeralic\", b=\"kybyjifidoquifwejeguthemelihitextodeju\", length=11):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIn_2",
    "sat": "def sat(s: str, a=\"kehorithxyfurexatextoxivuquunusethawatextebu\", b=\"pxyfurexatextoxivuquuwynicixo\", length=20):\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"kehorithxyfurexatextoxivuquunusethawatextebu\", b=\"pxyfurexatextoxivuquuwynicixo\", length=20):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIn_3",
    "sat": "def sat(s: str, a=\"bafywihequyjicivicharyquynikixuhinyqu\", b=\"syrapetagecvicharyquynirorazecheth\", length=12):\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"bafywihequyjicivicharyquynikixuhinyqu\", b=\"syrapetagecvicharyquynirorazecheth\", length=12):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIn_4",
    "sat": "def sat(s: str, a=\"diquatextaxubowafucevyhuquuthexitacavobychajexytextug\", b=\"thachevolatvyhuquuthexitacavobyjokobuchudymal\", length=20):\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"diquatextaxubowafucevyhuquuthexitacavobychajexytextug\", b=\"thachevolatvyhuquuthexitacavobyjokobuchudymal\", length=20):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIn_5",
    "sat": "def sat(s: str, a=\"sasawizequebetojothagtextejichykelas\", b=\"gulunytextafyzywofuxjothagratextobukile\", length=6):\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"sasawizequebetojothagtextejichykelas\", b=\"gulunytextafyzywofuxjothagratextobukile\", length=6):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIn_6",
    "sat": "def sat(s: str, a=\"konywexuvytenvihechivydochomobuzuchoquul\", b=\"zivihechivydochomobukorywo\", length=18):\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"konywexuvytenvihechivydochomobuzuchoquul\", b=\"zivihechivydochomobukorywo\", length=18):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIn_7",
    "sat": "def sat(s: str, a=\"cywizutextmucythahyquizifovatex\", b=\"kazedysylmucythazypypacupebive\", length=7):\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"cywizutextmucythahyquizifovatex\", b=\"kazedysylmucythazypypacupebive\", length=7):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIn_8",
    "sat": "def sat(s: str, a=\"gavajyjopivbisotextureve\", b=\"femalezequachuvefvkylucunabun\", length=1):\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"gavajyjopivbisotextureve\", b=\"femalezequachuvefvkylucunabun\", length=1):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIn_9",
    "sat": "def sat(s: str, a=\"pefethulomuluxisifnivyjilixyhederagyworyto\", b=\"nijolenivydojyvuzodu\", length=4):\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"pefethulomuluxisifnivyjilixyhederagyworyto\", b=\"nijolenivydojyvuzodu\", length=4):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIn2_0",
    "sat": "def sat(substrings: List[str], s=\"hello\", count=15):\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"hello\", count=15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIn2_1",
    "sat": "def sat(substrings: List[str], s=\"rywixekugagethathulisitextanyp\", count=451):\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"rywixekugagethathulisitextanyp\", count=451):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIn2_2",
    "sat": "def sat(substrings: List[str], s=\"xetyvezitajithiban\", count=165):\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"xetyvezitajithiban\", count=165):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIn2_3",
    "sat": "def sat(substrings: List[str], s=\"rofegakusaquybemydomimibyzodycetextunoce\", count=799):\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"rofegakusaquybemydomimibyzodycetextunoce\", count=799):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIn2_4",
    "sat": "def sat(substrings: List[str], s=\"thacyt\", count=21):\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"thacyt\", count=21):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIn2_5",
    "sat": "def sat(substrings: List[str], s=\"jahithotharathewythojyhechi\", count=356):\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"jahithotharathewythojyhechi\", count=356):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIn2_6",
    "sat": "def sat(substrings: List[str], s=\"hyjilyguthokepucuciwutahaseb\", count=394):\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"hyjilyguthokepucuciwutahaseb\", count=394):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIn2_7",
    "sat": "def sat(substrings: List[str], s=\"miposyjydatilel\", count=118):\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"miposyjydatilel\", count=118):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIn2_8",
    "sat": "def sat(substrings: List[str], s=\"fef\", count=6):\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"fef\", count=6):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrIn2_9",
    "sat": "def sat(substrings: List[str], s=\"muhixupethinicygo\", count=149):\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"muhixupethinicygo\", count=149):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrCount_0",
    "sat": "def sat(string: str, substring=\"a\", count=10, length=100):\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length",
    "sols": [
      "def sol(substring=\"a\", count=10, length=100):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrCount_1",
    "sat": "def sat(string: str, substring=\"ky\", count=66, length=133):\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length",
    "sols": [
      "def sol(substring=\"ky\", count=66, length=133):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrCount_2",
    "sat": "def sat(string: str, substring=\"jepy\", count=87, length=650):\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length",
    "sols": [
      "def sol(substring=\"jepy\", count=87, length=650):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrCount_3",
    "sat": "def sat(string: str, substring=\"hothyfyt\", count=3, length=417):\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length",
    "sols": [
      "def sol(substring=\"hothyfyt\", count=3, length=417):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrCount_4",
    "sat": "def sat(string: str, substring=\"moz\", count=70, length=210):\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length",
    "sols": [
      "def sol(substring=\"moz\", count=70, length=210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrCount_5",
    "sat": "def sat(string: str, substring=\"p\", count=91, length=724):\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length",
    "sols": [
      "def sol(substring=\"p\", count=91, length=724):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrCount_6",
    "sat": "def sat(string: str, substring=\"k\", count=87, length=961):\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length",
    "sols": [
      "def sol(substring=\"k\", count=87, length=961):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrCount_7",
    "sat": "def sat(string: str, substring=\"b\", count=33, length=52):\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length",
    "sols": [
      "def sol(substring=\"b\", count=33, length=52):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrCount_8",
    "sat": "def sat(string: str, substring=\"xyfec\", count=16, length=237):\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length",
    "sols": [
      "def sol(substring=\"xyfec\", count=16, length=237):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrCount_9",
    "sat": "def sat(string: str, substring=\"w\", count=78, length=192):\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length",
    "sols": [
      "def sol(substring=\"w\", count=78, length=192):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSplit_0",
    "sat": "def sat(x: str, parts=['I', 'love', 'dumplings', '!'], length=100):\n    \"\"\"Find a string of a given length with a certain split\"\"\"\n    return len(x) == length and x.split() == parts",
    "sols": [
      "def sol(parts=['I', 'love', 'dumplings', '!'], length=100):\n    joined = \" \".join(parts)\n    return joined + \" \" * (length - len(joined))"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSplit_1",
    "sat": "def sat(x: str, parts=['thala', 'chaliriliq', 'chufyselikizap'], length=116):\n    \"\"\"Find a string of a given length with a certain split\"\"\"\n    return len(x) == length and x.split() == parts",
    "sols": [
      "def sol(parts=['thala', 'chaliriliq', 'chufyselikizap'], length=116):\n    joined = \" \".join(parts)\n    return joined + \" \" * (length - len(joined))"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSplit_2",
    "sat": "def sat(x: str, parts=['lepytextati', 'ki', 'fy'], length=69):\n    \"\"\"Find a string of a given length with a certain split\"\"\"\n    return len(x) == length and x.split() == parts",
    "sols": [
      "def sol(parts=['lepytextati', 'ki', 'fy'], length=69):\n    joined = \" \".join(parts)\n    return joined + \" \" * (length - len(joined))"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSplit_3",
    "sat": "def sat(x: str, parts=['quyhigechyhy'], length=38):\n    \"\"\"Find a string of a given length with a certain split\"\"\"\n    return len(x) == length and x.split() == parts",
    "sols": [
      "def sol(parts=['quyhigechyhy'], length=38):\n    joined = \" \".join(parts)\n    return joined + \" \" * (length - len(joined))"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSplit_4",
    "sat": "def sat(x: str, parts=['je', 'pojacyda', 'papucet', 'wesobaq'], length=40):\n    \"\"\"Find a string of a given length with a certain split\"\"\"\n    return len(x) == length and x.split() == parts",
    "sols": [
      "def sol(parts=['je', 'pojacyda', 'papucet', 'wesobaq'], length=40):\n    joined = \" \".join(parts)\n    return joined + \" \" * (length - len(joined))"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSplit_5",
    "sat": "def sat(x: str, parts=['v'], length=71):\n    \"\"\"Find a string of a given length with a certain split\"\"\"\n    return len(x) == length and x.split() == parts",
    "sols": [
      "def sol(parts=['v'], length=71):\n    joined = \" \".join(parts)\n    return joined + \" \" * (length - len(joined))"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSplit_6",
    "sat": "def sat(x: str, parts=['det', 'chythyvocovy', 'hoxuwoda'], length=51):\n    \"\"\"Find a string of a given length with a certain split\"\"\"\n    return len(x) == length and x.split() == parts",
    "sols": [
      "def sol(parts=['det', 'chythyvocovy', 'hoxuwoda'], length=51):\n    joined = \" \".join(parts)\n    return joined + \" \" * (length - len(joined))"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSplit_7",
    "sat": "def sat(x: str, parts=['peh', 'vida', 'gylupowo', 'n'], length=84):\n    \"\"\"Find a string of a given length with a certain split\"\"\"\n    return len(x) == length and x.split() == parts",
    "sols": [
      "def sol(parts=['peh', 'vida', 'gylupowo', 'n'], length=84):\n    joined = \" \".join(parts)\n    return joined + \" \" * (length - len(joined))"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSplit_8",
    "sat": "def sat(x: str, parts=['guhufatextavy', 'fytextinizovaholi'], length=129):\n    \"\"\"Find a string of a given length with a certain split\"\"\"\n    return len(x) == length and x.split() == parts",
    "sols": [
      "def sol(parts=['guhufatextavy', 'fytextinizovaholi'], length=129):\n    joined = \" \".join(parts)\n    return joined + \" \" * (length - len(joined))"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSplit_9",
    "sat": "def sat(x: str, parts=['quu', 'xojamegefathilywo', 'sadajyfithywykajex'], length=48):\n    \"\"\"Find a string of a given length with a certain split\"\"\"\n    return len(x) == length and x.split() == parts",
    "sols": [
      "def sol(parts=['quu', 'xojamegefathilywo', 'sadajyfithywykajex'], length=48):\n    joined = \" \".join(parts)\n    return joined + \" \" * (length - len(joined))"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSplitter_0",
    "sat": "def sat(x: str, parts=['I', 'love', 'dumplings', '!', ''], string=\"I_love_dumplings_!_\"):\n    \"\"\"Find a separator that when used to split a given string gives a certain result\"\"\"\n    return string.split(x) == parts",
    "sols": [
      "def sol(parts=['I', 'love', 'dumplings', '!', ''], string=\"I_love_dumplings_!_\"):\n    if len(parts) <= 1:\n        return string * 2\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSplitter_1",
    "sat": "def sat(x: str, parts=['kowot', 'quimimy'], string=\"kowottextihocavikirofegyfquimimy\"):\n    \"\"\"Find a separator that when used to split a given string gives a certain result\"\"\"\n    return string.split(x) == parts",
    "sols": [
      "def sol(parts=['kowot', 'quimimy'], string=\"kowottextihocavikirofegyfquimimy\"):\n    if len(parts) <= 1:\n        return string * 2\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSplitter_2",
    "sat": "def sat(x: str, parts=['f', 'thixaresiquagipoquas', 'fytylu', 'jywaxaw'], string=\"fdetthixaresiquagipoquasdetfytyludetjywaxaw\"):\n    \"\"\"Find a separator that when used to split a given string gives a certain result\"\"\"\n    return string.split(x) == parts",
    "sols": [
      "def sol(parts=['f', 'thixaresiquagipoquas', 'fytylu', 'jywaxaw'], string=\"fdetthixaresiquagipoquasdetfytyludetjywaxaw\"):\n    if len(parts) <= 1:\n        return string * 2\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSplitter_3",
    "sat": "def sat(x: str, parts=['tibuzumurun', 'hakebixutextolonyf', 'bothuraquobara'], string=\"tibuzumurunhocyxihakebixutextolonyfhocyxibothuraquobara\"):\n    \"\"\"Find a separator that when used to split a given string gives a certain result\"\"\"\n    return string.split(x) == parts",
    "sols": [
      "def sol(parts=['tibuzumurun', 'hakebixutextolonyf', 'bothuraquobara'], string=\"tibuzumurunhocyxihakebixutextolonyfhocyxibothuraquobara\"):\n    if len(parts) <= 1:\n        return string * 2\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSplitter_4",
    "sat": "def sat(x: str, parts=['fitextu', 'chythawequeku', 'th'], string=\"fitextufyhachochythawequekufyhachoth\"):\n    \"\"\"Find a separator that when used to split a given string gives a certain result\"\"\"\n    return string.split(x) == parts",
    "sols": [
      "def sol(parts=['fitextu', 'chythawequeku', 'th'], string=\"fitextufyhachochythawequekufyhachoth\"):\n    if len(parts) <= 1:\n        return string * 2\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSplitter_5",
    "sat": "def sat(x: str, parts=['jegevavuchupuzyboqu', 'k', 'lewygicu'], string=\"jegevavuchupuzyboquretyxathikretyxathilewygicu\"):\n    \"\"\"Find a separator that when used to split a given string gives a certain result\"\"\"\n    return string.split(x) == parts",
    "sols": [
      "def sol(parts=['jegevavuchupuzyboqu', 'k', 'lewygicu'], string=\"jegevavuchupuzyboquretyxathikretyxathilewygicu\"):\n    if len(parts) <= 1:\n        return string * 2\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSplitter_6",
    "sat": "def sat(x: str, parts=['nozajutex', 'hute', 'textugec'], string=\"nozajutexxuchutexuctextugec\"):\n    \"\"\"Find a separator that when used to split a given string gives a certain result\"\"\"\n    return string.split(x) == parts",
    "sols": [
      "def sol(parts=['nozajutex', 'hute', 'textugec'], string=\"nozajutexxuchutexuctextugec\"):\n    if len(parts) <= 1:\n        return string * 2\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSplitter_7",
    "sat": "def sat(x: str, parts=['nathuchigegybobutex', 'chutextuf', 'gukotextocoquymethit', 'l'], string=\"nathuchigegybobutexretithysokyquujetechutextufretithysokyquujetegukotextocoquymethitretithysokyquujetel\"):\n    \"\"\"Find a separator that when used to split a given string gives a certain result\"\"\"\n    return string.split(x) == parts",
    "sols": [
      "def sol(parts=['nathuchigegybobutex', 'chutextuf', 'gukotextocoquymethit', 'l'], string=\"nathuchigegybobutexretithysokyquujetechutextufretithysokyquujetegukotextocoquymethitretithysokyquujetel\"):\n    if len(parts) <= 1:\n        return string * 2\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSplitter_8",
    "sat": "def sat(x: str, parts=['s', 'textosytextemeg', 'pimetojijimosylaga'], string=\"sthethycofahatextextosytextemegthethycofahatexpimetojijimosylaga\"):\n    \"\"\"Find a separator that when used to split a given string gives a certain result\"\"\"\n    return string.split(x) == parts",
    "sols": [
      "def sol(parts=['s', 'textosytextemeg', 'pimetojijimosylaga'], string=\"sthethycofahatextextosytextemegthethycofahatexpimetojijimosylaga\"):\n    if len(parts) <= 1:\n        return string * 2\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrSplitter_9",
    "sat": "def sat(x: str, parts=['quetext', 'chyhegunixehitoquira', 'cemek'], string=\"quetextxycawyvesylojochyhegunixehitoquiraxycawyvesylojocemek\"):\n    \"\"\"Find a separator that when used to split a given string gives a certain result\"\"\"\n    return string.split(x) == parts",
    "sols": [
      "def sol(parts=['quetext', 'chyhegunixehitoquira', 'cemek'], string=\"quetextxycawyvesylojochyhegunixehitoquiraxycawyvesylojocemek\"):\n    if len(parts) <= 1:\n        return string * 2\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrJoiner_0",
    "sat": "def sat(x: str, parts=['I!!', '!love', 'dumplings', '!', ''], string=\"I!!!!!love!!dumplings!!!!!\"):\n    \"\"\"\n    Find a separator that when used to join a given string gives a certain result.\n    This is related to the previous problem but there are some edge cases that differ.\n    \"\"\"\n    return x.join(parts) == string",
    "sols": [
      "def sol(parts=['I!!', '!love', 'dumplings', '!', ''], string=\"I!!!!!love!!dumplings!!!!!\"):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrJoiner_1",
    "sat": "def sat(x: str, parts=['tatext'], string=\"tatext\"):\n    \"\"\"\n    Find a separator that when used to join a given string gives a certain result.\n    This is related to the previous problem but there are some edge cases that differ.\n    \"\"\"\n    return x.join(parts) == string",
    "sols": [
      "def sol(parts=['tatext'], string=\"tatext\"):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrJoiner_2",
    "sat": "def sat(x: str, parts: List[str]=[], string=\"\"):\n    \"\"\"\n    Find a separator that when used to join a given string gives a certain result.\n    This is related to the previous problem but there are some edge cases that differ.\n    \"\"\"\n    return x.join(parts) == string",
    "sols": [
      "def sol(parts=[], string=\"\"):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrJoiner_3",
    "sat": "def sat(x: str, parts=['ruquug'], string=\"ruquug\"):\n    \"\"\"\n    Find a separator that when used to join a given string gives a certain result.\n    This is related to the previous problem but there are some edge cases that differ.\n    \"\"\"\n    return x.join(parts) == string",
    "sols": [
      "def sol(parts=['ruquug'], string=\"ruquug\"):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrJoiner_4",
    "sat": "def sat(x: str, parts=['numegixuly', 'koxyfihimurukothasyl'], string=\"numegixulypyjetkoxyfihimurukothasyl\"):\n    \"\"\"\n    Find a separator that when used to join a given string gives a certain result.\n    This is related to the previous problem but there are some edge cases that differ.\n    \"\"\"\n    return x.join(parts) == string",
    "sols": [
      "def sol(parts=['numegixuly', 'koxyfihimurukothasyl'], string=\"numegixulypyjetkoxyfihimurukothasyl\"):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrJoiner_5",
    "sat": "def sat(x: str, parts=['dyvachukache', 'ladovenyquecilaziset', 'jybuchoxih', 'requasidyk'], string=\"dyvachukachekybirihewezuchobytujladovenyquecilazisetkybirihewezuchobytujjybuchoxihkybirihewezuchobytujrequasidyk\"):\n    \"\"\"\n    Find a separator that when used to join a given string gives a certain result.\n    This is related to the previous problem but there are some edge cases that differ.\n    \"\"\"\n    return x.join(parts) == string",
    "sols": [
      "def sol(parts=['dyvachukache', 'ladovenyquecilaziset', 'jybuchoxih', 'requasidyk'], string=\"dyvachukachekybirihewezuchobytujladovenyquecilazisetkybirihewezuchobytujjybuchoxihkybirihewezuchobytujrequasidyk\"):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrJoiner_6",
    "sat": "def sat(x: str, parts=['lulate'], string=\"lulate\"):\n    \"\"\"\n    Find a separator that when used to join a given string gives a certain result.\n    This is related to the previous problem but there are some edge cases that differ.\n    \"\"\"\n    return x.join(parts) == string",
    "sols": [
      "def sol(parts=['lulate'], string=\"lulate\"):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrJoiner_7",
    "sat": "def sat(x: str, parts=['kyhelytextif', 'jakematext'], string=\"kyhelytextifgathatufyjakematext\"):\n    \"\"\"\n    Find a separator that when used to join a given string gives a certain result.\n    This is related to the previous problem but there are some edge cases that differ.\n    \"\"\"\n    return x.join(parts) == string",
    "sols": [
      "def sol(parts=['kyhelytextif', 'jakematext'], string=\"kyhelytextifgathatufyjakematext\"):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrJoiner_8",
    "sat": "def sat(x: str, parts=['xatezetextet'], string=\"xatezetextet\"):\n    \"\"\"\n    Find a separator that when used to join a given string gives a certain result.\n    This is related to the previous problem but there are some edge cases that differ.\n    \"\"\"\n    return x.join(parts) == string",
    "sols": [
      "def sol(parts=['xatezetextet'], string=\"xatezetextet\"):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrJoiner_9",
    "sat": "def sat(x: str, parts=['cugalufexyz', 'notyd', 'tosydufademyhelydich'], string=\"cugalufexyzgachyfechawanyzunotydgachyfechawanyzutosydufademyhelydich\"):\n    \"\"\"\n    Find a separator that when used to join a given string gives a certain result.\n    This is related to the previous problem but there are some edge cases that differ.\n    \"\"\"\n    return x.join(parts) == string",
    "sols": [
      "def sol(parts=['cugalufexyz', 'notyd', 'tosydufademyhelydich'], string=\"cugalufexyzgachyfechawanyzunotydgachyfechawanyzutosydufademyhelydich\"):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrParts_0",
    "sat": "def sat(parts: List[str], sep=\"!!\", string=\"I!!!!!love!!dumplings!!!!!\"):\n    \"\"\"Find parts that when joined give a specific string.\"\"\"\n    return sep.join(parts) == string and all(sep not in p for p in parts)",
    "sols": [
      "def sol(sep=\"!!\", string=\"I!!!!!love!!dumplings!!!!!\"):\n    return string.split(sep)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrParts_1",
    "sat": "def sat(parts: List[str], sep=\"jachasurobithu\", string=\"watalachyquujachasurobithuba\"):\n    \"\"\"Find parts that when joined give a specific string.\"\"\"\n    return sep.join(parts) == string and all(sep not in p for p in parts)",
    "sols": [
      "def sol(sep=\"jachasurobithu\", string=\"watalachyquujachasurobithuba\"):\n    return string.split(sep)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrParts_2",
    "sat": "def sat(parts: List[str], sep=\"xusoquyvamathila\", string=\"bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji\"):\n    \"\"\"Find parts that when joined give a specific string.\"\"\"\n    return sep.join(parts) == string and all(sep not in p for p in parts)",
    "sols": [
      "def sol(sep=\"xusoquyvamathila\", string=\"bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji\"):\n    return string.split(sep)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrParts_3",
    "sat": "def sat(parts: List[str], sep=\"chixachal\", string=\"\"):\n    \"\"\"Find parts that when joined give a specific string.\"\"\"\n    return sep.join(parts) == string and all(sep not in p for p in parts)",
    "sols": [
      "def sol(sep=\"chixachal\", string=\"\"):\n    return string.split(sep)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrParts_4",
    "sat": "def sat(parts: List[str], sep=\"lochuv\", string=\"biflochuvzulothanodugedusilochuvlilochuvhobegikofero\"):\n    \"\"\"Find parts that when joined give a specific string.\"\"\"\n    return sep.join(parts) == string and all(sep not in p for p in parts)",
    "sols": [
      "def sol(sep=\"lochuv\", string=\"biflochuvzulothanodugedusilochuvlilochuvhobegikofero\"):\n    return string.split(sep)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrParts_5",
    "sat": "def sat(parts: List[str], sep=\"finoz\", string=\"\"):\n    \"\"\"Find parts that when joined give a specific string.\"\"\"\n    return sep.join(parts) == string and all(sep not in p for p in parts)",
    "sols": [
      "def sol(sep=\"finoz\", string=\"\"):\n    return string.split(sep)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrParts_6",
    "sat": "def sat(parts: List[str], sep=\"baxef\", string=\"wunetextamoquebaxefjycilathachibyco\"):\n    \"\"\"Find parts that when joined give a specific string.\"\"\"\n    return sep.join(parts) == string and all(sep not in p for p in parts)",
    "sols": [
      "def sol(sep=\"baxef\", string=\"wunetextamoquebaxefjycilathachibyco\"):\n    return string.split(sep)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrParts_7",
    "sat": "def sat(parts: List[str], sep=\"t\", string=\"\"):\n    \"\"\"Find parts that when joined give a specific string.\"\"\"\n    return sep.join(parts) == string and all(sep not in p for p in parts)",
    "sols": [
      "def sol(sep=\"t\", string=\"\"):\n    return string.split(sep)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrParts_8",
    "sat": "def sat(parts: List[str], sep=\"sidyrychorujuvopymac\", string=\"\"):\n    \"\"\"Find parts that when joined give a specific string.\"\"\"\n    return sep.join(parts) == string and all(sep not in p for p in parts)",
    "sols": [
      "def sol(sep=\"sidyrychorujuvopymac\", string=\"\"):\n    return string.split(sep)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "StrParts_9",
    "sat": "def sat(parts: List[str], sep=\"noluduzukyviti\", string=\"\"):\n    \"\"\"Find parts that when joined give a specific string.\"\"\"\n    return sep.join(parts) == string and all(sep not in p for p in parts)",
    "sols": [
      "def sol(sep=\"noluduzukyviti\", string=\"\"):\n    return string.split(sep)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListSetLen_0",
    "sat": "def sat(li: List[int], dups=42155):\n    \"\"\"Find a list with a certain number of duplicate items\"\"\"\n    return len(set(li)) == len(li) - dups",
    "sols": [
      "def sol(dups=42155):\n    return [1] * (dups + 1)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListSetLen_1",
    "sat": "def sat(li: List[int], dups=18793):\n    \"\"\"Find a list with a certain number of duplicate items\"\"\"\n    return len(set(li)) == len(li) - dups",
    "sols": [
      "def sol(dups=18793):\n    return [1] * (dups + 1)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListSetLen_2",
    "sat": "def sat(li: List[int], dups=70976):\n    \"\"\"Find a list with a certain number of duplicate items\"\"\"\n    return len(set(li)) == len(li) - dups",
    "sols": [
      "def sol(dups=70976):\n    return [1] * (dups + 1)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListSetLen_3",
    "sat": "def sat(li: List[int], dups=23476):\n    \"\"\"Find a list with a certain number of duplicate items\"\"\"\n    return len(set(li)) == len(li) - dups",
    "sols": [
      "def sol(dups=23476):\n    return [1] * (dups + 1)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListSetLen_4",
    "sat": "def sat(li: List[int], dups=17633):\n    \"\"\"Find a list with a certain number of duplicate items\"\"\"\n    return len(set(li)) == len(li) - dups",
    "sols": [
      "def sol(dups=17633):\n    return [1] * (dups + 1)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListSetLen_5",
    "sat": "def sat(li: List[int], dups=74086):\n    \"\"\"Find a list with a certain number of duplicate items\"\"\"\n    return len(set(li)) == len(li) - dups",
    "sols": [
      "def sol(dups=74086):\n    return [1] * (dups + 1)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListSetLen_6",
    "sat": "def sat(li: List[int], dups=8612):\n    \"\"\"Find a list with a certain number of duplicate items\"\"\"\n    return len(set(li)) == len(li) - dups",
    "sols": [
      "def sol(dups=8612):\n    return [1] * (dups + 1)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListSetLen_7",
    "sat": "def sat(li: List[int], dups=1740):\n    \"\"\"Find a list with a certain number of duplicate items\"\"\"\n    return len(set(li)) == len(li) - dups",
    "sols": [
      "def sol(dups=1740):\n    return [1] * (dups + 1)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListSetLen_8",
    "sat": "def sat(li: List[int], dups=52799):\n    \"\"\"Find a list with a certain number of duplicate items\"\"\"\n    return len(set(li)) == len(li) - dups",
    "sols": [
      "def sol(dups=52799):\n    return [1] * (dups + 1)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListSetLen_9",
    "sat": "def sat(li: List[int], dups=29174):\n    \"\"\"Find a list with a certain number of duplicate items\"\"\"\n    return len(set(li)) == len(li) - dups",
    "sols": [
      "def sol(dups=29174):\n    return [1] * (dups + 1)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListMul_0",
    "sat": "def sat(li: List[int], target=[17, 9, -1, 17, 9, -1], n=2):\n    \"\"\"Find a list that when multiplied n times gives the target list\"\"\"\n    return li * n == target",
    "sols": [
      "def sol(target=[17, 9, -1, 17, 9, -1], n=2):\n    if n == 0:\n        return []\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListMul_1",
    "sat": "def sat(li: List[int], target=[-69358, -69358, -69358, -69358, -69358, -69358, -69358], n=7):\n    \"\"\"Find a list that when multiplied n times gives the target list\"\"\"\n    return li * n == target",
    "sols": [
      "def sol(target=[-69358, -69358, -69358, -69358, -69358, -69358, -69358], n=7):\n    if n == 0:\n        return []\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListMul_2",
    "sat": "def sat(li: List[int], target=[-51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344], n=8):\n    \"\"\"Find a list that when multiplied n times gives the target list\"\"\"\n    return li * n == target",
    "sols": [
      "def sol(target=[-51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344], n=8):\n    if n == 0:\n        return []\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListMul_3",
    "sat": "def sat(li: List[int], target: List[int]=[], n=0):\n    \"\"\"Find a list that when multiplied n times gives the target list\"\"\"\n    return li * n == target",
    "sols": [
      "def sol(target=[], n=0):\n    if n == 0:\n        return []\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListMul_4",
    "sat": "def sat(li: List[int], target=[-25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766], n=4):\n    \"\"\"Find a list that when multiplied n times gives the target list\"\"\"\n    return li * n == target",
    "sols": [
      "def sol(target=[-25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766], n=4):\n    if n == 0:\n        return []\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListMul_5",
    "sat": "def sat(li: List[int], target=[-48426, -78083, -6462, 87501, -24814, -86588, -34478, 27926, 47601, -48426, -78083, -6462, 87501, -24814, -86588, -34478, 27926, 47601], n=2):\n    \"\"\"Find a list that when multiplied n times gives the target list\"\"\"\n    return li * n == target",
    "sols": [
      "def sol(target=[-48426, -78083, -6462, 87501, -24814, -86588, -34478, 27926, 47601, -48426, -78083, -6462, 87501, -24814, -86588, -34478, 27926, 47601], n=2):\n    if n == 0:\n        return []\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListMul_6",
    "sat": "def sat(li: List[int], target=[23970, 23970, 23970, 23970], n=4):\n    \"\"\"Find a list that when multiplied n times gives the target list\"\"\"\n    return li * n == target",
    "sols": [
      "def sol(target=[23970, 23970, 23970, 23970], n=4):\n    if n == 0:\n        return []\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListMul_7",
    "sat": "def sat(li: List[int], target=[-88188, 74911, 56756, -88188, 74911, 56756], n=2):\n    \"\"\"Find a list that when multiplied n times gives the target list\"\"\"\n    return li * n == target",
    "sols": [
      "def sol(target=[-88188, 74911, 56756, -88188, 74911, 56756], n=2):\n    if n == 0:\n        return []\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListMul_8",
    "sat": "def sat(li: List[int], target=[-70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789], n=7):\n    \"\"\"Find a list that when multiplied n times gives the target list\"\"\"\n    return li * n == target",
    "sols": [
      "def sol(target=[-70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789, -70052, -10087, 34113, -52629, -88131, 25789], n=7):\n    if n == 0:\n        return []\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListMul_9",
    "sat": "def sat(li: List[int], target=[-54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480], n=8):\n    \"\"\"Find a list that when multiplied n times gives the target list\"\"\"\n    return li * n == target",
    "sols": [
      "def sol(target=[-54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480, -54499, 17154, 83480], n=8):\n    if n == 0:\n        return []\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListLen_0",
    "sat": "def sat(li: List[int], n=85012):\n    \"\"\"Find a list of a given length n\"\"\"\n    return len(li) == n",
    "sols": [
      "def sol(n=85012):\n    return [1] * n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListLen_1",
    "sat": "def sat(li: List[int], n=969):\n    \"\"\"Find a list of a given length n\"\"\"\n    return len(li) == n",
    "sols": [
      "def sol(n=969):\n    return [1] * n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListLen_2",
    "sat": "def sat(li: List[int], n=7051):\n    \"\"\"Find a list of a given length n\"\"\"\n    return len(li) == n",
    "sols": [
      "def sol(n=7051):\n    return [1] * n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListLen_3",
    "sat": "def sat(li: List[int], n=9):\n    \"\"\"Find a list of a given length n\"\"\"\n    return len(li) == n",
    "sols": [
      "def sol(n=9):\n    return [1] * n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListLen_4",
    "sat": "def sat(li: List[int], n=324):\n    \"\"\"Find a list of a given length n\"\"\"\n    return len(li) == n",
    "sols": [
      "def sol(n=324):\n    return [1] * n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListLen_5",
    "sat": "def sat(li: List[int], n=893):\n    \"\"\"Find a list of a given length n\"\"\"\n    return len(li) == n",
    "sols": [
      "def sol(n=893):\n    return [1] * n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListLen_6",
    "sat": "def sat(li: List[int], n=3):\n    \"\"\"Find a list of a given length n\"\"\"\n    return len(li) == n",
    "sols": [
      "def sol(n=3):\n    return [1] * n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListLen_7",
    "sat": "def sat(li: List[int], n=166):\n    \"\"\"Find a list of a given length n\"\"\"\n    return len(li) == n",
    "sols": [
      "def sol(n=166):\n    return [1] * n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListLen_8",
    "sat": "def sat(li: List[int], n=702):\n    \"\"\"Find a list of a given length n\"\"\"\n    return len(li) == n",
    "sols": [
      "def sol(n=702):\n    return [1] * n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListLen_9",
    "sat": "def sat(li: List[int], n=8):\n    \"\"\"Find a list of a given length n\"\"\"\n    return len(li) == n",
    "sols": [
      "def sol(n=8):\n    return [1] * n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListAt_0",
    "sat": "def sat(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18):\n    \"\"\"Find the index of an item in a list. Any such index is fine.\"\"\"\n    return li[i] == target",
    "sols": [
      "def sol(li=[17, 31, 91, 18, 42, 1, 9], target=18):\n    return li.index(target)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListAt_1",
    "sat": "def sat(i: int, li=[-62, -29, 73, -21, -45, -20, -74, -69, 30, -25, 16, 82, -31, 93, -20, 75, 68, 86], target=73):\n    \"\"\"Find the index of an item in a list. Any such index is fine.\"\"\"\n    return li[i] == target",
    "sols": [
      "def sol(li=[-62, -29, 73, -21, -45, -20, -74, -69, 30, -25, 16, 82, -31, 93, -20, 75, 68, 86], target=73):\n    return li.index(target)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListAt_2",
    "sat": "def sat(i: int, li=[99, 51, -28, -69, -90, -15, 7, -67], target=51):\n    \"\"\"Find the index of an item in a list. Any such index is fine.\"\"\"\n    return li[i] == target",
    "sols": [
      "def sol(li=[99, 51, -28, -69, -90, -15, 7, -67], target=51):\n    return li.index(target)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListAt_3",
    "sat": "def sat(i: int, li=[-68, 81, 13, -5, 81, 75, -3, -73, -89, 72], target=13):\n    \"\"\"Find the index of an item in a list. Any such index is fine.\"\"\"\n    return li[i] == target",
    "sols": [
      "def sol(li=[-68, 81, 13, -5, 81, 75, -3, -73, -89, 72], target=13):\n    return li.index(target)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListAt_4",
    "sat": "def sat(i: int, li=[51, -68, -57, 8, 77, -80, -28, -24, 11, 40, 57, 60, 53], target=11):\n    \"\"\"Find the index of an item in a list. Any such index is fine.\"\"\"\n    return li[i] == target",
    "sols": [
      "def sol(li=[51, -68, -57, 8, 77, -80, -28, -24, 11, 40, 57, 60, 53], target=11):\n    return li.index(target)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListAt_5",
    "sat": "def sat(i: int, li=[36], target=36):\n    \"\"\"Find the index of an item in a list. Any such index is fine.\"\"\"\n    return li[i] == target",
    "sols": [
      "def sol(li=[36], target=36):\n    return li.index(target)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListAt_6",
    "sat": "def sat(i: int, li=[-85, 33, 55, -18, -90, 13, -88, -1, 40, -6, -41, -31, -47], target=-88):\n    \"\"\"Find the index of an item in a list. Any such index is fine.\"\"\"\n    return li[i] == target",
    "sols": [
      "def sol(li=[-85, 33, 55, -18, -90, 13, -88, -1, 40, -6, -41, -31, -47], target=-88):\n    return li.index(target)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListAt_7",
    "sat": "def sat(i: int, li=[41, 14], target=41):\n    \"\"\"Find the index of an item in a list. Any such index is fine.\"\"\"\n    return li[i] == target",
    "sols": [
      "def sol(li=[41, 14], target=41):\n    return li.index(target)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListAt_8",
    "sat": "def sat(i: int, li=[-83, 33, -81, -86, -89, -50, -71, -30, 47, -27, -66, -3, 22, 84, -11, 19, -6], target=33):\n    \"\"\"Find the index of an item in a list. Any such index is fine.\"\"\"\n    return li[i] == target",
    "sols": [
      "def sol(li=[-83, 33, -81, -86, -89, -50, -71, -30, 47, -27, -66, -3, 22, 84, -11, 19, -6], target=33):\n    return li.index(target)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListAt_9",
    "sat": "def sat(i: int, li=[-64, 22, -61, 75], target=-61):\n    \"\"\"Find the index of an item in a list. Any such index is fine.\"\"\"\n    return li[i] == target",
    "sols": [
      "def sol(li=[-64, 22, -61, 75], target=-61):\n    return li.index(target)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListNegAt_0",
    "sat": "def sat(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=91):\n    \"\"\"Find the index of an item in a list using negative indexing.\"\"\"\n    return li[i] == target and i < 0",
    "sols": [
      "def sol(li=[17, 31, 91, 18, 42, 1, 9], target=91):\n    return li.index(target) - len(li)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListNegAt_1",
    "sat": "def sat(i: int, li=[78, 91, -67, -5, 30, -42, 68, 32, 96, -55, -39, -46, 90], target=-39):\n    \"\"\"Find the index of an item in a list using negative indexing.\"\"\"\n    return li[i] == target and i < 0",
    "sols": [
      "def sol(li=[78, 91, -67, -5, 30, -42, 68, 32, 96, -55, -39, -46, 90], target=-39):\n    return li.index(target) - len(li)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListNegAt_2",
    "sat": "def sat(i: int, li=[-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target=-42):\n    \"\"\"Find the index of an item in a list using negative indexing.\"\"\"\n    return li[i] == target and i < 0",
    "sols": [
      "def sol(li=[-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target=-42):\n    return li.index(target) - len(li)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListNegAt_3",
    "sat": "def sat(i: int, li=[41, -52, -40, -35, 53, -98, 83, 63, -18, 74, -8, -93, -3, 22, 30], target=53):\n    \"\"\"Find the index of an item in a list using negative indexing.\"\"\"\n    return li[i] == target and i < 0",
    "sols": [
      "def sol(li=[41, -52, -40, -35, 53, -98, 83, 63, -18, 74, -8, -93, -3, 22, 30], target=53):\n    return li.index(target) - len(li)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListNegAt_4",
    "sat": "def sat(i: int, li=[95, 51, 76, 63, -97, -32], target=-32):\n    \"\"\"Find the index of an item in a list using negative indexing.\"\"\"\n    return li[i] == target and i < 0",
    "sols": [
      "def sol(li=[95, 51, 76, 63, -97, -32], target=-32):\n    return li.index(target) - len(li)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListNegAt_5",
    "sat": "def sat(i: int, li=[36, -29, 36, 76, -73, 87], target=-73):\n    \"\"\"Find the index of an item in a list using negative indexing.\"\"\"\n    return li[i] == target and i < 0",
    "sols": [
      "def sol(li=[36, -29, 36, 76, -73, 87], target=-73):\n    return li.index(target) - len(li)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListNegAt_6",
    "sat": "def sat(i: int, li=[-80, -85, -6, -63, -20, -64, -77, 2, 37, -47, 50, -61, 35, 98, 6, 63, -14], target=6):\n    \"\"\"Find the index of an item in a list using negative indexing.\"\"\"\n    return li[i] == target and i < 0",
    "sols": [
      "def sol(li=[-80, -85, -6, -63, -20, -64, -77, 2, 37, -47, 50, -61, 35, 98, 6, 63, -14], target=6):\n    return li.index(target) - len(li)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListNegAt_7",
    "sat": "def sat(i: int, li=[-20, 67, 53, 73, -60, 23, -55, 47], target=-20):\n    \"\"\"Find the index of an item in a list using negative indexing.\"\"\"\n    return li[i] == target and i < 0",
    "sols": [
      "def sol(li=[-20, 67, 53, 73, -60, 23, -55, 47], target=-20):\n    return li.index(target) - len(li)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListNegAt_8",
    "sat": "def sat(i: int, li=[14, 16, 91, 34, -60, -39, 12, 10, 48, 64, -10, 63, 24, 49, -3, -34, -86], target=34):\n    \"\"\"Find the index of an item in a list using negative indexing.\"\"\"\n    return li[i] == target and i < 0",
    "sols": [
      "def sol(li=[14, 16, 91, 34, -60, -39, 12, 10, 48, 64, -10, 63, 24, 49, -3, -34, -86], target=34):\n    return li.index(target) - len(li)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListNegAt_9",
    "sat": "def sat(i: int, li=[31, -38, 97, 81, -43, -12, -23, 20, 43, 71, 55, 87, 23, -42], target=87):\n    \"\"\"Find the index of an item in a list using negative indexing.\"\"\"\n    return li[i] == target and i < 0",
    "sols": [
      "def sol(li=[31, -38, 97, 81, -43, -12, -23, 20, 43, 71, 55, 87, 23, -42], target=87):\n    return li.index(target) - len(li)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListSlice_0",
    "sat": "def sat(inds: List[int], li=[42, 18, 21, 103, -2, 11], target=[-2, 21, 42]):\n    \"\"\"Find three slice indices to achieve a given list slice\"\"\"\n    i, j, k = inds\n    return li[i:j:k] == target",
    "sols": [
      "def sol(li=[42, 18, 21, 103, -2, 11], target=[-2, 21, 42]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListSlice_1",
    "sat": "def sat(inds: List[int], li=[-11, 92, 42, 18, -83, 55, 13, 14, -67, -58, -41], target=[-67]):\n    \"\"\"Find three slice indices to achieve a given list slice\"\"\"\n    i, j, k = inds\n    return li[i:j:k] == target",
    "sols": [
      "def sol(li=[-11, 92, 42, 18, -83, 55, 13, 14, -67, -58, -41], target=[-67]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListSlice_2",
    "sat": "def sat(inds: List[int], li=[-53, -81, -92, 22, -67], target=[-53, -81, -92]):\n    \"\"\"Find three slice indices to achieve a given list slice\"\"\"\n    i, j, k = inds\n    return li[i:j:k] == target",
    "sols": [
      "def sol(li=[-53, -81, -92, 22, -67], target=[-53, -81, -92]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListSlice_3",
    "sat": "def sat(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]):\n    \"\"\"Find three slice indices to achieve a given list slice\"\"\"\n    i, j, k = inds\n    return li[i:j:k] == target",
    "sols": [
      "def sol(li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListSlice_4",
    "sat": "def sat(inds: List[int], li=[26, -25, -18, -53, 18, -71, -82, 20, -100, -84, -85], target=[-25]):\n    \"\"\"Find three slice indices to achieve a given list slice\"\"\"\n    i, j, k = inds\n    return li[i:j:k] == target",
    "sols": [
      "def sol(li=[26, -25, -18, -53, 18, -71, -82, 20, -100, -84, -85], target=[-25]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListSlice_5",
    "sat": "def sat(inds: List[int], li=[65, -22, -94, 3, -20, 67], target=[65, -22, -94]):\n    \"\"\"Find three slice indices to achieve a given list slice\"\"\"\n    i, j, k = inds\n    return li[i:j:k] == target",
    "sols": [
      "def sol(li=[65, -22, -94, 3, -20, 67], target=[65, -22, -94]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListSlice_6",
    "sat": "def sat(inds: List[int], li=[-38, -24, -15, -59, -32, -91, -55, -45, 44, 35, 93, 38, -67, -73, 93], target=[-32]):\n    \"\"\"Find three slice indices to achieve a given list slice\"\"\"\n    i, j, k = inds\n    return li[i:j:k] == target",
    "sols": [
      "def sol(li=[-38, -24, -15, -59, -32, -91, -55, -45, 44, 35, 93, 38, -67, -73, 93], target=[-32]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListSlice_7",
    "sat": "def sat(inds: List[int], li=[92, -38, 6, -95, -79, -59, -51, 80, 71, -20, -40, -85, -80, -91, -67, -83, -40], target=[-80]):\n    \"\"\"Find three slice indices to achieve a given list slice\"\"\"\n    i, j, k = inds\n    return li[i:j:k] == target",
    "sols": [
      "def sol(li=[92, -38, 6, -95, -79, -59, -51, 80, 71, -20, -40, -85, -80, -91, -67, -83, -40], target=[-80]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListSlice_8",
    "sat": "def sat(inds: List[int], li=[-54, -16, -65, -13], target=[-13]):\n    \"\"\"Find three slice indices to achieve a given list slice\"\"\"\n    i, j, k = inds\n    return li[i:j:k] == target",
    "sols": [
      "def sol(li=[-54, -16, -65, -13], target=[-13]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListSlice_9",
    "sat": "def sat(inds: List[int], li=[41, -86, -41, 4, 58, -71, 45, 18, -97, -44, -67, -36, 30, 86, -54], target=[45]):\n    \"\"\"Find three slice indices to achieve a given list slice\"\"\"\n    i, j, k = inds\n    return li[i:j:k] == target",
    "sols": [
      "def sol(li=[41, -86, -41, 4, 58, -71, 45, 18, -97, -44, -67, -36, 30, 86, -54], target=[45]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIndex_0",
    "sat": "def sat(item: int, li=[17, 2, 3, 9, 11, 11], index=4):\n    \"\"\"Find the item whose first index in li is index\"\"\"\n    return li.index(item) == index",
    "sols": [
      "def sol(li=[17, 2, 3, 9, 11, 11], index=4):\n    return li[index]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIndex_1",
    "sat": "def sat(item: int, li=[93, -13, -56, 19], index=2):\n    \"\"\"Find the item whose first index in li is index\"\"\"\n    return li.index(item) == index",
    "sols": [
      "def sol(li=[93, -13, -56, 19], index=2):\n    return li[index]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIndex_2",
    "sat": "def sat(item: int, li=[-79, 49, 4, -75, -66, -76, 37, -62, -35, -79, 68, 82, -11, -71, 63, -82, 22, 65], index=2):\n    \"\"\"Find the item whose first index in li is index\"\"\"\n    return li.index(item) == index",
    "sols": [
      "def sol(li=[-79, 49, 4, -75, -66, -76, 37, -62, -35, -79, 68, 82, -11, -71, 63, -82, 22, 65], index=2):\n    return li[index]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIndex_3",
    "sat": "def sat(item: int, li=[96, -61, 50, -49, -1, -23, -35], index=3):\n    \"\"\"Find the item whose first index in li is index\"\"\"\n    return li.index(item) == index",
    "sols": [
      "def sol(li=[96, -61, 50, -49, -1, -23, -35], index=3):\n    return li[index]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIndex_4",
    "sat": "def sat(item: int, li=[26, -90, 89], index=0):\n    \"\"\"Find the item whose first index in li is index\"\"\"\n    return li.index(item) == index",
    "sols": [
      "def sol(li=[26, -90, 89], index=0):\n    return li[index]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIndex_5",
    "sat": "def sat(item: int, li=[87, -88, 84, -52, -92, 37, -41, 18, 5, 26, 54, -79, 1, 11, 97], index=14):\n    \"\"\"Find the item whose first index in li is index\"\"\"\n    return li.index(item) == index",
    "sols": [
      "def sol(li=[87, -88, 84, -52, -92, 37, -41, 18, 5, 26, 54, -79, 1, 11, 97], index=14):\n    return li[index]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIndex_6",
    "sat": "def sat(item: int, li=[-78], index=0):\n    \"\"\"Find the item whose first index in li is index\"\"\"\n    return li.index(item) == index",
    "sols": [
      "def sol(li=[-78], index=0):\n    return li[index]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIndex_7",
    "sat": "def sat(item: int, li=[-16, -96, -36, 25, 66, -17, -98, -79, -51, -16, -24, -71, 1, -10, -30, -52, -2], index=5):\n    \"\"\"Find the item whose first index in li is index\"\"\"\n    return li.index(item) == index",
    "sols": [
      "def sol(li=[-16, -96, -36, 25, 66, -17, -98, -79, -51, -16, -24, -71, 1, -10, -30, -52, -2], index=5):\n    return li[index]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIndex_8",
    "sat": "def sat(item: int, li=[-43, 9], index=0):\n    \"\"\"Find the item whose first index in li is index\"\"\"\n    return li.index(item) == index",
    "sols": [
      "def sol(li=[-43, 9], index=0):\n    return li[index]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIndex_9",
    "sat": "def sat(item: int, li=[59, 0, -90, 66, 21, 67], index=0):\n    \"\"\"Find the item whose first index in li is index\"\"\"\n    return li.index(item) == index",
    "sols": [
      "def sol(li=[59, 0, -90, 66, 21, 67], index=0):\n    return li[index]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIndex2_0",
    "sat": "def sat(li: List[int], i=29, index=10412):\n    \"\"\"Find a list that contains i first at index index\"\"\"\n    return li.index(i) == index",
    "sols": [
      "def sol(i=29, index=10412):\n    return [i - 1] * index + [i]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIndex2_1",
    "sat": "def sat(li: List[int], i=-99167, index=48792):\n    \"\"\"Find a list that contains i first at index index\"\"\"\n    return li.index(i) == index",
    "sols": [
      "def sol(i=-99167, index=48792):\n    return [i - 1] * index + [i]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIndex2_2",
    "sat": "def sat(li: List[int], i=-67679, index=87059):\n    \"\"\"Find a list that contains i first at index index\"\"\"\n    return li.index(i) == index",
    "sols": [
      "def sol(i=-67679, index=87059):\n    return [i - 1] * index + [i]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIndex2_3",
    "sat": "def sat(li: List[int], i=81395, index=79231):\n    \"\"\"Find a list that contains i first at index index\"\"\"\n    return li.index(i) == index",
    "sols": [
      "def sol(i=81395, index=79231):\n    return [i - 1] * index + [i]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIndex2_4",
    "sat": "def sat(li: List[int], i=63344, index=1583):\n    \"\"\"Find a list that contains i first at index index\"\"\"\n    return li.index(i) == index",
    "sols": [
      "def sol(i=63344, index=1583):\n    return [i - 1] * index + [i]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIndex2_5",
    "sat": "def sat(li: List[int], i=-22545, index=83757):\n    \"\"\"Find a list that contains i first at index index\"\"\"\n    return li.index(i) == index",
    "sols": [
      "def sol(i=-22545, index=83757):\n    return [i - 1] * index + [i]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIndex2_6",
    "sat": "def sat(li: List[int], i=-50200, index=90147):\n    \"\"\"Find a list that contains i first at index index\"\"\"\n    return li.index(i) == index",
    "sols": [
      "def sol(i=-50200, index=90147):\n    return [i - 1] * index + [i]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIndex2_7",
    "sat": "def sat(li: List[int], i=-17099, index=34646):\n    \"\"\"Find a list that contains i first at index index\"\"\"\n    return li.index(i) == index",
    "sols": [
      "def sol(i=-17099, index=34646):\n    return [i - 1] * index + [i]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIndex2_8",
    "sat": "def sat(li: List[int], i=51149, index=61676):\n    \"\"\"Find a list that contains i first at index index\"\"\"\n    return li.index(i) == index",
    "sols": [
      "def sol(i=51149, index=61676):\n    return [i - 1] * index + [i]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIndex2_9",
    "sat": "def sat(li: List[int], i=80068, index=26514):\n    \"\"\"Find a list that contains i first at index index\"\"\"\n    return li.index(i) == index",
    "sols": [
      "def sol(i=80068, index=26514):\n    return [i - 1] * index + [i]"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIn_0",
    "sat": "def sat(s: str, a=['cat', 'dot', 'bird'], b=['tree', 'fly', 'dot']):\n    \"\"\"Find an item that is in both lists a and b\"\"\"\n    return s in a and s in b",
    "sols": [
      "def sol(a=['cat', 'dot', 'bird'], b=['tree', 'fly', 'dot']):\n    return next(s for s in b if s in a)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIn_1",
    "sat": "def sat(s: str, a=['xetex', 'jomuboxuc', 'nyfiranuri', 'curu', 'jehykexethinun', 'bumekynuxinit', 'cymelatabegi', 'jumuvufotextasa', 'cotharasyfukakiwoc', 'fuvyvavi', 'gohavelomet', 'hibymomotohywehathi', 'jyzucakaq', 'chihyx', 'wukikogy', 'pegydozetebegafugyf', 'chywadetextekesyjup', 'xysecaw', 'ryzafusul', 'lojychurep', 'vivutolimifa', 'pysiquikywoty', 'thitexturykasoquifet', 'va', 'nagetextilac', 'tex', 'zechocha', 'susatexty', 'ch'], b=['vesaredu', 'textyjun', 'hijilenafotycoch', 'fofytextulidajekymos', 'thudothukuzaxug', 'dythezutolihibinafyj', 'hadid', 'zyly', 'mu', 'chywadetextekesyjup', 'zekyrivequi', 'pebycipohivam', 'texterekuwudut', 'c', 'sanidithuh', 'ritextuchik', 'ny', 'cym', 'cirok', 'kavuquithochazethej', 'zikechep', 'kesitabuduzu', 'duchequ', 'fuluhesowyjugehusab', 'tof', 'tu', 'textichagekochoquovo', 'bo', 'thac', 'hytextac', 'nerehufymex', 'jezyletextiquebositi', 'm', 'kathithowefyvoced', 'rityjivoxadydyzatiq', 'nuxaritutebacygevyq', 'thyjaxirumenaquuxy', 'gizydylot', 'textite', 'guchikek', 'fas', 'pabipapiro', 'fechiduchu', 'pexijis', 'gojep', 'quinatextit', 'chaqu', 'xyxyjos', 'pudibothytigiwumucex', 'josadubizy', 'jy', 'komazibomapothequev', 'licogatextuliletuxi', 'gus', 'nylyxyjibikimet', 'tafo']):\n    \"\"\"Find an item that is in both lists a and b\"\"\"\n    return s in a and s in b",
    "sols": [
      "def sol(a=['xetex', 'jomuboxuc', 'nyfiranuri', 'curu', 'jehykexethinun', 'bumekynuxinit', 'cymelatabegi', 'jumuvufotextasa', 'cotharasyfukakiwoc', 'fuvyvavi', 'gohavelomet', 'hibymomotohywehathi', 'jyzucakaq', 'chihyx', 'wukikogy', 'pegydozetebegafugyf', 'chywadetextekesyjup', 'xysecaw', 'ryzafusul', 'lojychurep', 'vivutolimifa', 'pysiquikywoty', 'thitexturykasoquifet', 'va', 'nagetextilac', 'tex', 'zechocha', 'susatexty', 'ch'], b=['vesaredu', 'textyjun', 'hijilenafotycoch', 'fofytextulidajekymos', 'thudothukuzaxug', 'dythezutolihibinafyj', 'hadid', 'zyly', 'mu', 'chywadetextekesyjup', 'zekyrivequi', 'pebycipohivam', 'texterekuwudut', 'c', 'sanidithuh', 'ritextuchik', 'ny', 'cym', 'cirok', 'kavuquithochazethej', 'zikechep', 'kesitabuduzu', 'duchequ', 'fuluhesowyjugehusab', 'tof', 'tu', 'textichagekochoquovo', 'bo', 'thac', 'hytextac', 'nerehufymex', 'jezyletextiquebositi', 'm', 'kathithowefyvoced', 'rityjivoxadydyzatiq', 'nuxaritutebacygevyq', 'thyjaxirumenaquuxy', 'gizydylot', 'textite', 'guchikek', 'fas', 'pabipapiro', 'fechiduchu', 'pexijis', 'gojep', 'quinatextit', 'chaqu', 'xyxyjos', 'pudibothytigiwumucex', 'josadubizy', 'jy', 'komazibomapothequev', 'licogatextuliletuxi', 'gus', 'nylyxyjibikimet', 'tafo']):\n    return next(s for s in b if s in a)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIn_2",
    "sat": "def sat(s: str, a=['bututimatabel', 'zezahabiry', 'mipytext', 'bujokacyrulihir', 'cyvagofaquothoseza', 'guhebalequepytex', 'tyhithuthygatextity', 'chizichuc', 'textoxodenekokechona', 'texte', 'mygafifet', 'vixathokivy', 'xe', 'moq', 'quokopy', 'cixoka', 'wiz', 'wyturasutabidipif', 'q', 'gochujuvub', 'textogow', 'rogizasog', 'fimoxynudob', 'byjythohimowyquich', 'moduxatanogococ', 'tunuchikywichykyxyge', 'namixotextes', 'nocoguthosoxonahu', 'xorydyhi', 'dadohojex', 'pi', 'wiquocaso', 'tyjegu', 'juquath', 'dythufyn', 'sehafur', 'sylupivyzequefujet', 'hotextylyquahudivov', 'wunich', 'fijyhilyc', 'rirymequunezuv', 'zizunylihadowys', 'zesuxikevaquus', 'thecisequevyth', 'cucyquefytextu', 'xy', 'quuxin', 'miherahita', 'texatextoxyta', 'tythyjuly', 'tehesyju', 'reg', 'ridilusycanejap', 'fo', 'chucatazyrejucathibi', 'textythacete', 'huhiquekychyh', 'xykuvebylyhinyc', 'zadedixoxoparyducena', 'wycathomoniva', 'textuwuwathiziq', 'textijiw', 'rigidichukuchexorute', 'majixodokalij', 'hexebitoxumuvodese', 'hybat', 'thojutextomochote', 'textaxuquyg', 'queluhatex'], b=['gume', 'zatum', 'kochaxybupy', 'gex', 'vithiby', 'lygarethaquedehabub', 'tochek', 'v', 'wis', 'remywerinyboweropot', 'nybichychafizurup', 'zokabugyc', 'ny', 'moruwicoponuricuw', 'zirijikuhabivywah', 'dus', 'toxirit', 'gilanih', 'hif', 'vuhezobinehahewi', 'quujihus', 'chej', 'g', 'pypomaquiwusisyvuma', 'to', 'c', 'chutesumalanozeb', 'chupehozukiquodisese', 'xygiwot', 'semubaquav', 'pihiwidosudetextet', 'quegatagicu', 'quutydychy', 'chuzeby', 'jefythasapag', 'bytathoti', 'thimobaquykisabepec', 'saluwax', 'thi', 'kyneroravexuquoto', 'jusudybahebuxypepahe', 'f', 'zapufefek', 'mumogawen', 'quotyhot', 'hybamukelo', 'picatextujycotodyj', 'be', 'pytextyfa', 'tile', 'dotextazuchubuk', 'choguc', 'wi', 'setepicydavumahebe', 'wyjo', 'mirukuwyfuwihoqu', 'q', 'kegytegu', 'kegoquibyguxexajebid', 'hyfech', 'humovomefoly', 'tupetox', 'gevogibax', 'vuxotext', 'miluparaj', 'bathad', 'tily', 'theranydygiryc', 'dasaxatext', 'guhebalequepytex', 'v', 'gocuxomecapylewaj']):\n    \"\"\"Find an item that is in both lists a and b\"\"\"\n    return s in a and s in b",
    "sols": [
      "def sol(a=['bututimatabel', 'zezahabiry', 'mipytext', 'bujokacyrulihir', 'cyvagofaquothoseza', 'guhebalequepytex', 'tyhithuthygatextity', 'chizichuc', 'textoxodenekokechona', 'texte', 'mygafifet', 'vixathokivy', 'xe', 'moq', 'quokopy', 'cixoka', 'wiz', 'wyturasutabidipif', 'q', 'gochujuvub', 'textogow', 'rogizasog', 'fimoxynudob', 'byjythohimowyquich', 'moduxatanogococ', 'tunuchikywichykyxyge', 'namixotextes', 'nocoguthosoxonahu', 'xorydyhi', 'dadohojex', 'pi', 'wiquocaso', 'tyjegu', 'juquath', 'dythufyn', 'sehafur', 'sylupivyzequefujet', 'hotextylyquahudivov', 'wunich', 'fijyhilyc', 'rirymequunezuv', 'zizunylihadowys', 'zesuxikevaquus', 'thecisequevyth', 'cucyquefytextu', 'xy', 'quuxin', 'miherahita', 'texatextoxyta', 'tythyjuly', 'tehesyju', 'reg', 'ridilusycanejap', 'fo', 'chucatazyrejucathibi', 'textythacete', 'huhiquekychyh', 'xykuvebylyhinyc', 'zadedixoxoparyducena', 'wycathomoniva', 'textuwuwathiziq', 'textijiw', 'rigidichukuchexorute', 'majixodokalij', 'hexebitoxumuvodese', 'hybat', 'thojutextomochote', 'textaxuquyg', 'queluhatex'], b=['gume', 'zatum', 'kochaxybupy', 'gex', 'vithiby', 'lygarethaquedehabub', 'tochek', 'v', 'wis', 'remywerinyboweropot', 'nybichychafizurup', 'zokabugyc', 'ny', 'moruwicoponuricuw', 'zirijikuhabivywah', 'dus', 'toxirit', 'gilanih', 'hif', 'vuhezobinehahewi', 'quujihus', 'chej', 'g', 'pypomaquiwusisyvuma', 'to', 'c', 'chutesumalanozeb', 'chupehozukiquodisese', 'xygiwot', 'semubaquav', 'pihiwidosudetextet', 'quegatagicu', 'quutydychy', 'chuzeby', 'jefythasapag', 'bytathoti', 'thimobaquykisabepec', 'saluwax', 'thi', 'kyneroravexuquoto', 'jusudybahebuxypepahe', 'f', 'zapufefek', 'mumogawen', 'quotyhot', 'hybamukelo', 'picatextujycotodyj', 'be', 'pytextyfa', 'tile', 'dotextazuchubuk', 'choguc', 'wi', 'setepicydavumahebe', 'wyjo', 'mirukuwyfuwihoqu', 'q', 'kegytegu', 'kegoquibyguxexajebid', 'hyfech', 'humovomefoly', 'tupetox', 'gevogibax', 'vuxotext', 'miluparaj', 'bathad', 'tily', 'theranydygiryc', 'dasaxatext', 'guhebalequepytex', 'v', 'gocuxomecapylewaj']):\n    return next(s for s in b if s in a)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIn_3",
    "sat": "def sat(s: str, a=['thachak', 'xuchyzyzazi', 'bilewejoquowylo', 'chogokim', 'kuloxozu', 'capokaf', 'didadadejunukosazi', 'zethucun', 'tygorub', 'lochydigyt', 'dyquuhycusi', 'wagupolovapy', 'chowace', 'zozawethychax', 'xohuhuqui', 'tatylisigar', 'c', 'kakopuzysycasewit', 'rekatebinidyvuchitet', 'popi', 'chepebaze', 'textut', 'fymehap', 'c', 'wodumogovolacabasot', 'tixihidafutexto', 'dycubichucyneweve', 'setofa', 'cudaxediquy', 'namof', 'qua', 'chetextof', 'cochydededaxyzuj', 'winutaj', 'nidyjutothovobydizy', 'sichequaxohojethihy', 'cubusycip', 'pynoconic', 'kyt', 'thop', 'kewotochelocyboz', 'z', 'c', 'q', 'bonyquyx', 'jothec', 'fyzozynygiperythada', 'lipadatuzisaduthyt', 'nithujyxymethot', 'vewariq', 'nejitextole', 'raxiv', 'hamim', 'qua', 'kytextehekaryp', 'jaquu', 'wozuthevith', 'f', 'jugevizyfu', 'cywo', 'w', 'surajotext', 'vilujetutitachivy', 'textequysuninutuqu', 'fevawybok', 'lythehythu', 'nykochachofitit', 'gikenadubit', 'thexyjy', 'piquyzyxichoc', 'rilaquucham', 'fa', 'mysihumotexto', 'xochogekumipoquidi', 'jimynusyte', 'textexysuzipichaw', 'mut', 'jiwyx', 'tojiwedoxevosubavy', 'dix', 'dogetexto', 'chysafyzelefocothin', 'xitext', 'machibokudyh', 'ronebupapapygyceb', 'dedytejyretavewytasi', 'jobog', 'namychyt', 'textycapudul', 'jaxybatexto', 'pamuwysafupaxowus', 'lycazivafyj', 'lelologufenofajogofi', 'thety', 'bunotextoca', 'nexaravuq', 'natu'], b=['namychyt', 'mathapachobat', 'timorohopotak']):\n    \"\"\"Find an item that is in both lists a and b\"\"\"\n    return s in a and s in b",
    "sols": [
      "def sol(a=['thachak', 'xuchyzyzazi', 'bilewejoquowylo', 'chogokim', 'kuloxozu', 'capokaf', 'didadadejunukosazi', 'zethucun', 'tygorub', 'lochydigyt', 'dyquuhycusi', 'wagupolovapy', 'chowace', 'zozawethychax', 'xohuhuqui', 'tatylisigar', 'c', 'kakopuzysycasewit', 'rekatebinidyvuchitet', 'popi', 'chepebaze', 'textut', 'fymehap', 'c', 'wodumogovolacabasot', 'tixihidafutexto', 'dycubichucyneweve', 'setofa', 'cudaxediquy', 'namof', 'qua', 'chetextof', 'cochydededaxyzuj', 'winutaj', 'nidyjutothovobydizy', 'sichequaxohojethihy', 'cubusycip', 'pynoconic', 'kyt', 'thop', 'kewotochelocyboz', 'z', 'c', 'q', 'bonyquyx', 'jothec', 'fyzozynygiperythada', 'lipadatuzisaduthyt', 'nithujyxymethot', 'vewariq', 'nejitextole', 'raxiv', 'hamim', 'qua', 'kytextehekaryp', 'jaquu', 'wozuthevith', 'f', 'jugevizyfu', 'cywo', 'w', 'surajotext', 'vilujetutitachivy', 'textequysuninutuqu', 'fevawybok', 'lythehythu', 'nykochachofitit', 'gikenadubit', 'thexyjy', 'piquyzyxichoc', 'rilaquucham', 'fa', 'mysihumotexto', 'xochogekumipoquidi', 'jimynusyte', 'textexysuzipichaw', 'mut', 'jiwyx', 'tojiwedoxevosubavy', 'dix', 'dogetexto', 'chysafyzelefocothin', 'xitext', 'machibokudyh', 'ronebupapapygyceb', 'dedytejyretavewytasi', 'jobog', 'namychyt', 'textycapudul', 'jaxybatexto', 'pamuwysafupaxowus', 'lycazivafyj', 'lelologufenofajogofi', 'thety', 'bunotextoca', 'nexaravuq', 'natu'], b=['namychyt', 'mathapachobat', 'timorohopotak']):\n    return next(s for s in b if s in a)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIn_4",
    "sat": "def sat(s: str, a=['quisolu', 'nixyquigaseq', 'fawaholafojelaxud', 'cuxoniso', 'defejaz', 'mytext', 'gochavowetheva', 'xijehychojexat', 'duthagobejudozi', 'thiquijuquorybu'], b=['cys', 'zatext', 'cifihihechujozimo', 'jycichithetyk', 'becitonamuhuligyv', 'sadak', 'hochavinapatanapiz', 'fiwidifop', 'funidosikeput', 'fewat', 'mypyhalevituvit', 'quytynuthothy', 'c', 'zydecodul', 'vahychuke', 'wy', 'mytext', 'tex', 'quevasowodique', 'hythiquunymychilyl', 'luxivyvocuwa']):\n    \"\"\"Find an item that is in both lists a and b\"\"\"\n    return s in a and s in b",
    "sols": [
      "def sol(a=['quisolu', 'nixyquigaseq', 'fawaholafojelaxud', 'cuxoniso', 'defejaz', 'mytext', 'gochavowetheva', 'xijehychojexat', 'duthagobejudozi', 'thiquijuquorybu'], b=['cys', 'zatext', 'cifihihechujozimo', 'jycichithetyk', 'becitonamuhuligyv', 'sadak', 'hochavinapatanapiz', 'fiwidifop', 'funidosikeput', 'fewat', 'mypyhalevituvit', 'quytynuthothy', 'c', 'zydecodul', 'vahychuke', 'wy', 'mytext', 'tex', 'quevasowodique', 'hythiquunymychilyl', 'luxivyvocuwa']):\n    return next(s for s in b if s in a)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIn_5",
    "sat": "def sat(s: str, a=['z', 'coxas', 'thefynakugucajanaw', 'xax', 'textiquyselakaruq', 'xenakachepygymusalif', 'cadehaxethydej', 'pitextyzusofawy', 'xewosytextijepajuto', 'milefary', 'dynuguna', 'witextisyleniraj', 'si', 'suquejuw', 'mosiran', 'gome', 'te', 'kotextewi', 'salomijukakijukivate', 'kujevudepo', 'ximoraziquacafeje'], b=['jox', 'text', 'chobexirif', 'chuzocacinyhutextit', 'fi', 'pinithupo', 'hacuh', 'cadutex', 'no', 'vasarydytextyt', 'vejyh', 'hime', 'wixefexewywi', 'bax', 'sizivolono', 'kimigute', 'thefynakugucajanaw', 'lyb', 'textetisutextuhepi', 'c', 'gyg', 'pulazozuhodavy', 'v', 'cenaz', 'xodulocybixosebagoce', 'tihaquufathyb', 'hatoquukilywoja', 'wocaritihy', 'kyzechomixyne', 'jibaxuv', 'voquydime', 'pubutuxatext', 'te', 'xili', 'chide', 'ji', 'jyka', 'chiwopyhafujucaquo', 'levuj', 'fahevamocho', 'waquycupoku', 'jumigolivageno', 'th', 'cokukal', 'pathicebe', 'chaquu', 'bicanalocuthihenaxy', 'dimopi', 'chequykycucyquowyte', 'nexe', 'dokut', 'quythimed', 'mizinyz', 'huroko', 'hac', 'ryt', 'methequawitextopoko', 'gokibaquodykyquo', 'vinuxitextakyhi', 'saluputipuqu', 'bogy']):\n    \"\"\"Find an item that is in both lists a and b\"\"\"\n    return s in a and s in b",
    "sols": [
      "def sol(a=['z', 'coxas', 'thefynakugucajanaw', 'xax', 'textiquyselakaruq', 'xenakachepygymusalif', 'cadehaxethydej', 'pitextyzusofawy', 'xewosytextijepajuto', 'milefary', 'dynuguna', 'witextisyleniraj', 'si', 'suquejuw', 'mosiran', 'gome', 'te', 'kotextewi', 'salomijukakijukivate', 'kujevudepo', 'ximoraziquacafeje'], b=['jox', 'text', 'chobexirif', 'chuzocacinyhutextit', 'fi', 'pinithupo', 'hacuh', 'cadutex', 'no', 'vasarydytextyt', 'vejyh', 'hime', 'wixefexewywi', 'bax', 'sizivolono', 'kimigute', 'thefynakugucajanaw', 'lyb', 'textetisutextuhepi', 'c', 'gyg', 'pulazozuhodavy', 'v', 'cenaz', 'xodulocybixosebagoce', 'tihaquufathyb', 'hatoquukilywoja', 'wocaritihy', 'kyzechomixyne', 'jibaxuv', 'voquydime', 'pubutuxatext', 'te', 'xili', 'chide', 'ji', 'jyka', 'chiwopyhafujucaquo', 'levuj', 'fahevamocho', 'waquycupoku', 'jumigolivageno', 'th', 'cokukal', 'pathicebe', 'chaquu', 'bicanalocuthihenaxy', 'dimopi', 'chequykycucyquowyte', 'nexe', 'dokut', 'quythimed', 'mizinyz', 'huroko', 'hac', 'ryt', 'methequawitextopoko', 'gokibaquodykyquo', 'vinuxitextakyhi', 'saluputipuqu', 'bogy']):\n    return next(s for s in b if s in a)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIn_6",
    "sat": "def sat(s: str, a=['lumoguwamyhut', 'thajokotextejakizug', 'tynitextyq', 'quuquujolifysy', 'but', 'n', 'xifytextechafu', 'quujyb', 'n', 'pisaxokychadix', 'texteraqui', 'textizipite', 'kibowerulecijytextex', 'lypelylahutexty', 'hyk', 'vedycithifipyxidyhe', 'chakovixo', 'syquaga', 'sycekohododachiby', 'vutakagaralewiqui', 'quitextumaquefusux', 'tovyhezigageguti', 'defynorudabichyxo', 'quexanyvuthukaf', 'muquoquechok', 'vukydetextufyniso', 'chefojigoxa', 'sothawanerov', 'cykutozathoratextos', 'jiquibivug', 'kylubixoduvapefozelo', 'xotha', 'tekiritunothuxat', 'duxylyvitextocowug', 'fethachoga', 'pehujovowal', 'gizamyxojehuthequy', 'hygamokily', 'zomeque', 'zyma', 'chynybunegiz', 'p', 'kewibohaxiw', 'gaduhuxiquuzach', 'p', 'pichumuvythopy', 'rizaguquequychiw', 'gelorysyd', 'za', 'textapelusykerudub', 'jipudiradutext', 'lovyvutexto', 'relutechacowel', 'zycydonigutyfunir', 'textakedunaxoquu', 'konunykucewiduwopiw', 'd', 'piwuletextyp', 'textyseseq', 'hydydysoc', 'muquokiva', 'valochahelosoloveq', 'textyquygeredopotho', 'kymipulanygud', 'mygamozuwuquasep', 'putextozoxute', 'dothahegytextug', 'gatextechifidot', 'chydykysesu', 'soquolycavajylach', 'cuwyciquidozujizic', 'lahevapinasa', 'quixifejenithet', 'zebonada', 'lefysa', 've', 'bihothizecawudasewa', 'quafycobahymachoju', 'xitolegucuwec', 'guwyb', 'puchokudi', 'quokerufanogi', 'gikogachyquefic', 'lohyrosopechykoni', 'fy', 'pavehiquo', 'fusabubuq'], b=['habywafivukawuwosaqu', 'gymuholyhy', 'lanet', 'zy', 'zekitiket', 'vochonytapymajibimox', 'giwojyvelyte', 'thadomazotethytub', 'quicavas', 'piquekithefofy', 'thocuqui', 'cytex', 'quuheraquizywanu', 'jinadutex', 'fekytenuhuxubiziquy', 'rarytextakux', 'jyjihethiwath', 'chocolutextexiki', 'ledydiniki', 'w', 'qua', 'qui', 'x', 'cygathusachitex', 'soditome', 'hatylapyhafenetalut', 'korikycun', 'futhasybudovyxit', 'sisizojolequitum', 'x', 'xaxifotexte', 'zyrehugiquy', 'w', 'ciquysekijo', 'puxyzothadusaque', 'lycugeh', 'sutib', 'rafaganyquyzyt', 'mymecyjegygavaxesu', 'fith', 'j', 'thojigetoxewupyf', 'chunymikyl', 'quisahi', 'sowucibam', 'deputhuvigeg', 'thykugosi', 't', 'kavoquothezelo', 'textude', 'z', 'thyk', 'jathaxethujiz', 'nexasebetextyfav', 'dugoxosubocozuk', 'bypyhofedyr', 'j', 'text', 'textakedunaxoquu', 'warabejiwajudeholyc', 'quetextubusekexoquu', 'kahulycojis', 'chytextibapi', 'cekuthyc', 'hunazetytexta', 'purufoth', 'mazy', 'lo', 'raxotholamukarymi', 'themogyth', 'thiqu', 'pajathesaguliwi', 'filorererumycuce', 'ch', 'sijewedehytosod', 'hawogohethequ', 'ryh', 'wycyn', 'gebachahefijowoxyt', 'thovawemusetyq', 'jyxevylichoquysejyga', 'text', 'vapiwymexuno', 'chixemebusedakyveto', 'thosybygutextutexty', 'mopobytex', 'tytamivicocumyhyp', 'pezajuquukugakogot', 'riwutextucotodec', 'tigahanycoz', 'wo', 'thymekadequ', 'xevugochyvawitext', 'fopolane']):\n    \"\"\"Find an item that is in both lists a and b\"\"\"\n    return s in a and s in b",
    "sols": [
      "def sol(a=['lumoguwamyhut', 'thajokotextejakizug', 'tynitextyq', 'quuquujolifysy', 'but', 'n', 'xifytextechafu', 'quujyb', 'n', 'pisaxokychadix', 'texteraqui', 'textizipite', 'kibowerulecijytextex', 'lypelylahutexty', 'hyk', 'vedycithifipyxidyhe', 'chakovixo', 'syquaga', 'sycekohododachiby', 'vutakagaralewiqui', 'quitextumaquefusux', 'tovyhezigageguti', 'defynorudabichyxo', 'quexanyvuthukaf', 'muquoquechok', 'vukydetextufyniso', 'chefojigoxa', 'sothawanerov', 'cykutozathoratextos', 'jiquibivug', 'kylubixoduvapefozelo', 'xotha', 'tekiritunothuxat', 'duxylyvitextocowug', 'fethachoga', 'pehujovowal', 'gizamyxojehuthequy', 'hygamokily', 'zomeque', 'zyma', 'chynybunegiz', 'p', 'kewibohaxiw', 'gaduhuxiquuzach', 'p', 'pichumuvythopy', 'rizaguquequychiw', 'gelorysyd', 'za', 'textapelusykerudub', 'jipudiradutext', 'lovyvutexto', 'relutechacowel', 'zycydonigutyfunir', 'textakedunaxoquu', 'konunykucewiduwopiw', 'd', 'piwuletextyp', 'textyseseq', 'hydydysoc', 'muquokiva', 'valochahelosoloveq', 'textyquygeredopotho', 'kymipulanygud', 'mygamozuwuquasep', 'putextozoxute', 'dothahegytextug', 'gatextechifidot', 'chydykysesu', 'soquolycavajylach', 'cuwyciquidozujizic', 'lahevapinasa', 'quixifejenithet', 'zebonada', 'lefysa', 've', 'bihothizecawudasewa', 'quafycobahymachoju', 'xitolegucuwec', 'guwyb', 'puchokudi', 'quokerufanogi', 'gikogachyquefic', 'lohyrosopechykoni', 'fy', 'pavehiquo', 'fusabubuq'], b=['habywafivukawuwosaqu', 'gymuholyhy', 'lanet', 'zy', 'zekitiket', 'vochonytapymajibimox', 'giwojyvelyte', 'thadomazotethytub', 'quicavas', 'piquekithefofy', 'thocuqui', 'cytex', 'quuheraquizywanu', 'jinadutex', 'fekytenuhuxubiziquy', 'rarytextakux', 'jyjihethiwath', 'chocolutextexiki', 'ledydiniki', 'w', 'qua', 'qui', 'x', 'cygathusachitex', 'soditome', 'hatylapyhafenetalut', 'korikycun', 'futhasybudovyxit', 'sisizojolequitum', 'x', 'xaxifotexte', 'zyrehugiquy', 'w', 'ciquysekijo', 'puxyzothadusaque', 'lycugeh', 'sutib', 'rafaganyquyzyt', 'mymecyjegygavaxesu', 'fith', 'j', 'thojigetoxewupyf', 'chunymikyl', 'quisahi', 'sowucibam', 'deputhuvigeg', 'thykugosi', 't', 'kavoquothezelo', 'textude', 'z', 'thyk', 'jathaxethujiz', 'nexasebetextyfav', 'dugoxosubocozuk', 'bypyhofedyr', 'j', 'text', 'textakedunaxoquu', 'warabejiwajudeholyc', 'quetextubusekexoquu', 'kahulycojis', 'chytextibapi', 'cekuthyc', 'hunazetytexta', 'purufoth', 'mazy', 'lo', 'raxotholamukarymi', 'themogyth', 'thiqu', 'pajathesaguliwi', 'filorererumycuce', 'ch', 'sijewedehytosod', 'hawogohethequ', 'ryh', 'wycyn', 'gebachahefijowoxyt', 'thovawemusetyq', 'jyxevylichoquysejyga', 'text', 'vapiwymexuno', 'chixemebusedakyveto', 'thosybygutextutexty', 'mopobytex', 'tytamivicocumyhyp', 'pezajuquukugakogot', 'riwutextucotodec', 'tigahanycoz', 'wo', 'thymekadequ', 'xevugochyvawitext', 'fopolane']):\n    return next(s for s in b if s in a)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIn_7",
    "sat": "def sat(s: str, a=['ch', 'xizolu', 'm', 'pupubomatykabuthythe', 'chubesache', 'zyzalygylohyfychi'], b=['ne', 'x', 'zonegyhachaf', 'thute', 'cifijigyfokexydogaj', 'nejy', 'piquehoquuguhy', 'misev', 'dyg', 'x', 'gu', 'buco', 'vepocy', 'kuruzewicyrup', 'zyzalygylohyfychi', 'romojafi', 'rymowemyfitesa', 'bybesynuromo', 'najamurusyhichyz', 'pavoxukyxytextalap', 'fevabequoxi', 'muxycikuvamathythija', 'nujovete', 'z', 'mogy', 'berevilox', 'hetesetextacetho', 'thyquycenethiheq', 'maxirygam', 'he', 'chudothaset', 'baxipeboquat', 'zuhapodude', 'sanuz', 'cehic', 'futohihowa', 'fyrerotexteg', 'dy', 'thisijoj', 'hequokotequavojus', 'quevapujijuko', 'textav', 'ryquixychimaxux', 'sirupuquogythofuce', 'roxysurazatexto', 'bithazagycawepatext', 'chunujeche', 'lutatextywahyket', 'pusy', 'cathazodyjuthyhu', 'quusequiquohith', 'bediwewexymova', 'cyloge', 'kadewathacynenici', 'roxykizewunetext', 'richub', 'viq', 'votextequykupoxanew', 'zopafa', 'boxino', 'tobadufidy', 'thovetex', 'balywefubyjoxykoc', 'dofurum', 'thabijonu', 'tomuwepavezehixyt', 'wocuhumethecetolur', 'quot', 'zolegydexu', 'gicasakax', 'fibalume', 'xijicenomisirop', 'ch', 'l', 'chezob', 'lilotitex', 'julychivesuzebej', 'fifefisulaxutext', 'chypy', 'textysip', 'bitiquyxudukedifu', 'w', 'naval', 'chukojozavepelovycho', 'giquyla', 'mov', 'gegopyzawotothic']):\n    \"\"\"Find an item that is in both lists a and b\"\"\"\n    return s in a and s in b",
    "sols": [
      "def sol(a=['ch', 'xizolu', 'm', 'pupubomatykabuthythe', 'chubesache', 'zyzalygylohyfychi'], b=['ne', 'x', 'zonegyhachaf', 'thute', 'cifijigyfokexydogaj', 'nejy', 'piquehoquuguhy', 'misev', 'dyg', 'x', 'gu', 'buco', 'vepocy', 'kuruzewicyrup', 'zyzalygylohyfychi', 'romojafi', 'rymowemyfitesa', 'bybesynuromo', 'najamurusyhichyz', 'pavoxukyxytextalap', 'fevabequoxi', 'muxycikuvamathythija', 'nujovete', 'z', 'mogy', 'berevilox', 'hetesetextacetho', 'thyquycenethiheq', 'maxirygam', 'he', 'chudothaset', 'baxipeboquat', 'zuhapodude', 'sanuz', 'cehic', 'futohihowa', 'fyrerotexteg', 'dy', 'thisijoj', 'hequokotequavojus', 'quevapujijuko', 'textav', 'ryquixychimaxux', 'sirupuquogythofuce', 'roxysurazatexto', 'bithazagycawepatext', 'chunujeche', 'lutatextywahyket', 'pusy', 'cathazodyjuthyhu', 'quusequiquohith', 'bediwewexymova', 'cyloge', 'kadewathacynenici', 'roxykizewunetext', 'richub', 'viq', 'votextequykupoxanew', 'zopafa', 'boxino', 'tobadufidy', 'thovetex', 'balywefubyjoxykoc', 'dofurum', 'thabijonu', 'tomuwepavezehixyt', 'wocuhumethecetolur', 'quot', 'zolegydexu', 'gicasakax', 'fibalume', 'xijicenomisirop', 'ch', 'l', 'chezob', 'lilotitex', 'julychivesuzebej', 'fifefisulaxutext', 'chypy', 'textysip', 'bitiquyxudukedifu', 'w', 'naval', 'chukojozavepelovycho', 'giquyla', 'mov', 'gegopyzawotothic']):\n    return next(s for s in b if s in a)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIn_8",
    "sat": "def sat(s: str, a=['savasoqu', 'sy', 'tubuquigechuboretext', 'mefegewonathith', 'textohozacewyresatu', 'tikekozapexeviko', 'kusilogakuzyjichyf', 'sute', 'quyjechygenothimuwe', 'bothecytysixeda', 'towyza', 'jyvinuzochixud', 'mohurakunixorytextug', 'bopecik', 'githijoquyriha', 'xuborom', 'thysakocherubug', 'fitextypatextu', 'fevijulyl', 'vumuquuquyzofoc', 'thygyvi', 'fogo', 'bipucotextuthyr', 'kimotowizajiquoqua', 'futokojepanajyreb', 'fuwofacat', 'chedotexti', 'vefethofa', 'quurofahupux', 'kupajitha', 'kevituhinacicacuqu', 'wof', 'thyzygugunehigysykub', 'cho', 'thuxegubuthetex', 'kaquokirakochecepu', 'bomaxumykax', 'buviwipybo', 'katextoso', 'juwafijutiza', 'lotextip', 'ke', 'zemiquim', 'jetenusixul', 'fovit', 'tapejacugu', 'zyhesebinothi', 'fagohidyxy', 'jequuwicirequak', 'vutex', 'kuwedechuchalogyt', 'levuthucapezywesucy', 'cafyquul', 'textutiz', 'v', 'zyr', 'pybythixasefuzavav', 'dutextabisuxabath', 'ryrytextuchizijoxoh'], b=['gumumiparusath', 'jumepuwazolojithoth', 'bahynec', 'savasoqu', 'manybezesyhuwojobaxi', 'dacojutextasikaleq', 'kuwiquy', 'hefoquenejosypeh', 'zydabemuchib', 'nifaxynotexteth', 'gycithyquyceny', 'mikebununacute', 'zoquytextibe', 'chutech', 'samigebaloliquy', 'nyquah', 'raparu', 'thotextucipucalopu', 'chihychasuqu', 'sywuthop', 'tovyzydi', 'chuthipuchy', 'd', 'bytextozaquupajymote', 'zuc', 'dozukymitegocemabyb', 'textytolopetheza', 't', 'tohochifalith', 'jinathykijejyjyw', 'jez', 'xivafebomamepyp', 'chithapyq', 'bew', 'rubynejezakyr', 'hagifechuxachuw', 'nabelocupyxyt', 'hafotextu', 'malicajypo', 'jywat', 'guzyquugath', 'dykejegykanasixil', 'quokydu', 'kyvifejywy', 'zuc', 'xuchochodatujopethy', 'nyhutaj', 'xasyjychipymozu', 'vydu', 'pojekikyquosap', 'textyrukerilycemi', 'chobumipeb', 'vuthixymuvyte', 'g', 'zinigapochybyxamel', 'satextutu', 'syg', 'fatereq', 'hibethozojuchusijifi', 'jaz', 'xathoxij', 'faposezitasehof', 'silukatexta', 'fonajyvizilu', 'xud', 'quonyqu', 'textykexunyre', 'keki', 'nechexesutedyty', 'sohafurechecidohyka', 'lajirufybat', 'zefuquypot', 'suleceminucyr', 'thobyxethothy', 'hyvihacixexo', 'labutextibah', 'motatyfanochathuwac', 'ryquedyp', 'wofasicyxaho', 'cipequizozojykoxucu', 'xyruma', 'wuburiquom', 'cohychepach', 'lyj', 'hyxoxukofavolaxyc', 'h', 'gyloxepijer', 'kodywyth', 'xetogeca', 'cyji', 'degukabigokuthiwi']):\n    \"\"\"Find an item that is in both lists a and b\"\"\"\n    return s in a and s in b",
    "sols": [
      "def sol(a=['savasoqu', 'sy', 'tubuquigechuboretext', 'mefegewonathith', 'textohozacewyresatu', 'tikekozapexeviko', 'kusilogakuzyjichyf', 'sute', 'quyjechygenothimuwe', 'bothecytysixeda', 'towyza', 'jyvinuzochixud', 'mohurakunixorytextug', 'bopecik', 'githijoquyriha', 'xuborom', 'thysakocherubug', 'fitextypatextu', 'fevijulyl', 'vumuquuquyzofoc', 'thygyvi', 'fogo', 'bipucotextuthyr', 'kimotowizajiquoqua', 'futokojepanajyreb', 'fuwofacat', 'chedotexti', 'vefethofa', 'quurofahupux', 'kupajitha', 'kevituhinacicacuqu', 'wof', 'thyzygugunehigysykub', 'cho', 'thuxegubuthetex', 'kaquokirakochecepu', 'bomaxumykax', 'buviwipybo', 'katextoso', 'juwafijutiza', 'lotextip', 'ke', 'zemiquim', 'jetenusixul', 'fovit', 'tapejacugu', 'zyhesebinothi', 'fagohidyxy', 'jequuwicirequak', 'vutex', 'kuwedechuchalogyt', 'levuthucapezywesucy', 'cafyquul', 'textutiz', 'v', 'zyr', 'pybythixasefuzavav', 'dutextabisuxabath', 'ryrytextuchizijoxoh'], b=['gumumiparusath', 'jumepuwazolojithoth', 'bahynec', 'savasoqu', 'manybezesyhuwojobaxi', 'dacojutextasikaleq', 'kuwiquy', 'hefoquenejosypeh', 'zydabemuchib', 'nifaxynotexteth', 'gycithyquyceny', 'mikebununacute', 'zoquytextibe', 'chutech', 'samigebaloliquy', 'nyquah', 'raparu', 'thotextucipucalopu', 'chihychasuqu', 'sywuthop', 'tovyzydi', 'chuthipuchy', 'd', 'bytextozaquupajymote', 'zuc', 'dozukymitegocemabyb', 'textytolopetheza', 't', 'tohochifalith', 'jinathykijejyjyw', 'jez', 'xivafebomamepyp', 'chithapyq', 'bew', 'rubynejezakyr', 'hagifechuxachuw', 'nabelocupyxyt', 'hafotextu', 'malicajypo', 'jywat', 'guzyquugath', 'dykejegykanasixil', 'quokydu', 'kyvifejywy', 'zuc', 'xuchochodatujopethy', 'nyhutaj', 'xasyjychipymozu', 'vydu', 'pojekikyquosap', 'textyrukerilycemi', 'chobumipeb', 'vuthixymuvyte', 'g', 'zinigapochybyxamel', 'satextutu', 'syg', 'fatereq', 'hibethozojuchusijifi', 'jaz', 'xathoxij', 'faposezitasehof', 'silukatexta', 'fonajyvizilu', 'xud', 'quonyqu', 'textykexunyre', 'keki', 'nechexesutedyty', 'sohafurechecidohyka', 'lajirufybat', 'zefuquypot', 'suleceminucyr', 'thobyxethothy', 'hyvihacixexo', 'labutextibah', 'motatyfanochathuwac', 'ryquedyp', 'wofasicyxaho', 'cipequizozojykoxucu', 'xyruma', 'wuburiquom', 'cohychepach', 'lyj', 'hyxoxukofavolaxyc', 'h', 'gyloxepijer', 'kodywyth', 'xetogeca', 'cyji', 'degukabigokuthiwi']):\n    return next(s for s in b if s in a)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "ListIn_9",
    "sat": "def sat(s: str, a=['bacyquawygitiforus', 'ragyrywekoziqui', 'memivothoveke', 'hyvapucuxythi', 'coth', 'wichug', 'mujechogeq', 'mefujysejilijygawy', 'viwygemuguwebanely', 'n', 'textuchynasyquufytex', 'b', 'fuchavyxechadukaf', 'si', 'gucasilowaq', 'thabupewaque', 'chok', 'riwurovothakyvijak', 'hyk', 'qu', 'textyzuthusonathyque', 'qu', 'datext', 'chekika', 'pathisonirade', 'fevavetusobu', 'zisupedevalewiwuj', 'textubiju', 'tarylachalucetext', 'zadechexud', 'xu', 'kamozu', 'ryxosiqu', 'ge', 'quojon', 'wothy', 'huquethasote', 'fycamyha', 'textaga', 'durequegawafoly', 'wamunariquegih', 's', 'hybukequudiduwutex', 'nebytymapucidebo', 'zyrohothetoxoxac', 'cula', 'nufetextisyx'], b=['lyg', 'mujechogeq', 'quury', 'c', 'dacygudasiquafycop']):\n    \"\"\"Find an item that is in both lists a and b\"\"\"\n    return s in a and s in b",
    "sols": [
      "def sol(a=['bacyquawygitiforus', 'ragyrywekoziqui', 'memivothoveke', 'hyvapucuxythi', 'coth', 'wichug', 'mujechogeq', 'mefujysejilijygawy', 'viwygemuguwebanely', 'n', 'textuchynasyquufytex', 'b', 'fuchavyxechadukaf', 'si', 'gucasilowaq', 'thabupewaque', 'chok', 'riwurovothakyvijak', 'hyk', 'qu', 'textyzuthusonathyque', 'qu', 'datext', 'chekika', 'pathisonirade', 'fevavetusobu', 'zisupedevalewiwuj', 'textubiju', 'tarylachalucetext', 'zadechexud', 'xu', 'kamozu', 'ryxosiqu', 'ge', 'quojon', 'wothy', 'huquethasote', 'fycamyha', 'textaga', 'durequegawafoly', 'wamunariquegih', 's', 'hybukequudiduwutex', 'nebytymapucidebo', 'zyrohothetoxoxac', 'cula', 'nufetextisyx'], b=['lyg', 'mujechogeq', 'quury', 'c', 'dacygudasiquafycop']):\n    return next(s for s in b if s in a)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntNeg_0",
    "sat": "def sat(x: int, a=93252338):\n    \"\"\"Solve a unary negation problem\"\"\"\n    return -x == a",
    "sols": [
      "def sol(a=93252338):\n    return - a"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntNeg_1",
    "sat": "def sat(x: int, a=-7788910835979672):\n    \"\"\"Solve a unary negation problem\"\"\"\n    return -x == a",
    "sols": [
      "def sol(a=-7788910835979672):\n    return - a"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntNeg_2",
    "sat": "def sat(x: int, a=6734672221833987):\n    \"\"\"Solve a unary negation problem\"\"\"\n    return -x == a",
    "sols": [
      "def sol(a=6734672221833987):\n    return - a"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntNeg_3",
    "sat": "def sat(x: int, a=-6405550227918699):\n    \"\"\"Solve a unary negation problem\"\"\"\n    return -x == a",
    "sols": [
      "def sol(a=-6405550227918699):\n    return - a"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntNeg_4",
    "sat": "def sat(x: int, a=-5741705983914418):\n    \"\"\"Solve a unary negation problem\"\"\"\n    return -x == a",
    "sols": [
      "def sol(a=-5741705983914418):\n    return - a"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntNeg_5",
    "sat": "def sat(x: int, a=-6295897925885854):\n    \"\"\"Solve a unary negation problem\"\"\"\n    return -x == a",
    "sols": [
      "def sol(a=-6295897925885854):\n    return - a"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntNeg_6",
    "sat": "def sat(x: int, a=-8080281870614233):\n    \"\"\"Solve a unary negation problem\"\"\"\n    return -x == a",
    "sols": [
      "def sol(a=-8080281870614233):\n    return - a"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntNeg_7",
    "sat": "def sat(x: int, a=-5790248626264272):\n    \"\"\"Solve a unary negation problem\"\"\"\n    return -x == a",
    "sols": [
      "def sol(a=-5790248626264272):\n    return - a"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntNeg_8",
    "sat": "def sat(x: int, a=-4190266031592704):\n    \"\"\"Solve a unary negation problem\"\"\"\n    return -x == a",
    "sols": [
      "def sol(a=-4190266031592704):\n    return - a"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntNeg_9",
    "sat": "def sat(x: int, a=1073212294304751):\n    \"\"\"Solve a unary negation problem\"\"\"\n    return -x == a",
    "sols": [
      "def sol(a=1073212294304751):\n    return - a"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSum_0",
    "sat": "def sat(x: int, a=1073258, b=72352549):\n    \"\"\"Solve a sum problem\"\"\"\n    return a + x == b",
    "sols": [
      "def sol(a=1073258, b=72352549):\n    return b - a"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSum_1",
    "sat": "def sat(x: int, a=7176599374880969, b=1013347182263591):\n    \"\"\"Solve a sum problem\"\"\"\n    return a + x == b",
    "sols": [
      "def sol(a=7176599374880969, b=1013347182263591):\n    return b - a"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSum_2",
    "sat": "def sat(x: int, a=-6408240447142191, b=7741323537672506):\n    \"\"\"Solve a sum problem\"\"\"\n    return a + x == b",
    "sols": [
      "def sol(a=-6408240447142191, b=7741323537672506):\n    return b - a"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSum_3",
    "sat": "def sat(x: int, a=1918969259925371, b=3648647147996329):\n    \"\"\"Solve a sum problem\"\"\"\n    return a + x == b",
    "sols": [
      "def sol(a=1918969259925371, b=3648647147996329):\n    return b - a"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSum_4",
    "sat": "def sat(x: int, a=6476308373242647, b=-1096573562602401):\n    \"\"\"Solve a sum problem\"\"\"\n    return a + x == b",
    "sols": [
      "def sol(a=6476308373242647, b=-1096573562602401):\n    return b - a"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSum_5",
    "sat": "def sat(x: int, a=3541708844857762, b=8119147055443164):\n    \"\"\"Solve a sum problem\"\"\"\n    return a + x == b",
    "sols": [
      "def sol(a=3541708844857762, b=8119147055443164):\n    return b - a"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSum_6",
    "sat": "def sat(x: int, a=2470722232128688, b=-5028343403938117):\n    \"\"\"Solve a sum problem\"\"\"\n    return a + x == b",
    "sols": [
      "def sol(a=2470722232128688, b=-5028343403938117):\n    return b - a"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSum_7",
    "sat": "def sat(x: int, a=6213545451615198, b=-5169743892107078):\n    \"\"\"Solve a sum problem\"\"\"\n    return a + x == b",
    "sols": [
      "def sol(a=6213545451615198, b=-5169743892107078):\n    return b - a"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSum_8",
    "sat": "def sat(x: int, a=-1793507176516986, b=906620763200238):\n    \"\"\"Solve a sum problem\"\"\"\n    return a + x == b",
    "sols": [
      "def sol(a=-1793507176516986, b=906620763200238):\n    return b - a"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSum_9",
    "sat": "def sat(x: int, a=-8219517037412163, b=-9529321409062134):\n    \"\"\"Solve a sum problem\"\"\"\n    return a + x == b",
    "sols": [
      "def sol(a=-8219517037412163, b=-9529321409062134):\n    return b - a"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSub_0",
    "sat": "def sat(x: int, a=-382, b=14546310):\n    \"\"\"Solve a subtraction problem\"\"\"\n    return x - a == b",
    "sols": [
      "def sol(a=-382, b=14546310):\n    return a + b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSub_1",
    "sat": "def sat(x: int, a=4461955033869751, b=-3951840325269410):\n    \"\"\"Solve a subtraction problem\"\"\"\n    return x - a == b",
    "sols": [
      "def sol(a=4461955033869751, b=-3951840325269410):\n    return a + b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSub_2",
    "sat": "def sat(x: int, a=9688203125538303, b=-293093369321912):\n    \"\"\"Solve a subtraction problem\"\"\"\n    return x - a == b",
    "sols": [
      "def sol(a=9688203125538303, b=-293093369321912):\n    return a + b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSub_3",
    "sat": "def sat(x: int, a=-8057207922876252, b=-3934955257447294):\n    \"\"\"Solve a subtraction problem\"\"\"\n    return x - a == b",
    "sols": [
      "def sol(a=-8057207922876252, b=-3934955257447294):\n    return a + b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSub_4",
    "sat": "def sat(x: int, a=-5902383651753979, b=304676399871652):\n    \"\"\"Solve a subtraction problem\"\"\"\n    return x - a == b",
    "sols": [
      "def sol(a=-5902383651753979, b=304676399871652):\n    return a + b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSub_5",
    "sat": "def sat(x: int, a=5498221257462810, b=-9891180759896604):\n    \"\"\"Solve a subtraction problem\"\"\"\n    return x - a == b",
    "sols": [
      "def sol(a=5498221257462810, b=-9891180759896604):\n    return a + b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSub_6",
    "sat": "def sat(x: int, a=2546817180926413, b=-8288757594299903):\n    \"\"\"Solve a subtraction problem\"\"\"\n    return x - a == b",
    "sols": [
      "def sol(a=2546817180926413, b=-8288757594299903):\n    return a + b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSub_7",
    "sat": "def sat(x: int, a=9039770925479206, b=-9382105729343163):\n    \"\"\"Solve a subtraction problem\"\"\"\n    return x - a == b",
    "sols": [
      "def sol(a=9039770925479206, b=-9382105729343163):\n    return a + b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSub_8",
    "sat": "def sat(x: int, a=1111642902890242, b=-8616943790453980):\n    \"\"\"Solve a subtraction problem\"\"\"\n    return x - a == b",
    "sols": [
      "def sol(a=1111642902890242, b=-8616943790453980):\n    return a + b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSub_9",
    "sat": "def sat(x: int, a=2707884935014088, b=-4121789062688033):\n    \"\"\"Solve a subtraction problem\"\"\"\n    return x - a == b",
    "sols": [
      "def sol(a=2707884935014088, b=-4121789062688033):\n    return a + b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSub2_0",
    "sat": "def sat(x: int, a=8665464, b=-93206):\n    \"\"\"Solve a subtraction problem\"\"\"\n    return a - x == b",
    "sols": [
      "def sol(a=8665464, b=-93206):\n    return a - b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSub2_1",
    "sat": "def sat(x: int, a=1954051265970332, b=1312727165482691):\n    \"\"\"Solve a subtraction problem\"\"\"\n    return a - x == b",
    "sols": [
      "def sol(a=1954051265970332, b=1312727165482691):\n    return a - b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSub2_2",
    "sat": "def sat(x: int, a=-1159353965692778, b=4654551691407885):\n    \"\"\"Solve a subtraction problem\"\"\"\n    return a - x == b",
    "sols": [
      "def sol(a=-1159353965692778, b=4654551691407885):\n    return a - b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSub2_3",
    "sat": "def sat(x: int, a=7793575617602525, b=-4351726326349125):\n    \"\"\"Solve a subtraction problem\"\"\"\n    return a - x == b",
    "sols": [
      "def sol(a=7793575617602525, b=-4351726326349125):\n    return a - b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSub2_4",
    "sat": "def sat(x: int, a=-8783800228130606, b=-508993556991975):\n    \"\"\"Solve a subtraction problem\"\"\"\n    return a - x == b",
    "sols": [
      "def sol(a=-8783800228130606, b=-508993556991975):\n    return a - b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSub2_5",
    "sat": "def sat(x: int, a=6214511989468522, b=-8611041646123069):\n    \"\"\"Solve a subtraction problem\"\"\"\n    return a - x == b",
    "sols": [
      "def sol(a=6214511989468522, b=-8611041646123069):\n    return a - b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSub2_6",
    "sat": "def sat(x: int, a=7674217578186899, b=-2906122028473779):\n    \"\"\"Solve a subtraction problem\"\"\"\n    return a - x == b",
    "sols": [
      "def sol(a=7674217578186899, b=-2906122028473779):\n    return a - b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSub2_7",
    "sat": "def sat(x: int, a=-1762426008738689, b=2542059490113964):\n    \"\"\"Solve a subtraction problem\"\"\"\n    return a - x == b",
    "sols": [
      "def sol(a=-1762426008738689, b=2542059490113964):\n    return a - b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSub2_8",
    "sat": "def sat(x: int, a=3024187717652921, b=-1062459210015505):\n    \"\"\"Solve a subtraction problem\"\"\"\n    return a - x == b",
    "sols": [
      "def sol(a=3024187717652921, b=-1062459210015505):\n    return a - b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSub2_9",
    "sat": "def sat(x: int, a=1193813353593933, b=-5380052017072375):\n    \"\"\"Solve a subtraction problem\"\"\"\n    return a - x == b",
    "sols": [
      "def sol(a=1193813353593933, b=-5380052017072375):\n    return a - b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntMul_0",
    "sat": "def sat(n: int, a=14302, b=5):\n    \"\"\"Solve a multiplication problem\"\"\"\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=14302, b=5):\n    return a // b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntMul_1",
    "sat": "def sat(n: int, a=-646156, b=-63):\n    \"\"\"Solve a multiplication problem\"\"\"\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-646156, b=-63):\n    return a // b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntMul_2",
    "sat": "def sat(n: int, a=159568, b=59):\n    \"\"\"Solve a multiplication problem\"\"\"\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=159568, b=59):\n    return a // b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntMul_3",
    "sat": "def sat(n: int, a=-141336, b=72):\n    \"\"\"Solve a multiplication problem\"\"\"\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-141336, b=72):\n    return a // b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntMul_4",
    "sat": "def sat(n: int, a=855955, b=33):\n    \"\"\"Solve a multiplication problem\"\"\"\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=855955, b=33):\n    return a // b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntMul_5",
    "sat": "def sat(n: int, a=508648, b=63):\n    \"\"\"Solve a multiplication problem\"\"\"\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=508648, b=63):\n    return a // b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntMul_6",
    "sat": "def sat(n: int, a=359259, b=-73):\n    \"\"\"Solve a multiplication problem\"\"\"\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=359259, b=-73):\n    return a // b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntMul_7",
    "sat": "def sat(n: int, a=415700, b=98):\n    \"\"\"Solve a multiplication problem\"\"\"\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=415700, b=98):\n    return a // b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntMul_8",
    "sat": "def sat(n: int, a=-2722, b=31):\n    \"\"\"Solve a multiplication problem\"\"\"\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-2722, b=31):\n    return a // b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntMul_9",
    "sat": "def sat(n: int, a=-419340, b=-89):\n    \"\"\"Solve a multiplication problem\"\"\"\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-419340, b=-89):\n    return a // b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntDiv_0",
    "sat": "def sat(n: int, a=3, b=23463462):\n    \"\"\"Solve a division problem\"\"\"\n    return b // n == a",
    "sols": [
      "def sol(a=3, b=23463462):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntDiv_1",
    "sat": "def sat(n: int, a=-1, b=1594400229362061):\n    \"\"\"Solve a division problem\"\"\"\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=1594400229362061):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntDiv_2",
    "sat": "def sat(n: int, a=12, b=-9988218457242775):\n    \"\"\"Solve a division problem\"\"\"\n    return b // n == a",
    "sols": [
      "def sol(a=12, b=-9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntDiv_3",
    "sat": "def sat(n: int, a=0, b=-1230085432451862):\n    \"\"\"Solve a division problem\"\"\"\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=-1230085432451862):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntDiv_4",
    "sat": "def sat(n: int, a=1, b=9554566410382856):\n    \"\"\"Solve a division problem\"\"\"\n    return b // n == a",
    "sols": [
      "def sol(a=1, b=9554566410382856):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntDiv_5",
    "sat": "def sat(n: int, a=0, b=-276228241058354):\n    \"\"\"Solve a division problem\"\"\"\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=-276228241058354):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntDiv_6",
    "sat": "def sat(n: int, a=0, b=-274724668334318):\n    \"\"\"Solve a division problem\"\"\"\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=-274724668334318):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntDiv_7",
    "sat": "def sat(n: int, a=9, b=6914625274738508):\n    \"\"\"Solve a division problem\"\"\"\n    return b // n == a",
    "sols": [
      "def sol(a=9, b=6914625274738508):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntDiv_8",
    "sat": "def sat(n: int, a=0, b=-4177591550350946):\n    \"\"\"Solve a division problem\"\"\"\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=-4177591550350946):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntDiv_9",
    "sat": "def sat(n: int, a=0, b=-849200640448927):\n    \"\"\"Solve a division problem\"\"\"\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=-849200640448927):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntDiv2_0",
    "sat": "def sat(n: int, a=345346363, b=10):\n    \"\"\"Find n that when divided by b is a\"\"\"\n    return n // b == a",
    "sols": [
      "def sol(a=345346363, b=10):\n    return a * b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntDiv2_1",
    "sat": "def sat(n: int, a=-3411193412414137, b=-9070455318026063):\n    \"\"\"Find n that when divided by b is a\"\"\"\n    return n // b == a",
    "sols": [
      "def sol(a=-3411193412414137, b=-9070455318026063):\n    return a * b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntDiv2_2",
    "sat": "def sat(n: int, a=-1950797984487873, b=6211965468307518):\n    \"\"\"Find n that when divided by b is a\"\"\"\n    return n // b == a",
    "sols": [
      "def sol(a=-1950797984487873, b=6211965468307518):\n    return a * b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntDiv2_3",
    "sat": "def sat(n: int, a=1186580710227962, b=5023840456205809):\n    \"\"\"Find n that when divided by b is a\"\"\"\n    return n // b == a",
    "sols": [
      "def sol(a=1186580710227962, b=5023840456205809):\n    return a * b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntDiv2_4",
    "sat": "def sat(n: int, a=6976962948831358, b=7353202892973126):\n    \"\"\"Find n that when divided by b is a\"\"\"\n    return n // b == a",
    "sols": [
      "def sol(a=6976962948831358, b=7353202892973126):\n    return a * b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntDiv2_5",
    "sat": "def sat(n: int, a=6915856560694709, b=111742990835085):\n    \"\"\"Find n that when divided by b is a\"\"\"\n    return n // b == a",
    "sols": [
      "def sol(a=6915856560694709, b=111742990835085):\n    return a * b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntDiv2_6",
    "sat": "def sat(n: int, a=-1104852978631057, b=-2557967407440761):\n    \"\"\"Find n that when divided by b is a\"\"\"\n    return n // b == a",
    "sols": [
      "def sol(a=-1104852978631057, b=-2557967407440761):\n    return a * b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntDiv2_7",
    "sat": "def sat(n: int, a=-8329742804301532, b=-4106654512441311):\n    \"\"\"Find n that when divided by b is a\"\"\"\n    return n // b == a",
    "sols": [
      "def sol(a=-8329742804301532, b=-4106654512441311):\n    return a * b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntDiv2_8",
    "sat": "def sat(n: int, a=5829099404610510, b=-9465246152168141):\n    \"\"\"Find n that when divided by b is a\"\"\"\n    return n // b == a",
    "sols": [
      "def sol(a=5829099404610510, b=-9465246152168141):\n    return a * b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntDiv2_9",
    "sat": "def sat(n: int, a=-9597642365529250, b=9338198117879192):\n    \"\"\"Find n that when divided by b is a\"\"\"\n    return n // b == a",
    "sols": [
      "def sol(a=-9597642365529250, b=9338198117879192):\n    return a * b"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSquareRoot_0",
    "sat": "def sat(x: int, a=10201202001):\n    \"\"\"Compute an integer that when squared equals perfect-square a.\"\"\"\n    return x ** 2 == a",
    "sols": [
      "def sol(a=10201202001):\n    return int(a ** 0.5)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSquareRoot_1",
    "sat": "def sat(x: int, a=2617350631613713636):\n    \"\"\"Compute an integer that when squared equals perfect-square a.\"\"\"\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2617350631613713636):\n    return int(a ** 0.5)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSquareRoot_2",
    "sat": "def sat(x: int, a=100703210763886864):\n    \"\"\"Compute an integer that when squared equals perfect-square a.\"\"\"\n    return x ** 2 == a",
    "sols": [
      "def sol(a=100703210763886864):\n    return int(a ** 0.5)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSquareRoot_3",
    "sat": "def sat(x: int, a=12515426721927424):\n    \"\"\"Compute an integer that when squared equals perfect-square a.\"\"\"\n    return x ** 2 == a",
    "sols": [
      "def sol(a=12515426721927424):\n    return int(a ** 0.5)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSquareRoot_4",
    "sat": "def sat(x: int, a=717898768141464900):\n    \"\"\"Compute an integer that when squared equals perfect-square a.\"\"\"\n    return x ** 2 == a",
    "sols": [
      "def sol(a=717898768141464900):\n    return int(a ** 0.5)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSquareRoot_5",
    "sat": "def sat(x: int, a=34566678107587921):\n    \"\"\"Compute an integer that when squared equals perfect-square a.\"\"\"\n    return x ** 2 == a",
    "sols": [
      "def sol(a=34566678107587921):\n    return int(a ** 0.5)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSquareRoot_6",
    "sat": "def sat(x: int, a=2028472882871898241):\n    \"\"\"Compute an integer that when squared equals perfect-square a.\"\"\"\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2028472882871898241):\n    return int(a ** 0.5)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSquareRoot_7",
    "sat": "def sat(x: int, a=528495436396871056):\n    \"\"\"Compute an integer that when squared equals perfect-square a.\"\"\"\n    return x ** 2 == a",
    "sols": [
      "def sol(a=528495436396871056):\n    return int(a ** 0.5)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSquareRoot_8",
    "sat": "def sat(x: int, a=170282665120852804):\n    \"\"\"Compute an integer that when squared equals perfect-square a.\"\"\"\n    return x ** 2 == a",
    "sols": [
      "def sol(a=170282665120852804):\n    return int(a ** 0.5)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntSquareRoot_9",
    "sat": "def sat(x: int, a=2665388170439145649):\n    \"\"\"Compute an integer that when squared equals perfect-square a.\"\"\"\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2665388170439145649):\n    return int(a ** 0.5)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntNegSquareRoot_0",
    "sat": "def sat(n: int, a=10000200001):\n    \"\"\"Find a negative integer that when squared equals perfect-square a.\"\"\"\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=10000200001):\n    return -int(a ** 0.5)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntNegSquareRoot_1",
    "sat": "def sat(n: int, a=1153723843107852129):\n    \"\"\"Find a negative integer that when squared equals perfect-square a.\"\"\"\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1153723843107852129):\n    return -int(a ** 0.5)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntNegSquareRoot_2",
    "sat": "def sat(n: int, a=1940392439040171204):\n    \"\"\"Find a negative integer that when squared equals perfect-square a.\"\"\"\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1940392439040171204):\n    return -int(a ** 0.5)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntNegSquareRoot_3",
    "sat": "def sat(n: int, a=1256820805863398416):\n    \"\"\"Find a negative integer that when squared equals perfect-square a.\"\"\"\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1256820805863398416):\n    return -int(a ** 0.5)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntNegSquareRoot_4",
    "sat": "def sat(n: int, a=1001282815140004804):\n    \"\"\"Find a negative integer that when squared equals perfect-square a.\"\"\"\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1001282815140004804):\n    return -int(a ** 0.5)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntNegSquareRoot_5",
    "sat": "def sat(n: int, a=4297881936637423044):\n    \"\"\"Find a negative integer that when squared equals perfect-square a.\"\"\"\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=4297881936637423044):\n    return -int(a ** 0.5)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntNegSquareRoot_6",
    "sat": "def sat(n: int, a=901603700046197316):\n    \"\"\"Find a negative integer that when squared equals perfect-square a.\"\"\"\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=901603700046197316):\n    return -int(a ** 0.5)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntNegSquareRoot_7",
    "sat": "def sat(n: int, a=2156393767640395024):\n    \"\"\"Find a negative integer that when squared equals perfect-square a.\"\"\"\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2156393767640395024):\n    return -int(a ** 0.5)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntNegSquareRoot_8",
    "sat": "def sat(n: int, a=1854864342930062025):\n    \"\"\"Find a negative integer that when squared equals perfect-square a.\"\"\"\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1854864342930062025):\n    return -int(a ** 0.5)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "IntNegSquareRoot_9",
    "sat": "def sat(n: int, a=131276886753682576):\n    \"\"\"Find a negative integer that when squared equals perfect-square a.\"\"\"\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=131276886753682576):\n    return -int(a ** 0.5)"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "FloatSquareRoot_0",
    "sat": "def sat(x: float, a=1020):\n    \"\"\"Find a number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=1020):\n    return a ** 0.5"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "FloatSquareRoot_1",
    "sat": "def sat(x: float, a=6173281296):\n    \"\"\"Find a number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=6173281296):\n    return a ** 0.5"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "FloatSquareRoot_2",
    "sat": "def sat(x: float, a=7987622700):\n    \"\"\"Find a number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=7987622700):\n    return a ** 0.5"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "FloatSquareRoot_3",
    "sat": "def sat(x: float, a=2732656229):\n    \"\"\"Find a number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=2732656229):\n    return a ** 0.5"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "FloatSquareRoot_4",
    "sat": "def sat(x: float, a=1873585696):\n    \"\"\"Find a number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=1873585696):\n    return a ** 0.5"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "FloatSquareRoot_5",
    "sat": "def sat(x: float, a=1479828086):\n    \"\"\"Find a number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=1479828086):\n    return a ** 0.5"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "FloatSquareRoot_6",
    "sat": "def sat(x: float, a=1072333649):\n    \"\"\"Find a number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=1072333649):\n    return a ** 0.5"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "FloatSquareRoot_7",
    "sat": "def sat(x: float, a=164552138):\n    \"\"\"Find a number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=164552138):\n    return a ** 0.5"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "FloatSquareRoot_8",
    "sat": "def sat(x: float, a=9291191277):\n    \"\"\"Find a number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=9291191277):\n    return a ** 0.5"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "FloatSquareRoot_9",
    "sat": "def sat(x: float, a=4371856557):\n    \"\"\"Find a number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=4371856557):\n    return a ** 0.5"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "FloatNegSquareRoot_0",
    "sat": "def sat(x: float, a=1020):\n    \"\"\"Find a negative number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=1020):\n    return -a ** 0.5"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "FloatNegSquareRoot_1",
    "sat": "def sat(x: float, a=2681275499):\n    \"\"\"Find a negative number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=2681275499):\n    return -a ** 0.5"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "FloatNegSquareRoot_2",
    "sat": "def sat(x: float, a=1363713245):\n    \"\"\"Find a negative number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=1363713245):\n    return -a ** 0.5"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "FloatNegSquareRoot_3",
    "sat": "def sat(x: float, a=3858703402):\n    \"\"\"Find a negative number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=3858703402):\n    return -a ** 0.5"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "FloatNegSquareRoot_4",
    "sat": "def sat(x: float, a=3804892221):\n    \"\"\"Find a negative number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=3804892221):\n    return -a ** 0.5"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "FloatNegSquareRoot_5",
    "sat": "def sat(x: float, a=9399317163):\n    \"\"\"Find a negative number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=9399317163):\n    return -a ** 0.5"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "FloatNegSquareRoot_6",
    "sat": "def sat(x: float, a=7349408781):\n    \"\"\"Find a negative number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=7349408781):\n    return -a ** 0.5"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "FloatNegSquareRoot_7",
    "sat": "def sat(x: float, a=3812748747):\n    \"\"\"Find a negative number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=3812748747):\n    return -a ** 0.5"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "FloatNegSquareRoot_8",
    "sat": "def sat(x: float, a=4501107522):\n    \"\"\"Find a negative number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=4501107522):\n    return -a ** 0.5"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "FloatNegSquareRoot_9",
    "sat": "def sat(x: float, a=3192570063):\n    \"\"\"Find a negative number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=3192570063):\n    return -a ** 0.5"
    ],
    "module": "trivial_inverse",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.002564102564102564
  },
  {
    "name": "Tutorial1_0",
    "sat": "def sat(s: str):\n    \"\"\"Find a string that when concatenated onto 'Hello ' gives 'Hello world'.\"\"\"\n    return \"Hello \" + s == \"Hello world\"",
    "sols": [
      "def sol():\n    return \"world\""
    ],
    "module": "tutorial",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.2
  },
  {
    "name": "Tutorial2_0",
    "sat": "def sat(s: str):\n    \"\"\"Find a string that when reversed and concatenated onto 'Hello ' gives 'Hello world'.\"\"\"\n    return \"Hello \" + s[::-1] == \"Hello world\"",
    "sols": [
      "def sol():\n    return \"world\"[::-1]"
    ],
    "module": "tutorial",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.2
  },
  {
    "name": "Tutorial3_0",
    "sat": "def sat(x: List[int]):\n    \"\"\"Find a list of two integers whose sum is 3.\"\"\"\n    return len(x) == 2 and sum(x) == 3",
    "sols": [
      "def sol():\n    return [1, 2]"
    ],
    "module": "tutorial",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.2
  },
  {
    "name": "Tutorial4_0",
    "sat": "def sat(s: List[str]):\n    \"\"\"Find a list of 1000 distinct strings which each have more 'a's than 'b's and at least one 'b'.\"\"\"\n    return len(set(s)) == 1000 and all((x.count(\"a\") > x.count(\"b\")) and ('b' in x) for x in s)",
    "sols": [
      "def sol():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]"
    ],
    "module": "tutorial",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.2
  },
  {
    "name": "Tutorial5_0",
    "sat": "def sat(n: int):\n    \"\"\"Find an integer whose perfect square begins with 123456789 in its decimal representation.\"\"\"\n    return str(n * n).startswith(\"123456789\")",
    "sols": [
      "def sol():\n    return int(int(\"123456789\" + \"0\" * 9) ** 0.5) + 1"
    ],
    "module": "tutorial",
    "notes": "",
    "taint_date": "2021-4-26",
    "weight": 0.2
  }
]