[
  {
    "name": "QuadraticRoot_0",
    "sat": "def sat(x: float, coeffs: List[float]=[2.5, 1.3, -0.5]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.5, 1.3, -0.5]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.5, 1.3, -0.5]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_1",
    "sat": "def sat(x: float, coeffs: List[float]=[0.14247631113539816, 0.0580487499201053, 0.002351142783718817]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.14247631113539816, 0.0580487499201053, 0.002351142783718817]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.14247631113539816, 0.0580487499201053, 0.002351142783718817]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_2",
    "sat": "def sat(x: float, coeffs: List[float]=[3.4823149147203325, 2.4840048876859715, -2575361.7365742377]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.4823149147203325, 2.4840048876859715, -2575361.7365742377]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.4823149147203325, 2.4840048876859715, -2575361.7365742377]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_3",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5866669210326788, 0.009799653973447805, -4.447967324598238]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5866669210326788, 0.009799653973447805, -4.447967324598238]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5866669210326788, 0.009799653973447805, -4.447967324598238]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_4",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5211381783558434, 1.248783962496373, 0.7327564040407003]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5211381783558434, 1.248783962496373, 0.7327564040407003]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5211381783558434, 1.248783962496373, 0.7327564040407003]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_5",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.998399798940723, -3.553321458157187, -0.560153230270126]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.998399798940723, -3.553321458157187, -0.560153230270126]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.998399798940723, -3.553321458157187, -0.560153230270126]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_6",
    "sat": "def sat(x: float, coeffs: List[float]=[0.21709973330437085, 0.2904651557927372, -0.06814390661719039]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21709973330437085, 0.2904651557927372, -0.06814390661719039]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.21709973330437085, 0.2904651557927372, -0.06814390661719039]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_7",
    "sat": "def sat(x: float, coeffs: List[float]=[2.844969017253877, -0.005819714291618612, -0.013091744163979745]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.844969017253877, -0.005819714291618612, -0.013091744163979745]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.844969017253877, -0.005819714291618612, -0.013091744163979745]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_8",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9688134613211372, 0.4486276179446301, -14.252343751332672]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9688134613211372, 0.4486276179446301, -14.252343751332672]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.9688134613211372, 0.4486276179446301, -14.252343751332672]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_9",
    "sat": "def sat(x: float, coeffs: List[float]=[4.752826360326748, -0.11322273857840015, -5.572835639299346]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.752826360326748, -0.11322273857840015, -5.572835639299346]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[4.752826360326748, -0.11322273857840015, -5.572835639299346]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_10",
    "sat": "def sat(x: float, coeffs: List[float]=[0.053012457380559486, 0.011046478816507665, 0.0005502813966929723]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.053012457380559486, 0.011046478816507665, 0.0005502813966929723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.053012457380559486, 0.011046478816507665, 0.0005502813966929723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_11",
    "sat": "def sat(x: float, coeffs: List[float]=[4.96442010612622, -1.145580688641056, -12.168861549878914]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.96442010612622, -1.145580688641056, -12.168861549878914]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[4.96442010612622, -1.145580688641056, -12.168861549878914]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_12",
    "sat": "def sat(x: float, coeffs: List[float]=[0.09374309559008191, 1.9610904453031333, -121.34959006263767]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09374309559008191, 1.9610904453031333, -121.34959006263767]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.09374309559008191, 1.9610904453031333, -121.34959006263767]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_13",
    "sat": "def sat(x: float, coeffs: List[float]=[75.38212520522357, 0.010213913546883058, -8.164822680246116]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[75.38212520522357, 0.010213913546883058, -8.164822680246116]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[75.38212520522357, 0.010213913546883058, -8.164822680246116]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_14",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.995492803058788, 5.520689513946118, -1.0518737192541612]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.995492803058788, 5.520689513946118, -1.0518737192541612]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-6.995492803058788, 5.520689513946118, -1.0518737192541612]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_15",
    "sat": "def sat(x: float, coeffs: List[float]=[0.23075617154745043, -2.103526339635205, -1.738944952672881]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.23075617154745043, -2.103526339635205, -1.738944952672881]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.23075617154745043, -2.103526339635205, -1.738944952672881]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_16",
    "sat": "def sat(x: float, coeffs: List[float]=[0.28765196480266714, 3.0810875616995674, -14.604289049907083]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.28765196480266714, 3.0810875616995674, -14.604289049907083]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.28765196480266714, 3.0810875616995674, -14.604289049907083]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_17",
    "sat": "def sat(x: float, coeffs: List[float]=[-31.590886172407362, 20.812020502977553, 136.73568427138906]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-31.590886172407362, 20.812020502977553, 136.73568427138906]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-31.590886172407362, 20.812020502977553, 136.73568427138906]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_18",
    "sat": "def sat(x: float, coeffs: List[float]=[-148.15566313288434, 2.3164191379287136, 3873.0589559958844]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-148.15566313288434, 2.3164191379287136, 3873.0589559958844]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-148.15566313288434, 2.3164191379287136, 3873.0589559958844]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_19",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3212318105178009, 1.054217202072098, 126.33402172198993]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3212318105178009, 1.054217202072098, 126.33402172198993]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3212318105178009, 1.054217202072098, 126.33402172198993]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_20",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4312390374948419, 0.04744023396412208, -0.37772855390049653]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4312390374948419, 0.04744023396412208, -0.37772855390049653]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4312390374948419, 0.04744023396412208, -0.37772855390049653]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_21",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.35512026982597655, -2.1952815079103485, 1.5342091408993317]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.35512026982597655, -2.1952815079103485, 1.5342091408993317]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.35512026982597655, -2.1952815079103485, 1.5342091408993317]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_22",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.022514535561346822, -0.25237767616379686, -0.29319354656339136]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.022514535561346822, -0.25237767616379686, -0.29319354656339136]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.022514535561346822, -0.25237767616379686, -0.29319354656339136]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_23",
    "sat": "def sat(x: float, coeffs: List[float]=[5.225938589830418, 4.107590714001696, -17.278469376509054]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.225938589830418, 4.107590714001696, -17.278469376509054]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.225938589830418, 4.107590714001696, -17.278469376509054]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_24",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4503847173192718, -21.223840185257057, -3.132403250116654]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4503847173192718, -21.223840185257057, -3.132403250116654]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4503847173192718, -21.223840185257057, -3.132403250116654]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_25",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9414144266587231, -3.7531343885586588, -1.8497074578545645]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9414144266587231, -3.7531343885586588, -1.8497074578545645]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.9414144266587231, -3.7531343885586588, -1.8497074578545645]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_26",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2174193290456723, -1.6654413053964492, -2.8350824191166453]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2174193290456723, -1.6654413053964492, -2.8350824191166453]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2174193290456723, -1.6654413053964492, -2.8350824191166453]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_27",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2987756454217523, -1.0862401288493724, -119.62029355360754]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2987756454217523, -1.0862401288493724, -119.62029355360754]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.2987756454217523, -1.0862401288493724, -119.62029355360754]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_28",
    "sat": "def sat(x: float, coeffs: List[float]=[0.044309553062655084, 0.39283226681859906, 0.7472308150458177]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.044309553062655084, 0.39283226681859906, 0.7472308150458177]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.044309553062655084, 0.39283226681859906, 0.7472308150458177]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_29",
    "sat": "def sat(x: float, coeffs: List[float]=[0.25376385653550826, -1.351764930603384, 1.7720146743281973]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.25376385653550826, -1.351764930603384, 1.7720146743281973]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.25376385653550826, -1.351764930603384, 1.7720146743281973]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_30",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6129013531639792, 0.22098858911701824, -0.4457345107432024]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6129013531639792, 0.22098858911701824, -0.4457345107432024]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6129013531639792, 0.22098858911701824, -0.4457345107432024]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_31",
    "sat": "def sat(x: float, coeffs: List[float]=[0.031850643421216095, 21.838667859638264, 29.983432356976625]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.031850643421216095, 21.838667859638264, 29.983432356976625]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.031850643421216095, 21.838667859638264, 29.983432356976625]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_32",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.29897817712328506, -26.936071850135658, -4.356836957338175]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.29897817712328506, -26.936071850135658, -4.356836957338175]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.29897817712328506, -26.936071850135658, -4.356836957338175]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_33",
    "sat": "def sat(x: float, coeffs: List[float]=[4.217682312524097, -73.22986420486008, 317.86360430783355]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.217682312524097, -73.22986420486008, 317.86360430783355]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[4.217682312524097, -73.22986420486008, 317.86360430783355]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_34",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0963385744115673, -64.112323137259, -14.694807331089418]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0963385744115673, -64.112323137259, -14.694807331089418]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.0963385744115673, -64.112323137259, -14.694807331089418]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_35",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.462015668442179, 0.5086020267885112, -0.03941921565266742]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.462015668442179, 0.5086020267885112, -0.03941921565266742]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.462015668442179, 0.5086020267885112, -0.03941921565266742]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_36",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3499079186206256, -1.235034475466552, -0.16095133983478999]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3499079186206256, -1.235034475466552, -0.16095133983478999]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.3499079186206256, -1.235034475466552, -0.16095133983478999]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_37",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.23490305398942488, 0.48407972986902353, 0.30971073868526755]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.23490305398942488, 0.48407972986902353, 0.30971073868526755]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.23490305398942488, 0.48407972986902353, 0.30971073868526755]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_38",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2107751985171952, -1.4710321024052428, -0.06305335087810388]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2107751985171952, -1.4710321024052428, -0.06305335087810388]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2107751985171952, -1.4710321024052428, -0.06305335087810388]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_39",
    "sat": "def sat(x: float, coeffs: List[float]=[6.053784822396533, -0.41262470636126825, -383.82815453327515]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.053784822396533, -0.41262470636126825, -383.82815453327515]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.053784822396533, -0.41262470636126825, -383.82815453327515]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_40",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6327755806595765, 0.6132601373300549, 0.14667664306817224]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6327755806595765, 0.6132601373300549, 0.14667664306817224]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6327755806595765, 0.6132601373300549, 0.14667664306817224]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_41",
    "sat": "def sat(x: float, coeffs: List[float]=[0.049978872455543964, -0.15828290066012998, -53.988541863978895]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.049978872455543964, -0.15828290066012998, -53.988541863978895]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.049978872455543964, -0.15828290066012998, -53.988541863978895]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_42",
    "sat": "def sat(x: float, coeffs: List[float]=[-18.331136448150342, 0.4829159839347124, 65.0492463879412]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.331136448150342, 0.4829159839347124, 65.0492463879412]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-18.331136448150342, 0.4829159839347124, 65.0492463879412]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_43",
    "sat": "def sat(x: float, coeffs: List[float]=[-183.9079149580839, 0.9082916440218369, 47839.83132799922]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-183.9079149580839, 0.9082916440218369, 47839.83132799922]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-183.9079149580839, 0.9082916440218369, 47839.83132799922]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_44",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3549565786473467, 0.3759614325035255, 0.14118111550498993]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3549565786473467, 0.3759614325035255, 0.14118111550498993]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3549565786473467, 0.3759614325035255, 0.14118111550498993]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_45",
    "sat": "def sat(x: float, coeffs: List[float]=[2.1593662175345822, -0.20760274227807884, -0.43876771842045637]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1593662175345822, -0.20760274227807884, -0.43876771842045637]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.1593662175345822, -0.20760274227807884, -0.43876771842045637]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_46",
    "sat": "def sat(x: float, coeffs: List[float]=[-44.86355577692518, -1.0403509093837602, 1086.401366557385]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-44.86355577692518, -1.0403509093837602, 1086.401366557385]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-44.86355577692518, -1.0403509093837602, 1086.401366557385]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_47",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5282506836016067, 134.93304852398447, 10432.563980811754]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5282506836016067, 134.93304852398447, 10432.563980811754]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5282506836016067, 134.93304852398447, 10432.563980811754]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_48",
    "sat": "def sat(x: float, coeffs: List[float]=[-18.183021029172327, 14.058130602111833, 35834.1856450956]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.183021029172327, 14.058130602111833, 35834.1856450956]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-18.183021029172327, 14.058130602111833, 35834.1856450956]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_49",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5078653889924231, 3.6024029604236056, 5.159276104032212]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5078653889924231, 3.6024029604236056, 5.159276104032212]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5078653889924231, 3.6024029604236056, 5.159276104032212]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_50",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.23086886892231165, 0.07815647209498693, 0.1500490188825851]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.23086886892231165, 0.07815647209498693, 0.1500490188825851]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.23086886892231165, 0.07815647209498693, 0.1500490188825851]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_51",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0917984082874171, -0.085640882053111, -1.7372618152628496]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0917984082874171, -0.085640882053111, -1.7372618152628496]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.0917984082874171, -0.085640882053111, -1.7372618152628496]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_52",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06845513329857611, -3.106838289739572, -1.8252221576325798]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06845513329857611, -3.106838289739572, -1.8252221576325798]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.06845513329857611, -3.106838289739572, -1.8252221576325798]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_53",
    "sat": "def sat(x: float, coeffs: List[float]=[0.15153335209552568, -0.661999026013471, 0.18944525213054178]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.15153335209552568, -0.661999026013471, 0.18944525213054178]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.15153335209552568, -0.661999026013471, 0.18944525213054178]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_54",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.958656034452405, -1.805464296080754, 210.39939177325002]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.958656034452405, -1.805464296080754, 210.39939177325002]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.958656034452405, -1.805464296080754, 210.39939177325002]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_55",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7179513073376045, 0.04437529268572393, 1.1651632737151865]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7179513073376045, 0.04437529268572393, 1.1651632737151865]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7179513073376045, 0.04437529268572393, 1.1651632737151865]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_56",
    "sat": "def sat(x: float, coeffs: List[float]=[1.5602141264980027, 18.918207900392268, 6.641795569640878]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5602141264980027, 18.918207900392268, 6.641795569640878]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.5602141264980027, 18.918207900392268, 6.641795569640878]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_57",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11383549945429088, -0.5244680890234489, 8689.035632408924]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11383549945429088, -0.5244680890234489, 8689.035632408924]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.11383549945429088, -0.5244680890234489, 8689.035632408924]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_58",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05343738928904814, 0.8390320994709208, 1.537201568589754]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05343738928904814, 0.8390320994709208, 1.537201568589754]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.05343738928904814, 0.8390320994709208, 1.537201568589754]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_59",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.01345433179391109, -0.5201498783302139, -2.1986831579545636]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.01345433179391109, -0.5201498783302139, -2.1986831579545636]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.01345433179391109, -0.5201498783302139, -2.1986831579545636]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_60",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3129077601147501, 0.042865827159448054, -0.2454400050733034]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3129077601147501, 0.042865827159448054, -0.2454400050733034]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.3129077601147501, 0.042865827159448054, -0.2454400050733034]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_61",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8503757558294156, -20.63996414570099, -0.885070262683128]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8503757558294156, -20.63996414570099, -0.885070262683128]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8503757558294156, -20.63996414570099, -0.885070262683128]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_62",
    "sat": "def sat(x: float, coeffs: List[float]=[1.5943690694914914, 0.05039907453229923, -0.0004295866288366527]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5943690694914914, 0.05039907453229923, -0.0004295866288366527]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.5943690694914914, 0.05039907453229923, -0.0004295866288366527]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_63",
    "sat": "def sat(x: float, coeffs: List[float]=[2.7707869586254543, 20.532154058550336, 4.955087593769872]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.7707869586254543, 20.532154058550336, 4.955087593769872]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.7707869586254543, 20.532154058550336, 4.955087593769872]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_64",
    "sat": "def sat(x: float, coeffs: List[float]=[-58.49376940265316, 0.02179427044333367, 9317.672269096667]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-58.49376940265316, 0.02179427044333367, 9317.672269096667]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-58.49376940265316, 0.02179427044333367, 9317.672269096667]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_65",
    "sat": "def sat(x: float, coeffs: List[float]=[11.098715663755547, -0.8239925910741172, -206.7679074052216]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.098715663755547, -0.8239925910741172, -206.7679074052216]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[11.098715663755547, -0.8239925910741172, -206.7679074052216]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_66",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8982549372263523, -0.6314067983648032, -322.11274616921185]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8982549372263523, -0.6314067983648032, -322.11274616921185]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8982549372263523, -0.6314067983648032, -322.11274616921185]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_67",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2868499174295893, 1.3640256915256161, -25.344913612323207]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2868499174295893, 1.3640256915256161, -25.344913612323207]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2868499174295893, 1.3640256915256161, -25.344913612323207]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_68",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0365615790995737, -0.08953334723364843, -0.013656218333170753]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0365615790995737, -0.08953334723364843, -0.013656218333170753]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.0365615790995737, -0.08953334723364843, -0.013656218333170753]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_69",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.08116340111824234, 0.23392092256042027, 0.033137057462257105]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08116340111824234, 0.23392092256042027, 0.033137057462257105]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.08116340111824234, 0.23392092256042027, 0.033137057462257105]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_70",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.10590206905479, 0.1282259798664048, 0.03476467194693278]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.10590206905479, 0.1282259798664048, 0.03476467194693278]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.10590206905479, 0.1282259798664048, 0.03476467194693278]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_71",
    "sat": "def sat(x: float, coeffs: List[float]=[-11.595853563370914, -0.1369372266765203, 0.04316972447954709]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.595853563370914, -0.1369372266765203, 0.04316972447954709]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-11.595853563370914, -0.1369372266765203, 0.04316972447954709]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_72",
    "sat": "def sat(x: float, coeffs: List[float]=[1.019914368722404, -17.71997581579796, 3.710370224143082]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.019914368722404, -17.71997581579796, 3.710370224143082]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.019914368722404, -17.71997581579796, 3.710370224143082]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_73",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.024592192808035485, 200.07525285762043, 82.0839858048186]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.024592192808035485, 200.07525285762043, 82.0839858048186]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.024592192808035485, 200.07525285762043, 82.0839858048186]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_74",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.41481099588975195, 0.020291590683217436, 0.00148237977422092]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.41481099588975195, 0.020291590683217436, 0.00148237977422092]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.41481099588975195, 0.020291590683217436, 0.00148237977422092]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_75",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0625541563807699, -0.7157616159495438, 1.1051102086325448]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0625541563807699, -0.7157616159495438, 1.1051102086325448]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.0625541563807699, -0.7157616159495438, 1.1051102086325448]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_76",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3070417033733082, -0.3358580169572723, 1.9961334506425272]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3070417033733082, -0.3358580169572723, 1.9961334506425272]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.3070417033733082, -0.3358580169572723, 1.9961334506425272]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_77",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7675229665152529, 22.454617139354042, -627.8781990136785]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7675229665152529, 22.454617139354042, -627.8781990136785]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.7675229665152529, 22.454617139354042, -627.8781990136785]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_78",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.22532826620023663, -12.799364174673302, 10.902466400899751]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.22532826620023663, -12.799364174673302, 10.902466400899751]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.22532826620023663, -12.799364174673302, 10.902466400899751]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_79",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.013139484119188452, 16.316260383437413, 7.792082289691041]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.013139484119188452, 16.316260383437413, 7.792082289691041]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.013139484119188452, 16.316260383437413, 7.792082289691041]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_80",
    "sat": "def sat(x: float, coeffs: List[float]=[23.876587713552237, -0.29560478107048366, -473.32658782690356]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[23.876587713552237, -0.29560478107048366, -473.32658782690356]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[23.876587713552237, -0.29560478107048366, -473.32658782690356]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_81",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6903583802634637, 1.9993871616961076, -0.5087336922896671]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6903583802634637, 1.9993871616961076, -0.5087336922896671]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6903583802634637, 1.9993871616961076, -0.5087336922896671]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_82",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4654627461034943, -4.285599418610768, 0.14187835308623464]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4654627461034943, -4.285599418610768, 0.14187835308623464]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.4654627461034943, -4.285599418610768, 0.14187835308623464]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_83",
    "sat": "def sat(x: float, coeffs: List[float]=[1.599833213137009, 0.2066046883271364, -0.9050054174136576]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.599833213137009, 0.2066046883271364, -0.9050054174136576]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.599833213137009, 0.2066046883271364, -0.9050054174136576]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_84",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1546341002753724, -987.1084056559138, -2943.988241671015]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1546341002753724, -987.1084056559138, -2943.988241671015]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1546341002753724, -987.1084056559138, -2943.988241671015]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_85",
    "sat": "def sat(x: float, coeffs: List[float]=[17.58073072009986, -0.009242209004828306, -1.833707386747169]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[17.58073072009986, -0.009242209004828306, -1.833707386747169]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[17.58073072009986, -0.009242209004828306, -1.833707386747169]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_86",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3901952311969386, 5.1951251379084304, -538.2035286167982]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3901952311969386, 5.1951251379084304, -538.2035286167982]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.3901952311969386, 5.1951251379084304, -538.2035286167982]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_87",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0677385604084808, 0.11962946789941713, 0.16632106748421882]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0677385604084808, 0.11962946789941713, 0.16632106748421882]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.0677385604084808, 0.11962946789941713, 0.16632106748421882]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_88",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.21492680341862794, 0.12091110719183044, 0.29982801254124547]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.21492680341862794, 0.12091110719183044, 0.29982801254124547]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.21492680341862794, 0.12091110719183044, 0.29982801254124547]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_89",
    "sat": "def sat(x: float, coeffs: List[float]=[0.005557956696288964, 0.9632694154188125, 11.567214044161902]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.005557956696288964, 0.9632694154188125, 11.567214044161902]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.005557956696288964, 0.9632694154188125, 11.567214044161902]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_90",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.134519534098985, -0.7756788541864829, 136.30393960132318]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.134519534098985, -0.7756788541864829, 136.30393960132318]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.134519534098985, -0.7756788541864829, 136.30393960132318]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_91",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0026360503879199193, 0.33455937492144444, -0.009595250504652614]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0026360503879199193, 0.33455937492144444, -0.009595250504652614]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.0026360503879199193, 0.33455937492144444, -0.009595250504652614]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_92",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.4323332197474399, 0.27866655613437885, 2.594332487572059]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4323332197474399, 0.27866655613437885, 2.594332487572059]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.4323332197474399, 0.27866655613437885, 2.594332487572059]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_93",
    "sat": "def sat(x: float, coeffs: List[float]=[2.868030150251847, -0.060870750704795494, -5.022124261280884]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.868030150251847, -0.060870750704795494, -5.022124261280884]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.868030150251847, -0.060870750704795494, -5.022124261280884]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_94",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.5757702193054648, -0.25308566201627153, 0.03143149773897224]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5757702193054648, -0.25308566201627153, 0.03143149773897224]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.5757702193054648, -0.25308566201627153, 0.03143149773897224]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_95",
    "sat": "def sat(x: float, coeffs: List[float]=[38.486176097828654, -0.24983898732799062, -9268903.595603101]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[38.486176097828654, -0.24983898732799062, -9268903.595603101]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[38.486176097828654, -0.24983898732799062, -9268903.595603101]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_96",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.9091880065926523, 24.21753117519249, 0.8938643251205428]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9091880065926523, 24.21753117519249, 0.8938643251205428]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.9091880065926523, 24.21753117519249, 0.8938643251205428]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_97",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6274779311978458, 0.143956787171319, 0.0004698754276894861]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6274779311978458, 0.143956787171319, 0.0004698754276894861]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6274779311978458, 0.143956787171319, 0.0004698754276894861]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_98",
    "sat": "def sat(x: float, coeffs: List[float]=[8.78088814989961, -388.0111816311194, -82.64633513621743]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.78088814989961, -388.0111816311194, -82.64633513621743]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[8.78088814989961, -388.0111816311194, -82.64633513621743]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_99",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9357803376623216, 0.2987635790269844, 171.21315955265135]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9357803376623216, 0.2987635790269844, 171.21315955265135]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.9357803376623216, 0.2987635790269844, 171.21315955265135]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_100",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3972129603297714, -606.8206930968105, 105.61705527389424]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3972129603297714, -606.8206930968105, 105.61705527389424]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.3972129603297714, -606.8206930968105, 105.61705527389424]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_101",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05665252350835067, 0.009222464667450506, -0.2844747442646272]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05665252350835067, 0.009222464667450506, -0.2844747442646272]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.05665252350835067, 0.009222464667450506, -0.2844747442646272]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_102",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3763553684812764, -7.536418489945015, -1.4584644028342533]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3763553684812764, -7.536418489945015, -1.4584644028342533]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3763553684812764, -7.536418489945015, -1.4584644028342533]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_103",
    "sat": "def sat(x: float, coeffs: List[float]=[-94.51835917466457, -0.25044565523557255, 0.03704525991713295]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-94.51835917466457, -0.25044565523557255, 0.03704525991713295]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-94.51835917466457, -0.25044565523557255, 0.03704525991713295]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_104",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.17926020509123872, -0.0841241777834471, -0.004694877476026494]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17926020509123872, -0.0841241777834471, -0.004694877476026494]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.17926020509123872, -0.0841241777834471, -0.004694877476026494]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_105",
    "sat": "def sat(x: float, coeffs: List[float]=[2.2801397357178366, -0.16405805720865327, -1.2422875383790868]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2801397357178366, -0.16405805720865327, -1.2422875383790868]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.2801397357178366, -0.16405805720865327, -1.2422875383790868]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_106",
    "sat": "def sat(x: float, coeffs: List[float]=[0.19154796146539374, -0.24918843441955377, -0.034224454686617056]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.19154796146539374, -0.24918843441955377, -0.034224454686617056]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.19154796146539374, -0.24918843441955377, -0.034224454686617056]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_107",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7701558157244518, -1.2599226395246401, 0.04788518143692936]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7701558157244518, -1.2599226395246401, 0.04788518143692936]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7701558157244518, -1.2599226395246401, 0.04788518143692936]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_108",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08131075438253858, 4.260143248603577, 0.08265325578809127]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08131075438253858, 4.260143248603577, 0.08265325578809127]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.08131075438253858, 4.260143248603577, 0.08265325578809127]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_109",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7431849406866052, 4.460595167206066, 1.100050997211735]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7431849406866052, 4.460595167206066, 1.100050997211735]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.7431849406866052, 4.460595167206066, 1.100050997211735]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_110",
    "sat": "def sat(x: float, coeffs: List[float]=[0.04041043034599682, 0.3062151629962946, 0.03384586196577979]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04041043034599682, 0.3062151629962946, 0.03384586196577979]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.04041043034599682, 0.3062151629962946, 0.03384586196577979]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_111",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7072166458898765, 1.3056926621808531, -1.3262108292398915]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7072166458898765, 1.3056926621808531, -1.3262108292398915]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.7072166458898765, 1.3056926621808531, -1.3262108292398915]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_112",
    "sat": "def sat(x: float, coeffs: List[float]=[8.523365945841801, -0.48216891801359624, -1.0725779382713332]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.523365945841801, -0.48216891801359624, -1.0725779382713332]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[8.523365945841801, -0.48216891801359624, -1.0725779382713332]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_113",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6488130831632916, 0.33801904395867366, 1.2163941700296141]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6488130831632916, 0.33801904395867366, 1.2163941700296141]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6488130831632916, 0.33801904395867366, 1.2163941700296141]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_114",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3487411685548894, -10.338533415890694, 0.5300547163749079]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3487411685548894, -10.338533415890694, 0.5300547163749079]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3487411685548894, -10.338533415890694, 0.5300547163749079]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_115",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.06661299708013131, -6.8783443758213, -3.741913623092733]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06661299708013131, -6.8783443758213, -3.741913623092733]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.06661299708013131, -6.8783443758213, -3.741913623092733]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_116",
    "sat": "def sat(x: float, coeffs: List[float]=[1.751946577244898, 26.44796755422121, -22.06770648539186]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.751946577244898, 26.44796755422121, -22.06770648539186]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.751946577244898, 26.44796755422121, -22.06770648539186]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_117",
    "sat": "def sat(x: float, coeffs: List[float]=[-61.68042412741855, -0.5943645230329206, 32.97343717767491]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-61.68042412741855, -0.5943645230329206, 32.97343717767491]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-61.68042412741855, -0.5943645230329206, 32.97343717767491]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_118",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.35858334350037, 5.559286827028793, -0.6721509787988018]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.35858334350037, 5.559286827028793, -0.6721509787988018]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-6.35858334350037, 5.559286827028793, -0.6721509787988018]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_119",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2640434804194187, 2.366397304867592, -0.4827367193239569]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2640434804194187, 2.366397304867592, -0.4827367193239569]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.2640434804194187, 2.366397304867592, -0.4827367193239569]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_120",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1790689802554719, -4.1865163303215205, 2.144999159112969]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1790689802554719, -4.1865163303215205, 2.144999159112969]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1790689802554719, -4.1865163303215205, 2.144999159112969]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_121",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7050452290501963, -0.9443068442319031, 0.009620539555074052]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7050452290501963, -0.9443068442319031, 0.009620539555074052]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.7050452290501963, -0.9443068442319031, 0.009620539555074052]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_122",
    "sat": "def sat(x: float, coeffs: List[float]=[3.225293991756639, 0.31771757974959175, -0.0011795733373481457]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.225293991756639, 0.31771757974959175, -0.0011795733373481457]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.225293991756639, 0.31771757974959175, -0.0011795733373481457]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_123",
    "sat": "def sat(x: float, coeffs: List[float]=[0.02149450318903427, 299.8875478925491, 551.4522018146482]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.02149450318903427, 299.8875478925491, 551.4522018146482]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.02149450318903427, 299.8875478925491, 551.4522018146482]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_124",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0261923138011098, 0.4048156626144587, -0.03462187524915253]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0261923138011098, 0.4048156626144587, -0.03462187524915253]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.0261923138011098, 0.4048156626144587, -0.03462187524915253]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_125",
    "sat": "def sat(x: float, coeffs: List[float]=[-13.913322954886448, -1.038199132052493, 0.9598285668728652]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.913322954886448, -1.038199132052493, 0.9598285668728652]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-13.913322954886448, -1.038199132052493, 0.9598285668728652]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_126",
    "sat": "def sat(x: float, coeffs: List[float]=[2.0968678530766303, 3.341647214340343, -0.734051961323844]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0968678530766303, 3.341647214340343, -0.734051961323844]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.0968678530766303, 3.341647214340343, -0.734051961323844]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_127",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.522450051262399, 0.16208010542752072, 0.18588935520687774]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.522450051262399, 0.16208010542752072, 0.18588935520687774]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.522450051262399, 0.16208010542752072, 0.18588935520687774]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_128",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1779180228787399, -0.4011050762498522, 0.023853972806905887]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1779180228787399, -0.4011050762498522, 0.023853972806905887]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1779180228787399, -0.4011050762498522, 0.023853972806905887]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_129",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.699066668061604, -11.396257321062938, -5.854169721937836]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.699066668061604, -11.396257321062938, -5.854169721937836]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.699066668061604, -11.396257321062938, -5.854169721937836]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_130",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4920007321166581, 0.8073523150626859, 0.2541246948994881]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4920007321166581, 0.8073523150626859, 0.2541246948994881]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4920007321166581, 0.8073523150626859, 0.2541246948994881]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_131",
    "sat": "def sat(x: float, coeffs: List[float]=[0.062756778738788, -15.245844950119894, -46.48974920900769]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.062756778738788, -15.245844950119894, -46.48974920900769]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.062756778738788, -15.245844950119894, -46.48974920900769]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_132",
    "sat": "def sat(x: float, coeffs: List[float]=[-9.829997419769205, -0.5091412674543007, 917086.3534192215]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.829997419769205, -0.5091412674543007, 917086.3534192215]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-9.829997419769205, -0.5091412674543007, 917086.3534192215]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_133",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.3619983067134593, 479.9628267040371, -11712.47236745357]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.3619983067134593, 479.9628267040371, -11712.47236745357]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.3619983067134593, 479.9628267040371, -11712.47236745357]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_134",
    "sat": "def sat(x: float, coeffs: List[float]=[0.20497211175605043, 1.5313267253421206, -3.40990375789851]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.20497211175605043, 1.5313267253421206, -3.40990375789851]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.20497211175605043, 1.5313267253421206, -3.40990375789851]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_135",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.053132456426238615, -0.0010836258904334262, 0.23153898081357904]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.053132456426238615, -0.0010836258904334262, 0.23153898081357904]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.053132456426238615, -0.0010836258904334262, 0.23153898081357904]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_136",
    "sat": "def sat(x: float, coeffs: List[float]=[3.810603302850566, 0.5515706215550144, -262.9683589609966]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.810603302850566, 0.5515706215550144, -262.9683589609966]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.810603302850566, 0.5515706215550144, -262.9683589609966]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_137",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6552169887074716, -0.5708630156645126, 1.4879899983683895]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6552169887074716, -0.5708630156645126, 1.4879899983683895]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6552169887074716, -0.5708630156645126, 1.4879899983683895]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_138",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.7337618416064264, -0.20853597014830175, 0.06519773439638216]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7337618416064264, -0.20853597014830175, 0.06519773439638216]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.7337618416064264, -0.20853597014830175, 0.06519773439638216]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_139",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.65394558876886, 3.320217693281186, 57.325231917863015]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.65394558876886, 3.320217693281186, 57.325231917863015]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-5.65394558876886, 3.320217693281186, 57.325231917863015]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_140",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.838997078474212, 2.6230043096241142, -0.013796717519779548]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.838997078474212, 2.6230043096241142, -0.013796717519779548]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.838997078474212, 2.6230043096241142, -0.013796717519779548]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_141",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1878722326713443, -0.51737353538444, 0.2800121203299027]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1878722326713443, -0.51737353538444, 0.2800121203299027]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1878722326713443, -0.51737353538444, 0.2800121203299027]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_142",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7167216232815746, 0.29736577993785224, -0.013596422460942725]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7167216232815746, 0.29736577993785224, -0.013596422460942725]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7167216232815746, 0.29736577993785224, -0.013596422460942725]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_143",
    "sat": "def sat(x: float, coeffs: List[float]=[22.58124757304897, 0.16729728189731788, -0.08980063425912178]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[22.58124757304897, 0.16729728189731788, -0.08980063425912178]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[22.58124757304897, 0.16729728189731788, -0.08980063425912178]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_144",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05188697023126276, 0.23357736308522128, 0.2286853583602627]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05188697023126276, 0.23357736308522128, 0.2286853583602627]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.05188697023126276, 0.23357736308522128, 0.2286853583602627]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_145",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.19660002644398258, -3.8612282498928354, 950.2508640032029]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19660002644398258, -3.8612282498928354, 950.2508640032029]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.19660002644398258, -3.8612282498928354, 950.2508640032029]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_146",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.37536907633322736, -0.5287582075299531, 0.0749875056486087]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.37536907633322736, -0.5287582075299531, 0.0749875056486087]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.37536907633322736, -0.5287582075299531, 0.0749875056486087]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_147",
    "sat": "def sat(x: float, coeffs: List[float]=[0.03338205683238319, 11.327058794073155, 4.205510003416376]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03338205683238319, 11.327058794073155, 4.205510003416376]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.03338205683238319, 11.327058794073155, 4.205510003416376]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_148",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8023279661650391, -3.761813869775748, -43.201021643977334]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8023279661650391, -3.761813869775748, -43.201021643977334]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8023279661650391, -3.761813869775748, -43.201021643977334]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_149",
    "sat": "def sat(x: float, coeffs: List[float]=[2.5190086123060222, 1.111333532662659, -3.7880850898968914]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.5190086123060222, 1.111333532662659, -3.7880850898968914]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.5190086123060222, 1.111333532662659, -3.7880850898968914]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_150",
    "sat": "def sat(x: float, coeffs: List[float]=[0.03509988551266704, 0.7834384160786213, -0.12298501220892273]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03509988551266704, 0.7834384160786213, -0.12298501220892273]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.03509988551266704, 0.7834384160786213, -0.12298501220892273]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_151",
    "sat": "def sat(x: float, coeffs: List[float]=[9.17462773429783, -4.050016260987513, -7.084597812399202]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.17462773429783, -4.050016260987513, -7.084597812399202]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[9.17462773429783, -4.050016260987513, -7.084597812399202]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_152",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0008212681766917029, -0.9503720403044552, 0.26585330715698546]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0008212681766917029, -0.9503720403044552, 0.26585330715698546]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.0008212681766917029, -0.9503720403044552, 0.26585330715698546]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_153",
    "sat": "def sat(x: float, coeffs: List[float]=[415.65252146978474, 0.09167529153139424, -1.6755584688914174]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[415.65252146978474, 0.09167529153139424, -1.6755584688914174]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[415.65252146978474, 0.09167529153139424, -1.6755584688914174]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_154",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2844146014984996, -0.012385159280813, 0.1000383289661913]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2844146014984996, -0.012385159280813, 0.1000383289661913]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2844146014984996, -0.012385159280813, 0.1000383289661913]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_155",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.04053881580377642, 1.4761647715378894, -0.04298433506486427]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04053881580377642, 1.4761647715378894, -0.04298433506486427]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.04053881580377642, 1.4761647715378894, -0.04298433506486427]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_156",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0013022478750233, 0.19680883654698955, -0.04926381198486432]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0013022478750233, 0.19680883654698955, -0.04926381198486432]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.0013022478750233, 0.19680883654698955, -0.04926381198486432]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_157",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6188159753125749, -1.5316075310743935, -0.12199607732306329]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6188159753125749, -1.5316075310743935, -0.12199607732306329]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6188159753125749, -1.5316075310743935, -0.12199607732306329]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_158",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9866920217905366, -0.26799322161107114, -95.10010785787314]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9866920217905366, -0.26799322161107114, -95.10010785787314]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.9866920217905366, -0.26799322161107114, -95.10010785787314]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_159",
    "sat": "def sat(x: float, coeffs: List[float]=[-11.720450210097823, -0.01679004117594481, 16.810146953478988]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.720450210097823, -0.01679004117594481, 16.810146953478988]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-11.720450210097823, -0.01679004117594481, 16.810146953478988]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_160",
    "sat": "def sat(x: float, coeffs: List[float]=[6.685890512945737, 0.01217200373808236, -13.42479179538058]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.685890512945737, 0.01217200373808236, -13.42479179538058]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.685890512945737, 0.01217200373808236, -13.42479179538058]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_161",
    "sat": "def sat(x: float, coeffs: List[float]=[0.07308258695837007, 1.0470487771174275, -0.5753566625368124]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07308258695837007, 1.0470487771174275, -0.5753566625368124]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.07308258695837007, 1.0470487771174275, -0.5753566625368124]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_162",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.544107963971842, 0.18919101388324852, 42.70294777378175]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.544107963971842, 0.18919101388324852, 42.70294777378175]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.544107963971842, 0.18919101388324852, 42.70294777378175]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_163",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8808120937212207, -0.8701671411560837, 1.879942195319468]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8808120937212207, -0.8701671411560837, 1.879942195319468]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8808120937212207, -0.8701671411560837, 1.879942195319468]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_164",
    "sat": "def sat(x: float, coeffs: List[float]=[-18.063379144548204, -7.602166904159108, 8.415920303482652]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.063379144548204, -7.602166904159108, 8.415920303482652]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-18.063379144548204, -7.602166904159108, 8.415920303482652]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_165",
    "sat": "def sat(x: float, coeffs: List[float]=[14.17817126508671, 0.2217761449596114, -2.8113414530301375]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.17817126508671, 0.2217761449596114, -2.8113414530301375]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[14.17817126508671, 0.2217761449596114, -2.8113414530301375]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_166",
    "sat": "def sat(x: float, coeffs: List[float]=[19.95421249153433, -4.632947293625747, -1314.452265359822]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[19.95421249153433, -4.632947293625747, -1314.452265359822]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[19.95421249153433, -4.632947293625747, -1314.452265359822]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_167",
    "sat": "def sat(x: float, coeffs: List[float]=[12.723103264753034, -0.7970810883538914, -0.2596522728519094]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.723103264753034, -0.7970810883538914, -0.2596522728519094]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[12.723103264753034, -0.7970810883538914, -0.2596522728519094]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_168",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4836255427490516, -0.16542362019187692, -0.3499987437693218]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4836255427490516, -0.16542362019187692, -0.3499987437693218]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4836255427490516, -0.16542362019187692, -0.3499987437693218]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_169",
    "sat": "def sat(x: float, coeffs: List[float]=[-24.408858612748165, 0.05250018182431996, 397.34718239391174]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-24.408858612748165, 0.05250018182431996, 397.34718239391174]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-24.408858612748165, 0.05250018182431996, 397.34718239391174]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_170",
    "sat": "def sat(x: float, coeffs: List[float]=[3.022507244738044, -0.39383068121929393, -19.653256711275624]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.022507244738044, -0.39383068121929393, -19.653256711275624]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.022507244738044, -0.39383068121929393, -19.653256711275624]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_171",
    "sat": "def sat(x: float, coeffs: List[float]=[12.953520181182645, 44.301914858833754, -1291.4446211854479]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.953520181182645, 44.301914858833754, -1291.4446211854479]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[12.953520181182645, 44.301914858833754, -1291.4446211854479]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_172",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5495356986197288, 0.28468901319314166, -9873.571054259728]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5495356986197288, 0.28468901319314166, -9873.571054259728]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5495356986197288, 0.28468901319314166, -9873.571054259728]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_173",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7379727194061996, 19.922091831804263, 103.20278465276155]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7379727194061996, 19.922091831804263, 103.20278465276155]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7379727194061996, 19.922091831804263, 103.20278465276155]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_174",
    "sat": "def sat(x: float, coeffs: List[float]=[2.8136155435133112, 0.5093843568778708, -166941.8582441758]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.8136155435133112, 0.5093843568778708, -166941.8582441758]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.8136155435133112, 0.5093843568778708, -166941.8582441758]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_175",
    "sat": "def sat(x: float, coeffs: List[float]=[105.97283785294974, -3.049056498468977, -24661.56274036868]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[105.97283785294974, -3.049056498468977, -24661.56274036868]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[105.97283785294974, -3.049056498468977, -24661.56274036868]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_176",
    "sat": "def sat(x: float, coeffs: List[float]=[1.9906934019036246, -11.89639149212232, -329.5484032638409]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9906934019036246, -11.89639149212232, -329.5484032638409]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.9906934019036246, -11.89639149212232, -329.5484032638409]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_177",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08300406214783902, 0.16141949597407165, 0.06653769324983963]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08300406214783902, 0.16141949597407165, 0.06653769324983963]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.08300406214783902, 0.16141949597407165, 0.06653769324983963]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_178",
    "sat": "def sat(x: float, coeffs: List[float]=[-9.551700565945614, -1.7684186764806666, 0.5552387906944607]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.551700565945614, -1.7684186764806666, 0.5552387906944607]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-9.551700565945614, -1.7684186764806666, 0.5552387906944607]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_179",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5700595244241055, 0.06549875360245709, 19722.732655817323]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5700595244241055, 0.06549875360245709, 19722.732655817323]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5700595244241055, 0.06549875360245709, 19722.732655817323]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_180",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.09753184607292635, 0.5281589041578304, -0.11075774003711356]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09753184607292635, 0.5281589041578304, -0.11075774003711356]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.09753184607292635, 0.5281589041578304, -0.11075774003711356]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_181",
    "sat": "def sat(x: float, coeffs: List[float]=[0.40691926510230186, -0.7937643035074494, -0.8808395624518827]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.40691926510230186, -0.7937643035074494, -0.8808395624518827]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.40691926510230186, -0.7937643035074494, -0.8808395624518827]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_182",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.684333994923023, 95.69410033016857, -29.74097805415764]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.684333994923023, 95.69410033016857, -29.74097805415764]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.684333994923023, 95.69410033016857, -29.74097805415764]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_183",
    "sat": "def sat(x: float, coeffs: List[float]=[1.6637796400551623, 0.2523872116696286, 0.00886044006531363]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6637796400551623, 0.2523872116696286, 0.00886044006531363]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.6637796400551623, 0.2523872116696286, 0.00886044006531363]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_184",
    "sat": "def sat(x: float, coeffs: List[float]=[2.6676676457065525, 0.3171326359736459, -0.9500943926695742]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.6676676457065525, 0.3171326359736459, -0.9500943926695742]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.6676676457065525, 0.3171326359736459, -0.9500943926695742]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_185",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3373404979184274, -49.85846052382514, 96.40358561705047]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3373404979184274, -49.85846052382514, 96.40358561705047]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.3373404979184274, -49.85846052382514, 96.40358561705047]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_186",
    "sat": "def sat(x: float, coeffs: List[float]=[15.409136708111781, -0.1983244304932228, -0.03267524477557117]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.409136708111781, -0.1983244304932228, -0.03267524477557117]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[15.409136708111781, -0.1983244304932228, -0.03267524477557117]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_187",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.272108027751248, -2.5278409887563806, 45.2382891843971]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.272108027751248, -2.5278409887563806, 45.2382891843971]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.272108027751248, -2.5278409887563806, 45.2382891843971]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_188",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0251925115055698, -1.276407002900967, -0.06174753851054204]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0251925115055698, -1.276407002900967, -0.06174753851054204]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.0251925115055698, -1.276407002900967, -0.06174753851054204]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_189",
    "sat": "def sat(x: float, coeffs: List[float]=[11.717583162250753, -19.447140466750984, -14045.052965632596]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.717583162250753, -19.447140466750984, -14045.052965632596]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[11.717583162250753, -19.447140466750984, -14045.052965632596]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_190",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6545608464175084, 5.6981547841644575, 6.717833776565159]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6545608464175084, 5.6981547841644575, 6.717833776565159]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6545608464175084, 5.6981547841644575, 6.717833776565159]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_191",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8329757615007786, 1.2005361993989856, -0.10542133930321006]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8329757615007786, 1.2005361993989856, -0.10542133930321006]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8329757615007786, 1.2005361993989856, -0.10542133930321006]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_192",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.952368493710692, 1.4385535015474344, 275311.46023760457]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.952368493710692, 1.4385535015474344, 275311.46023760457]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.952368493710692, 1.4385535015474344, 275311.46023760457]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_193",
    "sat": "def sat(x: float, coeffs: List[float]=[0.34996035315990515, 1.2872006173079023, 0.7612688985832369]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.34996035315990515, 1.2872006173079023, 0.7612688985832369]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.34996035315990515, 1.2872006173079023, 0.7612688985832369]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_194",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.02850850767562522, -0.9191495268076557, 0.10475514288536544]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.02850850767562522, -0.9191495268076557, 0.10475514288536544]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.02850850767562522, -0.9191495268076557, 0.10475514288536544]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_195",
    "sat": "def sat(x: float, coeffs: List[float]=[1.246735931510359, -0.08731356417266715, -225.11150888903234]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.246735931510359, -0.08731356417266715, -225.11150888903234]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.246735931510359, -0.08731356417266715, -225.11150888903234]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_196",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.09538219381340023, 33.29651153394678, 4.112624389757122]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09538219381340023, 33.29651153394678, 4.112624389757122]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.09538219381340023, 33.29651153394678, 4.112624389757122]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_197",
    "sat": "def sat(x: float, coeffs: List[float]=[-63.15398082553418, 0.4561536209182879, 1903.7575822152269]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-63.15398082553418, 0.4561536209182879, 1903.7575822152269]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-63.15398082553418, 0.4561536209182879, 1903.7575822152269]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_198",
    "sat": "def sat(x: float, coeffs: List[float]=[-18.841154207594013, 0.1931887438529171, 49.27035594711697]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.841154207594013, 0.1931887438529171, 49.27035594711697]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-18.841154207594013, 0.1931887438529171, 49.27035594711697]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_199",
    "sat": "def sat(x: float, coeffs: List[float]=[6.764441798626187, -1.7882414336258476, -1245.9497908850972]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.764441798626187, -1.7882414336258476, -1245.9497908850972]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.764441798626187, -1.7882414336258476, -1245.9497908850972]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_200",
    "sat": "def sat(x: float, coeffs: List[float]=[2.2541604469714955, -0.15324169096821616, -268.71656078529736]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2541604469714955, -0.15324169096821616, -268.71656078529736]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.2541604469714955, -0.15324169096821616, -268.71656078529736]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_201",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2183250828625325, 19.972379139663015, 1.8145729651561362]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2183250828625325, 19.972379139663015, 1.8145729651561362]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2183250828625325, 19.972379139663015, 1.8145729651561362]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_202",
    "sat": "def sat(x: float, coeffs: List[float]=[143.5908442039446, 0.3424837167812666, -16.58278915333492]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[143.5908442039446, 0.3424837167812666, -16.58278915333492]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[143.5908442039446, 0.3424837167812666, -16.58278915333492]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_203",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.171263648092031, -0.6530799673662259, 4.045563397271126]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.171263648092031, -0.6530799673662259, 4.045563397271126]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.171263648092031, -0.6530799673662259, 4.045563397271126]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_204",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.09769583358951921, -0.48116069280658297, 0.8018674821014238]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09769583358951921, -0.48116069280658297, 0.8018674821014238]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.09769583358951921, -0.48116069280658297, 0.8018674821014238]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_205",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3122547249452272, 0.849258196695755, -0.3876743207038841]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3122547249452272, 0.849258196695755, -0.3876743207038841]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3122547249452272, 0.849258196695755, -0.3876743207038841]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_206",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1968374805092425, 0.07660006010022961, 0.20829299661137748]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1968374805092425, 0.07660006010022961, 0.20829299661137748]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.1968374805092425, 0.07660006010022961, 0.20829299661137748]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_207",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.14013874192364276, 0.4774487718961282, 17.975347418986452]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.14013874192364276, 0.4774487718961282, 17.975347418986452]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.14013874192364276, 0.4774487718961282, 17.975347418986452]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_208",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2520073085002992, -3.3190216865516624, 3.2763172491502184]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2520073085002992, -3.3190216865516624, 3.2763172491502184]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2520073085002992, -3.3190216865516624, 3.2763172491502184]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_209",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.885361405084637, -1.932421967984995, 45.05536840862582]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.885361405084637, -1.932421967984995, 45.05536840862582]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.885361405084637, -1.932421967984995, 45.05536840862582]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_210",
    "sat": "def sat(x: float, coeffs: List[float]=[0.17838958507164823, -3.3250411492004006, -0.2623684358730103]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17838958507164823, -3.3250411492004006, -0.2623684358730103]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.17838958507164823, -3.3250411492004006, -0.2623684358730103]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_211",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08028941901068376, 9.50421795932772, -12.034893202685707]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08028941901068376, 9.50421795932772, -12.034893202685707]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.08028941901068376, 9.50421795932772, -12.034893202685707]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_212",
    "sat": "def sat(x: float, coeffs: List[float]=[1.029640114119629, 0.039137990748010054, -2.230757470105193]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.029640114119629, 0.039137990748010054, -2.230757470105193]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.029640114119629, 0.039137990748010054, -2.230757470105193]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_213",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.39347280650732425, -0.19625173300523446, 0.01583629957485995]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.39347280650732425, -0.19625173300523446, 0.01583629957485995]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.39347280650732425, -0.19625173300523446, 0.01583629957485995]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_214",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5175762930587985, -0.3575176991911923, 41.44925824158179]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5175762930587985, -0.3575176991911923, 41.44925824158179]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5175762930587985, -0.3575176991911923, 41.44925824158179]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_215",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.17372364261158837, 9.068428318077704, 45.36398869495585]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17372364261158837, 9.068428318077704, 45.36398869495585]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.17372364261158837, 9.068428318077704, 45.36398869495585]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_216",
    "sat": "def sat(x: float, coeffs: List[float]=[1.5244056555822638, 3.1914416196943587, -174.48249509495747]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5244056555822638, 3.1914416196943587, -174.48249509495747]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.5244056555822638, 3.1914416196943587, -174.48249509495747]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_217",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6992741175681124, 0.0040567582362921835, -0.2692057486665799]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6992741175681124, 0.0040567582362921835, -0.2692057486665799]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6992741175681124, 0.0040567582362921835, -0.2692057486665799]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_218",
    "sat": "def sat(x: float, coeffs: List[float]=[0.27468055908790023, 0.3764141995390909, -26.660265902802326]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.27468055908790023, 0.3764141995390909, -26.660265902802326]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.27468055908790023, 0.3764141995390909, -26.660265902802326]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_219",
    "sat": "def sat(x: float, coeffs: List[float]=[2.6569833140323103, 9.305493977690189, -1.243309874226214]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.6569833140323103, 9.305493977690189, -1.243309874226214]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.6569833140323103, 9.305493977690189, -1.243309874226214]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_220",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2898335667013223, 249.92073118694347, -141.96926925524195]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2898335667013223, 249.92073118694347, -141.96926925524195]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.2898335667013223, 249.92073118694347, -141.96926925524195]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_221",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6558456240927426, -0.4625633841649687, -8.376706604675045]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6558456240927426, -0.4625633841649687, -8.376706604675045]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6558456240927426, -0.4625633841649687, -8.376706604675045]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_222",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0803856633063706, 1.704371037616179, 25.98953595438391]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0803856633063706, 1.704371037616179, 25.98953595438391]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.0803856633063706, 1.704371037616179, 25.98953595438391]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_223",
    "sat": "def sat(x: float, coeffs: List[float]=[104.47345520090117, -0.19678846000636932, -247651.4447102726]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[104.47345520090117, -0.19678846000636932, -247651.4447102726]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[104.47345520090117, -0.19678846000636932, -247651.4447102726]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_224",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.4514792922366617, 0.2701055755354489, 0.3314650064308689]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4514792922366617, 0.2701055755354489, 0.3314650064308689]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.4514792922366617, 0.2701055755354489, 0.3314650064308689]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_225",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7020279261408462, 0.9223403307104797, -27.783971486958613]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7020279261408462, 0.9223403307104797, -27.783971486958613]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.7020279261408462, 0.9223403307104797, -27.783971486958613]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_226",
    "sat": "def sat(x: float, coeffs: List[float]=[-26.67192413791982, 0.20682012605703384, 0.0018667958241148272]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-26.67192413791982, 0.20682012605703384, 0.0018667958241148272]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-26.67192413791982, 0.20682012605703384, 0.0018667958241148272]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_227",
    "sat": "def sat(x: float, coeffs: List[float]=[-8.79004663225188, 0.3559201520851983, 673.051073321772]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.79004663225188, 0.3559201520851983, 673.051073321772]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-8.79004663225188, 0.3559201520851983, 673.051073321772]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_228",
    "sat": "def sat(x: float, coeffs: List[float]=[29.77584819285094, 0.6099202237395955, -11914.764150466159]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[29.77584819285094, 0.6099202237395955, -11914.764150466159]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[29.77584819285094, 0.6099202237395955, -11914.764150466159]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_229",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.841637581178145, -0.006603480445609211, 0.003435016344546413]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.841637581178145, -0.006603480445609211, 0.003435016344546413]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-5.841637581178145, -0.006603480445609211, 0.003435016344546413]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_230",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.03513520885837947, 0.8037834286321727, -2.953502918019345]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03513520885837947, 0.8037834286321727, -2.953502918019345]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.03513520885837947, 0.8037834286321727, -2.953502918019345]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_231",
    "sat": "def sat(x: float, coeffs: List[float]=[-249.49613986781114, 0.027121134865192593, 6.361613762046239]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-249.49613986781114, 0.027121134865192593, 6.361613762046239]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-249.49613986781114, 0.027121134865192593, 6.361613762046239]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_232",
    "sat": "def sat(x: float, coeffs: List[float]=[0.07089571474583134, -8.870401744436473, -0.5816831809035009]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07089571474583134, -8.870401744436473, -0.5816831809035009]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.07089571474583134, -8.870401744436473, -0.5816831809035009]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_233",
    "sat": "def sat(x: float, coeffs: List[float]=[5.186701026293529, 2.1440623791776976, 0.1729650971226478]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.186701026293529, 2.1440623791776976, 0.1729650971226478]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.186701026293529, 2.1440623791776976, 0.1729650971226478]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_234",
    "sat": "def sat(x: float, coeffs: List[float]=[0.09709878346443628, -31.117658066776645, 1.479461233908479]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09709878346443628, -31.117658066776645, 1.479461233908479]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.09709878346443628, -31.117658066776645, 1.479461233908479]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_235",
    "sat": "def sat(x: float, coeffs: List[float]=[-20.709207423379212, -11.336492795739927, 47.653184063198715]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-20.709207423379212, -11.336492795739927, 47.653184063198715]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-20.709207423379212, -11.336492795739927, 47.653184063198715]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_236",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.3728901327861096, -17.658267787772964, 212.25741962585516]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.3728901327861096, -17.658267787772964, 212.25741962585516]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.3728901327861096, -17.658267787772964, 212.25741962585516]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_237",
    "sat": "def sat(x: float, coeffs: List[float]=[0.49047259816909516, -0.795369628059814, 0.322449474941266]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.49047259816909516, -0.795369628059814, 0.322449474941266]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.49047259816909516, -0.795369628059814, 0.322449474941266]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_238",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.043493173176089, 1.2596187437122504, 9.814196424693924]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.043493173176089, 1.2596187437122504, 9.814196424693924]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.043493173176089, 1.2596187437122504, 9.814196424693924]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_239",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1362646093800277, -0.4904490055318565, -0.06763458396767257]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1362646093800277, -0.4904490055318565, -0.06763458396767257]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1362646093800277, -0.4904490055318565, -0.06763458396767257]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_240",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.05707145323629185, 0.0031134437455676935, 4.178892835899085]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05707145323629185, 0.0031134437455676935, 4.178892835899085]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.05707145323629185, 0.0031134437455676935, 4.178892835899085]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_241",
    "sat": "def sat(x: float, coeffs: List[float]=[6.870586451865755, -0.4653656498299699, -0.40192753812894233]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.870586451865755, -0.4653656498299699, -0.40192753812894233]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.870586451865755, -0.4653656498299699, -0.40192753812894233]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_242",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0217404004116402, -1.105649353492459, 0.2577316028205688]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0217404004116402, -1.105649353492459, 0.2577316028205688]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.0217404004116402, -1.105649353492459, 0.2577316028205688]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_243",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4300596649601145, 328.0122444422748, -353.4736315132157]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4300596649601145, 328.0122444422748, -353.4736315132157]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.4300596649601145, 328.0122444422748, -353.4736315132157]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_244",
    "sat": "def sat(x: float, coeffs: List[float]=[153.9821491176776, -2.7451065107940695, -0.9257908925965318]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[153.9821491176776, -2.7451065107940695, -0.9257908925965318]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[153.9821491176776, -2.7451065107940695, -0.9257908925965318]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_245",
    "sat": "def sat(x: float, coeffs: List[float]=[4.25614519282651, -18.220623973300047, -26.29714066692043]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.25614519282651, -18.220623973300047, -26.29714066692043]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[4.25614519282651, -18.220623973300047, -26.29714066692043]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_246",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5241085218367609, 0.7666343052366175, 211.3905066659791]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5241085218367609, 0.7666343052366175, 211.3905066659791]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5241085218367609, 0.7666343052366175, 211.3905066659791]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_247",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3066043334446488, -0.6168686229074115, -0.20696136749109706]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3066043334446488, -0.6168686229074115, -0.20696136749109706]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3066043334446488, -0.6168686229074115, -0.20696136749109706]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_248",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1656975054980446, 2.154682515274658, 4928.5896455386555]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1656975054980446, 2.154682515274658, 4928.5896455386555]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1656975054980446, 2.154682515274658, 4928.5896455386555]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_249",
    "sat": "def sat(x: float, coeffs: List[float]=[2.8690974818356527, 2.1091393396616485, 0.07620571816934162]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.8690974818356527, 2.1091393396616485, 0.07620571816934162]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.8690974818356527, 2.1091393396616485, 0.07620571816934162]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_250",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6112623926101198, -9.559882960465528, -62.03758746659604]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6112623926101198, -9.559882960465528, -62.03758746659604]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6112623926101198, -9.559882960465528, -62.03758746659604]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_251",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.19687953480445727, -0.3089283834507606, 56.65098612962607]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19687953480445727, -0.3089283834507606, 56.65098612962607]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.19687953480445727, -0.3089283834507606, 56.65098612962607]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_252",
    "sat": "def sat(x: float, coeffs: List[float]=[2.4294218191209875, -0.9592367681795898, -0.13941802366170802]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.4294218191209875, -0.9592367681795898, -0.13941802366170802]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.4294218191209875, -0.9592367681795898, -0.13941802366170802]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_253",
    "sat": "def sat(x: float, coeffs: List[float]=[4.279253530437604, 0.00928486932513469, -0.0204219023740195]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.279253530437604, 0.00928486932513469, -0.0204219023740195]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[4.279253530437604, 0.00928486932513469, -0.0204219023740195]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_254",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2964493542505835, 3.363011398557685, 2.8683990613636796]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2964493542505835, 3.363011398557685, 2.8683990613636796]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2964493542505835, 3.363011398557685, 2.8683990613636796]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_255",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.098385412052526, -0.06462128975320591, 3.856692971637688]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.098385412052526, -0.06462128975320591, 3.856692971637688]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.098385412052526, -0.06462128975320591, 3.856692971637688]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_256",
    "sat": "def sat(x: float, coeffs: List[float]=[4.302960471457521, 0.479342927921308, -2.004723835857452]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.302960471457521, 0.479342927921308, -2.004723835857452]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[4.302960471457521, 0.479342927921308, -2.004723835857452]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_257",
    "sat": "def sat(x: float, coeffs: List[float]=[2.3109504627589397, 1.3724778156215063, -254630.90692746334]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.3109504627589397, 1.3724778156215063, -254630.90692746334]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.3109504627589397, 1.3724778156215063, -254630.90692746334]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_258",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8231967957356511, 5.745876652405841, 0.42178219830927594]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8231967957356511, 5.745876652405841, 0.42178219830927594]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8231967957356511, 5.745876652405841, 0.42178219830927594]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_259",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.9286221053182206, -4.72471780430888, 0.8186786846661048]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9286221053182206, -4.72471780430888, 0.8186786846661048]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.9286221053182206, -4.72471780430888, 0.8186786846661048]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_260",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2130956436227298, 0.5818630923811847, 0.19105737518224142]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2130956436227298, 0.5818630923811847, 0.19105737518224142]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2130956436227298, 0.5818630923811847, 0.19105737518224142]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_261",
    "sat": "def sat(x: float, coeffs: List[float]=[2.471177825528923, -6.020050079201714, 2.1683393595792957]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.471177825528923, -6.020050079201714, 2.1683393595792957]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.471177825528923, -6.020050079201714, 2.1683393595792957]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_262",
    "sat": "def sat(x: float, coeffs: List[float]=[-51.73867435797562, -0.20271718382028733, 1554.135739512254]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-51.73867435797562, -0.20271718382028733, 1554.135739512254]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-51.73867435797562, -0.20271718382028733, 1554.135739512254]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_263",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.6171855051544648, -0.1723683985431972, 0.17994580589086748]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6171855051544648, -0.1723683985431972, 0.17994580589086748]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.6171855051544648, -0.1723683985431972, 0.17994580589086748]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_264",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5060600751305887, 0.23645714170764354, -0.029738031044013763]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5060600751305887, 0.23645714170764354, -0.029738031044013763]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5060600751305887, 0.23645714170764354, -0.029738031044013763]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_265",
    "sat": "def sat(x: float, coeffs: List[float]=[0.12765368841945302, -0.12244995648033578, -0.014909289379737178]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.12765368841945302, -0.12244995648033578, -0.014909289379737178]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.12765368841945302, -0.12244995648033578, -0.014909289379737178]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_266",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.861712357482817, 2.170581307292346, 0.01393669319600519]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.861712357482817, 2.170581307292346, 0.01393669319600519]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.861712357482817, 2.170581307292346, 0.01393669319600519]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_267",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06878869758177945, 0.8848939584969054, 0.2572960647188664]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06878869758177945, 0.8848939584969054, 0.2572960647188664]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.06878869758177945, 0.8848939584969054, 0.2572960647188664]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_268",
    "sat": "def sat(x: float, coeffs: List[float]=[-57.09829837480592, 0.7053064865159606, 291.3793741191786]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-57.09829837480592, 0.7053064865159606, 291.3793741191786]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-57.09829837480592, 0.7053064865159606, 291.3793741191786]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_269",
    "sat": "def sat(x: float, coeffs: List[float]=[1.248307750119202, 0.003483580116128445, -0.4459575674892256]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.248307750119202, 0.003483580116128445, -0.4459575674892256]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.248307750119202, 0.003483580116128445, -0.4459575674892256]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_270",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.07978945962072233, -11.596501962432697, 650.0788569476317]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07978945962072233, -11.596501962432697, 650.0788569476317]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.07978945962072233, -11.596501962432697, 650.0788569476317]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_271",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9055029777121804, 21.470188879636073, -122.1511015388595]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9055029777121804, 21.470188879636073, -122.1511015388595]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.9055029777121804, 21.470188879636073, -122.1511015388595]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_272",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1187031442544448, -0.6217158754776765, -28.91796886055535]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1187031442544448, -0.6217158754776765, -28.91796886055535]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.1187031442544448, -0.6217158754776765, -28.91796886055535]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_273",
    "sat": "def sat(x: float, coeffs: List[float]=[0.057183792900241594, -41.9882675959067, -10.013679329597096]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.057183792900241594, -41.9882675959067, -10.013679329597096]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.057183792900241594, -41.9882675959067, -10.013679329597096]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_274",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7482044797339675, 1.68411689465309, 0.11061492317353114]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7482044797339675, 1.68411689465309, 0.11061492317353114]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.7482044797339675, 1.68411689465309, 0.11061492317353114]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_275",
    "sat": "def sat(x: float, coeffs: List[float]=[68.67388024963935, -0.0021294150627094353, -4.645766833008152]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[68.67388024963935, -0.0021294150627094353, -4.645766833008152]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[68.67388024963935, -0.0021294150627094353, -4.645766833008152]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_276",
    "sat": "def sat(x: float, coeffs: List[float]=[5.075086611422549, 0.21864488071608634, -61485.67729636208]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.075086611422549, 0.21864488071608634, -61485.67729636208]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.075086611422549, 0.21864488071608634, -61485.67729636208]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_277",
    "sat": "def sat(x: float, coeffs: List[float]=[2.681216559978052, -0.34742463351177416, -193.73521357528205]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.681216559978052, -0.34742463351177416, -193.73521357528205]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.681216559978052, -0.34742463351177416, -193.73521357528205]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_278",
    "sat": "def sat(x: float, coeffs: List[float]=[14.533997329518867, -0.3767165115102878, -5.636668950257087]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.533997329518867, -0.3767165115102878, -5.636668950257087]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[14.533997329518867, -0.3767165115102878, -5.636668950257087]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_279",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1485360604538597, -0.23040439499473112, 2.832525854079689]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1485360604538597, -0.23040439499473112, 2.832525854079689]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1485360604538597, -0.23040439499473112, 2.832525854079689]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_280",
    "sat": "def sat(x: float, coeffs: List[float]=[-142.38057661963254, -522.8717960535067, 260785.43896786546]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-142.38057661963254, -522.8717960535067, 260785.43896786546]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-142.38057661963254, -522.8717960535067, 260785.43896786546]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_281",
    "sat": "def sat(x: float, coeffs: List[float]=[3.325111351153891, -1.0149447570027068, -2.5075652261286683]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.325111351153891, -1.0149447570027068, -2.5075652261286683]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.325111351153891, -1.0149447570027068, -2.5075652261286683]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_282",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.7118225069054478, -0.0960446522431091, 2.1269814775964813]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7118225069054478, -0.0960446522431091, 2.1269814775964813]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.7118225069054478, -0.0960446522431091, 2.1269814775964813]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_283",
    "sat": "def sat(x: float, coeffs: List[float]=[18.165580877875687, -150.25361171265436, -1911.0411572937428]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[18.165580877875687, -150.25361171265436, -1911.0411572937428]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[18.165580877875687, -150.25361171265436, -1911.0411572937428]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_284",
    "sat": "def sat(x: float, coeffs: List[float]=[-11.428115601079272, -7.627808131451771, 17.62824824345823]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.428115601079272, -7.627808131451771, 17.62824824345823]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-11.428115601079272, -7.627808131451771, 17.62824824345823]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_285",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0875072330115512, 1.061520654086536, 0.036526852990331794]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0875072330115512, 1.061520654086536, 0.036526852990331794]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.0875072330115512, 1.061520654086536, 0.036526852990331794]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_286",
    "sat": "def sat(x: float, coeffs: List[float]=[-18.36487787677498, -7.8590317120985524, 0.11214715234710693]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.36487787677498, -7.8590317120985524, 0.11214715234710693]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-18.36487787677498, -7.8590317120985524, 0.11214715234710693]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_287",
    "sat": "def sat(x: float, coeffs: List[float]=[1.339822841389142, -1.5030626237014726, -0.6946591622393766]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.339822841389142, -1.5030626237014726, -0.6946591622393766]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.339822841389142, -1.5030626237014726, -0.6946591622393766]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_288",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9889756156908708, -1.3702592837924519, -115.3030981453145]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9889756156908708, -1.3702592837924519, -115.3030981453145]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.9889756156908708, -1.3702592837924519, -115.3030981453145]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_289",
    "sat": "def sat(x: float, coeffs: List[float]=[1.433339875464555, -4.8155514269878585, -1131.8899842292285]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.433339875464555, -4.8155514269878585, -1131.8899842292285]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.433339875464555, -4.8155514269878585, -1131.8899842292285]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_290",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.45629464908781303, -0.15621329113041496, 38462.04062656278]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.45629464908781303, -0.15621329113041496, 38462.04062656278]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.45629464908781303, -0.15621329113041496, 38462.04062656278]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_291",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.026370939227758683, -0.313492733960748, 1.8870246541195046]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.026370939227758683, -0.313492733960748, 1.8870246541195046]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.026370939227758683, -0.313492733960748, 1.8870246541195046]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_292",
    "sat": "def sat(x: float, coeffs: List[float]=[1.8289581493691445, -0.09245027507033725, -3.982069557069251]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8289581493691445, -0.09245027507033725, -3.982069557069251]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.8289581493691445, -0.09245027507033725, -3.982069557069251]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_293",
    "sat": "def sat(x: float, coeffs: List[float]=[-13.854056286132012, -30.998900246920982, -17.340243599131263]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.854056286132012, -30.998900246920982, -17.340243599131263]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-13.854056286132012, -30.998900246920982, -17.340243599131263]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_294",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.3861630874242707, 0.34505767476508736, 2.421661733749767]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.3861630874242707, 0.34505767476508736, 2.421661733749767]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.3861630874242707, 0.34505767476508736, 2.421661733749767]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_295",
    "sat": "def sat(x: float, coeffs: List[float]=[1.3728194302218755, -0.9568076481767928, -0.5701027438103726]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3728194302218755, -0.9568076481767928, -0.5701027438103726]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.3728194302218755, -0.9568076481767928, -0.5701027438103726]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_296",
    "sat": "def sat(x: float, coeffs: List[float]=[2.5080191450955973, -0.014101402602829364, -6.819225697112127]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.5080191450955973, -0.014101402602829364, -6.819225697112127]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.5080191450955973, -0.014101402602829364, -6.819225697112127]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_297",
    "sat": "def sat(x: float, coeffs: List[float]=[16.906225077395955, 0.1153296948270938, -182.81250428007016]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.906225077395955, 0.1153296948270938, -182.81250428007016]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[16.906225077395955, 0.1153296948270938, -182.81250428007016]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_298",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.0173251068870743, -0.27220452886667196, 40.89540962263294]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0173251068870743, -0.27220452886667196, 40.89540962263294]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.0173251068870743, -0.27220452886667196, 40.89540962263294]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_299",
    "sat": "def sat(x: float, coeffs: List[float]=[-8.784193103797204, -1.9881975160180445, 4.0315034728177]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.784193103797204, -1.9881975160180445, 4.0315034728177]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-8.784193103797204, -1.9881975160180445, 4.0315034728177]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_300",
    "sat": "def sat(x: float, coeffs: List[float]=[8.42843935663478, -0.3921294811590541, -0.6492535471765725]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.42843935663478, -0.3921294811590541, -0.6492535471765725]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[8.42843935663478, -0.3921294811590541, -0.6492535471765725]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_301",
    "sat": "def sat(x: float, coeffs: List[float]=[3.4480234400365948, 0.0029882742522053065, -53.406986932776235]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.4480234400365948, 0.0029882742522053065, -53.406986932776235]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.4480234400365948, 0.0029882742522053065, -53.406986932776235]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_302",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1824025362244873, 0.46064043997810405, 0.27532348998746414]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1824025362244873, 0.46064043997810405, 0.27532348998746414]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1824025362244873, 0.46064043997810405, 0.27532348998746414]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_303",
    "sat": "def sat(x: float, coeffs: List[float]=[0.46458024726545455, -0.07072240252107835, -83.29015107720849]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.46458024726545455, -0.07072240252107835, -83.29015107720849]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.46458024726545455, -0.07072240252107835, -83.29015107720849]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_304",
    "sat": "def sat(x: float, coeffs: List[float]=[2.7441807652018686, 259.1156333321133, 168.92303814845786]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.7441807652018686, 259.1156333321133, 168.92303814845786]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.7441807652018686, 259.1156333321133, 168.92303814845786]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_305",
    "sat": "def sat(x: float, coeffs: List[float]=[436.8891544155916, -276.28816395566963, -1888719.9025795509]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[436.8891544155916, -276.28816395566963, -1888719.9025795509]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[436.8891544155916, -276.28816395566963, -1888719.9025795509]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_306",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.048182531378164, 1.8329245390881665, -0.39569469486940734]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.048182531378164, 1.8329245390881665, -0.39569469486940734]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.048182531378164, 1.8329245390881665, -0.39569469486940734]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_307",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.4500542712090367, 0.09114567992061835, 0.023243336582220876]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.4500542712090367, 0.09114567992061835, 0.023243336582220876]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.4500542712090367, 0.09114567992061835, 0.023243336582220876]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_308",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.8045472264049494, 1.9899780019127125, -0.37171168931242415]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8045472264049494, 1.9899780019127125, -0.37171168931242415]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.8045472264049494, 1.9899780019127125, -0.37171168931242415]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_309",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1525435344401486, -0.14744904303150289, -4853.852425833617]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1525435344401486, -0.14744904303150289, -4853.852425833617]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1525435344401486, -0.14744904303150289, -4853.852425833617]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_310",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6730671911918624, 0.13740194236502146, 0.21232212892413255]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6730671911918624, 0.13740194236502146, 0.21232212892413255]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6730671911918624, 0.13740194236502146, 0.21232212892413255]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_311",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.35711186149636, 0.05599759810870745, 0.04444827805743233]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.35711186149636, 0.05599759810870745, 0.04444827805743233]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.35711186149636, 0.05599759810870745, 0.04444827805743233]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_312",
    "sat": "def sat(x: float, coeffs: List[float]=[105.70671659387396, 0.04797543487760011, -62.94962882433444]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[105.70671659387396, 0.04797543487760011, -62.94962882433444]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[105.70671659387396, 0.04797543487760011, -62.94962882433444]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_313",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.48886215936538385, -2.0589869346703376, 5.883598938170012]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.48886215936538385, -2.0589869346703376, 5.883598938170012]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.48886215936538385, -2.0589869346703376, 5.883598938170012]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_314",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.17712832675685544, 14.792813015762038, -4.395432760261749]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17712832675685544, 14.792813015762038, -4.395432760261749]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.17712832675685544, 14.792813015762038, -4.395432760261749]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_315",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5271138310406532, -3.376651137369373, 4.893466171561842]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5271138310406532, -3.376651137369373, 4.893466171561842]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5271138310406532, -3.376651137369373, 4.893466171561842]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_316",
    "sat": "def sat(x: float, coeffs: List[float]=[10.526989755647072, -3.668424357457408, -3.7207072123539406]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.526989755647072, -3.668424357457408, -3.7207072123539406]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[10.526989755647072, -3.668424357457408, -3.7207072123539406]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_317",
    "sat": "def sat(x: float, coeffs: List[float]=[-80.56534629602706, 1.5039415376004157, 0.5695394676857157]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-80.56534629602706, 1.5039415376004157, 0.5695394676857157]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-80.56534629602706, 1.5039415376004157, 0.5695394676857157]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_318",
    "sat": "def sat(x: float, coeffs: List[float]=[0.11772500221128597, 0.05553253484491812, 0.0011808826660606483]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11772500221128597, 0.05553253484491812, 0.0011808826660606483]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.11772500221128597, 0.05553253484491812, 0.0011808826660606483]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_319",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7318866685781432, -1.7026827418453276, 0.7650651721354396]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7318866685781432, -1.7026827418453276, 0.7650651721354396]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.7318866685781432, -1.7026827418453276, 0.7650651721354396]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_320",
    "sat": "def sat(x: float, coeffs: List[float]=[-16.01245334297579, 65.18125882552935, 159.81199603901578]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.01245334297579, 65.18125882552935, 159.81199603901578]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-16.01245334297579, 65.18125882552935, 159.81199603901578]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_321",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.524790700533626, -0.374447962879841, 2662.1087981776036]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.524790700533626, -0.374447962879841, 2662.1087981776036]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.524790700533626, -0.374447962879841, 2662.1087981776036]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_322",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.10593939637629506, 0.031128035906126856, 0.2377758587355628]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10593939637629506, 0.031128035906126856, 0.2377758587355628]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.10593939637629506, 0.031128035906126856, 0.2377758587355628]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_323",
    "sat": "def sat(x: float, coeffs: List[float]=[0.20696381681429746, -0.15443026531518536, 0.006675276692539658]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.20696381681429746, -0.15443026531518536, 0.006675276692539658]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.20696381681429746, -0.15443026531518536, 0.006675276692539658]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_324",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2916928346957988, -0.22965497671420954, 8.498240001045172]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2916928346957988, -0.22965497671420954, 8.498240001045172]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.2916928346957988, -0.22965497671420954, 8.498240001045172]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_325",
    "sat": "def sat(x: float, coeffs: List[float]=[63.17795242283245, -0.03580226020391327, -2.412016130247167]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[63.17795242283245, -0.03580226020391327, -2.412016130247167]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[63.17795242283245, -0.03580226020391327, -2.412016130247167]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_326",
    "sat": "def sat(x: float, coeffs: List[float]=[-230.94199238450832, -0.9048585814206499, 40.453512727004245]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-230.94199238450832, -0.9048585814206499, 40.453512727004245]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-230.94199238450832, -0.9048585814206499, 40.453512727004245]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_327",
    "sat": "def sat(x: float, coeffs: List[float]=[0.14331111867498966, 88.85783115629282, 125.58451213878291]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.14331111867498966, 88.85783115629282, 125.58451213878291]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.14331111867498966, 88.85783115629282, 125.58451213878291]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_328",
    "sat": "def sat(x: float, coeffs: List[float]=[0.32743454585147186, -0.11728196688012733, -0.1846586127100368]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.32743454585147186, -0.11728196688012733, -0.1846586127100368]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.32743454585147186, -0.11728196688012733, -0.1846586127100368]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_329",
    "sat": "def sat(x: float, coeffs: List[float]=[-56.22529068873149, -0.04257666952818958, 0.01555875043539106]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-56.22529068873149, -0.04257666952818958, 0.01555875043539106]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-56.22529068873149, -0.04257666952818958, 0.01555875043539106]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_330",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7529093628875169, 1.0753907473040807, -0.8886125123931901]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7529093628875169, 1.0753907473040807, -0.8886125123931901]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.7529093628875169, 1.0753907473040807, -0.8886125123931901]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_331",
    "sat": "def sat(x: float, coeffs: List[float]=[27.133030982319667, 3.814220645414096, -75.98007608983029]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[27.133030982319667, 3.814220645414096, -75.98007608983029]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[27.133030982319667, 3.814220645414096, -75.98007608983029]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_332",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3332523023237684, 0.1957577942558426, 0.01567305015270583]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3332523023237684, 0.1957577942558426, 0.01567305015270583]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.3332523023237684, 0.1957577942558426, 0.01567305015270583]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_333",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.17310840809198189, -2.642715614682156, -9.306172955943039]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17310840809198189, -2.642715614682156, -9.306172955943039]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.17310840809198189, -2.642715614682156, -9.306172955943039]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_334",
    "sat": "def sat(x: float, coeffs: List[float]=[1.236196366321405, -0.4585155372700645, -1.5102661419480987]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.236196366321405, -0.4585155372700645, -1.5102661419480987]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.236196366321405, -0.4585155372700645, -1.5102661419480987]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_335",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11879413242513626, 17.79120230893845, -182.83802515478067]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11879413242513626, 17.79120230893845, -182.83802515478067]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.11879413242513626, 17.79120230893845, -182.83802515478067]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_336",
    "sat": "def sat(x: float, coeffs: List[float]=[2.286368846791292, 247.95443939361255, 33.28192388656945]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.286368846791292, 247.95443939361255, 33.28192388656945]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.286368846791292, 247.95443939361255, 33.28192388656945]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_337",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.38933553530417936, -3.5099838639878427, 1.4106816160946445]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.38933553530417936, -3.5099838639878427, 1.4106816160946445]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.38933553530417936, -3.5099838639878427, 1.4106816160946445]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_338",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1898889988665776, 9.09131619526572, 0.21547915639124596]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1898889988665776, 9.09131619526572, 0.21547915639124596]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1898889988665776, 9.09131619526572, 0.21547915639124596]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_339",
    "sat": "def sat(x: float, coeffs: List[float]=[2.5505764272468134, 4.726900520020821, -1312200.1200570965]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.5505764272468134, 4.726900520020821, -1312200.1200570965]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.5505764272468134, 4.726900520020821, -1312200.1200570965]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_340",
    "sat": "def sat(x: float, coeffs: List[float]=[2.0876774997631955, -1.871486559008579, -0.26486130526065327]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0876774997631955, -1.871486559008579, -0.26486130526065327]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.0876774997631955, -1.871486559008579, -0.26486130526065327]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_341",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.6201471829317673, -0.3237426887970541, 85.96848090898546]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.6201471829317673, -0.3237426887970541, 85.96848090898546]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.6201471829317673, -0.3237426887970541, 85.96848090898546]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_342",
    "sat": "def sat(x: float, coeffs: List[float]=[1.05182248543183, 0.24085281252936128, -0.24650151387036776]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.05182248543183, 0.24085281252936128, -0.24650151387036776]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.05182248543183, 0.24085281252936128, -0.24650151387036776]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_343",
    "sat": "def sat(x: float, coeffs: List[float]=[-31.393387098799682, 3.342829642974033, 14.034596124222205]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-31.393387098799682, 3.342829642974033, 14.034596124222205]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-31.393387098799682, 3.342829642974033, 14.034596124222205]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_344",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.65671254274066, -0.8589843950180042, 42.72900934113221]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.65671254274066, -0.8589843950180042, 42.72900934113221]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-6.65671254274066, -0.8589843950180042, 42.72900934113221]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_345",
    "sat": "def sat(x: float, coeffs: List[float]=[-186.8692928959699, -6.935976273684002, 6.693150435639383]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-186.8692928959699, -6.935976273684002, 6.693150435639383]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-186.8692928959699, -6.935976273684002, 6.693150435639383]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_346",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0897472106872572, 0.6115759791606977, -0.4476572964615307]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0897472106872572, 0.6115759791606977, -0.4476572964615307]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.0897472106872572, 0.6115759791606977, -0.4476572964615307]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_347",
    "sat": "def sat(x: float, coeffs: List[float]=[6.499381424733191, -0.853495574162586, -9595.195743708]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.499381424733191, -0.853495574162586, -9595.195743708]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.499381424733191, -0.853495574162586, -9595.195743708]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_348",
    "sat": "def sat(x: float, coeffs: List[float]=[-18.666744741154584, 5.704158602379987, -0.37138555563524256]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.666744741154584, 5.704158602379987, -0.37138555563524256]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-18.666744741154584, 5.704158602379987, -0.37138555563524256]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_349",
    "sat": "def sat(x: float, coeffs: List[float]=[0.09424695037994286, -0.2750861497857316, 0.19580787172489822]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09424695037994286, -0.2750861497857316, 0.19580787172489822]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.09424695037994286, -0.2750861497857316, 0.19580787172489822]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_350",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0319021317213987, 0.06236307216514203, 0.018159019938819253]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0319021317213987, 0.06236307216514203, 0.018159019938819253]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.0319021317213987, 0.06236307216514203, 0.018159019938819253]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_351",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7531565582208604, 2.971020941016736, -0.0860335683984051]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7531565582208604, 2.971020941016736, -0.0860335683984051]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7531565582208604, 2.971020941016736, -0.0860335683984051]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_352",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1604375294580882, -1.1870872426587287, 0.16944767171836705]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1604375294580882, -1.1870872426587287, 0.16944767171836705]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.1604375294580882, -1.1870872426587287, 0.16944767171836705]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_353",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.018686938824634902, -0.2579420530078756, -0.5388289530734642]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.018686938824634902, -0.2579420530078756, -0.5388289530734642]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.018686938824634902, -0.2579420530078756, -0.5388289530734642]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_354",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7655485989044308, 0.4904021715185407, -0.012735364048798214]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7655485989044308, 0.4904021715185407, -0.012735364048798214]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.7655485989044308, 0.4904021715185407, -0.012735364048798214]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_355",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5730614418574161, 0.04746180004251532, -0.2888068352604981]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5730614418574161, 0.04746180004251532, -0.2888068352604981]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5730614418574161, 0.04746180004251532, -0.2888068352604981]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_356",
    "sat": "def sat(x: float, coeffs: List[float]=[0.40609913780717327, 2.4346147205532005, 0.6740324748076575]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.40609913780717327, 2.4346147205532005, 0.6740324748076575]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.40609913780717327, 2.4346147205532005, 0.6740324748076575]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_357",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.594561136321749, 0.194496038495047, 14815.712145036792]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.594561136321749, 0.194496038495047, 14815.712145036792]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.594561136321749, 0.194496038495047, 14815.712145036792]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_358",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2598402635856685, 3.7636616511044205, -5.236866206884825]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2598402635856685, 3.7636616511044205, -5.236866206884825]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2598402635856685, 3.7636616511044205, -5.236866206884825]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_359",
    "sat": "def sat(x: float, coeffs: List[float]=[0.44338820080224045, 0.013681426746144254, -11.663539796155753]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.44338820080224045, 0.013681426746144254, -11.663539796155753]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.44338820080224045, 0.013681426746144254, -11.663539796155753]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_360",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5168745367154162, -8.098714591334117, -1.4336961934948789]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5168745367154162, -8.098714591334117, -1.4336961934948789]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5168745367154162, -8.098714591334117, -1.4336961934948789]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_361",
    "sat": "def sat(x: float, coeffs: List[float]=[1.6367883335780622, -0.10348626876924831, -2.4575142770135643]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6367883335780622, -0.10348626876924831, -2.4575142770135643]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.6367883335780622, -0.10348626876924831, -2.4575142770135643]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_362",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.04831121295777482, 304.50419469596403, 583.0876697089034]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04831121295777482, 304.50419469596403, 583.0876697089034]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.04831121295777482, 304.50419469596403, 583.0876697089034]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_363",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0012465450912670188, -0.7957837522764185, 0.03368341499695833]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0012465450912670188, -0.7957837522764185, 0.03368341499695833]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.0012465450912670188, -0.7957837522764185, 0.03368341499695833]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_364",
    "sat": "def sat(x: float, coeffs: List[float]=[3.578679820327512, -28.44585821812647, -138913.47100505582]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.578679820327512, -28.44585821812647, -138913.47100505582]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.578679820327512, -28.44585821812647, -138913.47100505582]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_365",
    "sat": "def sat(x: float, coeffs: List[float]=[-9.406842426561651, -0.915617194197638, 10.353902030188323]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.406842426561651, -0.915617194197638, 10.353902030188323]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-9.406842426561651, -0.915617194197638, 10.353902030188323]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_366",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3941721144743588, -0.11310557882767165, -0.14357230338117857]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3941721144743588, -0.11310557882767165, -0.14357230338117857]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.3941721144743588, -0.11310557882767165, -0.14357230338117857]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_367",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.0384510598657286, 0.16622800793957437, 55666.69272910846]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.0384510598657286, 0.16622800793957437, 55666.69272910846]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.0384510598657286, 0.16622800793957437, 55666.69272910846]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_368",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2506765555804698, -0.287468003506181, 0.09385335782234211]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2506765555804698, -0.287468003506181, 0.09385335782234211]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2506765555804698, -0.287468003506181, 0.09385335782234211]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_369",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2772636325412164, 0.04171137284777249, -0.041339329485724226]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2772636325412164, 0.04171137284777249, -0.041339329485724226]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2772636325412164, 0.04171137284777249, -0.041339329485724226]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_370",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3125401170642977, 0.7266965130273032, 11.28946446511929]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3125401170642977, 0.7266965130273032, 11.28946446511929]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3125401170642977, 0.7266965130273032, 11.28946446511929]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_371",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9742630114817074, 0.6706033661678958, 0.1100564169671881]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9742630114817074, 0.6706033661678958, 0.1100564169671881]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.9742630114817074, 0.6706033661678958, 0.1100564169671881]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_372",
    "sat": "def sat(x: float, coeffs: List[float]=[3.6788194948074615, 81.43877971333447, -255.74040868167594]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.6788194948074615, 81.43877971333447, -255.74040868167594]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.6788194948074615, 81.43877971333447, -255.74040868167594]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_373",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.747576100754574, 4.428427353859363, 13.868174148954928]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.747576100754574, 4.428427353859363, 13.868174148954928]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.747576100754574, 4.428427353859363, 13.868174148954928]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_374",
    "sat": "def sat(x: float, coeffs: List[float]=[1.9799331958017456, -0.0742087518074664, -0.18252950870473744]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9799331958017456, -0.0742087518074664, -0.18252950870473744]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.9799331958017456, -0.0742087518074664, -0.18252950870473744]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_375",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3830792924978752, -0.26435431594676034, 0.025625808973314713]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3830792924978752, -0.26435431594676034, 0.025625808973314713]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3830792924978752, -0.26435431594676034, 0.025625808973314713]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_376",
    "sat": "def sat(x: float, coeffs: List[float]=[2.2022850028992913, 1.6300453023953683, 0.2931386875175242]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2022850028992913, 1.6300453023953683, 0.2931386875175242]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.2022850028992913, 1.6300453023953683, 0.2931386875175242]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_377",
    "sat": "def sat(x: float, coeffs: List[float]=[2.052224075180551, 19.506182027334834, 16.09845020324585]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.052224075180551, 19.506182027334834, 16.09845020324585]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.052224075180551, 19.506182027334834, 16.09845020324585]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_378",
    "sat": "def sat(x: float, coeffs: List[float]=[-28.788455247989585, -0.6231596258031108, 15.352800890156905]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-28.788455247989585, -0.6231596258031108, 15.352800890156905]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-28.788455247989585, -0.6231596258031108, 15.352800890156905]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_379",
    "sat": "def sat(x: float, coeffs: List[float]=[5.789581857295733, 0.2021049958704498, -0.036822804365820194]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.789581857295733, 0.2021049958704498, -0.036822804365820194]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.789581857295733, 0.2021049958704498, -0.036822804365820194]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_380",
    "sat": "def sat(x: float, coeffs: List[float]=[1.312822637586392, 97.02102870881453, -254.11801281390083]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.312822637586392, 97.02102870881453, -254.11801281390083]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.312822637586392, 97.02102870881453, -254.11801281390083]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_381",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.18725929859381388, 20.067258391929567, -122.00952974971982]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18725929859381388, 20.067258391929567, -122.00952974971982]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.18725929859381388, 20.067258391929567, -122.00952974971982]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_382",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4879582529663303, 0.14965111059207983, -48.08714925247263]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4879582529663303, 0.14965111059207983, -48.08714925247263]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4879582529663303, 0.14965111059207983, -48.08714925247263]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_383",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.190751874730991, -0.07097615904168701, 0.09979483903151781]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.190751874730991, -0.07097615904168701, 0.09979483903151781]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.190751874730991, -0.07097615904168701, 0.09979483903151781]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_384",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9659497446996417, -2.2808172245065523, 99.4681693929303]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9659497446996417, -2.2808172245065523, 99.4681693929303]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.9659497446996417, -2.2808172245065523, 99.4681693929303]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_385",
    "sat": "def sat(x: float, coeffs: List[float]=[3.7997740355253566, -0.21357300490452666, -42.13589818644471]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.7997740355253566, -0.21357300490452666, -42.13589818644471]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.7997740355253566, -0.21357300490452666, -42.13589818644471]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_386",
    "sat": "def sat(x: float, coeffs: List[float]=[-12.4182182875996, -0.07618460875698714, 0.006198753687988832]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.4182182875996, -0.07618460875698714, 0.006198753687988832]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-12.4182182875996, -0.07618460875698714, 0.006198753687988832]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_387",
    "sat": "def sat(x: float, coeffs: List[float]=[0.008547761561699488, 0.12554879579547232, 0.08611356439012002]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.008547761561699488, 0.12554879579547232, 0.08611356439012002]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.008547761561699488, 0.12554879579547232, 0.08611356439012002]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_388",
    "sat": "def sat(x: float, coeffs: List[float]=[228.28140175739532, -0.2770426182171016, -628.0221415515042]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[228.28140175739532, -0.2770426182171016, -628.0221415515042]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[228.28140175739532, -0.2770426182171016, -628.0221415515042]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_389",
    "sat": "def sat(x: float, coeffs: List[float]=[0.13920649353042772, 0.1920912218272246, 0.06607620542895253]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.13920649353042772, 0.1920912218272246, 0.06607620542895253]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.13920649353042772, 0.1920912218272246, 0.06607620542895253]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_390",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.7923302538270403, -1.8074400256844585, 0.3480418303335413]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7923302538270403, -1.8074400256844585, 0.3480418303335413]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.7923302538270403, -1.8074400256844585, 0.3480418303335413]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_391",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5738571356641754, 0.8998698537567459, 1.2692217596263076]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5738571356641754, 0.8998698537567459, 1.2692217596263076]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5738571356641754, 0.8998698537567459, 1.2692217596263076]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_392",
    "sat": "def sat(x: float, coeffs: List[float]=[0.33319411602162524, 0.23174773574363602, 0.0395835223549775]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.33319411602162524, 0.23174773574363602, 0.0395835223549775]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.33319411602162524, 0.23174773574363602, 0.0395835223549775]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_393",
    "sat": "def sat(x: float, coeffs: List[float]=[49.042664584289156, 0.19994832122768394, -6.552096159692455]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[49.042664584289156, 0.19994832122768394, -6.552096159692455]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[49.042664584289156, 0.19994832122768394, -6.552096159692455]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_394",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6261424105723288, 18.068977021061116, -0.5247154391888618]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6261424105723288, 18.068977021061116, -0.5247154391888618]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6261424105723288, 18.068977021061116, -0.5247154391888618]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_395",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.614316073119046, 1.4260887549537709, 34.25798951758298]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.614316073119046, 1.4260887549537709, 34.25798951758298]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-6.614316073119046, 1.4260887549537709, 34.25798951758298]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_396",
    "sat": "def sat(x: float, coeffs: List[float]=[0.217201814949044, 0.3081809087630904, 0.10010734393691414]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.217201814949044, 0.3081809087630904, 0.10010734393691414]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.217201814949044, 0.3081809087630904, 0.10010734393691414]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_397",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4900255183801792, -0.5155267951856289, 0.06744581299681882]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4900255183801792, -0.5155267951856289, 0.06744581299681882]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.4900255183801792, -0.5155267951856289, 0.06744581299681882]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_398",
    "sat": "def sat(x: float, coeffs: List[float]=[0.044867472414747235, 382.6119362144559, 1980.0217040333996]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.044867472414747235, 382.6119362144559, 1980.0217040333996]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.044867472414747235, 382.6119362144559, 1980.0217040333996]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_399",
    "sat": "def sat(x: float, coeffs: List[float]=[3.6905249273117877, 8.717138544143811, -40.929328043840016]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.6905249273117877, 8.717138544143811, -40.929328043840016]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.6905249273117877, 8.717138544143811, -40.929328043840016]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_400",
    "sat": "def sat(x: float, coeffs: List[float]=[2.1193878252596114, -1.7710427168191576, 0.17853226150360735]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1193878252596114, -1.7710427168191576, 0.17853226150360735]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.1193878252596114, -1.7710427168191576, 0.17853226150360735]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_401",
    "sat": "def sat(x: float, coeffs: List[float]=[0.013270879640088218, 1.3840712527916879, -0.34199775217657985]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.013270879640088218, 1.3840712527916879, -0.34199775217657985]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.013270879640088218, 1.3840712527916879, -0.34199775217657985]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_402",
    "sat": "def sat(x: float, coeffs: List[float]=[1.9280424324563095, 1.0425084199752266, -0.9865541939007264]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9280424324563095, 1.0425084199752266, -0.9865541939007264]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.9280424324563095, 1.0425084199752266, -0.9865541939007264]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_403",
    "sat": "def sat(x: float, coeffs: List[float]=[443.0922029374576, 0.8275036508076608, -48.48580638618109]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[443.0922029374576, 0.8275036508076608, -48.48580638618109]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[443.0922029374576, 0.8275036508076608, -48.48580638618109]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_404",
    "sat": "def sat(x: float, coeffs: List[float]=[-10.500796540342018, 5.151939715825185, 0.00405544509404163]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.500796540342018, 5.151939715825185, 0.00405544509404163]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-10.500796540342018, 5.151939715825185, 0.00405544509404163]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_405",
    "sat": "def sat(x: float, coeffs: List[float]=[17.638980246680752, 76.91543691579645, -0.49790648348846583]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[17.638980246680752, 76.91543691579645, -0.49790648348846583]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[17.638980246680752, 76.91543691579645, -0.49790648348846583]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_406",
    "sat": "def sat(x: float, coeffs: List[float]=[0.34528703052908094, 0.3198033619142304, -33.39812494621657]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.34528703052908094, 0.3198033619142304, -33.39812494621657]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.34528703052908094, 0.3198033619142304, -33.39812494621657]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_407",
    "sat": "def sat(x: float, coeffs: List[float]=[-12.36678869919129, -4.032834037151184, 167.87637727104746]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.36678869919129, -4.032834037151184, 167.87637727104746]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-12.36678869919129, -4.032834037151184, 167.87637727104746]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_408",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.04647213558663584, 0.1328587300758924, -0.03744433888263968]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04647213558663584, 0.1328587300758924, -0.03744433888263968]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.04647213558663584, 0.1328587300758924, -0.03744433888263968]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_409",
    "sat": "def sat(x: float, coeffs: List[float]=[8.468871970256133, -6.531092260656756, -1.824778685145093]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.468871970256133, -6.531092260656756, -1.824778685145093]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[8.468871970256133, -6.531092260656756, -1.824778685145093]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_410",
    "sat": "def sat(x: float, coeffs: List[float]=[72.62318300779002, 0.3611101131806114, -0.8199755915518524]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[72.62318300779002, 0.3611101131806114, -0.8199755915518524]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[72.62318300779002, 0.3611101131806114, -0.8199755915518524]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_411",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.294770164472999, -0.2208999160390507, -0.009111686472409664]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.294770164472999, -0.2208999160390507, -0.009111686472409664]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.294770164472999, -0.2208999160390507, -0.009111686472409664]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_412",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2152920821839682, -2.4816155272268663, -0.8804640360916025]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2152920821839682, -2.4816155272268663, -0.8804640360916025]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2152920821839682, -2.4816155272268663, -0.8804640360916025]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_413",
    "sat": "def sat(x: float, coeffs: List[float]=[-47.526008215757344, -8.834736847706393, 546263.1980165269]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-47.526008215757344, -8.834736847706393, 546263.1980165269]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-47.526008215757344, -8.834736847706393, 546263.1980165269]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_414",
    "sat": "def sat(x: float, coeffs: List[float]=[1.9056807947385017, -13.276819072486248, 0.10929208592481217]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9056807947385017, -13.276819072486248, 0.10929208592481217]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.9056807947385017, -13.276819072486248, 0.10929208592481217]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_415",
    "sat": "def sat(x: float, coeffs: List[float]=[0.35004802629990595, 0.0837061913704656, -0.5684483619829759]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.35004802629990595, 0.0837061913704656, -0.5684483619829759]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.35004802629990595, 0.0837061913704656, -0.5684483619829759]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_416",
    "sat": "def sat(x: float, coeffs: List[float]=[1.8781646247598047, -7.676454771943933, 2.4262850356619703]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8781646247598047, -7.676454771943933, 2.4262850356619703]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.8781646247598047, -7.676454771943933, 2.4262850356619703]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_417",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.057898907589816, 0.575459692120382, 43.15707433549825]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.057898907589816, 0.575459692120382, 43.15707433549825]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.057898907589816, 0.575459692120382, 43.15707433549825]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_418",
    "sat": "def sat(x: float, coeffs: List[float]=[8.77795125165311, -0.4429336350507979, -0.060688052037346465]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.77795125165311, -0.4429336350507979, -0.060688052037346465]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[8.77795125165311, -0.4429336350507979, -0.060688052037346465]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_419",
    "sat": "def sat(x: float, coeffs: List[float]=[0.17894331210524653, 0.7072638139741031, 0.20925822924026743]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17894331210524653, 0.7072638139741031, 0.20925822924026743]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.17894331210524653, 0.7072638139741031, 0.20925822924026743]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_420",
    "sat": "def sat(x: float, coeffs: List[float]=[3.035186668479797, -5.193815863753334, -4.5304774223450135]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.035186668479797, -5.193815863753334, -4.5304774223450135]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.035186668479797, -5.193815863753334, -4.5304774223450135]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_421",
    "sat": "def sat(x: float, coeffs: List[float]=[-51.17611582408065, 0.0295319928555459, 0.6166260543715028]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-51.17611582408065, 0.0295319928555459, 0.6166260543715028]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-51.17611582408065, 0.0295319928555459, 0.6166260543715028]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_422",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.396186300378538, 1.0568930280974573, 107.37771821305496]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.396186300378538, 1.0568930280974573, 107.37771821305496]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.396186300378538, 1.0568930280974573, 107.37771821305496]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_423",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1354780650479841, 645.5215690215812, 1231.9325248690434]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1354780650479841, 645.5215690215812, 1231.9325248690434]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1354780650479841, 645.5215690215812, 1231.9325248690434]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_424",
    "sat": "def sat(x: float, coeffs: List[float]=[0.22849124587593805, 0.20917522851019762, -0.6376016096322616]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22849124587593805, 0.20917522851019762, -0.6376016096322616]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.22849124587593805, 0.20917522851019762, -0.6376016096322616]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_425",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8942668179622033, -0.17221635225997378, -4.037514607161267]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8942668179622033, -0.17221635225997378, -4.037514607161267]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8942668179622033, -0.17221635225997378, -4.037514607161267]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_426",
    "sat": "def sat(x: float, coeffs: List[float]=[3.408152530807726, -3.51564962505765, 0.4621926087479822]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.408152530807726, -3.51564962505765, 0.4621926087479822]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.408152530807726, -3.51564962505765, 0.4621926087479822]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_427",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.337275584960327, -0.29711158396028686, -0.006925431645746923]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.337275584960327, -0.29711158396028686, -0.006925431645746923]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.337275584960327, -0.29711158396028686, -0.006925431645746923]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_428",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3063692037276904, -0.06756114627117922, 345.05609097170833]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3063692037276904, -0.06756114627117922, 345.05609097170833]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3063692037276904, -0.06756114627117922, 345.05609097170833]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_429",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7677687747371538, -14.954855548103547, -59.48222965082966]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7677687747371538, -14.954855548103547, -59.48222965082966]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.7677687747371538, -14.954855548103547, -59.48222965082966]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_430",
    "sat": "def sat(x: float, coeffs: List[float]=[0.09600579025588951, -0.37359539387253243, 0.02319266295369761]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09600579025588951, -0.37359539387253243, 0.02319266295369761]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.09600579025588951, -0.37359539387253243, 0.02319266295369761]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_431",
    "sat": "def sat(x: float, coeffs: List[float]=[23.19192585560342, -0.02128342048259313, -279.1090954575511]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[23.19192585560342, -0.02128342048259313, -279.1090954575511]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[23.19192585560342, -0.02128342048259313, -279.1090954575511]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_432",
    "sat": "def sat(x: float, coeffs: List[float]=[0.21911429109016298, 0.00626583255246671, -2299.4122960257187]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21911429109016298, 0.00626583255246671, -2299.4122960257187]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.21911429109016298, 0.00626583255246671, -2299.4122960257187]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_433",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1372866405558313, 154.69939398454437, -258.3675374074142]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1372866405558313, 154.69939398454437, -258.3675374074142]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.1372866405558313, 154.69939398454437, -258.3675374074142]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_434",
    "sat": "def sat(x: float, coeffs: List[float]=[-39.17173948555348, 0.10812288950252406, 244.30167147285235]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-39.17173948555348, 0.10812288950252406, 244.30167147285235]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-39.17173948555348, 0.10812288950252406, 244.30167147285235]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_435",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.37851254278051033, 0.08713144075501307, 0.007212958369964235]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.37851254278051033, 0.08713144075501307, 0.007212958369964235]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.37851254278051033, 0.08713144075501307, 0.007212958369964235]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_436",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2709695818565348, 111.60022344230208, 53.166530727661375]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2709695818565348, 111.60022344230208, 53.166530727661375]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2709695818565348, 111.60022344230208, 53.166530727661375]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_437",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.05621445200960862, -0.12290962174914093, 4.638303872323387]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05621445200960862, -0.12290962174914093, 4.638303872323387]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.05621445200960862, -0.12290962174914093, 4.638303872323387]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_438",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8918056711867676, 357.2428368683407, -25.83976911813408]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8918056711867676, 357.2428368683407, -25.83976911813408]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8918056711867676, 357.2428368683407, -25.83976911813408]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_439",
    "sat": "def sat(x: float, coeffs: List[float]=[1.3558962787671385, 23.47216404301773, -51.61608482980286]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3558962787671385, 23.47216404301773, -51.61608482980286]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.3558962787671385, 23.47216404301773, -51.61608482980286]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_440",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.5200151928197505, -0.33388125866106994, 0.030529610702974483]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5200151928197505, -0.33388125866106994, 0.030529610702974483]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.5200151928197505, -0.33388125866106994, 0.030529610702974483]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_441",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.02507639035214167, -2.1298934840309056, -2.433747396963184]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.02507639035214167, -2.1298934840309056, -2.433747396963184]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.02507639035214167, -2.1298934840309056, -2.433747396963184]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_442",
    "sat": "def sat(x: float, coeffs: List[float]=[3.624997046556702, -0.8503673423716499, -156.19630477342008]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.624997046556702, -0.8503673423716499, -156.19630477342008]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.624997046556702, -0.8503673423716499, -156.19630477342008]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_443",
    "sat": "def sat(x: float, coeffs: List[float]=[2.269902467818343, -0.004415300704929015, -0.009070802162858597]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.269902467818343, -0.004415300704929015, -0.009070802162858597]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.269902467818343, -0.004415300704929015, -0.009070802162858597]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_444",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6574704329866056, 4.687174994173771, -47.41886652186052]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6574704329866056, 4.687174994173771, -47.41886652186052]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6574704329866056, 4.687174994173771, -47.41886652186052]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_445",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.0797962289696414, -0.2949134352733549, 15.92324347577026]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.0797962289696414, -0.2949134352733549, 15.92324347577026]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.0797962289696414, -0.2949134352733549, 15.92324347577026]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_446",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3563470707484459, 0.5692944631957174, 0.19456645601882186]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3563470707484459, 0.5692944631957174, 0.19456645601882186]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.3563470707484459, 0.5692944631957174, 0.19456645601882186]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_447",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1449227867098488, -0.8373292947761076, 0.1310512725092623]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1449227867098488, -0.8373292947761076, 0.1310512725092623]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.1449227867098488, -0.8373292947761076, 0.1310512725092623]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_448",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1519913363643933, 19.761464550563954, -17.534620758468446]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1519913363643933, 19.761464550563954, -17.534620758468446]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1519913363643933, 19.761464550563954, -17.534620758468446]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_449",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.02056087709857864, -3.8912661972513454, -0.7733454165354632]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.02056087709857864, -3.8912661972513454, -0.7733454165354632]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.02056087709857864, -3.8912661972513454, -0.7733454165354632]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_450",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.617279220845866, -66.60229180785988, 12.57277737913187]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.617279220845866, -66.60229180785988, 12.57277737913187]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.617279220845866, -66.60229180785988, 12.57277737913187]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_451",
    "sat": "def sat(x: float, coeffs: List[float]=[16.11050630251221, 0.36720657819525, -1093709.1307763613]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.11050630251221, 0.36720657819525, -1093709.1307763613]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[16.11050630251221, 0.36720657819525, -1093709.1307763613]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_452",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1812220283083832, 3.31396459571142, -26.040271359431003]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1812220283083832, 3.31396459571142, -26.040271359431003]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1812220283083832, 3.31396459571142, -26.040271359431003]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_453",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.479687710181972, -0.17637901697635625, 125998.66865948364]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.479687710181972, -0.17637901697635625, 125998.66865948364]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.479687710181972, -0.17637901697635625, 125998.66865948364]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_454",
    "sat": "def sat(x: float, coeffs: List[float]=[-10.675592722578147, -3.4459326237358767, -0.020992461377033172]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.675592722578147, -3.4459326237358767, -0.020992461377033172]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-10.675592722578147, -3.4459326237358767, -0.020992461377033172]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_455",
    "sat": "def sat(x: float, coeffs: List[float]=[-664.0196932653502, 1.8537076680000775, 65.45004823374634]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-664.0196932653502, 1.8537076680000775, 65.45004823374634]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-664.0196932653502, 1.8537076680000775, 65.45004823374634]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_456",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8122664888870812, -4.828428293677093, 2.371263357737124]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8122664888870812, -4.828428293677093, 2.371263357737124]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8122664888870812, -4.828428293677093, 2.371263357737124]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_457",
    "sat": "def sat(x: float, coeffs: List[float]=[365.4948676373679, -5.10297032901249, -156862.56338039742]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[365.4948676373679, -5.10297032901249, -156862.56338039742]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[365.4948676373679, -5.10297032901249, -156862.56338039742]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_458",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.002638058874386099, 7.294793651120268, -6.014064320619642]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.002638058874386099, 7.294793651120268, -6.014064320619642]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.002638058874386099, 7.294793651120268, -6.014064320619642]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_459",
    "sat": "def sat(x: float, coeffs: List[float]=[3.822410119772251, 6.483636077784122, -10.47666306881128]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.822410119772251, 6.483636077784122, -10.47666306881128]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.822410119772251, 6.483636077784122, -10.47666306881128]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_460",
    "sat": "def sat(x: float, coeffs: List[float]=[3.321327837390259, -1.127546015549366, 0.0917620771388287]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.321327837390259, -1.127546015549366, 0.0917620771388287]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.321327837390259, -1.127546015549366, 0.0917620771388287]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_461",
    "sat": "def sat(x: float, coeffs: List[float]=[1.6065135819199086, 1.0896393690499533, -0.19094171054932776]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6065135819199086, 1.0896393690499533, -0.19094171054932776]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.6065135819199086, 1.0896393690499533, -0.19094171054932776]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_462",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.878040884965788, -0.04616148718127766, 1.89782282009994]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.878040884965788, -0.04616148718127766, 1.89782282009994]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.878040884965788, -0.04616148718127766, 1.89782282009994]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_463",
    "sat": "def sat(x: float, coeffs: List[float]=[256.49625100279803, -6.127196685655314, -153.122814762114]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[256.49625100279803, -6.127196685655314, -153.122814762114]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[256.49625100279803, -6.127196685655314, -153.122814762114]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_464",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.25315091774985854, 2.5789336982518205, 0.36118484157199915]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.25315091774985854, 2.5789336982518205, 0.36118484157199915]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.25315091774985854, 2.5789336982518205, 0.36118484157199915]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_465",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.21072551351489074, -0.061026646889890936, 0.0008195922116605511]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.21072551351489074, -0.061026646889890936, 0.0008195922116605511]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.21072551351489074, -0.061026646889890936, 0.0008195922116605511]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_466",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.07430095800841559, 0.5593226570763377, 1.224724022883388]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07430095800841559, 0.5593226570763377, 1.224724022883388]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.07430095800841559, 0.5593226570763377, 1.224724022883388]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_467",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.25709717045119845, 0.18020041359059488, 0.19317784355699344]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.25709717045119845, 0.18020041359059488, 0.19317784355699344]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.25709717045119845, 0.18020041359059488, 0.19317784355699344]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_468",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5829881298249245, 9.568031630472474, 0.2778201256575063]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5829881298249245, 9.568031630472474, 0.2778201256575063]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5829881298249245, 9.568031630472474, 0.2778201256575063]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_469",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3001546206831544, 0.8118607620587496, 2.3595243752772657]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3001546206831544, 0.8118607620587496, 2.3595243752772657]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3001546206831544, 0.8118607620587496, 2.3595243752772657]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_470",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.06882567727092244, -50.99638291189924, -4.626466743595749]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06882567727092244, -50.99638291189924, -4.626466743595749]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.06882567727092244, -50.99638291189924, -4.626466743595749]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_471",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5794722124203244, 1.3976338017218888, 0.2867286192367229]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5794722124203244, 1.3976338017218888, 0.2867286192367229]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5794722124203244, 1.3976338017218888, 0.2867286192367229]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_472",
    "sat": "def sat(x: float, coeffs: List[float]=[-208.54981409435922, 1.4323582591267463, 57502.69589358958]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-208.54981409435922, 1.4323582591267463, 57502.69589358958]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-208.54981409435922, 1.4323582591267463, 57502.69589358958]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_473",
    "sat": "def sat(x: float, coeffs: List[float]=[-11.24211685477851, -0.20733307482291585, 0.6398749636363841]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.24211685477851, -0.20733307482291585, 0.6398749636363841]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-11.24211685477851, -0.20733307482291585, 0.6398749636363841]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_474",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05086379914395445, 1.7645040045178917, 0.3489666238895152]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05086379914395445, 1.7645040045178917, 0.3489666238895152]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.05086379914395445, 1.7645040045178917, 0.3489666238895152]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_475",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7793889467416188, 1.7122193776603216, 2.7504693688547537]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7793889467416188, 1.7122193776603216, 2.7504693688547537]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7793889467416188, 1.7122193776603216, 2.7504693688547537]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_476",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8607326517445598, -0.852173162935799, 3.529329885436013]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8607326517445598, -0.852173162935799, 3.529329885436013]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8607326517445598, -0.852173162935799, 3.529329885436013]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_477",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.13092267296853755, 1.1281171918042814, 0.2832795566262586]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.13092267296853755, 1.1281171918042814, 0.2832795566262586]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.13092267296853755, 1.1281171918042814, 0.2832795566262586]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_478",
    "sat": "def sat(x: float, coeffs: List[float]=[-10.894704752470068, 10.491452179263462, 157.02309962621914]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.894704752470068, 10.491452179263462, 157.02309962621914]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-10.894704752470068, 10.491452179263462, 157.02309962621914]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_479",
    "sat": "def sat(x: float, coeffs: List[float]=[5.6221057045324665, 0.4715053852321855, -0.3262505913639175]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.6221057045324665, 0.4715053852321855, -0.3262505913639175]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.6221057045324665, 0.4715053852321855, -0.3262505913639175]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_480",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3129231483256325, 17.986067549606176, 29787.02353304665]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3129231483256325, 17.986067549606176, 29787.02353304665]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.3129231483256325, 17.986067549606176, 29787.02353304665]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_481",
    "sat": "def sat(x: float, coeffs: List[float]=[45.061703153810164, -0.43485420809828473, -0.8745969715461711]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[45.061703153810164, -0.43485420809828473, -0.8745969715461711]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[45.061703153810164, -0.43485420809828473, -0.8745969715461711]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_482",
    "sat": "def sat(x: float, coeffs: List[float]=[145.5411519611295, -0.2101440840590126, -2237.49546852089]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[145.5411519611295, -0.2101440840590126, -2237.49546852089]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[145.5411519611295, -0.2101440840590126, -2237.49546852089]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_483",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6109384206480314, -2.2016569701037993, -0.1078390071600988]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6109384206480314, -2.2016569701037993, -0.1078390071600988]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6109384206480314, -2.2016569701037993, -0.1078390071600988]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_484",
    "sat": "def sat(x: float, coeffs: List[float]=[0.463082560358789, 3.2735243875389455, -1.9924533943083391]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.463082560358789, 3.2735243875389455, -1.9924533943083391]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.463082560358789, 3.2735243875389455, -1.9924533943083391]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_485",
    "sat": "def sat(x: float, coeffs: List[float]=[1.641270899907008, 0.2263222901550681, -1.190129631698954]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.641270899907008, 0.2263222901550681, -1.190129631698954]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.641270899907008, 0.2263222901550681, -1.190129631698954]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_486",
    "sat": "def sat(x: float, coeffs: List[float]=[0.37117832086760805, -0.6571088750469664, -29158.624205492393]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.37117832086760805, -0.6571088750469664, -29158.624205492393]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.37117832086760805, -0.6571088750469664, -29158.624205492393]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_487",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2132585398717535, 2.859651699194874, 166.97487112980565]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2132585398717535, 2.859651699194874, 166.97487112980565]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.2132585398717535, 2.859651699194874, 166.97487112980565]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_488",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.9110042575101467, 1.8057070003597595, 0.29029846030547446]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9110042575101467, 1.8057070003597595, 0.29029846030547446]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.9110042575101467, 1.8057070003597595, 0.29029846030547446]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_489",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.18739335251262168, 0.060257911919069006, 0.02156471156754501]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18739335251262168, 0.060257911919069006, 0.02156471156754501]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.18739335251262168, 0.060257911919069006, 0.02156471156754501]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_490",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.041712393764913015, 0.3383646919353551, 0.06637737805408536]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.041712393764913015, 0.3383646919353551, 0.06637737805408536]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.041712393764913015, 0.3383646919353551, 0.06637737805408536]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_491",
    "sat": "def sat(x: float, coeffs: List[float]=[14.827306095721775, 0.9164841720590489, -0.0746009418135773]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.827306095721775, 0.9164841720590489, -0.0746009418135773]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[14.827306095721775, 0.9164841720590489, -0.0746009418135773]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_492",
    "sat": "def sat(x: float, coeffs: List[float]=[0.33461824960555725, -0.856284768713489, -0.505366278212823]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.33461824960555725, -0.856284768713489, -0.505366278212823]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.33461824960555725, -0.856284768713489, -0.505366278212823]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_493",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.06873321931361394, -9.650261813233515, -0.28371929837301546]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06873321931361394, -9.650261813233515, -0.28371929837301546]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.06873321931361394, -9.650261813233515, -0.28371929837301546]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_494",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1320919533922125, -3.702596931391289, -833.0102912080965]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1320919533922125, -3.702596931391289, -833.0102912080965]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.1320919533922125, -3.702596931391289, -833.0102912080965]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_495",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1521012924952252, 1.2885970514402718, 0.13866986904515533]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1521012924952252, 1.2885970514402718, 0.13866986904515533]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.1521012924952252, 1.2885970514402718, 0.13866986904515533]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_496",
    "sat": "def sat(x: float, coeffs: List[float]=[-682.3202490657033, 0.7819928570668783, 3753.766709030079]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-682.3202490657033, 0.7819928570668783, 3753.766709030079]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-682.3202490657033, 0.7819928570668783, 3753.766709030079]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_497",
    "sat": "def sat(x: float, coeffs: List[float]=[7.028386870444621, -0.0337138298269594, -0.0022398504769834795]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.028386870444621, -0.0337138298269594, -0.0022398504769834795]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[7.028386870444621, -0.0337138298269594, -0.0022398504769834795]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_498",
    "sat": "def sat(x: float, coeffs: List[float]=[-8.763519131058402, 0.10456950202438331, 87.25937714865672]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.763519131058402, 0.10456950202438331, 87.25937714865672]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-8.763519131058402, 0.10456950202438331, 87.25937714865672]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_499",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.19612770894842665, 0.4551250909564654, -0.08178120082579218]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19612770894842665, 0.4551250909564654, -0.08178120082579218]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.19612770894842665, 0.4551250909564654, -0.08178120082579218]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_500",
    "sat": "def sat(x: float, coeffs: List[float]=[-86.53952667969686, 405.2085910929532, 8333.806013535024]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-86.53952667969686, 405.2085910929532, 8333.806013535024]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-86.53952667969686, 405.2085910929532, 8333.806013535024]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_501",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.5383376163181928, -2.736434359693515, -0.46332010095240955]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.5383376163181928, -2.736434359693515, -0.46332010095240955]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.5383376163181928, -2.736434359693515, -0.46332010095240955]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_502",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9062855776832356, -0.520656899421188, -1.3715977307718026]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9062855776832356, -0.520656899421188, -1.3715977307718026]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.9062855776832356, -0.520656899421188, -1.3715977307718026]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_503",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2814720583275368, -61.522035996503014, 74.16549253088017]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2814720583275368, -61.522035996503014, 74.16549253088017]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2814720583275368, -61.522035996503014, 74.16549253088017]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_504",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.037878700382884954, 12.934897188781909, -31.896260886348905]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.037878700382884954, 12.934897188781909, -31.896260886348905]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.037878700382884954, 12.934897188781909, -31.896260886348905]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_505",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.5696288903742985, 6.262158540799089, -5.797804831837174]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5696288903742985, 6.262158540799089, -5.797804831837174]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.5696288903742985, 6.262158540799089, -5.797804831837174]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_506",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5345148911672934, -1.2611972065718577, -0.06953867464687803]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5345148911672934, -1.2611972065718577, -0.06953867464687803]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5345148911672934, -1.2611972065718577, -0.06953867464687803]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_507",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8501273265492083, 7.269011599616952, 35672.27145848399]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8501273265492083, 7.269011599616952, 35672.27145848399]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8501273265492083, 7.269011599616952, 35672.27145848399]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_508",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5381972594189522, 4.7726545497745585, -9775.235627584372]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5381972594189522, 4.7726545497745585, -9775.235627584372]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5381972594189522, 4.7726545497745585, -9775.235627584372]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_509",
    "sat": "def sat(x: float, coeffs: List[float]=[1.4651491240926988, 20.306191316622684, -996964.5581078461]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4651491240926988, 20.306191316622684, -996964.5581078461]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.4651491240926988, 20.306191316622684, -996964.5581078461]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_510",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05499324295260366, 0.6477626615510426, 0.7701871982268902]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05499324295260366, 0.6477626615510426, 0.7701871982268902]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.05499324295260366, 0.6477626615510426, 0.7701871982268902]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_511",
    "sat": "def sat(x: float, coeffs: List[float]=[23.72260424617093, 1.3738466178533777, -2780.994651522348]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[23.72260424617093, 1.3738466178533777, -2780.994651522348]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[23.72260424617093, 1.3738466178533777, -2780.994651522348]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_512",
    "sat": "def sat(x: float, coeffs: List[float]=[22.82494502359602, -0.29848257456462446, -1.9665770742681135]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[22.82494502359602, -0.29848257456462446, -1.9665770742681135]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[22.82494502359602, -0.29848257456462446, -1.9665770742681135]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_513",
    "sat": "def sat(x: float, coeffs: List[float]=[3.3024355070168276, 0.298229809840443, -275.9601285904368]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.3024355070168276, 0.298229809840443, -275.9601285904368]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.3024355070168276, 0.298229809840443, -275.9601285904368]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_514",
    "sat": "def sat(x: float, coeffs: List[float]=[-68.81418723639833, -0.9624637347774497, 155796.77636031705]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-68.81418723639833, -0.9624637347774497, 155796.77636031705]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-68.81418723639833, -0.9624637347774497, 155796.77636031705]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_515",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.132379931644073, 2.730148209881332, 1.6217968410200994]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.132379931644073, 2.730148209881332, 1.6217968410200994]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.132379931644073, 2.730148209881332, 1.6217968410200994]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_516",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9835705058573369, 0.11378293958915386, -2.6185751478995316]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9835705058573369, 0.11378293958915386, -2.6185751478995316]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.9835705058573369, 0.11378293958915386, -2.6185751478995316]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_517",
    "sat": "def sat(x: float, coeffs: List[float]=[0.03507902115406466, -2.9174697161331813, 6.360917727298354]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03507902115406466, -2.9174697161331813, 6.360917727298354]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.03507902115406466, -2.9174697161331813, 6.360917727298354]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_518",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.733913379049813, 0.5514846790941244, 5.936516066328214]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.733913379049813, 0.5514846790941244, 5.936516066328214]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.733913379049813, 0.5514846790941244, 5.936516066328214]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_519",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8004393004658131, 6.782171276921748, 0.09542544608636702]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8004393004658131, 6.782171276921748, 0.09542544608636702]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8004393004658131, 6.782171276921748, 0.09542544608636702]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_520",
    "sat": "def sat(x: float, coeffs: List[float]=[-36.68108618029534, -1.3908270290918665, 463.6313801566881]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-36.68108618029534, -1.3908270290918665, 463.6313801566881]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-36.68108618029534, -1.3908270290918665, 463.6313801566881]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_521",
    "sat": "def sat(x: float, coeffs: List[float]=[25.20772355088378, 2.5420432814840503, -1.4717836415858614]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[25.20772355088378, 2.5420432814840503, -1.4717836415858614]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[25.20772355088378, 2.5420432814840503, -1.4717836415858614]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_522",
    "sat": "def sat(x: float, coeffs: List[float]=[0.30294005369653604, 0.17838746389482907, -4.719959124333362]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.30294005369653604, 0.17838746389482907, -4.719959124333362]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.30294005369653604, 0.17838746389482907, -4.719959124333362]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_523",
    "sat": "def sat(x: float, coeffs: List[float]=[0.023766083674567524, 1.167053955061635, -1.8016393266134083]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.023766083674567524, 1.167053955061635, -1.8016393266134083]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.023766083674567524, 1.167053955061635, -1.8016393266134083]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_524",
    "sat": "def sat(x: float, coeffs: List[float]=[0.027500419513240375, 0.006322454327314671, -0.25539254106449893]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.027500419513240375, 0.006322454327314671, -0.25539254106449893]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.027500419513240375, 0.006322454327314671, -0.25539254106449893]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_525",
    "sat": "def sat(x: float, coeffs: List[float]=[5.226880837292078, 0.326169125134568, -0.017490419052230814]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.226880837292078, 0.326169125134568, -0.017490419052230814]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.226880837292078, 0.326169125134568, -0.017490419052230814]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_526",
    "sat": "def sat(x: float, coeffs: List[float]=[11.455724640669516, -435.4128214710938, 1812.2691321986968]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.455724640669516, -435.4128214710938, 1812.2691321986968]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[11.455724640669516, -435.4128214710938, 1812.2691321986968]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_527",
    "sat": "def sat(x: float, coeffs: List[float]=[16.849310632733552, 0.24571421507262725, -44.474754870736206]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.849310632733552, 0.24571421507262725, -44.474754870736206]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[16.849310632733552, 0.24571421507262725, -44.474754870736206]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_528",
    "sat": "def sat(x: float, coeffs: List[float]=[0.022745454409714688, 11.428659309277263, 4.7582008982008706]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.022745454409714688, 11.428659309277263, 4.7582008982008706]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.022745454409714688, 11.428659309277263, 4.7582008982008706]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_529",
    "sat": "def sat(x: float, coeffs: List[float]=[0.36771184287633174, 28.667451573555777, 3.2898957866579264]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.36771184287633174, 28.667451573555777, 3.2898957866579264]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.36771184287633174, 28.667451573555777, 3.2898957866579264]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_530",
    "sat": "def sat(x: float, coeffs: List[float]=[2.201515809025694, 1.3756641533239158, 0.2111992207746569]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.201515809025694, 1.3756641533239158, 0.2111992207746569]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.201515809025694, 1.3756641533239158, 0.2111992207746569]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_531",
    "sat": "def sat(x: float, coeffs: List[float]=[-8.862642135859168, -1.9411900143580505, 547.094011041793]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.862642135859168, -1.9411900143580505, 547.094011041793]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-8.862642135859168, -1.9411900143580505, 547.094011041793]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_532",
    "sat": "def sat(x: float, coeffs: List[float]=[0.07838110647904872, -0.26595369788143414, -0.2963899417414052]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07838110647904872, -0.26595369788143414, -0.2963899417414052]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.07838110647904872, -0.26595369788143414, -0.2963899417414052]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_533",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.569869786328391, -0.23033810592526346, 1343.2143615834605]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.569869786328391, -0.23033810592526346, 1343.2143615834605]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-7.569869786328391, -0.23033810592526346, 1343.2143615834605]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_534",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2778947869467119, 0.007307308246379929, 5.836306327153532]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2778947869467119, 0.007307308246379929, 5.836306327153532]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2778947869467119, 0.007307308246379929, 5.836306327153532]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_535",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6464075054855641, 2.1235897704734854, -13.152732393518534]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6464075054855641, 2.1235897704734854, -13.152732393518534]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6464075054855641, 2.1235897704734854, -13.152732393518534]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_536",
    "sat": "def sat(x: float, coeffs: List[float]=[5.445558124843583, 0.426469156812234, -1.0121901002182137]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.445558124843583, 0.426469156812234, -1.0121901002182137]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.445558124843583, 0.426469156812234, -1.0121901002182137]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_537",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.5861529525496985, 0.8844765681647618, 1.4945791396205517]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.5861529525496985, 0.8844765681647618, 1.4945791396205517]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.5861529525496985, 0.8844765681647618, 1.4945791396205517]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_538",
    "sat": "def sat(x: float, coeffs: List[float]=[89.60672104214738, 0.1367317112944987, -324.4419029042005]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[89.60672104214738, 0.1367317112944987, -324.4419029042005]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[89.60672104214738, 0.1367317112944987, -324.4419029042005]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_539",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5984603379057786, -0.02528252968583174, -3.9560969927347376]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5984603379057786, -0.02528252968583174, -3.9560969927347376]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5984603379057786, -0.02528252968583174, -3.9560969927347376]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_540",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.055958639267585, 1.5406689716408968, 2.5105911986173663]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.055958639267585, 1.5406689716408968, 2.5105911986173663]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.055958639267585, 1.5406689716408968, 2.5105911986173663]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_541",
    "sat": "def sat(x: float, coeffs: List[float]=[1.239570055970607, 1.216731769599764, -903.7113191901532]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.239570055970607, 1.216731769599764, -903.7113191901532]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.239570055970607, 1.216731769599764, -903.7113191901532]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_542",
    "sat": "def sat(x: float, coeffs: List[float]=[2.0604151019242147, -968.6193233000555, 14.346258007921305]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0604151019242147, -968.6193233000555, 14.346258007921305]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.0604151019242147, -968.6193233000555, 14.346258007921305]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_543",
    "sat": "def sat(x: float, coeffs: List[float]=[4.230949364959813, -0.5186097401977325, -2.4610325566582647]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.230949364959813, -0.5186097401977325, -2.4610325566582647]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[4.230949364959813, -0.5186097401977325, -2.4610325566582647]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_544",
    "sat": "def sat(x: float, coeffs: List[float]=[163.91399607504775, 0.636948222114806, -42.14233154909319]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[163.91399607504775, 0.636948222114806, -42.14233154909319]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[163.91399607504775, 0.636948222114806, -42.14233154909319]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_545",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.6520200189763012, -0.47235628496386023, 38.826386286162496]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.6520200189763012, -0.47235628496386023, 38.826386286162496]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.6520200189763012, -0.47235628496386023, 38.826386286162496]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_546",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1757597176455362, 3.4603188405355323, -125.38912139993869]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1757597176455362, 3.4603188405355323, -125.38912139993869]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1757597176455362, 3.4603188405355323, -125.38912139993869]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_547",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1451580978565362, 1.1717884690041058, 0.4868794354252753]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1451580978565362, 1.1717884690041058, 0.4868794354252753]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1451580978565362, 1.1717884690041058, 0.4868794354252753]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_548",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.32036154090423347, -3.088863479444792, -0.6096558808540821]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.32036154090423347, -3.088863479444792, -0.6096558808540821]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.32036154090423347, -3.088863479444792, -0.6096558808540821]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_549",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.487778919380723, 0.0012132011486161165, 10.72476696118213]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.487778919380723, 0.0012132011486161165, 10.72476696118213]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.487778919380723, 0.0012132011486161165, 10.72476696118213]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_550",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.1456901140323987, -0.0592078990946329, 2.139983464870471]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.1456901140323987, -0.0592078990946329, 2.139983464870471]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.1456901140323987, -0.0592078990946329, 2.139983464870471]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_551",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.08456156183720014, 7.5670298344624145, -12.679576017404866]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08456156183720014, 7.5670298344624145, -12.679576017404866]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.08456156183720014, 7.5670298344624145, -12.679576017404866]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_552",
    "sat": "def sat(x: float, coeffs: List[float]=[-10.610052589200897, -0.49368725855567064, 4.612381145537752]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.610052589200897, -0.49368725855567064, 4.612381145537752]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-10.610052589200897, -0.49368725855567064, 4.612381145537752]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_553",
    "sat": "def sat(x: float, coeffs: List[float]=[0.10988924591973055, 0.39792809217686437, -14.02713939525719]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10988924591973055, 0.39792809217686437, -14.02713939525719]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.10988924591973055, 0.39792809217686437, -14.02713939525719]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_554",
    "sat": "def sat(x: float, coeffs: List[float]=[0.034490250561447576, -75.92221205326761, 180.03281754391872]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.034490250561447576, -75.92221205326761, 180.03281754391872]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.034490250561447576, -75.92221205326761, 180.03281754391872]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_555",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.081214753933566, -3.9149479232048416, -0.5112714787223376]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.081214753933566, -3.9149479232048416, -0.5112714787223376]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-7.081214753933566, -3.9149479232048416, -0.5112714787223376]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_556",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3553817046098473, 1.540334298463512, 3.438550086567287]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3553817046098473, 1.540334298463512, 3.438550086567287]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3553817046098473, 1.540334298463512, 3.438550086567287]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_557",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7956294370794489, 24.76714066248208, 250.2871467714901]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7956294370794489, 24.76714066248208, 250.2871467714901]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7956294370794489, 24.76714066248208, 250.2871467714901]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_558",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1096209580115568, -5.533196119775348, 1.9621954036515192]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1096209580115568, -5.533196119775348, 1.9621954036515192]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1096209580115568, -5.533196119775348, 1.9621954036515192]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_559",
    "sat": "def sat(x: float, coeffs: List[float]=[0.10404716952583648, -0.6806804357665813, -0.06350883718114257]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10404716952583648, -0.6806804357665813, -0.06350883718114257]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.10404716952583648, -0.6806804357665813, -0.06350883718114257]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_560",
    "sat": "def sat(x: float, coeffs: List[float]=[4.24084035743279, 8.547074016874847, 3.865444729936394]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.24084035743279, 8.547074016874847, 3.865444729936394]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[4.24084035743279, 8.547074016874847, 3.865444729936394]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_561",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5598766209138611, 13.882546104603989, -14.961876100603575]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5598766209138611, 13.882546104603989, -14.961876100603575]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5598766209138611, 13.882546104603989, -14.961876100603575]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_562",
    "sat": "def sat(x: float, coeffs: List[float]=[0.535074140194551, -0.1035303151362541, -0.449041785594944]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.535074140194551, -0.1035303151362541, -0.449041785594944]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.535074140194551, -0.1035303151362541, -0.449041785594944]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_563",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5673765728350878, -0.3012287917782314, -0.03552587927266387]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5673765728350878, -0.3012287917782314, -0.03552587927266387]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5673765728350878, -0.3012287917782314, -0.03552587927266387]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_564",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2313166388875756, -0.013054741581991047, -36.11421858562786]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2313166388875756, -0.013054741581991047, -36.11421858562786]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.2313166388875756, -0.013054741581991047, -36.11421858562786]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_565",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.4421179150619852, 0.38086675060828146, 0.02895842040908452]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4421179150619852, 0.38086675060828146, 0.02895842040908452]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.4421179150619852, 0.38086675060828146, 0.02895842040908452]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_566",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0681648745165011, -0.05401381039128039, 110.44427178300364]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0681648745165011, -0.05401381039128039, 110.44427178300364]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.0681648745165011, -0.05401381039128039, 110.44427178300364]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_567",
    "sat": "def sat(x: float, coeffs: List[float]=[2.64765811506345, -0.42336194943249605, -0.6743551349769956]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.64765811506345, -0.42336194943249605, -0.6743551349769956]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.64765811506345, -0.42336194943249605, -0.6743551349769956]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_568",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6191103973946035, 0.7346683687673088, -0.16368927900100194]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6191103973946035, 0.7346683687673088, -0.16368927900100194]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6191103973946035, 0.7346683687673088, -0.16368927900100194]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_569",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.5545846948865285, 124.73810510404597, 430.0032914129102]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.5545846948865285, 124.73810510404597, 430.0032914129102]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.5545846948865285, 124.73810510404597, 430.0032914129102]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_570",
    "sat": "def sat(x: float, coeffs: List[float]=[-12.79010520380298, 2.538534196109317, -0.12551181774765435]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.79010520380298, 2.538534196109317, -0.12551181774765435]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-12.79010520380298, 2.538534196109317, -0.12551181774765435]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_571",
    "sat": "def sat(x: float, coeffs: List[float]=[-172.33446754718872, 0.010089546470208433, 4138.765906970178]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-172.33446754718872, 0.010089546470208433, 4138.765906970178]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-172.33446754718872, 0.010089546470208433, 4138.765906970178]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_572",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.8137358572381501, -0.6315331133483039, 1.8086187456804053]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8137358572381501, -0.6315331133483039, 1.8086187456804053]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.8137358572381501, -0.6315331133483039, 1.8086187456804053]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_573",
    "sat": "def sat(x: float, coeffs: List[float]=[-17.231762216107942, 0.12816006207938183, 452.95931107741126]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.231762216107942, 0.12816006207938183, 452.95931107741126]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-17.231762216107942, 0.12816006207938183, 452.95931107741126]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_574",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.08615420818978207, -1.3595971358979895, 12.101704548337135]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08615420818978207, -1.3595971358979895, 12.101704548337135]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.08615420818978207, -1.3595971358979895, 12.101704548337135]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_575",
    "sat": "def sat(x: float, coeffs: List[float]=[3.9504046037870313, -22.44957801591282, -2996.4124017027907]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.9504046037870313, -22.44957801591282, -2996.4124017027907]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.9504046037870313, -22.44957801591282, -2996.4124017027907]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_576",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.6092855717858705, 0.7102103106359022, 69.0782861252459]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.6092855717858705, 0.7102103106359022, 69.0782861252459]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.6092855717858705, 0.7102103106359022, 69.0782861252459]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_577",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6928983814288104, -1.3816876098047566, -0.5130752788310411]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6928983814288104, -1.3816876098047566, -0.5130752788310411]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6928983814288104, -1.3816876098047566, -0.5130752788310411]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_578",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0554008873174611, -7.153350188845572, -11.235668764512928]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0554008873174611, -7.153350188845572, -11.235668764512928]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.0554008873174611, -7.153350188845572, -11.235668764512928]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_579",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5437233009061999, 2.91933423057988, 0.1474710825098322]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5437233009061999, 2.91933423057988, 0.1474710825098322]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5437233009061999, 2.91933423057988, 0.1474710825098322]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_580",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7361862846762384, 1.724745551009911, -0.048290691312828225]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7361862846762384, 1.724745551009911, -0.048290691312828225]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.7361862846762384, 1.724745551009911, -0.048290691312828225]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_581",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4072982766670588, -0.4048159182121965, -1.0507081846360655]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4072982766670588, -0.4048159182121965, -1.0507081846360655]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4072982766670588, -0.4048159182121965, -1.0507081846360655]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_582",
    "sat": "def sat(x: float, coeffs: List[float]=[121.0497826774877, -3.1491727395957727, -3.634438956722378]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[121.0497826774877, -3.1491727395957727, -3.634438956722378]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[121.0497826774877, -3.1491727395957727, -3.634438956722378]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_583",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.5423645256703415, -0.38787007801760415, 26.728699869578048]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.5423645256703415, -0.38787007801760415, 26.728699869578048]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.5423645256703415, -0.38787007801760415, 26.728699869578048]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_584",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.989381497288537, -0.10006298461195651, 0.10638913296474747]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.989381497288537, -0.10006298461195651, 0.10638913296474747]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.989381497288537, -0.10006298461195651, 0.10638913296474747]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_585",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.5332697550602619, -0.04902685568922438, 3084.196633587492]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5332697550602619, -0.04902685568922438, 3084.196633587492]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.5332697550602619, -0.04902685568922438, 3084.196633587492]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_586",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5089590538467109, 21.58860625090415, -20.281196957762248]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5089590538467109, 21.58860625090415, -20.281196957762248]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5089590538467109, 21.58860625090415, -20.281196957762248]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_587",
    "sat": "def sat(x: float, coeffs: List[float]=[-9.437002023428334, -0.2734708780600825, 360.0026608924525]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.437002023428334, -0.2734708780600825, 360.0026608924525]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-9.437002023428334, -0.2734708780600825, 360.0026608924525]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_588",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.04615579772846523, -0.22134138350977853, 5.863578527161298]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04615579772846523, -0.22134138350977853, 5.863578527161298]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.04615579772846523, -0.22134138350977853, 5.863578527161298]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_589",
    "sat": "def sat(x: float, coeffs: List[float]=[-89.66508254627313, -0.28406551067085756, 24.14937741375266]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-89.66508254627313, -0.28406551067085756, 24.14937741375266]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-89.66508254627313, -0.28406551067085756, 24.14937741375266]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_590",
    "sat": "def sat(x: float, coeffs: List[float]=[0.44719655188413904, 10.055759233378753, 14.527211172410835]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.44719655188413904, 10.055759233378753, 14.527211172410835]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.44719655188413904, 10.055759233378753, 14.527211172410835]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_591",
    "sat": "def sat(x: float, coeffs: List[float]=[20.007945948597968, -0.7027196098819001, -74.81302115538577]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[20.007945948597968, -0.7027196098819001, -74.81302115538577]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[20.007945948597968, -0.7027196098819001, -74.81302115538577]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_592",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.05541977950971481, 0.044826470067347746, -0.00858915245297753]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05541977950971481, 0.044826470067347746, -0.00858915245297753]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.05541977950971481, 0.044826470067347746, -0.00858915245297753]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_593",
    "sat": "def sat(x: float, coeffs: List[float]=[27.69746494235459, -0.17392298739454692, -0.18630344372893884]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[27.69746494235459, -0.17392298739454692, -0.18630344372893884]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[27.69746494235459, -0.17392298739454692, -0.18630344372893884]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_594",
    "sat": "def sat(x: float, coeffs: List[float]=[10.126579875027348, -2.0035551275860723, -0.699783792824106]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.126579875027348, -2.0035551275860723, -0.699783792824106]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[10.126579875027348, -2.0035551275860723, -0.699783792824106]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_595",
    "sat": "def sat(x: float, coeffs: List[float]=[6.615776335882294, 4.64585886330138, -1.95292893076503]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.615776335882294, 4.64585886330138, -1.95292893076503]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.615776335882294, 4.64585886330138, -1.95292893076503]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_596",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.5242548426082017, 0.24191931944123168, -0.0021915922284809737]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5242548426082017, 0.24191931944123168, -0.0021915922284809737]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.5242548426082017, 0.24191931944123168, -0.0021915922284809737]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_597",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1455523157707328, 1.8093489526705815, 402.2247365875592]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1455523157707328, 1.8093489526705815, 402.2247365875592]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.1455523157707328, 1.8093489526705815, 402.2247365875592]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_598",
    "sat": "def sat(x: float, coeffs: List[float]=[0.339211362540721, 0.25161585555301164, -0.1893370891142599]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.339211362540721, 0.25161585555301164, -0.1893370891142599]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.339211362540721, 0.25161585555301164, -0.1893370891142599]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_599",
    "sat": "def sat(x: float, coeffs: List[float]=[1.5963188607125538, -0.20348893105019786, -0.030126654622223012]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5963188607125538, -0.20348893105019786, -0.030126654622223012]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.5963188607125538, -0.20348893105019786, -0.030126654622223012]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_600",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.4334473110211603, -0.002831978146853246, 0.0025363251251842383]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4334473110211603, -0.002831978146853246, 0.0025363251251842383]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.4334473110211603, -0.002831978146853246, 0.0025363251251842383]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_601",
    "sat": "def sat(x: float, coeffs: List[float]=[7.692768889286121, -0.8525411291600302, 0.020201291832165832]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.692768889286121, -0.8525411291600302, 0.020201291832165832]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[7.692768889286121, -0.8525411291600302, 0.020201291832165832]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_602",
    "sat": "def sat(x: float, coeffs: List[float]=[0.04585952724200645, 0.2215396150463682, 0.03165378650739487]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04585952724200645, 0.2215396150463682, 0.03165378650739487]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.04585952724200645, 0.2215396150463682, 0.03165378650739487]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_603",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.9012504877796579, 3.3762787679697137, 0.07313104423368627]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9012504877796579, 3.3762787679697137, 0.07313104423368627]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.9012504877796579, 3.3762787679697137, 0.07313104423368627]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_604",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4995668101303745, 3.802158657397172, 247.31952368770655]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4995668101303745, 3.802158657397172, 247.31952368770655]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.4995668101303745, 3.802158657397172, 247.31952368770655]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_605",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.12349488006498761, 0.061326448472551386, 0.6166452468085812]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.12349488006498761, 0.061326448472551386, 0.6166452468085812]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.12349488006498761, 0.061326448472551386, 0.6166452468085812]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_606",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.20258430494245086, 0.18385854068087962, 0.1297911459736853]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.20258430494245086, 0.18385854068087962, 0.1297911459736853]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.20258430494245086, 0.18385854068087962, 0.1297911459736853]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_607",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5055401225107367, 0.17585136330969817, 0.013611344873410453]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5055401225107367, 0.17585136330969817, 0.013611344873410453]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5055401225107367, 0.17585136330969817, 0.013611344873410453]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_608",
    "sat": "def sat(x: float, coeffs: List[float]=[0.10279028678301194, 1.280178313771116, -55.082871031865885]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10279028678301194, 1.280178313771116, -55.082871031865885]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.10279028678301194, 1.280178313771116, -55.082871031865885]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_609",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.22433397956215426, 0.1760984205583099, 19.20386139824813]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.22433397956215426, 0.1760984205583099, 19.20386139824813]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.22433397956215426, 0.1760984205583099, 19.20386139824813]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_610",
    "sat": "def sat(x: float, coeffs: List[float]=[-13.30950925761008, 0.44024330927805577, 287.7111841565447]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.30950925761008, 0.44024330927805577, 287.7111841565447]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-13.30950925761008, 0.44024330927805577, 287.7111841565447]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_611",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7406295403085077, -2.6168419930857074, -0.572404509677377]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7406295403085077, -2.6168419930857074, -0.572404509677377]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.7406295403085077, -2.6168419930857074, -0.572404509677377]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_612",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.43909529588999047, -0.22822291757571467, 18.6721548858041]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.43909529588999047, -0.22822291757571467, 18.6721548858041]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.43909529588999047, -0.22822291757571467, 18.6721548858041]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_613",
    "sat": "def sat(x: float, coeffs: List[float]=[0.057140182557706774, -0.13017668370312796, -938.9544560185075]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.057140182557706774, -0.13017668370312796, -938.9544560185075]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.057140182557706774, -0.13017668370312796, -938.9544560185075]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_614",
    "sat": "def sat(x: float, coeffs: List[float]=[2.6034381554717796, 119.48196267703759, -308.68412173465407]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.6034381554717796, 119.48196267703759, -308.68412173465407]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.6034381554717796, 119.48196267703759, -308.68412173465407]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_615",
    "sat": "def sat(x: float, coeffs: List[float]=[-45.88635615151669, -0.24201199585443475, 0.040304691534667224]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-45.88635615151669, -0.24201199585443475, 0.040304691534667224]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-45.88635615151669, -0.24201199585443475, 0.040304691534667224]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_616",
    "sat": "def sat(x: float, coeffs: List[float]=[9.116126850855998, 0.081870552657902, -5.035215591157974]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.116126850855998, 0.081870552657902, -5.035215591157974]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[9.116126850855998, 0.081870552657902, -5.035215591157974]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_617",
    "sat": "def sat(x: float, coeffs: List[float]=[0.45360571673061534, 0.36381838054137167, -240772.34789346938]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.45360571673061534, 0.36381838054137167, -240772.34789346938]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.45360571673061534, 0.36381838054137167, -240772.34789346938]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_618",
    "sat": "def sat(x: float, coeffs: List[float]=[3.3045137687760207, 2.1153915753676373, 0.023158025814990896]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.3045137687760207, 2.1153915753676373, 0.023158025814990896]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.3045137687760207, 2.1153915753676373, 0.023158025814990896]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_619",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5486047506150795, -0.23376095366731367, -0.5611736488879391]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5486047506150795, -0.23376095366731367, -0.5611736488879391]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5486047506150795, -0.23376095366731367, -0.5611736488879391]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_620",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.022999251475449123, 0.08957022013933558, -0.08703952599014896]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.022999251475449123, 0.08957022013933558, -0.08703952599014896]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.022999251475449123, 0.08957022013933558, -0.08703952599014896]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_621",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4062341628698607, 18.059943586871707, 9.138232911369728]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4062341628698607, 18.059943586871707, 9.138232911369728]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4062341628698607, 18.059943586871707, 9.138232911369728]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_622",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.125101194327126, -5.143193883676329, -1.5148824838806372]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.125101194327126, -5.143193883676329, -1.5148824838806372]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.125101194327126, -5.143193883676329, -1.5148824838806372]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_623",
    "sat": "def sat(x: float, coeffs: List[float]=[2.919954853341574, -0.007539417572915763, -2.1659190552144874]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.919954853341574, -0.007539417572915763, -2.1659190552144874]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.919954853341574, -0.007539417572915763, -2.1659190552144874]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_624",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.09394506926644312, -0.057211675692920405, -0.001363047869874962]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09394506926644312, -0.057211675692920405, -0.001363047869874962]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.09394506926644312, -0.057211675692920405, -0.001363047869874962]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_625",
    "sat": "def sat(x: float, coeffs: List[float]=[6.564014454409738, 0.9433964471133924, -525.6614436308635]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.564014454409738, 0.9433964471133924, -525.6614436308635]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.564014454409738, 0.9433964471133924, -525.6614436308635]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_626",
    "sat": "def sat(x: float, coeffs: List[float]=[33.4817640941715, 0.3821355178737476, -0.6834980093826424]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[33.4817640941715, 0.3821355178737476, -0.6834980093826424]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[33.4817640941715, 0.3821355178737476, -0.6834980093826424]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_627",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.08177063467713956, -11.24329837515937, -7.270333631621585]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08177063467713956, -11.24329837515937, -7.270333631621585]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.08177063467713956, -11.24329837515937, -7.270333631621585]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_628",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5542973775907338, 1.1542549270145592, -0.484569194276552]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5542973775907338, 1.1542549270145592, -0.484569194276552]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5542973775907338, 1.1542549270145592, -0.484569194276552]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_629",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4535269470591096, -1.3133076221208497, 39.24822341201269]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4535269470591096, -1.3133076221208497, 39.24822341201269]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.4535269470591096, -1.3133076221208497, 39.24822341201269]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_630",
    "sat": "def sat(x: float, coeffs: List[float]=[-16.058280689313676, 0.45206342180392384, 0.8549990689938872]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.058280689313676, 0.45206342180392384, 0.8549990689938872]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-16.058280689313676, 0.45206342180392384, 0.8549990689938872]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_631",
    "sat": "def sat(x: float, coeffs: List[float]=[1.9070897611435285, -1.828952102350834, -24.965625584715326]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9070897611435285, -1.828952102350834, -24.965625584715326]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.9070897611435285, -1.828952102350834, -24.965625584715326]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_632",
    "sat": "def sat(x: float, coeffs: List[float]=[2.7947946361622726, 0.802626187021502, -15.829147311443311]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.7947946361622726, 0.802626187021502, -15.829147311443311]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.7947946361622726, 0.802626187021502, -15.829147311443311]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_633",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6565047895849122, 0.45652415702520965, 0.7561101368655272]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6565047895849122, 0.45652415702520965, 0.7561101368655272]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6565047895849122, 0.45652415702520965, 0.7561101368655272]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_634",
    "sat": "def sat(x: float, coeffs: List[float]=[-12.730028851937512, 24.082980274393464, -1.3766259686694675]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.730028851937512, 24.082980274393464, -1.3766259686694675]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-12.730028851937512, 24.082980274393464, -1.3766259686694675]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_635",
    "sat": "def sat(x: float, coeffs: List[float]=[0.46211651788967717, 0.017019599967271093, -37.828616549597264]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.46211651788967717, 0.017019599967271093, -37.828616549597264]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.46211651788967717, 0.017019599967271093, -37.828616549597264]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_636",
    "sat": "def sat(x: float, coeffs: List[float]=[7.11487460998415, 128.9442901586598, -14445.404118842554]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.11487460998415, 128.9442901586598, -14445.404118842554]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[7.11487460998415, 128.9442901586598, -14445.404118842554]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_637",
    "sat": "def sat(x: float, coeffs: List[float]=[0.474627144633536, 0.35310540988441225, -814.9715353682226]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.474627144633536, 0.35310540988441225, -814.9715353682226]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.474627144633536, 0.35310540988441225, -814.9715353682226]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_638",
    "sat": "def sat(x: float, coeffs: List[float]=[6.486948080868268, -0.11859347689303701, -1.4489654034929311]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.486948080868268, -0.11859347689303701, -1.4489654034929311]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.486948080868268, -0.11859347689303701, -1.4489654034929311]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_639",
    "sat": "def sat(x: float, coeffs: List[float]=[0.04565014794524128, 0.8694872140605625, -18.04519013865243]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04565014794524128, 0.8694872140605625, -18.04519013865243]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.04565014794524128, 0.8694872140605625, -18.04519013865243]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_640",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.7003229612867847, -0.6316006042178758, 2.6598538697341425]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.7003229612867847, -0.6316006042178758, 2.6598538697341425]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.7003229612867847, -0.6316006042178758, 2.6598538697341425]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_641",
    "sat": "def sat(x: float, coeffs: List[float]=[0.25191594754696395, 1.1513322271946256, -0.649877137316109]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.25191594754696395, 1.1513322271946256, -0.649877137316109]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.25191594754696395, 1.1513322271946256, -0.649877137316109]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_642",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.47032881436137214, 2.258229809026522, -0.12489442738877206]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.47032881436137214, 2.258229809026522, -0.12489442738877206]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.47032881436137214, 2.258229809026522, -0.12489442738877206]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_643",
    "sat": "def sat(x: float, coeffs: List[float]=[0.13571919417003264, -0.8863611700821915, -4.513433582513649]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.13571919417003264, -0.8863611700821915, -4.513433582513649]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.13571919417003264, -0.8863611700821915, -4.513433582513649]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_644",
    "sat": "def sat(x: float, coeffs: List[float]=[5.973062896324613, 0.0490030635473259, -132.79977514434285]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.973062896324613, 0.0490030635473259, -132.79977514434285]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.973062896324613, 0.0490030635473259, -132.79977514434285]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_645",
    "sat": "def sat(x: float, coeffs: List[float]=[3.9203455384264383, -41.692704858626676, -1.4083065537503592]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.9203455384264383, -41.692704858626676, -1.4083065537503592]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.9203455384264383, -41.692704858626676, -1.4083065537503592]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_646",
    "sat": "def sat(x: float, coeffs: List[float]=[0.012624332907806032, -0.6094885615353981, 0.10224325242962876]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.012624332907806032, -0.6094885615353981, 0.10224325242962876]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.012624332907806032, -0.6094885615353981, 0.10224325242962876]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_647",
    "sat": "def sat(x: float, coeffs: List[float]=[217.81416725644092, 4.188917161081922, -32.70571656114905]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[217.81416725644092, 4.188917161081922, -32.70571656114905]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[217.81416725644092, 4.188917161081922, -32.70571656114905]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_648",
    "sat": "def sat(x: float, coeffs: List[float]=[1.8666415787779194, -0.0013530366182734621, -781.1384709531554]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8666415787779194, -0.0013530366182734621, -781.1384709531554]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.8666415787779194, -0.0013530366182734621, -781.1384709531554]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_649",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2671626284276684, -0.3556210990747329, 0.003457166949471838]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2671626284276684, -0.3556210990747329, 0.003457166949471838]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2671626284276684, -0.3556210990747329, 0.003457166949471838]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_650",
    "sat": "def sat(x: float, coeffs: List[float]=[-43.45448597637148, 0.1230490628493212, 32.456114391821416]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-43.45448597637148, 0.1230490628493212, 32.456114391821416]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-43.45448597637148, 0.1230490628493212, 32.456114391821416]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_651",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5327556736496432, -0.047606729902740584, 1.8467674863286445]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5327556736496432, -0.047606729902740584, 1.8467674863286445]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5327556736496432, -0.047606729902740584, 1.8467674863286445]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_652",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06081218339455252, -4.339940624480355, -4877.963207527978]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06081218339455252, -4.339940624480355, -4877.963207527978]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.06081218339455252, -4.339940624480355, -4877.963207527978]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_653",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.102897148835466, -0.16636719346731862, 32.715504008954476]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.102897148835466, -0.16636719346731862, 32.715504008954476]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.102897148835466, -0.16636719346731862, 32.715504008954476]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_654",
    "sat": "def sat(x: float, coeffs: List[float]=[-52.41412731833925, -1.4554443538579223, 654.9345883527219]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-52.41412731833925, -1.4554443538579223, 654.9345883527219]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-52.41412731833925, -1.4554443538579223, 654.9345883527219]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_655",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.04961811970032204, 32.67664008609052, -1071.333661118244]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04961811970032204, 32.67664008609052, -1071.333661118244]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.04961811970032204, 32.67664008609052, -1071.333661118244]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_656",
    "sat": "def sat(x: float, coeffs: List[float]=[0.22109676692124172, -0.05698192318203795, -0.21617065527598378]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22109676692124172, -0.05698192318203795, -0.21617065527598378]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.22109676692124172, -0.05698192318203795, -0.21617065527598378]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_657",
    "sat": "def sat(x: float, coeffs: List[float]=[0.009343905936441374, -31.048171157486582, 1.3942210572191998]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.009343905936441374, -31.048171157486582, 1.3942210572191998]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.009343905936441374, -31.048171157486582, 1.3942210572191998]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_658",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3382691564880835, 2.0224161439843855, 50.620841491389456]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3382691564880835, 2.0224161439843855, 50.620841491389456]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3382691564880835, 2.0224161439843855, 50.620841491389456]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_659",
    "sat": "def sat(x: float, coeffs: List[float]=[17.290084831977442, -0.7695842410100271, -14.609159161823033]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[17.290084831977442, -0.7695842410100271, -14.609159161823033]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[17.290084831977442, -0.7695842410100271, -14.609159161823033]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_660",
    "sat": "def sat(x: float, coeffs: List[float]=[0.04684128312732083, 29.887228341108838, -2.7301046756548772]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04684128312732083, 29.887228341108838, -2.7301046756548772]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.04684128312732083, 29.887228341108838, -2.7301046756548772]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_661",
    "sat": "def sat(x: float, coeffs: List[float]=[3.280423532628078, 4.158812067999711, -0.03371735143668599]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.280423532628078, 4.158812067999711, -0.03371735143668599]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.280423532628078, 4.158812067999711, -0.03371735143668599]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_662",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.318059428956508, 1.2401424010729551, 5.976563200337746]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.318059428956508, 1.2401424010729551, 5.976563200337746]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-6.318059428956508, 1.2401424010729551, 5.976563200337746]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_663",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2621257938558497, 0.1501592325949884, -168.9438120063412]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2621257938558497, 0.1501592325949884, -168.9438120063412]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.2621257938558497, 0.1501592325949884, -168.9438120063412]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_664",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.580714312602207, 9.658242369002354, -1.152408548428859]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.580714312602207, 9.658242369002354, -1.152408548428859]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-7.580714312602207, 9.658242369002354, -1.152408548428859]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_665",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6791565008375606, -15.500265531572538, 12.842886670819423]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6791565008375606, -15.500265531572538, 12.842886670819423]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6791565008375606, -15.500265531572538, 12.842886670819423]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_666",
    "sat": "def sat(x: float, coeffs: List[float]=[3.917417520715805, 0.07765294344116154, -628596.3400941096]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.917417520715805, 0.07765294344116154, -628596.3400941096]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.917417520715805, 0.07765294344116154, -628596.3400941096]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_667",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.951219515549409, -0.5399720044940012, -0.023428233804343175]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.951219515549409, -0.5399720044940012, -0.023428233804343175]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.951219515549409, -0.5399720044940012, -0.023428233804343175]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_668",
    "sat": "def sat(x: float, coeffs: List[float]=[8.65853480734834, 0.6693512763801875, -27.962362055128374]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.65853480734834, 0.6693512763801875, -27.962362055128374]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[8.65853480734834, 0.6693512763801875, -27.962362055128374]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_669",
    "sat": "def sat(x: float, coeffs: List[float]=[-13.666244735773455, -64.10180660745561, 279.962766395789]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.666244735773455, -64.10180660745561, 279.962766395789]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-13.666244735773455, -64.10180660745561, 279.962766395789]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_670",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5237587364374119, 7.374608963733674, -1.9100459064514106]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5237587364374119, 7.374608963733674, -1.9100459064514106]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5237587364374119, 7.374608963733674, -1.9100459064514106]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_671",
    "sat": "def sat(x: float, coeffs: List[float]=[-582.194015092544, -41.60575260122885, 939506.5783170565]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-582.194015092544, -41.60575260122885, 939506.5783170565]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-582.194015092544, -41.60575260122885, 939506.5783170565]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_672",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0714074270188126, 0.10850449384889194, 0.02007055071875287]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0714074270188126, 0.10850449384889194, 0.02007055071875287]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.0714074270188126, 0.10850449384889194, 0.02007055071875287]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_673",
    "sat": "def sat(x: float, coeffs: List[float]=[11.073321273848736, -0.44187657479121417, -2.2526789227512722]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.073321273848736, -0.44187657479121417, -2.2526789227512722]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[11.073321273848736, -0.44187657479121417, -2.2526789227512722]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_674",
    "sat": "def sat(x: float, coeffs: List[float]=[1.926925650375737, -1.4837485239468855, -3.5465342874535057]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.926925650375737, -1.4837485239468855, -3.5465342874535057]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.926925650375737, -1.4837485239468855, -3.5465342874535057]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_675",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1299035047293072, 30.960400203595583, 0.07998036707862335]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1299035047293072, 30.960400203595583, 0.07998036707862335]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1299035047293072, 30.960400203595583, 0.07998036707862335]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_676",
    "sat": "def sat(x: float, coeffs: List[float]=[-50.00696649678242, 0.012236999219518744, 0.010545622058015807]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-50.00696649678242, 0.012236999219518744, 0.010545622058015807]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-50.00696649678242, 0.012236999219518744, 0.010545622058015807]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_677",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.680529488384307, 0.4038645268722118, 0.6998988140222109]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.680529488384307, 0.4038645268722118, 0.6998988140222109]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.680529488384307, 0.4038645268722118, 0.6998988140222109]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_678",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.003966471581614, 0.04218866172456237, 0.08498097782224893]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.003966471581614, 0.04218866172456237, 0.08498097782224893]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.003966471581614, 0.04218866172456237, 0.08498097782224893]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_679",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8246595879583949, 0.440915538132386, 3.895544129349159]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8246595879583949, 0.440915538132386, 3.895544129349159]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8246595879583949, 0.440915538132386, 3.895544129349159]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_680",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.930747663898571, -14.327143771218884, 145.85166173555405]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.930747663898571, -14.327143771218884, 145.85166173555405]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-5.930747663898571, -14.327143771218884, 145.85166173555405]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_681",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.0912020007946395, 0.18662731832126145, 34.547443392813086]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0912020007946395, 0.18662731832126145, 34.547443392813086]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.0912020007946395, 0.18662731832126145, 34.547443392813086]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_682",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3437564452396516, -216.17251808951914, 3.197262423281782]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3437564452396516, -216.17251808951914, 3.197262423281782]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.3437564452396516, -216.17251808951914, 3.197262423281782]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_683",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.352375013163007, 18.22675478456626, -18.19415118015267]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.352375013163007, 18.22675478456626, -18.19415118015267]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.352375013163007, 18.22675478456626, -18.19415118015267]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_684",
    "sat": "def sat(x: float, coeffs: List[float]=[0.42720782130879115, 0.39381070959458286, -4.208912942950294]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.42720782130879115, 0.39381070959458286, -4.208912942950294]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.42720782130879115, 0.39381070959458286, -4.208912942950294]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_685",
    "sat": "def sat(x: float, coeffs: List[float]=[-63.27837989302042, 19.237956501359985, 4.795178968118336]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-63.27837989302042, 19.237956501359985, 4.795178968118336]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-63.27837989302042, 19.237956501359985, 4.795178968118336]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_686",
    "sat": "def sat(x: float, coeffs: List[float]=[-157.56370009050394, 0.03229550545117924, 579.354367024897]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-157.56370009050394, 0.03229550545117924, 579.354367024897]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-157.56370009050394, 0.03229550545117924, 579.354367024897]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_687",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2539064064380147, 0.2809790893770754, 0.07740368141780594]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2539064064380147, 0.2809790893770754, 0.07740368141780594]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2539064064380147, 0.2809790893770754, 0.07740368141780594]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_688",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.5549274688334678, -0.08774116665898408, 1.965108656474711]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.5549274688334678, -0.08774116665898408, 1.965108656474711]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.5549274688334678, -0.08774116665898408, 1.965108656474711]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_689",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.33320027129003965, 0.007790947558658094, 0.8677913277715711]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.33320027129003965, 0.007790947558658094, 0.8677913277715711]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.33320027129003965, 0.007790947558658094, 0.8677913277715711]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_690",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6865824735951618, -0.24387818358753818, 1.3317008494058318]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6865824735951618, -0.24387818358753818, 1.3317008494058318]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6865824735951618, -0.24387818358753818, 1.3317008494058318]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_691",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.4028665865253314, -0.930598551898274, 8.146339284574227]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.4028665865253314, -0.930598551898274, 8.146339284574227]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.4028665865253314, -0.930598551898274, 8.146339284574227]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_692",
    "sat": "def sat(x: float, coeffs: List[float]=[0.47361203906157145, 24.963294919974814, 59.58683061272183]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.47361203906157145, 24.963294919974814, 59.58683061272183]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.47361203906157145, 24.963294919974814, 59.58683061272183]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_693",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6188861080696532, 0.003105588917553822, 7.139001484741618]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6188861080696532, 0.003105588917553822, 7.139001484741618]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6188861080696532, 0.003105588917553822, 7.139001484741618]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_694",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4051198143490112, 0.010763483617277044, 182.61289718876017]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4051198143490112, 0.010763483617277044, 182.61289718876017]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.4051198143490112, 0.010763483617277044, 182.61289718876017]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_695",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7349851479532495, 2.7967902476147555, 0.2807427600531089]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7349851479532495, 2.7967902476147555, 0.2807427600531089]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7349851479532495, 2.7967902476147555, 0.2807427600531089]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_696",
    "sat": "def sat(x: float, coeffs: List[float]=[1.5293036586612938, 0.09376639484854365, -0.549648677565037]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5293036586612938, 0.09376639484854365, -0.549648677565037]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.5293036586612938, 0.09376639484854365, -0.549648677565037]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_697",
    "sat": "def sat(x: float, coeffs: List[float]=[-16.95594696193542, -0.22614866047372092, 0.67908450264059]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.95594696193542, -0.22614866047372092, 0.67908450264059]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-16.95594696193542, -0.22614866047372092, 0.67908450264059]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_698",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.12516509758601724, 0.2577869087739187, -0.016008213079756747]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.12516509758601724, 0.2577869087739187, -0.016008213079756747]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.12516509758601724, 0.2577869087739187, -0.016008213079756747]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_699",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6583833718558744, -1.024761801568378, 8139.344102785337]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6583833718558744, -1.024761801568378, 8139.344102785337]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6583833718558744, -1.024761801568378, 8139.344102785337]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_700",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.652750097775737, 2.006731446482614, 1.9552564634739942]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.652750097775737, 2.006731446482614, 1.9552564634739942]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.652750097775737, 2.006731446482614, 1.9552564634739942]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_701",
    "sat": "def sat(x: float, coeffs: List[float]=[1.5753497759624688, -0.33232917417839386, 0.017466314368776426]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5753497759624688, -0.33232917417839386, 0.017466314368776426]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.5753497759624688, -0.33232917417839386, 0.017466314368776426]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_702",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5900688391470849, -0.04021818259354326, 0.014665131166606617]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5900688391470849, -0.04021818259354326, 0.014665131166606617]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5900688391470849, -0.04021818259354326, 0.014665131166606617]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_703",
    "sat": "def sat(x: float, coeffs: List[float]=[37.195972338720544, 0.013674845557094232, -12.709737729666982]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[37.195972338720544, 0.013674845557094232, -12.709737729666982]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[37.195972338720544, 0.013674845557094232, -12.709737729666982]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_704",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.779816583637153, -0.035866470478616165, 8.709172368030036e-05]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.779816583637153, -0.035866470478616165, 8.709172368030036e-05]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-7.779816583637153, -0.035866470478616165, 8.709172368030036e-05]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_705",
    "sat": "def sat(x: float, coeffs: List[float]=[74.56824971855397, 1.0943649646642417, -0.008686872767010106]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[74.56824971855397, 1.0943649646642417, -0.008686872767010106]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[74.56824971855397, 1.0943649646642417, -0.008686872767010106]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_706",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.07948994812762315, 4.072566179355315, 1.0087492760758883]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07948994812762315, 4.072566179355315, 1.0087492760758883]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.07948994812762315, 4.072566179355315, 1.0087492760758883]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_707",
    "sat": "def sat(x: float, coeffs: List[float]=[13.982918911181223, -0.12892731494268025, -124.12851327917973]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.982918911181223, -0.12892731494268025, -124.12851327917973]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[13.982918911181223, -0.12892731494268025, -124.12851327917973]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_708",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.18177082150407528, -0.03202593555576468, 0.14566356702471536]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18177082150407528, -0.03202593555576468, 0.14566356702471536]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.18177082150407528, -0.03202593555576468, 0.14566356702471536]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_709",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.4466203264758513, -0.15666641825420125, 52.70396316507948]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4466203264758513, -0.15666641825420125, 52.70396316507948]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.4466203264758513, -0.15666641825420125, 52.70396316507948]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_710",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4274968880167365, -4.417149776419312, -7.998149244723612]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4274968880167365, -4.417149776419312, -7.998149244723612]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4274968880167365, -4.417149776419312, -7.998149244723612]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_711",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.603951768685936, -22.9218969173279, 426.509696271637]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.603951768685936, -22.9218969173279, 426.509696271637]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-7.603951768685936, -22.9218969173279, 426.509696271637]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_712",
    "sat": "def sat(x: float, coeffs: List[float]=[-70.65948914873819, -2.94966066949932, 40.63863179110258]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-70.65948914873819, -2.94966066949932, 40.63863179110258]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-70.65948914873819, -2.94966066949932, 40.63863179110258]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_713",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.0475961431566323, 1.0275214319393389, 2487.0341625107894]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0475961431566323, 1.0275214319393389, 2487.0341625107894]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.0475961431566323, 1.0275214319393389, 2487.0341625107894]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_714",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.270679630360347, -12.449650014839854, 7169.024527793838]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.270679630360347, -12.449650014839854, 7169.024527793838]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.270679630360347, -12.449650014839854, 7169.024527793838]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_715",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4374768902714594, -0.7597537722676634, 6133.856886683539]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4374768902714594, -0.7597537722676634, 6133.856886683539]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.4374768902714594, -0.7597537722676634, 6133.856886683539]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_716",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.490332828861767, 48.593938059004806, 13.67467392855925]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.490332828861767, 48.593938059004806, 13.67467392855925]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-5.490332828861767, 48.593938059004806, 13.67467392855925]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_717",
    "sat": "def sat(x: float, coeffs: List[float]=[1.653156163660589, -0.6208212182188085, 0.04653389809393686]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.653156163660589, -0.6208212182188085, 0.04653389809393686]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.653156163660589, -0.6208212182188085, 0.04653389809393686]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_718",
    "sat": "def sat(x: float, coeffs: List[float]=[-43.20714398021528, 0.3087716156455893, 418.0429805068574]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-43.20714398021528, 0.3087716156455893, 418.0429805068574]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-43.20714398021528, 0.3087716156455893, 418.0429805068574]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_719",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.897165516733524, -0.5077056421485994, 0.11396749833233527]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.897165516733524, -0.5077056421485994, 0.11396749833233527]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.897165516733524, -0.5077056421485994, 0.11396749833233527]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_720",
    "sat": "def sat(x: float, coeffs: List[float]=[0.22078212338325365, -13.220479525087967, 5.4874325565500195]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22078212338325365, -13.220479525087967, 5.4874325565500195]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.22078212338325365, -13.220479525087967, 5.4874325565500195]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_721",
    "sat": "def sat(x: float, coeffs: List[float]=[0.03897065580272533, 0.5202760732662383, -3.0051530870725744]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03897065580272533, 0.5202760732662383, -3.0051530870725744]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.03897065580272533, 0.5202760732662383, -3.0051530870725744]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_722",
    "sat": "def sat(x: float, coeffs: List[float]=[4.543030328115578, 0.12304324403144677, -0.08011127542354195]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.543030328115578, 0.12304324403144677, -0.08011127542354195]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[4.543030328115578, 0.12304324403144677, -0.08011127542354195]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_723",
    "sat": "def sat(x: float, coeffs: List[float]=[1.4527606396918449, 1.1243578439381494, -14.337870813393804]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4527606396918449, 1.1243578439381494, -14.337870813393804]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.4527606396918449, 1.1243578439381494, -14.337870813393804]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_724",
    "sat": "def sat(x: float, coeffs: List[float]=[0.09083600366028695, -1.1986773316078618, -0.5785338546378381]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09083600366028695, -1.1986773316078618, -0.5785338546378381]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.09083600366028695, -1.1986773316078618, -0.5785338546378381]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_725",
    "sat": "def sat(x: float, coeffs: List[float]=[2.084059213452294, 1.3035367189147273, 0.17060880317131755]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.084059213452294, 1.3035367189147273, 0.17060880317131755]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.084059213452294, 1.3035367189147273, 0.17060880317131755]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_726",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.93972899031102, 158.54952847060972, 52805.82434379042]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.93972899031102, 158.54952847060972, 52805.82434379042]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.93972899031102, 158.54952847060972, 52805.82434379042]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_727",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8316118876649399, -0.06698721422337413, 2.2958221617901837]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8316118876649399, -0.06698721422337413, 2.2958221617901837]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8316118876649399, -0.06698721422337413, 2.2958221617901837]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_728",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0517452472267224, 0.6753265680456578, -3.6976549404182775]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0517452472267224, 0.6753265680456578, -3.6976549404182775]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.0517452472267224, 0.6753265680456578, -3.6976549404182775]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_729",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.08121349467739436, -5.5066100671860525, 1.5362830882466734]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08121349467739436, -5.5066100671860525, 1.5362830882466734]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.08121349467739436, -5.5066100671860525, 1.5362830882466734]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_730",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06061200205631878, 2.4567024633567627, -13060.273882188596]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06061200205631878, 2.4567024633567627, -13060.273882188596]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.06061200205631878, 2.4567024633567627, -13060.273882188596]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_731",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4163768726789627, -0.5494676148235328, -0.044794963538493764]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4163768726789627, -0.5494676148235328, -0.044794963538493764]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.4163768726789627, -0.5494676148235328, -0.044794963538493764]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_732",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1397080915381869, -1.5995815676915976, 0.06969985315972824]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1397080915381869, -1.5995815676915976, 0.06969985315972824]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1397080915381869, -1.5995815676915976, 0.06969985315972824]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_733",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7768777644773401, 0.2457169595842493, -0.07651225990170542]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7768777644773401, 0.2457169595842493, -0.07651225990170542]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.7768777644773401, 0.2457169595842493, -0.07651225990170542]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_734",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.19923400351973242, -0.09705148564145816, 0.024674826736111658]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19923400351973242, -0.09705148564145816, 0.024674826736111658]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.19923400351973242, -0.09705148564145816, 0.024674826736111658]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_735",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.07184778312716882, 0.0491889875125755, 0.00624062202032632]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07184778312716882, 0.0491889875125755, 0.00624062202032632]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.07184778312716882, 0.0491889875125755, 0.00624062202032632]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_736",
    "sat": "def sat(x: float, coeffs: List[float]=[0.010252359908155873, -0.05283864759625997, -1282.8853871772264]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.010252359908155873, -0.05283864759625997, -1282.8853871772264]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.010252359908155873, -0.05283864759625997, -1282.8853871772264]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_737",
    "sat": "def sat(x: float, coeffs: List[float]=[0.17446886664285843, 1.3696119385049554, -1.8889265230775412]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17446886664285843, 1.3696119385049554, -1.8889265230775412]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.17446886664285843, 1.3696119385049554, -1.8889265230775412]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_738",
    "sat": "def sat(x: float, coeffs: List[float]=[5.3013894442967535, -0.5048335886790793, -6.442114534131272]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.3013894442967535, -0.5048335886790793, -6.442114534131272]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.3013894442967535, -0.5048335886790793, -6.442114534131272]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_739",
    "sat": "def sat(x: float, coeffs: List[float]=[1.8584117681456942, 17.539573170906166, -145.0290782154682]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8584117681456942, 17.539573170906166, -145.0290782154682]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.8584117681456942, 17.539573170906166, -145.0290782154682]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_740",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1703723813468072, -0.4386435531140602, 17326.494066566367]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1703723813468072, -0.4386435531140602, 17326.494066566367]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.1703723813468072, -0.4386435531140602, 17326.494066566367]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_741",
    "sat": "def sat(x: float, coeffs: List[float]=[0.21425606015609958, 0.04884955734989246, -0.5972749035585261]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21425606015609958, 0.04884955734989246, -0.5972749035585261]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.21425606015609958, 0.04884955734989246, -0.5972749035585261]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_742",
    "sat": "def sat(x: float, coeffs: List[float]=[-71.33516723556296, 26.49918074479768, 0.5908172165930755]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-71.33516723556296, 26.49918074479768, 0.5908172165930755]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-71.33516723556296, 26.49918074479768, 0.5908172165930755]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_743",
    "sat": "def sat(x: float, coeffs: List[float]=[1.3642604608321591, 2.879178290053676, 1.333909166048321]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3642604608321591, 2.879178290053676, 1.333909166048321]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.3642604608321591, 2.879178290053676, 1.333909166048321]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_744",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4882521502471439, -0.3160605683886188, -2.3467715764731705]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4882521502471439, -0.3160605683886188, -2.3467715764731705]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4882521502471439, -0.3160605683886188, -2.3467715764731705]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_745",
    "sat": "def sat(x: float, coeffs: List[float]=[2.4680727266606977, -0.6688232166952179, -0.09210473611551129]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.4680727266606977, -0.6688232166952179, -0.09210473611551129]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.4680727266606977, -0.6688232166952179, -0.09210473611551129]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_746",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1324265601611196, -40.958397167908736, -18.577457337289502]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1324265601611196, -40.958397167908736, -18.577457337289502]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.1324265601611196, -40.958397167908736, -18.577457337289502]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_747",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.876677114927214, -0.36625457423113267, 0.25541729887890724]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.876677114927214, -0.36625457423113267, 0.25541729887890724]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.876677114927214, -0.36625457423113267, 0.25541729887890724]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_748",
    "sat": "def sat(x: float, coeffs: List[float]=[0.35818982818037187, 1.0632522533799935, -288.7715135502145]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.35818982818037187, 1.0632522533799935, -288.7715135502145]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.35818982818037187, 1.0632522533799935, -288.7715135502145]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_749",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.2013245322934694, -0.49885735188825375, 359773.21307151724]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.2013245322934694, -0.49885735188825375, 359773.21307151724]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.2013245322934694, -0.49885735188825375, 359773.21307151724]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_750",
    "sat": "def sat(x: float, coeffs: List[float]=[-965.815074880053, -17.95651982318261, 5630.329427895862]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-965.815074880053, -17.95651982318261, 5630.329427895862]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-965.815074880053, -17.95651982318261, 5630.329427895862]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_751",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8966408185499479, 201.06929657471554, 65.30982328435071]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8966408185499479, 201.06929657471554, 65.30982328435071]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8966408185499479, 201.06929657471554, 65.30982328435071]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_752",
    "sat": "def sat(x: float, coeffs: List[float]=[3.5102208724792194, 1.7699857953678813, -8.848848607164234]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.5102208724792194, 1.7699857953678813, -8.848848607164234]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.5102208724792194, 1.7699857953678813, -8.848848607164234]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_753",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6334858475743269, 0.07338717440921678, -1.3353002260356615]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6334858475743269, 0.07338717440921678, -1.3353002260356615]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6334858475743269, 0.07338717440921678, -1.3353002260356615]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_754",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.62701174788505, -52.51899609698111, -77.6053304425644]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.62701174788505, -52.51899609698111, -77.6053304425644]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.62701174788505, -52.51899609698111, -77.6053304425644]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_755",
    "sat": "def sat(x: float, coeffs: List[float]=[269.3423768272572, -0.18512394584101002, -6.204334063427999]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[269.3423768272572, -0.18512394584101002, -6.204334063427999]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[269.3423768272572, -0.18512394584101002, -6.204334063427999]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_756",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.10886383217689126, -0.32493780615888995, 0.17727368661764864]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10886383217689126, -0.32493780615888995, 0.17727368661764864]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.10886383217689126, -0.32493780615888995, 0.17727368661764864]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_757",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08836918866026548, 0.19014937345496685, -2.2059667010527946]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08836918866026548, 0.19014937345496685, -2.2059667010527946]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.08836918866026548, 0.19014937345496685, -2.2059667010527946]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_758",
    "sat": "def sat(x: float, coeffs: List[float]=[5.679665649923553, -0.159103167312678, -0.24295451608731186]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.679665649923553, -0.159103167312678, -0.24295451608731186]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.679665649923553, -0.159103167312678, -0.24295451608731186]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_759",
    "sat": "def sat(x: float, coeffs: List[float]=[22.8609747553636, -0.021332482347083664, -5.157291266600554]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[22.8609747553636, -0.021332482347083664, -5.157291266600554]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[22.8609747553636, -0.021332482347083664, -5.157291266600554]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_760",
    "sat": "def sat(x: float, coeffs: List[float]=[-15.076824071974967, -0.10378664912721051, 20.467532185644487]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.076824071974967, -0.10378664912721051, 20.467532185644487]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-15.076824071974967, -0.10378664912721051, 20.467532185644487]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_761",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2289803314981953, 2.5749447868109603, -0.1758566203663204]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2289803314981953, 2.5749447868109603, -0.1758566203663204]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2289803314981953, 2.5749447868109603, -0.1758566203663204]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_762",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2809993879112375, 0.06992941536891946, 1.485089064758038]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2809993879112375, 0.06992941536891946, 1.485089064758038]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2809993879112375, 0.06992941536891946, 1.485089064758038]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_763",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.9393330489992047, 0.9325535097041718, 29013.894751500433]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.9393330489992047, 0.9325535097041718, 29013.894751500433]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.9393330489992047, 0.9325535097041718, 29013.894751500433]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_764",
    "sat": "def sat(x: float, coeffs: List[float]=[52.7073415606101, -1.2062707378707858, -102.84661891276863]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[52.7073415606101, -1.2062707378707858, -102.84661891276863]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[52.7073415606101, -1.2062707378707858, -102.84661891276863]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_765",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.01726736788786713, 0.9314316374540416, 0.7636801186592429]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.01726736788786713, 0.9314316374540416, 0.7636801186592429]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.01726736788786713, 0.9314316374540416, 0.7636801186592429]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_766",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1891015612431755, -17.14415710001714, -0.364968515996826]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1891015612431755, -17.14415710001714, -0.364968515996826]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.1891015612431755, -17.14415710001714, -0.364968515996826]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_767",
    "sat": "def sat(x: float, coeffs: List[float]=[0.48126205469696687, 2.5066550362887585, -10695.16864689397]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.48126205469696687, 2.5066550362887585, -10695.16864689397]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.48126205469696687, 2.5066550362887585, -10695.16864689397]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_768",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4348098401101878, 5.984097243279261, -20.19578217858448]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4348098401101878, 5.984097243279261, -20.19578217858448]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.4348098401101878, 5.984097243279261, -20.19578217858448]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_769",
    "sat": "def sat(x: float, coeffs: List[float]=[1.5160284884271176, 0.04806170775289509, -0.27678143849038495]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5160284884271176, 0.04806170775289509, -0.27678143849038495]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.5160284884271176, 0.04806170775289509, -0.27678143849038495]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_770",
    "sat": "def sat(x: float, coeffs: List[float]=[5.184301406060949, -0.9868646856979121, -0.49572807412025977]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.184301406060949, -0.9868646856979121, -0.49572807412025977]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.184301406060949, -0.9868646856979121, -0.49572807412025977]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_771",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7979843728546961, 2.985437296843681, -2.155125231327487]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7979843728546961, 2.985437296843681, -2.155125231327487]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7979843728546961, 2.985437296843681, -2.155125231327487]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_772",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.8127732252240976, -0.4606576870858244, 21.036317958668032]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.8127732252240976, -0.4606576870858244, 21.036317958668032]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.8127732252240976, -0.4606576870858244, 21.036317958668032]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_773",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4417047858235949, 0.8561663991526576, -2823.1924716849044]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4417047858235949, 0.8561663991526576, -2823.1924716849044]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4417047858235949, 0.8561663991526576, -2823.1924716849044]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_774",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6119872858381106, -0.32986874766184565, 0.03112475420374397]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6119872858381106, -0.32986874766184565, 0.03112475420374397]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6119872858381106, -0.32986874766184565, 0.03112475420374397]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_775",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.058417929988493565, 285.39982260880623, -14.295833897920424]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.058417929988493565, 285.39982260880623, -14.295833897920424]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.058417929988493565, 285.39982260880623, -14.295833897920424]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_776",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.8614343382321046, -0.12117784678563563, 0.5834124075723748]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8614343382321046, -0.12117784678563563, 0.5834124075723748]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.8614343382321046, -0.12117784678563563, 0.5834124075723748]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_777",
    "sat": "def sat(x: float, coeffs: List[float]=[-20.019969417294703, 0.38083016338996306, 44051.39096227032]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-20.019969417294703, 0.38083016338996306, 44051.39096227032]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-20.019969417294703, 0.38083016338996306, 44051.39096227032]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_778",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9325851198587358, -0.34840683367749303, -0.3031740561318679]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9325851198587358, -0.34840683367749303, -0.3031740561318679]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.9325851198587358, -0.34840683367749303, -0.3031740561318679]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_779",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.19908659297956963, 290.46378878724175, 297.4826082836296]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19908659297956963, 290.46378878724175, 297.4826082836296]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.19908659297956963, 290.46378878724175, 297.4826082836296]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_780",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.152039971230061, 0.459024705912254, 0.8330712243756558]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.152039971230061, 0.459024705912254, 0.8330712243756558]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.152039971230061, 0.459024705912254, 0.8330712243756558]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_781",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5543847999104945, 11.220025953832655, 1.2058721094670448]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5543847999104945, 11.220025953832655, 1.2058721094670448]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5543847999104945, 11.220025953832655, 1.2058721094670448]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_782",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.094664230494747, 0.7889225704837427, -0.0600801052807855]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.094664230494747, 0.7889225704837427, -0.0600801052807855]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.094664230494747, 0.7889225704837427, -0.0600801052807855]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_783",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7542198982697442, -4.113846946175582, -18.57900774501349]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7542198982697442, -4.113846946175582, -18.57900774501349]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.7542198982697442, -4.113846946175582, -18.57900774501349]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_784",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.0493586975433336, 0.04717566395661602, 0.4783728969633017]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0493586975433336, 0.04717566395661602, 0.4783728969633017]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.0493586975433336, 0.04717566395661602, 0.4783728969633017]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_785",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2913376665529435, 20.140702023912016, 19.69109743865712]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2913376665529435, 20.140702023912016, 19.69109743865712]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2913376665529435, 20.140702023912016, 19.69109743865712]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_786",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.19183988875404348, -7.118999951628834, -7.963047242552735]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19183988875404348, -7.118999951628834, -7.963047242552735]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.19183988875404348, -7.118999951628834, -7.963047242552735]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_787",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7549337426646475, 0.31345234810634937, 130.5932050872435]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7549337426646475, 0.31345234810634937, 130.5932050872435]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7549337426646475, 0.31345234810634937, 130.5932050872435]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_788",
    "sat": "def sat(x: float, coeffs: List[float]=[-45.796527692275625, -0.1875929564244779, 6.29645300226754]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-45.796527692275625, -0.1875929564244779, 6.29645300226754]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-45.796527692275625, -0.1875929564244779, 6.29645300226754]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_789",
    "sat": "def sat(x: float, coeffs: List[float]=[37.87477956901949, 21.2527673560829, -3211.8520887511736]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[37.87477956901949, 21.2527673560829, -3211.8520887511736]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[37.87477956901949, 21.2527673560829, -3211.8520887511736]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_790",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0162797107339893, 0.8318255790399468, 1.5013203219639089]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0162797107339893, 0.8318255790399468, 1.5013203219639089]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.0162797107339893, 0.8318255790399468, 1.5013203219639089]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_791",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.46121672258831065, 0.00017081141939834232, 3.7054071139491205]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.46121672258831065, 0.00017081141939834232, 3.7054071139491205]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.46121672258831065, 0.00017081141939834232, 3.7054071139491205]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_792",
    "sat": "def sat(x: float, coeffs: List[float]=[99.11408964280008, 0.3715297752431672, -47.82680580947992]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[99.11408964280008, 0.3715297752431672, -47.82680580947992]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[99.11408964280008, 0.3715297752431672, -47.82680580947992]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_793",
    "sat": "def sat(x: float, coeffs: List[float]=[109.81720405376251, -0.045307645207639156, -2617.65031569017]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[109.81720405376251, -0.045307645207639156, -2617.65031569017]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[109.81720405376251, -0.045307645207639156, -2617.65031569017]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_794",
    "sat": "def sat(x: float, coeffs: List[float]=[0.11534963314789211, -3.9588057200032227, -0.24960592453766578]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11534963314789211, -3.9588057200032227, -0.24960592453766578]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.11534963314789211, -3.9588057200032227, -0.24960592453766578]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_795",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.0311666917960896, 10.474058141257274, 683.0319136346908]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.0311666917960896, 10.474058141257274, 683.0319136346908]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.0311666917960896, 10.474058141257274, 683.0319136346908]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_796",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5697913984557639, -149.30211366844088, -978.9988993291865]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5697913984557639, -149.30211366844088, -978.9988993291865]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5697913984557639, -149.30211366844088, -978.9988993291865]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_797",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7080257038477766, 0.20444301453005043, 0.39418017347237205]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7080257038477766, 0.20444301453005043, 0.39418017347237205]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7080257038477766, 0.20444301453005043, 0.39418017347237205]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_798",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4464269832230678, -0.3119973145308373, -0.09377792354601375]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4464269832230678, -0.3119973145308373, -0.09377792354601375]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4464269832230678, -0.3119973145308373, -0.09377792354601375]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_799",
    "sat": "def sat(x: float, coeffs: List[float]=[0.13488935068279972, -2.1152347364830075, 0.7757685369843681]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.13488935068279972, -2.1152347364830075, 0.7757685369843681]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.13488935068279972, -2.1152347364830075, 0.7757685369843681]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_800",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.119272316299697, -0.07331284147909838, 0.08613015548946643]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.119272316299697, -0.07331284147909838, 0.08613015548946643]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-6.119272316299697, -0.07331284147909838, 0.08613015548946643]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_801",
    "sat": "def sat(x: float, coeffs: List[float]=[0.00937599786886841, -0.03446526314740065, -0.047964598399482555]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.00937599786886841, -0.03446526314740065, -0.047964598399482555]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.00937599786886841, -0.03446526314740065, -0.047964598399482555]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_802",
    "sat": "def sat(x: float, coeffs: List[float]=[5.364646444564219, 1.4131183753348724, -18.50784323932919]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.364646444564219, 1.4131183753348724, -18.50784323932919]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.364646444564219, 1.4131183753348724, -18.50784323932919]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_803",
    "sat": "def sat(x: float, coeffs: List[float]=[182.41263406703584, 0.6875014955808293, -1.5215499941144568]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[182.41263406703584, 0.6875014955808293, -1.5215499941144568]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[182.41263406703584, 0.6875014955808293, -1.5215499941144568]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_804",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3383296214201607, 0.368291906288595, -4.411460746663798]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3383296214201607, 0.368291906288595, -4.411460746663798]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.3383296214201607, 0.368291906288595, -4.411460746663798]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_805",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0896509772558247, 0.9364110700328778, 413.6864611848429]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0896509772558247, 0.9364110700328778, 413.6864611848429]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.0896509772558247, 0.9364110700328778, 413.6864611848429]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_806",
    "sat": "def sat(x: float, coeffs: List[float]=[3.4566828043558426, -189.96295725825493, 71.07681337520316]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.4566828043558426, -189.96295725825493, 71.07681337520316]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.4566828043558426, -189.96295725825493, 71.07681337520316]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_807",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.33008995732896446, -0.39078674978868566, -0.09275438153654433]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.33008995732896446, -0.39078674978868566, -0.09275438153654433]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.33008995732896446, -0.39078674978868566, -0.09275438153654433]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_808",
    "sat": "def sat(x: float, coeffs: List[float]=[12.594497746319064, 0.20044848401977836, -5714.293897588819]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.594497746319064, 0.20044848401977836, -5714.293897588819]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[12.594497746319064, 0.20044848401977836, -5714.293897588819]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_809",
    "sat": "def sat(x: float, coeffs: List[float]=[0.185081271465842, 17.354876497619752, 5.40777971046413]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.185081271465842, 17.354876497619752, 5.40777971046413]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.185081271465842, 17.354876497619752, 5.40777971046413]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_810",
    "sat": "def sat(x: float, coeffs: List[float]=[1.6276397837114571, 2.3794596984070835, -0.12626174964315565]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6276397837114571, 2.3794596984070835, -0.12626174964315565]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.6276397837114571, 2.3794596984070835, -0.12626174964315565]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_811",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.27232116783349, -0.020290534360359436, 25.650856222102707]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.27232116783349, -0.020290534360359436, 25.650856222102707]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.27232116783349, -0.020290534360359436, 25.650856222102707]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_812",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.71196267700402, -1.7226700228325915, 0.045496898235573666]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.71196267700402, -1.7226700228325915, 0.045496898235573666]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.71196267700402, -1.7226700228325915, 0.045496898235573666]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_813",
    "sat": "def sat(x: float, coeffs: List[float]=[8.92545958705128, -0.3889802636630451, -17.705211257752616]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.92545958705128, -0.3889802636630451, -17.705211257752616]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[8.92545958705128, -0.3889802636630451, -17.705211257752616]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_814",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.187264536400911, -2.098891812034951, 18393.00347510448]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.187264536400911, -2.098891812034951, 18393.00347510448]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-6.187264536400911, -2.098891812034951, 18393.00347510448]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_815",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.07308274301038287, 1.4065582541314292, -0.3109956452652771]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07308274301038287, 1.4065582541314292, -0.3109956452652771]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.07308274301038287, 1.4065582541314292, -0.3109956452652771]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_816",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.06715010731914628, 0.9875490308453104, -0.3481982454645135]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06715010731914628, 0.9875490308453104, -0.3481982454645135]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.06715010731914628, 0.9875490308453104, -0.3481982454645135]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_817",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7414028332039561, -1.2054139678827835, -0.04685746484556387]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7414028332039561, -1.2054139678827835, -0.04685746484556387]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7414028332039561, -1.2054139678827835, -0.04685746484556387]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_818",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.06585838582442571, -10.241078703240984, 17.103755249561722]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06585838582442571, -10.241078703240984, 17.103755249561722]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.06585838582442571, -10.241078703240984, 17.103755249561722]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_819",
    "sat": "def sat(x: float, coeffs: List[float]=[36.00841352009633, 3.1266193759784255, -62.6775878404739]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[36.00841352009633, 3.1266193759784255, -62.6775878404739]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[36.00841352009633, 3.1266193759784255, -62.6775878404739]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_820",
    "sat": "def sat(x: float, coeffs: List[float]=[-35.75808019467183, 125.7933907516889, -97.40054392485277]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-35.75808019467183, 125.7933907516889, -97.40054392485277]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-35.75808019467183, 125.7933907516889, -97.40054392485277]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_821",
    "sat": "def sat(x: float, coeffs: List[float]=[-9.079501799833608, -0.26395354817026134, 626.6266993140473]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.079501799833608, -0.26395354817026134, 626.6266993140473]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-9.079501799833608, -0.26395354817026134, 626.6266993140473]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_822",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9080373127068727, 0.4446093647819643, 0.49362255570744146]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9080373127068727, 0.4446093647819643, 0.49362255570744146]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.9080373127068727, 0.4446093647819643, 0.49362255570744146]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_823",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.9773960868759832, -1.1245052355512763, 0.6160492314616608]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9773960868759832, -1.1245052355512763, 0.6160492314616608]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.9773960868759832, -1.1245052355512763, 0.6160492314616608]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_824",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2964782568051254, 0.4198625232917017, -11.130997259193663]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2964782568051254, 0.4198625232917017, -11.130997259193663]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2964782568051254, 0.4198625232917017, -11.130997259193663]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_825",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2792123545443239, -0.09850438946193647, 0.5456371311104266]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2792123545443239, -0.09850438946193647, 0.5456371311104266]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2792123545443239, -0.09850438946193647, 0.5456371311104266]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_826",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.309450320121067, 5.403805546113422, -18.904895556367]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.309450320121067, 5.403805546113422, -18.904895556367]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.309450320121067, 5.403805546113422, -18.904895556367]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_827",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1967372487491664, -0.1507551726910453, 0.028490624988048358]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1967372487491664, -0.1507551726910453, 0.028490624988048358]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1967372487491664, -0.1507551726910453, 0.028490624988048358]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_828",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9763340262555933, 47.5896835432491, 0.6315175061482935]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9763340262555933, 47.5896835432491, 0.6315175061482935]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.9763340262555933, 47.5896835432491, 0.6315175061482935]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_829",
    "sat": "def sat(x: float, coeffs: List[float]=[2.97478152855351, 0.10131564500331391, -4.271692143356434]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.97478152855351, 0.10131564500331391, -4.271692143356434]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.97478152855351, 0.10131564500331391, -4.271692143356434]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_830",
    "sat": "def sat(x: float, coeffs: List[float]=[10.534235300977187, 2.6329043573391098, -15.757252044412558]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.534235300977187, 2.6329043573391098, -15.757252044412558]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[10.534235300977187, 2.6329043573391098, -15.757252044412558]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_831",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.9382689152960535, 2.3479905017912457, 1.508289764356641]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.9382689152960535, 2.3479905017912457, 1.508289764356641]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.9382689152960535, 2.3479905017912457, 1.508289764356641]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_832",
    "sat": "def sat(x: float, coeffs: List[float]=[48.58409172324747, -1.8522625923549318, -5.149752073403201]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[48.58409172324747, -1.8522625923549318, -5.149752073403201]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[48.58409172324747, -1.8522625923549318, -5.149752073403201]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_833",
    "sat": "def sat(x: float, coeffs: List[float]=[-13.055865237531611, 1.8747419932813392, 353.07766902868457]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.055865237531611, 1.8747419932813392, 353.07766902868457]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-13.055865237531611, 1.8747419932813392, 353.07766902868457]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_834",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.42054560814329306, -0.2364163004287602, 0.06386844935433075]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.42054560814329306, -0.2364163004287602, 0.06386844935433075]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.42054560814329306, -0.2364163004287602, 0.06386844935433075]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_835",
    "sat": "def sat(x: float, coeffs: List[float]=[-68.48111652922383, 191.69127865877329, -118.5356523223748]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-68.48111652922383, 191.69127865877329, -118.5356523223748]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-68.48111652922383, 191.69127865877329, -118.5356523223748]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_836",
    "sat": "def sat(x: float, coeffs: List[float]=[5.386252474958013, 0.3298585413694193, -519.5154312859927]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.386252474958013, 0.3298585413694193, -519.5154312859927]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.386252474958013, 0.3298585413694193, -519.5154312859927]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_837",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8823108039188609, 0.03222849463062416, -1.158045152381653]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8823108039188609, 0.03222849463062416, -1.158045152381653]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8823108039188609, 0.03222849463062416, -1.158045152381653]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_838",
    "sat": "def sat(x: float, coeffs: List[float]=[6.257851050027491, 0.5537332445961511, -53657.25147191268]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.257851050027491, 0.5537332445961511, -53657.25147191268]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.257851050027491, 0.5537332445961511, -53657.25147191268]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_839",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4086792602724418, 0.021624509717826923, 6.179057294029802]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4086792602724418, 0.021624509717826923, 6.179057294029802]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.4086792602724418, 0.021624509717826923, 6.179057294029802]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_840",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7464040905366902, 0.04231113461780237, 0.008285847976235106]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7464040905366902, 0.04231113461780237, 0.008285847976235106]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7464040905366902, 0.04231113461780237, 0.008285847976235106]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_841",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.39925149261446125, 62.77919123893246, 1902.6232368265858]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.39925149261446125, 62.77919123893246, 1902.6232368265858]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.39925149261446125, 62.77919123893246, 1902.6232368265858]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_842",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.05609566447421669, 0.7730955535340236, -0.12038315039854013]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05609566447421669, 0.7730955535340236, -0.12038315039854013]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.05609566447421669, 0.7730955535340236, -0.12038315039854013]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_843",
    "sat": "def sat(x: float, coeffs: List[float]=[-20.293428596627255, -0.2925093644283354, 280468.91264437867]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-20.293428596627255, -0.2925093644283354, 280468.91264437867]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-20.293428596627255, -0.2925093644283354, 280468.91264437867]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_844",
    "sat": "def sat(x: float, coeffs: List[float]=[-8.140362830515715, 1.1755756819870307, 2.264479401516683]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.140362830515715, 1.1755756819870307, 2.264479401516683]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-8.140362830515715, 1.1755756819870307, 2.264479401516683]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_845",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.34067781929504726, 3.5316716192926254, 1.2308414061744137]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.34067781929504726, 3.5316716192926254, 1.2308414061744137]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.34067781929504726, 3.5316716192926254, 1.2308414061744137]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_846",
    "sat": "def sat(x: float, coeffs: List[float]=[697.0048703308261, 0.4172036773670422, -8110.3294037285705]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[697.0048703308261, 0.4172036773670422, -8110.3294037285705]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[697.0048703308261, 0.4172036773670422, -8110.3294037285705]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_847",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4732762185997516, 71.97587298208977, -152.12100741880133]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4732762185997516, 71.97587298208977, -152.12100741880133]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4732762185997516, 71.97587298208977, -152.12100741880133]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_848",
    "sat": "def sat(x: float, coeffs: List[float]=[1.616424686956884, 1.2554331851254423, 0.19430701584737253]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.616424686956884, 1.2554331851254423, 0.19430701584737253]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.616424686956884, 1.2554331851254423, 0.19430701584737253]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_849",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.20780206067910023, 0.873987201706362, 21.359718475777097]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.20780206067910023, 0.873987201706362, 21.359718475777097]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.20780206067910023, 0.873987201706362, 21.359718475777097]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_850",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.619719575870509, -0.740183106547894, 923458.8169731437]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.619719575870509, -0.740183106547894, 923458.8169731437]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-6.619719575870509, -0.740183106547894, 923458.8169731437]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_851",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2532388234618437, 0.1603898258390398, 116.85003572036037]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2532388234618437, 0.1603898258390398, 116.85003572036037]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2532388234618437, 0.1603898258390398, 116.85003572036037]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_852",
    "sat": "def sat(x: float, coeffs: List[float]=[0.027663480823349202, -0.36772201179823716, -1.7485338137986337]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.027663480823349202, -0.36772201179823716, -1.7485338137986337]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.027663480823349202, -0.36772201179823716, -1.7485338137986337]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_853",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.7423799091265706, 0.13419397010212322, 0.011902133095420006]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.7423799091265706, 0.13419397010212322, 0.011902133095420006]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.7423799091265706, 0.13419397010212322, 0.011902133095420006]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_854",
    "sat": "def sat(x: float, coeffs: List[float]=[-8.875043278129896, 0.7359756865360866, 106.03637905105286]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.875043278129896, 0.7359756865360866, 106.03637905105286]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-8.875043278129896, 0.7359756865360866, 106.03637905105286]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_855",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.22336065891915072, 0.05138423422922737, -0.002049064593641671]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.22336065891915072, 0.05138423422922737, -0.002049064593641671]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.22336065891915072, 0.05138423422922737, -0.002049064593641671]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_856",
    "sat": "def sat(x: float, coeffs: List[float]=[0.021093755847457613, 29.38245250026738, 272.31694197232133]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.021093755847457613, 29.38245250026738, 272.31694197232133]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.021093755847457613, 29.38245250026738, 272.31694197232133]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_857",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.36566272544536016, -6.6966055948230085, -12.970930868125523]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.36566272544536016, -6.6966055948230085, -12.970930868125523]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.36566272544536016, -6.6966055948230085, -12.970930868125523]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_858",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7749104732249769, -0.5382490403146253, 0.04060641631399393]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7749104732249769, -0.5382490403146253, 0.04060641631399393]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7749104732249769, -0.5382490403146253, 0.04060641631399393]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_859",
    "sat": "def sat(x: float, coeffs: List[float]=[0.29297851390269697, -3.1106906715898295, -122.48102996394258]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.29297851390269697, -3.1106906715898295, -122.48102996394258]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.29297851390269697, -3.1106906715898295, -122.48102996394258]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_860",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9721868790742617, -0.39211221679978775, -2.480448019294828]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9721868790742617, -0.39211221679978775, -2.480448019294828]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.9721868790742617, -0.39211221679978775, -2.480448019294828]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_861",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.26337298129096937, 41.33680713061299, -56.80364406651414]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.26337298129096937, 41.33680713061299, -56.80364406651414]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.26337298129096937, 41.33680713061299, -56.80364406651414]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_862",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.36941308695801095, -94.93003510517921, -70.09972642300568]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.36941308695801095, -94.93003510517921, -70.09972642300568]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.36941308695801095, -94.93003510517921, -70.09972642300568]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_863",
    "sat": "def sat(x: float, coeffs: List[float]=[-143.54163509660083, 0.04067011680688726, 35382747.94992533]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-143.54163509660083, 0.04067011680688726, 35382747.94992533]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-143.54163509660083, 0.04067011680688726, 35382747.94992533]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_864",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5358003042993346, -1.3818231823674108, -9.216989886272414]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5358003042993346, -1.3818231823674108, -9.216989886272414]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5358003042993346, -1.3818231823674108, -9.216989886272414]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_865",
    "sat": "def sat(x: float, coeffs: List[float]=[15.403067064744297, 0.3194658106317751, -15.583195344085443]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.403067064744297, 0.3194658106317751, -15.583195344085443]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[15.403067064744297, 0.3194658106317751, -15.583195344085443]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_866",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.13020248431608206, -3.3659960441912418, -2.3908547611592477]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.13020248431608206, -3.3659960441912418, -2.3908547611592477]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.13020248431608206, -3.3659960441912418, -2.3908547611592477]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_867",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8388331766608381, -3.553201432193749, 2.1759186750384667]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8388331766608381, -3.553201432193749, 2.1759186750384667]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8388331766608381, -3.553201432193749, 2.1759186750384667]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_868",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9503259516194378, 0.39935967130334343, -3.592614615753234]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9503259516194378, 0.39935967130334343, -3.592614615753234]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.9503259516194378, 0.39935967130334343, -3.592614615753234]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_869",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2617478304426193, -3.4926494847887377, 1.1718358172555814]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2617478304426193, -3.4926494847887377, 1.1718358172555814]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2617478304426193, -3.4926494847887377, 1.1718358172555814]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_870",
    "sat": "def sat(x: float, coeffs: List[float]=[203.49408362511633, 44.427435571866106, -483.3824426072389]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[203.49408362511633, 44.427435571866106, -483.3824426072389]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[203.49408362511633, 44.427435571866106, -483.3824426072389]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_871",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3056304829621173, 56.66435460877718, -297.9836881114258]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3056304829621173, 56.66435460877718, -297.9836881114258]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.3056304829621173, 56.66435460877718, -297.9836881114258]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_872",
    "sat": "def sat(x: float, coeffs: List[float]=[1.073432880559665, 3.8769030120459207, 2.762185255703903]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.073432880559665, 3.8769030120459207, 2.762185255703903]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.073432880559665, 3.8769030120459207, 2.762185255703903]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_873",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.4170309956868705, -0.351103982167216, 3.9117511244541863]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4170309956868705, -0.351103982167216, 3.9117511244541863]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.4170309956868705, -0.351103982167216, 3.9117511244541863]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_874",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.05004720070558107, -4.638169963604473, -14.43281491697303]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05004720070558107, -4.638169963604473, -14.43281491697303]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.05004720070558107, -4.638169963604473, -14.43281491697303]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_875",
    "sat": "def sat(x: float, coeffs: List[float]=[1.5463185887727118, 0.0924925468195088, -2.2096129486604137]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5463185887727118, 0.0924925468195088, -2.2096129486604137]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.5463185887727118, 0.0924925468195088, -2.2096129486604137]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_876",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.021917855277724236, -1.191004430666963, 2.737670795955113]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.021917855277724236, -1.191004430666963, 2.737670795955113]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.021917855277724236, -1.191004430666963, 2.737670795955113]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_877",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.23145461720773897, -2.4708996682294795, 0.22416329936439366]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.23145461720773897, -2.4708996682294795, 0.22416329936439366]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.23145461720773897, -2.4708996682294795, 0.22416329936439366]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_878",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9698374454765982, 0.0024389360936369897, -6.309780756002321]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9698374454765982, 0.0024389360936369897, -6.309780756002321]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.9698374454765982, 0.0024389360936369897, -6.309780756002321]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_879",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.0489823159630975, 0.6331743882663479, 4071.7909671475422]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.0489823159630975, 0.6331743882663479, 4071.7909671475422]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.0489823159630975, 0.6331743882663479, 4071.7909671475422]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_880",
    "sat": "def sat(x: float, coeffs: List[float]=[1.473425660377435, -109.919476446127, 1914.5038833242204]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.473425660377435, -109.919476446127, 1914.5038833242204]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.473425660377435, -109.919476446127, 1914.5038833242204]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_881",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.012078646917679459, 3.3386653045530523, 6.448327306227958]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.012078646917679459, 3.3386653045530523, 6.448327306227958]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.012078646917679459, 3.3386653045530523, 6.448327306227958]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_882",
    "sat": "def sat(x: float, coeffs: List[float]=[68.71910744668138, -17.731745978891446, 0.6770350380064336]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[68.71910744668138, -17.731745978891446, 0.6770350380064336]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[68.71910744668138, -17.731745978891446, 0.6770350380064336]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_883",
    "sat": "def sat(x: float, coeffs: List[float]=[0.26813503103473174, 0.21649645560668937, -1.38513065304747]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.26813503103473174, 0.21649645560668937, -1.38513065304747]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.26813503103473174, 0.21649645560668937, -1.38513065304747]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_884",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.7485946975644824, 0.09618138973565145, 0.05438785574287074]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7485946975644824, 0.09618138973565145, 0.05438785574287074]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.7485946975644824, 0.09618138973565145, 0.05438785574287074]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_885",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7996675340530439, 0.05089308309424408, 0.0006080930380833815]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7996675340530439, 0.05089308309424408, 0.0006080930380833815]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.7996675340530439, 0.05089308309424408, 0.0006080930380833815]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_886",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2815686948444487, 635.389139778798, -1344.8414639415241]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2815686948444487, 635.389139778798, -1344.8414639415241]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2815686948444487, 635.389139778798, -1344.8414639415241]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_887",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.19286749615704327, -6.267674866782474, 17.476764887584377]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19286749615704327, -6.267674866782474, 17.476764887584377]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.19286749615704327, -6.267674866782474, 17.476764887584377]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_888",
    "sat": "def sat(x: float, coeffs: List[float]=[1.668721208968357, -1.753919942175985, -34.86513767094728]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.668721208968357, -1.753919942175985, -34.86513767094728]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.668721208968357, -1.753919942175985, -34.86513767094728]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_889",
    "sat": "def sat(x: float, coeffs: List[float]=[2.8795137295561735, 0.30488679350501324, 0.003523225606584886]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.8795137295561735, 0.30488679350501324, 0.003523225606584886]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.8795137295561735, 0.30488679350501324, 0.003523225606584886]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_890",
    "sat": "def sat(x: float, coeffs: List[float]=[0.17624131405119167, 0.4449773408560536, -0.37916732985479773]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17624131405119167, 0.4449773408560536, -0.37916732985479773]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.17624131405119167, 0.4449773408560536, -0.37916732985479773]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_891",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.962137606008229, 0.6063888498780288, 0.7511141946693523]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.962137606008229, 0.6063888498780288, 0.7511141946693523]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.962137606008229, 0.6063888498780288, 0.7511141946693523]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_892",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.10613448609322429, 17.020643927953955, 2.7272773401425736]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10613448609322429, 17.020643927953955, 2.7272773401425736]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.10613448609322429, 17.020643927953955, 2.7272773401425736]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_893",
    "sat": "def sat(x: float, coeffs: List[float]=[-44.25053211978326, 0.17353957151880875, 41.87219931028428]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-44.25053211978326, 0.17353957151880875, 41.87219931028428]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-44.25053211978326, 0.17353957151880875, 41.87219931028428]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_894",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6695867274338648, 2.551249550590746, 339.4011962398996]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6695867274338648, 2.551249550590746, 339.4011962398996]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6695867274338648, 2.551249550590746, 339.4011962398996]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_895",
    "sat": "def sat(x: float, coeffs: List[float]=[6.384063738176778, -0.06688691252536816, -1471.2554290701498]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.384063738176778, -0.06688691252536816, -1471.2554290701498]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.384063738176778, -0.06688691252536816, -1471.2554290701498]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_896",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.914145959360487, 1.153533470019984, 395.20351027733363]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.914145959360487, 1.153533470019984, 395.20351027733363]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.914145959360487, 1.153533470019984, 395.20351027733363]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_897",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0647741837549715, -83.80211267325079, 971.6716067434079]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0647741837549715, -83.80211267325079, 971.6716067434079]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.0647741837549715, -83.80211267325079, 971.6716067434079]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_898",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.8767259843337833, 2.917128550254302, 4054.261522978198]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.8767259843337833, 2.917128550254302, 4054.261522978198]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.8767259843337833, 2.917128550254302, 4054.261522978198]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_899",
    "sat": "def sat(x: float, coeffs: List[float]=[-17.125323472292898, 2.708677309283642, 92.54040872336606]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.125323472292898, 2.708677309283642, 92.54040872336606]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-17.125323472292898, 2.708677309283642, 92.54040872336606]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_900",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7293945821991306, 2.8472234535909373, 0.19268154786411884]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7293945821991306, 2.8472234535909373, 0.19268154786411884]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.7293945821991306, 2.8472234535909373, 0.19268154786411884]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_901",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1118183503212131, 0.13790285709244307, 7.137726307335105]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1118183503212131, 0.13790285709244307, 7.137726307335105]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.1118183503212131, 0.13790285709244307, 7.137726307335105]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_902",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.009131391662732, -0.7918464018892662, 8.26709454430619]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.009131391662732, -0.7918464018892662, 8.26709454430619]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.009131391662732, -0.7918464018892662, 8.26709454430619]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_903",
    "sat": "def sat(x: float, coeffs: List[float]=[15.123202589937781, 0.6340507080368182, -133.92671621023294]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.123202589937781, 0.6340507080368182, -133.92671621023294]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[15.123202589937781, 0.6340507080368182, -133.92671621023294]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_904",
    "sat": "def sat(x: float, coeffs: List[float]=[3.3441427714181304, -0.5623865546415184, -1.3716403324429132]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.3441427714181304, -0.5623865546415184, -1.3716403324429132]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.3441427714181304, -0.5623865546415184, -1.3716403324429132]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_905",
    "sat": "def sat(x: float, coeffs: List[float]=[0.30240564987956525, -2.9023581821305204, -14.476636582169549]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.30240564987956525, -2.9023581821305204, -14.476636582169549]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.30240564987956525, -2.9023581821305204, -14.476636582169549]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_906",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3376052851488452, 0.5591015605131591, 1.7467982361762373]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3376052851488452, 0.5591015605131591, 1.7467982361762373]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3376052851488452, 0.5591015605131591, 1.7467982361762373]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_907",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.10180600003381501, -2.122560052246182, -0.07489888170484134]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10180600003381501, -2.122560052246182, -0.07489888170484134]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.10180600003381501, -2.122560052246182, -0.07489888170484134]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_908",
    "sat": "def sat(x: float, coeffs: List[float]=[0.26323646797918826, -0.584527971848552, 0.030200988966310183]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.26323646797918826, -0.584527971848552, 0.030200988966310183]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.26323646797918826, -0.584527971848552, 0.030200988966310183]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_909",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1573505798672609, -6.623370794653404, 3.5753206095102605]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1573505798672609, -6.623370794653404, 3.5753206095102605]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1573505798672609, -6.623370794653404, 3.5753206095102605]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_910",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.06506704714173701, -0.23690313769542484, 6.641948705964939]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06506704714173701, -0.23690313769542484, 6.641948705964939]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.06506704714173701, -0.23690313769542484, 6.641948705964939]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_911",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.004409372021675, 14.084680418565176, -0.561980533975094]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.004409372021675, 14.084680418565176, -0.561980533975094]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.004409372021675, 14.084680418565176, -0.561980533975094]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_912",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5887792084125061, 0.2746761766325185, -0.24128768070416556]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5887792084125061, 0.2746761766325185, -0.24128768070416556]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5887792084125061, 0.2746761766325185, -0.24128768070416556]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_913",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.06969193687903252, -0.5714037967676301, -0.12157999237321973]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06969193687903252, -0.5714037967676301, -0.12157999237321973]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.06969193687903252, -0.5714037967676301, -0.12157999237321973]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_914",
    "sat": "def sat(x: float, coeffs: List[float]=[1.3080163110357086, -0.2817155599187216, -5.076493611547945]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3080163110357086, -0.2817155599187216, -5.076493611547945]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.3080163110357086, -0.2817155599187216, -5.076493611547945]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_915",
    "sat": "def sat(x: float, coeffs: List[float]=[-9.782938155366741, 204.366043121898, 112.08659814501534]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.782938155366741, 204.366043121898, 112.08659814501534]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-9.782938155366741, 204.366043121898, 112.08659814501534]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_916",
    "sat": "def sat(x: float, coeffs: List[float]=[-587.041564726223, 1.250231655676534, 22.68425992353946]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-587.041564726223, 1.250231655676534, 22.68425992353946]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-587.041564726223, 1.250231655676534, 22.68425992353946]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_917",
    "sat": "def sat(x: float, coeffs: List[float]=[0.27995396424521163, -4.472510319786503, -4.60598750954364]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.27995396424521163, -4.472510319786503, -4.60598750954364]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.27995396424521163, -4.472510319786503, -4.60598750954364]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_918",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7955951437611833, -15.856716380556145, 9.913634381013216]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7955951437611833, -15.856716380556145, 9.913634381013216]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7955951437611833, -15.856716380556145, 9.913634381013216]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_919",
    "sat": "def sat(x: float, coeffs: List[float]=[-37.786846351132475, -0.19622173306633584, 15220.780578642816]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-37.786846351132475, -0.19622173306633584, 15220.780578642816]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-37.786846351132475, -0.19622173306633584, 15220.780578642816]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_920",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2912443662297721, 1.3949009418540506, -1.666388243591459]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2912443662297721, 1.3949009418540506, -1.666388243591459]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2912443662297721, 1.3949009418540506, -1.666388243591459]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_921",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.057027136207347486, 0.7578630378436962, -0.01358312247284332]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.057027136207347486, 0.7578630378436962, -0.01358312247284332]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.057027136207347486, 0.7578630378436962, -0.01358312247284332]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_922",
    "sat": "def sat(x: float, coeffs: List[float]=[0.07899697867771065, 3.4562080465087255, 1.5761658350799828]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07899697867771065, 3.4562080465087255, 1.5761658350799828]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.07899697867771065, 3.4562080465087255, 1.5761658350799828]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_923",
    "sat": "def sat(x: float, coeffs: List[float]=[0.14314092031675738, -1.009143258720593, -0.2949752308702031]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.14314092031675738, -1.009143258720593, -0.2949752308702031]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.14314092031675738, -1.009143258720593, -0.2949752308702031]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_924",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6538430746165669, 424.8904652862434, 30.26585774905392]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6538430746165669, 424.8904652862434, 30.26585774905392]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6538430746165669, 424.8904652862434, 30.26585774905392]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_925",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8371985840611128, 217.96731336933001, 42.90628675118406]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8371985840611128, 217.96731336933001, 42.90628675118406]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8371985840611128, 217.96731336933001, 42.90628675118406]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_926",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.12030241529174639, -0.12415627963503113, 0.8675501664879333]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.12030241529174639, -0.12415627963503113, 0.8675501664879333]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.12030241529174639, -0.12415627963503113, 0.8675501664879333]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_927",
    "sat": "def sat(x: float, coeffs: List[float]=[0.16350220719792521, 0.6133302445055956, -26.08300680871693]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.16350220719792521, 0.6133302445055956, -26.08300680871693]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.16350220719792521, 0.6133302445055956, -26.08300680871693]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_928",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6915877457665413, 0.18578109590388606, -3980.2599597645467]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6915877457665413, 0.18578109590388606, -3980.2599597645467]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6915877457665413, 0.18578109590388606, -3980.2599597645467]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_929",
    "sat": "def sat(x: float, coeffs: List[float]=[0.009747699483493818, -0.4658913677291349, -0.2510898098832857]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.009747699483493818, -0.4658913677291349, -0.2510898098832857]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.009747699483493818, -0.4658913677291349, -0.2510898098832857]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_930",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.7805011631539567, 0.07473776142779931, 0.0015060939428577927]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.7805011631539567, 0.07473776142779931, 0.0015060939428577927]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.7805011631539567, 0.07473776142779931, 0.0015060939428577927]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_931",
    "sat": "def sat(x: float, coeffs: List[float]=[-189.79103933559682, -1.2310048125138024, 54926.756322787915]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-189.79103933559682, -1.2310048125138024, 54926.756322787915]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-189.79103933559682, -1.2310048125138024, 54926.756322787915]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_932",
    "sat": "def sat(x: float, coeffs: List[float]=[2.397535030238373, -0.9147171532324974, -2.7205008733956624]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.397535030238373, -0.9147171532324974, -2.7205008733956624]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.397535030238373, -0.9147171532324974, -2.7205008733956624]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_933",
    "sat": "def sat(x: float, coeffs: List[float]=[7.046765621158752, -35.35830384219027, 20.869029163313087]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.046765621158752, -35.35830384219027, 20.869029163313087]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[7.046765621158752, -35.35830384219027, 20.869029163313087]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_934",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9122558930447341, -0.9469890587996473, 4.5010142929337835]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9122558930447341, -0.9469890587996473, 4.5010142929337835]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.9122558930447341, -0.9469890587996473, 4.5010142929337835]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_935",
    "sat": "def sat(x: float, coeffs: List[float]=[5.8310551521428025, 4.038705193848611, -591.4690711596467]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.8310551521428025, 4.038705193848611, -591.4690711596467]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.8310551521428025, 4.038705193848611, -591.4690711596467]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_936",
    "sat": "def sat(x: float, coeffs: List[float]=[3.5947223738731284, 2.0372513778447634, -0.04435010094459656]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.5947223738731284, 2.0372513778447634, -0.04435010094459656]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.5947223738731284, 2.0372513778447634, -0.04435010094459656]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_937",
    "sat": "def sat(x: float, coeffs: List[float]=[8.728914147863104, -1.1656330779512913, -0.041467174725412705]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.728914147863104, -1.1656330779512913, -0.041467174725412705]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[8.728914147863104, -1.1656330779512913, -0.041467174725412705]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_938",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.1383879014416336, 0.21397581002828195, 0.9230197645446991]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.1383879014416336, 0.21397581002828195, 0.9230197645446991]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.1383879014416336, 0.21397581002828195, 0.9230197645446991]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_939",
    "sat": "def sat(x: float, coeffs: List[float]=[1.6608377339436666, -0.11352199951707938, -0.8369405645348068]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6608377339436666, -0.11352199951707938, -0.8369405645348068]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.6608377339436666, -0.11352199951707938, -0.8369405645348068]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_940",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4746365459268846, 0.5876245641349214, -0.03831264027746106]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4746365459268846, 0.5876245641349214, -0.03831264027746106]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4746365459268846, 0.5876245641349214, -0.03831264027746106]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_941",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.10335051649646942, -0.9204259669875707, 0.12187364348538748]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10335051649646942, -0.9204259669875707, 0.12187364348538748]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.10335051649646942, -0.9204259669875707, 0.12187364348538748]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_942",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.7957413598747018, -1.6062098351300316, 0.2676867523148927]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7957413598747018, -1.6062098351300316, 0.2676867523148927]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.7957413598747018, -1.6062098351300316, 0.2676867523148927]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_943",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.16995214064470554, -1.5911425893875235, 138.70281184175772]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.16995214064470554, -1.5911425893875235, 138.70281184175772]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.16995214064470554, -1.5911425893875235, 138.70281184175772]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_944",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.50137732178309, 0.7264836993145031, -0.01028490191554865]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.50137732178309, 0.7264836993145031, -0.01028490191554865]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.50137732178309, 0.7264836993145031, -0.01028490191554865]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_945",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7545214255785745, 0.37365566532312194, 0.7358982052167418]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7545214255785745, 0.37365566532312194, 0.7358982052167418]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7545214255785745, 0.37365566532312194, 0.7358982052167418]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_946",
    "sat": "def sat(x: float, coeffs: List[float]=[8.092184496850363, 32.67546010733117, 19.876210602761425]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.092184496850363, 32.67546010733117, 19.876210602761425]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[8.092184496850363, 32.67546010733117, 19.876210602761425]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_947",
    "sat": "def sat(x: float, coeffs: List[float]=[-13.716810805771656, 300.63665104793523, 23.38652155580853]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.716810805771656, 300.63665104793523, 23.38652155580853]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-13.716810805771656, 300.63665104793523, 23.38652155580853]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_948",
    "sat": "def sat(x: float, coeffs: List[float]=[0.27970779350648556, 0.4602122040376038, 0.13561042825049244]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.27970779350648556, 0.4602122040376038, 0.13561042825049244]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.27970779350648556, 0.4602122040376038, 0.13561042825049244]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_949",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0043756394618517, -726.2686623662489, 592.296584699589]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0043756394618517, -726.2686623662489, 592.296584699589]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.0043756394618517, -726.2686623662489, 592.296584699589]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_950",
    "sat": "def sat(x: float, coeffs: List[float]=[0.36781770537477554, -2.850852670374554, 1.7970869695235046]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.36781770537477554, -2.850852670374554, 1.7970869695235046]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.36781770537477554, -2.850852670374554, 1.7970869695235046]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_951",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.0053476151333753, -0.02185960036612311, 0.5395981579938233]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0053476151333753, -0.02185960036612311, 0.5395981579938233]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.0053476151333753, -0.02185960036612311, 0.5395981579938233]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_952",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5015042808311617, -1.3013649271325873, -0.23660134815587316]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5015042808311617, -1.3013649271325873, -0.23660134815587316]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5015042808311617, -1.3013649271325873, -0.23660134815587316]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_953",
    "sat": "def sat(x: float, coeffs: List[float]=[1.5669499702781637, -85.55031179059841, -338.62119844086044]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5669499702781637, -85.55031179059841, -338.62119844086044]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.5669499702781637, -85.55031179059841, -338.62119844086044]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_954",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.73850249889493, 0.437608081346834, 154661.9567164256]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.73850249889493, 0.437608081346834, 154661.9567164256]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.73850249889493, 0.437608081346834, 154661.9567164256]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_955",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.830348728496912, 0.27224647107521377, 34.7895922592751]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.830348728496912, 0.27224647107521377, 34.7895922592751]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.830348728496912, 0.27224647107521377, 34.7895922592751]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_956",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.3853857400813117, -0.9664153950668655, 4.959943496429132]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.3853857400813117, -0.9664153950668655, 4.959943496429132]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.3853857400813117, -0.9664153950668655, 4.959943496429132]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_957",
    "sat": "def sat(x: float, coeffs: List[float]=[3.552227823068011, -9.017261187305413, -156.70248861349484]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.552227823068011, -9.017261187305413, -156.70248861349484]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.552227823068011, -9.017261187305413, -156.70248861349484]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_958",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2653950557505205, -3.9965863547923153, 39.204081186506755]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2653950557505205, -3.9965863547923153, 39.204081186506755]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.2653950557505205, -3.9965863547923153, 39.204081186506755]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_959",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3399523738117273, -0.2635225289591981, -0.013698524354901681]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3399523738117273, -0.2635225289591981, -0.013698524354901681]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3399523738117273, -0.2635225289591981, -0.013698524354901681]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_960",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5391160858550076, -2.360102634010996, -0.9325917248630589]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5391160858550076, -2.360102634010996, -0.9325917248630589]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5391160858550076, -2.360102634010996, -0.9325917248630589]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_961",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.09606773131451485, -23.94218853436557, 10.87764456513304]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09606773131451485, -23.94218853436557, 10.87764456513304]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.09606773131451485, -23.94218853436557, 10.87764456513304]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_962",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3106553218877863, 0.5870283512691176, 40.1673068744974]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3106553218877863, 0.5870283512691176, 40.1673068744974]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.3106553218877863, 0.5870283512691176, 40.1673068744974]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_963",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.041448543817253825, 1.5779307459758167, 0.10602763091652688]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.041448543817253825, 1.5779307459758167, 0.10602763091652688]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.041448543817253825, 1.5779307459758167, 0.10602763091652688]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_964",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1386011023006027, 1.7617899195442848, -228.1726950260261]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1386011023006027, 1.7617899195442848, -228.1726950260261]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1386011023006027, 1.7617899195442848, -228.1726950260261]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_965",
    "sat": "def sat(x: float, coeffs: List[float]=[-18.355913039322424, 0.07779122757487178, 0.38805592012227996]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.355913039322424, 0.07779122757487178, 0.38805592012227996]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-18.355913039322424, 0.07779122757487178, 0.38805592012227996]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_966",
    "sat": "def sat(x: float, coeffs: List[float]=[2.9927541051530397, -32.757003449310695, 61.23480484731522]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.9927541051530397, -32.757003449310695, 61.23480484731522]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.9927541051530397, -32.757003449310695, 61.23480484731522]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_967",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7630605843120999, -2.0268948698201603, -0.07715411592861651]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7630605843120999, -2.0268948698201603, -0.07715411592861651]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7630605843120999, -2.0268948698201603, -0.07715411592861651]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_968",
    "sat": "def sat(x: float, coeffs: List[float]=[6.19253254352867, 5.2193655706172235, -656.2370526343713]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.19253254352867, 5.2193655706172235, -656.2370526343713]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.19253254352867, 5.2193655706172235, -656.2370526343713]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_969",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0057462097847250275, 22.510865418022238, -73.6774862487224]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0057462097847250275, 22.510865418022238, -73.6774862487224]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.0057462097847250275, 22.510865418022238, -73.6774862487224]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_970",
    "sat": "def sat(x: float, coeffs: List[float]=[0.25308878326428436, -0.11871685270121901, -2.8999347448241357]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.25308878326428436, -0.11871685270121901, -2.8999347448241357]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.25308878326428436, -0.11871685270121901, -2.8999347448241357]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_971",
    "sat": "def sat(x: float, coeffs: List[float]=[12.685234692587384, 6.608988751742815, -659.6570869183588]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.685234692587384, 6.608988751742815, -659.6570869183588]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[12.685234692587384, 6.608988751742815, -659.6570869183588]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_972",
    "sat": "def sat(x: float, coeffs: List[float]=[0.11016441316465812, -18.692270629971272, -28.715914960705227]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11016441316465812, -18.692270629971272, -28.715914960705227]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.11016441316465812, -18.692270629971272, -28.715914960705227]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_973",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6282754813740593, -23.53223999099099, -0.28367891225023045]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6282754813740593, -23.53223999099099, -0.28367891225023045]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6282754813740593, -23.53223999099099, -0.28367891225023045]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_974",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1593614048433635, -0.24081619687184866, -3.084387110797109]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1593614048433635, -0.24081619687184866, -3.084387110797109]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1593614048433635, -0.24081619687184866, -3.084387110797109]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_975",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.022220593036689218, -2.282695186174522, -32.984614709443015]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.022220593036689218, -2.282695186174522, -32.984614709443015]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.022220593036689218, -2.282695186174522, -32.984614709443015]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_976",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.046736572700438885, -8.236390913226952, 10.607055399594591]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.046736572700438885, -8.236390913226952, 10.607055399594591]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.046736572700438885, -8.236390913226952, 10.607055399594591]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_977",
    "sat": "def sat(x: float, coeffs: List[float]=[-19.28544044546734, -0.03713139079344482, 533.4483662921075]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-19.28544044546734, -0.03713139079344482, 533.4483662921075]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-19.28544044546734, -0.03713139079344482, 533.4483662921075]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_978",
    "sat": "def sat(x: float, coeffs: List[float]=[699.6984812973161, 0.07136483943099647, -424.4921330253879]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[699.6984812973161, 0.07136483943099647, -424.4921330253879]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[699.6984812973161, 0.07136483943099647, -424.4921330253879]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_979",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.23981680508073513, 0.3225891412080906, -0.00031766167458157995]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.23981680508073513, 0.3225891412080906, -0.00031766167458157995]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.23981680508073513, 0.3225891412080906, -0.00031766167458157995]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_980",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.487848942166033, 43.40156620336532, 7.394866132631527]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.487848942166033, 43.40156620336532, 7.394866132631527]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.487848942166033, 43.40156620336532, 7.394866132631527]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_981",
    "sat": "def sat(x: float, coeffs: List[float]=[0.19775103477018532, -1.404450950812514, -0.12005403723300039]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.19775103477018532, -1.404450950812514, -0.12005403723300039]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.19775103477018532, -1.404450950812514, -0.12005403723300039]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_982",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.36148683132135373, -2.9069463858583546, 0.7364609005755025]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.36148683132135373, -2.9069463858583546, 0.7364609005755025]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.36148683132135373, -2.9069463858583546, 0.7364609005755025]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_983",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2709587776896711, -105.62702639385567, -800.9891143365471]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2709587776896711, -105.62702639385567, -800.9891143365471]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2709587776896711, -105.62702639385567, -800.9891143365471]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_984",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0465605246640328, -5.951384095468323, -2.167671147034867]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0465605246640328, -5.951384095468323, -2.167671147034867]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.0465605246640328, -5.951384095468323, -2.167671147034867]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_985",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.45009489423842375, -1.6506272156587667, -0.3701089197956047]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.45009489423842375, -1.6506272156587667, -0.3701089197956047]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.45009489423842375, -1.6506272156587667, -0.3701089197956047]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_986",
    "sat": "def sat(x: float, coeffs: List[float]=[5.456713948198581, -35.414305493807554, -3781.6492117137464]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.456713948198581, -35.414305493807554, -3781.6492117137464]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.456713948198581, -35.414305493807554, -3781.6492117137464]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_987",
    "sat": "def sat(x: float, coeffs: List[float]=[-19.071859477197574, -0.1098024819117589, 9.711939649819715]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-19.071859477197574, -0.1098024819117589, 9.711939649819715]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-19.071859477197574, -0.1098024819117589, 9.711939649819715]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_988",
    "sat": "def sat(x: float, coeffs: List[float]=[7.648420135142797, 4.0548733849697465, -18920.956617592037]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.648420135142797, 4.0548733849697465, -18920.956617592037]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[7.648420135142797, 4.0548733849697465, -18920.956617592037]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_989",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06997055406319637, -0.08165025235349892, 0.022780244933378536]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06997055406319637, -0.08165025235349892, 0.022780244933378536]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.06997055406319637, -0.08165025235349892, 0.022780244933378536]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_990",
    "sat": "def sat(x: float, coeffs: List[float]=[3.3008817258477325, 1.5284511857089174, -0.02538823584853199]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.3008817258477325, 1.5284511857089174, -0.02538823584853199]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.3008817258477325, 1.5284511857089174, -0.02538823584853199]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_991",
    "sat": "def sat(x: float, coeffs: List[float]=[-54.64626031226651, 39.84891383331216, 758.8651660630454]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-54.64626031226651, 39.84891383331216, 758.8651660630454]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-54.64626031226651, 39.84891383331216, 758.8651660630454]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_992",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0448464922741952, -1.7143650025538786, -6061.778555248766]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0448464922741952, -1.7143650025538786, -6061.778555248766]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.0448464922741952, -1.7143650025538786, -6061.778555248766]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_993",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0322503247674187, -5.90514508166288, -4.302989706018612]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0322503247674187, -5.90514508166288, -4.302989706018612]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.0322503247674187, -5.90514508166288, -4.302989706018612]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_994",
    "sat": "def sat(x: float, coeffs: List[float]=[-13.83636543257036, 1.6684456580802607, 1801.4670176444197]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.83636543257036, 1.6684456580802607, 1801.4670176444197]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-13.83636543257036, 1.6684456580802607, 1801.4670176444197]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_995",
    "sat": "def sat(x: float, coeffs: List[float]=[0.12072198848676852, -6.489400789696916, 0.6146251671253307]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.12072198848676852, -6.489400789696916, 0.6146251671253307]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.12072198848676852, -6.489400789696916, 0.6146251671253307]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_996",
    "sat": "def sat(x: float, coeffs: List[float]=[-111.51553624663951, 3.502027773178679, 118.57739848477746]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-111.51553624663951, 3.502027773178679, 118.57739848477746]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-111.51553624663951, 3.502027773178679, 118.57739848477746]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_997",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.9629401514727027, 2.195662456934009, 1777.4550841376913]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9629401514727027, 2.195662456934009, 1777.4550841376913]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.9629401514727027, 2.195662456934009, 1777.4550841376913]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_998",
    "sat": "def sat(x: float, coeffs: List[float]=[3.4212526606886144, -6.4533048131509, 1.0968348950145324]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.4212526606886144, -6.4533048131509, 1.0968348950145324]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.4212526606886144, -6.4533048131509, 1.0968348950145324]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_999",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0695791027371749, -3.625291157553233, -1.011514591721717]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0695791027371749, -3.625291157553233, -1.011514591721717]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.0695791027371749, -3.625291157553233, -1.011514591721717]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "AllQuadraticRoots_0",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3, -0.5]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3, -0.5]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_1",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6329945081103016, 0.09953938202925676]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6329945081103016, 0.09953938202925676]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_2",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[205.37801521859794, 84.19275693145096]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[205.37801521859794, 84.19275693145096]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_3",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.25737214990183793, -0.1842734596984684]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.25737214990183793, -0.1842734596984684]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_4",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5357283742248716, -2.6032107280025207]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5357283742248716, -2.6032107280025207]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_5",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.22087952907375344, 0.010251361101614074]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.22087952907375344, 0.010251361101614074]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_6",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6686359596019678, 0.11122892244864349]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6686359596019678, 0.11122892244864349]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_7",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3493561729548045, -44.13010867375246]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3493561729548045, -44.13010867375246]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_8",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.065624595356067, 0.7910905002166271]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.065624595356067, 0.7910905002166271]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_9",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.31737809522026145, -554.5111828665348]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.31737809522026145, -554.5111828665348]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_10",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.640210968741722, -1.0056862714191483]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.640210968741722, -1.0056862714191483]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_11",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5121756075716112, -8.100709651976855]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5121756075716112, -8.100709651976855]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_12",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.03393740756482585, -1.4222724155345583]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03393740756482585, -1.4222724155345583]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_13",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3482642705870467, -27613.742802533357]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3482642705870467, -27613.742802533357]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_14",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.081738051334304, -30.394932734449185]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.081738051334304, -30.394932734449185]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_15",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.0444081237029548, -11.172428241685054]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0444081237029548, -11.172428241685054]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_16",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-24.125110549390524, 5.965596537049496]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-24.125110549390524, 5.965596537049496]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_17",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5864226624877228, -0.39595607257370663]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5864226624877228, -0.39595607257370663]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_18",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2808429873873404, -0.0988474322435662]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2808429873873404, -0.0988474322435662]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_19",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.07355144236193056, -0.06430283854647525]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07355144236193056, -0.06430283854647525]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_20",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.09477266627058478, -59057.44429732926]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09477266627058478, -59057.44429732926]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_21",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.9391510047451698, -18956.08984498381]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9391510047451698, -18956.08984498381]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_22",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.15056710549240204, -0.106385765252345]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.15056710549240204, -0.106385765252345]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_23",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-224.49479451858528, -14142.546895794785]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-224.49479451858528, -14142.546895794785]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_24",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.684577349265265, 1.5075294783345787]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.684577349265265, 1.5075294783345787]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_25",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.22911326675026178, -0.01293685639069693]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22911326675026178, -0.01293685639069693]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_26",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.11106063735141929, -0.972438761160006]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11106063735141929, -0.972438761160006]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_27",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.47643365247504965, -0.43123890988146785]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.47643365247504965, -0.43123890988146785]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_28",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.289043913615511, -1.807286566898203]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.289043913615511, -1.807286566898203]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_29",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.6077088422360615, 1.945394139138153]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.6077088422360615, 1.945394139138153]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_30",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.025996608324142, 1.2403042034745195]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.025996608324142, 1.2403042034745195]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_31",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5349245883263244, 0.06631358930406572]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5349245883263244, 0.06631358930406572]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_32",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.06787378446490895, 0.00013720403368256643]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06787378446490895, 0.00013720403368256643]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_33",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.03739542460411601, -1.4883521306755068]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03739542460411601, -1.4883521306755068]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_34",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.10370180139980974, -0.02166116195262079]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10370180139980974, -0.02166116195262079]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_35",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.036716400995068, -0.08448593642755184]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.036716400995068, -0.08448593642755184]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_36",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.11647164496932631, -1.0481030904851554]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11647164496932631, -1.0481030904851554]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_37",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9090562966030471, 0.2033151375686565]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9090562966030471, 0.2033151375686565]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_38",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.619145448191409, -729.1995125897208]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.619145448191409, -729.1995125897208]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_39",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.682558840168152, -0.5467161535437289]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.682558840168152, -0.5467161535437289]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_40",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3504882641329248, 0.12729528163045678]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3504882641329248, 0.12729528163045678]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_41",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.07939238588772939, -6.560646775225573]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07939238588772939, -6.560646775225573]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_42",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7016777146077731, -0.05388187301776645]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7016777146077731, -0.05388187301776645]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_43",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-487.3078328386914, 122.01554731021011]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-487.3078328386914, 122.01554731021011]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_44",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.04193815019802619, -114.35682593394012]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04193815019802619, -114.35682593394012]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_45",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.4620882276344378, -35.562008249557664]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4620882276344378, -35.562008249557664]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_46",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.976108581122291, 2.8807110327080565]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.976108581122291, 2.8807110327080565]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_47",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.20951451737980128, 0.0005582023693192287]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.20951451737980128, 0.0005582023693192287]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_48",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.39819465394003, -93.76400578743858]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.39819465394003, -93.76400578743858]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_49",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.2781549746226077, -2.8672118328012894]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.2781549746226077, -2.8672118328012894]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_50",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.6970064280344226, -231.375586123952]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.6970064280344226, -231.375586123952]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_51",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-17.04419730067621, 4.124356182395632]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.04419730067621, 4.124356182395632]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_52",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.664104083931472, 8.691167938891073]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.664104083931472, 8.691167938891073]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_53",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[396.11783497633064, -183.84844863883214]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[396.11783497633064, -183.84844863883214]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_54",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.10155720548921487, -18676.265613069936]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10155720548921487, -18676.265613069936]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_55",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.33003189757098994, 0.0010160976055761245]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.33003189757098994, 0.0010160976055761245]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_56",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8924926061609887, -27940.345116752822]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8924926061609887, -27940.345116752822]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_57",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7414317416298369, -16.56255619244798]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7414317416298369, -16.56255619244798]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_58",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5127690885386205, -0.9142021919163263]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5127690885386205, -0.9142021919163263]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_59",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[70.3061390675388, 222.58968962661586]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[70.3061390675388, 222.58968962661586]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_60",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4054125217667887, -1.5243252056728862]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4054125217667887, -1.5243252056728862]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_61",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.0566096228074735, -13.077335377926726]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0566096228074735, -13.077335377926726]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_62",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.310380083140591, -1.6908269161429312]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.310380083140591, -1.6908269161429312]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_63",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8112510326616272, -0.7800530861543367]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8112510326616272, -0.7800530861543367]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_64",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.8169770389988422, 0.34276699595299676]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8169770389988422, 0.34276699595299676]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_65",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.662196693786029, -24.785104541281477]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.662196693786029, -24.785104541281477]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_66",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.4016368576966465, -744.1616462439821]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.4016368576966465, -744.1616462439821]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_67",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.7415677563901515, -92.78133455372738]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7415677563901515, -92.78133455372738]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_68",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[198.49717914525687, 12.318181324713084]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[198.49717914525687, 12.318181324713084]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_69",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.683165832191712, -1.9065355443320267]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.683165832191712, -1.9065355443320267]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_70",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-38.543528371436, -1268.028514195469]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-38.543528371436, -1268.028514195469]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_71",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.32385599988208963, -0.009258569858714285]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.32385599988208963, -0.009258569858714285]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_72",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6427167051996271, -17150.56899712271]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6427167051996271, -17150.56899712271]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_73",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-59.05731950787942, -10.754964367655015]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-59.05731950787942, -10.754964367655015]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_74",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-199.31406121836667, -1.0802426163020278]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-199.31406121836667, -1.0802426163020278]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_75",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[34.11580187757135, 168.62458485362444]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[34.11580187757135, 168.62458485362444]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_76",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.26086331240372834, -0.30440684108045113]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.26086331240372834, -0.30440684108045113]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_77",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[168.98402220164104, 883.6482138288727]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[168.98402220164104, 883.6482138288727]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_78",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.2771199247278406, 0.048402256495626156]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2771199247278406, 0.048402256495626156]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_79",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.8449447848815348, -0.7138105179049787]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8449447848815348, -0.7138105179049787]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_80",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.46379960530636, -2555.210312182216]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.46379960530636, -2555.210312182216]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_81",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-171.6519871104086, -334.88477887559515]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-171.6519871104086, -334.88477887559515]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_82",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.919556944298225, 2.2688852713576466]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.919556944298225, 2.2688852713576466]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_83",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.6231271707471817, -0.10169814809849154]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6231271707471817, -0.10169814809849154]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_84",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.16135176754172278, -0.10379051224514729]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.16135176754172278, -0.10379051224514729]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_85",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.4362505691678036, -9.612205547582752]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4362505691678036, -9.612205547582752]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_86",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.439896385538851, -0.43947166919628794]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.439896385538851, -0.43947166919628794]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_87",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.01043494225585162, -1.0330720509652938]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.01043494225585162, -1.0330720509652938]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_88",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.0040957928030148, 0.16374992629817176]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0040957928030148, 0.16374992629817176]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_89",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.501455672151924, -4.155134470718509]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.501455672151924, -4.155134470718509]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_90",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9181219749432157, -32.612069208226195]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9181219749432157, -32.612069208226195]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_91",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3111621608914891, 0.024197565620026257]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3111621608914891, 0.024197565620026257]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_92",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.1291243642952793, 1.1029798915892755]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1291243642952793, 1.1029798915892755]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_93",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[67.54088179713484, -509.851196728613]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[67.54088179713484, -509.851196728613]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_94",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.5868862784797813, -0.22959800931304386]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5868862784797813, -0.22959800931304386]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_95",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[32.27932859154493, 8.199980154757654]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[32.27932859154493, 8.199980154757654]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_96",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6036611196981667, 0.007046004891846365]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6036611196981667, 0.007046004891846365]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_97",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8663996016064477, -0.21126411769108164]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8663996016064477, -0.21126411769108164]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_98",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.08226502975206589, -2.7521426132131106]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08226502975206589, -2.7521426132131106]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_99",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.257211931161136, -18693.550284569297]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.257211931161136, -18693.550284569297]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_100",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6536025111158731, -393.4515217206488]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6536025111158731, -393.4515217206488]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_101",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.09593109173814995, -0.29795521023972]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09593109173814995, -0.29795521023972]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_102",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.06002280035988298, -0.5816279122210843]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06002280035988298, -0.5816279122210843]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_103",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.39896727460445486, -839.0988658879126]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.39896727460445486, -839.0988658879126]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_104",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.274543740775918, -6.160983157405129]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.274543740775918, -6.160983157405129]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_105",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.31271563454744467, 0.02442309129257506]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.31271563454744467, 0.02442309129257506]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_106",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.054244371526734225, -0.33080717273340815]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.054244371526734225, -0.33080717273340815]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_107",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.548199733202655, -19.907748673424422]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.548199733202655, -19.907748673424422]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_108",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.48111330810814107, -518221.72627415287]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.48111330810814107, -518221.72627415287]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_109",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-190.75582154085143, 821.8134331207095]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-190.75582154085143, 821.8134331207095]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_110",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.38799801262468536, -0.001191035592966433]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.38799801262468536, -0.001191035592966433]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_111",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.341199825326027, -4.542149279261437]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.341199825326027, -4.542149279261437]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_112",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.28464702261929636, -1.2580510490775845]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.28464702261929636, -1.2580510490775845]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_113",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.07635095021743177, 0.0014566818981347725]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07635095021743177, 0.0014566818981347725]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_114",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.725681868251975, 2.7885824919509474]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.725681868251975, 2.7885824919509474]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_115",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.02366568946293916, -0.035278230486902484]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.02366568946293916, -0.035278230486902484]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_116",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.10170777974503727, -4.544768553098852]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10170777974503727, -4.544768553098852]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_117",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.04621374976212992, -0.018201935515171498]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04621374976212992, -0.018201935515171498]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_118",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6158268227008511, -0.7043747471317366]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6158268227008511, -0.7043747471317366]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_119",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6507399783609493, -16.753179379810437]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6507399783609493, -16.753179379810437]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_120",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.4611345230374186, 0.9965028308579977]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.4611345230374186, 0.9965028308579977]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_121",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.0956257049130906, -301.91373229123514]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0956257049130906, -301.91373229123514]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_122",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.671867300574859, -4.982466944397254]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.671867300574859, -4.982466944397254]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_123",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5385585827174664, -0.8710743606425109]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5385585827174664, -0.8710743606425109]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_124",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.10829123540937109, -0.17103468627991128]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10829123540937109, -0.17103468627991128]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_125",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.055110810747297435, -4549.3601372254]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.055110810747297435, -4549.3601372254]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_126",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.463280140840523, 0.7613187708564473]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.463280140840523, 0.7613187708564473]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_127",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.23726890498084718, -0.9979635476141542]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.23726890498084718, -0.9979635476141542]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_128",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.0803559416069566, -0.33237081077028785]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0803559416069566, -0.33237081077028785]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_129",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.124894942328456, -2.5426726048222132]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.124894942328456, -2.5426726048222132]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_130",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.10346836774623647, -0.3450020292151056]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10346836774623647, -0.3450020292151056]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_131",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.20850750306853313, -4906.559465328931]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.20850750306853313, -4906.559465328931]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_132",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.21730060062688042, -0.006570853431279594]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21730060062688042, -0.006570853431279594]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_133",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.6234176164951617, -0.4100505404182657]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6234176164951617, -0.4100505404182657]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_134",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.17153531676314762, -1.069503435948869]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17153531676314762, -1.069503435948869]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_135",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.595505517061753, -2.6027372547098246]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.595505517061753, -2.6027372547098246]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_136",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.5189650137091497, 0.2631406711847921]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5189650137091497, 0.2631406711847921]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_137",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.2075766175478184, -40.66135920758107]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2075766175478184, -40.66135920758107]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_138",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.62067815314071, -9628.51308498276]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.62067815314071, -9628.51308498276]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_139",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[26.143194480822824, 24.26724749107487]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[26.143194480822824, 24.26724749107487]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_140",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6051183699930722, -0.0058086673357357595]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6051183699930722, -0.0058086673357357595]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_141",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.01610204134181063, -4.034884215466685]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.01610204134181063, -4.034884215466685]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_142",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7401071280306263, 0.10820370742950422]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7401071280306263, 0.10820370742950422]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_143",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-18.984458402128016, -15.89029156313915]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.984458402128016, -15.89029156313915]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_144",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[20.3956931990402, 16.669245186544906]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[20.3956931990402, 16.669245186544906]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_145",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.320572070783497, -4.004042558206939]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.320572070783497, -4.004042558206939]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_146",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.287134718355813, 0.11593581731887938]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.287134718355813, 0.11593581731887938]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_147",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-51.96658763287772, 10.258810036448102]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-51.96658763287772, 10.258810036448102]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_148",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.42782505766402146, -108058.52614677028]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.42782505766402146, -108058.52614677028]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_149",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.4695772804860807, -0.34685505511881143]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4695772804860807, -0.34685505511881143]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_150",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.36354542452320776, 0.013142382954365742]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.36354542452320776, 0.013142382954365742]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_151",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.04675795995569058, -9.486545001782178]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04675795995569058, -9.486545001782178]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_152",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.009914595835852, 0.7399139314925031]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.009914595835852, 0.7399139314925031]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_153",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.2143060499279281, -2.191259667006654]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2143060499279281, -2.191259667006654]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_154",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[38.83752264773299, -1615.5447044337147]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[38.83752264773299, -1615.5447044337147]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_155",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7222048107161375, -0.2601536375343976]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7222048107161375, -0.2601536375343976]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_156",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-13.598568451622626, 3.792906178593698]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.598568451622626, 3.792906178593698]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_157",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.05355749356928974, -3.3325338972867042]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05355749356928974, -3.3325338972867042]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_158",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[126.69111101872981, 1986.1921202672786]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[126.69111101872981, 1986.1921202672786]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_159",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.546318670523535, -0.023754983540706515]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.546318670523535, -0.023754983540706515]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_160",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.928214442397626, -0.7849882088116095]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.928214442397626, -0.7849882088116095]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_161",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.822795763437818, -0.3851808509224741]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.822795763437818, -0.3851808509224741]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_162",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8295859360535102, -1.6727961625454384]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8295859360535102, -1.6727961625454384]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_163",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.12219701778033072, -17.578607114305196]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.12219701778033072, -17.578607114305196]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_164",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[21.73524430699239, 21.007884208413632]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[21.73524430699239, 21.007884208413632]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_165",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5848755157054154, 0.07813067294296247]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5848755157054154, 0.07813067294296247]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_166",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.930328706907609, -1.723917395567889]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.930328706907609, -1.723917395567889]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_167",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4981165094113111, -0.04173531964673599]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4981165094113111, -0.04173531964673599]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_168",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.684410465276597, -22.867318976322224]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.684410465276597, -22.867318976322224]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_169",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[17.31428547549662, -2.1070520466055025]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[17.31428547549662, -2.1070520466055025]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_170",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.17590371452518863, -2818.9907668695582]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17590371452518863, -2818.9907668695582]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_171",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.028032933079134754, -6.96849995932031]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.028032933079134754, -6.96849995932031]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_172",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.9572246951986361, -1.4166057407041541]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9572246951986361, -1.4166057407041541]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_173",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.34756683247823633, -4131.909815688764]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.34756683247823633, -4131.909815688764]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_174",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.07597141373232286, -0.16452416209148907]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07597141373232286, -0.16452416209148907]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_175",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.03310763037033274, -0.0011045043939038716]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03310763037033274, -0.0011045043939038716]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_176",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.0334965367507487, -0.047698144494278276]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0334965367507487, -0.047698144494278276]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_177",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7474911367481202, -77.78630738273841]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7474911367481202, -77.78630738273841]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_178",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.542754129627968, -0.3034696049164995]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.542754129627968, -0.3034696049164995]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_179",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.9447560018655815, 0.21827013007158344]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9447560018655815, 0.21827013007158344]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_180",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.33046513429460284, -0.009661900675272082]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.33046513429460284, -0.009661900675272082]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_181",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-27.331956986279977, 16.590905553668836]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-27.331956986279977, 16.590905553668836]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_182",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4207347125816086, -558.9448162747038]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4207347125816086, -558.9448162747038]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_183",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.460544729109706, -0.6440286216762491]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.460544729109706, -0.6440286216762491]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_184",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.1495458392033048, -0.24110485453013708]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1495458392033048, -0.24110485453013708]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_185",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.8515612550983265, 0.2862852569680953]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8515612550983265, 0.2862852569680953]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_186",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-32.008459007318734, 3.153212587223149]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-32.008459007318734, 3.153212587223149]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_187",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.020083357409542996, -1.3656222716219386]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.020083357409542996, -1.3656222716219386]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_188",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.704572711396745, -1.8341459382239897]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.704572711396745, -1.8341459382239897]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_189",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-104.98725356311432, -6791.910623377946]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-104.98725356311432, -6791.910623377946]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_190",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1332685796931, -7.733378782846717]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1332685796931, -7.733378782846717]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_191",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.45190734649006786, 0.04967030776615863]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.45190734649006786, 0.04967030776615863]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_192",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.31506739511620335, 0.0012199098771650402]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.31506739511620335, 0.0012199098771650402]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_193",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.080558066761992, -7.302789417831792]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.080558066761992, -7.302789417831792]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_194",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.08862466742757687, -21.533297962103152]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08862466742757687, -21.533297962103152]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_195",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.8557859497145894, -0.08915784425752367]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8557859497145894, -0.08915784425752367]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_196",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.81163359614988, -1.5004568574279527]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.81163359614988, -1.5004568574279527]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_197",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.023733313182207134, -0.1105447291622926]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.023733313182207134, -0.1105447291622926]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_198",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-494.7182896208467, 138.38682999237386]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-494.7182896208467, 138.38682999237386]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_199",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.34959195745526656, -7.763041094880038]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.34959195745526656, -7.763041094880038]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_200",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6348009886746576, -0.17122358524147355]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6348009886746576, -0.17122358524147355]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_201",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.724829320463904, 0.21136725313017826]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.724829320463904, 0.21136725313017826]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_202",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.929428306903459, -2.005993549503243]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.929428306903459, -2.005993549503243]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_203",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3078222832067608, 0.012228722060516992]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3078222832067608, 0.012228722060516992]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_204",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.0686476135942424, 1.8555902384932992]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.0686476135942424, 1.8555902384932992]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_205",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.18591425933603908, -377.95066126901133]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18591425933603908, -377.95066126901133]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_206",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7394373800073292, -459503.34439249284]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7394373800073292, -459503.34439249284]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_207",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.173261819916773, 1.1365826076132948]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.173261819916773, 1.1365826076132948]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_208",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.5919670574149247, -13511.815451032016]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.5919670574149247, -13511.815451032016]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_209",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.294902568101804, 0.0006194082065253274]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.294902568101804, 0.0006194082065253274]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_210",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.06469840162669731, -1.8663453300470518]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06469840162669731, -1.8663453300470518]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_211",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.22278503148718154, -0.03367292498492759]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.22278503148718154, -0.03367292498492759]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_212",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.26295812084801534, 0.013753366365288462]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.26295812084801534, 0.013753366365288462]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_213",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.5775860982531151, -1.334279113153822]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5775860982531151, -1.334279113153822]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_214",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.058458587413535, -0.6102779547908329]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.058458587413535, -0.6102779547908329]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_215",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.07550841853667885, -14.73229182804053]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07550841853667885, -14.73229182804053]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_216",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-18.720386772238218, -3.297910198912377]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.720386772238218, -3.297910198912377]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_217",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.6123083824356714, 0.5104651965807298]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6123083824356714, 0.5104651965807298]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_218",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-10.563447421768132, 0.5207896591252263]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.563447421768132, 0.5207896591252263]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_219",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.000986913881329, -106488.76128653117]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.000986913881329, -106488.76128653117]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_220",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4036430181401265, 0.0051773629879397634]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4036430181401265, 0.0051773629879397634]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_221",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-30.238109754613138, 22.00328501105653]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-30.238109754613138, 22.00328501105653]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_222",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-15.226001826289767, -13.920840764186131]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.226001826289767, -13.920840764186131]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_223",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.13403955086508268, -0.00874838986897869]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.13403955086508268, -0.00874838986897869]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_224",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.012581400656822, 12.28906107596876]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.012581400656822, 12.28906107596876]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_225",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5089823454556185, -0.17435998994821267]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5089823454556185, -0.17435998994821267]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_226",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.09151335811350576, -47052.2796209639]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09151335811350576, -47052.2796209639]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_227",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.08417845788159502, -0.1633359654890548]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08417845788159502, -0.1633359654890548]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_228",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.1070577183323738, -200009.55031547832]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1070577183323738, -200009.55031547832]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_229",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1696041681215288, -1.163691905897175]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1696041681215288, -1.163691905897175]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_230",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-711.4581154251082, -718.3556052185501]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-711.4581154251082, -718.3556052185501]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_231",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.8991023982641257, 0.21564508902355148]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8991023982641257, 0.21564508902355148]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_232",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.03416583757776529, -0.01979742678541227]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03416583757776529, -0.01979742678541227]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_233",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.03495718096670338, -5843.861045857275]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03495718096670338, -5843.861045857275]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_234",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.8316931797022873, -4.611798752814654]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8316931797022873, -4.611798752814654]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_235",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7153245847509443, -5.865543640824477]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7153245847509443, -5.865543640824477]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_236",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.48387185087558393, -0.43029449246536244]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.48387185087558393, -0.43029449246536244]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_237",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.03985214506703986, -494.39042060336584]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03985214506703986, -494.39042060336584]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_238",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.0376791748815671, -0.0015085407631429157]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0376791748815671, -0.0015085407631429157]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_239",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.08187709814576423, -22.30011492242186]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08187709814576423, -22.30011492242186]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_240",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.42771639023942115, -0.8405524885669255]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.42771639023942115, -0.8405524885669255]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_241",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.22828230354590806, -0.05040367501885071]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.22828230354590806, -0.05040367501885071]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_242",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-24.344998072885705, 86.23867326106941]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-24.344998072885705, 86.23867326106941]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_243",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.318765543986109, -0.9380196505322398]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.318765543986109, -0.9380196505322398]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_244",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7401036928359631, -1.8961385179975359]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7401036928359631, -1.8961385179975359]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_245",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[218.08542976315422, -4.897908414463302]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[218.08542976315422, -4.897908414463302]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_246",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6468640110555834, -0.11872371129775845]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6468640110555834, -0.11872371129775845]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_247",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.1413845437936028, -0.677999936300533]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1413845437936028, -0.677999936300533]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_248",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[21.11652629745976, -24.861717592529665]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[21.11652629745976, -24.861717592529665]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_249",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.20114748347505076, -0.0563285387751394]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.20114748347505076, -0.0563285387751394]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_250",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2977253320511289, -0.5431834657118471]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2977253320511289, -0.5431834657118471]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_251",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3186730466648175, -9.851112040278263]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3186730466648175, -9.851112040278263]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_252",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.240223787998536, -0.24140357590135128]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.240223787998536, -0.24140357590135128]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_253",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.09306564234010306, -112.67758429090127]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09306564234010306, -112.67758429090127]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_254",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0270144893148407, 0.22545468268784125]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0270144893148407, 0.22545468268784125]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_255",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.5023672045946297, -0.39084585964980567]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5023672045946297, -0.39084585964980567]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_256",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.906429813228988, -447.2774389176684]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.906429813228988, -447.2774389176684]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_257",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.05033123214570175, -0.0007783732937047209]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05033123214570175, -0.0007783732937047209]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_258",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6015037042214723, 0.08911457283530609]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6015037042214723, 0.08911457283530609]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_259",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.442671817851638, 5.35723435775134]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.442671817851638, 5.35723435775134]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_260",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.482918182056835, -6.707753705313584]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.482918182056835, -6.707753705313584]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_261",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7587043610681379, -0.027463347981874768]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7587043610681379, -0.027463347981874768]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_262",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2725117413634517, -1.7857215440411318]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2725117413634517, -1.7857215440411318]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_263",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.762920246000183, -1.2801183579194464]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.762920246000183, -1.2801183579194464]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_264",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3044990652355388, -0.7827116362543673]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3044990652355388, -0.7827116362543673]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_265",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.225106119443798, -336.495123537062]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.225106119443798, -336.495123537062]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_266",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[26.592559466442253, -2.7263314328088533]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[26.592559466442253, -2.7263314328088533]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_267",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.029599597259798, -1.5867361164128402]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.029599597259798, -1.5867361164128402]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_268",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.044636342874571154, -10.119566738878012]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.044636342874571154, -10.119566738878012]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_269",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.17413230903982288, -0.3650422805668613]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17413230903982288, -0.3650422805668613]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_270",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8230046644824158, -0.38652780065374825]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8230046644824158, -0.38652780065374825]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_271",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[31.660743161625263, -357.7711121924044]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[31.660743161625263, -357.7711121924044]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_272",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.288649537642932, -279.0656758453165]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.288649537642932, -279.0656758453165]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_273",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.33889912595434585, -4.064662219006707]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.33889912595434585, -4.064662219006707]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_274",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2548898922399303, -0.0843613046931057]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2548898922399303, -0.0843613046931057]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_275",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7504542732985388, -6.427891294975053]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7504542732985388, -6.427891294975053]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_276",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[28.542426832360004, -3.8491942277267244]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[28.542426832360004, -3.8491942277267244]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_277",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.27835781613297894, -0.014635358139886076]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.27835781613297894, -0.014635358139886076]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_278",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.924962036338068, -12948.493881164948]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.924962036338068, -12948.493881164948]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_279",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.121183055745023, -461.4162608075869]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.121183055745023, -461.4162608075869]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_280",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.815016427007154, 1.241979962951943]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.815016427007154, 1.241979962951943]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_281",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.31992651820412066, -0.5790877045598611]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.31992651820412066, -0.5790877045598611]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_282",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.09180756539983788, -0.1311695850795144]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09180756539983788, -0.1311695850795144]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_283",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.7849438391357184, 0.28596639309008015]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7849438391357184, 0.28596639309008015]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_284",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.008194923231992224, -7.632473983910816]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.008194923231992224, -7.632473983910816]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_285",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.10297192244776, 2.548051492358682]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.10297192244776, 2.548051492358682]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_286",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4206649067678687, -163.99471175588926]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4206649067678687, -163.99471175588926]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_287",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.13513961446995956, -0.08442835180507427]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.13513961446995956, -0.08442835180507427]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_288",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[798.251630372471, 1040.1302694046717]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[798.251630372471, 1040.1302694046717]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_289",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.24512817268764567, -9571.149262010122]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.24512817268764567, -9571.149262010122]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_290",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.8596074118214854, -1.5619081530701617]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.8596074118214854, -1.5619081530701617]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_291",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2606920933514358, -2.263530253889232]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2606920933514358, -2.263530253889232]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_292",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.44414874356381145, -0.01333631664821784]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.44414874356381145, -0.01333631664821784]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_293",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.005060342858755969, -2.7785974276430623]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.005060342858755969, -2.7785974276430623]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_294",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7290786574636611, -15.571512293849164]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7290786574636611, -15.571512293849164]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_295",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.06242258085027289, -5.394388688741476]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06242258085027289, -5.394388688741476]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_296",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.715300624439617, 0.035623582792119024]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.715300624439617, 0.035623582792119024]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_297",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.43437229978905884, -106.5066863222639]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.43437229978905884, -106.5066863222639]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_298",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-767.4268249220995, -216.33208266038955]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-767.4268249220995, -216.33208266038955]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_299",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.6916874947897815, -0.4348382006240913]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6916874947897815, -0.4348382006240913]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_300",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.928263711432118, -9.879555527326135]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.928263711432118, -9.879555527326135]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_301",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.09293093721161, -111.73904386169448]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.09293093721161, -111.73904386169448]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_302",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6533668938219099, 0.025441827348655605]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6533668938219099, 0.025441827348655605]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_303",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.862830318522485, -2719.711652771555]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.862830318522485, -2719.711652771555]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_304",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4358141253158035, -0.15859661807261316]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4358141253158035, -0.15859661807261316]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_305",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.552638236984986, 1.654920995681135]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.552638236984986, 1.654920995681135]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_306",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.03371585506640081, -9061.778463566998]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03371585506640081, -9061.778463566998]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_307",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.952630037879346, 0.07968978539267253]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.952630037879346, 0.07968978539267253]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_308",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8152672564608765, -1.7400130040916775]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8152672564608765, -1.7400130040916775]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_309",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[20.9628514432096, -7.840991625470094]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[20.9628514432096, -7.840991625470094]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_310",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[25.91728118871372, -13.112475371025129]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[25.91728118871372, -13.112475371025129]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_311",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.758207318345089, -1.1251780881267233]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.758207318345089, -1.1251780881267233]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_312",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4065564214714186, -0.1725002521342746]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4065564214714186, -0.1725002521342746]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_313",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.1978290854449313, 0.00850609820047168]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1978290854449313, 0.00850609820047168]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_314",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[21.51026795159081, -9.132865976269853]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[21.51026795159081, -9.132865976269853]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_315",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.3908438192729133, -437.0129171240501]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.3908438192729133, -437.0129171240501]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_316",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.09093320344148463, -1399.2027769133952]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09093320344148463, -1399.2027769133952]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_317",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.839839331249841, -13.456689496255326]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.839839331249841, -13.456689496255326]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_318",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4995153988341217, -5.993926983290985]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4995153988341217, -5.993926983290985]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_319",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.6333614014776154, -0.8154014816576631]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6333614014776154, -0.8154014816576631]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_320",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.968461713100961, -0.23631237452072695]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.968461713100961, -0.23631237452072695]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_321",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[17.549787633523962, -6.486748418230593]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[17.549787633523962, -6.486748418230593]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_322",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3489982278602504, 0.17002078633902676]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3489982278602504, 0.17002078633902676]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_323",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3525166925213261, -20.909773075017192]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3525166925213261, -20.909773075017192]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_324",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[127.53287500032842, -409.63608352393527]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[127.53287500032842, -409.63608352393527]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_325",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[366.6187907469712, -14173.66897278836]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[366.6187907469712, -14173.66897278836]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_326",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.6643905281249562, -2.8670864445973594]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6643905281249562, -2.8670864445973594]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_327",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.990381734291883, 2.0759510486459063]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.990381734291883, 2.0759510486459063]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_328",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.194990081544946, -30696.58483003953]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.194990081544946, -30696.58483003953]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_329",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.5202104603163245, -38.92638171059557]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5202104603163245, -38.92638171059557]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_330",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.555674490085662, -907.2833282725364]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.555674490085662, -907.2833282725364]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_331",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.12001711788738863, -1225.219661204561]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.12001711788738863, -1225.219661204561]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_332",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.002309030693264121, -0.03309511639048367]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.002309030693264121, -0.03309511639048367]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_333",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.07434045789689663, -4.177805615665997]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07434045789689663, -4.177805615665997]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_334",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[47.84052049137669, -58.64017184688396]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[47.84052049137669, -58.64017184688396]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_335",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.2583866414798415, 1.5825495136069836]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.2583866414798415, 1.5825495136069836]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_336",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.043303494614469175, -2.2226574013348257]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.043303494614469175, -2.2226574013348257]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_337",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-17.284309272709248, 21.98657222545807]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.284309272709248, 21.98657222545807]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_338",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.145374476323322, 0.9784184353977378]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.145374476323322, 0.9784184353977378]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_339",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.29214809136007003, -0.00034619298976904363]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.29214809136007003, -0.00034619298976904363]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_340",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[167.91939936778502, -106.69134428932544]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[167.91939936778502, -106.69134428932544]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_341",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.304901772185664, -36.481027908387325]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.304901772185664, -36.481027908387325]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_342",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3815291886269363, -0.36195480753755144]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3815291886269363, -0.36195480753755144]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_343",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.834250506560343, 0.27834941938290136]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.834250506560343, 0.27834941938290136]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_344",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6516608568707075, -11.124937324621317]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6516608568707075, -11.124937324621317]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_345",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.05187057031613381, -809.3344117740851]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05187057031613381, -809.3344117740851]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_346",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.23793633464900799, -0.04527010475126979]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.23793633464900799, -0.04527010475126979]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_347",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8543261612669433, -0.2957986004221969]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8543261612669433, -0.2957986004221969]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_348",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[22.457571634565, -14.422751680838203]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[22.457571634565, -14.422751680838203]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_349",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.07229202129242096, -0.014634091427418276]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07229202129242096, -0.014634091427418276]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_350",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9780603098888455, -0.04527897716804353]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9780603098888455, -0.04527897716804353]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_351",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.474357369354845, -14.34308620352899]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.474357369354845, -14.34308620352899]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_352",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3434217232591868, 0.00985992790221824]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3434217232591868, 0.00985992790221824]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_353",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.34008747928998595, -0.02975427384170131]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.34008747928998595, -0.02975427384170131]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_354",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.09107017024957893, -0.08365953651516427]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09107017024957893, -0.08365953651516427]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_355",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7743481156920256, -0.10531661515574986]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7743481156920256, -0.10531661515574986]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_356",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3535839667107437, -6.055035917680369]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3535839667107437, -6.055035917680369]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_357",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2776301509914377, -33.47540775157569]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2776301509914377, -33.47540775157569]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_358",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.88004501332036, 3.414707125846991]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.88004501332036, 3.414707125846991]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_359",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.24715884997613843, -0.017612010137885083]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.24715884997613843, -0.017612010137885083]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_360",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7060378668398212, -0.1271984891869662]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7060378668398212, -0.1271984891869662]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_361",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.030658476266753516, -0.005016753669319817]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.030658476266753516, -0.005016753669319817]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_362",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8232454448100236, -0.3976741127448331]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8232454448100236, -0.3976741127448331]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_363",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.852785810117527, 0.8526655609230668]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.852785810117527, 0.8526655609230668]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_364",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.060607474781393535, -81.15138926189131]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.060607474781393535, -81.15138926189131]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_365",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.1837961254218365, 1.5636251154153027]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.1837961254218365, 1.5636251154153027]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_366",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7663510413103722, -12.879650766308043]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7663510413103722, -12.879650766308043]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_367",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.06613407891886669, -0.00313401542563405]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06613407891886669, -0.00313401542563405]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_368",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.4488616492724367, -3.914950821232016]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4488616492724367, -3.914950821232016]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_369",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[24.56634470013424, -129.13518690871976]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[24.56634470013424, -129.13518690871976]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_370",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.248613317570655, -1096.618290141851]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.248613317570655, -1096.618290141851]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_371",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0966261351525335, -1.3176372041146514]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0966261351525335, -1.3176372041146514]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_372",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.11136289106154888, 0.001476797541117313]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11136289106154888, 0.001476797541117313]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_373",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.044078950392501946, -206665.94380092405]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.044078950392501946, -206665.94380092405]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_374",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.932034639542441, -4.695004724653544]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.932034639542441, -4.695004724653544]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_375",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.497793943149673, -1912.764748201525]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.497793943149673, -1912.764748201525]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_376",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7181347522118448, -5.4450164276534405]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7181347522118448, -5.4450164276534405]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_377",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8039031588013064, -270.27070696212724]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8039031588013064, -270.27070696212724]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_378",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.24144777633155737, -0.06882052621849695]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.24144777633155737, -0.06882052621849695]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_379",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.0495693327713164, -0.00014091022789857545]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0495693327713164, -0.00014091022789857545]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_380",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.47016544062548027, -4.6489206191207035]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.47016544062548027, -4.6489206191207035]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_381",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.302331062733106, -65.7511927618029]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.302331062733106, -65.7511927618029]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_382",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.764211285006619, 0.6299218243256338]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.764211285006619, 0.6299218243256338]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_383",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0221331308185109, -0.10438212356198548]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0221331308185109, -0.10438212356198548]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_384",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-43.29031532316239, 12.423795845030458]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-43.29031532316239, 12.423795845030458]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_385",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.011100019427074281, -1975.7880149674565]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.011100019427074281, -1975.7880149674565]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_386",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.1119004194085557, -0.015434652639607995]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1119004194085557, -0.015434652639607995]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_387",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.7492922283660626, -1256.2548282864127]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.7492922283660626, -1256.2548282864127]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_388",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.024605398930282, 24.6558695634762]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.024605398930282, 24.6558695634762]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_389",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.077988078896194, 1.0400763925506695]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.077988078896194, 1.0400763925506695]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_390",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.2631998701244462, -7413.016533902575]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2631998701244462, -7413.016533902575]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_391",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.9496387038635137, -0.6116908576781888]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9496387038635137, -0.6116908576781888]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_392",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.19208635179722955, -43.775559475053555]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19208635179722955, -43.775559475053555]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_393",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.8725625563966537, -0.14177916478667757]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8725625563966537, -0.14177916478667757]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_394",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5803685205131778, -69.0938970624109]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5803685205131778, -69.0938970624109]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_395",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6278520482064939, -194.6324046283244]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6278520482064939, -194.6324046283244]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_396",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5660065385263221, -0.07881962443700566]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5660065385263221, -0.07881962443700566]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_397",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.23218100660872, 11.865534788775369]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.23218100660872, 11.865534788775369]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_398",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.1468140292911715, 0.2326219632435091]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1468140292911715, 0.2326219632435091]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_399",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5080966003623565, -17.751939067964365]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5080966003623565, -17.751939067964365]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_400",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.49120412010240083, -2.142178768766706]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.49120412010240083, -2.142178768766706]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_401",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.0055159311820155805, -3.27361285567442]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0055159311820155805, -3.27361285567442]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_402",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.018033492414847824, -0.014776746432469314]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.018033492414847824, -0.014776746432469314]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_403",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-41.464483446885055, 2.159339899357146]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-41.464483446885055, 2.159339899357146]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_404",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.0874096389601107, -4.819040066619632]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0874096389601107, -4.819040066619632]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_405",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.3377939140623893, -3.6776923531129873]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.3377939140623893, -3.6776923531129873]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_406",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[308.1232593735545, -84.68303240903379]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[308.1232593735545, -84.68303240903379]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_407",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.03896674291207095, -24.91378622095137]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03896674291207095, -24.91378622095137]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_408",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.520948321383747, -6.770858565093623]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.520948321383747, -6.770858565093623]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_409",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.071239523407488, -1347.3760922070098]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.071239523407488, -1347.3760922070098]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_410",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7803167079501372, -0.014776807818501214]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7803167079501372, -0.014776807818501214]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_411",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.611465223431261, -1.0664476976503419]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.611465223431261, -1.0664476976503419]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_412",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.005151806910326536, -94.68777871562855]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.005151806910326536, -94.68777871562855]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_413",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.735386815366866, 0.11051165978194616]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.735386815366866, 0.11051165978194616]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_414",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.145381139136783, 0.2389217937750061]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.145381139136783, 0.2389217937750061]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_415",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4027454585143582, -0.7877569032696192]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4027454585143582, -0.7877569032696192]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_416",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.16948782804278398, -0.001549170791439545]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.16948782804278398, -0.001549170791439545]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_417",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6106968040345134, -177.85645002770607]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6106968040345134, -177.85645002770607]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_418",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.16394688632559204, -0.07051860666010556]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.16394688632559204, -0.07051860666010556]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_419",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.33153905228212976, 0.01730775086893148]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.33153905228212976, 0.01730775086893148]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_420",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6812149461369966, -43.88054910197773]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6812149461369966, -43.88054910197773]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_421",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.076953833555698, -5908.037996093704]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.076953833555698, -5908.037996093704]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_422",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.8256734627546336, -34.15460223471476]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8256734627546336, -34.15460223471476]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_423",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.254504251490639, -214.9542714211517]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.254504251490639, -214.9542714211517]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_424",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8470522723831951, 0.17633916091522872]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8470522723831951, 0.17633916091522872]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_425",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.2327554472851692, -50.49752913343791]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2327554472851692, -50.49752913343791]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_426",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-22.256262597388474, 4.732800703545907]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-22.256262597388474, 4.732800703545907]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_427",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.45945195622088475, -0.1017483054197307]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.45945195622088475, -0.1017483054197307]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_428",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.943171873968543, -0.8533583437488166]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.943171873968543, -0.8533583437488166]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_429",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.0808741384003664, 0.948371366180385]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0808741384003664, 0.948371366180385]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_430",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.1501570464305347, 0.0016330232218076113]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1501570464305347, 0.0016330232218076113]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_431",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.9163739875056774, 0.029545460946916253]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9163739875056774, 0.029545460946916253]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_432",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.1632554379236146, -58.813573618032834]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1632554379236146, -58.813573618032834]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_433",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.025595537475352852, 0.00010663091488658915]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.025595537475352852, 0.00010663091488658915]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_434",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.032039132337517984, -1.544175533821597]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.032039132337517984, -1.544175533821597]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_435",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3785051841085283, -1.654666881748469]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3785051841085283, -1.654666881748469]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_436",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.075192120537984, 1.968300695092175]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.075192120537984, 1.968300695092175]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_437",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.344575849667015, 0.23912546454431904]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.344575849667015, 0.23912546454431904]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_438",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5457629154623205, -0.09793577985639093]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5457629154623205, -0.09793577985639093]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_439",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3593530522478403, 0.08329849195562308]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3593530522478403, 0.08329849195562308]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_440",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2899901809173626, -0.20395340469571974]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2899901809173626, -0.20395340469571974]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_441",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[950.2662918768539, 1113.9199494278623]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[950.2662918768539, 1113.9199494278623]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_442",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.16578371326804145, -0.009786584154971432]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.16578371326804145, -0.009786584154971432]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_443",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5429393990801797, -5.422686975966469]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5429393990801797, -5.422686975966469]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_444",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.09676909866829171, -0.2846007419955708]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09676909866829171, -0.2846007419955708]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_445",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.682999918796892, 14.961516751021785]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.682999918796892, 14.961516751021785]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_446",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.135822451493877, -418.8780403615451]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.135822451493877, -418.8780403615451]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_447",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.85087666926108, -1.1160416382347016]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.85087666926108, -1.1160416382347016]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_448",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-82.08839341640933, -59.80645560723937]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-82.08839341640933, -59.80645560723937]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_449",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5117694872351973, -193.65414921644276]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5117694872351973, -193.65414921644276]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_450",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1938405439705042, -1.007549110369964]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1938405439705042, -1.007549110369964]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_451",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[25.370919459781593, -15.90346442517911]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[25.370919459781593, -15.90346442517911]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_452",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.13836170105825638, -0.731287551839253]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.13836170105825638, -0.731287551839253]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_453",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.011092674180691079, -7.32544603358918e-05]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.011092674180691079, -7.32544603358918e-05]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_454",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.22720803862710212, -0.18626101050609928]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22720803862710212, -0.18626101050609928]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_455",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.2732274290955496, 0.3447292448341954]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2732274290955496, 0.3447292448341954]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_456",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2871842161715989, -0.2946139665654067]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2871842161715989, -0.2946139665654067]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_457",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.5619575610823606, 0.04297935493433661]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5619575610823606, 0.04297935493433661]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_458",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.0959369577424573, -1761.3607553730255]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0959369577424573, -1761.3607553730255]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_459",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[14.105761418373321, -0.5260398023570949]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.105761418373321, -0.5260398023570949]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_460",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6033953471377459, -18.74622953774126]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6033953471377459, -18.74622953774126]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_461",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.1362712810129192, -0.8708889221279074]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1362712810129192, -0.8708889221279074]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_462",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.6565371395204367, 0.04344624673036193]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.6565371395204367, 0.04344624673036193]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_463",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.189307108162417, 0.5468301955556373]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.189307108162417, 0.5468301955556373]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_464",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.4324360800212614, -10.772766083001791]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4324360800212614, -10.772766083001791]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_465",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5154384183306001, -9446.83714095209]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5154384183306001, -9446.83714095209]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_466",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.860888845758288, -252.21551122839253]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.860888845758288, -252.21551122839253]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_467",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[183.59908154322895, -2451.213887578067]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[183.59908154322895, -2451.213887578067]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_468",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.027001816768544334, -0.07479063183115302]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.027001816768544334, -0.07479063183115302]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_469",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.45264157767663055, -0.14484979462384207]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.45264157767663055, -0.14484979462384207]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_470",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5766969374462095, -0.1297249206785191]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5766969374462095, -0.1297249206785191]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_471",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2897974492765965, -1.3014015777264396]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2897974492765965, -1.3014015777264396]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_472",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.20016160342475509, -4.657572850768395]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.20016160342475509, -4.657572850768395]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_473",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5198779742379679, -0.18990839007868837]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5198779742379679, -0.18990839007868837]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_474",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.2222014057056846, -136.58782636533954]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2222014057056846, -136.58782636533954]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_475",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.6585897955221338, -191.57729378979218]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6585897955221338, -191.57729378979218]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_476",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.08580267457256634, -0.1964425683318752]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08580267457256634, -0.1964425683318752]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_477",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.346957427583695, 0.7048290097773293]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.346957427583695, 0.7048290097773293]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_478",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2861105653167162, -0.5947723438495743]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2861105653167162, -0.5947723438495743]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_479",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.007997969492635537, -24132.69572284473]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.007997969492635537, -24132.69572284473]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_480",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.5590726315379637, -60.596956885688165]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.5590726315379637, -60.596956885688165]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_481",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4298457193687513, 0.014543695264457285]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4298457193687513, 0.014543695264457285]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_482",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.10647149651636467, -0.027010778510825083]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10647149651636467, -0.027010778510825083]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_483",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.29920714837592893, -191095.1049362123]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.29920714837592893, -191095.1049362123]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_484",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.9793969566700849, -0.3309775018813837]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9793969566700849, -0.3309775018813837]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_485",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.715296827531002, 0.013567891291733318]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.715296827531002, 0.013567891291733318]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_486",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3161136121897459, -7.140162800111451]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3161136121897459, -7.140162800111451]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_487",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[15.504411416166414, 10.271700039171256]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.504411416166414, 10.271700039171256]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_488",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4885656964027077, -6.055342345706967]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4885656964027077, -6.055342345706967]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_489",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[91.14888306259826, -47.138692115671994]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[91.14888306259826, -47.138692115671994]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_490",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.18664013763739798, -239.1621842611445]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18664013763739798, -239.1621842611445]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_491",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-225.3793063972375, -59.429908517575065]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-225.3793063972375, -59.429908517575065]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_492",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.14092767683766513, -0.6714446819985178]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.14092767683766513, -0.6714446819985178]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_493",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.177102126758425, -10.199120607660422]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.177102126758425, -10.199120607660422]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_494",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3319358326400275, -305.96184835426726]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3319358326400275, -305.96184835426726]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_495",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.903452940259963, 0.4030430675185723]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.903452940259963, 0.4030430675185723]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_496",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.10119195615525, 0.0437097620525164]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.10119195615525, 0.0437097620525164]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_497",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.6945180241911237, 0.014314505429311527]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.6945180241911237, 0.014314505429311527]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_498",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.08829137577487378, 0.0016593916189787047]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08829137577487378, 0.0016593916189787047]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_499",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.0204363744998666, -0.0015580690453463812]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0204363744998666, -0.0015580690453463812]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_500",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-73.76800808045898, 33.62324545415649]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-73.76800808045898, 33.62324545415649]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_501",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4568301668922641, 0.03684581221429019]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4568301668922641, 0.03684581221429019]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_502",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-17.762690151469624, 37.75853479161049]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.762690151469624, 37.75853479161049]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_503",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.05404373241861449, -0.07784253443352994]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05404373241861449, -0.07784253443352994]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_504",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[61.528603104462654, -904902.4742634447]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[61.528603104462654, -904902.4742634447]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_505",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8805568704690484, -2.7708387299576613]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8805568704690484, -2.7708387299576613]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_506",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.2354970981899082, -0.04293367634012164]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2354970981899082, -0.04293367634012164]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_507",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[321.2520377672506, -713.0666587277558]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[321.2520377672506, -713.0666587277558]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_508",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.18223694072678365, -460.8957330824627]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18223694072678365, -460.8957330824627]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_509",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6373775166966694, -807.6653571858108]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6373775166966694, -807.6653571858108]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_510",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.821019964105451, -30.967652308177072]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.821019964105451, -30.967652308177072]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_511",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.1999027445917522, 0.00278769763647016]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1999027445917522, 0.00278769763647016]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_512",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.38118687767796855, -240.8564956652197]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.38118687767796855, -240.8564956652197]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_513",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-43.00671851502933, -597.1215662865116]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-43.00671851502933, -597.1215662865116]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_514",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.0861457522799302, -0.08520565499051902]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0861457522799302, -0.08520565499051902]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_515",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.09509473400292061, -1956.8361091593479]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09509473400292061, -1956.8361091593479]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_516",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5360136909222321, -0.13511233259336508]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5360136909222321, -0.13511233259336508]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_517",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[70.90971801698545, 37.23586249066224]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[70.90971801698545, 37.23586249066224]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_518",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[215.11177898356644, 114.6430443231148]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[215.11177898356644, 114.6430443231148]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_519",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5256564636876971, -10.650720503768307]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5256564636876971, -10.650720503768307]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_520",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.04865391136022482, -64.13682687277081]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04865391136022482, -64.13682687277081]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_521",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.02596159684816879, -496.74732583896974]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.02596159684816879, -496.74732583896974]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_522",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3580443720148517, 0.027327963032774766]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3580443720148517, 0.027327963032774766]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_523",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.14745353002152553, -73.87379127378266]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.14745353002152553, -73.87379127378266]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_524",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3496517797822138, -1131.8206082836466]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3496517797822138, -1131.8206082836466]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_525",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6162151235751986, 0.09146590119606718]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6162151235751986, 0.09146590119606718]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_526",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.18999388652247742, -9.929218678053086]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18999388652247742, -9.929218678053086]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_527",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.1258108517596397, -11.827215951745146]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1258108517596397, -11.827215951745146]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_528",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5445438678477491, -6055.0584428323245]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5445438678477491, -6055.0584428323245]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_529",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.18354554925696, 0.35929404382115127]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.18354554925696, 0.35929404382115127]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_530",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.916308878286648, 7.867005534178667]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.916308878286648, 7.867005534178667]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_531",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.025786938631577144, -3.003074301648095]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.025786938631577144, -3.003074301648095]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_532",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.13657951453186068, -66.98307721192091]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.13657951453186068, -66.98307721192091]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_533",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.1652308640644347, -39.30077460102522]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1652308640644347, -39.30077460102522]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_534",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4921719051258127, 0.003934845400448235]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4921719051258127, 0.003934845400448235]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_535",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.5984430789745028, -254.17356067144013]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5984430789745028, -254.17356067144013]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_536",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.10117779738677764, -0.45530149429552347]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10117779738677764, -0.45530149429552347]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_537",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.9560417898750748, -0.4292984350633589]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9560417898750748, -0.4292984350633589]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_538",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8326414661894336, 0.1032210227499889]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8326414661894336, 0.1032210227499889]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_539",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.19958092203714073, 0.003851134270441245]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19958092203714073, 0.003851134270441245]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_540",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-21.677013298485942, 9.637410793305259]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-21.677013298485942, 9.637410793305259]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_541",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.48471831663695103, -0.32636279536711565]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.48471831663695103, -0.32636279536711565]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_542",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-173.8321525599297, 139.3353114779397]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-173.8321525599297, 139.3353114779397]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_543",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7717528485591029, 0.13086936006814104]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7717528485591029, 0.13086936006814104]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_544",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.0396979102572415, -6.081345142125578]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0396979102572415, -6.081345142125578]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_545",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.24717558186275, -3534.3436992276593]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.24717558186275, -3534.3436992276593]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_546",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0247369745252664, -2.589074311054265]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0247369745252664, -2.589074311054265]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_547",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-66.1338477025379, 47.311514515046426]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-66.1338477025379, 47.311514515046426]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_548",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8150496960187211, 0.13572854974550927]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8150496960187211, 0.13572854974550927]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_549",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.026318826392230415, -0.44339770239855375]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.026318826392230415, -0.44339770239855375]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_550",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.034690563518961014, -1.3769423929591025]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.034690563518961014, -1.3769423929591025]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_551",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.1567920806642666, -1.0259696785728738]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1567920806642666, -1.0259696785728738]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_552",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[77.47370615238843, 29.294261883037624]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[77.47370615238843, 29.294261883037624]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_553",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.31045977633644445, -7.463316651314208]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.31045977633644445, -7.463316651314208]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_554",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.681493560391492, 1.626044062617403]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.681493560391492, 1.626044062617403]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_555",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.594060801529794, 7.187219138006892]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.594060801529794, 7.187219138006892]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_556",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0492489530956786, -0.15241377673993517]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0492489530956786, -0.15241377673993517]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_557",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.01835437374141387, -0.014067910979378439]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.01835437374141387, -0.014067910979378439]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_558",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.21560169394004416, -0.1883679724562731]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.21560169394004416, -0.1883679724562731]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_559",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.0678776342405059, -0.057355993979329625]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0678776342405059, -0.057355993979329625]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_560",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.038397873934011, -7.35467424016266]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.038397873934011, -7.35467424016266]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_561",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8728213940287932, -0.028091458675431787]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8728213940287932, -0.028091458675431787]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_562",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.773063166724442, -0.1425860743656439]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.773063166724442, -0.1425860743656439]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_563",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.04784969703502662, -0.0004841166779847104]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04784969703502662, -0.0004841166779847104]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_564",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.24430242591755272, -0.0009531457787615959]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.24430242591755272, -0.0009531457787615959]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_565",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.5750466447190024, -674902.8913762865]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5750466447190024, -674902.8913762865]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_566",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.2614101209364923, -137.6733341754834]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2614101209364923, -137.6733341754834]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_567",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6521850236820134, -14.397030194572695]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6521850236820134, -14.397030194572695]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_568",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[21.073285580855796, 5.082764785797016]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[21.073285580855796, 5.082764785797016]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_569",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-27.226709311757023, -0.7978833766301965]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-27.226709311757023, -0.7978833766301965]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_570",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.495093498363699, -6.5614193009971915]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.495093498363699, -6.5614193009971915]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_571",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6117988169076067, -0.15690023623216393]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6117988169076067, -0.15690023623216393]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_572",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3275417571053933, -44.72843847385572]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3275417571053933, -44.72843847385572]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_573",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[37.64690915811858, 29.876236439514386]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[37.64690915811858, 29.876236439514386]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_574",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6913585267560757, -2.712003496544231]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6913585267560757, -2.712003496544231]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_575",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.33476258247539076, -1.8010987549723985]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.33476258247539076, -1.8010987549723985]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_576",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.10907203172220425, 0.00043949804519830725]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10907203172220425, 0.00043949804519830725]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_577",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[230.35888607421953, -142.71102783659936]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[230.35888607421953, -142.71102783659936]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_578",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-117.95700149987239, -49569.9282871584]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-117.95700149987239, -49569.9282871584]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_579",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.546385122021243, -0.8188748445936642]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.546385122021243, -0.8188748445936642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_580",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.010577054004214789, -0.7847455979393116]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.010577054004214789, -0.7847455979393116]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_581",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.35630653425951264, -134.1788010872543]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.35630653425951264, -134.1788010872543]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_582",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.09221460158575, -15.214184623518431]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.09221460158575, -15.214184623518431]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_583",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7332628231957208, -4254.60508464553]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7332628231957208, -4254.60508464553]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_584",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.1703616783555937, -27052.22468050548]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1703616783555937, -27052.22468050548]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_585",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.07165496390326849, -40.57435654141061]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07165496390326849, -40.57435654141061]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_586",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.241508568501466, 0.038448526910599544]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.241508568501466, 0.038448526910599544]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_587",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.454193986440388, 13.832427635973074]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.454193986440388, 13.832427635973074]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_588",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-74.1123251114907, -126.84893865780124]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-74.1123251114907, -126.84893865780124]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_589",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.08884017634854025, -0.10313213105495711]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08884017634854025, -0.10313213105495711]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_590",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.1311870991221338, 2.041869552025253]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.1311870991221338, 2.041869552025253]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_591",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.030169948754074676, -0.7360842260018837]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.030169948754074676, -0.7360842260018837]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_592",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.167744765040584, -3.0677968102942965]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.167744765040584, -3.0677968102942965]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_593",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.07883403204057167, -0.01995322085680242]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07883403204057167, -0.01995322085680242]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_594",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.32552978584962644, -465.667376343913]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.32552978584962644, -465.667376343913]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_595",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-28.47524581057111, 27.106901709351536]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-28.47524581057111, 27.106901709351536]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_596",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.11106432803380424, -2.687972542693748]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11106432803380424, -2.687972542693748]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_597",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3823226311697144, 0.036159898370836094]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3823226311697144, 0.036159898370836094]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_598",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.1354801988021452, 0.9409293427550438]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1354801988021452, 0.9409293427550438]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_599",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-117.25370618067808, -547.7825952871808]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-117.25370618067808, -547.7825952871808]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_600",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.6467955563310235, 1.1194815030952932]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.6467955563310235, 1.1194815030952932]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_601",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.611932240814443, 7.641484973354336]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.611932240814443, 7.641484973354336]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_602",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.830461873285092, -1.362462921166293]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.830461873285092, -1.362462921166293]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_603",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-46.6580042535605, -7.318342688429889]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-46.6580042535605, -7.318342688429889]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_604",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.288725029687478, -7.4997068968856695]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.288725029687478, -7.4997068968856695]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_605",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.5573060245742845, -3.3173206499793366]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.5573060245742845, -3.3173206499793366]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_606",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8777707750762157, 0.19237463253067555]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8777707750762157, 0.19237463253067555]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_607",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[18.002127663548944, -256.56722692213157]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[18.002127663548944, -256.56722692213157]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_608",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[67.18672242498688, -9.481215855608212]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[67.18672242498688, -9.481215855608212]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_609",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.372374602974074, -0.8066452214299256]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.372374602974074, -0.8066452214299256]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_610",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.948963651575808, -3.8521219869846743]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.948963651575808, -3.8521219869846743]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_611",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.6005213709345592, -529520.0967319016]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6005213709345592, -529520.0967319016]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_612",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.0467808068746396, 0.23442930114663701]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.0467808068746396, 0.23442930114663701]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_613",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.444497200277409, -95812.30531930296]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.444497200277409, -95812.30531930296]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_614",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.549619541991856, -0.4580156945753794]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.549619541991856, -0.4580156945753794]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_615",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3178058299204409, 0.006838321604284526]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3178058299204409, 0.006838321604284526]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_616",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.02189943392668973, -0.734167901950395]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.02189943392668973, -0.734167901950395]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_617",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.912458301690233, -6.615607960238879]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.912458301690233, -6.615607960238879]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_618",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.673891858942496, 0.6715076926977543]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.673891858942496, 0.6715076926977543]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_619",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.17268511293406585, -0.012906605659339699]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17268511293406585, -0.012906605659339699]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_620",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.7999886768713453, -7.067109366655346]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7999886768713453, -7.067109366655346]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_621",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.402921003968675, -51.94802240780809]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.402921003968675, -51.94802240780809]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_622",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2119952703250679, -408.97988821644736]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2119952703250679, -408.97988821644736]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_623",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.5578546454476765, -3.223003810304073]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.5578546454476765, -3.223003810304073]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_624",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.036982411527275, -849.9561701360362]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.036982411527275, -849.9561701360362]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_625",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.23659729650639258, -0.14514719367383638]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.23659729650639258, -0.14514719367383638]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_626",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.5073981377606616, -6.7731858895270625]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5073981377606616, -6.7731858895270625]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_627",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3523357337243886, -0.18314969762097683]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3523357337243886, -0.18314969762097683]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_628",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-723.4186730241166, 119121.42305516175]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-723.4186730241166, 119121.42305516175]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_629",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.6742461752711457, -53.9903302709748]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.6742461752711457, -53.9903302709748]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_630",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.7994885166508454, 1.0406849847184743]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.7994885166508454, 1.0406849847184743]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_631",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.42417680150623144, -11598.715423591037]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.42417680150623144, -11598.715423591037]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_632",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.970937629387614, 5.54413456855135]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.970937629387614, 5.54413456855135]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_633",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3633704892457881, -0.2837407878605474]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3633704892457881, -0.2837407878605474]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_634",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.139354710303921, -1.0229438398360473]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.139354710303921, -1.0229438398360473]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_635",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.750838687841381, 2.5554633141701424]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.750838687841381, 2.5554633141701424]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_636",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7133948129356771, 0.06146712385498296]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7133948129356771, 0.06146712385498296]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_637",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.264323800038386, -103.92412127711785]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.264323800038386, -103.92412127711785]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_638",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.14459954667660999, 0.0029287751166879265]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.14459954667660999, 0.0029287751166879265]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_639",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.014149888855710483, -0.008673125904927637]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.014149888855710483, -0.008673125904927637]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_640",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-15.19713738319347, -316527.6568819353]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.19713738319347, -316527.6568819353]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_641",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.29899842546706207, -7.235039332795585]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.29899842546706207, -7.235039332795585]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_642",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.9963823089798625, -0.1496390672209846]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9963823089798625, -0.1496390672209846]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_643",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.09613760459523306, -1.27317086686212]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09613760459523306, -1.27317086686212]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_644",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.40618881194214734, 0.01272830640970399]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.40618881194214734, 0.01272830640970399]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_645",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6799040539885869, 0.09545738046924626]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6799040539885869, 0.09545738046924626]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_646",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4499912036084373, -1.1957331065335652]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4499912036084373, -1.1957331065335652]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_647",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[429.8210876713038, -137.7861153148548]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[429.8210876713038, -137.7861153148548]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_648",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[21.09351645021488, -3.9500234148383297]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[21.09351645021488, -3.9500234148383297]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_649",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.0670972996217137, -3.192135968241609]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0670972996217137, -3.192135968241609]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_650",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4633534331185321, 0.018542600909261214]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4633534331185321, 0.018542600909261214]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_651",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4538560930858049, -22.2577131367462]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4538560930858049, -22.2577131367462]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_652",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.04482513516391625, -0.6472020894653786]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04482513516391625, -0.6472020894653786]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_653",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8926038929872168, 0.19916502565604138]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8926038929872168, 0.19916502565604138]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_654",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.14954546990016393, -0.29704942234976367]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.14954546990016393, -0.29704942234976367]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_655",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.20345198395517014, -18.165118206508932]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.20345198395517014, -18.165118206508932]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_656",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.501749825187716, 0.5223688856540467]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.501749825187716, 0.5223688856540467]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_657",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.03478176512585, -0.6854142824580762]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.03478176512585, -0.6854142824580762]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_658",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.08594266226084302, -0.04295094095739278]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08594266226084302, -0.04295094095739278]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_659",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.08345295271027979, -790.8072523565237]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08345295271027979, -790.8072523565237]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_660",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.5283303104865062, 3.0503844280103483]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.5283303104865062, 3.0503844280103483]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_661",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6282241395115259, -0.10736206640702116]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6282241395115259, -0.10736206640702116]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_662",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.0027074081193552146, -11.437038134545162]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0027074081193552146, -11.437038134545162]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_663",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.387081826373675, 0.4255713484244217]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.387081826373675, 0.4255713484244217]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_664",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.1289139078972084, -1.6458600666719856]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.1289139078972084, -1.6458600666719856]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_665",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-173.7790254914158, 175.12201792376598]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-173.7790254914158, 175.12201792376598]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_666",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[56.30232742162806, -16.82548097199549]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[56.30232742162806, -16.82548097199549]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_667",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.068984133400745, 0.6687801767631117]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.068984133400745, 0.6687801767631117]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_668",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.19976004790881227, -0.11955428177225268]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19976004790881227, -0.11955428177225268]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_669",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.833364436807512, 22.69439545376813]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.833364436807512, 22.69439545376813]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_670",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3137242238083833, -14.390676664220724]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3137242238083833, -14.390676664220724]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_671",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.021605664249349104, -98.83148183474785]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.021605664249349104, -98.83148183474785]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_672",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8529780741935481, -3.166484244170813]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8529780741935481, -3.166484244170813]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_673",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.13203330672035052, -0.2922078597234422]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.13203330672035052, -0.2922078597234422]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_674",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.946131486021637, -13.551861035270349]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.946131486021637, -13.551861035270349]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_675",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.362084507935257, 0.28377620631713096]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.362084507935257, 0.28377620631713096]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_676",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[23.81511280061001, 118.08554514478165]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[23.81511280061001, 118.08554514478165]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_677",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5957467790843246, -0.8708020650135485]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5957467790843246, -0.8708020650135485]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_678",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.1111963762124977, 0.19699482093915302]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.1111963762124977, 0.19699482093915302]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_679",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.633719368140255, -191.6003472697558]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.633719368140255, -191.6003472697558]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_680",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.9839783515199503, -10.7078170162787]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9839783515199503, -10.7078170162787]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_681",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.11918580796301081, -0.007153128047357582]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11918580796301081, -0.007153128047357582]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_682",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.220620590506774, -0.8543920169475072]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.220620590506774, -0.8543920169475072]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_683",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.05038849872731643, -0.015198206526899736]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05038849872731643, -0.015198206526899736]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_684",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5384329732837516, 0.02496019270405629]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5384329732837516, 0.02496019270405629]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_685",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.2034484723551278, -15.924369170279508]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.2034484723551278, -15.924369170279508]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_686",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-25.01900185105949, -235.7122901235468]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-25.01900185105949, -235.7122901235468]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_687",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.196627277274967, -8829.893854077669]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.196627277274967, -8829.893854077669]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_688",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.28658863684645713, -0.015818124734447204]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.28658863684645713, -0.015818124734447204]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_689",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-17.62875727196697, -144.22761592681974]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.62875727196697, -144.22761592681974]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_690",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.05035362886230699, -0.32786385782548244]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05035362886230699, -0.32786385782548244]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_691",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.0034669935571594777, -1.2669357541285708]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0034669935571594777, -1.2669357541285708]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_692",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.86987282393557, 3.948073586802397]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.86987282393557, 3.948073586802397]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_693",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.148657714995881, -139.45590644296698]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.148657714995881, -139.45590644296698]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_694",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.83691753586272, -27.228958793157688]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.83691753586272, -27.228958793157688]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_695",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.09145284671144542, -0.1028859772285518]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09145284671144542, -0.1028859772285518]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_696",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.85481592644853, -74177.38116553526]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.85481592644853, -74177.38116553526]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_697",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-19.083782366184426, 2.8389420367064426]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-19.083782366184426, 2.8389420367064426]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_698",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-13.129063494880628, 12.669229179705688]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.129063494880628, 12.669229179705688]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_699",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.79178711581971, 0.9063288646116696]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.79178711581971, 0.9063288646116696]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_700",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.5625502563406302, -1.146510474711636]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5625502563406302, -1.146510474711636]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_701",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.17198699415651633, -5.928114804331834]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17198699415651633, -5.928114804331834]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_702",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-39.704649054735754, 304.48507722040995]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-39.704649054735754, 304.48507722040995]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_703",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[20.759601319881657, -3.8611934650357362]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[20.759601319881657, -3.8611934650357362]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_704",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.230826535395229, -6.304656556332965]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.230826535395229, -6.304656556332965]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_705",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.7951410364142815, -1.0787518274781802]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.7951410364142815, -1.0787518274781802]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_706",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-17.6611865565868, 46.379616359504354]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.6611865565868, 46.379616359504354]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_707",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.08895064776818502, -0.893982287251534]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08895064776818502, -0.893982287251534]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_708",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8365653929252304, 0.14663535952306248]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8365653929252304, 0.14663535952306248]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_709",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4335389759318396, -17979.836003399527]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4335389759318396, -17979.836003399527]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_710",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.05110329518849377, -3.2522817960659887]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05110329518849377, -3.2522817960659887]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_711",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[149.3091398189134, -1691.8109876841777]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[149.3091398189134, -1691.8109876841777]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_712",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.2603438386627304, -0.6820723524725181]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2603438386627304, -0.6820723524725181]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_713",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.307205582289013, 1.431806393966766]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.307205582289013, 1.431806393966766]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_714",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.036281343927798, -1.6990365574265494]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.036281343927798, -1.6990365574265494]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_715",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-22.99856094952199, -113.44747650557042]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-22.99856094952199, -113.44747650557042]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_716",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.00047010415906800773, -682.4136330022507]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.00047010415906800773, -682.4136330022507]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_717",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5908541189233995, -2.018972284476991]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5908541189233995, -2.018972284476991]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_718",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.0840104430081982, -4.963340546042831]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0840104430081982, -4.963340546042831]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_719",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3343803623093858, -383.8326774612067]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3343803623093858, -383.8326774612067]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_720",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.10590705781955696, -0.007594830994911605]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10590705781955696, -0.007594830994911605]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_721",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.228147233260493, -30.200073152699442]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.228147233260493, -30.200073152699442]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_722",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-20.89841544715324, 0.6286184380990223]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-20.89841544715324, 0.6286184380990223]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_723",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.230087338272984, -0.008426290625326814]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.230087338272984, -0.008426290625326814]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_724",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.055544112302722125, -0.050691453433581876]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.055544112302722125, -0.050691453433581876]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_725",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.1909647002652552, 0.28653641456932516]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.1909647002652552, 0.28653641456932516]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_726",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6143809104279803, -2.9445391730706656]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6143809104279803, -2.9445391730706656]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_727",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.06636091351297191, -8.852687310047438]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06636091351297191, -8.852687310047438]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_728",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.11623455066458144, -0.17868969502106596]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11623455066458144, -0.17868969502106596]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_729",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3208674366643148, -5.917295787334082]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3208674366643148, -5.917295787334082]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_730",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7221076900499196, 0.11903095645849676]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7221076900499196, 0.11903095645849676]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_731",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.0001818060589131587, -0.02938944984277093]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0001818060589131587, -0.02938944984277093]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_732",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5397526147766224, -30.07564872495339]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5397526147766224, -30.07564872495339]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_733",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.3968455304110847, -188.5996112922337]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.3968455304110847, -188.5996112922337]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_734",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8089974649585866, 0.16133794731884915]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8089974649585866, 0.16133794731884915]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_735",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5828710087566508, -967.3116923358837]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5828710087566508, -967.3116923358837]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_736",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3178638166566916, -2.6480057168519724]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3178638166566916, -2.6480057168519724]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_737",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8296191342837851, -118.76485067444483]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8296191342837851, -118.76485067444483]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_738",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-21.470715074604254, -1.1943732270116205]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-21.470715074604254, -1.1943732270116205]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_739",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.34578793865418705, 0.01623275567539833]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.34578793865418705, 0.01623275567539833]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_740",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3634711108860113, -0.26387194224301436]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3634711108860113, -0.26387194224301436]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_741",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.18697019427960493, -0.7060796091164971]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18697019427960493, -0.7060796091164971]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_742",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-259.6542185579844, 194.50190082755316]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-259.6542185579844, 194.50190082755316]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_743",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3069693771195892, -47.25306798866706]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3069693771195892, -47.25306798866706]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_744",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.36007712784908, 1.6507836757621324]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.36007712784908, 1.6507836757621324]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_745",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.13528823880637578, -1.1413570509524213]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.13528823880637578, -1.1413570509524213]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_746",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.29830003001240474, -0.31692618205924616]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.29830003001240474, -0.31692618205924616]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_747",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.048775646800418, 0.034289719156440926]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.048775646800418, 0.034289719156440926]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_748",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5844738153213976, -30.325827521284076]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5844738153213976, -30.325827521284076]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_749",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-23.22932470714909, -1.9551850145229228]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-23.22932470714909, -1.9551850145229228]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_750",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.03995831074484372, -0.18035612730313116]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03995831074484372, -0.18035612730313116]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_751",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-111.89825826800892, 307.1835649769437]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-111.89825826800892, 307.1835649769437]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_752",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.7557141412737094, -13144.38624141841]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7557141412737094, -13144.38624141841]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_753",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-582.0670575714827, 10492.93910249739]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-582.0670575714827, 10492.93910249739]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_754",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.19644866927080584, -0.11441358633296944]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19644866927080584, -0.11441358633296944]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_755",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.1945127551847996, -1198.2818654103912]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.1945127551847996, -1198.2818654103912]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_756",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.007776994871383651, -0.09063645084397096]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.007776994871383651, -0.09063645084397096]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_757",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.0197041698894704, -10.93552175663151]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.0197041698894704, -10.93552175663151]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_758",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1894598563093541, -0.18664974011680055]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1894598563093541, -0.18664974011680055]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_759",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7368493898124954, -0.5918125653399837]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7368493898124954, -0.5918125653399837]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_760",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.252509892932746, 36.055661036087685]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.252509892932746, 36.055661036087685]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_761",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4664356113067772, -7.906134273148673]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4664356113067772, -7.906134273148673]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_762",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.2764570722547037, -8.876136720128851]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.2764570722547037, -8.876136720128851]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_763",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.375075860830746, 0.17192969938567454]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.375075860830746, 0.17192969938567454]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_764",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.2529193388355553, -238.83443100335765]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2529193388355553, -238.83443100335765]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_765",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.40366878617519575, -0.028950440311450963]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.40366878617519575, -0.028950440311450963]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_766",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6715693517824044, -69.99558902547372]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6715693517824044, -69.99558902547372]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_767",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.767457113923709, -5162.6980451255295]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.767457113923709, -5162.6980451255295]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_768",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4304168144672686, -0.664097372936054]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4304168144672686, -0.664097372936054]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_769",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.03332605351272363, -0.3014653010633792]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03332605351272363, -0.3014653010633792]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_770",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.2970695679459394, 0.16147235969418094]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2970695679459394, 0.16147235969418094]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_771",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.5166205829291015, -1.6644911788174548]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.5166205829291015, -1.6644911788174548]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_772",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3413688595187366, -0.1288368410550803]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3413688595187366, -0.1288368410550803]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_773",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.90899839769678, -524.8053954707951]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.90899839769678, -524.8053954707951]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_774",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.3911550537824784, -638.7188254155183]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.3911550537824784, -638.7188254155183]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_775",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.03293999744596595, -0.8768599559502412]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03293999744596595, -0.8768599559502412]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_776",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7298406062101117, -0.029349494864168674]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7298406062101117, -0.029349494864168674]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_777",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.4998038808768597, -1.2968955856547275]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4998038808768597, -1.2968955856547275]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_778",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.072635128167752, 11.830935566976219]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.072635128167752, 11.830935566976219]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_779",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.8912230165585753, -0.14315941787280986]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8912230165585753, -0.14315941787280986]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_780",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7729476834108588, 0.11909766428386387]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7729476834108588, 0.11909766428386387]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_781",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.901896390887382, 24.311345211214107]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.901896390887382, 24.311345211214107]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_782",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3517795250970777, -0.6722052698438847]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3517795250970777, -0.6722052698438847]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_783",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.005025551764343383, -6.481528637265204]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.005025551764343383, -6.481528637265204]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_784",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.34437347439527627, -72.50605803226965]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.34437347439527627, -72.50605803226965]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_785",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.35156936470329264, -0.6557119299059815]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.35156936470329264, -0.6557119299059815]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_786",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.115014817649816, -0.9366737818539532]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.115014817649816, -0.9366737818539532]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_787",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.251359089734428, 3.590465809643923]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.251359089734428, 3.590465809643923]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_788",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-13.81427996906793, 17.599271641179932]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.81427996906793, 17.599271641179932]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_789",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3148634301796318, -0.10859310327643934]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3148634301796318, -0.10859310327643934]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_790",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.2709608251490307, -1.4957415401401368]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2709608251490307, -1.4957415401401368]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_791",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.1727546547470047, 0.16517017147491594]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1727546547470047, 0.16517017147491594]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_792",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.14757535942821276, -74.18755102553897]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.14757535942821276, -74.18755102553897]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_793",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8375733601818757, 0.14819864668048824]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8375733601818757, 0.14819864668048824]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_794",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6803247311957986, -3.0124945449258744]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6803247311957986, -3.0124945449258744]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_795",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.20309659747710085, -5.015836010395727]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.20309659747710085, -5.015836010395727]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_796",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.0006828610331781615, -0.006853213951061589]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0006828610331781615, -0.006853213951061589]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_797",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.191728450955812, -1.8466687835896645]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.191728450955812, -1.8466687835896645]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_798",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.844700722645455, 1.7617122720487286]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.844700722645455, 1.7617122720487286]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_799",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.5136600738378374, 1.7731885863611918]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.5136600738378374, 1.7731885863611918]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_800",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.15893031031574853, -20270.82188619974]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.15893031031574853, -20270.82188619974]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_801",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.0727839361567177, 1.054721948230024]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0727839361567177, 1.054721948230024]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_802",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.22235835431799664, -1.7427740562499376]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.22235835431799664, -1.7427740562499376]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_803",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-36.07378787561096, -674.8462376178707]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-36.07378787561096, -674.8462376178707]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_804",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[19.88851804916195, -2.3777736721192144]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[19.88851804916195, -2.3777736721192144]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_805",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.8073135706561525, -2163.439365141596]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8073135706561525, -2163.439365141596]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_806",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.09576026913121116, -0.4422015063337341]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09576026913121116, -0.4422015063337341]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_807",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3783372672841632, -586.5885615096968]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3783372672841632, -586.5885615096968]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_808",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.4589389377702708, -1.765489766127031]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4589389377702708, -1.765489766127031]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_809",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.20770861329361048, -9.385208362368298]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.20770861329361048, -9.385208362368298]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_810",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8537521232278503, -0.7271148886288781]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8537521232278503, -0.7271148886288781]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_811",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.09556070522178343, -0.11917356110030553]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09556070522178343, -0.11917356110030553]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_812",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.08548370613442091, -0.048049383395248474]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08548370613442091, -0.048049383395248474]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_813",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[182.41750640725942, 94.70202560972629]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[182.41750640725942, 94.70202560972629]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_814",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.235202690689775, -0.335803067048855]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.235202690689775, -0.335803067048855]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_815",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.045830411624549004, -262.1757739526383]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.045830411624549004, -262.1757739526383]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_816",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.15967767585109374, -93.08078611717262]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.15967767585109374, -93.08078611717262]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_817",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[53.332985922281814, -18.64181264545862]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[53.332985922281814, -18.64181264545862]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_818",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.538087963982837, 0.5294018180005172]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.538087963982837, 0.5294018180005172]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_819",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.5442360495889123, -0.15302513372949875]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.5442360495889123, -0.15302513372949875]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_820",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.882007221831998, -7.862325544175848]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.882007221831998, -7.862325544175848]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_821",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.496409442063044, -702.2435919913034]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.496409442063044, -702.2435919913034]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_822",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.24838798554975447, -378.9425653860278]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.24838798554975447, -378.9425653860278]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_823",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.1264275130675757, -12.436652669879049]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1264275130675757, -12.436652669879049]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_824",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.2853002672880345, -5.698907379992455]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2853002672880345, -5.698907379992455]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_825",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[14.498204381612693, -45.15993461266467]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.498204381612693, -45.15993461266467]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_826",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-56.99522415647087, 346.5796885384155]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-56.99522415647087, 346.5796885384155]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_827",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.07083858807792869, -4.985931335933965]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07083858807792869, -4.985931335933965]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_828",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.5444052504127788, -4.591665708093276]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5444052504127788, -4.591665708093276]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_829",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.538456394215589, 3.145761710886512]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.538456394215589, 3.145761710886512]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_830",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.1239769675201945, 0.8365181482682593]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1239769675201945, 0.8365181482682593]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_831",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.6684246622857555, 0.7797836338203221]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.6684246622857555, 0.7797836338203221]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_832",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.1042490566278675, -0.36442716850768503]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1042490566278675, -0.36442716850768503]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_833",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.11870005690905927, -91.1892214627723]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11870005690905927, -91.1892214627723]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_834",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.274036509086513, 0.07430661250262074]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.274036509086513, 0.07430661250262074]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_835",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5574264944707359, 0.06648915823198633]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5574264944707359, 0.06648915823198633]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_836",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3959919297937302, 0.021571786681462892]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3959919297937302, 0.021571786681462892]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_837",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-13.609811212419102, -129.17296230107587]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.609811212419102, -129.17296230107587]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_838",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3705165288046473, 0.030831376107951718]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3705165288046473, 0.030831376107951718]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_839",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.10297880235886174, -29.525330068665635]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10297880235886174, -29.525330068665635]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_840",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[24.187227273041557, -167.84647548247048]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[24.187227273041557, -167.84647548247048]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_841",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.300232959389914, -1.243448405742006]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.300232959389914, -1.243448405742006]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_842",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4613129923591524, -10.85657516473076]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4613129923591524, -10.85657516473076]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_843",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.7308297113678621, -0.13548619060790776]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7308297113678621, -0.13548619060790776]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_844",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[20.806452677857987, -995.88916364945]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[20.806452677857987, -995.88916364945]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_845",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6590593515724037, -0.9376637225087873]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6590593515724037, -0.9376637225087873]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_846",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.0936210667267711, -0.3081477013393239]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0936210667267711, -0.3081477013393239]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_847",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-63.58975901851034, -2442.6313576494176]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-63.58975901851034, -2442.6313576494176]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_848",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.72857368790835, -2.5134901665764904]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.72857368790835, -2.5134901665764904]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_849",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.4170379635054757, 0.06280480513406683]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4170379635054757, 0.06280480513406683]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_850",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.11607873573759438, -0.1417611496675389]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11607873573759438, -0.1417611496675389]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_851",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0919191038358813, -17.914761092014004]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0919191038358813, -17.914761092014004]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_852",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3117773426319206, -0.04756974321285909]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3117773426319206, -0.04756974321285909]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_853",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5734093319102923, -0.45473350093700915]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5734093319102923, -0.45473350093700915]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_854",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3902117621287841, 0.013394402244298094]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3902117621287841, 0.013394402244298094]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_855",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.14068056881771404, -0.39428941177025156]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.14068056881771404, -0.39428941177025156]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_856",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.15675063255409194, -105.93983153378059]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.15675063255409194, -105.93983153378059]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_857",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6467825968366182, -0.9107805520285388]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6467825968366182, -0.9107805520285388]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_858",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.5443873784139106, -71.94692927584512]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5443873784139106, -71.94692927584512]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_859",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.918685250014462, 16.663661684782966]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.918685250014462, 16.663661684782966]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_860",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.08309287195406978, -0.004372144687112815]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08309287195406978, -0.004372144687112815]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_861",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.073352980835083, 0.6554644082382741]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.073352980835083, 0.6554644082382741]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_862",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.9853815776405637, -0.635553024502781]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9853815776405637, -0.635553024502781]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_863",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.74021547518895, 0.29779781414119566]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.74021547518895, 0.29779781414119566]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_864",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.501124031237254, -70.0575667943922]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.501124031237254, -70.0575667943922]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_865",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8984416785438034, 0.11606098650837482]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8984416785438034, 0.11606098650837482]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_866",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.312768688441736, 1.9244665195155835]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.312768688441736, 1.9244665195155835]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_867",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6866526183951205, -5.90193196738978]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6866526183951205, -5.90193196738978]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_868",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.06144972379293797, -1489.1133876164358]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06144972379293797, -1489.1133876164358]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_869",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.561929493635343, -21179.9064244525]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.561929493635343, -21179.9064244525]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_870",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.1954145466710208, -0.008744360324661034]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1954145466710208, -0.008744360324661034]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_871",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.08131380660372127, -0.438446085467928]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08131380660372127, -0.438446085467928]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_872",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.8244474723997621, -339.13836832847375]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8244474723997621, -339.13836832847375]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_873",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.8222685203431936, -11.889957419766574]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8222685203431936, -11.889957419766574]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_874",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.782060952902898, 0.5676446882228072]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.782060952902898, 0.5676446882228072]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_875",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.591542252830217, -0.07863297400161841]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.591542252830217, -0.07863297400161841]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_876",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5226776016432737, -17.89142581653721]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5226776016432737, -17.89142581653721]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_877",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.04312213674239788, -25.629126833503282]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04312213674239788, -25.629126833503282]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_878",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.024170523964461326, -0.0026029356474715866]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.024170523964461326, -0.0026029356474715866]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_879",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.2016235716327092, -256.3950271617953]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2016235716327092, -256.3950271617953]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_880",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[28.102850337565894, 1.4054125935343111]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[28.102850337565894, 1.4054125935343111]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_881",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.0250117986679217, 0.2631764258672277]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0250117986679217, 0.2631764258672277]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_882",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.013114851349447306, -733.9624818985656]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.013114851349447306, -733.9624818985656]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_883",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.7505228974385365, 0.7066101900976725]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.7505228974385365, 0.7066101900976725]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_884",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-71.64324834083281, 363.2651294825499]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-71.64324834083281, 363.2651294825499]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_885",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-52.429036806645314, -82399.53069728886]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-52.429036806645314, -82399.53069728886]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_886",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.0021405174293634, 0.2510527610640597]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0021405174293634, 0.2510527610640597]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_887",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-10.13428546047241, 5.806121047905772]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.13428546047241, 5.806121047905772]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_888",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.44897587264096206, 0.036642498826577]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.44897587264096206, 0.036642498826577]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_889",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.05197787753231409, -0.01937216671440491]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05197787753231409, -0.01937216671440491]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_890",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.37416338467823, -0.19150599025623904]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.37416338467823, -0.19150599025623904]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_891",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.012573258881254082, -0.8878968159555239]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.012573258881254082, -0.8878968159555239]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_892",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.04082735223646505, -3.1037960040390393]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04082735223646505, -3.1037960040390393]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_893",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.7208442879718067, -0.346692373057804]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7208442879718067, -0.346692373057804]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_894",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-26.883727613684048, -2421.3366298154597]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-26.883727613684048, -2421.3366298154597]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_895",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.6593358555854043, -1.1611931676885292]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.6593358555854043, -1.1611931676885292]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_896",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.05597281122264963, -0.0017910643750162093]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05597281122264963, -0.0017910643750162093]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_897",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.46329337672775467, -2.485313543319312]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.46329337672775467, -2.485313543319312]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_898",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3346471179955957, -0.24665772309298478]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3346471179955957, -0.24665772309298478]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_899",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1955486761274112, -45.44002172277197]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1955486761274112, -45.44002172277197]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_900",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.714469500073532, -175.97146799128808]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.714469500073532, -175.97146799128808]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_901",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.9272173256803864, 1.7253142922900837]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.9272173256803864, 1.7253142922900837]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_902",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.726923040528022, -8.410516183301715]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.726923040528022, -8.410516183301715]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_903",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.3040940709344535, -186.9989848737889]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.3040940709344535, -186.9989848737889]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_904",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7433693829949273, -90.79988034603775]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7433693829949273, -90.79988034603775]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_905",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.4719474555792864, 0.07672690352083812]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4719474555792864, 0.07672690352083812]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_906",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.2645994281173008, 0.04877079021122049]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.2645994281173008, 0.04877079021122049]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_907",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3399375393181325, 0.33748917665084277]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3399375393181325, 0.33748917665084277]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_908",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.9850100952726997, -50.04148307860392]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9850100952726997, -50.04148307860392]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_909",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.037664772178382856, -1.238773827125491]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.037664772178382856, -1.238773827125491]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_910",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-95.00151196708045, -109.83906878372784]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-95.00151196708045, -109.83906878372784]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_911",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.530169528884143, -4.116824171691444]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.530169528884143, -4.116824171691444]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_912",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.2525416976312833, -27048.7424505236]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.2525416976312833, -27048.7424505236]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_913",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.9384550090585921, -1.5502563993259897]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9384550090585921, -1.5502563993259897]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_914",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.023603824425204884, 9.585046054139571e-05]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.023603824425204884, 9.585046054139571e-05]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_915",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.2500606326035193, -0.02329157158047987]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2500606326035193, -0.02329157158047987]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_916",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.276637536795434, 0.06674981866413937]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.276637536795434, 0.06674981866413937]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_917",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.019031826393805, 21.681134111127037]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.019031826393805, 21.681134111127037]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_918",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.323791910815268, 0.8236659500599892]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.323791910815268, 0.8236659500599892]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_919",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-27.82932371134038, 140.1974683941347]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-27.82932371134038, 140.1974683941347]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_920",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.7614596172281853, -9.714092167610247]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7614596172281853, -9.714092167610247]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_921",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.32665695070714995, -50450.99537576167]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.32665695070714995, -50450.99537576167]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_922",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6268864242134069, 0.04848138253333402]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6268864242134069, 0.04848138253333402]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_923",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.06863539133247139, -0.005477450164139355]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06863539133247139, -0.005477450164139355]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_924",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.9449404346787615, -2.447367220914009]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9449404346787615, -2.447367220914009]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_925",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.792272827279609, 2.220369179882241]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.792272827279609, 2.220369179882241]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_926",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7123449859844112, -4038.0878539892938]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7123449859844112, -4038.0878539892938]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_927",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.5389270874099195, -862625.7716820644]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5389270874099195, -862625.7716820644]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_928",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9390630592221741, -0.3278687802781006]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9390630592221741, -0.3278687802781006]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_929",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.005041954735498215, -0.6049413145439898]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.005041954735498215, -0.6049413145439898]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_930",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[100.62564865973326, -29.023512734695416]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[100.62564865973326, -29.023512734695416]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_931",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3068357481455168, -6.3475384864756155]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3068357481455168, -6.3475384864756155]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_932",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5201363450742417, -4.1372885816548]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5201363450742417, -4.1372885816548]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_933",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.09189894315873137, -44.17871735758614]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09189894315873137, -44.17871735758614]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_934",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.543104489429133, -1.0686766456048074]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.543104489429133, -1.0686766456048074]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_935",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7608856932319664, -62.51097371653097]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7608856932319664, -62.51097371653097]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_936",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3232979050336413, -316.03880704695837]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3232979050336413, -316.03880704695837]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_937",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3375377907546861, -14.91335355635911]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3375377907546861, -14.91335355635911]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_938",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.026275203884779035, -25.92535128699196]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.026275203884779035, -25.92535128699196]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_939",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8949424437502191, -0.6956660042375873]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8949424437502191, -0.6956660042375873]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_940",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.1545024216274935, -0.02011641667596325]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1545024216274935, -0.02011641667596325]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_941",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-84.38813297767827, -75.4168833431952]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-84.38813297767827, -75.4168833431952]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_942",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.656377847220945, 2.0112012916698423]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.656377847220945, 2.0112012916698423]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_943",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.46881643126680067, -7788.691102525444]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.46881643126680067, -7788.691102525444]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_944",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3636601472034569, -242.9248059308211]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3636601472034569, -242.9248059308211]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_945",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.1576247849326168, -9.825033433343625]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1576247849326168, -9.825033433343625]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_946",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.48824481350703525, -6.450498137241479]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.48824481350703525, -6.450498137241479]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_947",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4450395095008606, 0.03663115144971052]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4450395095008606, 0.03663115144971052]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_948",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-40.35506386312714, -59.77143746874212]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-40.35506386312714, -59.77143746874212]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_949",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2635533078176526, -1.4590854138598761]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2635533078176526, -1.4590854138598761]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_950",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.08951230241038344, -0.07420543529068563]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08951230241038344, -0.07420543529068563]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_951",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.06782457485618165, -0.28510091484308697]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06782457485618165, -0.28510091484308697]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_952",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.83081126824023, -17.093561300316715]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.83081126824023, -17.093561300316715]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_953",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8735246851804854, -13.532040240099375]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8735246851804854, -13.532040240099375]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_954",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.37863020285872856, -64.32469984269322]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.37863020285872856, -64.32469984269322]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_955",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6163044517770101, -0.7922504841314083]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6163044517770101, -0.7922504841314083]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_956",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.32125240361888135, -17.810015135744298]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.32125240361888135, -17.810015135744298]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_957",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[26.156050968593494, -10.04219656197918]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[26.156050968593494, -10.04219656197918]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_958",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.851669711429281, -1.6902815514420453]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.851669711429281, -1.6902815514420453]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_959",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.13968494319001076, -454.46973830567754]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.13968494319001076, -454.46973830567754]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_960",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.11473866732608602, -96.05400456015758]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11473866732608602, -96.05400456015758]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_961",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.031206820618539115, -0.22760223394806745]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.031206820618539115, -0.22760223394806745]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_962",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.6208321717632506, -352.30724167836894]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6208321717632506, -352.30724167836894]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_963",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.9552348729484335, -0.45925641732439215]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.9552348729484335, -0.45925641732439215]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_964",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.532271342348782, 3.242809458580275]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.532271342348782, 3.242809458580275]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_965",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.0901367653591989, -2.8763398615107274]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0901367653591989, -2.8763398615107274]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_966",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.049955688060091, -1.0501573167067912]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.049955688060091, -1.0501573167067912]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_967",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.7515929497840084, -0.09833985291432484]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.7515929497840084, -0.09833985291432484]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_968",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1712389414175768, -59.23935708004916]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1712389414175768, -59.23935708004916]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_969",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.9697144455474954, 0.07975992044734015]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9697144455474954, 0.07975992044734015]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_970",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8848523072112041, -18.999372851860493]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8848523072112041, -18.999372851860493]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_971",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5525985600695265, -13513.956939311414]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5525985600695265, -13513.956939311414]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_972",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3889595811786107, -28.42288969559702]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3889595811786107, -28.42288969559702]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_973",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[54.120806460300834, 4.620237810897259]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[54.120806460300834, 4.620237810897259]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_974",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.05927572090297802, -0.9750653858610466]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05927572090297802, -0.9750653858610466]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_975",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.5682378062802942, -15.536914650594518]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5682378062802942, -15.536914650594518]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_976",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[15.201983001018727, -0.5914548806421507]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.201983001018727, -0.5914548806421507]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_977",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.004988034794618, -0.4787984273961084]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.004988034794618, -0.4787984273961084]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_978",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.04681835230441463, -2056.5917266750357]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04681835230441463, -2056.5917266750357]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_979",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-423.15501611016765, 28830.532377480347]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-423.15501611016765, 28830.532377480347]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_980",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[37.5958357507622, 150.2874972577681]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[37.5958357507622, 150.2874972577681]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_981",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.024977856538478987, -0.2538629623679196]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.024977856538478987, -0.2538629623679196]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_982",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.07069744015426327, -0.012195189511618187]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07069744015426327, -0.012195189511618187]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_983",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5267522938714445, -0.06260691873131301]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5267522938714445, -0.06260691873131301]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_984",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.6494446539711294, -1.615818618293033]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6494446539711294, -1.615818618293033]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_985",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.07246154424812112, -0.0006670809625932061]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07246154424812112, -0.0006670809625932061]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_986",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.8696968379660324, 0.615047144084343]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.8696968379660324, 0.615047144084343]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_987",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.2589213020466206, 0.39621676548477003]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2589213020466206, 0.39621676548477003]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_988",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-46.69984188945653, 292.1255347806256]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-46.69984188945653, 292.1255347806256]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_989",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.009391968505380266, -0.0007199768142458887]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.009391968505380266, -0.0007199768142458887]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_990",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.1125181057098112, -0.05125948605319673]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1125181057098112, -0.05125948605319673]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_991",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.053769558661943995, -264.17881607276365]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.053769558661943995, -264.17881607276365]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_992",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1002294967184871, -298.80864942264066]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1002294967184871, -298.80864942264066]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_993",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.08456590174700003, -9.058980146849565]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08456590174700003, -9.058980146849565]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_994",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.17089737855977516, -0.34075176783749334]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17089737855977516, -0.34075176783749334]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_995",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.9148865772728871, -0.6402360596898853]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9148865772728871, -0.6402360596898853]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_996",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5839049397416942, -2.310189079027519]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5839049397416942, -2.310189079027519]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_997",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.723696552195691, -0.9610324730263656]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.723696552195691, -0.9610324730263656]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_998",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.020978373478333385, -17.590748141108925]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.020978373478333385, -17.590748141108925]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_999",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.024873535555539172, -0.6682789162656313]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.024873535555539172, -0.6682789162656313]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "CubicRoot_0",
    "sat": "def sat(x: float, coeffs: List[float]=[2.0, 1.0, 0.0, 8.0]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0, 1.0, 0.0, 8.0]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_1",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2757105239401003, -5.0265217921174985, -1.2165409442363915, 35.99423725860742]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2757105239401003, -5.0265217921174985, -1.2165409442363915, 35.99423725860742]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_2",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.9053091068196046, 0.053667691688644416, -19.78165326835212, 40.32395765264794]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.9053091068196046, 0.053667691688644416, -19.78165326835212, 40.32395765264794]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_3",
    "sat": "def sat(x: float, coeffs: List[float]=[0.07579505238917321, -15.339902256837142, -24.810677592280665, -7.813817379028617]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07579505238917321, -15.339902256837142, -24.810677592280665, -7.813817379028617]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_4",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.252351774404479, 0.013481018053594621, -0.3813177566794912, 26346.04141507707]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.252351774404479, 0.013481018053594621, -0.3813177566794912, 26346.04141507707]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_5",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9090455471816742, -8.48677006916831, 0.49167814150345607, 0.9991699799654209]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9090455471816742, -8.48677006916831, 0.49167814150345607, 0.9991699799654209]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_6",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.18684268977603158, 0.4990407685283236, 0.07179175092352315, -0.011853287815768433]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18684268977603158, 0.4990407685283236, 0.07179175092352315, -0.011853287815768433]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_7",
    "sat": "def sat(x: float, coeffs: List[float]=[-15.735800684185671, 0.6920738467961973, -2.6366769219863806, -0.8601188142228484]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.735800684185671, 0.6920738467961973, -2.6366769219863806, -0.8601188142228484]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_8",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.716578848058378, -24.48182117966112, 1.0344009324701569, 4048.8737869411466]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.716578848058378, -24.48182117966112, 1.0344009324701569, 4048.8737869411466]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_9",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.88696676872425, -3.1619274279051273, 6.12885032774813, -0.39570982002685184]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.88696676872425, -3.1619274279051273, 6.12885032774813, -0.39570982002685184]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_10",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3117203447452717, 0.6235180859494589, -0.1985678529092869, 940.7998617609683]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3117203447452717, 0.6235180859494589, -0.1985678529092869, 940.7998617609683]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_11",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4992546927742607, -0.11522697836605482, 12.847095725651252, -0.22652450261122534]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4992546927742607, -0.11522697836605482, 12.847095725651252, -0.22652450261122534]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_12",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5053227540306636, 0.2969524460920781, 0.5485924434479875, 0.029636493539040996]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5053227540306636, 0.2969524460920781, 0.5485924434479875, 0.029636493539040996]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_13",
    "sat": "def sat(x: float, coeffs: List[float]=[0.16273096726485456, 0.09841291480612857, 0.21001770672531897, -96.45295428552623]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.16273096726485456, 0.09841291480612857, 0.21001770672531897, -96.45295428552623]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_14",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6043084124848415, -0.9840032589555893, -45.39337176882876, -75.77701762552489]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6043084124848415, -0.9840032589555893, -45.39337176882876, -75.77701762552489]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_15",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2937753917408392, 17.20778540369387, -0.15981486752052074, -6.157006799646511]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2937753917408392, 17.20778540369387, -0.15981486752052074, -6.157006799646511]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_16",
    "sat": "def sat(x: float, coeffs: List[float]=[1.4554135524019498, 1.121754899070395, -0.5944517767702223, 0.062205624331130346]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4554135524019498, 1.121754899070395, -0.5944517767702223, 0.062205624331130346]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_17",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.17901628744334527, 0.047669708921403396, -3.95384819600226, -3.0832623994339885]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17901628744334527, 0.047669708921403396, -3.95384819600226, -3.0832623994339885]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_18",
    "sat": "def sat(x: float, coeffs: List[float]=[-17.216575715328712, -0.7187333723079803, -0.16126140554900106, 0.6353903506233813]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.216575715328712, -0.7187333723079803, -0.16126140554900106, 0.6353903506233813]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_19",
    "sat": "def sat(x: float, coeffs: List[float]=[1.112252689575165, -0.11119599209769963, -0.14375579270080455, -104409.75842159156]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.112252689575165, -0.11119599209769963, -0.14375579270080455, -104409.75842159156]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_20",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7281289045601714, -0.9126836010146331, 0.04421674033831454, 0.05167951115193926]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7281289045601714, -0.9126836010146331, 0.04421674033831454, 0.05167951115193926]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_21",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4166256591020754, 0.6675239090626398, -0.9885253362575916, 66.691772447589]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4166256591020754, 0.6675239090626398, -0.9885253362575916, 66.691772447589]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_22",
    "sat": "def sat(x: float, coeffs: List[float]=[15.056686670651613, 8.837555009241179, -3.860114155269798, -28.01341364917262]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.056686670651613, 8.837555009241179, -3.860114155269798, -28.01341364917262]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_23",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.5988215545371451, -0.788875522036996, 0.2374374272956541, -500.587976191985]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5988215545371451, -0.788875522036996, 0.2374374272956541, -500.587976191985]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_24",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8489734511800657, -0.754371450283882, -0.9063088157002283, 91.63831476813867]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8489734511800657, -0.754371450283882, -0.9063088157002283, 91.63831476813867]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_25",
    "sat": "def sat(x: float, coeffs: List[float]=[207.52228015543415, -0.08635639290987274, -1.8668038806420861, 49.89208478046459]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[207.52228015543415, -0.08635639290987274, -1.8668038806420861, 49.89208478046459]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_26",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.332524087901355, 0.03798316512138881, 33.71165179209332, -8.4358358518963]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.332524087901355, 0.03798316512138881, 33.71165179209332, -8.4358358518963]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_27",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.001346351676382677, -0.26750103712160245, -2.2918836527648065, 471.05654588419117]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.001346351676382677, -0.26750103712160245, -2.2918836527648065, 471.05654588419117]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_28",
    "sat": "def sat(x: float, coeffs: List[float]=[20.32255603712006, 5.4066642383164245, -91.74989993714252, -2454459.523362203]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[20.32255603712006, 5.4066642383164245, -91.74989993714252, -2454459.523362203]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_29",
    "sat": "def sat(x: float, coeffs: List[float]=[0.489773876136758, -1.1169474491247016, -0.13492024829299254, 0.025853866776475668]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.489773876136758, -1.1169474491247016, -0.13492024829299254, 0.025853866776475668]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_30",
    "sat": "def sat(x: float, coeffs: List[float]=[-13.300411003829808, 3.1677375390058713, -0.4410156261753954, -464.61128562764344]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.300411003829808, 3.1677375390058713, -0.4410156261753954, -464.61128562764344]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_31",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2650401929157727, 0.39950146931705594, 2.328553614278366, 2.7920110289948132]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2650401929157727, 0.39950146931705594, 2.328553614278366, 2.7920110289948132]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_32",
    "sat": "def sat(x: float, coeffs: List[float]=[2.2076748503297927, 4.959170563544429, -30.45646215657216, 10.711403407394492]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2076748503297927, 4.959170563544429, -30.45646215657216, 10.711403407394492]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_33",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2817437815011727, -12.641761337484654, -13.933245862323838, 19.371523542815893]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2817437815011727, -12.641761337484654, -13.933245862323838, 19.371523542815893]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_34",
    "sat": "def sat(x: float, coeffs: List[float]=[0.02061442011038106, -7.91910269895079, -0.12556791930439157, 0.05821118007629572]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.02061442011038106, -7.91910269895079, -0.12556791930439157, 0.05821118007629572]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_35",
    "sat": "def sat(x: float, coeffs: List[float]=[5.519001585901051, -15.437632945735537, 0.8778602264565456, 0.3903901348344422]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.519001585901051, -15.437632945735537, 0.8778602264565456, 0.3903901348344422]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_36",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2969723389580103, -0.5666424872058761, 1.7190955364030227, -0.7397755034602398]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2969723389580103, -0.5666424872058761, 1.7190955364030227, -0.7397755034602398]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_37",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5582900666890932, 4.987760251697895, -322.29195467746956, 92.51320331395736]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5582900666890932, 4.987760251697895, -322.29195467746956, 92.51320331395736]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_38",
    "sat": "def sat(x: float, coeffs: List[float]=[1.4827246564041643, 0.11389800724237069, 0.33377441182353546, 0.18504055493848753]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4827246564041643, 0.11389800724237069, 0.33377441182353546, 0.18504055493848753]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_39",
    "sat": "def sat(x: float, coeffs: List[float]=[0.46081871720434836, -0.44607955780281444, 0.15406294944586385, -0.021082383174094818]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.46081871720434836, -0.44607955780281444, 0.15406294944586385, -0.021082383174094818]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_40",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.07229935644483332, -0.32778777239403056, 0.5017711039809797, 2.644863549879272]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07229935644483332, -0.32778777239403056, 0.5017711039809797, 2.644863549879272]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_41",
    "sat": "def sat(x: float, coeffs: List[float]=[55.78015327733419, -0.3121033654941094, -1.1643175153249519, -1.3263366873459528]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[55.78015327733419, -0.3121033654941094, -1.1643175153249519, -1.3263366873459528]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_42",
    "sat": "def sat(x: float, coeffs: List[float]=[0.41032256653967664, 0.09103620888141695, -0.3165138548329871, 4.108128987394053]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.41032256653967664, 0.09103620888141695, -0.3165138548329871, 4.108128987394053]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_43",
    "sat": "def sat(x: float, coeffs: List[float]=[0.010304928287510137, 0.22177705652298677, -0.32247677590326007, -10.965653865653152]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.010304928287510137, 0.22177705652298677, -0.32247677590326007, -10.965653865653152]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_44",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.914562058456337, 4.868919433134144, -1.3162492796284437, -0.13572510189806536]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.914562058456337, 4.868919433134144, -1.3162492796284437, -0.13572510189806536]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_45",
    "sat": "def sat(x: float, coeffs: List[float]=[0.11984461345977149, 251.44788472374185, 3.1363605247863062, -428.52186363298205]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11984461345977149, 251.44788472374185, 3.1363605247863062, -428.52186363298205]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_46",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5049171066491831, 1.2090112942164797, -2.1040443290173765, 0.3831095396864345]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5049171066491831, 1.2090112942164797, -2.1040443290173765, 0.3831095396864345]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_47",
    "sat": "def sat(x: float, coeffs: List[float]=[0.10267534688451556, 5.5204591111601475, -6.927578391992025, -2.611182328571781]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10267534688451556, 5.5204591111601475, -6.927578391992025, -2.611182328571781]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_48",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.33840594515965144, 0.1044419260291416, 29.832543756851965, -81.47472149354769]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.33840594515965144, 0.1044419260291416, 29.832543756851965, -81.47472149354769]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_49",
    "sat": "def sat(x: float, coeffs: List[float]=[0.34200776827403256, -15.09936025096853, 0.30253567530099357, 0.32078131712139724]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.34200776827403256, -15.09936025096853, 0.30253567530099357, 0.32078131712139724]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_50",
    "sat": "def sat(x: float, coeffs: List[float]=[0.12724203344107013, 80.31624895361081, 2.8426913667805245, 470370.0124044538]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.12724203344107013, 80.31624895361081, 2.8426913667805245, 470370.0124044538]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_51",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05181071692826822, 0.0884259955743012, -0.13302523310502198, -0.02551992060155433]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05181071692826822, 0.0884259955743012, -0.13302523310502198, -0.02551992060155433]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_52",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2131929894652087, -0.0757449139900946, 0.652778592465363, -0.10552070879671879]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2131929894652087, -0.0757449139900946, 0.652778592465363, -0.10552070879671879]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_53",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0711298759120027, 6.01297487623023, 0.7114918957240771, -9.189522630318642]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0711298759120027, 6.01297487623023, 0.7114918957240771, -9.189522630318642]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_54",
    "sat": "def sat(x: float, coeffs: List[float]=[2.5382769972370287, -0.007900526814914008, 0.10774618825642783, -4.799921643809808]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.5382769972370287, -0.007900526814914008, 0.10774618825642783, -4.799921643809808]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_55",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.3556512794188125, 0.020721203039754776, 2.2105590748744173, 15.82804455307865]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.3556512794188125, 0.020721203039754776, 2.2105590748744173, 15.82804455307865]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_56",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2618621150325586, -0.5140051711810467, -2.947677329464144, -356450.30873305653]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2618621150325586, -0.5140051711810467, -2.947677329464144, -356450.30873305653]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_57",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6608329958286823, -0.046174044199843056, 312.517317127793, -1402.9345549136335]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6608329958286823, -0.046174044199843056, 312.517317127793, -1402.9345549136335]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_58",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.19185937482269022, -1.4793124331136136, 20.98010240135712, 189047.50914162406]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19185937482269022, -1.4793124331136136, 20.98010240135712, 189047.50914162406]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_59",
    "sat": "def sat(x: float, coeffs: List[float]=[5.678470228492023, 0.1301107649221247, -2.8853376960465424, -0.021885255794969524]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.678470228492023, 0.1301107649221247, -2.8853376960465424, -0.021885255794969524]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_60",
    "sat": "def sat(x: float, coeffs: List[float]=[5.485347480844475, -0.00462521970089839, 0.10841925279985894, -69.38813352086706]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.485347480844475, -0.00462521970089839, 0.10841925279985894, -69.38813352086706]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_61",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7701744683601797, -6.393255227366619, -0.1660423343238032, 0.17541353755653052]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7701744683601797, -6.393255227366619, -0.1660423343238032, 0.17541353755653052]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_62",
    "sat": "def sat(x: float, coeffs: List[float]=[10.9264178803297, -0.04528517451912265, -0.16915913213281772, 478.20918662592965]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.9264178803297, -0.04528517451912265, -0.16915913213281772, 478.20918662592965]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_63",
    "sat": "def sat(x: float, coeffs: List[float]=[1.8824444586770988, 0.35374003597888876, -0.0025565079194997953, -0.0034500518246514513]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8824444586770988, 0.35374003597888876, -0.0025565079194997953, -0.0034500518246514513]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_64",
    "sat": "def sat(x: float, coeffs: List[float]=[0.49562807943796566, 0.5726875169098488, 2.4374603237897343, 1.2637809905542698]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.49562807943796566, 0.5726875169098488, 2.4374603237897343, 1.2637809905542698]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_65",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3860026406942045, 1.133451514676558, -0.1856808550432186, 0.006964153681141125]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3860026406942045, 1.133451514676558, -0.1856808550432186, 0.006964153681141125]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_66",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6805514631470496, -0.22007325654882393, -0.2552804910299218, 2.3558240644083313]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6805514631470496, -0.22007325654882393, -0.2552804910299218, 2.3558240644083313]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_67",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.036687606577253895, 5.907098444076258, -0.02382385439944808, -0.09155680990560669]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.036687606577253895, 5.907098444076258, -0.02382385439944808, -0.09155680990560669]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_68",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.3646873371812145, 24.192797710495356, 0.4998310674792055, -16.06961938021534]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.3646873371812145, 24.192797710495356, 0.4998310674792055, -16.06961938021534]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_69",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1041357951623996, 1.3341299797186161, -8.85505502266768, 3.8056531749108626]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1041357951623996, 1.3341299797186161, -8.85505502266768, 3.8056531749108626]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_70",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.47168039916018695, -0.38076082154916246, -0.23067981154735015, -0.7861857059980624]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.47168039916018695, -0.38076082154916246, -0.23067981154735015, -0.7861857059980624]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_71",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.468394991650307, -3.8801838684940173, 0.65540400734187, 0.05682760192947811]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.468394991650307, -3.8801838684940173, 0.65540400734187, 0.05682760192947811]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_72",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.09672469092774098, -0.5781830576146239, -0.7475020195637533, 2.2968422027891844]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09672469092774098, -0.5781830576146239, -0.7475020195637533, 2.2968422027891844]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_73",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8511285879715241, -0.21508773988233845, 0.15634350846581366, 0.5907798132204073]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8511285879715241, -0.21508773988233845, 0.15634350846581366, 0.5907798132204073]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_74",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5870879579083463, 0.8010511043401826, -0.13080525536013235, -0.02231684041688401]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5870879579083463, 0.8010511043401826, -0.13080525536013235, -0.02231684041688401]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_75",
    "sat": "def sat(x: float, coeffs: List[float]=[0.04591265036028417, -0.05295722816727211, -0.1268531677367902, 0.1475410418229544]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04591265036028417, -0.05295722816727211, -0.1268531677367902, 0.1475410418229544]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_76",
    "sat": "def sat(x: float, coeffs: List[float]=[-9.015873785219657, 0.4579387076216717, -0.06886623789283419, 153510008.910526]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.015873785219657, 0.4579387076216717, -0.06886623789283419, 153510008.910526]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_77",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.8288157008887094, 2.6943822551305874, 0.46582420477071346, 114.99274685162474]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.8288157008887094, 2.6943822551305874, 0.46582420477071346, 114.99274685162474]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_78",
    "sat": "def sat(x: float, coeffs: List[float]=[-15.656440204579566, -1.5755581383055401, -5.629766455394853, -0.43406690573726825]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.656440204579566, -1.5755581383055401, -5.629766455394853, -0.43406690573726825]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_79",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.4665382145465509, 747.3610167335796, 11.372412046655429, -107.29175779251023]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4665382145465509, 747.3610167335796, 11.372412046655429, -107.29175779251023]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_80",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.10429630319463097, 0.6567148815560944, -4.142226437224477, 1.2635760648046739]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10429630319463097, 0.6567148815560944, -4.142226437224477, 1.2635760648046739]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_81",
    "sat": "def sat(x: float, coeffs: List[float]=[172.05122580367393, -0.077301526192136, -3.554263663156879, 819.5221756189071]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[172.05122580367393, -0.077301526192136, -3.554263663156879, 819.5221756189071]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_82",
    "sat": "def sat(x: float, coeffs: List[float]=[29.80087692504108, -0.8908536076040194, 5.158246877860517, 426.9607175208649]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[29.80087692504108, -0.8908536076040194, 5.158246877860517, 426.9607175208649]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_83",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.07388389698818305, 1.5101124268545083, -21.018338564697384, 123.22775209541317]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07388389698818305, 1.5101124268545083, -21.018338564697384, 123.22775209541317]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_84",
    "sat": "def sat(x: float, coeffs: List[float]=[2.518656934031505, 0.17927953518111592, -8.030473488435264, -0.6052086995779676]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.518656934031505, 0.17927953518111592, -8.030473488435264, -0.6052086995779676]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_85",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7220862116235596, 2.5598526156035124, -13.50780455346228, -41.8924528621615]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7220862116235596, 2.5598526156035124, -13.50780455346228, -41.8924528621615]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_86",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06322277157522509, 1.2950331059838545, -1.5534102640043692, 0.3534128964707868]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06322277157522509, 1.2950331059838545, -1.5534102640043692, 0.3534128964707868]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_87",
    "sat": "def sat(x: float, coeffs: List[float]=[0.977162887278913, 0.730748064626967, 2.1866900053902767, 0.8902456303904942]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.977162887278913, 0.730748064626967, 2.1866900053902767, 0.8902456303904942]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_88",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5397905268926403, 3.5397420094068965, 1.738811222091253, -13.482144132977]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5397905268926403, 3.5397420094068965, 1.738811222091253, -13.482144132977]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_89",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.27464432000478173, 0.10577320498428093, 55.14474968755757, 93.93832480766554]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.27464432000478173, 0.10577320498428093, 55.14474968755757, 93.93832480766554]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_90",
    "sat": "def sat(x: float, coeffs: List[float]=[0.14358757812103948, 11.946452217892684, 0.3286285720333633, -1299.037909758417]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.14358757812103948, 11.946452217892684, 0.3286285720333633, -1299.037909758417]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_91",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1385364061150772, -0.00870690948612407, 3.248869459377612, 0.6902112046390982]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1385364061150772, -0.00870690948612407, 3.248869459377612, 0.6902112046390982]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_92",
    "sat": "def sat(x: float, coeffs: List[float]=[-28.848329654273837, 1.3895948536002631, -0.204685163809337, 0.015790435429000632]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-28.848329654273837, 1.3895948536002631, -0.204685163809337, 0.015790435429000632]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_93",
    "sat": "def sat(x: float, coeffs: List[float]=[0.038202824271985035, -5.709617665787704, 1.1087342948648906, -0.05383646604680991]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.038202824271985035, -5.709617665787704, 1.1087342948648906, -0.05383646604680991]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_94",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7739675365674409, 0.8421406410334202, 0.03233033539880026, -4.844477034582114]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7739675365674409, 0.8421406410334202, 0.03233033539880026, -4.844477034582114]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_95",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08554142584369691, -0.5061323920358611, 9.911157916922015, -182.1669543126319]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08554142584369691, -0.5061323920358611, 9.911157916922015, -182.1669543126319]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_96",
    "sat": "def sat(x: float, coeffs: List[float]=[0.11255487250426681, 3.0794635837668873, -181.80014298975826, 164.79702266281848]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11255487250426681, 3.0794635837668873, -181.80014298975826, 164.79702266281848]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_97",
    "sat": "def sat(x: float, coeffs: List[float]=[-185.67267360208064, -0.9520461822782872, 0.24582200525378636, 8744540.326328967]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-185.67267360208064, -0.9520461822782872, 0.24582200525378636, 8744540.326328967]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_98",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7793812905225531, -3.257771887670677, -0.4634178705976411, 0.004137533430418185]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7793812905225531, -3.257771887670677, -0.4634178705976411, 0.004137533430418185]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_99",
    "sat": "def sat(x: float, coeffs: List[float]=[21.36611351019965, -0.08449111093931339, 3.4417040152154583, -1.7176247094092858]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[21.36611351019965, -0.08449111093931339, 3.4417040152154583, -1.7176247094092858]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_100",
    "sat": "def sat(x: float, coeffs: List[float]=[-32.94092409089815, -6.730248945122011, 0.13211315335480758, -1961563.3761177938]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-32.94092409089815, -6.730248945122011, 0.13211315335480758, -1961563.3761177938]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_101",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.7360288670120068, 22.155130260867278, 0.5187921528446927, -69.59638800674348]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.7360288670120068, 22.155130260867278, 0.5187921528446927, -69.59638800674348]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_102",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7009139497317339, -3.265463410766769, -0.06221396702418155, 0.00039379082488724703]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7009139497317339, -3.265463410766769, -0.06221396702418155, 0.00039379082488724703]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_103",
    "sat": "def sat(x: float, coeffs: List[float]=[0.17391648307539, -1.3624640082267534, 2.389328879680761, -0.9064512895209662]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17391648307539, -1.3624640082267534, 2.389328879680761, -0.9064512895209662]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_104",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.35443026304519254, 2.3075668376632525, 0.8893176898832263, -3.9676437780982523]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.35443026304519254, 2.3075668376632525, 0.8893176898832263, -3.9676437780982523]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_105",
    "sat": "def sat(x: float, coeffs: List[float]=[-58.73318491448695, -0.6976289255672207, 0.1864682876917402, -209156.1777223628]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-58.73318491448695, -0.6976289255672207, 0.1864682876917402, -209156.1777223628]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_106",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6389205206913399, -3.6466990886875124, -0.8430490803133052, 0.01129326845157591]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6389205206913399, -3.6466990886875124, -0.8430490803133052, 0.01129326845157591]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_107",
    "sat": "def sat(x: float, coeffs: List[float]=[-171.40992397852472, 0.3506019098872817, -0.08988367221171711, -694010.8046262071]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-171.40992397852472, 0.3506019098872817, -0.08988367221171711, -694010.8046262071]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_108",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.07284715439993013, 0.04105430664042172, 2.2556733125619264, 1.7422360335112224]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07284715439993013, 0.04105430664042172, 2.2556733125619264, 1.7422360335112224]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_109",
    "sat": "def sat(x: float, coeffs: List[float]=[-17.319128113962226, 1.6206635061613672, -0.214730405021329, 1.4329486120244401]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.319128113962226, 1.6206635061613672, -0.214730405021329, 1.4329486120244401]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_110",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6837887501727878, 11.988213796561423, 0.12209515551782024, -72.07515563019176]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6837887501727878, 11.988213796561423, 0.12209515551782024, -72.07515563019176]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_111",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4667268938172775, -0.6057284105551212, -2.4205221025364945, 1.478759176521084]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4667268938172775, -0.6057284105551212, -2.4205221025364945, 1.478759176521084]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_112",
    "sat": "def sat(x: float, coeffs: List[float]=[14.46086120484994, -7.584849504136899, -0.4650219227471239, -9.806833268633222]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.46086120484994, -7.584849504136899, -0.4650219227471239, -9.806833268633222]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_113",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1642119082926435, 6.018687649915816, -1.1408158613436976, -0.39883479634974767]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1642119082926435, 6.018687649915816, -1.1408158613436976, -0.39883479634974767]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_114",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.23891509386776333, -0.7259261396084703, 1.0903533169072528, -23.297474734098593]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.23891509386776333, -0.7259261396084703, 1.0903533169072528, -23.297474734098593]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_115",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.24193278220030848, -0.21726006140220222, 0.152379445391857, 0.0781752088982875]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.24193278220030848, -0.21726006140220222, 0.152379445391857, 0.0781752088982875]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_116",
    "sat": "def sat(x: float, coeffs: List[float]=[14.47966229898399, -7.301521339710587, -0.8860043372019079, -3.2982164352638037]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.47966229898399, -7.301521339710587, -0.8860043372019079, -3.2982164352638037]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_117",
    "sat": "def sat(x: float, coeffs: List[float]=[2.3581849942362276, 0.2822643695517029, -0.11928296502352276, 3.216396598336137e-05]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.3581849942362276, 0.2822643695517029, -0.11928296502352276, 3.216396598336137e-05]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_118",
    "sat": "def sat(x: float, coeffs: List[float]=[-39.20491189422928, -20.589191500209893, -0.6393749313168494, 64611.29569952867]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-39.20491189422928, -20.589191500209893, -0.6393749313168494, 64611.29569952867]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_119",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.38042254684622917, 0.2496835667969662, 1.4086746409997684, -0.8019490888855019]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.38042254684622917, 0.2496835667969662, 1.4086746409997684, -0.8019490888855019]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_120",
    "sat": "def sat(x: float, coeffs: List[float]=[0.029551634367197616, -0.08143231402913798, -1.4691903297567883, 0.23690693752890005]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.029551634367197616, -0.08143231402913798, -1.4691903297567883, 0.23690693752890005]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_121",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.03922177714777549, 0.15010548747253663, 0.26686418162701325, -0.008648024621921529]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03922177714777549, 0.15010548747253663, 0.26686418162701325, -0.008648024621921529]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_122",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.16210475126004184, 0.013667338985264696, 0.6545649634553494, -0.513868406257827]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.16210475126004184, 0.013667338985264696, 0.6545649634553494, -0.513868406257827]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_123",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11120284555870834, 0.04126641870425396, -0.09513618615720176, 0.04431958280959075]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11120284555870834, 0.04126641870425396, -0.09513618615720176, 0.04431958280959075]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_124",
    "sat": "def sat(x: float, coeffs: List[float]=[7.418685558941308, 3.3104014663055277, 1.5935333675488785, 0.027680541262989706]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.418685558941308, 3.3104014663055277, 1.5935333675488785, 0.027680541262989706]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_125",
    "sat": "def sat(x: float, coeffs: List[float]=[0.22383388770950408, -33.61524615542833, 0.2126738476421343, 0.05811909845523748]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22383388770950408, -33.61524615542833, 0.2126738476421343, 0.05811909845523748]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_126",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2471279072726629, -0.9573557960975473, 2.3814222346297265, 50229946.00501375]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2471279072726629, -0.9573557960975473, 2.3814222346297265, 50229946.00501375]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_127",
    "sat": "def sat(x: float, coeffs: List[float]=[3.5819872423164303, 6.431436580757545, -200.9661547627188, -466.4781695191931]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.5819872423164303, 6.431436580757545, -200.9661547627188, -466.4781695191931]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_128",
    "sat": "def sat(x: float, coeffs: List[float]=[-14.873734216091897, -1.0793249231053792, -0.0731013999722474, 69155.92870879237]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.873734216091897, -1.0793249231053792, -0.0731013999722474, 69155.92870879237]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_129",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9396215375823725, 0.2603969506408033, 0.14939449501219437, -485137.49939503626]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9396215375823725, 0.2603969506408033, 0.14939449501219437, -485137.49939503626]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_130",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.160044039187801, 1.008264950720429, 0.04163339592205828, -0.008411351511905068]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.160044039187801, 1.008264950720429, 0.04163339592205828, -0.008411351511905068]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_131",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.376043009975442, 34.78135020331461, -0.19425017582957924, -41.7809909044643]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.376043009975442, 34.78135020331461, -0.19425017582957924, -41.7809909044643]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_132",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.02813807671471798, 31.612978517720208, 0.31898426730822543, -3.0598493395796034]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.02813807671471798, 31.612978517720208, 0.31898426730822543, -3.0598493395796034]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_133",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.14447156733393274, -3.976878933978884, 0.5704360871455673, 245.87105582078146]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.14447156733393274, -3.976878933978884, 0.5704360871455673, 245.87105582078146]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_134",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2538021799531074, 0.46873972636120004, 0.06686652027920559, -0.06354853539283775]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2538021799531074, 0.46873972636120004, 0.06686652027920559, -0.06354853539283775]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_135",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.13509390479940672, -87.84195213248255, -0.34647315919304883, 2023.1082834092701]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.13509390479940672, -87.84195213248255, -0.34647315919304883, 2023.1082834092701]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_136",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3001349685645737, 0.8101180825534371, -0.27646928766909734, -0.11680541489140434]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3001349685645737, 0.8101180825534371, -0.27646928766909734, -0.11680541489140434]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_137",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.157584319645309, -0.763592766288011, 79.54126491328186, 15.677389990729683]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.157584319645309, -0.763592766288011, 79.54126491328186, 15.677389990729683]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_138",
    "sat": "def sat(x: float, coeffs: List[float]=[0.755793801780032, -0.17897294518358087, 4.265169009947995, -3.2195638208345416]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.755793801780032, -0.17897294518358087, 4.265169009947995, -3.2195638208345416]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_139",
    "sat": "def sat(x: float, coeffs: List[float]=[0.13888207220403181, 1.1978433721262725, 6.345039072904579, 2.43242393956068]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.13888207220403181, 1.1978433721262725, 6.345039072904579, 2.43242393956068]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_140",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0646739727496779, -0.6763213805990785, -46.06830632320916, -17.21953695575894]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0646739727496779, -0.6763213805990785, -46.06830632320916, -17.21953695575894]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_141",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.19877843269914108, 111.07128775059715, -0.03314724068850953, -13262.301923245872]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19877843269914108, 111.07128775059715, -0.03314724068850953, -13262.301923245872]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_142",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5293717437844698, 0.05692798016220868, 0.13848863255314034, -18.54117711332617]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5293717437844698, 0.05692798016220868, 0.13848863255314034, -18.54117711332617]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_143",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.7265789329656225, -0.7069661588465853, -0.42692212468571195, 2716.7461389530768]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.7265789329656225, -0.7069661588465853, -0.42692212468571195, 2716.7461389530768]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_144",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05631073140475418, -0.43529599424744525, 1.6969853807356738, -8.614350759968685]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05631073140475418, -0.43529599424744525, 1.6969853807356738, -8.614350759968685]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_145",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.280521641617427, -1.8636551523469764, 9.381220730541864, 5.891869224900773]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.280521641617427, -1.8636551523469764, 9.381220730541864, 5.891869224900773]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_146",
    "sat": "def sat(x: float, coeffs: List[float]=[124.90104595711311, -0.47771072959954236, -0.02816036949685352, -1.6462208480019538]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[124.90104595711311, -0.47771072959954236, -0.02816036949685352, -1.6462208480019538]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_147",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4985318562662819, 5.904645596828388, -0.43697880064183553, -0.1259846460022913]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4985318562662819, 5.904645596828388, -0.43697880064183553, -0.1259846460022913]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_148",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.009622932184634761, -0.3327632969285746, -0.005493556901136139, 0.7791124806204786]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.009622932184634761, -0.3327632969285746, -0.005493556901136139, 0.7791124806204786]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_149",
    "sat": "def sat(x: float, coeffs: List[float]=[5.133318715400531, 1.6724370001136162, -0.06931687636744122, -5531273.025013694]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.133318715400531, 1.6724370001136162, -0.06931687636744122, -5531273.025013694]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_150",
    "sat": "def sat(x: float, coeffs: List[float]=[2.5849698701182704, 2.020529437034074, 0.31251173690374223, -25.439607999696847]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.5849698701182704, 2.020529437034074, 0.31251173690374223, -25.439607999696847]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_151",
    "sat": "def sat(x: float, coeffs: List[float]=[-17.19202274767542, -7.053239250460187, 1.5758614417493215, -7.764498254200636]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.19202274767542, -7.053239250460187, 1.5758614417493215, -7.764498254200636]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_152",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.03090881672243177, -0.7088655140602481, -0.12538430634709266, 2.272772275721548]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03090881672243177, -0.7088655140602481, -0.12538430634709266, 2.272772275721548]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_153",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2818783634285838, 0.08206174985827334, 2.591906352423084, -3.168905287592543]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2818783634285838, 0.08206174985827334, 2.591906352423084, -3.168905287592543]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_154",
    "sat": "def sat(x: float, coeffs: List[float]=[167.03538080025842, 0.6148709493362765, 5.842216120738251, -169.9203905567991]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[167.03538080025842, 0.6148709493362765, 5.842216120738251, -169.9203905567991]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_155",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8234291920295002, -0.46761198438568696, 6.08357953588522, 4651695.206469782]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8234291920295002, -0.46761198438568696, 6.08357953588522, 4651695.206469782]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_156",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3631883537204749, -0.1723554991462537, 0.06528104649809256, 3204.7244146069293]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3631883537204749, -0.1723554991462537, 0.06528104649809256, 3204.7244146069293]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_157",
    "sat": "def sat(x: float, coeffs: List[float]=[0.11663645660400072, 0.2506304102709411, -0.554019479594229, -28808.875319748433]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11663645660400072, 0.2506304102709411, -0.554019479594229, -28808.875319748433]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_158",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7542582226336554, 0.1517542916083686, -0.837898771406648, 4.539652504275635]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7542582226336554, 0.1517542916083686, -0.837898771406648, 4.539652504275635]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_159",
    "sat": "def sat(x: float, coeffs: List[float]=[1.3687821724280986, -49.25418471307005, -0.5324395834616493, 2.1327038289563727]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3687821724280986, -49.25418471307005, -0.5324395834616493, 2.1327038289563727]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_160",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.497646876774799, 0.6779016545279933, -2.3595207055885825, 2566.494953837399]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.497646876774799, 0.6779016545279933, -2.3595207055885825, 2566.494953837399]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_161",
    "sat": "def sat(x: float, coeffs: List[float]=[0.10572867554050913, -2.853871469522129, -1.2126988182089489, 0.058788786495285524]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10572867554050913, -2.853871469522129, -1.2126988182089489, 0.058788786495285524]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_162",
    "sat": "def sat(x: float, coeffs: List[float]=[9.952073443759605, 1.3345072615744205, -0.681475555050826, 0.6222911030799481]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.952073443759605, 1.3345072615744205, -0.681475555050826, 0.6222911030799481]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_163",
    "sat": "def sat(x: float, coeffs: List[float]=[0.21704083041782649, 253.65411627867277, -0.09102384231411335, -26879.948008419593]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21704083041782649, 253.65411627867277, -0.09102384231411335, -26879.948008419593]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_164",
    "sat": "def sat(x: float, coeffs: List[float]=[2.905091457363731, 0.6658685541957553, -0.0320301845100579, -2.085801984677671e-05]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.905091457363731, 0.6658685541957553, -0.0320301845100579, -2.085801984677671e-05]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_165",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0298443520580591, -0.007238529861021507, 1.794092570426617, -2.182384460542711]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0298443520580591, -0.007238529861021507, 1.794092570426617, -2.182384460542711]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_166",
    "sat": "def sat(x: float, coeffs: List[float]=[0.18492433105938502, -0.7479386902551792, -11.910167296551762, -7.304226405485304]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18492433105938502, -0.7479386902551792, -11.910167296551762, -7.304226405485304]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_167",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05676797084572686, -40.55440678460891, -2.619670356746649, 88.58067604316135]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05676797084572686, -40.55440678460891, -2.619670356746649, 88.58067604316135]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_168",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6522568165978404, -1.1923761083520326, -0.8809688733551543, -0.13048590424735196]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6522568165978404, -1.1923761083520326, -0.8809688733551543, -0.13048590424735196]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_169",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.20926681025475022, -1.1227098281648884, -0.15804108648086235, 1.564668712072832]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.20926681025475022, -1.1227098281648884, -0.15804108648086235, 1.564668712072832]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_170",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1561131590676942, 0.5664674201627357, -0.09376321879822247, 5761.608315563419]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1561131590676942, 0.5664674201627357, -0.09376321879822247, 5761.608315563419]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_171",
    "sat": "def sat(x: float, coeffs: List[float]=[-20.95829508400688, -12.769259202457782, -0.740089696369901, 0.3103241734147616]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-20.95829508400688, -12.769259202457782, -0.740089696369901, 0.3103241734147616]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_172",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.2180478410320923, -0.5624268290516131, 0.956813229788548, 0.22959619659074243]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.2180478410320923, -0.5624268290516131, 0.956813229788548, 0.22959619659074243]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_173",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2158179158911615, 117.74297169569154, 1.503571428005878, -4515.198250138978]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2158179158911615, 117.74297169569154, 1.503571428005878, -4515.198250138978]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_174",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7990244200354891, 2.092225585153899, 2.3584679581450962, 0.30732283929019827]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7990244200354891, 2.092225585153899, 2.3584679581450962, 0.30732283929019827]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_175",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2096720994842848, -0.11541141540442301, -0.03938095218785276, 8131.369076354996]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2096720994842848, -0.11541141540442301, -0.03938095218785276, 8131.369076354996]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_176",
    "sat": "def sat(x: float, coeffs: List[float]=[-327.84853143002215, 0.16705675621929275, 8.981302610126031, 9979.008337420317]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-327.84853143002215, 0.16705675621929275, 8.981302610126031, 9979.008337420317]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_177",
    "sat": "def sat(x: float, coeffs: List[float]=[80.88318973799001, -2.0730871854088244, -46.542352345661016, -5.851882818873484]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[80.88318973799001, -2.0730871854088244, -46.542352345661016, -5.851882818873484]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_178",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7170100165453456, -5.453837477900514, -0.8142501231916945, 3.589063655920582]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7170100165453456, -5.453837477900514, -0.8142501231916945, 3.589063655920582]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_179",
    "sat": "def sat(x: float, coeffs: List[float]=[52.429641039379284, 0.07517019081191201, 8.154198221520021, -92.18429788865313]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[52.429641039379284, 0.07517019081191201, 8.154198221520021, -92.18429788865313]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_180",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1780501624196653, 0.18944457509645382, 35.29651694724607, -25.671448117372854]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1780501624196653, 0.18944457509645382, 35.29651694724607, -25.671448117372854]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_181",
    "sat": "def sat(x: float, coeffs: List[float]=[4.412329704554462, -0.983354901578326, -0.00571729713271855, -14.484844280555047]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.412329704554462, -0.983354901578326, -0.00571729713271855, -14.484844280555047]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_182",
    "sat": "def sat(x: float, coeffs: List[float]=[325.7357702768434, 3.9780804920552004, -1.3265668644184279, 4464336.208767407]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[325.7357702768434, 3.9780804920552004, -1.3265668644184279, 4464336.208767407]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_183",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3220694065070502, 0.2768293462125256, -17.87853014270849, 9.695450713104592]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3220694065070502, 0.2768293462125256, -17.87853014270849, 9.695450713104592]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_184",
    "sat": "def sat(x: float, coeffs: List[float]=[0.14154270239802128, 2.0060364634208807, -1.272542111149446, -0.4070259010930328]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.14154270239802128, 2.0060364634208807, -1.272542111149446, -0.4070259010930328]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_185",
    "sat": "def sat(x: float, coeffs: List[float]=[0.14203054169045526, -0.9161987731983127, 0.0651881521499067, -78.22896562370511]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.14203054169045526, -0.9161987731983127, 0.0651881521499067, -78.22896562370511]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_186",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4367006951948045, 1.4880155233249097, -22.215933903186354, 22.27487757005183]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4367006951948045, 1.4880155233249097, -22.215933903186354, 22.27487757005183]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_187",
    "sat": "def sat(x: float, coeffs: List[float]=[-20.24771101574392, 1.3092728403946747, -6.821459880340538, 262.39496839147216]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-20.24771101574392, 1.3092728403946747, -6.821459880340538, 262.39496839147216]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_188",
    "sat": "def sat(x: float, coeffs: List[float]=[232.257854660449, -1.4499689142641674, 2.8760781590290754, 103.67542325311365]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[232.257854660449, -1.4499689142641674, 2.8760781590290754, 103.67542325311365]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_189",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.20204709318009462, 832.8023529955527, -7.88651799774458, -106.93507255887427]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.20204709318009462, 832.8023529955527, -7.88651799774458, -106.93507255887427]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_190",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.421489425523419, -0.06352443201390279, 0.4379822011219006, -27.224787429710734]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.421489425523419, -0.06352443201390279, 0.4379822011219006, -27.224787429710734]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_191",
    "sat": "def sat(x: float, coeffs: List[float]=[3.6995929791958133, -0.008787942825886056, -0.0983471947621873, 1.1893120914143411]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.6995929791958133, -0.008787942825886056, -0.0983471947621873, 1.1893120914143411]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_192",
    "sat": "def sat(x: float, coeffs: List[float]=[-312.8841189824543, -1.313478232974772, 3.87562228865217, 30796743.783955794]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-312.8841189824543, -1.313478232974772, 3.87562228865217, 30796743.783955794]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_193",
    "sat": "def sat(x: float, coeffs: List[float]=[-14.236618329140548, 0.9132368464820768, -5.866329778029894, 0.8838051656839658]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.236618329140548, 0.9132368464820768, -5.866329778029894, 0.8838051656839658]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_194",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5970745910860269, -1.5912478069189386, 29.130487430051947, -22.847403756142924]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5970745910860269, -1.5912478069189386, 29.130487430051947, -22.847403756142924]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_195",
    "sat": "def sat(x: float, coeffs: List[float]=[-15.599211524607432, -0.032150061288553765, 385.64026353654634, 5.174460925966977]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.599211524607432, -0.032150061288553765, 385.64026353654634, 5.174460925966977]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_196",
    "sat": "def sat(x: float, coeffs: List[float]=[-27.119956964896307, -2.0723382831554837, 1.4121692312447323, -2496.496997749394]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-27.119956964896307, -2.0723382831554837, 1.4121692312447323, -2496.496997749394]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_197",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6494187249242239, 140.16279690539696, 464.1332368395185, 46.41518400389915]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6494187249242239, 140.16279690539696, 464.1332368395185, 46.41518400389915]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_198",
    "sat": "def sat(x: float, coeffs: List[float]=[1.588074676940252, -2.9941237854724267, 0.21388002871696865, 0.1621488081710673]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.588074676940252, -2.9941237854724267, 0.21388002871696865, 0.1621488081710673]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_199",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0509066195694323, 14.923825761238822, -0.024842544550382078, -1.8772685816742862]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0509066195694323, 14.923825761238822, -0.024842544550382078, -1.8772685816742862]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_200",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.4169497958588584, 45.42336895283102, 0.7099143024533681, -1037.5134808310968]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4169497958588584, 45.42336895283102, 0.7099143024533681, -1037.5134808310968]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_201",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.12446343995743876, -0.32523270954828587, 0.6687875331672419, 0.7185330683496798]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.12446343995743876, -0.32523270954828587, 0.6687875331672419, 0.7185330683496798]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_202",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1384751217934129, -0.04123191426391822, -0.3705537829748337, 0.17070896991053808]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1384751217934129, -0.04123191426391822, -0.3705537829748337, 0.17070896991053808]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_203",
    "sat": "def sat(x: float, coeffs: List[float]=[1.3658666495629619, -0.07540233217708729, 0.9185443539794004, 995441.8665116405]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3658666495629619, -0.07540233217708729, 0.9185443539794004, 995441.8665116405]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_204",
    "sat": "def sat(x: float, coeffs: List[float]=[28.85143824177582, 88.28796548400648, 0.42786413056249045, -0.18752647675835518]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[28.85143824177582, 88.28796548400648, 0.42786413056249045, -0.18752647675835518]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_205",
    "sat": "def sat(x: float, coeffs: List[float]=[-61.90782201179274, 0.3325079353788695, -0.04036522281358076, 19187764.941743344]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-61.90782201179274, 0.3325079353788695, -0.04036522281358076, 19187764.941743344]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_206",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9033331360680549, -0.6364016019674718, -1.5608396248233323, 191.63113503691645]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9033331360680549, -0.6364016019674718, -1.5608396248233323, 191.63113503691645]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_207",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.22834190347760477, 0.3223433429042409, -0.1797464538432937, -0.03572160389125209]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.22834190347760477, 0.3223433429042409, -0.1797464538432937, -0.03572160389125209]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_208",
    "sat": "def sat(x: float, coeffs: List[float]=[-42.269611962070506, 0.11204262874505377, 0.2538499992326613, 0.13794534507690873]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-42.269611962070506, 0.11204262874505377, 0.2538499992326613, 0.13794534507690873]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_209",
    "sat": "def sat(x: float, coeffs: List[float]=[-31.329898372251975, -0.06047188603331947, 0.39205340886738177, -10.588767551263208]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-31.329898372251975, -0.06047188603331947, 0.39205340886738177, -10.588767551263208]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_210",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.07127174208077765, 1.111225323638193, -3.5255949510302043, 3.1681445124143757]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07127174208077765, 1.111225323638193, -3.5255949510302043, 3.1681445124143757]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_211",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.440131734632096, -0.09974669010289532, -100.62285602008559, 75155903.08749221]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.440131734632096, -0.09974669010289532, -100.62285602008559, 75155903.08749221]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_212",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.721810864346245, 0.05774121132296117, 9.29142953833741, 3437.0609843663788]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.721810864346245, 0.05774121132296117, 9.29142953833741, 3437.0609843663788]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_213",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7231377379818933, 0.9138968157926675, 0.028150999387017483, 778.3301877702546]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7231377379818933, 0.9138968157926675, 0.028150999387017483, 778.3301877702546]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_214",
    "sat": "def sat(x: float, coeffs: List[float]=[0.10435249804158264, -7.765856145988074, 1.1329424929830216, 4.610280193127135]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10435249804158264, -7.765856145988074, 1.1329424929830216, 4.610280193127135]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_215",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.5897132034671113, -2.75421213558911, 1.067663827792508, -0.09397201427079825]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5897132034671113, -2.75421213558911, 1.067663827792508, -0.09397201427079825]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_216",
    "sat": "def sat(x: float, coeffs: List[float]=[7.1606611623870435, -13.973274684773047, -1.4746739355846967, 0.3577616867922488]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.1606611623870435, -13.973274684773047, -1.4746739355846967, 0.3577616867922488]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_217",
    "sat": "def sat(x: float, coeffs: List[float]=[0.710707908214523, -0.7657707700984081, -0.5661029170820818, 1.7120052198683688]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.710707908214523, -0.7657707700984081, -0.5661029170820818, 1.7120052198683688]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_218",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2880118163759719, 0.3759528930257304, -0.005265197793405951, 106419922.81310719]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2880118163759719, 0.3759528930257304, -0.005265197793405951, 106419922.81310719]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_219",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.001219110033483739, 4.621965455275688, -0.3880133840930502, -17017.54437938896]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.001219110033483739, 4.621965455275688, -0.3880133840930502, -17017.54437938896]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_220",
    "sat": "def sat(x: float, coeffs: List[float]=[0.010831621277209935, -11.907386248287274, 0.09424252524892451, 14.085402674694452]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.010831621277209935, -11.907386248287274, 0.09424252524892451, 14.085402674694452]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_221",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7192698400816423, -26.178406524608757, 0.15918907566879917, 2.287559655398512]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7192698400816423, -26.178406524608757, 0.15918907566879917, 2.287559655398512]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_222",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3429613296225689, -0.3714839403437226, 0.6218489268074321, 0.018141153810595133]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3429613296225689, -0.3714839403437226, 0.6218489268074321, 0.018141153810595133]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_223",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2918142346899764, 0.17911428410468, 1.0023697403329397, 160.5027086127527]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2918142346899764, 0.17911428410468, 1.0023697403329397, 160.5027086127527]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_224",
    "sat": "def sat(x: float, coeffs: List[float]=[17.31509508953851, -0.6313812149501222, 0.27864571884350137, -8.624511361788608]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[17.31509508953851, -0.6313812149501222, 0.27864571884350137, -8.624511361788608]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_225",
    "sat": "def sat(x: float, coeffs: List[float]=[0.14635285863148342, -32.02654544170479, -1.7471857956618502, 280498.6852715417]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.14635285863148342, -32.02654544170479, -1.7471857956618502, 280498.6852715417]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_226",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0775079938079741, 0.13108551870787344, -0.1106261394032199, -36678.48471750388]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0775079938079741, 0.13108551870787344, -0.1106261394032199, -36678.48471750388]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_227",
    "sat": "def sat(x: float, coeffs: List[float]=[0.14567548112049686, 1.5012989918156034, 0.07154679311605132, -4628.705796113834]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.14567548112049686, 1.5012989918156034, 0.07154679311605132, -4628.705796113834]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_228",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.09689501862665144, -1.928249349551577, 0.7114961046986696, 12.081939598278002]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09689501862665144, -1.928249349551577, 0.7114961046986696, 12.081939598278002]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_229",
    "sat": "def sat(x: float, coeffs: List[float]=[7.584254842515136, -0.8978371835682838, -0.12132532978188089, 0.002076703226471778]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.584254842515136, -0.8978371835682838, -0.12132532978188089, 0.002076703226471778]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_230",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.49777571154224337, 0.534841646246161, 0.20118581557777918, 230.1773357243758]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.49777571154224337, 0.534841646246161, 0.20118581557777918, 230.1773357243758]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_231",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1915531383513993, -19.7911988908365, 7.966754583483259, 1198.4992060992868]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1915531383513993, -19.7911988908365, 7.966754583483259, 1198.4992060992868]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_232",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.335951976076156, 0.3089332717122975, 5.719231090745779, 1.7818948759347508]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.335951976076156, 0.3089332717122975, 5.719231090745779, 1.7818948759347508]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_233",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1262700795212561, -8.131257712823045, -496.4246970851362, 9540.573034293333]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1262700795212561, -8.131257712823045, -496.4246970851362, 9540.573034293333]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_234",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.91453997659779, -0.07913786024820764, 3.7123581236550223, -1.1865902505713795]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.91453997659779, -0.07913786024820764, 3.7123581236550223, -1.1865902505713795]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_235",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0709415540676166, -1.1891829706708428, 31.30110990099122, -78.1700515394572]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0709415540676166, -1.1891829706708428, 31.30110990099122, -78.1700515394572]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_236",
    "sat": "def sat(x: float, coeffs: List[float]=[88.90529674527733, -1.6153934669148082, 0.22119063430554395, -2.2721343166486223]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[88.90529674527733, -1.6153934669148082, 0.22119063430554395, -2.2721343166486223]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_237",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5172942705372549, 4.755069738764466, -0.5148189224050416, -15.595310939003152]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5172942705372549, 4.755069738764466, -0.5148189224050416, -15.595310939003152]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_238",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5877541850881066, -21.492822020661887, -0.06808466347779955, 0.05754442120523236]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5877541850881066, -21.492822020661887, -0.06808466347779955, 0.05754442120523236]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_239",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9112084693989356, 0.03540142279578203, -0.08013725956904194, 0.21538206353437916]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9112084693989356, 0.03540142279578203, -0.08013725956904194, 0.21538206353437916]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_240",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0855790023482852, -0.005775906147117649, -0.10148616293590067, 0.020554687595226086]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0855790023482852, -0.005775906147117649, -0.10148616293590067, 0.020554687595226086]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_241",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1533318752445166, 0.6250259767615879, -30.305113271668063, 126.67382727088825]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1533318752445166, 0.6250259767615879, -30.305113271668063, 126.67382727088825]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_242",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9377357145500036, -0.32396662418144057, 0.0389084914903024, -0.018973383139574702]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9377357145500036, -0.32396662418144057, 0.0389084914903024, -0.018973383139574702]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_243",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4904482372724292, 6.963411878734266, 0.17867190696446564, -202.20925654872968]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4904482372724292, 6.963411878734266, 0.17867190696446564, -202.20925654872968]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_244",
    "sat": "def sat(x: float, coeffs: List[float]=[0.04814883720694355, 0.14248717742732397, -31.353417061566187, -86.35095069614725]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04814883720694355, 0.14248717742732397, -31.353417061566187, -86.35095069614725]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_245",
    "sat": "def sat(x: float, coeffs: List[float]=[0.02137897371404544, -10.041534899202738, 0.11512240021150766, 390.53836263755437]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.02137897371404544, -10.041534899202738, 0.11512240021150766, 390.53836263755437]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_246",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05672934039563926, -4.388182732036362, -0.008141876949996574, 3.9821405961984198]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05672934039563926, -4.388182732036362, -0.008141876949996574, 3.9821405961984198]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_247",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.17063692279755696, -5.216739894600241, 1.1385836234761222, 1102.5164040616216]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17063692279755696, -5.216739894600241, 1.1385836234761222, 1102.5164040616216]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_248",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.23792750472566118, -0.9954363636477187, 1.8782806575486648, 0.18977598242855376]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.23792750472566118, -0.9954363636477187, 1.8782806575486648, 0.18977598242855376]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_249",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.119732666406544, -1.0576426491474011, -1.147267957998668, 0.2543142283228436]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.119732666406544, -1.0576426491474011, -1.147267957998668, 0.2543142283228436]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_250",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0653722026074481, 0.6334496536734263, 1.403625053938207, -12.877716896211723]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0653722026074481, 0.6334496536734263, 1.403625053938207, -12.877716896211723]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_251",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.32104503232327164, 0.5535850856754249, -1.264223397481735, 1.869548320326712]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.32104503232327164, 0.5535850856754249, -1.264223397481735, 1.869548320326712]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_252",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4773104177315342, 39.78024192511932, -4.836470256747194, 0.09435538008299875]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4773104177315342, 39.78024192511932, -4.836470256747194, 0.09435538008299875]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_253",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6765447628072868, 2.3331507901340127, -468.12279244567475, -45.31434531475116]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6765447628072868, 2.3331507901340127, -468.12279244567475, -45.31434531475116]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_254",
    "sat": "def sat(x: float, coeffs: List[float]=[1.644731817656828, -0.1769409673379141, -0.9622359084649154, 0.01803418853198345]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.644731817656828, -0.1769409673379141, -0.9622359084649154, 0.01803418853198345]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_255",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.3404534068355907, 1.7698421403031832, -6.3931104017684355, 39.316190725923434]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.3404534068355907, 1.7698421403031832, -6.3931104017684355, 39.316190725923434]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_256",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1469535115538871, 36.28560108280161, 0.08793551598149785, -1269.9038855339206]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1469535115538871, 36.28560108280161, 0.08793551598149785, -1269.9038855339206]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_257",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.755141013558179, 1.6809459668524431, 0.4584344562983264, 6.101504017607025]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.755141013558179, 1.6809459668524431, 0.4584344562983264, 6.101504017607025]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_258",
    "sat": "def sat(x: float, coeffs: List[float]=[12.031694487329235, -0.2541338681989492, -0.33607671166592273, 4.751832276231264]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.031694487329235, -0.2541338681989492, -0.33607671166592273, 4.751832276231264]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_259",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9735011007131891, 697.1092082291412, -0.884943140651742, -37123.39080307268]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9735011007131891, 697.1092082291412, -0.884943140651742, -37123.39080307268]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_260",
    "sat": "def sat(x: float, coeffs: List[float]=[0.29200867366517896, 1.2094955575557806, -0.14173095152127724, -5.8011623825556065]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.29200867366517896, 1.2094955575557806, -0.14173095152127724, -5.8011623825556065]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_261",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.5591798544674267, 0.14362420836775694, 0.20532216984300145, -41852.00685959422]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5591798544674267, 0.14362420836775694, 0.20532216984300145, -41852.00685959422]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_262",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8274279577609397, -1.8577527675736023, 64.09427523877757, 4241240.052475403]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8274279577609397, -1.8577527675736023, 64.09427523877757, 4241240.052475403]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_263",
    "sat": "def sat(x: float, coeffs: List[float]=[4.80900223267369, -0.2191886293616525, -0.3357776279069249, 83.59571804798074]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.80900223267369, -0.2191886293616525, -0.3357776279069249, 83.59571804798074]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_264",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4379543459401267, 0.9299708250159866, -2.968167266356005, -4.396474968369431]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4379543459401267, 0.9299708250159866, -2.968167266356005, -4.396474968369431]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_265",
    "sat": "def sat(x: float, coeffs: List[float]=[8.09400564329769, 26.752926186332548, 20.703547433555197, 0.03720773879817581]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.09400564329769, 26.752926186332548, 20.703547433555197, 0.03720773879817581]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_266",
    "sat": "def sat(x: float, coeffs: List[float]=[0.21200858782866558, 1.072002959720761, 0.3091086676023649, -0.13796881681488904]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21200858782866558, 1.072002959720761, 0.3091086676023649, -0.13796881681488904]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_267",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6115807185424974, 0.10680715310217696, -0.2928841406160015, -322.47606356441713]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6115807185424974, 0.10680715310217696, -0.2928841406160015, -322.47606356441713]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_268",
    "sat": "def sat(x: float, coeffs: List[float]=[87.35304337909248, 0.03680875997628186, 0.05178318284666957, 12717.249290874151]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[87.35304337909248, 0.03680875997628186, 0.05178318284666957, 12717.249290874151]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_269",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5207838009528151, 7.5795521566799025, 0.8806558365056714, -168416.7976394114]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5207838009528151, 7.5795521566799025, 0.8806558365056714, -168416.7976394114]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_270",
    "sat": "def sat(x: float, coeffs: List[float]=[0.006203549892361678, -0.31081984675769964, -0.9798633852060398, -0.6048200083075331]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.006203549892361678, -0.31081984675769964, -0.9798633852060398, -0.6048200083075331]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_271",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0573392985034482, -1.4542476366858532, -6.177173021501613, -8.650731718084524]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0573392985034482, -1.4542476366858532, -6.177173021501613, -8.650731718084524]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_272",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6139146010399626, 1.7462322055511281, -0.469911065061478, 67.08695447903034]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6139146010399626, 1.7462322055511281, -0.469911065061478, 67.08695447903034]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_273",
    "sat": "def sat(x: float, coeffs: List[float]=[7.291503103420763, 2.2526376354815776, -1.0853843617208343, 0.0252651472114524]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.291503103420763, 2.2526376354815776, -1.0853843617208343, 0.0252651472114524]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_274",
    "sat": "def sat(x: float, coeffs: List[float]=[1.6065092975611333, 0.1424520044532882, 75.08635812798111, 86.66693745559304]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6065092975611333, 0.1424520044532882, 75.08635812798111, 86.66693745559304]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_275",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.012583993997085688, 7.6592336433131685, 0.37784284627790443, -0.8828547555363238]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.012583993997085688, 7.6592336433131685, 0.37784284627790443, -0.8828547555363238]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_276",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.05857524565793019, -0.06240298158087554, 0.00337744849817471, 0.20629840361606983]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05857524565793019, -0.06240298158087554, 0.00337744849817471, 0.20629840361606983]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_277",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.06495128297667503, -0.6677036132491598, -0.2330363938081442, 0.13633905684311565]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06495128297667503, -0.6677036132491598, -0.2330363938081442, 0.13633905684311565]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_278",
    "sat": "def sat(x: float, coeffs: List[float]=[-40.80414733806449, 16.85551542723623, 0.19423468266826416, -414566.5944292147]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-40.80414733806449, 16.85551542723623, 0.19423468266826416, -414566.5944292147]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_279",
    "sat": "def sat(x: float, coeffs: List[float]=[0.308071485956613, -1.9441953511661136, 0.1883872315254437, -10955.254030277814]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.308071485956613, -1.9441953511661136, 0.1883872315254437, -10955.254030277814]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_280",
    "sat": "def sat(x: float, coeffs: List[float]=[0.10935063349686495, -0.6841786860582738, 348.0453867460927, 146.23061031351773]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10935063349686495, -0.6841786860582738, 348.0453867460927, 146.23061031351773]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_281",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0003808620997347578, 2.361976511829828, -3.711771118579186, 1.4552632703025083]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0003808620997347578, 2.361976511829828, -3.711771118579186, 1.4552632703025083]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_282",
    "sat": "def sat(x: float, coeffs: List[float]=[1.8392615305234823, 0.9411888984996176, -0.06021738394545414, -0.002779135562906552]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8392615305234823, 0.9411888984996176, -0.06021738394545414, -0.002779135562906552]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_283",
    "sat": "def sat(x: float, coeffs: List[float]=[11.838503856295274, -0.31724679887858476, 0.07971543946687472, -28.131940565114032]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.838503856295274, -0.31724679887858476, 0.07971543946687472, -28.131940565114032]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_284",
    "sat": "def sat(x: float, coeffs: List[float]=[1.272176314288382, -2.424784906886506, 3.0870621175586606, 3359.3326279328107]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.272176314288382, -2.424784906886506, 3.0870621175586606, 3359.3326279328107]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_285",
    "sat": "def sat(x: float, coeffs: List[float]=[74.13509300626885, 10.113093738874843, 8.339762388214762, 3.417809080182061]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[74.13509300626885, 10.113093738874843, 8.339762388214762, 3.417809080182061]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_286",
    "sat": "def sat(x: float, coeffs: List[float]=[2.67606518564835, 0.15288794260112573, 792.0936111282446, -3224.9135704398236]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.67606518564835, 0.15288794260112573, 792.0936111282446, -3224.9135704398236]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_287",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6420780983438757, 12.958985594331159, -6.342180979167812, -0.5677954090316008]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6420780983438757, 12.958985594331159, -6.342180979167812, -0.5677954090316008]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_288",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.20503783519455987, -841.7165260042478, -0.043255384252442276, 1.7435141607719118]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.20503783519455987, -841.7165260042478, -0.043255384252442276, 1.7435141607719118]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_289",
    "sat": "def sat(x: float, coeffs: List[float]=[1.156907719497578, -0.16840076453686473, 0.3667711233367763, -1650.6323222005456]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.156907719497578, -0.16840076453686473, 0.3667711233367763, -1650.6323222005456]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_290",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4018051947947335, 0.4136686458211039, -9.110199267703027, -3.5266082688804103]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4018051947947335, 0.4136686458211039, -9.110199267703027, -3.5266082688804103]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_291",
    "sat": "def sat(x: float, coeffs: List[float]=[0.817787599180637, -0.04210145607898452, -0.0233417834665209, -450.1643417539289]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.817787599180637, -0.04210145607898452, -0.0233417834665209, -450.1643417539289]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_292",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5009092259083393, 4.283668404715507, -0.1674752082838434, -116.77018173291346]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5009092259083393, 4.283668404715507, -0.1674752082838434, -116.77018173291346]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_293",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.393251466242183, 1.405509383898158, -7.4224369983324125, 1.7156979363581795]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.393251466242183, 1.405509383898158, -7.4224369983324125, 1.7156979363581795]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_294",
    "sat": "def sat(x: float, coeffs: List[float]=[0.24323736304788235, -0.15333336909102221, -342.72999034625406, -383.52281117067776]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.24323736304788235, -0.15333336909102221, -342.72999034625406, -383.52281117067776]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_295",
    "sat": "def sat(x: float, coeffs: List[float]=[2.492171341706682, 2.6562690941399922, 2.3782641132800415, -8.227469062231735]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.492171341706682, 2.6562690941399922, 2.3782641132800415, -8.227469062231735]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_296",
    "sat": "def sat(x: float, coeffs: List[float]=[28.256566907028198, -1.1270868988230671, -0.19514747697748147, 1890.5062255924242]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[28.256566907028198, -1.1270868988230671, -0.19514747697748147, 1890.5062255924242]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_297",
    "sat": "def sat(x: float, coeffs: List[float]=[-127.3790546820702, 0.2118856354418094, -0.0493031757195288, 6737037.880462241]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-127.3790546820702, 0.2118856354418094, -0.0493031757195288, 6737037.880462241]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_298",
    "sat": "def sat(x: float, coeffs: List[float]=[-36.10461764566325, 0.8865740915754546, 2.64107234898182, -16.496306542172388]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-36.10461764566325, 0.8865740915754546, 2.64107234898182, -16.496306542172388]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_299",
    "sat": "def sat(x: float, coeffs: List[float]=[7.551082746792045, 0.4255424436651795, -0.19583169071140386, -0.008128641837179321]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.551082746792045, 0.4255424436651795, -0.19583169071140386, -0.008128641837179321]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_300",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8347408871745293, 0.9373249850898704, -0.7309646511272873, 0.16158174801859695]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8347408871745293, 0.9373249850898704, -0.7309646511272873, 0.16158174801859695]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_301",
    "sat": "def sat(x: float, coeffs: List[float]=[0.04448400596854074, -0.31238391499533336, 6.3889918536978465, 3.2356669703024714]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04448400596854074, -0.31238391499533336, 6.3889918536978465, 3.2356669703024714]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_302",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.17869651425938202, 0.8576490610698261, 0.02681422441192649, -0.8253821727788261]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17869651425938202, 0.8576490610698261, 0.02681422441192649, -0.8253821727788261]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_303",
    "sat": "def sat(x: float, coeffs: List[float]=[28.649409770028345, -786.458127241593, 0.3703710336873332, 367.1502498030468]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[28.649409770028345, -786.458127241593, 0.3703710336873332, 367.1502498030468]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_304",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.1843044307493145, 0.0014579012390847357, -7.978369054656412, -4499.219225463789]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.1843044307493145, 0.0014579012390847357, -7.978369054656412, -4499.219225463789]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_305",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.4537401681755824, 440.07967633734484, 0.22275773845360228, -647.5162586933722]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4537401681755824, 440.07967633734484, 0.22275773845360228, -647.5162586933722]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_306",
    "sat": "def sat(x: float, coeffs: List[float]=[4.836433394527746, 0.17162203028798673, -0.7949293116350926, 0.1151006825504036]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.836433394527746, 0.17162203028798673, -0.7949293116350926, 0.1151006825504036]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_307",
    "sat": "def sat(x: float, coeffs: List[float]=[14.600194570268846, 1.3667502886941938, 0.16738343827081162, -5.277817363980965]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.600194570268846, 1.3667502886941938, 0.16738343827081162, -5.277817363980965]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_308",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7401751372168556, 1.2742880694728458, 6.696752903355662, 34263.74428115152]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7401751372168556, 1.2742880694728458, 6.696752903355662, 34263.74428115152]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_309",
    "sat": "def sat(x: float, coeffs: List[float]=[0.724664021195086, 0.28724267915066054, -0.16346241547893214, -540.9909968923162]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.724664021195086, 0.28724267915066054, -0.16346241547893214, -540.9909968923162]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_310",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0242578711582293, -0.3340529097047164, 0.1867760223948003, 13.065195749484548]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0242578711582293, -0.3340529097047164, 0.1867760223948003, 13.065195749484548]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_311",
    "sat": "def sat(x: float, coeffs: List[float]=[0.41114529938890554, 0.3540237832290785, 0.8039075193401285, 0.6050072562798327]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.41114529938890554, 0.3540237832290785, 0.8039075193401285, 0.6050072562798327]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_312",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.770074929538873, -8.500708305144403, 1.5060423228363649, 1.1188257225807088]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.770074929538873, -8.500708305144403, 1.5060423228363649, 1.1188257225807088]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_313",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3728058182642808, 0.31449420954291135, -0.38128396938550296, -0.024527928435107767]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3728058182642808, 0.31449420954291135, -0.38128396938550296, -0.024527928435107767]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_314",
    "sat": "def sat(x: float, coeffs: List[float]=[6.050257197918921, 1.5494453325340827, 1.2220123547978305, 197.78195508940448]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.050257197918921, 1.5494453325340827, 1.2220123547978305, 197.78195508940448]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_315",
    "sat": "def sat(x: float, coeffs: List[float]=[28.27613464696778, 0.06681175105839039, 23.165519575816887, -44.23915897717384]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[28.27613464696778, 0.06681175105839039, 23.165519575816887, -44.23915897717384]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_316",
    "sat": "def sat(x: float, coeffs: List[float]=[1.490566683104606, -0.17690108477654323, -0.474264799795533, -147.37322795680302]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.490566683104606, -0.17690108477654323, -0.474264799795533, -147.37322795680302]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_317",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.126884913338518, -4.641474468001696, 24.22653419664766, 26.97964154494087]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.126884913338518, -4.641474468001696, 24.22653419664766, 26.97964154494087]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_318",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0110278621255018, -137.25671020326752, 0.15906449704450557, 84.52141641687763]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0110278621255018, -137.25671020326752, 0.15906449704450557, 84.52141641687763]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_319",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5731034329191571, -1.078454669598704, 1.3884889789624575, -0.42662738639269693]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5731034329191571, -1.078454669598704, 1.3884889789624575, -0.42662738639269693]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_320",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0025715676384715134, -57.40647265284802, -2.9754962897989743, 3810.8614605039493]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0025715676384715134, -57.40647265284802, -2.9754962897989743, 3810.8614605039493]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_321",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.05505788561599497, 1.1165301944140824, 0.17185642507756493, -0.04833842692780911]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05505788561599497, 1.1165301944140824, 0.17185642507756493, -0.04833842692780911]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_322",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.33245379557730836, -0.2704688178902206, 0.5607980598340063, -29.750611315980382]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.33245379557730836, -0.2704688178902206, 0.5607980598340063, -29.750611315980382]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_323",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.661406648039588, -10.862604783104368, 92.74691154355874, -11.9209386229273]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.661406648039588, -10.862604783104368, 92.74691154355874, -11.9209386229273]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_324",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3505138845175642, -0.23061032013855706, -1.8769621491052153, -115.46474596202252]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3505138845175642, -0.23061032013855706, -1.8769621491052153, -115.46474596202252]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_325",
    "sat": "def sat(x: float, coeffs: List[float]=[16.69804680527309, 0.7999548815045335, 0.31593581953846633, -57.49445837166859]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.69804680527309, 0.7999548815045335, 0.31593581953846633, -57.49445837166859]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_326",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.157985036521005, 4.617885842980814, -0.1665441281160187, -0.21786355529450346]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.157985036521005, 4.617885842980814, -0.1665441281160187, -0.21786355529450346]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_327",
    "sat": "def sat(x: float, coeffs: List[float]=[564.4453835033229, 0.5213026910572499, -0.218645624695047, -1569.5092497447229]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[564.4453835033229, 0.5213026910572499, -0.218645624695047, -1569.5092497447229]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_328",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8434661955166383, 24.432933682379737, -0.38197243805449704, -0.12263714791948115]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8434661955166383, 24.432933682379737, -0.38197243805449704, -0.12263714791948115]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_329",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5326801403031656, -287.2360816508947, 0.28386866140619116, 268.0289055788676]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5326801403031656, -287.2360816508947, 0.28386866140619116, 268.0289055788676]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_330",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1295631414501676, -43.73988306907719, -10.365966433703996, 375.00370822960815]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1295631414501676, -43.73988306907719, -10.365966433703996, 375.00370822960815]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_331",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8999869642408814, -90.36222009623525, 3.7730236150089556, 2.0744149240441825]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8999869642408814, -90.36222009623525, 3.7730236150089556, 2.0744149240441825]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_332",
    "sat": "def sat(x: float, coeffs: List[float]=[2.812232381127089, -0.8923885986196872, 0.2690898563070569, -0.021538929110574832]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.812232381127089, -0.8923885986196872, 0.2690898563070569, -0.021538929110574832]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_333",
    "sat": "def sat(x: float, coeffs: List[float]=[5.8260605368170175, 0.5340472824552935, -12.358432216795983, -5.615735025419523]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.8260605368170175, 0.5340472824552935, -12.358432216795983, -5.615735025419523]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_334",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.0018986223136745, -0.2018776064216022, 0.34027267649523923, 5.914469924005944]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0018986223136745, -0.2018776064216022, 0.34027267649523923, 5.914469924005944]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_335",
    "sat": "def sat(x: float, coeffs: List[float]=[1.3906224434174392, -4.488899620179874, -2.324047369310369, 11.069814571536018]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3906224434174392, -4.488899620179874, -2.324047369310369, 11.069814571536018]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_336",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2142463070439121, -55.44012351614244, 13.158982440170838, 362.3178761100825]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2142463070439121, -55.44012351614244, 13.158982440170838, 362.3178761100825]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_337",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.8384738327758205, -0.4276892579873241, 0.11498963903844787, -0.0011508230735563715]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8384738327758205, -0.4276892579873241, 0.11498963903844787, -0.0011508230735563715]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_338",
    "sat": "def sat(x: float, coeffs: List[float]=[0.07215630349208209, 0.392119340504477, 26.53877033727765, -8.657151072768865]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07215630349208209, 0.392119340504477, 26.53877033727765, -8.657151072768865]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_339",
    "sat": "def sat(x: float, coeffs: List[float]=[25.725105635912715, 0.09363603140719268, -0.01616619189832254, 6.018665176987776]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[25.725105635912715, 0.09363603140719268, -0.01616619189832254, 6.018665176987776]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_340",
    "sat": "def sat(x: float, coeffs: List[float]=[-318.5608187697255, -10.407554738505093, 6.500994991321019, -621.1121938405769]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-318.5608187697255, -10.407554738505093, 6.500994991321019, -621.1121938405769]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_341",
    "sat": "def sat(x: float, coeffs: List[float]=[14.680882823745188, -505.1905758113105, 5.541854795008643, 83499.02058892496]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.680882823745188, -505.1905758113105, 5.541854795008643, 83499.02058892496]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_342",
    "sat": "def sat(x: float, coeffs: List[float]=[0.29530546590133017, -0.10310128037338233, -61.38794692377479, -7.225469595547957]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.29530546590133017, -0.10310128037338233, -61.38794692377479, -7.225469595547957]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_343",
    "sat": "def sat(x: float, coeffs: List[float]=[0.37334797815451415, 1.1405482057368799, 0.014383229594657468, -0.10813920443283333]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.37334797815451415, 1.1405482057368799, 0.014383229594657468, -0.10813920443283333]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_344",
    "sat": "def sat(x: float, coeffs: List[float]=[14.736937623163461, -0.1035439145381789, 2.06280216589866, -267717.8046637159]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.736937623163461, -0.1035439145381789, 2.06280216589866, -267717.8046637159]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_345",
    "sat": "def sat(x: float, coeffs: List[float]=[5.131048482888537, -0.029903018314428136, 0.409340604657066, -40.25564772791214]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.131048482888537, -0.029903018314428136, 0.409340604657066, -40.25564772791214]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_346",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2933504070057722, -0.19328090700838874, 2.837325605977138, 0.09124404474668461]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2933504070057722, -0.19328090700838874, 2.837325605977138, 0.09124404474668461]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_347",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.13638302729823826, -4.466419720884164, 0.061215393364860406, 0.0048045064138551325]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.13638302729823826, -4.466419720884164, 0.061215393364860406, 0.0048045064138551325]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_348",
    "sat": "def sat(x: float, coeffs: List[float]=[1.3101580870736165, -2.3159973294830167, 0.015508225198117565, -179.95211613923414]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3101580870736165, -2.3159973294830167, 0.015508225198117565, -179.95211613923414]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_349",
    "sat": "def sat(x: float, coeffs: List[float]=[-137.8181972533066, -5.143574207779689, 5.219432909689999, 0.44075406759509134]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-137.8181972533066, -5.143574207779689, 5.219432909689999, 0.44075406759509134]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_350",
    "sat": "def sat(x: float, coeffs: List[float]=[-21.055234420657072, 6.239457873055056, -9.52249432039763, -1009011.4336369511]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-21.055234420657072, 6.239457873055056, -9.52249432039763, -1009011.4336369511]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_351",
    "sat": "def sat(x: float, coeffs: List[float]=[0.007308604893553265, 0.7379393318703458, -0.039341856828260635, -1032.804124048755]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.007308604893553265, 0.7379393318703458, -0.039341856828260635, -1032.804124048755]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_352",
    "sat": "def sat(x: float, coeffs: List[float]=[11.98573030626128, -364.48276589223997, -0.7969796155904367, 20.734646247957112]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.98573030626128, -364.48276589223997, -0.7969796155904367, 20.734646247957112]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_353",
    "sat": "def sat(x: float, coeffs: List[float]=[0.27432146477536135, -8.213191762002232, -0.02184495432252283, 0.0062130153431215005]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.27432146477536135, -8.213191762002232, -0.02184495432252283, 0.0062130153431215005]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_354",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.06626074346519702, 3.2768204684483915, 0.08757693249796487, -26.893509701793267]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06626074346519702, 3.2768204684483915, 0.08757693249796487, -26.893509701793267]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_355",
    "sat": "def sat(x: float, coeffs: List[float]=[6.416050628930098, -7.633095288829264, 0.012928449400293252, 117.05000240121976]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.416050628930098, -7.633095288829264, 0.012928449400293252, 117.05000240121976]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_356",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1334292519795528, -0.72817847128145, 1.1769503863600745, -0.3734231174876643]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1334292519795528, -0.72817847128145, 1.1769503863600745, -0.3734231174876643]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_357",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.2965006765160565, 1.0345205267520037, 1.3065258342970436, 1.3627968647436377]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.2965006765160565, 1.0345205267520037, 1.3065258342970436, 1.3627968647436377]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_358",
    "sat": "def sat(x: float, coeffs: List[float]=[0.04098642093744509, -1.0817217754426436, 0.5062055509754776, 45.17284059220433]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04098642093744509, -1.0817217754426436, 0.5062055509754776, 45.17284059220433]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_359",
    "sat": "def sat(x: float, coeffs: List[float]=[0.28109362662691145, -0.9677528878710054, 0.3371237389311297, 104.57820194258126]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.28109362662691145, -0.9677528878710054, 0.3371237389311297, 104.57820194258126]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_360",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3952759240335171, -0.04276067954786914, 0.6069266146059967, 46.79850515039379]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3952759240335171, -0.04276067954786914, 0.6069266146059967, 46.79850515039379]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_361",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.01524101883587751, 0.265387213736387, -1.7831672386425055, 242307.66371663762]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.01524101883587751, 0.265387213736387, -1.7831672386425055, 242307.66371663762]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_362",
    "sat": "def sat(x: float, coeffs: List[float]=[3.202230463847354, -5.775420352813058, 1.807792996566637, 0.5713636080873731]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.202230463847354, -5.775420352813058, 1.807792996566637, 0.5713636080873731]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_363",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.4278915566828396, 10.683033142975978, 0.7939646899348768, 274169.9925381403]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.4278915566828396, 10.683033142975978, 0.7939646899348768, 274169.9925381403]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_364",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5044084486863606, 0.9489560167715165, -5.62455482836608, -2.0664832459066256]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5044084486863606, 0.9489560167715165, -5.62455482836608, -2.0664832459066256]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_365",
    "sat": "def sat(x: float, coeffs: List[float]=[9.056089116151023, -0.22715755916800284, 0.33072857456437, -0.13994963767458796]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.056089116151023, -0.22715755916800284, 0.33072857456437, -0.13994963767458796]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_366",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08863286793753167, -0.7776810928547536, 175.76808862061185, -144.05443715108248]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08863286793753167, -0.7776810928547536, 175.76808862061185, -144.05443715108248]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_367",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.23170230575631598, 44.00820702442237, 0.03632095603375888, -507.37912475647136]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.23170230575631598, 44.00820702442237, 0.03632095603375888, -507.37912475647136]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_368",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3331980316740744, 0.5430822182833137, -18.137674830222053, 8.179202153666017]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3331980316740744, 0.5430822182833137, -18.137674830222053, 8.179202153666017]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_369",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.5808541443468398, 0.10949560791947666, 0.2464091411744617, -1.3908866524321946]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5808541443468398, 0.10949560791947666, 0.2464091411744617, -1.3908866524321946]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_370",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.20820554191064633, 7.796846279258297, 0.10213294914664332, -4.601925844121771]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.20820554191064633, 7.796846279258297, 0.10213294914664332, -4.601925844121771]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_371",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2773603723746509, 0.12764177035619584, -1.0693024600582277, 20.092530674488927]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2773603723746509, 0.12764177035619584, -1.0693024600582277, 20.092530674488927]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_372",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.02893392881128613, 5.711749692480217, 0.6643840858521021, -2722.1071527987183]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.02893392881128613, 5.711749692480217, 0.6643840858521021, -2722.1071527987183]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_373",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5293042402907036, 0.5255031676235465, 1.267925928648408, -0.210107415922042]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5293042402907036, 0.5255031676235465, 1.267925928648408, -0.210107415922042]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_374",
    "sat": "def sat(x: float, coeffs: List[float]=[0.12920872943196637, 1.586579477173262, -2.038467943254066, 0.49747276802922946]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.12920872943196637, 1.586579477173262, -2.038467943254066, 0.49747276802922946]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_375",
    "sat": "def sat(x: float, coeffs: List[float]=[4.372341883709646, 0.06795595785942081, 253.45952848986778, -388.43176670925436]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.372341883709646, 0.06795595785942081, 253.45952848986778, -388.43176670925436]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_376",
    "sat": "def sat(x: float, coeffs: List[float]=[5.594019276095556, -3.296880605785761, 0.6274349754614114, -1.6337303838490715]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.594019276095556, -3.296880605785761, 0.6274349754614114, -1.6337303838490715]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_377",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5647829463704738, -8.465662455197004, -1.510875145279587, 0.0641771091762169]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5647829463704738, -8.465662455197004, -1.510875145279587, 0.0641771091762169]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_378",
    "sat": "def sat(x: float, coeffs: List[float]=[0.026997882906890352, -1.6750951233550697, -0.24250110673617228, 0.4898550608507596]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.026997882906890352, -1.6750951233550697, -0.24250110673617228, 0.4898550608507596]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_379",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.6833170500318768, 6.229190275691683, -0.021017270191124943, -0.18700928247529966]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6833170500318768, 6.229190275691683, -0.021017270191124943, -0.18700928247529966]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_380",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.464685592189277, -2.991905770598875, -1.934912775540038, 10.963929010672459]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.464685592189277, -2.991905770598875, -1.934912775540038, 10.963929010672459]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_381",
    "sat": "def sat(x: float, coeffs: List[float]=[0.07025791930678604, -0.5167543741906907, 0.03390468233753263, 0.5477800607438345]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07025791930678604, -0.5167543741906907, 0.03390468233753263, 0.5477800607438345]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_382",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6308211429118186, 0.6659470923412733, -0.017769732276388044, -0.12209836257972871]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6308211429118186, 0.6659470923412733, -0.017769732276388044, -0.12209836257972871]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_383",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.0113713207966986, 1.5200640082009427, 1.1462979744092678, -901.7836840496333]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.0113713207966986, 1.5200640082009427, 1.1462979744092678, -901.7836840496333]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_384",
    "sat": "def sat(x: float, coeffs: List[float]=[0.19002834118256584, 93.94247165931229, 1.4151267955666122, -1514968.3878109786]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.19002834118256584, 93.94247165931229, 1.4151267955666122, -1514968.3878109786]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_385",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.2018536928612726, -0.12405383017019715, 0.0731508918244405, -0.22073369071375243]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.2018536928612726, -0.12405383017019715, 0.0731508918244405, -0.22073369071375243]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_386",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.2769661330917432, 0.2587397396807895, -8.307020110031642, 26.679557294377855]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.2769661330917432, 0.2587397396807895, -8.307020110031642, 26.679557294377855]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_387",
    "sat": "def sat(x: float, coeffs: List[float]=[0.10718011935568746, -0.1290855790325319, -0.44889355287842597, 0.07903837767743314]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10718011935568746, -0.1290855790325319, -0.44889355287842597, 0.07903837767743314]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_388",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0075136295175558905, 0.6239501167032433, 0.8183434052909545, 0.1694541513546527]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0075136295175558905, 0.6239501167032433, 0.8183434052909545, 0.1694541513546527]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_389",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.4741707097384908, 0.016803539641280823, 2.1767406707410757, 1.0077109754867526]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4741707097384908, 0.016803539641280823, 2.1767406707410757, 1.0077109754867526]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_390",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3019957581367914, 0.1634975272191832, -0.2962214077489551, 212727.11533162187]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3019957581367914, 0.1634975272191832, -0.2962214077489551, 212727.11533162187]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_391",
    "sat": "def sat(x: float, coeffs: List[float]=[1.34594358279084, 0.1189450159904167, -0.05851187850618874, -52736.625503070885]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.34594358279084, 0.1189450159904167, -0.05851187850618874, -52736.625503070885]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_392",
    "sat": "def sat(x: float, coeffs: List[float]=[0.30937148622699434, 0.14085137338838152, -0.7231932301991978, -0.48132438297517516]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.30937148622699434, 0.14085137338838152, -0.7231932301991978, -0.48132438297517516]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_393",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2103771123509622, -0.3300199416298793, -30.1663361108846, 0.10446898723053959]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2103771123509622, -0.3300199416298793, -30.1663361108846, 0.10446898723053959]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_394",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.818901777239813, -3.514789239701038, 0.7299831745742539, 367.3772265477527]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.818901777239813, -3.514789239701038, 0.7299831745742539, 367.3772265477527]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_395",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.18185621431874824, -0.769319263562477, 0.09904547052387924, 0.10461398178377852]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18185621431874824, -0.769319263562477, 0.09904547052387924, 0.10461398178377852]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_396",
    "sat": "def sat(x: float, coeffs: List[float]=[1.3752524344842074, 1.2829664955825324, -31.5718439202173, -59.070703047797394]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3752524344842074, 1.2829664955825324, -31.5718439202173, -59.070703047797394]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_397",
    "sat": "def sat(x: float, coeffs: List[float]=[1.5833128281238744, -5.643318852873201, 0.4419296278543081, 14.423827820731729]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5833128281238744, -5.643318852873201, 0.4419296278543081, 14.423827820731729]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_398",
    "sat": "def sat(x: float, coeffs: List[float]=[-18.06699567464226, -0.21932300387018158, 247.21400220718627, -294.32057466159984]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.06699567464226, -0.21932300387018158, 247.21400220718627, -294.32057466159984]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_399",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.2419911785585653, 0.5062127688552769, -3.1216138246680942, 560.0922758776298]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.2419911785585653, 0.5062127688552769, -3.1216138246680942, 560.0922758776298]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_400",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.764262144380118, -2.7201066209592537, 2.4402054087603635, -0.2216883290089306]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.764262144380118, -2.7201066209592537, 2.4402054087603635, -0.2216883290089306]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_401",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.597672819753297, -0.5235454282228037, 5.622892463434336, -4.572950863891043]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.597672819753297, -0.5235454282228037, 5.622892463434336, -4.572950863891043]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_402",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2451365653069729, 2.0326727265910702, 130.53141847190557, -1454.9432620153348]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2451365653069729, 2.0326727265910702, 130.53141847190557, -1454.9432620153348]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_403",
    "sat": "def sat(x: float, coeffs: List[float]=[2.929759799871292, -0.9115828099903651, -1.6359179953467062, -0.1642340754465728]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.929759799871292, -0.9115828099903651, -1.6359179953467062, -0.1642340754465728]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_404",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1282754984416405, 0.07922722976864487, 46.90232192009601, -1.171674938193502]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1282754984416405, 0.07922722976864487, 46.90232192009601, -1.171674938193502]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_405",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6105256300744545, -1.1036604674214272, -0.1342299960619282, 0.10265603502855702]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6105256300744545, -1.1036604674214272, -0.1342299960619282, 0.10265603502855702]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_406",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.03800558991319658, 28.82586458157793, 0.4518988744229809, -13.456733111064382]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03800558991319658, 28.82586458157793, 0.4518988744229809, -13.456733111064382]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_407",
    "sat": "def sat(x: float, coeffs: List[float]=[2.808668361044145, 970.0395855763101, -0.03446689419273937, -63.1893675594361]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.808668361044145, 970.0395855763101, -0.03446689419273937, -63.1893675594361]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_408",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.089478698095771, 0.28391181400024457, -1.4900565557344378, -63.84665916381235]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.089478698095771, 0.28391181400024457, -1.4900565557344378, -63.84665916381235]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_409",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.06946973305418269, -2.9510268114021994, -2.2960712855940417, 0.26985892840150477]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06946973305418269, -2.9510268114021994, -2.2960712855940417, 0.26985892840150477]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_410",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0629810105306357, -0.14242314456795727, 80.76956419161736, 345.13781336337894]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0629810105306357, -0.14242314456795727, 80.76956419161736, 345.13781336337894]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_411",
    "sat": "def sat(x: float, coeffs: List[float]=[429.3011049516453, -2.450481420632841, 8.043201806039391, 5709605.551111117]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[429.3011049516453, -2.450481420632841, 8.043201806039391, 5709605.551111117]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_412",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9115778180152111, 0.31980721781574245, 0.13797883842105993, -7.995155384876969]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9115778180152111, 0.31980721781574245, 0.13797883842105993, -7.995155384876969]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_413",
    "sat": "def sat(x: float, coeffs: List[float]=[12.852115570472458, -0.07152641210224386, -0.22545822792446604, -15946.854553566003]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.852115570472458, -0.07152641210224386, -0.22545822792446604, -15946.854553566003]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_414",
    "sat": "def sat(x: float, coeffs: List[float]=[15.859109805186876, 0.018285228369780526, 0.7695576888057949, 5438294.976180583]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.859109805186876, 0.018285228369780526, 0.7695576888057949, 5438294.976180583]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_415",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2261363468117316, 61.16421400127402, -0.6517910815841209, -1680.7739506382093]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2261363468117316, 61.16421400127402, -0.6517910815841209, -1680.7739506382093]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_416",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.03238959500314801, -3.7092833404839585, -0.05372561134609377, 6.770579243280475]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03238959500314801, -3.7092833404839585, -0.05372561134609377, 6.770579243280475]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_417",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.8318684156846643, -103.29007995339767, 2.945279178225664, 89.69828860964078]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8318684156846643, -103.29007995339767, 2.945279178225664, 89.69828860964078]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_418",
    "sat": "def sat(x: float, coeffs: List[float]=[0.29181532800002374, 0.9336009220021646, 29.17638663072461, -285.92603969039635]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.29181532800002374, 0.9336009220021646, 29.17638663072461, -285.92603969039635]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_419",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.19041773275705878, -2.8639336014742813, -10.087218396586909, 6586418.547334057]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19041773275705878, -2.8639336014742813, -10.087218396586909, 6586418.547334057]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_420",
    "sat": "def sat(x: float, coeffs: List[float]=[6.895462644987846, 259.88505974826126, 0.48435911742379467, -15335.505318825626]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.895462644987846, 259.88505974826126, 0.48435911742379467, -15335.505318825626]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_421",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8022408836585697, -11.549843883022104, 0.024294971231052582, 1.6783745051665322]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8022408836585697, -11.549843883022104, 0.024294971231052582, 1.6783745051665322]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_422",
    "sat": "def sat(x: float, coeffs: List[float]=[0.015225614892855418, 158.44121993557658, 1.5838955013743732, -1009184.3685317914]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.015225614892855418, 158.44121993557658, 1.5838955013743732, -1009184.3685317914]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_423",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9212168997634457, -1.2878840057163456, 0.03550489119814778, 0.000909142946053572]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9212168997634457, -1.2878840057163456, 0.03550489119814778, 0.000909142946053572]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_424",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1541023235426762, -0.027881195649881157, -13.621764887633775, 1488.6965834380876]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1541023235426762, -0.027881195649881157, -13.621764887633775, 1488.6965834380876]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_425",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9622583420262708, -3.770196754889342, 1.9856835250715354, 6.494248590104606]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9622583420262708, -3.770196754889342, 1.9856835250715354, 6.494248590104606]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_426",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06414384077500968, 27.036130350466532, 8.921711398904419, -5791.381880588703]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06414384077500968, 27.036130350466532, 8.921711398904419, -5791.381880588703]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_427",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8551852459314784, 5.0120549074946785, -14.275705312834857, 1.1019229648628959]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8551852459314784, 5.0120549074946785, -14.275705312834857, 1.1019229648628959]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_428",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.2847215179504, -1.3297081801062982, 0.24006370409091096, -1.1207497544035818]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.2847215179504, -1.3297081801062982, 0.24006370409091096, -1.1207497544035818]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_429",
    "sat": "def sat(x: float, coeffs: List[float]=[3.5074701680457188, 0.7458793690099816, -0.10111781385875103, 0.11783254101970665]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.5074701680457188, 0.7458793690099816, -0.10111781385875103, 0.11783254101970665]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_430",
    "sat": "def sat(x: float, coeffs: List[float]=[0.17908220101181968, 0.04189167548756453, -40.14905988434527, -205.25910091623047]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17908220101181968, 0.04189167548756453, -40.14905988434527, -205.25910091623047]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_431",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.02658012669618, -0.06175259013035276, -0.30285891802315085, 5881536.25020644]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.02658012669618, -0.06175259013035276, -0.30285891802315085, 5881536.25020644]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_432",
    "sat": "def sat(x: float, coeffs: List[float]=[2.1053090019257064, -0.6332385645089137, 2.4391150027353805, -0.3838579479551673]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1053090019257064, -0.6332385645089137, 2.4391150027353805, -0.3838579479551673]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_433",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.067326744511408, 0.5822283645510922, 0.14967532140663375, -1.4287162768612602]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.067326744511408, 0.5822283645510922, 0.14967532140663375, -1.4287162768612602]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_434",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1624058224532032, 0.8802309964299919, 3.258412994738746, 0.15692678232445936]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1624058224532032, 0.8802309964299919, 3.258412994738746, 0.15692678232445936]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_435",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05479480814088681, -212.7990178194335, -4.785139892547104, 99.85760930273368]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05479480814088681, -212.7990178194335, -4.785139892547104, 99.85760930273368]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_436",
    "sat": "def sat(x: float, coeffs: List[float]=[-26.47139306025115, 0.17325572991537466, 2.1438177330329364, -8506.656957666291]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-26.47139306025115, 0.17325572991537466, 2.1438177330329364, -8506.656957666291]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_437",
    "sat": "def sat(x: float, coeffs: List[float]=[0.01688204710376658, -2.3918841103248085, -0.9855483469432914, 32.76305337354437]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.01688204710376658, -2.3918841103248085, -0.9855483469432914, 32.76305337354437]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_438",
    "sat": "def sat(x: float, coeffs: List[float]=[-23.040521738422104, -3.1820996475347734, -0.21129780166220438, 377.28965574493725]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-23.040521738422104, -3.1820996475347734, -0.21129780166220438, 377.28965574493725]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_439",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8769286713411732, 0.09660665339334873, 1.0240283878249328, 0.0948695700959161]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8769286713411732, 0.09660665339334873, 1.0240283878249328, 0.0948695700959161]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_440",
    "sat": "def sat(x: float, coeffs: List[float]=[0.09835715039675241, 1.4713720499907543, 0.2872287656728536, -0.034223916174046694]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09835715039675241, 1.4713720499907543, 0.2872287656728536, -0.034223916174046694]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_441",
    "sat": "def sat(x: float, coeffs: List[float]=[28.387847241507234, 577.5108141938125, 0.5824159482696344, -37.558599041666355]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[28.387847241507234, 577.5108141938125, 0.5824159482696344, -37.558599041666355]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_442",
    "sat": "def sat(x: float, coeffs: List[float]=[4.467378831644862, 6.327948162867361, 1.559358790710963, -0.13008829837404623]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.467378831644862, 6.327948162867361, 1.559358790710963, -0.13008829837404623]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_443",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6883718894971295, -0.9491949816273113, 350.18370681310535, 1331.6125463715282]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6883718894971295, -0.9491949816273113, 350.18370681310535, 1331.6125463715282]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_444",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06172953261891031, -96.61698325374233, -0.49053604975156, 19.35885377048534]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06172953261891031, -96.61698325374233, -0.49053604975156, 19.35885377048534]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_445",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.05513361660951769, -1.2669937644308054, 0.21152774801653104, 390.8503038960311]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05513361660951769, -1.2669937644308054, 0.21152774801653104, 390.8503038960311]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_446",
    "sat": "def sat(x: float, coeffs: List[float]=[11.553197146768758, -5.923912803075228, 0.23012513263606382, 28.26529359866266]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.553197146768758, -5.923912803075228, 0.23012513263606382, 28.26529359866266]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_447",
    "sat": "def sat(x: float, coeffs: List[float]=[0.032668034331093145, 30.384550111855862, -0.3302643500003814, -11.279747474759507]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.032668034331093145, 30.384550111855862, -0.3302643500003814, -11.279747474759507]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_448",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7228725463405224, -0.7007231806101766, 4.595945091272678, -2.2558436496948286]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7228725463405224, -0.7007231806101766, 4.595945091272678, -2.2558436496948286]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_449",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6149300933566894, 0.5578547969978841, 1.909111804792146, 3165.689433284047]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6149300933566894, 0.5578547969978841, 1.909111804792146, 3165.689433284047]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_450",
    "sat": "def sat(x: float, coeffs: List[float]=[0.22402669628380475, 0.1189482662188009, 0.47784003766317973, -6.421559605000867]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22402669628380475, 0.1189482662188009, 0.47784003766317973, -6.421559605000867]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_451",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.582093990456824, -6.188761616953966, -0.29262403251725405, -29183.68810750695]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.582093990456824, -6.188761616953966, -0.29262403251725405, -29183.68810750695]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_452",
    "sat": "def sat(x: float, coeffs: List[float]=[1.6898434898443069, 1.9262105460380567, 2.7506252783921936, -1073835.4889797494]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6898434898443069, 1.9262105460380567, 2.7506252783921936, -1073835.4889797494]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_453",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0368662988703952, 793.5622986620989, -0.9800646430195719, -0.36627005244975813]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0368662988703952, 793.5622986620989, -0.9800646430195719, -0.36627005244975813]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_454",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0755186480438528, -6.285621781930572, 7.1111631356256995, 11.556705442953001]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0755186480438528, -6.285621781930572, 7.1111631356256995, 11.556705442953001]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_455",
    "sat": "def sat(x: float, coeffs: List[float]=[0.07052976304404009, 0.22679898721056477, 1.0547667408440216, 0.3195385033472607]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07052976304404009, 0.22679898721056477, 1.0547667408440216, 0.3195385033472607]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_456",
    "sat": "def sat(x: float, coeffs: List[float]=[0.042786834770394876, 5.780712359292868, 0.5710055309098517, -86.43218127934418]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.042786834770394876, 5.780712359292868, 0.5710055309098517, -86.43218127934418]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_457",
    "sat": "def sat(x: float, coeffs: List[float]=[38.938946367972484, 86.04503701258035, 11.317886660326105, -676.9161068411195]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[38.938946367972484, 86.04503701258035, 11.317886660326105, -676.9161068411195]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_458",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4385450818466978, 0.16742202009076293, -4.4984893349051465, -0.46156341201933937]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4385450818466978, 0.16742202009076293, -4.4984893349051465, -0.46156341201933937]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_459",
    "sat": "def sat(x: float, coeffs: List[float]=[2.8545390838806353, -0.6380529423329347, -0.07031193937962898, 1.2087378464460306]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.8545390838806353, -0.6380529423329347, -0.07031193937962898, 1.2087378464460306]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_460",
    "sat": "def sat(x: float, coeffs: List[float]=[-15.367889464865206, 112.68736674136001, 1.6330716420226892, -605.027639438422]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.367889464865206, 112.68736674136001, 1.6330716420226892, -605.027639438422]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_461",
    "sat": "def sat(x: float, coeffs: List[float]=[5.5524267515964745, -0.35845003003684406, 1.2262877156382022, -0.069711985156775]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.5524267515964745, -0.35845003003684406, 1.2262877156382022, -0.069711985156775]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_462",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7845148732675248, -16.272765779420276, -4.708071708252445, 162.57890296989862]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7845148732675248, -16.272765779420276, -4.708071708252445, 162.57890296989862]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_463",
    "sat": "def sat(x: float, coeffs: List[float]=[2.3613217179731945, -0.6232140491771171, 10.011940640470884, -0.7514674066033614]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.3613217179731945, -0.6232140491771171, 10.011940640470884, -0.7514674066033614]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_464",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7041692784969474, 40.82144525242492, 0.33430830527145633, -9660.77544756187]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7041692784969474, 40.82144525242492, 0.33430830527145633, -9660.77544756187]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_465",
    "sat": "def sat(x: float, coeffs: List[float]=[1.229945286488281, -3.043167723509795, 1.898142191625304, -0.12535344074025323]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.229945286488281, -3.043167723509795, 1.898142191625304, -0.12535344074025323]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_466",
    "sat": "def sat(x: float, coeffs: List[float]=[1.314398209992657, 7.276470944417429, -0.044877132253738385, -34453.4746210853]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.314398209992657, 7.276470944417429, -0.044877132253738385, -34453.4746210853]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_467",
    "sat": "def sat(x: float, coeffs: List[float]=[0.37492644967217775, 0.25303641867206067, -0.6151614647194786, 0.1139420628088762]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.37492644967217775, 0.25303641867206067, -0.6151614647194786, 0.1139420628088762]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_468",
    "sat": "def sat(x: float, coeffs: List[float]=[1.593153580249913, 0.0031512898304471757, 1.0308371654056596, -1797.2646907393566]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.593153580249913, 0.0031512898304471757, 1.0308371654056596, -1797.2646907393566]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_469",
    "sat": "def sat(x: float, coeffs: List[float]=[0.39423784403667844, 0.4277713178976111, 0.09404761151286396, -12.773911426350143]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.39423784403667844, 0.4277713178976111, 0.09404761151286396, -12.773911426350143]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_470",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.053392087803700784, 12.046736219413466, 3.4256969803682558, -79684.80167230498]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.053392087803700784, 12.046736219413466, 3.4256969803682558, -79684.80167230498]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_471",
    "sat": "def sat(x: float, coeffs: List[float]=[13.39657246907388, 1.8751604069775965, -0.5735803236670797, -1061289.2798254145]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.39657246907388, 1.8751604069775965, -0.5735803236670797, -1061289.2798254145]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_472",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1993127396000781, 3.390335275655085, 0.8003321004412679, -1178.8391585816978]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1993127396000781, 3.390335275655085, 0.8003321004412679, -1178.8391585816978]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_473",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3323973121975999, 13.380684860824404, 0.5321067971319762, -0.437818216610525]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3323973121975999, 13.380684860824404, 0.5321067971319762, -0.437818216610525]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_474",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.009088881957000972, 0.32092181714360235, 0.09169038450317897, -27.100430529456684]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.009088881957000972, 0.32092181714360235, 0.09169038450317897, -27.100430529456684]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_475",
    "sat": "def sat(x: float, coeffs: List[float]=[-12.317297172315577, -0.0934378542047345, 31.95218312684818, -11.968680591727356]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.317297172315577, -0.0934378542047345, 31.95218312684818, -11.968680591727356]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_476",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.06456907584482785, -5.002878881193031, 93.96632013482649, 26.87794352937876]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06456907584482785, -5.002878881193031, 93.96632013482649, 26.87794352937876]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_477",
    "sat": "def sat(x: float, coeffs: List[float]=[7.225071090518717, 0.5005483429593918, -0.5328178525504595, 55.65084649881547]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.225071090518717, 0.5005483429593918, -0.5328178525504595, 55.65084649881547]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_478",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.15140786755433613, 37.68043548722862, -2.480789105978761, -216032.34043603606]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.15140786755433613, 37.68043548722862, -2.480789105978761, -216032.34043603606]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_479",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5142756394092808, -74.46143011258808, 0.36987360738670344, 419284.819450246]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5142756394092808, -74.46143011258808, 0.36987360738670344, 419284.819450246]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_480",
    "sat": "def sat(x: float, coeffs: List[float]=[201.69115120581114, -2.2265322450319442, 1.4996370782055033, 494.4766886615612]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[201.69115120581114, -2.2265322450319442, 1.4996370782055033, 494.4766886615612]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_481",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4590857855108541, 36.78870732187314, -1.8692937952638717, -0.8501157097881881]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4590857855108541, 36.78870732187314, -1.8692937952638717, -0.8501157097881881]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_482",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5754036321532515, 0.36627050608668094, 1.0443401057666752, -0.3993586877455759]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5754036321532515, 0.36627050608668094, 1.0443401057666752, -0.3993586877455759]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_483",
    "sat": "def sat(x: float, coeffs: List[float]=[0.007356195656437932, -0.7158306775016475, -0.526555868288968, 1711.0042376435422]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.007356195656437932, -0.7158306775016475, -0.526555868288968, 1711.0042376435422]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_484",
    "sat": "def sat(x: float, coeffs: List[float]=[4.880286604435101, -2.312753212549492, 0.04440863766734996, -0.9341322930932924]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.880286604435101, -2.312753212549492, 0.04440863766734996, -0.9341322930932924]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_485",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1129824777111572, -0.35256991919424197, 4.208286380002112, 2.076067541764558]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1129824777111572, -0.35256991919424197, 4.208286380002112, 2.076067541764558]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_486",
    "sat": "def sat(x: float, coeffs: List[float]=[-19.387659629328642, -0.4735736860753656, 0.6194969772425334, -8.745979776535874]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-19.387659629328642, -0.4735736860753656, 0.6194969772425334, -8.745979776535874]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_487",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4858404978527773, 3.064067296371482, 0.13626264131375287, -0.45402738382408503]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4858404978527773, 3.064067296371482, 0.13626264131375287, -0.45402738382408503]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_488",
    "sat": "def sat(x: float, coeffs: List[float]=[1.164448300905348, -15.18294305913444, -5.071591692054532, 37.52624324668115]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.164448300905348, -15.18294305913444, -5.071591692054532, 37.52624324668115]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_489",
    "sat": "def sat(x: float, coeffs: List[float]=[0.20882782831670546, -10.50721636672266, 0.13097521701972167, 0.09209748563834458]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.20882782831670546, -10.50721636672266, 0.13097521701972167, 0.09209748563834458]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_490",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.7134235849527604, 1.1402856682482285, -0.1778983033690901, -65.45853857350068]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7134235849527604, 1.1402856682482285, -0.1778983033690901, -65.45853857350068]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_491",
    "sat": "def sat(x: float, coeffs: List[float]=[-20.582232464281322, -4.234694916775347, 0.06926418627088116, -634519.3865181936]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-20.582232464281322, -4.234694916775347, 0.06926418627088116, -634519.3865181936]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_492",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.15989040176223587, 0.02704291355722181, -1.0903835160618822, 0.029652254169053274]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.15989040176223587, 0.02704291355722181, -1.0903835160618822, 0.029652254169053274]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_493",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5692155826021388, 0.08202525731391101, -13.255277525565289, 26.26441669740898]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5692155826021388, 0.08202525731391101, -13.255277525565289, 26.26441669740898]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_494",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.18191978172356235, 0.3058780022682361, 1.3850884130597139, -2.56491637237866]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18191978172356235, 0.3058780022682361, 1.3850884130597139, -2.56491637237866]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_495",
    "sat": "def sat(x: float, coeffs: List[float]=[-13.118399169071731, -2.4443428619704277, -0.0779393419123257, 180.912470815973]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.118399169071731, -2.4443428619704277, -0.0779393419123257, 180.912470815973]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_496",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.30644722769310623, -0.809946736643384, -6.820477133618237, 822122.658242865]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.30644722769310623, -0.809946736643384, -6.820477133618237, 822122.658242865]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_497",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.816853853841643, -6.240758622857026, -0.5521401376205883, -18381052.10535881]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.816853853841643, -6.240758622857026, -0.5521401376205883, -18381052.10535881]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_498",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7510360808770516, -16.883377828798114, 1.8732306185261443, 57.514049200601434]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7510360808770516, -16.883377828798114, 1.8732306185261443, 57.514049200601434]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_499",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.662492805712199, -0.8893912807754463, -0.20294697140454576, 0.01236694970743344]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.662492805712199, -0.8893912807754463, -0.20294697140454576, 0.01236694970743344]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_500",
    "sat": "def sat(x: float, coeffs: List[float]=[2.002470458844393, -11.862924784145415, 221.0398066662577, -31.050367288053373]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.002470458844393, -11.862924784145415, 221.0398066662577, -31.050367288053373]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_501",
    "sat": "def sat(x: float, coeffs: List[float]=[2.8257631489515167, -4.61685603826107, 0.14603606659139157, -15.434892699971236]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.8257631489515167, -4.61685603826107, 0.14603606659139157, -15.434892699971236]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_502",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5921403665687363, 7.70950093265386, -0.7492456129510697, -174.08476396215798]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5921403665687363, 7.70950093265386, -0.7492456129510697, -174.08476396215798]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_503",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1715120759499705, -10.477649466716867, -0.3902261256168534, 673.7815534333113]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1715120759499705, -10.477649466716867, -0.3902261256168534, 673.7815534333113]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_504",
    "sat": "def sat(x: float, coeffs: List[float]=[0.059061585461108956, 15.814045511014514, 6.632247888801415, -84.9679495524972]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.059061585461108956, 15.814045511014514, 6.632247888801415, -84.9679495524972]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_505",
    "sat": "def sat(x: float, coeffs: List[float]=[0.044440688131767526, -1.199563928692493, -2.54892837654821, -1.1109197977288678]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.044440688131767526, -1.199563928692493, -2.54892837654821, -1.1109197977288678]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_506",
    "sat": "def sat(x: float, coeffs: List[float]=[1.068330339098143, -2.355401238947369, 0.005799321843206269, 25.575958370910175]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.068330339098143, -2.355401238947369, 0.005799321843206269, 25.575958370910175]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_507",
    "sat": "def sat(x: float, coeffs: List[float]=[8.64321703843771, 0.10583466908972317, 7.397927090221273, 11.934793206476495]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.64321703843771, 0.10583466908972317, 7.397927090221273, 11.934793206476495]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_508",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2746604494027103, 0.009304397117466298, 46.296398062564286, -211.4501498680524]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2746604494027103, 0.009304397117466298, 46.296398062564286, -211.4501498680524]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_509",
    "sat": "def sat(x: float, coeffs: List[float]=[0.07037743196795228, -0.8173206452008713, 0.015919425125285953, 0.016701172380850827]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07037743196795228, -0.8173206452008713, 0.015919425125285953, 0.016701172380850827]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_510",
    "sat": "def sat(x: float, coeffs: List[float]=[2.993220319938871, -113.41738970160362, -0.3565516526110528, 1.1021285475152773]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.993220319938871, -113.41738970160362, -0.3565516526110528, 1.1021285475152773]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_511",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0998131730826426, 4.4150646891535805, -0.9518173747750075, -2.5409889226110125]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0998131730826426, 4.4150646891535805, -0.9518173747750075, -2.5409889226110125]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_512",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.568944557330702, 90.39902058296025, 0.9485667013628823, -0.6156198620230344]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.568944557330702, 90.39902058296025, 0.9485667013628823, -0.6156198620230344]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_513",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.016418912678438497, 0.41368805202959136, 0.3583597999064603, -0.003567193122081885]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.016418912678438497, 0.41368805202959136, 0.3583597999064603, -0.003567193122081885]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_514",
    "sat": "def sat(x: float, coeffs: List[float]=[6.543891286245912, 1.2928252308290744, 0.6062165855749807, -58100.138900985396]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.543891286245912, 1.2928252308290744, 0.6062165855749807, -58100.138900985396]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_515",
    "sat": "def sat(x: float, coeffs: List[float]=[0.30387379094479056, -0.07409479592920924, -148.34631920251311, -418.55418174255544]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.30387379094479056, -0.07409479592920924, -148.34631920251311, -418.55418174255544]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_516",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5270787474974205, -0.20987487736168328, -15.210077464327716, 19.346618524370705]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5270787474974205, -0.20987487736168328, -15.210077464327716, 19.346618524370705]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_517",
    "sat": "def sat(x: float, coeffs: List[float]=[6.4322446876252455, -0.03482044331873787, -0.650432976130193, -4974.281940787156]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.4322446876252455, -0.03482044331873787, -0.650432976130193, -4974.281940787156]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_518",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5437911884839747, -0.2087729210379651, -22.094727866739543, 1385.999678691431]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5437911884839747, -0.2087729210379651, -22.094727866739543, 1385.999678691431]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_519",
    "sat": "def sat(x: float, coeffs: List[float]=[0.39734946087861917, 0.2831807832475412, 0.2204750364607083, 27.65547867309469]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.39734946087861917, 0.2831807832475412, 0.2204750364607083, 27.65547867309469]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_520",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.4563002431043104, -0.6739041933887763, 0.39027959070238616, 29.498399753858656]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4563002431043104, -0.6739041933887763, 0.39027959070238616, 29.498399753858656]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_521",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3882016782396172, -0.41576740839075904, -0.009486350791321799, 0.003565846582911472]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3882016782396172, -0.41576740839075904, -0.009486350791321799, 0.003565846582911472]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_522",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9100118755848214, 0.06816821893871323, -12.062019871176341, 118.95134237587133]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9100118755848214, 0.06816821893871323, -12.062019871176341, 118.95134237587133]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_523",
    "sat": "def sat(x: float, coeffs: List[float]=[22.047821093931418, 0.4942618431858608, 2.766843457967308, 200115.1112780893]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[22.047821093931418, 0.4942618431858608, 2.766843457967308, 200115.1112780893]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_524",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3079945075843942, -0.19635350401119375, -7.519716463770689, 3.722167567961555]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3079945075843942, -0.19635350401119375, -7.519716463770689, 3.722167567961555]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_525",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4751073857745274, -56.34416073961867, 11.408374626076805, 1.3267901986853872]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4751073857745274, -56.34416073961867, 11.408374626076805, 1.3267901986853872]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_526",
    "sat": "def sat(x: float, coeffs: List[float]=[0.031276093766862724, 0.020841659178301386, -1.7316205897322645, -0.9852933050877011]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.031276093766862724, 0.020841659178301386, -1.7316205897322645, -0.9852933050877011]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_527",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6690819286621451, 0.5975962403887473, -1.1241111482163981, 0.2518196459383336]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6690819286621451, 0.5975962403887473, -1.1241111482163981, 0.2518196459383336]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_528",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.007078653987671046, -0.05289790902820949, 0.176639211645518, -4.472292312545748]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.007078653987671046, -0.05289790902820949, 0.176639211645518, -4.472292312545748]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_529",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.03036224030445552, 0.6817812435621778, 2.146610178471889, -0.042509775631713716]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03036224030445552, 0.6817812435621778, 2.146610178471889, -0.042509775631713716]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_530",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6074884150713302, -0.00934894117855034, 82.73162239549553, -65.29049496558521]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6074884150713302, -0.00934894117855034, 82.73162239549553, -65.29049496558521]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_531",
    "sat": "def sat(x: float, coeffs: List[float]=[2.2900259597447197, 7.288032634682473, 0.07267412783621434, -1.8478677139423336]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2900259597447197, 7.288032634682473, 0.07267412783621434, -1.8478677139423336]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_532",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.3014246723502185, -0.098579333643529, -0.6027948056473473, -0.08193570048512668]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.3014246723502185, -0.098579333643529, -0.6027948056473473, -0.08193570048512668]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_533",
    "sat": "def sat(x: float, coeffs: List[float]=[0.749657578734961, -25.359762522744536, 0.16734598111751517, 2.485952180592958]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.749657578734961, -25.359762522744536, 0.16734598111751517, 2.485952180592958]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_534",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0648288717100547, 0.42057382629901197, -10.56104944186479, -43.82067404723977]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0648288717100547, 0.42057382629901197, -10.56104944186479, -43.82067404723977]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_535",
    "sat": "def sat(x: float, coeffs: List[float]=[-14.046850508606047, 0.120025820261851, -3.184522857045645, 2006.8704990741085]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.046850508606047, 0.120025820261851, -3.184522857045645, 2006.8704990741085]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_536",
    "sat": "def sat(x: float, coeffs: List[float]=[7.246988462243716, 5.927603335261143, -52.19733933515668, 2795.57575909934]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.246988462243716, 5.927603335261143, -52.19733933515668, 2795.57575909934]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_537",
    "sat": "def sat(x: float, coeffs: List[float]=[12.688095596383919, -6.096977850267827, 0.05398146890397274, 74.19200283693361]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.688095596383919, -6.096977850267827, 0.05398146890397274, 74.19200283693361]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_538",
    "sat": "def sat(x: float, coeffs: List[float]=[7.557905789780562, -77.63013985676204, -0.20622623371497886, 5.242227686247947]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.557905789780562, -77.63013985676204, -0.20622623371497886, 5.242227686247947]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_539",
    "sat": "def sat(x: float, coeffs: List[float]=[-24.568602272146446, 173.31457254965656, -0.9389348633094429, -363.3978578588756]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-24.568602272146446, 173.31457254965656, -0.9389348633094429, -363.3978578588756]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_540",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.31741103861012204, -170.26704186409805, -0.06694360578109941, 21.413459654639386]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.31741103861012204, -170.26704186409805, -0.06694360578109941, 21.413459654639386]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_541",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7085971772590953, -0.05468719165337651, 0.097098048075747, 351.2561511767704]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7085971772590953, -0.05468719165337651, 0.097098048075747, 351.2561511767704]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_542",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1366140316659208, -187.7395499699658, -10.099539002739776, 30182505.78964354]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1366140316659208, -187.7395499699658, -10.099539002739776, 30182505.78964354]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_543",
    "sat": "def sat(x: float, coeffs: List[float]=[0.027883048801517596, -3.1380935041665707, -5.3092677845798235, 80.00886400812306]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.027883048801517596, -3.1380935041665707, -5.3092677845798235, 80.00886400812306]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_544",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7743116386583846, -0.3754477343932103, 1.1415987570087005, -0.39387393101892687]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7743116386583846, -0.3754477343932103, 1.1415987570087005, -0.39387393101892687]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_545",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.17501044597294832, -14.189334733853329, 0.0006867153552677271, 0.09897337448373855]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17501044597294832, -14.189334733853329, 0.0006867153552677271, 0.09897337448373855]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_546",
    "sat": "def sat(x: float, coeffs: List[float]=[-117.78157548954287, 1.399150755042706, -1.3525258491470018, -2359.758111541408]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-117.78157548954287, 1.399150755042706, -1.3525258491470018, -2359.758111541408]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_547",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.271154168989967, 0.15939933645093082, 6.170981910612949, -0.9779618350543776]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.271154168989967, 0.15939933645093082, 6.170981910612949, -0.9779618350543776]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_548",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1365416475784518, 0.18984668832688678, 0.9468006833242466, 0.12314778260731303]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1365416475784518, 0.18984668832688678, 0.9468006833242466, 0.12314778260731303]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_549",
    "sat": "def sat(x: float, coeffs: List[float]=[-40.605836890313164, -6.646081699584421, 0.2605085595959536, 1.103167277480319]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-40.605836890313164, -6.646081699584421, 0.2605085595959536, 1.103167277480319]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_550",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5119491331659282, 123.40899288521778, -2.4026380413411856, -3783.5849237897296]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5119491331659282, 123.40899288521778, -2.4026380413411856, -3783.5849237897296]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_551",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2633654143722353, 4.596337878779269, -1.052467807546804, 7555.252708096563]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2633654143722353, 4.596337878779269, -1.052467807546804, 7555.252708096563]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_552",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6332333637293971, -139.5308045632178, -0.5265809478523619, 84.66371756104118]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6332333637293971, -139.5308045632178, -0.5265809478523619, 84.66371756104118]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_553",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6044533097555447, 0.05758076438995271, 71.5413302818833, -1232.7354124538974]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6044533097555447, 0.05758076438995271, 71.5413302818833, -1232.7354124538974]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_554",
    "sat": "def sat(x: float, coeffs: List[float]=[0.29737233979665817, -0.5973890205221482, 10.874047856128044, -4.295854040997401]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.29737233979665817, -0.5973890205221482, 10.874047856128044, -4.295854040997401]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_555",
    "sat": "def sat(x: float, coeffs: List[float]=[0.008029640448549516, -0.1310699371907925, 0.056858050789436065, -0.0052208720603378]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.008029640448549516, -0.1310699371907925, 0.056858050789436065, -0.0052208720603378]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_556",
    "sat": "def sat(x: float, coeffs: List[float]=[2.160486190498145, -2.0934928410383264, -1.9327245154666237, -0.005046556011794793]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.160486190498145, -2.0934928410383264, -1.9327245154666237, -0.005046556011794793]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_557",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.039044353088614425, -6.056401200562029, 1.267994132431305, 0.4083187652187257]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.039044353088614425, -6.056401200562029, 1.267994132431305, 0.4083187652187257]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_558",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.6824089955746855, 2.4749563164167423, 484.50625823672664, -976.7202123291402]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.6824089955746855, 2.4749563164167423, 484.50625823672664, -976.7202123291402]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_559",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.0707248526862285, 0.6172072248532001, -0.563543545027189, 10939.697750731171]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.0707248526862285, 0.6172072248532001, -0.563543545027189, 10939.697750731171]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_560",
    "sat": "def sat(x: float, coeffs: List[float]=[8.793841845536045, -0.3715513045096028, 0.16173638839089857, -30230.173086409388]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.793841845536045, -0.3715513045096028, 0.16173638839089857, -30230.173086409388]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_561",
    "sat": "def sat(x: float, coeffs: List[float]=[28.015631626150192, 0.42069638190905295, 28.19492985127519, 24.751295789222315]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[28.015631626150192, 0.42069638190905295, 28.19492985127519, 24.751295789222315]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_562",
    "sat": "def sat(x: float, coeffs: List[float]=[18.86101265799092, 0.6042012955904251, 1.1700937929997413, -630440.8523585366]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[18.86101265799092, 0.6042012955904251, 1.1700937929997413, -630440.8523585366]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_563",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11200471355128509, -0.8909915538658005, 1.5589848347529562, -0.17686318918575492]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11200471355128509, -0.8909915538658005, 1.5589848347529562, -0.17686318918575492]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_564",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.25004728508402024, 0.08691871278455439, 144.93957101196915, -52.961328159008595]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.25004728508402024, 0.08691871278455439, 144.93957101196915, -52.961328159008595]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_565",
    "sat": "def sat(x: float, coeffs: List[float]=[0.20488781432098593, 5.913647992143833, 0.0710110943988956, -9.55399493184672]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.20488781432098593, 5.913647992143833, 0.0710110943988956, -9.55399493184672]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_566",
    "sat": "def sat(x: float, coeffs: List[float]=[0.28662504347868395, -0.4422726266821013, 0.28209067927126646, -2.6609899371866255]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.28662504347868395, -0.4422726266821013, 0.28209067927126646, -2.6609899371866255]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_567",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.299276219735654, 6.571213689266895, -0.059949838906138364, -3.7802974198972725]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.299276219735654, 6.571213689266895, -0.059949838906138364, -3.7802974198972725]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_568",
    "sat": "def sat(x: float, coeffs: List[float]=[0.008663610788324375, 1.4739862983965581, 0.1740154904145943, -334.86457273743326]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.008663610788324375, 1.4739862983965581, 0.1740154904145943, -334.86457273743326]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_569",
    "sat": "def sat(x: float, coeffs: List[float]=[0.039401408345064004, 0.5071525259523147, 0.1367090590492058, -0.48989827380787937]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.039401408345064004, 0.5071525259523147, 0.1367090590492058, -0.48989827380787937]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_570",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.405805230258412, 124.28361464631355, 57.59189598001402, -35713.79252285885]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.405805230258412, 124.28361464631355, 57.59189598001402, -35713.79252285885]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_571",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.447288228353675, 31.46170483498255, 0.03692768365356547, -617.8439021307869]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.447288228353675, 31.46170483498255, 0.03692768365356547, -617.8439021307869]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_572",
    "sat": "def sat(x: float, coeffs: List[float]=[2.3868279991731267, 0.07187746027369275, -3.399921992050111, 1.0488415661349295]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.3868279991731267, 0.07187746027369275, -3.399921992050111, 1.0488415661349295]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_573",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3988373930255718, 1.3150108079756608, 2.8674736101524974, 1844537.5735138182]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3988373930255718, 1.3150108079756608, 2.8674736101524974, 1844537.5735138182]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_574",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.9205526728857345, -0.2474343679361577, 1.905018753763323, 0.35549457839762266]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.9205526728857345, -0.2474343679361577, 1.905018753763323, 0.35549457839762266]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_575",
    "sat": "def sat(x: float, coeffs: List[float]=[4.66806553688829, -1.7581757002830933, 2.4227515150390277, -0.09444308536809347]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.66806553688829, -1.7581757002830933, 2.4227515150390277, -0.09444308536809347]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_576",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5661752657744444, 1.0612536027189279, 0.4165706819087783, -0.5677012690113387]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5661752657744444, 1.0612536027189279, 0.4165706819087783, -0.5677012690113387]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_577",
    "sat": "def sat(x: float, coeffs: List[float]=[15.521585124687318, 1.7394553523043994, 0.28770259833625356, -10.60606042994589]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.521585124687318, 1.7394553523043994, 0.28770259833625356, -10.60606042994589]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_578",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.917969787648129, 0.8197047667367481, -2.2080289868572405, -1.9701731126607636]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.917969787648129, 0.8197047667367481, -2.2080289868572405, -1.9701731126607636]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_579",
    "sat": "def sat(x: float, coeffs: List[float]=[2.9972756142088026, 0.354744278081653, 13.54936803323846, 7553.859211623696]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.9972756142088026, 0.354744278081653, 13.54936803323846, 7553.859211623696]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_580",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.7351138131753436, 21.813807776048446, -8.124562027765755, 168323.61116546651]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.7351138131753436, 21.813807776048446, -8.124562027765755, 168323.61116546651]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_581",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.866179155275161, -1.3947121566702272, 0.24578498679540864, 0.3855973110150638]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.866179155275161, -1.3947121566702272, 0.24578498679540864, 0.3855973110150638]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_582",
    "sat": "def sat(x: float, coeffs: List[float]=[0.36052046507886554, 1.3357104000412265, 0.691871040351347, -0.5434723951735627]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.36052046507886554, 1.3357104000412265, 0.691871040351347, -0.5434723951735627]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_583",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.040509780981961084, -0.2673417216616789, -1.976604739945815, -11943435.502057297]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.040509780981961084, -0.2673417216616789, -1.976604739945815, -11943435.502057297]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_584",
    "sat": "def sat(x: float, coeffs: List[float]=[-8.41766266050714, 1.0226775916735715, 3.638572974391201, 28.06844889034566]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.41766266050714, 1.0226775916735715, 3.638572974391201, 28.06844889034566]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_585",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1500502384261936, 11.778901821351548, 0.22412610881985184, -4.7690763818542194]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1500502384261936, 11.778901821351548, 0.22412610881985184, -4.7690763818542194]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_586",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.10116049892449697, -0.5550805405954257, 0.13221172827542285, 0.008693205346526928]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10116049892449697, -0.5550805405954257, 0.13221172827542285, 0.008693205346526928]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_587",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.5042058195720431, 0.34066545822597094, -0.4231122936595382, -0.06289391992448562]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5042058195720431, 0.34066545822597094, -0.4231122936595382, -0.06289391992448562]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_588",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.1387860838576622, -1.665825116401277, 2.604652562863858, -22873.408349505087]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.1387860838576622, -1.665825116401277, 2.604652562863858, -22873.408349505087]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_589",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.179976106681128, 0.6923758751306188, -0.5957206628222695, -3.534317347812461]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.179976106681128, 0.6923758751306188, -0.5957206628222695, -3.534317347812461]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_590",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.04579699797136202, 0.0011565696805941144, -0.06585936552440559, -0.06843448492607003]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04579699797136202, 0.0011565696805941144, -0.06585936552440559, -0.06843448492607003]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_591",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2719715865216843, 4.4759265493364415, -0.4639996051799608, -13.145119804946402]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2719715865216843, 4.4759265493364415, -0.4639996051799608, -13.145119804946402]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_592",
    "sat": "def sat(x: float, coeffs: List[float]=[10.590318707925611, -0.1853049602277892, 0.11486132873697819, -227.62335491158177]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.590318707925611, -0.1853049602277892, 0.11486132873697819, -227.62335491158177]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_593",
    "sat": "def sat(x: float, coeffs: List[float]=[7.189937505084902, -0.4661556697262476, 0.1864455990027103, -3161.5249713360226]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.189937505084902, -0.4661556697262476, 0.1864455990027103, -3161.5249713360226]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_594",
    "sat": "def sat(x: float, coeffs: List[float]=[0.012916719526842332, -0.04739916733881463, -0.724092832364622, -0.8760753856755885]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.012916719526842332, -0.04739916733881463, -0.724092832364622, -0.8760753856755885]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_595",
    "sat": "def sat(x: float, coeffs: List[float]=[2.322176547955805, -2.8544109232006467, 0.19188390876589279, 90.1463783554064]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.322176547955805, -2.8544109232006467, 0.19188390876589279, 90.1463783554064]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_596",
    "sat": "def sat(x: float, coeffs: List[float]=[46.01615299067857, -5.8406644742511284, 18.507841680009467, -77.07983120449916]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[46.01615299067857, -5.8406644742511284, 18.507841680009467, -77.07983120449916]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_597",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2806441457444673, -0.09092171271658038, 0.019245956884105242, -488.50618956811917]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2806441457444673, -0.09092171271658038, 0.019245956884105242, -488.50618956811917]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_598",
    "sat": "def sat(x: float, coeffs: List[float]=[-667.862355549326, -5.2474822914997254, 2.563710654105542, 1.7240508445799279]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-667.862355549326, -5.2474822914997254, 2.563710654105542, 1.7240508445799279]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_599",
    "sat": "def sat(x: float, coeffs: List[float]=[0.028288737509168643, -22.36450940416846, 33.68958688015018, 0.6558901786205198]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.028288737509168643, -22.36450940416846, 33.68958688015018, 0.6558901786205198]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_600",
    "sat": "def sat(x: float, coeffs: List[float]=[1.4454028987760734, -0.015248662063845083, -2.948349373918468, -0.5535348743310422]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4454028987760734, -0.015248662063845083, -2.948349373918468, -0.5535348743310422]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_601",
    "sat": "def sat(x: float, coeffs: List[float]=[0.31465219876104533, 0.1310983767921202, 1.4169118956301257, -7.218636646423096]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.31465219876104533, 0.1310983767921202, 1.4169118956301257, -7.218636646423096]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_602",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7495097669482189, -0.8230667377384289, 0.8267599783027122, 18.775752747646127]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7495097669482189, -0.8230667377384289, 0.8267599783027122, 18.775752747646127]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_603",
    "sat": "def sat(x: float, coeffs: List[float]=[3.1040470098010196, 0.10014985367289227, -0.023878732634493065, -1492.6388462638838]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.1040470098010196, 0.10014985367289227, -0.023878732634493065, -1492.6388462638838]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_604",
    "sat": "def sat(x: float, coeffs: List[float]=[0.009888062621236537, -1.4190064081818112, 17.91704533264939, 0.09950355315831635]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.009888062621236537, -1.4190064081818112, 17.91704533264939, 0.09950355315831635]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_605",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2291898873216732, 0.3200072630787401, -1.243866317863467, -1.9439871476603008]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2291898873216732, 0.3200072630787401, -1.243866317863467, -1.9439871476603008]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_606",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11593192606426261, -3.294866809131656, 2.3475077087033167, -96944.89366993771]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11593192606426261, -3.294866809131656, 2.3475077087033167, -96944.89366993771]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_607",
    "sat": "def sat(x: float, coeffs: List[float]=[1.6252494163629507, 2.3287853897793447, -0.025002985760598673, -0.4234311030519469]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6252494163629507, 2.3287853897793447, -0.025002985760598673, -0.4234311030519469]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_608",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.28726016597899867, -0.29775161746581197, 0.4063123270656554, -0.0868949594844243]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.28726016597899867, -0.29775161746581197, 0.4063123270656554, -0.0868949594844243]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_609",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05415647770396448, 1.607698313301728, 0.11255024855436539, -0.47141389535601763]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05415647770396448, 1.607698313301728, 0.11255024855436539, -0.47141389535601763]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_610",
    "sat": "def sat(x: float, coeffs: List[float]=[0.07395410925190826, -0.14101488482867963, -2.6013633411036885, 1.2911585863396595]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07395410925190826, -0.14101488482867963, -2.6013633411036885, 1.2911585863396595]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_611",
    "sat": "def sat(x: float, coeffs: List[float]=[1.4138491921425274, 0.003928534987916714, 0.006831232871566136, 0.0009232275497023472]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4138491921425274, 0.003928534987916714, 0.006831232871566136, 0.0009232275497023472]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_612",
    "sat": "def sat(x: float, coeffs: List[float]=[3.6526914209530754, -13.02405980639309, 2.4928433924556725, 8.838425771387929]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.6526914209530754, -13.02405980639309, 2.4928433924556725, 8.838425771387929]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_613",
    "sat": "def sat(x: float, coeffs: List[float]=[4.259137136685971, -1.268865901807839, 0.2372789471267629, -0.2910559329253656]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.259137136685971, -1.268865901807839, 0.2372789471267629, -0.2910559329253656]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_614",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1152577930131844, -1.939407899990763, -12.133571136049222, -10042.074929320801]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1152577930131844, -1.939407899990763, -12.133571136049222, -10042.074929320801]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_615",
    "sat": "def sat(x: float, coeffs: List[float]=[11.85003514263392, 188.76030939017016, -3.0014020611075374, -301181.2494490143]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.85003514263392, 188.76030939017016, -3.0014020611075374, -301181.2494490143]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_616",
    "sat": "def sat(x: float, coeffs: List[float]=[4.092015983961608, -13.11902622326292, 0.7072334740768382, 1.202936132012737]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.092015983961608, -13.11902622326292, 0.7072334740768382, 1.202936132012737]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_617",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8888606960984341, 0.7924587462979066, 0.019671008164725407, 246.68650934492672]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8888606960984341, 0.7924587462979066, 0.019671008164725407, 246.68650934492672]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_618",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5119102337235869, -0.58172633412488, -1.9209879274918575, 33.10228301497802]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5119102337235869, -0.58172633412488, -1.9209879274918575, 33.10228301497802]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_619",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.802831676066687, -0.14660688856856452, -2.2098270907385507, 0.39878594863054206]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.802831676066687, -0.14660688856856452, -2.2098270907385507, 0.39878594863054206]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_620",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5712152284615004, -0.33769095688872425, -0.1536612516204904, -12.200425786053167]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5712152284615004, -0.33769095688872425, -0.1536612516204904, -12.200425786053167]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_621",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3563475354964973, -2.6013650169763864, 1.5719394744262283, 3351489.9837899935]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3563475354964973, -2.6013650169763864, 1.5719394744262283, 3351489.9837899935]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_622",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.34323996923127603, -7.340994325137782, -0.2464654619842602, 0.004554695786830716]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.34323996923127603, -7.340994325137782, -0.2464654619842602, 0.004554695786830716]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_623",
    "sat": "def sat(x: float, coeffs: List[float]=[75.88669056404821, 1.5518681432163657, -21.896362404007064, 52977.55596483387]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[75.88669056404821, 1.5518681432163657, -21.896362404007064, 52977.55596483387]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_624",
    "sat": "def sat(x: float, coeffs: List[float]=[6.426167492389145, -0.666667445653633, 45.10862203545719, -2194628.7286011474]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.426167492389145, -0.666667445653633, 45.10862203545719, -2194628.7286011474]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_625",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2084209064778555, -0.48697712571538226, 7.493091257930768, -507.36972816513685]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2084209064778555, -0.48697712571538226, 7.493091257930768, -507.36972816513685]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_626",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6066649301083352, 0.3804564322858856, 0.110360215725545, 6.246942661127217]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6066649301083352, 0.3804564322858856, 0.110360215725545, 6.246942661127217]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_627",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.058575894958589725, -6.7207115492564995, -1.7356575234167482, 17.388764861031124]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.058575894958589725, -6.7207115492564995, -1.7356575234167482, 17.388764861031124]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_628",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4262683233871762, 1.413550999179291, -0.02286512383482009, -1.6120810317131393]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4262683233871762, 1.413550999179291, -0.02286512383482009, -1.6120810317131393]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_629",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1737135319585457, 0.1601666369124136, 6.214763194432408, -1.6773137614351703]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1737135319585457, 0.1601666369124136, 6.214763194432408, -1.6773137614351703]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_630",
    "sat": "def sat(x: float, coeffs: List[float]=[0.018096925006202413, -0.11171093925384061, 7.383642315327413, 0.38020266804413205]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.018096925006202413, -0.11171093925384061, 7.383642315327413, 0.38020266804413205]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_631",
    "sat": "def sat(x: float, coeffs: List[float]=[0.03912633360039767, 0.5944793798694588, -157.5424168605514, 1.0207253471940856]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03912633360039767, 0.5944793798694588, -157.5424168605514, 1.0207253471940856]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_632",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8049160326655439, -17.774859114670218, 0.19208942384437924, 250.43095868664577]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8049160326655439, -17.774859114670218, 0.19208942384437924, 250.43095868664577]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_633",
    "sat": "def sat(x: float, coeffs: List[float]=[1.6080955556354357, 0.516919947566103, 1.0807159622799862, -0.564569867806906]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6080955556354357, 0.516919947566103, 1.0807159622799862, -0.564569867806906]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_634",
    "sat": "def sat(x: float, coeffs: List[float]=[4.8865448631796, -0.44432168802416233, -0.47918542712886875, -0.022900872028451383]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.8865448631796, -0.44432168802416233, -0.47918542712886875, -0.022900872028451383]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_635",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.08975101378924055, 0.6888572677707656, 3.8549991709740716, 0.7518572321218664]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08975101378924055, 0.6888572677707656, 3.8549991709740716, 0.7518572321218664]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_636",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2851329357073167, 0.5200884798234874, -0.5827723102207548, -2.05777323020402]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2851329357073167, 0.5200884798234874, -0.5827723102207548, -2.05777323020402]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_637",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.23333680051181127, -0.0002581056213795119, 0.14040012036113994, -1.0765195127738956]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.23333680051181127, -0.0002581056213795119, 0.14040012036113994, -1.0765195127738956]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_638",
    "sat": "def sat(x: float, coeffs: List[float]=[4.737750480288388, -5.2193251933455995, 0.034966568357732486, 0.13575372763155327]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.737750480288388, -5.2193251933455995, 0.034966568357732486, 0.13575372763155327]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_639",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.14023429933887596, -5.467060993330596, -18.283789853598567, 1.5741975557666716]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.14023429933887596, -5.467060993330596, -18.283789853598567, 1.5741975557666716]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_640",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4843140269792971, 0.06860997857066271, 1.227347687056306, -0.02258713587842601]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4843140269792971, 0.06860997857066271, 1.227347687056306, -0.02258713587842601]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_641",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.430921692205187, -0.10695825600499383, -0.7147878656756353, 0.30953545654860026]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.430921692205187, -0.10695825600499383, -0.7147878656756353, 0.30953545654860026]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_642",
    "sat": "def sat(x: float, coeffs: List[float]=[0.09990103568240083, -9.199862602161637, -54.51508480693007, 9038.857512603827]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09990103568240083, -9.199862602161637, -54.51508480693007, 9038.857512603827]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_643",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3530220477664427, 9.972698987654654, -0.16294694880482452, -0.006011252362118609]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3530220477664427, 9.972698987654654, -0.16294694880482452, -0.006011252362118609]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_644",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3254691153608846, 0.14254313218342451, 962.3531004600608, -1195.1387528961752]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3254691153608846, 0.14254313218342451, 962.3531004600608, -1195.1387528961752]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_645",
    "sat": "def sat(x: float, coeffs: List[float]=[0.017702264888771174, 59.99460967232317, -0.43227985857402995, -4.161912451952038]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.017702264888771174, 59.99460967232317, -0.43227985857402995, -4.161912451952038]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_646",
    "sat": "def sat(x: float, coeffs: List[float]=[-15.18499282740037, 0.5836891282165478, -0.4085257021948882, 284.43200338693356]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.18499282740037, 0.5836891282165478, -0.4085257021948882, 284.43200338693356]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_647",
    "sat": "def sat(x: float, coeffs: List[float]=[5.341279624948826, -0.18742090456648275, 0.45572101975602086, 374.6493670039806]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.341279624948826, -0.18742090456648275, 0.45572101975602086, 374.6493670039806]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_648",
    "sat": "def sat(x: float, coeffs: List[float]=[9.184352558679347, 1.4281735344001083, 0.12780802986204728, -81974.55639166733]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.184352558679347, 1.4281735344001083, 0.12780802986204728, -81974.55639166733]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_649",
    "sat": "def sat(x: float, coeffs: List[float]=[-152.36375798906985, 13.214520882698155, 1.0594123786833167, -73.3987379830592]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-152.36375798906985, 13.214520882698155, 1.0594123786833167, -73.3987379830592]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_650",
    "sat": "def sat(x: float, coeffs: List[float]=[0.12062752438078772, 0.03460849690246685, -1.0063132615958592, -21.930112211794984]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.12062752438078772, 0.03460849690246685, -1.0063132615958592, -21.930112211794984]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_651",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.35765109906822373, -0.6084154193423696, -1.3714702687988398, 9.3559902042771]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.35765109906822373, -0.6084154193423696, -1.3714702687988398, 9.3559902042771]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_652",
    "sat": "def sat(x: float, coeffs: List[float]=[0.21211233038288477, -4.72074228578343, -3.4575788939894316, -0.6032172088314638]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21211233038288477, -4.72074228578343, -3.4575788939894316, -0.6032172088314638]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_653",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.6100586959017695, -31.773638006911515, -5.511277220265065, 214766.01292066506]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6100586959017695, -31.773638006911515, -5.511277220265065, 214766.01292066506]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_654",
    "sat": "def sat(x: float, coeffs: List[float]=[1.6668532089376507, -0.1848837000221728, -0.4493381847335726, -0.005063782537310178]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6668532089376507, -0.1848837000221728, -0.4493381847335726, -0.005063782537310178]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_655",
    "sat": "def sat(x: float, coeffs: List[float]=[2.2236868973488266, 0.20502839370927384, 0.1591853612718003, -86.16291131761837]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2236868973488266, 0.20502839370927384, 0.1591853612718003, -86.16291131761837]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_656",
    "sat": "def sat(x: float, coeffs: List[float]=[-14.593643448891152, 198.5125976262725, -78.49365290073636, 6.951373200983262]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.593643448891152, 198.5125976262725, -78.49365290073636, 6.951373200983262]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_657",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.402832840920692, 0.00941904191375098, 0.45879222855284213, -0.03573054868028955]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.402832840920692, 0.00941904191375098, 0.45879222855284213, -0.03573054868028955]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_658",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.26906411735940866, -0.7577210906166844, -15.202114329563933, 180.53062674901463]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.26906411735940866, -0.7577210906166844, -15.202114329563933, 180.53062674901463]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_659",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.04881761017977696, -5.7674729728031515, -20.247816222795883, 8.700827146514841]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04881761017977696, -5.7674729728031515, -20.247816222795883, 8.700827146514841]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_660",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5920460352199574, 0.29812324367716275, 0.32775019958288704, 0.05479334499119189]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5920460352199574, 0.29812324367716275, 0.32775019958288704, 0.05479334499119189]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_661",
    "sat": "def sat(x: float, coeffs: List[float]=[0.055131889996449614, -1.6757691408588826, 3.5735407700039885, 16.595318449144493]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.055131889996449614, -1.6757691408588826, 3.5735407700039885, 16.595318449144493]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_662",
    "sat": "def sat(x: float, coeffs: List[float]=[1.4051184357228974, 1.104765618734156, 4.823853558843614, 22.061550808457667]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4051184357228974, 1.104765618734156, 4.823853558843614, 22.061550808457667]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_663",
    "sat": "def sat(x: float, coeffs: List[float]=[0.09097034637660806, 0.9369357963786936, -16.458967757920714, -44.316282985993894]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09097034637660806, 0.9369357963786936, -16.458967757920714, -44.316282985993894]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_664",
    "sat": "def sat(x: float, coeffs: List[float]=[0.23170921945556477, -1.5599856168561164, 9.797826208267065, 5.677149042260003]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.23170921945556477, -1.5599856168561164, 9.797826208267065, 5.677149042260003]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_665",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.08213408599930154, -0.18203004326848507, -5.672270294500751, -7.56262201322964]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08213408599930154, -0.18203004326848507, -5.672270294500751, -7.56262201322964]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_666",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2775146303059936, -0.39914893818089786, -1.6488398926271781, 1.0850759072480751]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2775146303059936, -0.39914893818089786, -1.6488398926271781, 1.0850759072480751]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_667",
    "sat": "def sat(x: float, coeffs: List[float]=[21.23528369873942, 0.6584850532340679, 0.6366549699786656, -0.44950035930082577]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[21.23528369873942, 0.6584850532340679, 0.6366549699786656, -0.44950035930082577]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_668",
    "sat": "def sat(x: float, coeffs: List[float]=[-387.50136086365427, -0.25910435772496226, 0.3666769908435561, -93161.26766205356]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-387.50136086365427, -0.25910435772496226, 0.3666769908435561, -93161.26766205356]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_669",
    "sat": "def sat(x: float, coeffs: List[float]=[2.465394543161228, -0.18529572620466164, 2.578945541032366, 3.2896264811975224]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.465394543161228, -0.18529572620466164, 2.578945541032366, 3.2896264811975224]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_670",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8865389240818419, -132.99887627725346, -2.6002654608890645, 474.29134754838617]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8865389240818419, -132.99887627725346, -2.6002654608890645, 474.29134754838617]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_671",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0436494177667752, 0.12986256010339958, 0.40216532438367364, -2.0405208534200594]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0436494177667752, 0.12986256010339958, 0.40216532438367364, -2.0405208534200594]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_672",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.020156643001850716, 0.15781505217052003, 1.7147309790131444, -6.872662117786911]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.020156643001850716, 0.15781505217052003, 1.7147309790131444, -6.872662117786911]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_673",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.441890907735438, 1.4624269608014941, -1.2021250579749523, 0.12878092195962026]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.441890907735438, 1.4624269608014941, -1.2021250579749523, 0.12878092195962026]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_674",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3462795844099486, -28.374227578540186, 265.1309395457313, -15.623018132563274]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3462795844099486, -28.374227578540186, 265.1309395457313, -15.623018132563274]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_675",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1808127160341749, -0.9828462290409784, -248.22642343827548, -3288.5565596284036]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1808127160341749, -0.9828462290409784, -248.22642343827548, -3288.5565596284036]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_676",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11924725609039499, -0.08225124650721323, -8.294242238247294, -17.309883685892995]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11924725609039499, -0.08225124650721323, -8.294242238247294, -17.309883685892995]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_677",
    "sat": "def sat(x: float, coeffs: List[float]=[0.004055608357019495, -0.37288641564852565, 0.18884838313832927, -0.016897165689806537]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.004055608357019495, -0.37288641564852565, 0.18884838313832927, -0.016897165689806537]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_678",
    "sat": "def sat(x: float, coeffs: List[float]=[-10.645626549024302, 0.5483346854779585, 1.6811068134586504, 79.12321906213005]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.645626549024302, 0.5483346854779585, 1.6811068134586504, 79.12321906213005]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_679",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4465662986174818, -0.3571682567728532, -0.16881330838040376, 0.13738406205306564]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4465662986174818, -0.3571682567728532, -0.16881330838040376, 0.13738406205306564]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_680",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.574675489221309, -0.1169472480692663, -0.251280509403961, -118.07421410210199]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.574675489221309, -0.1169472480692663, -0.251280509403961, -118.07421410210199]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_681",
    "sat": "def sat(x: float, coeffs: List[float]=[-8.918261877379818, 10.494963862885813, 24.501072384992057, -2981.419676742617]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.918261877379818, 10.494963862885813, 24.501072384992057, -2981.419676742617]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_682",
    "sat": "def sat(x: float, coeffs: List[float]=[-12.6271239156599, 648.0443814034401, -0.22428451413438721, -8706.4854406148]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.6271239156599, 648.0443814034401, -0.22428451413438721, -8706.4854406148]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_683",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4088839868192924, 0.083564035862572, -0.5910749590191577, -0.6434308884556911]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4088839868192924, 0.083564035862572, -0.5910749590191577, -0.6434308884556911]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_684",
    "sat": "def sat(x: float, coeffs: List[float]=[3.8038551871802704, 5.086383016545972, -0.12166055480339273, -1.2629097369681659]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.8038551871802704, 5.086383016545972, -0.12166055480339273, -1.2629097369681659]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_685",
    "sat": "def sat(x: float, coeffs: List[float]=[4.529924911876388, -27.91234603397889, 0.40681020570188026, 0.13981293137795758]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.529924911876388, -27.91234603397889, 0.40681020570188026, 0.13981293137795758]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_686",
    "sat": "def sat(x: float, coeffs: List[float]=[14.285391074371447, -0.625261547063536, 0.12308741771863548, -125262774.15257494]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.285391074371447, -0.625261547063536, 0.12308741771863548, -125262774.15257494]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_687",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.115129396895615, -0.12365374004867265, -0.04618862577290598, -9.22045639252779]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.115129396895615, -0.12365374004867265, -0.04618862577290598, -9.22045639252779]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_688",
    "sat": "def sat(x: float, coeffs: List[float]=[58.127436417180895, 42.16326304825191, 0.378024251092282, -0.07171979078108907]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[58.127436417180895, 42.16326304825191, 0.378024251092282, -0.07171979078108907]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_689",
    "sat": "def sat(x: float, coeffs: List[float]=[5.1012056792810005, 909.6195334325872, -0.39559489545981696, -1100479.0680151314]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.1012056792810005, 909.6195334325872, -0.39559489545981696, -1100479.0680151314]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_690",
    "sat": "def sat(x: float, coeffs: List[float]=[13.10524640935813, 0.7604654121200437, 15.973974077822099, -996.2798703453204]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.10524640935813, 0.7604654121200437, 15.973974077822099, -996.2798703453204]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_691",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.06224327947784447, -0.24756911361523617, -24.02617837263901, -7.290962536527524]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06224327947784447, -0.24756911361523617, -24.02617837263901, -7.290962536527524]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_692",
    "sat": "def sat(x: float, coeffs: List[float]=[0.651695572075031, 18.93997804221745, 0.2435713747089948, -14329.033502689666]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.651695572075031, 18.93997804221745, 0.2435713747089948, -14329.033502689666]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_693",
    "sat": "def sat(x: float, coeffs: List[float]=[-17.745789963558043, -0.04220904937833144, -0.22281897842475354, 0.09769864134562163]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.745789963558043, -0.04220904937833144, -0.22281897842475354, 0.09769864134562163]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_694",
    "sat": "def sat(x: float, coeffs: List[float]=[9.449696466462829, 1.4062852804166603, 0.9614600629267674, 623217.5213080703]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.449696466462829, 1.4062852804166603, 0.9614600629267674, 623217.5213080703]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_695",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.004779873031835358, -2.917727542581528, -0.18890051104896263, 0.05925133791611469]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.004779873031835358, -2.917727542581528, -0.18890051104896263, 0.05925133791611469]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_696",
    "sat": "def sat(x: float, coeffs: List[float]=[1.6876482916789313, 0.0016201576301840455, -6.634142596528097, -2049.218823951173]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6876482916789313, 0.0016201576301840455, -6.634142596528097, -2049.218823951173]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_697",
    "sat": "def sat(x: float, coeffs: List[float]=[-18.40521931693249, 0.36029639188813317, -0.04787726636324141, -946107.0905754449]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.40521931693249, 0.36029639188813317, -0.04787726636324141, -946107.0905754449]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_698",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.0795402009451465, 0.17919085373418916, 0.42130471417619714, 27.936336663472844]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.0795402009451465, 0.17919085373418916, 0.42130471417619714, 27.936336663472844]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_699",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6138502969344639, 16.97435643617158, 3.08025338112731, 0.016942022018229575]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6138502969344639, 16.97435643617158, 3.08025338112731, 0.016942022018229575]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_700",
    "sat": "def sat(x: float, coeffs: List[float]=[1.340835248790869, -5.074182476675173, -0.3596795743845962, 0.06161761511152379]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.340835248790869, -5.074182476675173, -0.3596795743845962, 0.06161761511152379]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_701",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.07691681249987951, 0.022988365134434623, -1.1605202176663385, -1.0048252287116235]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07691681249987951, 0.022988365134434623, -1.1605202176663385, -1.0048252287116235]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_702",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1675211064622386, 0.8238892056019447, 0.06796206816259631, -4.022560158368391]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1675211064622386, 0.8238892056019447, 0.06796206816259631, -4.022560158368391]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_703",
    "sat": "def sat(x: float, coeffs: List[float]=[1.3536423663737354, 0.7205612911921871, 9.660649432853111, 0.02566966016715844]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3536423663737354, 0.7205612911921871, 9.660649432853111, 0.02566966016715844]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_704",
    "sat": "def sat(x: float, coeffs: List[float]=[32.06583178517341, -2.519843207962541, -11.04536452773626, -0.5344448803696753]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[32.06583178517341, -2.519843207962541, -11.04536452773626, -0.5344448803696753]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_705",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.5994418611215124, -0.2727426632696597, -0.1007498209939884, 293.58847487279314]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.5994418611215124, -0.2727426632696597, -0.1007498209939884, 293.58847487279314]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_706",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.10264129610977224, 1.3202497216048161, 1.2950495366325059, -0.018827536104638914]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10264129610977224, 1.3202497216048161, 1.2950495366325059, -0.018827536104638914]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_707",
    "sat": "def sat(x: float, coeffs: List[float]=[-12.57689953580367, 6.4538435917788926, 0.7551401822314397, -3648.9889478109994]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.57689953580367, 6.4538435917788926, 0.7551401822314397, -3648.9889478109994]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_708",
    "sat": "def sat(x: float, coeffs: List[float]=[4.335460967244997, 0.7448792475827782, -0.35580165475093645, 0.165158533409288]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.335460967244997, 0.7448792475827782, -0.35580165475093645, 0.165158533409288]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_709",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9533376646111478, 2.0128107776198565, 0.7565960456936751, 1039.445993928718]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9533376646111478, 2.0128107776198565, 0.7565960456936751, 1039.445993928718]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_710",
    "sat": "def sat(x: float, coeffs: List[float]=[-11.62724268765596, 1.2808947116694596, -1.1856013265980743, -14801552.619922915]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.62724268765596, 1.2808947116694596, -1.1856013265980743, -14801552.619922915]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_711",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2401146196848796, 0.32919126164368545, -37.809090135495445, -211.30518958687446]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2401146196848796, 0.32919126164368545, -37.809090135495445, -211.30518958687446]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_712",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.26449046287433525, -1.033026138906492, 0.2975274903406892, -71.71359090208892]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.26449046287433525, -1.033026138906492, 0.2975274903406892, -71.71359090208892]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_713",
    "sat": "def sat(x: float, coeffs: List[float]=[4.431590266746635, 0.4063117492953395, -3.2401823294220584, 0.8655267267166427]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.431590266746635, 0.4063117492953395, -3.2401823294220584, 0.8655267267166427]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_714",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.17068706690712734, 0.07471012152395762, -1.0400955794405518, 45.4864682138781]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17068706690712734, 0.07471012152395762, -1.0400955794405518, 45.4864682138781]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_715",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9639809810229868, -0.921202744751548, -0.1724310053559789, -2401.714472659356]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9639809810229868, -0.921202744751548, -0.1724310053559789, -2401.714472659356]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_716",
    "sat": "def sat(x: float, coeffs: List[float]=[246.29000506307327, -0.1397883289040526, -0.11602929675904668, 1.4882729348962647]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[246.29000506307327, -0.1397883289040526, -0.11602929675904668, 1.4882729348962647]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_717",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05133209615513482, -0.19755785909433032, -21.600084051144403, -9360.82759429727]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05133209615513482, -0.19755785909433032, -21.600084051144403, -9360.82759429727]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_718",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.857225157754981, 0.30616023228615546, 0.42168126826709534, -64965.54738376462]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.857225157754981, 0.30616023228615546, 0.42168126826709534, -64965.54738376462]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_719",
    "sat": "def sat(x: float, coeffs: List[float]=[68.62102611762612, 0.5848757752556399, 0.06246243300594401, -0.23068733886988108]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[68.62102611762612, 0.5848757752556399, 0.06246243300594401, -0.23068733886988108]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_720",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.7224717453153078, 5.059207523493552, -44.005285868097985, -128.3761185167686]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7224717453153078, 5.059207523493552, -44.005285868097985, -128.3761185167686]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_721",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.972281398226021, 8.905213150270093, 1.1409983354104496, 0.03549117699452754]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.972281398226021, 8.905213150270093, 1.1409983354104496, 0.03549117699452754]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_722",
    "sat": "def sat(x: float, coeffs: List[float]=[253.9599998925686, 5.547840754332513, -0.05208165102829487, -67.52578102817309]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[253.9599998925686, 5.547840754332513, -0.05208165102829487, -67.52578102817309]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_723",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3248091271641798, -0.02593005827103645, 0.7692346781996097, 0.5512603266734988]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3248091271641798, -0.02593005827103645, 0.7692346781996097, 0.5512603266734988]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_724",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4214321634816545, -0.2672365446089888, -0.05014666041372632, 32.70393288204846]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4214321634816545, -0.2672365446089888, -0.05014666041372632, 32.70393288204846]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_725",
    "sat": "def sat(x: float, coeffs: List[float]=[38.14576777659693, 0.07272405411462642, -0.0811687099515821, -56.57757928315902]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[38.14576777659693, 0.07272405411462642, -0.0811687099515821, -56.57757928315902]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_726",
    "sat": "def sat(x: float, coeffs: List[float]=[0.02937986050975298, -1.628194109627677, -0.622103142361991, 1254.8348296207348]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.02937986050975298, -1.628194109627677, -0.622103142361991, 1254.8348296207348]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_727",
    "sat": "def sat(x: float, coeffs: List[float]=[5.680388587934574, -16.342049227102844, 0.47901466035422624, -1766.928908367211]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.680388587934574, -16.342049227102844, 0.47901466035422624, -1766.928908367211]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_728",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.44633014209981, -2.255715777682856, 0.00016438094622994726, -47.08981031635813]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.44633014209981, -2.255715777682856, 0.00016438094622994726, -47.08981031635813]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_729",
    "sat": "def sat(x: float, coeffs: List[float]=[-9.890673681459772, 0.11531550669941042, -0.2934180482822928, 113.93325071708401]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.890673681459772, 0.11531550669941042, -0.2934180482822928, 113.93325071708401]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_730",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1695744214493058, 0.332800615184673, 1.5129082267158191, -0.12232436755008602]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1695744214493058, 0.332800615184673, 1.5129082267158191, -0.12232436755008602]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_731",
    "sat": "def sat(x: float, coeffs: List[float]=[-34.16802044266682, -31.021519100934274, 0.058533333166903345, -686199.2237436209]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-34.16802044266682, -31.021519100934274, 0.058533333166903345, -686199.2237436209]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_732",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.01292147327649588, -0.22864395095331513, 46.309150156496344, -45.4933146123125]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.01292147327649588, -0.22864395095331513, 46.309150156496344, -45.4933146123125]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_733",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2138968540574965, -1.2811553274795653, 0.02853388464261915, 0.9848159398495022]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2138968540574965, -1.2811553274795653, 0.02853388464261915, 0.9848159398495022]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_734",
    "sat": "def sat(x: float, coeffs: List[float]=[0.17195382301228532, 4.449755740738248, 0.2781412417740874, -0.03168289493410126]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17195382301228532, 4.449755740738248, 0.2781412417740874, -0.03168289493410126]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_735",
    "sat": "def sat(x: float, coeffs: List[float]=[0.21543326080587497, 0.26696070704267644, 29.070193333338082, -22.90906592548601]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21543326080587497, 0.26696070704267644, 29.070193333338082, -22.90906592548601]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_736",
    "sat": "def sat(x: float, coeffs: List[float]=[7.235763951628717, -47.24348412993691, 0.2565295027587307, 5.3834472825774755]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.235763951628717, -47.24348412993691, 0.2565295027587307, 5.3834472825774755]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_737",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6316770031975395, 0.040244903304683, 8.362051134194608, -0.5623935418257004]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6316770031975395, 0.040244903304683, 8.362051134194608, -0.5623935418257004]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_738",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.0205267196038688, -1.4680051610498135, 0.07326061587253374, -7122.578541665948]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.0205267196038688, -1.4680051610498135, 0.07326061587253374, -7122.578541665948]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_739",
    "sat": "def sat(x: float, coeffs: List[float]=[5.606862849334253, 0.11536641419340758, -0.593603169987194, 0.581441973558696]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.606862849334253, 0.11536641419340758, -0.593603169987194, 0.581441973558696]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_740",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4274614186826895, 0.2651357214351883, 6.7154741982433785, 4.77867657585166]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4274614186826895, 0.2651357214351883, 6.7154741982433785, 4.77867657585166]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_741",
    "sat": "def sat(x: float, coeffs: List[float]=[0.21787202425162655, 2.255283865881584, 0.5813461449037632, -10.111207405944242]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21787202425162655, 2.255283865881584, 0.5813461449037632, -10.111207405944242]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_742",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.80278586087036, -21.091829123402206, -0.0026793316065883608, 73.41951719135237]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.80278586087036, -21.091829123402206, -0.0026793316065883608, 73.41951719135237]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_743",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0945356998330169, 119.35022544618626, -6.123982263880525, -5.1027703337516925]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0945356998330169, 119.35022544618626, -6.123982263880525, -5.1027703337516925]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_744",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.18641603082209834, 0.16860297981326533, 0.25385532169107794, 0.01707637426668611]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18641603082209834, 0.16860297981326533, 0.25385532169107794, 0.01707637426668611]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_745",
    "sat": "def sat(x: float, coeffs: List[float]=[-12.904762255667142, -0.040965844136478635, -0.15598538585503086, 0.9603324990486672]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.904762255667142, -0.040965844136478635, -0.15598538585503086, 0.9603324990486672]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_746",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.8829178830316018, -2.367571185261784, 1.146177706333943, 5745.783877830326]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8829178830316018, -2.367571185261784, 1.146177706333943, 5745.783877830326]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_747",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.16896220477806886, -3.262079315262984, 0.4033680550015933, 849.4859471498439]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.16896220477806886, -3.262079315262984, 0.4033680550015933, 849.4859471498439]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_748",
    "sat": "def sat(x: float, coeffs: List[float]=[-15.023007584909323, 3.327199881216689, 0.03947130475756855, -24167788.947149944]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.023007584909323, 3.327199881216689, 0.03947130475756855, -24167788.947149944]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_749",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4903576985779279, -1.8044337795345193, -0.6180845411654822, -0.03127111997930793]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4903576985779279, -1.8044337795345193, -0.6180845411654822, -0.03127111997930793]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_750",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.18971139543517324, 0.09764753408431799, -73.08497758183874, -155.4022857550251]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18971139543517324, 0.09764753408431799, -73.08497758183874, -155.4022857550251]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_751",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0622781856793185, 186.56296230453916, 0.04362665726418732, -2364.78295146487]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0622781856793185, 186.56296230453916, 0.04362665726418732, -2364.78295146487]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_752",
    "sat": "def sat(x: float, coeffs: List[float]=[0.25382801905607977, 61.84508226425604, -3.599542355803561, -6188985.130928794]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.25382801905607977, 61.84508226425604, -3.599542355803561, -6188985.130928794]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_753",
    "sat": "def sat(x: float, coeffs: List[float]=[0.642183052270079, 2.2261370995143364, 1.1964734807381048, -279218539.8049787]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.642183052270079, 2.2261370995143364, 1.1964734807381048, -279218539.8049787]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_754",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.0992620241105686, 0.604574635242534, -0.38614335302337394, 0.1167451919944132]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0992620241105686, 0.604574635242534, -0.38614335302337394, 0.1167451919944132]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_755",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08486070284897858, 0.013861045903334665, -2.925846551258933, -5912.625893257113]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08486070284897858, 0.013861045903334665, -2.925846551258933, -5912.625893257113]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_756",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6807170291397937, -0.1780244625663189, -0.18773038656945537, 0.3975827821365443]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6807170291397937, -0.1780244625663189, -0.18773038656945537, 0.3975827821365443]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_757",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9944575211476949, 0.3772819160306174, 0.011255290599813042, -13662.05097599308]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9944575211476949, 0.3772819160306174, 0.011255290599813042, -13662.05097599308]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_758",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.49587173072496266, 2.8068229870334283, 0.04920981642444655, -7.462255171556934]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.49587173072496266, 2.8068229870334283, 0.04920981642444655, -7.462255171556934]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_759",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2916656494807249, -0.9307372667088304, 2.0722501704315257, 0.9014912859212385]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2916656494807249, -0.9307372667088304, 2.0722501704315257, 0.9014912859212385]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_760",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6852290960708612, 0.6190203852612516, 0.13939050961652852, 0.009165251167744864]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6852290960708612, 0.6190203852612516, 0.13939050961652852, 0.009165251167744864]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_761",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7441521436511828, -31.27421919221671, 10.827509452881808, 0.011219282402133516]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7441521436511828, -31.27421919221671, 10.827509452881808, 0.011219282402133516]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_762",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0014227355850002787, 0.16681255197598865, 0.06693902497732902, 0.005585648605405032]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0014227355850002787, 0.16681255197598865, 0.06693902497732902, 0.005585648605405032]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_763",
    "sat": "def sat(x: float, coeffs: List[float]=[12.808922375433527, 0.03984905547592862, 15.196780179463987, -104.73481134968031]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.808922375433527, 0.03984905547592862, 15.196780179463987, -104.73481134968031]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_764",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.23115442235693476, -3.313333838510944, 0.2510402776098115, 4.466718350965375]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.23115442235693476, -3.313333838510944, 0.2510402776098115, 4.466718350965375]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_765",
    "sat": "def sat(x: float, coeffs: List[float]=[4.495242307217056, -0.20339787881628615, -0.27773917473924353, -1.2825865123867306]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.495242307217056, -0.20339787881628615, -0.27773917473924353, -1.2825865123867306]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_766",
    "sat": "def sat(x: float, coeffs: List[float]=[1.3817228135537059, 14.80509729613668, 12.754373678691683, 1.5838684828722625]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3817228135537059, 14.80509729613668, 12.754373678691683, 1.5838684828722625]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_767",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.615656265612531, -0.2018354719671233, 30.148891021389797, 91814.9109382847]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.615656265612531, -0.2018354719671233, 30.148891021389797, 91814.9109382847]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_768",
    "sat": "def sat(x: float, coeffs: List[float]=[-14.841693987708995, -1.5360517856267268, -0.04093066332735414, -12.224070328122295]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.841693987708995, -1.5360517856267268, -0.04093066332735414, -12.224070328122295]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_769",
    "sat": "def sat(x: float, coeffs: List[float]=[9.193798463504669, -1.328184048504725, -0.6663187901725536, 0.0436922185372548]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.193798463504669, -1.328184048504725, -0.6663187901725536, 0.0436922185372548]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_770",
    "sat": "def sat(x: float, coeffs: List[float]=[0.15097584271228923, -0.9461301879601303, -0.0184008355326144, 0.5702451277814604]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.15097584271228923, -0.9461301879601303, -0.0184008355326144, 0.5702451277814604]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_771",
    "sat": "def sat(x: float, coeffs: List[float]=[5.377633232928332, 2.89289875753633, 1.1817741787547849, -2.0803356026900066]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.377633232928332, 2.89289875753633, 1.1817741787547849, -2.0803356026900066]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_772",
    "sat": "def sat(x: float, coeffs: List[float]=[1.19692150764943, -1.2439299187819193, 0.4094925364467577, -180.85713143076632]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.19692150764943, -1.2439299187819193, 0.4094925364467577, -180.85713143076632]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_773",
    "sat": "def sat(x: float, coeffs: List[float]=[0.07039765140814251, -3.471007374987178, -2.3098157197939595, 0.08087030799640839]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07039765140814251, -3.471007374987178, -2.3098157197939595, 0.08087030799640839]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_774",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3732784261673319, -0.535822265381173, -11.421896945809143, -22.858268666470032]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3732784261673319, -0.535822265381173, -11.421896945809143, -22.858268666470032]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_775",
    "sat": "def sat(x: float, coeffs: List[float]=[15.370686886773273, 1.846311927744875, 0.08851745144450714, -336.81445404406634]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.370686886773273, 1.846311927744875, 0.08851745144450714, -336.81445404406634]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_776",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3257120726603316, -1.1598995857066063, -72.85461310301129, 28.959832607590805]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3257120726603316, -1.1598995857066063, -72.85461310301129, 28.959832607590805]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_777",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6467255167116206, -4.297376685422827, 1.573076602006821, -0.08494362690718148]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6467255167116206, -4.297376685422827, 1.573076602006821, -0.08494362690718148]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_778",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6884698624448572, -1.2950085187497156, 3.3192633352051946, 3.5537983739710772]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6884698624448572, -1.2950085187497156, 3.3192633352051946, 3.5537983739710772]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_779",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9606189869948544, -0.28113537585142523, 1.7064840626801159, 1099.1543047605471]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9606189869948544, -0.28113537585142523, 1.7064840626801159, 1099.1543047605471]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_780",
    "sat": "def sat(x: float, coeffs: List[float]=[0.11181961762277533, 4.290337557285755, -0.08386377398059815, -0.0038363116540566567]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11181961762277533, 4.290337557285755, -0.08386377398059815, -0.0038363116540566567]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_781",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.14074766256216584, -0.006839807078607614, -0.22597961610743686, 0.051266388981366304]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.14074766256216584, -0.006839807078607614, -0.22597961610743686, 0.051266388981366304]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_782",
    "sat": "def sat(x: float, coeffs: List[float]=[-46.00470164580468, -55.24035685050578, -0.062324092207492944, -329.093442770789]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-46.00470164580468, -55.24035685050578, -0.062324092207492944, -329.093442770789]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_783",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.1396498690687067, -8.485941801425408, -0.041208057975749744, 1.3168696548178627]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.1396498690687067, -8.485941801425408, -0.041208057975749744, 1.3168696548178627]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_784",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7359123793445628, -0.5615864500914901, -50.60748080071436, -51.674973886230305]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7359123793445628, -0.5615864500914901, -50.60748080071436, -51.674973886230305]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_785",
    "sat": "def sat(x: float, coeffs: List[float]=[2.1126487611110476, -0.4131446132894238, 0.29033607773226316, 21.78743416315814]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1126487611110476, -0.4131446132894238, 0.29033607773226316, 21.78743416315814]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_786",
    "sat": "def sat(x: float, coeffs: List[float]=[-13.76512629998709, 0.14946679267539387, -3.018687690504457, -1020820.0949446422]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.76512629998709, 0.14946679267539387, -3.018687690504457, -1020820.0949446422]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_787",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.704357475606999, 0.5158528321627943, 0.823277767903693, -0.4312646015994056]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.704357475606999, 0.5158528321627943, 0.823277767903693, -0.4312646015994056]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_788",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.3067898751780316, -22.455354585359387, -2.0229979369160396, 21.81595012079592]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.3067898751780316, -22.455354585359387, -2.0229979369160396, 21.81595012079592]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_789",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7606354974007346, -0.5797608721500435, -15.09586289269091, 175.6445926096065]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7606354974007346, -0.5797608721500435, -15.09586289269091, 175.6445926096065]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_790",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0672698555039304, 2.0515224209357927, 1.831915805264244, -1.5299210436681365]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0672698555039304, 2.0515224209357927, 1.831915805264244, -1.5299210436681365]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_791",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8188545289183109, -0.11232519225565696, -10.04002121088293, -30361639.537958268]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8188545289183109, -0.11232519225565696, -10.04002121088293, -30361639.537958268]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_792",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.150514316260201, -1.2419176406688102, -0.696409007771262, -1877.9318006391502]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.150514316260201, -1.2419176406688102, -0.696409007771262, -1877.9318006391502]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_793",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8987568253997035, 4.70060049547646, 0.3121469280849254, -19.738233016738384]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8987568253997035, 4.70060049547646, 0.3121469280849254, -19.738233016738384]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_794",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.505540037333907, 1.0868279259596691, -0.9027124933979063, 0.7284356306620605]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.505540037333907, 1.0868279259596691, -0.9027124933979063, 0.7284356306620605]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_795",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.47586180728808003, 0.14673583956073574, 3.1266380990060476, -1.1852939721201525]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.47586180728808003, 0.14673583956073574, 3.1266380990060476, -1.1852939721201525]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_796",
    "sat": "def sat(x: float, coeffs: List[float]=[2.4316517455733475, -1.521862274076186, -0.5317488540353644, -0.8886631766969547]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.4316517455733475, -1.521862274076186, -0.5317488540353644, -0.8886631766969547]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_797",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.727847315289114, -9.988633731878783, -3.9872471313002795, 47.958440518382204]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.727847315289114, -9.988633731878783, -3.9872471313002795, 47.958440518382204]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_798",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.1992432710888195, -0.11734463878077728, -0.3378914011623773, 796576823.1204973]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.1992432710888195, -0.11734463878077728, -0.3378914011623773, 796576823.1204973]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_799",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2150072785592636, -1.3566357324526503, -3.931696183242687, 19.568409773825287]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2150072785592636, -1.3566357324526503, -3.931696183242687, 19.568409773825287]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_800",
    "sat": "def sat(x: float, coeffs: List[float]=[1.8070686530696365, 5.3503072531561, -3.412590450539687, 45.62587246189726]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8070686530696365, 5.3503072531561, -3.412590450539687, 45.62587246189726]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_801",
    "sat": "def sat(x: float, coeffs: List[float]=[0.44206712336863063, 0.35783394053571566, -8.322577540218807, -2.41312363962509]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.44206712336863063, 0.35783394053571566, -8.322577540218807, -2.41312363962509]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_802",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7659023412721343, 1.669380525445426, -1.367843280235573, 10.571348041491838]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7659023412721343, 1.669380525445426, -1.367843280235573, 10.571348041491838]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_803",
    "sat": "def sat(x: float, coeffs: List[float]=[168.36553072778625, 0.2729806688197822, -0.015251858143357092, -0.28586419998847284]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[168.36553072778625, 0.2729806688197822, -0.015251858143357092, -0.28586419998847284]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_804",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6443219774776557, 0.3380529271757761, -2.267951688729873, -2.826594783040391]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6443219774776557, 0.3380529271757761, -2.267951688729873, -2.826594783040391]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_805",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.193334514787648, 7.388953817000874, -23.05556302650397, -39.88479984583876]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.193334514787648, 7.388953817000874, -23.05556302650397, -39.88479984583876]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_806",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.4467104611113397, 0.7860244876804902, 0.1802433903922119, 91246.99415320603]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4467104611113397, 0.7860244876804902, 0.1802433903922119, 91246.99415320603]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_807",
    "sat": "def sat(x: float, coeffs: List[float]=[-199.82406311131695, 0.22672261138488534, 0.248644419357081, 183869502.9015821]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-199.82406311131695, 0.22672261138488534, 0.248644419357081, 183869502.9015821]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_808",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.5722088466794404, -0.1418161350449972, -0.7117158595338607, -3.413627292871174e-05]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5722088466794404, -0.1418161350449972, -0.7117158595338607, -3.413627292871174e-05]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_809",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.25661240724661144, -0.33695503411099653, 0.23776515814128052, 0.6487997475938332]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.25661240724661144, -0.33695503411099653, 0.23776515814128052, 0.6487997475938332]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_810",
    "sat": "def sat(x: float, coeffs: List[float]=[217.60229021207525, 14.472175997883108, 0.06350213891674154, -17446973.882967446]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[217.60229021207525, 14.472175997883108, 0.06350213891674154, -17446973.882967446]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_811",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.173685818384668, -1.2411482623338477, 0.2552824751156247, -0.008034126433388774]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.173685818384668, -1.2411482623338477, 0.2552824751156247, -0.008034126433388774]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_812",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2943490728094522, -4.017367592576661, -0.9446710377027827, 4.885596704488593]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2943490728094522, -4.017367592576661, -0.9446710377027827, 4.885596704488593]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_813",
    "sat": "def sat(x: float, coeffs: List[float]=[-361.31526193228063, 2.143501252783524, 8.601892924386823, 1513.3778753459255]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-361.31526193228063, 2.143501252783524, 8.601892924386823, 1513.3778753459255]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_814",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8957089489178703, 0.5327277141956808, -0.8524788447508179, 0.1943570412362582]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8957089489178703, 0.5327277141956808, -0.8524788447508179, 0.1943570412362582]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_815",
    "sat": "def sat(x: float, coeffs: List[float]=[2.4779986565090915, 0.5798160191846047, -2.0603131346280263, 5.204938849307537]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.4779986565090915, 0.5798160191846047, -2.0603131346280263, 5.204938849307537]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_816",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.9125017250651815, -0.030949332476280473, -0.6545983051783256, -0.005532077906460475]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.9125017250651815, -0.030949332476280473, -0.6545983051783256, -0.005532077906460475]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_817",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2604962736401108, 0.7642225739402452, -0.12783610063777973, -0.23470699078942825]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2604962736401108, 0.7642225739402452, -0.12783610063777973, -0.23470699078942825]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_818",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.17021951025518098, -0.7434577545125155, -40.07941698336167, 18.55120866518801]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17021951025518098, -0.7434577545125155, -40.07941698336167, 18.55120866518801]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_819",
    "sat": "def sat(x: float, coeffs: List[float]=[0.16879117988232872, 0.32352812347868626, 0.970889764290127, -12.603648634150888]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.16879117988232872, 0.32352812347868626, 0.970889764290127, -12.603648634150888]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_820",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.8935833276992384, -2.6212109272024855, -1.0269339922151675, 0.804359599317833]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.8935833276992384, -2.6212109272024855, -1.0269339922151675, 0.804359599317833]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_821",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0612768979081848, -0.12188995071995157, 0.4538477891452352, 810.73409570312]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0612768979081848, -0.12188995071995157, 0.4538477891452352, 810.73409570312]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_822",
    "sat": "def sat(x: float, coeffs: List[float]=[0.21491705015341167, 9.296625141249054, -35.734501416230884, -245.44321620925408]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21491705015341167, 9.296625141249054, -35.734501416230884, -245.44321620925408]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_823",
    "sat": "def sat(x: float, coeffs: List[float]=[0.03090802898193264, -17.278847864528327, 20.77132640160561, -6.2491299804570355]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03090802898193264, -17.278847864528327, 20.77132640160561, -6.2491299804570355]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_824",
    "sat": "def sat(x: float, coeffs: List[float]=[0.11609637069960625, -1.2637762218243263, -0.0871171530372179, 0.024058653130290708]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11609637069960625, -1.2637762218243263, -0.0871171530372179, 0.024058653130290708]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_825",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06582682747236819, 0.234909913126639, -4.67471305333708, -2.7875230898385635]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06582682747236819, 0.234909913126639, -4.67471305333708, -2.7875230898385635]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_826",
    "sat": "def sat(x: float, coeffs: List[float]=[0.23856377605169232, -0.6438956320530442, 9.614603105080379, -7.549051351297777]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.23856377605169232, -0.6438956320530442, 9.614603105080379, -7.549051351297777]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_827",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2853463917267844, -0.2964474361716183, 0.8229922129349917, 0.0868031628162916]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2853463917267844, -0.2964474361716183, 0.8229922129349917, 0.0868031628162916]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_828",
    "sat": "def sat(x: float, coeffs: List[float]=[0.26470949419642875, -11.071598047484871, -3.273915542220678, 89.87350756859459]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.26470949419642875, -11.071598047484871, -3.273915542220678, 89.87350756859459]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_829",
    "sat": "def sat(x: float, coeffs: List[float]=[0.016073144961046653, 1.5431579700177245, -0.4583532948657149, -32.404570105744604]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.016073144961046653, 1.5431579700177245, -0.4583532948657149, -32.404570105744604]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_830",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.022446701938985864, 0.35565619271834076, 0.07889048926797908, -0.015221903037632462]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.022446701938985864, 0.35565619271834076, 0.07889048926797908, -0.015221903037632462]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_831",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3342525393524445, -0.8870383615364488, 0.06939440511803374, 0.07116463564306458]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3342525393524445, -0.8870383615364488, 0.06939440511803374, 0.07116463564306458]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_832",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11907739733126547, 0.3490631636520279, 0.11415248172359267, -0.12839909237250327]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11907739733126547, 0.3490631636520279, 0.11415248172359267, -0.12839909237250327]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_833",
    "sat": "def sat(x: float, coeffs: List[float]=[5.191113974772496, 2.719495058598868, 0.1808009612334466, -0.0053763483141122444]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.191113974772496, 2.719495058598868, 0.1808009612334466, -0.0053763483141122444]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_834",
    "sat": "def sat(x: float, coeffs: List[float]=[0.23416973644983838, 0.020539434649588923, -1.053488291617574, -0.40000239132684406]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.23416973644983838, 0.020539434649588923, -1.053488291617574, -0.40000239132684406]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_835",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7471938429444621, -0.37411064729130716, -11.76932625983852, 550.2063248669435]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7471938429444621, -0.37411064729130716, -11.76932625983852, 550.2063248669435]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_836",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.685160878640711, 13.09969479565816, -0.2531046457710438, -0.042262561637845385]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.685160878640711, 13.09969479565816, -0.2531046457710438, -0.042262561637845385]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_837",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2882499811564561, 72.32883220899875, -15.840453651229202, -94359.11253249407]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2882499811564561, 72.32883220899875, -15.840453651229202, -94359.11253249407]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_838",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4199016759925369, -331.6871552772893, 0.4354199547118129, 2627.550374917785]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4199016759925369, -331.6871552772893, 0.4354199547118129, 2627.550374917785]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_839",
    "sat": "def sat(x: float, coeffs: List[float]=[0.023233606352952723, -0.09324005146742669, 16.09117949015565, -2.808543010176675]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.023233606352952723, -0.09324005146742669, 16.09117949015565, -2.808543010176675]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_840",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08169909692157984, 0.7624999161742062, -10.868081096481022, -1.4864334770484768]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08169909692157984, 0.7624999161742062, -10.868081096481022, -1.4864334770484768]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_841",
    "sat": "def sat(x: float, coeffs: List[float]=[9.491685024843765, -4.786682127324879, 0.3015485520845758, 2.962302324808079]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.491685024843765, -4.786682127324879, 0.3015485520845758, 2.962302324808079]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_842",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6346673394852496, -0.946152596371654, -0.668747107857624, -0.09860323712126483]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6346673394852496, -0.946152596371654, -0.668747107857624, -0.09860323712126483]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_843",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.10057638905705857, -0.0030676680675763013, 0.19281138431004616, -0.019978827607169992]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10057638905705857, -0.0030676680675763013, 0.19281138431004616, -0.019978827607169992]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_844",
    "sat": "def sat(x: float, coeffs: List[float]=[1.3423576295905397, 1.3869100193503419, 4.555648140744659, 14.141215074237367]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3423576295905397, 1.3869100193503419, 4.555648140744659, 14.141215074237367]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_845",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.46189354504498564, 16.853654862845953, -0.5135539649815352, -80844.86329193614]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.46189354504498564, 16.853654862845953, -0.5135539649815352, -80844.86329193614]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_846",
    "sat": "def sat(x: float, coeffs: List[float]=[1.410899774220811, -1.5957206063700482, -0.35764210445677946, 0.1288890490441908]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.410899774220811, -1.5957206063700482, -0.35764210445677946, 0.1288890490441908]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_847",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4686508169903229, -0.7759783649413342, -0.7736533045917641, -0.1621635153859116]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4686508169903229, -0.7759783649413342, -0.7736533045917641, -0.1621635153859116]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_848",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9140378863915664, 0.0058277378995621465, -0.03800533070994986, -12197.734983613198]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9140378863915664, 0.0058277378995621465, -0.03800533070994986, -12197.734983613198]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_849",
    "sat": "def sat(x: float, coeffs: List[float]=[0.680021378427034, -0.22155251404669266, -1.058457871412452, -1.4108908127956334]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.680021378427034, -0.22155251404669266, -1.058457871412452, -1.4108908127956334]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_850",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.37629257851906406, -5.513408415794518, -0.416151112898057, 3.5464999013817926]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.37629257851906406, -5.513408415794518, -0.416151112898057, 3.5464999013817926]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_851",
    "sat": "def sat(x: float, coeffs: List[float]=[-29.978564804107165, -3.046016011987254, 0.5087328309705752, -1338.9115479759591]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-29.978564804107165, -3.046016011987254, 0.5087328309705752, -1338.9115479759591]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_852",
    "sat": "def sat(x: float, coeffs: List[float]=[53.443845546316346, -0.21432918411382698, -7.7399059115064945, 2.147919258365968]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[53.443845546316346, -0.21432918411382698, -7.7399059115064945, 2.147919258365968]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_853",
    "sat": "def sat(x: float, coeffs: List[float]=[5.718981808030087, 0.5275036029517858, 23.23230773555369, 16.649783294586474]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.718981808030087, 0.5275036029517858, 23.23230773555369, 16.649783294586474]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_854",
    "sat": "def sat(x: float, coeffs: List[float]=[-9.1654486199847, 20.183155701729426, 9.628037596815995, -439.96855138885087]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.1654486199847, 20.183155701729426, 9.628037596815995, -439.96855138885087]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_855",
    "sat": "def sat(x: float, coeffs: List[float]=[0.31232083791217985, -3.593056217171659, -2.4835504391298606, 2.479067853901376]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.31232083791217985, -3.593056217171659, -2.4835504391298606, 2.479067853901376]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_856",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.68802535361844, 1.1367459404255749, 18.395586187853436, -13.23738657119775]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.68802535361844, 1.1367459404255749, 18.395586187853436, -13.23738657119775]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_857",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0233949327448697, -35.232533418583465, 1.0724727022578893, 13.094122348977967]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0233949327448697, -35.232533418583465, 1.0724727022578893, 13.094122348977967]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_858",
    "sat": "def sat(x: float, coeffs: List[float]=[1.8691583763698363, 5.08509223580615, 414.4797048095579, 21.028516908413835]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8691583763698363, 5.08509223580615, 414.4797048095579, 21.028516908413835]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_859",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.751328599023651, -0.19468464322259402, 14.253243048464313, 934691.8560690654]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.751328599023651, -0.19468464322259402, 14.253243048464313, 934691.8560690654]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_860",
    "sat": "def sat(x: float, coeffs: List[float]=[0.15515086367271702, -35.36433951399346, 0.02587436582249388, 0.4512710200177427]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.15515086367271702, -35.36433951399346, 0.02587436582249388, 0.4512710200177427]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_861",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.705562583791113, -0.8969737795703909, -0.059084507987843704, 2535734.0218637483]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.705562583791113, -0.8969737795703909, -0.059084507987843704, 2535734.0218637483]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_862",
    "sat": "def sat(x: float, coeffs: List[float]=[201.4789913461128, -25.693866845591604, 6.425101061683577, -0.3863041741757609]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[201.4789913461128, -25.693866845591604, 6.425101061683577, -0.3863041741757609]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_863",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2488933529471272, -9.19591608183997, -0.18541958192677588, 38.5264057322609]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2488933529471272, -9.19591608183997, -0.18541958192677588, 38.5264057322609]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_864",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3412223495310356, -0.4816318379547278, 0.07056345934568749, -1664156.512278694]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3412223495310356, -0.4816318379547278, 0.07056345934568749, -1664156.512278694]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_865",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9190788150794021, -2.2986924333311296, 1.6522340437362288, -0.32760026752428795]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9190788150794021, -2.2986924333311296, 1.6522340437362288, -0.32760026752428795]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_866",
    "sat": "def sat(x: float, coeffs: List[float]=[4.2395416602588325, -0.20857995083690217, 0.1998414031852506, -2.025538204728522]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.2395416602588325, -0.20857995083690217, 0.1998414031852506, -2.025538204728522]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_867",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.4024816759950787, -0.39242055423305705, -1.824879169603076, -10.621041710800316]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4024816759950787, -0.39242055423305705, -1.824879169603076, -10.621041710800316]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_868",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2604903949147712, 0.33570976535636704, 1.9042724356707057, 0.11941467753763972]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2604903949147712, 0.33570976535636704, 1.9042724356707057, 0.11941467753763972]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_869",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.5588375922405475, -0.08685019746722052, -1.4666201869533302, 0.08737302432418138]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5588375922405475, -0.08685019746722052, -1.4666201869533302, 0.08737302432418138]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_870",
    "sat": "def sat(x: float, coeffs: List[float]=[0.15774421281042628, -2.0220492685266334, -3.4828515706551086, 1.3738361732781752]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.15774421281042628, -2.0220492685266334, -3.4828515706551086, 1.3738361732781752]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_871",
    "sat": "def sat(x: float, coeffs: List[float]=[0.03960219964272871, 0.04919671579723617, 0.30264860984107206, 0.058856270566875486]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03960219964272871, 0.04919671579723617, 0.30264860984107206, 0.058856270566875486]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_872",
    "sat": "def sat(x: float, coeffs: List[float]=[183.42368662745466, -21.908739981248697, 1.9666160724358719, -546.7589096772228]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[183.42368662745466, -21.908739981248697, 1.9666160724358719, -546.7589096772228]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_873",
    "sat": "def sat(x: float, coeffs: List[float]=[1.9592414633631918, -0.1164298914053113, -0.2709399269823242, -0.23251666808635957]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9592414633631918, -0.1164298914053113, -0.2709399269823242, -0.23251666808635957]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_874",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.016251586245099148, -2.5236619440689054, -21.243339320592867, 1.6751003575917967]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.016251586245099148, -2.5236619440689054, -21.243339320592867, 1.6751003575917967]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_875",
    "sat": "def sat(x: float, coeffs: List[float]=[106.93967831002588, -0.1061609461879424, 0.24077464663066017, -23605.785943624105]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[106.93967831002588, -0.1061609461879424, 0.24077464663066017, -23605.785943624105]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_876",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1858497840879052, -0.9738457030124673, -7.746065802448919, 477.1067836967502]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1858497840879052, -0.9738457030124673, -7.746065802448919, 477.1067836967502]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_877",
    "sat": "def sat(x: float, coeffs: List[float]=[-10.814012955216159, 3.6238903304453163, -2.9219159852435994, 1.3589679773372936]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.814012955216159, 3.6238903304453163, -2.9219159852435994, 1.3589679773372936]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_878",
    "sat": "def sat(x: float, coeffs: List[float]=[1.3590172513065575, -0.011996788030649222, 4.084091275691504, 16.871291292349785]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3590172513065575, -0.011996788030649222, 4.084091275691504, 16.871291292349785]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_879",
    "sat": "def sat(x: float, coeffs: List[float]=[-26.410900636634636, -85.19817981597714, -8.192319377485122, 2.271035592836685]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-26.410900636634636, -85.19817981597714, -8.192319377485122, 2.271035592836685]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_880",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.006974067173660892, -12.617061752368821, -3.5008066927136654, 3277.4276887884603]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.006974067173660892, -12.617061752368821, -3.5008066927136654, 3277.4276887884603]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_881",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.38247222424242305, -0.5853964394580123, -4.015187661148303, 834.5684215012133]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.38247222424242305, -0.5853964394580123, -4.015187661148303, 834.5684215012133]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_882",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.22979252424865182, 0.21831073806773138, -0.6681948449513122, -0.022491002159819095]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.22979252424865182, 0.21831073806773138, -0.6681948449513122, -0.022491002159819095]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_883",
    "sat": "def sat(x: float, coeffs: List[float]=[2.479639112824806, 0.18097453545970846, 0.008337500369291225, 1.2644803780641827]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.479639112824806, 0.18097453545970846, 0.008337500369291225, 1.2644803780641827]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_884",
    "sat": "def sat(x: float, coeffs: List[float]=[7.520894915033338, -5.749303680441053, -0.1800525908456969, 0.025315376236174157]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.520894915033338, -5.749303680441053, -0.1800525908456969, 0.025315376236174157]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_885",
    "sat": "def sat(x: float, coeffs: List[float]=[10.030528498098887, 0.38062365557530214, -0.0008071687808467084, -0.33209319486223704]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.030528498098887, 0.38062365557530214, -0.0008071687808467084, -0.33209319486223704]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_886",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1313919464246058, -35.07450872765643, -0.7920405945874561, 18.463232948222636]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1313919464246058, -35.07450872765643, -0.7920405945874561, 18.463232948222636]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_887",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.08312451420702331, 0.3288499321417911, -2.2531679208750246, -0.17252472165623656]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08312451420702331, 0.3288499321417911, -2.2531679208750246, -0.17252472165623656]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_888",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6594145816022214, 71.77274042874978, 0.30833848751822246, -28928.356198125588]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6594145816022214, 71.77274042874978, 0.30833848751822246, -28928.356198125588]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_889",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.9875430462593457, -4.081179765372045, 0.27542978412376, -7.873624858492821]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.9875430462593457, -4.081179765372045, 0.27542978412376, -7.873624858492821]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_890",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1739493226500238, -23.27822319352947, -0.4963639703280043, -646797.7605628016]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1739493226500238, -23.27822319352947, -0.4963639703280043, -646797.7605628016]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_891",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7943650245317887, -0.16774699362617537, -0.506950520950595, 129736.86391549032]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7943650245317887, -0.16774699362617537, -0.506950520950595, 129736.86391549032]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_892",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08171906452017781, -3.2827294482714002, 218.6999524352066, -2.2144696551616896]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08171906452017781, -3.2827294482714002, 218.6999524352066, -2.2144696551616896]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_893",
    "sat": "def sat(x: float, coeffs: List[float]=[0.19830114947177457, -125.90380586217877, 1.3933669808120595, 5.3551795579047345]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.19830114947177457, -125.90380586217877, 1.3933669808120595, 5.3551795579047345]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_894",
    "sat": "def sat(x: float, coeffs: List[float]=[1.834319259821778, 3.466295548358587, 1.2430241214614517, -2101299.9930810663]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.834319259821778, 3.466295548358587, 1.2430241214614517, -2101299.9930810663]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_895",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7366397589297397, -0.4907791766948577, -3.934061497185667, 2.3297394496364574]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7366397589297397, -0.4907791766948577, -3.934061497185667, 2.3297394496364574]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_896",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.07261502712876378, -5.347097337540638, -13.623003222705309, 2894.9435300724563]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07261502712876378, -5.347097337540638, -13.623003222705309, 2894.9435300724563]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_897",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8041748411491918, -2.3235893935645047, -0.6831038339195493, 0.6062606703142965]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8041748411491918, -2.3235893935645047, -0.6831038339195493, 0.6062606703142965]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_898",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8379649584752294, 1.776208486423515, -0.10942875778416972, -0.8129195198845389]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8379649584752294, 1.776208486423515, -0.10942875778416972, -0.8129195198845389]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_899",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5892487679615077, -31.586674921027054, -2.0531061865377165, 74.03667189420317]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5892487679615077, -31.586674921027054, -2.0531061865377165, 74.03667189420317]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_900",
    "sat": "def sat(x: float, coeffs: List[float]=[0.09768329462631849, -0.3209212460380854, -0.8546014037951452, -0.004709335035950723]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09768329462631849, -0.3209212460380854, -0.8546014037951452, -0.004709335035950723]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_901",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.004789479524747, 0.01684043873196554, 0.8666461108148563, -2672.2858221106453]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.004789479524747, 0.01684043873196554, 0.8666461108148563, -2672.2858221106453]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_902",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.7219190487327525, 2.869144990507659, 99.35709051888351, -72.23780780047154]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7219190487327525, 2.869144990507659, 99.35709051888351, -72.23780780047154]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_903",
    "sat": "def sat(x: float, coeffs: List[float]=[-35.88145658286444, -0.7504344610680381, -0.12134724835998305, -8.640259641515733]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-35.88145658286444, -0.7504344610680381, -0.12134724835998305, -8.640259641515733]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_904",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1481952400512306, -1.1266395815473509, 4.105982090514587, 1.380334186684522]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1481952400512306, -1.1266395815473509, 4.105982090514587, 1.380334186684522]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_905",
    "sat": "def sat(x: float, coeffs: List[float]=[4.52552238100088, -1.3458023010801756, 4.530069945988446, 0.6777713838442729]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.52552238100088, -1.3458023010801756, 4.530069945988446, 0.6777713838442729]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_906",
    "sat": "def sat(x: float, coeffs: List[float]=[348.995687621978, -7.171936251322218, 0.4817683952255544, -10.295144611047853]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[348.995687621978, -7.171936251322218, 0.4817683952255544, -10.295144611047853]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_907",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8289777152508955, 0.6443244827501061, 0.16792400925555487, -0.004981320507062001]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8289777152508955, 0.6443244827501061, 0.16792400925555487, -0.004981320507062001]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_908",
    "sat": "def sat(x: float, coeffs: List[float]=[1.5944038118173738, -0.06902168202081212, -10.036350219952775, 3.5639052319225133]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5944038118173738, -0.06902168202081212, -10.036350219952775, 3.5639052319225133]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_909",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1257549453766121, 0.19576553028425234, -4.065190988071537, 0.4799129668758181]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1257549453766121, 0.19576553028425234, -4.065190988071537, 0.4799129668758181]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_910",
    "sat": "def sat(x: float, coeffs: List[float]=[63.102821627966826, 3.983090547133802, -0.023243262347052207, 0.030561440009045718]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[63.102821627966826, 3.983090547133802, -0.023243262347052207, 0.030561440009045718]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_911",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3014539086259244, 0.3501565681377807, -0.2788951828904262, 0.006494943865829967]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3014539086259244, 0.3501565681377807, -0.2788951828904262, 0.006494943865829967]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_912",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.22860966614302147, -4.338399845989601, -25.13887301690355, 22.21612243160114]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.22860966614302147, -4.338399845989601, -25.13887301690355, 22.21612243160114]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_913",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.340110504149975, 6.410029048462371, -0.9432430039609541, 205.86712015747037]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.340110504149975, 6.410029048462371, -0.9432430039609541, 205.86712015747037]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_914",
    "sat": "def sat(x: float, coeffs: List[float]=[2.197628015473089, 18.399075378061593, -2.413512187870803, -174.4231966179878]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.197628015473089, 18.399075378061593, -2.413512187870803, -174.4231966179878]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_915",
    "sat": "def sat(x: float, coeffs: List[float]=[6.149388175068451, -4.6643431985099655, -0.31304382156139066, 0.025108236085798867]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.149388175068451, -4.6643431985099655, -0.31304382156139066, 0.025108236085798867]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_916",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5939097826175624, 0.5194789831641945, 0.9588400923330197, 0.49297303025073014]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5939097826175624, 0.5194789831641945, 0.9588400923330197, 0.49297303025073014]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_917",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.09403104799348139, 2.4835013533727874, -2.208447864569114, -0.3393895611291969]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09403104799348139, 2.4835013533727874, -2.208447864569114, -0.3393895611291969]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_918",
    "sat": "def sat(x: float, coeffs: List[float]=[1.3532498303257103, 1.0458099420433475, -0.842944287377751, -233.74367712592144]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3532498303257103, 1.0458099420433475, -0.842944287377751, -233.74367712592144]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_919",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.6048457552144935, -0.10801274056321002, 0.34133434287755327, -0.43499711502373245]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6048457552144935, -0.10801274056321002, 0.34133434287755327, -0.43499711502373245]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_920",
    "sat": "def sat(x: float, coeffs: List[float]=[-55.950937224306664, 18.83602474541613, -1.050710704276255, -13.787748477598782]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-55.950937224306664, 18.83602474541613, -1.050710704276255, -13.787748477598782]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_921",
    "sat": "def sat(x: float, coeffs: List[float]=[-64.99226547828003, 37.302245796472214, 3.1661572059309773, -4408.488283033689]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-64.99226547828003, 37.302245796472214, 3.1661572059309773, -4408.488283033689]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_922",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.06845614997971354, 1.7545608319534642, 0.15657458859608467, -2.4609054979291973]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06845614997971354, 1.7545608319534642, 0.15657458859608467, -2.4609054979291973]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_923",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.1780221155488055, 10.867155813485022, 1.9727893881006935, -7.836135753869499]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.1780221155488055, 10.867155813485022, 1.9727893881006935, -7.836135753869499]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_924",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6806879317331948, -0.031033875921308907, -34.93841182327788, 55.76188820402214]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6806879317331948, -0.031033875921308907, -34.93841182327788, 55.76188820402214]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_925",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.569006141379628, 0.5328458149210492, -3.037517699844757, 2106762.032857354]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.569006141379628, 0.5328458149210492, -3.037517699844757, 2106762.032857354]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_926",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05972352282500223, -5.728928976803282, 0.4026393258798307, 0.11033817092858447]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05972352282500223, -5.728928976803282, 0.4026393258798307, 0.11033817092858447]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_927",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.5363962415225747, 0.6809774474940281, 7.509542380587736, -947372843.2637779]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.5363962415225747, 0.6809774474940281, 7.509542380587736, -947372843.2637779]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_928",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1858612709609236, -0.10908832275830312, -261.918709090072, -22.230725935113625]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1858612709609236, -0.10908832275830312, -261.918709090072, -22.230725935113625]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_929",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3820839058538126, -0.1467960506697686, -1.1995672354566491, 0.06754024014636396]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3820839058538126, -0.1467960506697686, -1.1995672354566491, 0.06754024014636396]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_930",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1855045092776976, 0.09726816673512695, -0.7437985995526549, 0.029388978963480167]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1855045092776976, 0.09726816673512695, -0.7437985995526549, 0.029388978963480167]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_931",
    "sat": "def sat(x: float, coeffs: List[float]=[80.6794279814456, -0.22972784043367947, -3.1739644009814154, 27022480.821422506]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[80.6794279814456, -0.22972784043367947, -3.1739644009814154, 27022480.821422506]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_932",
    "sat": "def sat(x: float, coeffs: List[float]=[0.09559874082356856, 2.6439177360853763, -5.9377789076880445, -38.692754041699025]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09559874082356856, 2.6439177360853763, -5.9377789076880445, -38.692754041699025]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_933",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7700738672897818, -0.7198264117598331, 0.1977089656119806, 197.61125354376233]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7700738672897818, -0.7198264117598331, 0.1977089656119806, 197.61125354376233]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_934",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.5107105489698223, 3.1678896330485373, 2.6259790098358162, -1.8095167167199815]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5107105489698223, 3.1678896330485373, 2.6259790098358162, -1.8095167167199815]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_935",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.200577701440157, 0.1189761963000715, -0.15251528501033862, 242.11402413222118]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.200577701440157, 0.1189761963000715, -0.15251528501033862, 242.11402413222118]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_936",
    "sat": "def sat(x: float, coeffs: List[float]=[32.967598783748606, -0.09199537811061982, 2.8593972573107336, -13042769.76798015]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[32.967598783748606, -0.09199537811061982, 2.8593972573107336, -13042769.76798015]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_937",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.15762944514259902, -27.833505121024825, 0.18772196887068682, 2.984475508507773]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.15762944514259902, -27.833505121024825, 0.18772196887068682, 2.984475508507773]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_938",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6223339674477835, 0.24918093879653247, 0.34062969716697394, -35360.044236902715]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6223339674477835, 0.24918093879653247, 0.34062969716697394, -35360.044236902715]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_939",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.9959275500181946, -1.6517931887783106, -0.06527096549003031, -8646.40932075845]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.9959275500181946, -1.6517931887783106, -0.06527096549003031, -8646.40932075845]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_940",
    "sat": "def sat(x: float, coeffs: List[float]=[-36.170841452219996, 47.96515872067449, 39.897184514736125, 86323.66781384975]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-36.170841452219996, 47.96515872067449, 39.897184514736125, 86323.66781384975]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_941",
    "sat": "def sat(x: float, coeffs: List[float]=[3.5789978924360315, -12.06343965740845, -504.42591338168836, 280.92209516509905]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.5789978924360315, -12.06343965740845, -504.42591338168836, 280.92209516509905]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_942",
    "sat": "def sat(x: float, coeffs: List[float]=[-27.333393699037842, -0.8525356801499496, 1.4678714726508104, 15793.557421833892]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-27.333393699037842, -0.8525356801499496, 1.4678714726508104, 15793.557421833892]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_943",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1674799266556045, -20.345649279152607, 0.085964727622638, 1.2947034299678173]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1674799266556045, -20.345649279152607, 0.085964727622638, 1.2947034299678173]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_944",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05742859559114851, 4.797605156245176, -0.2797072612212021, -6.648813298862402]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05742859559114851, 4.797605156245176, -0.2797072612212021, -6.648813298862402]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_945",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.04875633785985056, -0.0462012085414217, -0.19763321643296017, -0.1216912457839423]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04875633785985056, -0.0462012085414217, -0.19763321643296017, -0.1216912457839423]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_946",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.034746805655915626, 1.1954310125464256, -7.435248571666544, 3.7213096544246462]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.034746805655915626, 1.1954310125464256, -7.435248571666544, 3.7213096544246462]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_947",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.162558010367818, 42.346542295192386, -0.20572648848010333, -2.122939156428821]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.162558010367818, 42.346542295192386, -0.20572648848010333, -2.122939156428821]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_948",
    "sat": "def sat(x: float, coeffs: List[float]=[0.023370843320701457, -1.3418155435120342, -2.908870762513624, -0.8979383278377068]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.023370843320701457, -1.3418155435120342, -2.908870762513624, -0.8979383278377068]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_949",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.12384926169160582, 1.2232685923482298, -0.55574179258914, -0.13632475304997566]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.12384926169160582, 1.2232685923482298, -0.55574179258914, -0.13632475304997566]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_950",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2855015352359469, 0.3766010220187425, 0.4501298171134052, -3236.9987920385224]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2855015352359469, 0.3766010220187425, 0.4501298171134052, -3236.9987920385224]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_951",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.168189863637957, -57.309853031642966, 14.076315045072704, 0.7076074885365076]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.168189863637957, -57.309853031642966, 14.076315045072704, 0.7076074885365076]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_952",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7488503240293678, 0.9737368383403876, -10.009586435561346, 0.1546669631730217]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7488503240293678, 0.9737368383403876, -10.009586435561346, 0.1546669631730217]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_953",
    "sat": "def sat(x: float, coeffs: List[float]=[1.462643326156689, -94.21568082903816, -0.07163956935106675, 1.8149866429047836]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.462643326156689, -94.21568082903816, -0.07163956935106675, 1.8149866429047836]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_954",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.532586389113134, 2.615484857993137, 0.6416770649625835, 191491.00356271927]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.532586389113134, 2.615484857993137, 0.6416770649625835, 191491.00356271927]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_955",
    "sat": "def sat(x: float, coeffs: List[float]=[2.1628883007243513, -0.16027176959114353, -25.51760612804243, 6.054642710616758]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1628883007243513, -0.16027176959114353, -25.51760612804243, 6.054642710616758]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_956",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7867303310725754, -0.12065126122254588, 0.024627257605912334, -281.44692802006784]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7867303310725754, -0.12065126122254588, 0.024627257605912334, -281.44692802006784]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_957",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.04197514856705409, -2.66674960502212, 32.63344542240673, -4.59732706204586]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04197514856705409, -2.66674960502212, 32.63344542240673, -4.59732706204586]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_958",
    "sat": "def sat(x: float, coeffs: List[float]=[1.9458652787950772, 0.4273821005979248, 0.38601228110497177, -0.38979727080685367]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9458652787950772, 0.4273821005979248, 0.38601228110497177, -0.38979727080685367]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_959",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4055386358509345, 1.002824019579738, -15.305374337115497, 316.4505266421782]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4055386358509345, 1.002824019579738, -15.305374337115497, 316.4505266421782]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_960",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.43967566898645377, 0.08286957599483102, 16.71764229944304, 15.784197692113608]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.43967566898645377, 0.08286957599483102, 16.71764229944304, 15.784197692113608]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_961",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.419040674495447, 0.2309916443433707, -0.6108510205761754, -16.35117603949845]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.419040674495447, 0.2309916443433707, -0.6108510205761754, -16.35117603949845]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_962",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7953682176484441, 0.04072948709714604, 1.4407159170090342, 26.050725473175994]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7953682176484441, 0.04072948709714604, 1.4407159170090342, 26.050725473175994]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_963",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06710261569754687, 0.9970328026466153, 111.13502631030882, 9.4340008815136]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06710261569754687, 0.9970328026466153, 111.13502631030882, 9.4340008815136]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_964",
    "sat": "def sat(x: float, coeffs: List[float]=[0.04527663864934069, 0.17051029554736194, 6.719643640048634, 15.342364570966797]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04527663864934069, 0.17051029554736194, 6.719643640048634, 15.342364570966797]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_965",
    "sat": "def sat(x: float, coeffs: List[float]=[0.46442843092911784, 0.5543695763965711, -0.7416027635018904, -946.4158049359348]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.46442843092911784, 0.5543695763965711, -0.7416027635018904, -946.4158049359348]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_966",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3972680131308339, 0.32945750334560464, -9.932630344718072, -9.606269263094894]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3972680131308339, 0.32945750334560464, -9.932630344718072, -9.606269263094894]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_967",
    "sat": "def sat(x: float, coeffs: List[float]=[-8.052342772620355, -0.4524971376188261, -0.8633671317256933, -4.424873444112808]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.052342772620355, -0.4524971376188261, -0.8633671317256933, -4.424873444112808]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_968",
    "sat": "def sat(x: float, coeffs: List[float]=[8.806545520588214, -11.914176162594714, -0.06588700623473238, 0.035751677434188806]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.806545520588214, -11.914176162594714, -0.06588700623473238, 0.035751677434188806]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_969",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3048794208074797, 0.47648733559607886, 0.5671688055391266, 0.08739077904446388]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3048794208074797, 0.47648733559607886, 0.5671688055391266, 0.08739077904446388]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_970",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6849174973793359, -0.7166364007931371, 0.3004613497251702, -0.6579880516537386]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6849174973793359, -0.7166364007931371, 0.3004613497251702, -0.6579880516537386]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_971",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.166908066228731, -0.30911332799176017, 0.841327354942604, 59.92062727041132]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.166908066228731, -0.30911332799176017, 0.841327354942604, 59.92062727041132]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_972",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3139587875585905, 58.582055127315265, 0.031974911625571645, -2189.395762002984]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3139587875585905, 58.582055127315265, 0.031974911625571645, -2189.395762002984]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_973",
    "sat": "def sat(x: float, coeffs: List[float]=[28.97400227691692, -0.11867907285530414, 0.45370277203516124, -8.193296059756005]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[28.97400227691692, -0.11867907285530414, 0.45370277203516124, -8.193296059756005]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_974",
    "sat": "def sat(x: float, coeffs: List[float]=[0.23271031042135512, -0.8303203272915954, 112.96228209805469, 99607.94249009651]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.23271031042135512, -0.8303203272915954, 112.96228209805469, 99607.94249009651]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_975",
    "sat": "def sat(x: float, coeffs: List[float]=[89.38065019415008, 0.8772560855591931, 0.3522596057352412, -30.70513025747384]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[89.38065019415008, 0.8772560855591931, 0.3522596057352412, -30.70513025747384]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_976",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2321589542647032, -0.9449580126698748, 0.266073869702193, 0.012975654651131263]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2321589542647032, -0.9449580126698748, 0.266073869702193, 0.012975654651131263]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_977",
    "sat": "def sat(x: float, coeffs: List[float]=[-17.3512467872278, 1.0860590404106958, 177.47079898399292, -63.88838707187103]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.3512467872278, 1.0860590404106958, 177.47079898399292, -63.88838707187103]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_978",
    "sat": "def sat(x: float, coeffs: List[float]=[30.633662120257515, -1.6769873936982387, 0.8809471937108942, 1.8258393764950325]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[30.633662120257515, -1.6769873936982387, 0.8809471937108942, 1.8258393764950325]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_979",
    "sat": "def sat(x: float, coeffs: List[float]=[0.19221994070265333, -281.3783322202847, 2.7848264801001044, 58266.75114660358]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.19221994070265333, -281.3783322202847, 2.7848264801001044, 58266.75114660358]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_980",
    "sat": "def sat(x: float, coeffs: List[float]=[126.69413284430196, 25.376618576590857, -4.0326685809491805, -19844587.303132612]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[126.69413284430196, 25.376618576590857, -4.0326685809491805, -19844587.303132612]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_981",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3181989864744952, 0.024002462800527164, 19.767762162040878, 20.212523509564207]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3181989864744952, 0.024002462800527164, 19.767762162040878, 20.212523509564207]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_982",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3076412707166345, 0.7427724656836672, 1.5522590469826152, -0.0359884770180828]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3076412707166345, 0.7427724656836672, 1.5522590469826152, -0.0359884770180828]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_983",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5651358927089768, -936.394142676745, -1.9165326281424708, 19.26272685928617]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5651358927089768, -936.394142676745, -1.9165326281424708, 19.26272685928617]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_984",
    "sat": "def sat(x: float, coeffs: List[float]=[0.44052168929487817, -4.159985107483706, -127.57104991818738, -320.9341579519573]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.44052168929487817, -4.159985107483706, -127.57104991818738, -320.9341579519573]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_985",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5362832277627266, 0.05492746333037143, -13.958812764274768, -110.87444483508563]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5362832277627266, 0.05492746333037143, -13.958812764274768, -110.87444483508563]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_986",
    "sat": "def sat(x: float, coeffs: List[float]=[113.81888681485252, 1.4250386239433823, 0.03922238416693302, -0.002441140449461406]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[113.81888681485252, 1.4250386239433823, 0.03922238416693302, -0.002441140449461406]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_987",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.13788851244461964, -0.5190030155173697, -24.98275784999247, -162.79880179835067]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.13788851244461964, -0.5190030155173697, -24.98275784999247, -162.79880179835067]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_988",
    "sat": "def sat(x: float, coeffs: List[float]=[0.39093451199559875, -0.16432873951208435, -2.991404280558713, -3569.7195391442337]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.39093451199559875, -0.16432873951208435, -2.991404280558713, -3569.7195391442337]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_989",
    "sat": "def sat(x: float, coeffs: List[float]=[2.2097342009271186, -0.04433609428215098, 13.916498398499291, -22.239452737258933]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2097342009271186, -0.04433609428215098, 13.916498398499291, -22.239452737258933]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_990",
    "sat": "def sat(x: float, coeffs: List[float]=[0.26203815995459584, -3.4359059519800486, 0.304238461403661, 1.5528687973006736]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.26203815995459584, -3.4359059519800486, 0.304238461403661, 1.5528687973006736]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_991",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.44041955072303357, 2.999717807204666, -4.181315375287815, -1.9303044853160944]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.44041955072303357, 2.999717807204666, -4.181315375287815, -1.9303044853160944]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_992",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2709222520054968, -103.41413615708025, 0.7921510222226247, 78.06035589120611]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2709222520054968, -103.41413615708025, 0.7921510222226247, 78.06035589120611]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_993",
    "sat": "def sat(x: float, coeffs: List[float]=[6.12605632129587, -2.6651745796509787, -0.19769605312073138, 8.13419188033119]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.12605632129587, -2.6651745796509787, -0.19769605312073138, 8.13419188033119]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_994",
    "sat": "def sat(x: float, coeffs: List[float]=[17.31985718922974, -0.9747261759653837, -0.47206835769088107, 49638128.68307932]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[17.31985718922974, -0.9747261759653837, -0.47206835769088107, 49638128.68307932]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_995",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.562892056127581, 0.1056826892340732, -0.15008848969988367, 8116.99559133566]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.562892056127581, 0.1056826892340732, -0.15008848969988367, 8116.99559133566]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_996",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2674426394998601, -0.7613657233619074, -0.47018702488429104, -201.6427189848542]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2674426394998601, -0.7613657233619074, -0.47018702488429104, -201.6427189848542]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_997",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8282065151667588, -54.036545140301065, -3.9809103969619497, 8.944118992852026]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8282065151667588, -54.036545140301065, -3.9809103969619497, 8.944118992852026]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_998",
    "sat": "def sat(x: float, coeffs: List[float]=[8.579717021037881, 74.62219439851917, 0.015584893678739201, -0.4399552536588701]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.579717021037881, 74.62219439851917, 0.015584893678739201, -0.4399552536588701]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_999",
    "sat": "def sat(x: float, coeffs: List[float]=[1.6619099050960537, 0.8727057415767184, 88.5144718059509, 50142.96938091754]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6619099050960537, 0.8727057415767184, 88.5144718059509, 50142.96938091754]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "AllCubicRoots_0",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.0, -2.0, -1.0]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0, -2.0, -1.0]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_1",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.9792928861776984, 2.133038730163511, 1.638138878943189]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.9792928861776984, 2.133038730163511, 1.638138878943189]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_2",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[13.354831072884561, -4.595025525483049, -2.4264677936411747]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.354831072884561, -4.595025525483049, -2.4264677936411747]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_3",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.34016642063764496, -0.17124300520980765, -0.019472435680922565]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.34016642063764496, -0.17124300520980765, -0.019472435680922565]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_4",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.865189014481809, 1.1515812489611212, 0.3070462657668704]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.865189014481809, 1.1515812489611212, 0.3070462657668704]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_5",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.567612587999834, -0.4012469353764956, -0.2997271514299456]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.567612587999834, -0.4012469353764956, -0.2997271514299456]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_6",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.982539223250326, -3.918349070812101, -0.10332535387891573]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.982539223250326, -3.918349070812101, -0.10332535387891573]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_7",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-64.07087694397408, -247.643171505104, -93.7193566883485]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-64.07087694397408, -247.643171505104, -93.7193566883485]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_8",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3945560905084002, -0.32787674961027524, -0.0004560777800547628]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3945560905084002, -0.32787674961027524, -0.0004560777800547628]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_9",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.120490226020043, -3.5223093810804205, -10.496774412546113]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.120490226020043, -3.5223093810804205, -10.496774412546113]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_10",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.997898013797645, -345.52848806176377, -456.1520060128552]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.997898013797645, -345.52848806176377, -456.1520060128552]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_11",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[25.447058186118433, 4.516415320357527, 0.12546322703815252]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[25.447058186118433, 4.516415320357527, 0.12546322703815252]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_12",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[121.82738447553828, -337.46379876892235, -9.7274511458453]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[121.82738447553828, -337.46379876892235, -9.7274511458453]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_13",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[565.4454413943097, 1166.2446613770053, -4334.991506764034]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[565.4454413943097, 1166.2446613770053, -4334.991506764034]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_14",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.70004742809613, 13.539189981268517, 1.609182871940161]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.70004742809613, 13.539189981268517, 1.609182871940161]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_15",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.06853305367880846, -0.0011484634553493005, 8.028261671183427e-05]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06853305367880846, -0.0011484634553493005, 8.028261671183427e-05]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_16",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[851.0401452859464, 929.1942735871786, 47.95967235891291]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[851.0401452859464, 929.1942735871786, 47.95967235891291]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_17",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.01411350684084, -4.3245504709037546, -0.037590060982678794]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.01411350684084, -4.3245504709037546, -0.037590060982678794]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_18",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[21.132457906148957, 34.04384920297547, -13.985219957717659]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[21.132457906148957, 34.04384920297547, -13.985219957717659]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_19",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.2155646300654315, 4.326107006982201, -0.20214025585733258]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.2155646300654315, 4.326107006982201, -0.20214025585733258]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_20",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[27.553488742352776, -184.48650285223357, 4.582914649028079]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[27.553488742352776, -184.48650285223357, 4.582914649028079]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_21",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.0915369246312667, -13.686743827822884, 3.7146997382998865]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0915369246312667, -13.686743827822884, 3.7146997382998865]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_22",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-19.44521653814666, 81.76089434227328, -7.633564146571142]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-19.44521653814666, 81.76089434227328, -7.633564146571142]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_23",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-122.08603367671093, 251.19298991974682, -61.69472552358477]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-122.08603367671093, 251.19298991974682, -61.69472552358477]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_24",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.102528582883837, 4.858654191323344, 1.3352804729236443]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.102528582883837, 4.858654191323344, 1.3352804729236443]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_25",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-94.07513019255644, -855.0917552320228, -372.20778256018633]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-94.07513019255644, -855.0917552320228, -372.20778256018633]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_26",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.256872571461347, 3.0598277883216465, -0.7015920224386273]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.256872571461347, 3.0598277883216465, -0.7015920224386273]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_27",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.191346915277059, 4.645515642313135, -1.0415797684390349]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.191346915277059, 4.645515642313135, -1.0415797684390349]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_28",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.2712408009205505, 0.04823123358570447, -0.21460108723862667]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.2712408009205505, 0.04823123358570447, -0.21460108723862667]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_29",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.27845842775253227, -0.10288476169488928, 0.02134573960767683]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.27845842775253227, -0.10288476169488928, 0.02134573960767683]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_30",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5023328327272101, -0.3827580157169722, -0.03807917796703567]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5023328327272101, -0.3827580157169722, -0.03807917796703567]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_31",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.417705317989665, 12.155708423967425, 5.6933795173078385]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.417705317989665, 12.155708423967425, 5.6933795173078385]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_32",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.65107989527837, 6.183797134221933, -0.2660501498809262]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.65107989527837, 6.183797134221933, -0.2660501498809262]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_33",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.4592911311686234, -21.110029059540828, 74.79048592371984]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.4592911311686234, -21.110029059540828, 74.79048592371984]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_34",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.9123805019996696, 0.9028241369931439, 0.00804197162397921]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9123805019996696, 0.9028241369931439, 0.00804197162397921]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_35",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.393727329497608, -32.68340274368746, -225.6538197472894]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.393727329497608, -32.68340274368746, -225.6538197472894]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_36",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[20.56454261212476, 0.8217236290907183, 0.007347976965643563]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[20.56454261212476, 0.8217236290907183, 0.007347976965643563]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_37",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[20.994952028973405, -2.832819333157458, 0.009468091699958102]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[20.994952028973405, -2.832819333157458, 0.009468091699958102]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_38",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.35445744662657486, -2.740181133854775, -0.3906612537563862]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.35445744662657486, -2.740181133854775, -0.3906612537563862]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_39",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-442.37079107970544, -110.48625654075363, 921.87375320189]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-442.37079107970544, -110.48625654075363, 921.87375320189]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_40",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-45.75323220711127, 258.5323265109321, 22.556501028341668]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-45.75323220711127, 258.5323265109321, 22.556501028341668]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_41",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-27.735435982979435, 38.97033616698016, -14.053827740923523]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-27.735435982979435, 38.97033616698016, -14.053827740923523]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_42",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.957861169875728, 1.782771464326183, 0.008574998849452021]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.957861169875728, 1.782771464326183, 0.008574998849452021]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_43",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-479.90352143611057, -1679.8474972907513, -1337.359256543296]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-479.90352143611057, -1679.8474972907513, -1337.359256543296]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_44",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-374.7413219623194, 6407.974517165827, -9848.3971689709]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-374.7413219623194, 6407.974517165827, -9848.3971689709]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_45",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.078909918741696, 1.7499136222556047, 0.24933568902141873]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.078909918741696, 1.7499136222556047, 0.24933568902141873]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_46",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[238.23863588038196, 15069.166325018834, 104099.58732952437]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[238.23863588038196, 15069.166325018834, 104099.58732952437]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_47",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.364149543037948, 7.5507498772975685, -1.0482605946748886]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.364149543037948, 7.5507498772975685, -1.0482605946748886]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_48",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.8369780825588904, -3.1550617189128793, -0.22799916024744601]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8369780825588904, -3.1550617189128793, -0.22799916024744601]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_49",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4020891278278337, -0.05121819586996271, 0.003315320583618754]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4020891278278337, -0.05121819586996271, 0.003315320583618754]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_50",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.2309529342212548, -15.210037908863654, -7.499110710479451]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2309529342212548, -15.210037908863654, -7.499110710479451]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_51",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.822602196326009, 2.794799264197099, 0.20268216572402542]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.822602196326009, 2.794799264197099, 0.20268216572402542]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_52",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.660591251915737, 2.053375867691893, 1.4731309323532307]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.660591251915737, 2.053375867691893, 1.4731309323532307]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_53",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.0659632668009533, -1.702040373954345, -0.1568995275346956]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.0659632668009533, -1.702040373954345, -0.1568995275346956]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_54",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-361.3691293077617, -2736.010607310696, -3249.719619191526]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-361.3691293077617, -2736.010607310696, -3249.719619191526]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_55",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.81316684277757, -3.7860097073142063, -3.739186397704977]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.81316684277757, -3.7860097073142063, -3.739186397704977]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_56",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.071967370388041, -41.65243483582845, -4.614137718061123]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.071967370388041, -41.65243483582845, -4.614137718061123]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_57",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.44791664378563434, -0.4693365208847811, -0.2125823397164578]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.44791664378563434, -0.4693365208847811, -0.2125823397164578]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_58",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.552981595543532, 11.798155982851162, -1.9286660492493457]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.552981595543532, 11.798155982851162, -1.9286660492493457]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_59",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[14.547384769049575, 9.386647430727464, 0.8698930479624285]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.547384769049575, 9.386647430727464, 0.8698930479624285]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_60",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.0963187629540836, 0.33643595395949993, 0.07129410930145498]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0963187629540836, 0.33643595395949993, 0.07129410930145498]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_61",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[13.860646110258086, 10.225056813628575, -0.297912743574803]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.860646110258086, 10.225056813628575, -0.297912743574803]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_62",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.637792990531758, -0.8224594404514731, -0.024390860491142845]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.637792990531758, -0.8224594404514731, -0.024390860491142845]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_63",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-697.360437588791, 200.9227322271655, -10.003032179618387]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-697.360437588791, 200.9227322271655, -10.003032179618387]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_64",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-54.014707886161055, -212.2754776087196, 7.182780281745898]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-54.014707886161055, -212.2754776087196, 7.182780281745898]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_65",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-20.090963196174236, 83.08521414548665, -2.636123647925288]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-20.090963196174236, 83.08521414548665, -2.636123647925288]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_66",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.45339053993182543, -2.4513477486290904, 0.9161220706095138]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.45339053993182543, -2.4513477486290904, 0.9161220706095138]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_67",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.0444892954998144, 1.7163469144521484, 0.15450628934079993]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.0444892954998144, 1.7163469144521484, 0.15450628934079993]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_68",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.826233948822558, -2.034319055308826, 0.1420176085374108]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.826233948822558, -2.034319055308826, 0.1420176085374108]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_69",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[25.71798539324458, -72.10067769338087, 32.407876771035106]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[25.71798539324458, -72.10067769338087, 32.407876771035106]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_70",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.11018288894096082, -0.640194393996657, 0.11863370761452555]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11018288894096082, -0.640194393996657, 0.11863370761452555]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_71",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.13274305609951, 5.572288937861223, -0.2931491511335296]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.13274305609951, 5.572288937861223, -0.2931491511335296]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_72",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.013849100741126, -4.215996545419127, 0.16012508925298896]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.013849100741126, -4.215996545419127, 0.16012508925298896]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_73",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-173.311636435834, 6950.497481042264, -14690.649036831708]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-173.311636435834, 6950.497481042264, -14690.649036831708]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_74",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3914056395887946, 0.32425295348929456, -0.0033144967604788996]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3914056395887946, 0.32425295348929456, -0.0033144967604788996]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_75",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.129016267528622, -0.3785625771714711, -1.1486304535926373]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.129016267528622, -0.3785625771714711, -1.1486304535926373]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_76",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[43.48122686015224, 196.74586576762232, 224.7766183076256]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[43.48122686015224, 196.74586576762232, 224.7766183076256]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_77",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.4369502274555652, 0.42894653157254903, -0.019158871738102986]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4369502274555652, 0.42894653157254903, -0.019158871738102986]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_78",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.608258725145385, 3.3144389637072305, -3.5010503570104805]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.608258725145385, 3.3144389637072305, -3.5010503570104805]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_79",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.5242830815974944, 0.38193711930723606, 0.026343210331930884]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5242830815974944, 0.38193711930723606, 0.026343210331930884]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_80",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.76803916272231, 25.167006992924147, -23.614422548972975]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.76803916272231, 25.167006992924147, -23.614422548972975]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_81",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[166.33732036858862, -16919.776738000226, 78395.87545034132]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[166.33732036858862, -16919.776738000226, 78395.87545034132]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_82",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-25.537608733542235, 2.110880823489344, -0.043684014543955235]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-25.537608733542235, 2.110880823489344, -0.043684014543955235]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_83",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.5881879864276733, 0.7739710390678517, 0.04219617694714976]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.5881879864276733, 0.7739710390678517, 0.04219617694714976]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_84",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[20.79195356838883, 56.6118676560653, -2.18104154069958]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[20.79195356838883, 56.6118676560653, -2.18104154069958]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_85",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.4379715745111765, -13.731459069837506, 1.1829063221221376]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.4379715745111765, -13.731459069837506, 1.1829063221221376]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_86",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.2698463535094526, -0.8807246320722831, -0.07783588905187175]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2698463535094526, -0.8807246320722831, -0.07783588905187175]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_87",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[114.7699896145902, 196.8458064874385, 30.669281819106892]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[114.7699896145902, 196.8458064874385, 30.669281819106892]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_88",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.2614185124006845, -280.0478353782809, -563.2843826512667]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2614185124006845, -280.0478353782809, -563.2843826512667]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_89",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.63697173609061, -4.145389755593486, -1.1258424919392538]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.63697173609061, -4.145389755593486, -1.1258424919392538]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_90",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1180121686700593, -1.200132277296978, -0.12785676031603824]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1180121686700593, -1.200132277296978, -0.12785676031603824]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_91",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-18.13758815656298, -93.85877678563969, -104.38897811059324]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.13758815656298, -93.85877678563969, -104.38897811059324]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_92",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-124.03413817521174, -136.69858727775602, 79.7237741065699]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-124.03413817521174, -136.69858727775602, 79.7237741065699]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_93",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-73.77472597014658, -873.71512374043, -23.11618763575392]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-73.77472597014658, -873.71512374043, -23.11618763575392]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_94",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-102.62351466685817, 187.92442456102714, 2539.833486818836]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-102.62351466685817, 187.92442456102714, 2539.833486818836]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_95",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.619208713500441, -12.460791391010945, -44.197204207319736]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.619208713500441, -12.460791391010945, -44.197204207319736]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_96",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.06808133263732, 17.487267758605675, 5.197330782830872]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.06808133263732, 17.487267758605675, 5.197330782830872]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_97",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-811.3771612222025, 3505.077702291159, -1664.5638690477958]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-811.3771612222025, 3505.077702291159, -1664.5638690477958]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_98",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.943629148958892, -7.950777342121585, -2.7156584260765055]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.943629148958892, -7.950777342121585, -2.7156584260765055]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_99",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6284785067569021, 0.06990738421731134, -0.00502462591372452]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6284785067569021, 0.06990738421731134, -0.00502462591372452]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_100",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.1293200526033489, -1.5442910471986646, -0.29666200422535766]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1293200526033489, -1.5442910471986646, -0.29666200422535766]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_101",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8678243542327067, 0.14458345354495367, -0.005507745640049224]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8678243542327067, 0.14458345354495367, -0.005507745640049224]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_102",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.21540554044379778, -54.83017020470064, 60.24644279994133]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.21540554044379778, -54.83017020470064, 60.24644279994133]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_103",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[31.038616668759925, -11.682533440904724, -2.309127073358882]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[31.038616668759925, -11.682533440904724, -2.309127073358882]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_104",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.014546437798507, 8.659095798214258, -2.141502166230646]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.014546437798507, 8.659095798214258, -2.141502166230646]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_105",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.23433007323744645, -0.7720580474667288, -0.04579580013756505]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.23433007323744645, -0.7720580474667288, -0.04579580013756505]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_106",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.06178306804114653, -0.4362120592616009, 0.10011920480961821]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06178306804114653, -0.4362120592616009, 0.10011920480961821]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_107",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.590729358548062, -3.42721438355582, 2.6425187229281106]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.590729358548062, -3.42721438355582, 2.6425187229281106]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_108",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.24947300485365123, -0.5080617995292108, -0.012061052545264945]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.24947300485365123, -0.5080617995292108, -0.012061052545264945]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_109",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.356291749045939, -6.015659945354784, 0.05132686376589001]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.356291749045939, -6.015659945354784, 0.05132686376589001]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_110",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.9852385938747563, 1.6652118929626616, -0.039981416055159494]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.9852385938747563, 1.6652118929626616, -0.039981416055159494]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_111",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-71.51993038424237, 1535.749008206328, -8763.852669018894]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-71.51993038424237, 1535.749008206328, -8763.852669018894]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_112",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.2383103312795467, 0.2626223666651877, 0.015418395284671305]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2383103312795467, 0.2626223666651877, 0.015418395284671305]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_113",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.634867117023045, 0.16203974082834147, 0.023743366295690252]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.634867117023045, 0.16203974082834147, 0.023743366295690252]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_114",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[24.112030908402446, -2719.9829834332727, 149.14447992815036]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[24.112030908402446, -2719.9829834332727, 149.14447992815036]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_115",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.924098160598543, 4.319620665881924, 0.43398985261751244]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.924098160598543, 4.319620665881924, 0.43398985261751244]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_116",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[38.116537644588426, 90.02044390526007, -105.6890291298025]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[38.116537644588426, 90.02044390526007, -105.6890291298025]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_117",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-30.927873753141778, 30.329769826765315, 73.12532260488676]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-30.927873753141778, 30.329769826765315, 73.12532260488676]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_118",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.413093410082425, -12.65132332564454, 5.39440054215803]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.413093410082425, -12.65132332564454, 5.39440054215803]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_119",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.159067308876576, -1.5167933057804681, -0.2838338904354331]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.159067308876576, -1.5167933057804681, -0.2838338904354331]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_120",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.8177380546126942, -2.448980897773682, -3.6525341184599665]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8177380546126942, -2.448980897773682, -3.6525341184599665]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_121",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-476.899223427368, -177.56689884900547, -16.248741372497282]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-476.899223427368, -177.56689884900547, -16.248741372497282]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_122",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-91.46694613393633, -114.64747054753175, -30.76845510633695]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-91.46694613393633, -114.64747054753175, -30.76845510633695]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_123",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-40.47308612669858, 59.99956798830531, -21.60451387824579]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-40.47308612669858, 59.99956798830531, -21.60451387824579]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_124",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.9481362106967701, 0.6313054179165407, -0.3148051453997739]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9481362106967701, 0.6313054179165407, -0.3148051453997739]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_125",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.055427052523646, 16.747542696409678, -7.870964926438324]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.055427052523646, 16.747542696409678, -7.870964926438324]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_126",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-397.37284821372793, 2674.6398253005746, 293.1683761246775]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-397.37284821372793, 2674.6398253005746, 293.1683761246775]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_127",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.3450263274004195, 2.942564747456193, 0.018544723513105286]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.3450263274004195, 2.942564747456193, 0.018544723513105286]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_128",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.7827677253756873, 0.894858776536533, 0.45206355677644594]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.7827677253756873, 0.894858776536533, 0.45206355677644594]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_129",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.2412087773090268, -0.4125732489947297, 0.08842619498635894]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2412087773090268, -0.4125732489947297, 0.08842619498635894]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_130",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.273494860633978, 40.48980957701208, -49.6589766150722]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.273494860633978, 40.48980957701208, -49.6589766150722]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_131",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[97.37786544402546, -1010.2477352325336, -150.87455233364446]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[97.37786544402546, -1010.2477352325336, -150.87455233364446]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_132",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-66.22084573412003, 1212.9259752099913, -5359.136257165349]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-66.22084573412003, 1212.9259752099913, -5359.136257165349]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_133",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.4111438056940533, 0.013914853822514214, -0.00024416419255191035]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4111438056940533, 0.013914853822514214, -0.00024416419255191035]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_134",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.243377952372546, -8.675481883816085, 0.9086858381932287]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.243377952372546, -8.675481883816085, 0.9086858381932287]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_135",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[136.7414252557583, 328.8190880736122, -3.3933733274360782]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[136.7414252557583, 328.8190880736122, -3.3933733274360782]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_136",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-29.9691447547031, 206.38085974925625, -101.13790066437429]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-29.9691447547031, 206.38085974925625, -101.13790066437429]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_137",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7318536967289617, -151.785867519865, 93.68205076534915]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7318536967289617, -151.785867519865, 93.68205076534915]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_138",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.620066959101167, 0.7995565293759844, -0.10885630210901501]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.620066959101167, 0.7995565293759844, -0.10885630210901501]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_139",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[324.2712611711471, -5530.654037524104, 20105.45095207922]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[324.2712611711471, -5530.654037524104, 20105.45095207922]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_140",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-388.1087576984205, -2940.4198861244386, 16352.566747819234]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-388.1087576984205, -2940.4198861244386, 16352.566747819234]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_141",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.355005681903077, 0.5239566158516171, 0.043029844324087144]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.355005681903077, 0.5239566158516171, 0.043029844324087144]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_142",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.16660681945285338, -5.950341487148539, -0.8740948980281092]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.16660681945285338, -5.950341487148539, -0.8740948980281092]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_143",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-374.1376593973587, 1858.6761812099446, -140.08376361344085]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-374.1376593973587, 1858.6761812099446, -140.08376361344085]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_144",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.6636572851726084, 1.1072041212902712, -0.07323434797316081]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.6636572851726084, 1.1072041212902712, -0.07323434797316081]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_145",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-167.087223104973, -2211.602811001375, -61.762881146120726]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-167.087223104973, -2211.602811001375, -61.762881146120726]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_146",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.2306128024937715, -0.13382171139129018, -0.0026320296127565535]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2306128024937715, -0.13382171139129018, -0.0026320296127565535]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_147",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[14.750502410928101, 23.475610144823026, -33.14005447690192]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.750502410928101, 23.475610144823026, -33.14005447690192]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_148",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5739508171140564, 0.0669819211226782, -0.0014066153480573526]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5739508171140564, 0.0669819211226782, -0.0014066153480573526]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_149",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5997577511252341, -2.241804288736836, -0.11113876817932451]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5997577511252341, -2.241804288736836, -0.11113876817932451]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_150",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.532325389867054, -6.806422797385847, -8.31342514176867]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.532325389867054, -6.806422797385847, -8.31342514176867]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_151",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8770453285724022, 0.1768787479952335, -0.009921007524980258]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8770453285724022, 0.1768787479952335, -0.009921007524980258]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_152",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[67.29251746597944, -1.6307021509706212, -0.056359287754689756]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[67.29251746597944, -1.6307021509706212, -0.056359287754689756]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_153",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[119.31831538052, -7.019709920992017, -0.5885749673496743]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[119.31831538052, -7.019709920992017, -0.5885749673496743]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_154",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[82.08166884210121, -1155.1882779802288, -463.80568102550285]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[82.08166884210121, -1155.1882779802288, -463.80568102550285]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_155",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[151.81291226504803, -461.2476060368195, 126.52399438741301]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[151.81291226504803, -461.2476060368195, 126.52399438741301]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_156",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.498902921240322, 8.501696276619533, 3.0229539138066417]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.498902921240322, 8.501696276619533, 3.0229539138066417]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_157",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[303.7153089649582, -212.48262649754412, 19.72976480769218]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[303.7153089649582, -212.48262649754412, 19.72976480769218]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_158",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3807734630875055, 0.3461784172052291, 0.08077144666309485]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3807734630875055, 0.3461784172052291, 0.08077144666309485]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_159",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[21.08531561695073, -29.432907638864474, 9.923541271542401]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[21.08531561695073, -29.432907638864474, 9.923541271542401]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_160",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[33.66832626089804, -13.004611674046343, -1.9015609228402492]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[33.66832626089804, -13.004611674046343, -1.9015609228402492]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_161",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-392.57155880396624, 485.2263843909305, 83.93922439383536]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-392.57155880396624, 485.2263843909305, 83.93922439383536]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_162",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.331647009974672, 1.9245497637541673, -6.244413210524103]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.331647009974672, 1.9245497637541673, -6.244413210524103]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_163",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.877156989378032, 0.19444403931845294, -0.011453025439258205]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.877156989378032, 0.19444403931845294, -0.011453025439258205]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_164",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[25.93698324141271, -608.1556797921878, -546.9636577440583]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[25.93698324141271, -608.1556797921878, -546.9636577440583]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_165",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[102.08712998397944, -837.8693726822303, -321.84844795587213]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[102.08712998397944, -837.8693726822303, -321.84844795587213]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_166",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.820864235152495, 9.588461338228353, 0.772738023685553]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.820864235152495, 9.588461338228353, 0.772738023685553]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_167",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-10.715663656706695, -2.6939832714109624, 19.333214373724026]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.715663656706695, -2.6939832714109624, 19.333214373724026]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_168",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.6175046151401662, -0.2888683289867351, 0.036170117756602504]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6175046151401662, -0.2888683289867351, 0.036170117756602504]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_169",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.40897654034362, 10.958778125158776, -2.1767749015626148]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.40897654034362, 10.958778125158776, -2.1767749015626148]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_170",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[141.41016719468408, -1437.0897773295665, 1669.8267350255878]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[141.41016719468408, -1437.0897773295665, 1669.8267350255878]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_171",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.29287692455558934, -0.097855261229194, 0.023017206442231142]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.29287692455558934, -0.097855261229194, 0.023017206442231142]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_172",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[219.97134227237714, -14.287391182897558, -2.8418400319997077]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[219.97134227237714, -14.287391182897558, -2.8418400319997077]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_173",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-579.9832665137695, 856.7749726459203, 3.534688942288924]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-579.9832665137695, 856.7749726459203, 3.534688942288924]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_174",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.09933016423140942, -0.03091293258437938, 0.00015600043678178467]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09933016423140942, -0.03091293258437938, 0.00015600043678178467]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_175",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[343.06150136559853, -34833.37928315036, -2878.9690174410034]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[343.06150136559853, -34833.37928315036, -2878.9690174410034]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_176",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[25.221404122580502, -18.26218054200777, 3.0962909916066867]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[25.221404122580502, -18.26218054200777, 3.0962909916066867]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_177",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.2022831331063144, 0.32761004980853903, 0.8889611228096754]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.2022831331063144, 0.32761004980853903, 0.8889611228096754]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_178",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-235.99203830197305, -4090.6386659927193, 1779.151722871607]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-235.99203830197305, -4090.6386659927193, 1779.151722871607]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_179",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0324310784191622, -3.267245821628287, 3.822272524054206]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0324310784191622, -3.267245821628287, 3.822272524054206]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_180",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.139890978405178, 2.7148688798936256, 0.1754718013985296]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.139890978405178, 2.7148688798936256, 0.1754718013985296]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_181",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.29526893909230306, -0.0961482361859019, 0.012334744574149696]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.29526893909230306, -0.0961482361859019, 0.012334744574149696]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_182",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3606975379870001, -4.558344249751911, -1.3695049458504314]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3606975379870001, -4.558344249751911, -1.3695049458504314]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_183",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.5757762420015748, 0.3895296216138777, -0.01578318081146892]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5757762420015748, 0.3895296216138777, -0.01578318081146892]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_184",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[86.43338622925664, 917.4324579519163, -411.69867490356137]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[86.43338622925664, 917.4324579519163, -411.69867490356137]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_185",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[283.42587640308767, 8054.291738354141, 327.0106970451931]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[283.42587640308767, 8054.291738354141, 327.0106970451931]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_186",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5395738678585342, -0.006838872535856633, -0.0052728513366142584]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5395738678585342, -0.006838872535856633, -0.0052728513366142584]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_187",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.445340478224718, 0.846984178829613, 0.36167556227974956]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.445340478224718, 0.846984178829613, 0.36167556227974956]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_188",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.2006566079946914, -0.11945149768879415, -0.5894652542002835]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.2006566079946914, -0.11945149768879415, -0.5894652542002835]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_189",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-114.72237603270618, 35.753756452976376, 0.3502472438045628]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-114.72237603270618, 35.753756452976376, 0.3502472438045628]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_190",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.157994989046528, -0.08333130720393012, 0.28999363475992407]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.157994989046528, -0.08333130720393012, 0.28999363475992407]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_191",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3989552332701193, -0.09829019361535668, -0.005041224754672398]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3989552332701193, -0.09829019361535668, -0.005041224754672398]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_192",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.684942258952849, 0.41502692248105544, 0.2470087636097337]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.684942258952849, 0.41502692248105544, 0.2470087636097337]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_193",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.1049392710935417, 2.3052397373282134, -0.005887509636525773]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.1049392710935417, 2.3052397373282134, -0.005887509636525773]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_194",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[21.459264976541775, 66.81742527348935, 42.70382104980705]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[21.459264976541775, 66.81742527348935, 42.70382104980705]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_195",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.451584758431492, -2.0343689620945518, 0.18761190500420566]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.451584758431492, -2.0343689620945518, 0.18761190500420566]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_196",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.5251841794904335, 1.8121407124060647, -0.6837251860959597]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.5251841794904335, 1.8121407124060647, -0.6837251860959597]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_197",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-22.605425279474858, 86.0243414520773, -41.95757172891723]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-22.605425279474858, 86.0243414520773, -41.95757172891723]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_198",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[182.59709343690076, -74006.69887129533, 264761.62677066383]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[182.59709343690076, -74006.69887129533, 264761.62677066383]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_199",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[127.56349289039854, -924.6507259978606, 7.700022105812846]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[127.56349289039854, -924.6507259978606, 7.700022105812846]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_200",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[64.95725448723294, 129.1047009176447, -0.3714538669275888]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[64.95725448723294, 129.1047009176447, -0.3714538669275888]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_201",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-40.75759859554385, -6.07465064198235, 1.7021134753190703]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-40.75759859554385, -6.07465064198235, 1.7021134753190703]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_202",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.326525069477702, 1.7667064545867823, 6.063183924871543]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.326525069477702, 1.7667064545867823, 6.063183924871543]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_203",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.794123516212401, 0.09597314019521526, 0.0006525021858961188]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.794123516212401, 0.09597314019521526, 0.0006525021858961188]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_204",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.7959518219242043, 1.4600188364591233, -0.2741769990214279]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.7959518219242043, 1.4600188364591233, -0.2741769990214279]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_205",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-21.466550936704234, 49.8328862126145, -25.096092562822776]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-21.466550936704234, 49.8328862126145, -25.096092562822776]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_206",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5774959096639259, -0.014420504735591035, -0.004939149558704542]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5774959096639259, -0.014420504735591035, -0.004939149558704542]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_207",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.297725200173382, 5.172688377976383, -0.7423705939582911]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.297725200173382, 5.172688377976383, -0.7423705939582911]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_208",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.9830453370234362, 1.0314776850966187, -0.1530169296421019]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9830453370234362, 1.0314776850966187, -0.1530169296421019]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_209",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[21.41170005310305, 130.57233298691614, 234.5545259734922]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[21.41170005310305, 130.57233298691614, 234.5545259734922]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_210",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-21.178152602730883, -38.202601553172, 1.9375666894884513]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-21.178152602730883, -38.202601553172, 1.9375666894884513]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_211",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3007936269177272, 0.10852189004531723, -0.0007829335387571699]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3007936269177272, 0.10852189004531723, -0.0007829335387571699]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_212",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.920770831836904, -6.741982221784731, -0.11585777847666846]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.920770831836904, -6.741982221784731, -0.11585777847666846]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_213",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-10.536506101615032, 11.024185738075474, -2.879582538827577]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.536506101615032, 11.024185738075474, -2.879582538827577]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_214",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-39.395455578939526, 186.78569747409824, -79.88011931346445]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-39.395455578939526, 186.78569747409824, -79.88011931346445]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_215",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.686507405885617, -6.5461702081525175, -34.30021081649324]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.686507405885617, -6.5461702081525175, -34.30021081649324]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_216",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.097613661641857, 0.26651334197505033, 0.018656152759737473]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.097613661641857, 0.26651334197505033, 0.018656152759737473]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_217",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.8858615403735457, 0.1591428952099846, -0.1711194752021538]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.8858615403735457, 0.1591428952099846, -0.1711194752021538]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_218",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.095108072501343, -3.376380054561907, 4.135706290102282]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.095108072501343, -3.376380054561907, 4.135706290102282]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_219",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.5547854522993845, 2.6977995976311266, -0.34094041163060373]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.5547854522993845, 2.6977995976311266, -0.34094041163060373]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_220",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.39833193237685727, -0.9857000545802896, 0.22877876210821005]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.39833193237685727, -0.9857000545802896, 0.22877876210821005]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_221",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[76.13368360321657, -359.97316477468905, 144.05312698753565]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[76.13368360321657, -359.97316477468905, 144.05312698753565]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_222",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.905435197807583, -0.6360960881921917, 0.09892719494524892]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.905435197807583, -0.6360960881921917, 0.09892719494524892]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_223",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.5139844263519233, -0.7744699555739472, 0.923637553065117]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.5139844263519233, -0.7744699555739472, 0.923637553065117]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_224",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.5320183255041897, -0.5471549250277257, 0.003288051730020799]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5320183255041897, -0.5471549250277257, 0.003288051730020799]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_225",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2625731772703301, -0.057598485319022244, 0.004999932173767403]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2625731772703301, -0.057598485319022244, 0.004999932173767403]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_226",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6178348557364626, 0.07453044470283454, -0.0015228620005840808]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6178348557364626, 0.07453044470283454, -0.0015228620005840808]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_227",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3215272517848906, 0.5223641615643562, 0.06051611873276399]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3215272517848906, 0.5223641615643562, 0.06051611873276399]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_228",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.4131406915163074, 0.449161042956983, 0.0011282315337995182]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4131406915163074, 0.449161042956983, 0.0011282315337995182]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_229",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.848638918517805, -11.50429337160457, -12.649495217385189]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.848638918517805, -11.50429337160457, -12.649495217385189]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_230",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.805675567461089, 2.266743196260173, 1.5409750072661395]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.805675567461089, 2.266743196260173, 1.5409750072661395]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_231",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.936770819753015, 8.568010749189671, -2.1975163274643315]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.936770819753015, 8.568010749189671, -2.1975163274643315]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_232",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2685571028148988, 0.01560440765013092, -0.00023742980126865615]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2685571028148988, 0.01560440765013092, -0.00023742980126865615]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_233",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[121.49163278409637, 23.491458848707918, -0.6740778571944585]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[121.49163278409637, 23.491458848707918, -0.6740778571944585]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_234",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-10.371129750083885, -58.57760708528073, 22.679545163237137]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.371129750083885, -58.57760708528073, 22.679545163237137]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_235",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-61.434273911383606, 77.75928103877254, 7119.990235349708]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-61.434273911383606, 77.75928103877254, 7119.990235349708]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_236",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.3155874618548795, 5.956885864093478, -1.1732936385991288]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.3155874618548795, 5.956885864093478, -1.1732936385991288]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_237",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.466075088536855, 5.984956276997163, -2.1642001674844913]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.466075088536855, 5.984956276997163, -2.1642001674844913]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_238",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.364272046157707, -16.693474446508134, -1.367294244362413]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.364272046157707, -16.693474446508134, -1.367294244362413]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_239",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[25.249524897193147, 152.71011977415156, 15.375369662324696]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[25.249524897193147, 152.71011977415156, 15.375369662324696]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_240",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-24.63578561574153, -23.01170461941208, -5.275912082913948]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-24.63578561574153, -23.01170461941208, -5.275912082913948]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_241",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[336.6158747839568, 320.2823299819383, 38.716472552959594]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[336.6158747839568, 320.2823299819383, 38.716472552959594]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_242",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[106.07932035403657, -48.737537608541444, 3.006001636411284]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[106.07932035403657, -48.737537608541444, 3.006001636411284]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_243",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.932497391937021, -302.07475741525894, -273.61243877812166]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.932497391937021, -302.07475741525894, -273.61243877812166]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_244",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-48.03773232758197, 637.9323945014237, -1888.3885711520807]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-48.03773232758197, 637.9323945014237, -1888.3885711520807]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_245",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.973862539244686, -55.64160037077321, 36.15727589475962]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.973862539244686, -55.64160037077321, 36.15727589475962]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_246",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5298238851601584, -24.02244336149444, 37.810338701383934]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5298238851601584, -24.02244336149444, 37.810338701383934]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_247",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.095268482611476, -7.258605430566156, -1.1569084071566489]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.095268482611476, -7.258605430566156, -1.1569084071566489]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_248",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.26206886948901, 2.2641904222070917, -0.20795378319381178]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.26206886948901, 2.2641904222070917, -0.20795378319381178]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_249",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-20.68740275452176, -44.657949798183644, 15.826346952179351]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-20.68740275452176, -44.657949798183644, 15.826346952179351]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_250",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-15.512844458131255, -16.893521657469147, 4.684551686588656]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.512844458131255, -16.893521657469147, 4.684551686588656]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_251",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.328916810478823, -9.107028607092685, 2.1221196798550745]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.328916810478823, -9.107028607092685, 2.1221196798550745]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_252",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.26109115044522, -5.640828842257802, 1.2908793328240897]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.26109115044522, -5.640828842257802, 1.2908793328240897]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_253",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.455759653612095, 6.500635280590866, -1.3322784912762278]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.455759653612095, 6.500635280590866, -1.3322784912762278]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_254",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.513959669945622, 5.977435692230992, 2.4423578398088996]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.513959669945622, 5.977435692230992, 2.4423578398088996]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_255",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.8836135804530205, -2.308855634802896, 0.5502186250399483]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8836135804530205, -2.308855634802896, 0.5502186250399483]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_256",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-13.005057509304821, 1.6216800367409405, 43.02701167829739]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.005057509304821, 1.6216800367409405, 43.02701167829739]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_257",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.106117829779654, 6.174529512165345, -0.5872591784836769]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.106117829779654, 6.174529512165345, -0.5872591784836769]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_258",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.771344521974882, -46.495292753380774, 15.112822746219337]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.771344521974882, -46.495292753380774, 15.112822746219337]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_259",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[35.93730947503371, 59.12112742177858, -1836.2075647914064]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[35.93730947503371, 59.12112742177858, -1836.2075647914064]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_260",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-20.196593788791414, -5.315832764823956, -0.31688756562312836]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-20.196593788791414, -5.315832764823956, -0.31688756562312836]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_261",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.9237998072508413, 0.6477799997699129, 0.16228737849865782]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9237998072508413, 0.6477799997699129, 0.16228737849865782]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_262",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-210.6153538718997, 742.1380552070117, -318.2559215554224]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-210.6153538718997, 742.1380552070117, -318.2559215554224]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_263",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.125698871892839, -2.036104185965954, -1.698156982272266]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.125698871892839, -2.036104185965954, -1.698156982272266]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_264",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.272139009298655, -53.003637064242255, 44.71676424961997]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.272139009298655, -53.003637064242255, 44.71676424961997]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_265",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.7360265848153524, -1.80165337771698, 0.7310472597442662]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.7360265848153524, -1.80165337771698, 0.7310472597442662]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_266",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.0944837628637223, -10.369079347870455, 4.474284291242216]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0944837628637223, -10.369079347870455, 4.474284291242216]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_267",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[28.126330982772227, -27.228536354738893, -7.577208862391339]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[28.126330982772227, -27.228536354738893, -7.577208862391339]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_268",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.888214346748937, -12.845060900936145, 1.388632664832657]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.888214346748937, -12.845060900936145, 1.388632664832657]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_269",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-105.47179638926207, -1020.8423429920006, -147.76992512250317]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-105.47179638926207, -1020.8423429920006, -147.76992512250317]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_270",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.5186324469218784, 2.1850887367168816, 0.009114488001915437]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.5186324469218784, 2.1850887367168816, 0.009114488001915437]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_271",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.292880799224026, 65.25818302001406, -12.687309428795752]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.292880799224026, 65.25818302001406, -12.687309428795752]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_272",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.47556276740368897, 0.04112437236284176, -0.0032868672511420613]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.47556276740368897, 0.04112437236284176, -0.0032868672511420613]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_273",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[220.34721613598197, -271.1984855171078, -852.3745180543674]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[220.34721613598197, -271.1984855171078, -852.3745180543674]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_274",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.37522807756630205, -0.025833703769673935, -0.013449671389162499]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.37522807756630205, -0.025833703769673935, -0.013449671389162499]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_275",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.4943235476671664, -16.743401440344737, 1.5742531243628488]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.4943235476671664, -16.743401440344737, 1.5742531243628488]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_276",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8342977975459888, -0.6404345930411492, -0.36331338369866784]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8342977975459888, -0.6404345930411492, -0.36331338369866784]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_277",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.826052061934357, -10.340580620943221, 0.8707955245680359]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.826052061934357, -10.340580620943221, 0.8707955245680359]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_278",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[47.945729039505586, -1329.3096955884237, -87.5624362708695]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[47.945729039505586, -1329.3096955884237, -87.5624362708695]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_279",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.018055035760832, 3.5562898567217593, 0.5992829717457184]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.018055035760832, 3.5562898567217593, 0.5992829717457184]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_280",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[32.26241057153086, 116.60456419110905, -37.78111738037305]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[32.26241057153086, 116.60456419110905, -37.78111738037305]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_281",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4355718980753248, -0.07518483267223518, 7.827258105682585e-05]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4355718980753248, -0.07518483267223518, 7.827258105682585e-05]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_282",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6159621835697797, -1.3769878194129967, 0.8372019862147381]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6159621835697797, -1.3769878194129967, 0.8372019862147381]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_283",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7409208926420829, -0.2981490833191047, -0.17749276347985404]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7409208926420829, -0.2981490833191047, -0.17749276347985404]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_284",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[55.38590466434417, 764.3989975619728, 31.19435316071934]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[55.38590466434417, 764.3989975619728, 31.19435316071934]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_285",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.5988147398560755, -1.2043449781298181, -0.7601499880928657]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.5988147398560755, -1.2043449781298181, -0.7601499880928657]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_286",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.912294588302697, 0.7938453115958531, -0.10276128675217958]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.912294588302697, 0.7938453115958531, -0.10276128675217958]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_287",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.48035351320258, 0.8951038893422516, -0.01963899276947167]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.48035351320258, 0.8951038893422516, -0.01963899276947167]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_288",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.63750651339534, -28.86749878615644, -12.042870947258264]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.63750651339534, -28.86749878615644, -12.042870947258264]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_289",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-29.467543092628883, 102.2173343557518, -15.484222478493285]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-29.467543092628883, 102.2173343557518, -15.484222478493285]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_290",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-38.518015181959996, -251.04321782896392, 29.35912869335118]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-38.518015181959996, -251.04321782896392, 29.35912869335118]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_291",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-81.10918365943027, 983.0300806987133, -3039.08192359962]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-81.10918365943027, 983.0300806987133, -3039.08192359962]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_292",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-10.389600543031893, -0.015980382421264316, 3.3341789524597814]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.389600543031893, -0.015980382421264316, 3.3341789524597814]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_293",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5762936179048294, -0.08268317512616713, -0.03603034713232703]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5762936179048294, -0.08268317512616713, -0.03603034713232703]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_294",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.511685389570331, -0.6313253175864582, -0.03459288195648012]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.511685389570331, -0.6313253175864582, -0.03459288195648012]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_295",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-42.15639869780264, 287.5147452774799, 95.34660771256819]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-42.15639869780264, 287.5147452774799, 95.34660771256819]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_296",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.7255685343319036, -9.712068947306665, -0.9652265638133434]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.7255685343319036, -9.712068947306665, -0.9652265638133434]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_297",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.8705715625935135, 1.55836325697914, -0.15274091623305874]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.8705715625935135, 1.55836325697914, -0.15274091623305874]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_298",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.987550138912045, 21.858609449305334, 2.9253581936566846]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.987550138912045, 21.858609449305334, 2.9253581936566846]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_299",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[41.18038279120743, -456.7726456273812, -58.14795169422385]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[41.18038279120743, -456.7726456273812, -58.14795169422385]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_300",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.21219683008735, 2.885306098013082, -0.32027400818472845]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.21219683008735, 2.885306098013082, -0.32027400818472845]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_301",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-44.030962053542524, 420.0938361193416, 1120.850857627818]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-44.030962053542524, 420.0938361193416, 1120.850857627818]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_302",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-13.399320489726694, 6.8593619786896705, -0.8894678366695253]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.399320489726694, 6.8593619786896705, -0.8894678366695253]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_303",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-30.95729682510853, -460.93766982575954, -386.9559912281789]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-30.95729682510853, -460.93766982575954, -386.9559912281789]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_304",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[77.39821225462335, 123.05066362959042, -124.58571026580165]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[77.39821225462335, 123.05066362959042, -124.58571026580165]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_305",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.548414643411978, 1.2600988246261502, 0.2791444248707754]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.548414643411978, 1.2600988246261502, 0.2791444248707754]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_306",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4298879488929013, -0.15652155010425234, 0.04541032107809846]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4298879488929013, -0.15652155010425234, 0.04541032107809846]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_307",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.91049547662654, -23.24440330514696, 17.563855417701074]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.91049547662654, -23.24440330514696, 17.563855417701074]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_308",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-112.4343919171571, -51.174046240188616, -2.922613971155813]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-112.4343919171571, -51.174046240188616, -2.922613971155813]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_309",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.013030950412259, 3.462175479011017, -0.16034583996514107]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.013030950412259, 3.462175479011017, -0.16034583996514107]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_310",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.2998153118007236, -16.527902121012538, -0.552970000418868]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2998153118007236, -16.527902121012538, -0.552970000418868]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_311",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3284120667056981, -1.6847380076185554, -0.859397199211694]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3284120667056981, -1.6847380076185554, -0.859397199211694]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_312",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[82.13191644072563, -1222.4215760278494, -138.00788732975658]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[82.13191644072563, -1222.4215760278494, -138.00788732975658]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_313",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8677397660989157, -2.3433995876336593, 2.3312354409895932]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8677397660989157, -2.3433995876336593, 2.3312354409895932]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_314",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.28230707938765554, -0.7560786264327674, -0.1994589316853874]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.28230707938765554, -0.7560786264327674, -0.1994589316853874]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_315",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.576484385602798, 6.83529420710881, 0.23426901288864077]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.576484385602798, 6.83529420710881, 0.23426901288864077]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_316",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.850374678834931, -3.1736012232751802, -1.4818355835396517]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.850374678834931, -3.1736012232751802, -1.4818355835396517]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_317",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[759.1537278863834, 28761.975630243312, -46307.623903481996]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[759.1537278863834, 28761.975630243312, -46307.623903481996]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_318",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.9879055396375961, -0.06276950026258919, -0.0018891021242115876]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9879055396375961, -0.06276950026258919, -0.0018891021242115876]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_319",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.953616809712639, 5.79475123990007, -0.3631310910273578]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.953616809712639, 5.79475123990007, -0.3631310910273578]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_320",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.109485342669212, 0.35952330665809773, 0.03579875021331545]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.109485342669212, 0.35952330665809773, 0.03579875021331545]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_321",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-54.74468454930789, -80.2112890850089, -18.075780271391608]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-54.74468454930789, -80.2112890850089, -18.075780271391608]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_322",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[34.176750516363526, 216.54296980876234, 250.92899074117048]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[34.176750516363526, 216.54296980876234, 250.92899074117048]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_323",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.8898283868955086, -1.9231298747382204, 0.13084066875488196]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.8898283868955086, -1.9231298747382204, 0.13084066875488196]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_324",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.8481505805438316, 3.6424363747007176, -0.6474270443020418]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.8481505805438316, 3.6424363747007176, -0.6474270443020418]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_325",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.604707232043028, 6.8301873657671885, -0.6528282602897221]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.604707232043028, 6.8301873657671885, -0.6528282602897221]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_326",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.9237127116899835, 9.087592081521853, 1.2001679654522064]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.9237127116899835, 9.087592081521853, 1.2001679654522064]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_327",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7653424338663899, -0.8187987810347511, -0.07327797935563032]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7653424338663899, -0.8187987810347511, -0.07327797935563032]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_328",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.862696427625, 48.81671154538026, -55.09189281342965]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.862696427625, 48.81671154538026, -55.09189281342965]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_329",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[55.58431928280192, 23.412477336078418, 2.1387521778305283]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[55.58431928280192, 23.412477336078418, 2.1387521778305283]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_330",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[720.7308269541999, 347.31839215760243, -473.5588814337145]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[720.7308269541999, 347.31839215760243, -473.5588814337145]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_331",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.739874245555786, 16.353678518807925, -10.422523759100722]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.739874245555786, 16.353678518807925, -10.422523759100722]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_332",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.47914918896766945, -0.6155187523998517, -0.09430171775138962]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.47914918896766945, -0.6155187523998517, -0.09430171775138962]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_333",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.867098815770882, -0.4315425686837099, 0.048234234717832794]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.867098815770882, -0.4315425686837099, 0.048234234717832794]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_334",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.2021117618427934, 0.22551983240726184, 0.08269270165612219]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2021117618427934, 0.22551983240726184, 0.08269270165612219]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_335",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.9767072606830034, 2.4134754128856377, 0.5294764120743635]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.9767072606830034, 2.4134754128856377, 0.5294764120743635]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_336",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.6087327374913296, 0.7536239954879759, 0.1087710951742116]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6087327374913296, 0.7536239954879759, 0.1087710951742116]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_337",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.009504785643273, -525.7188510625438, -1135.364558430126]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.009504785643273, -525.7188510625438, -1135.364558430126]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_338",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-13.23034963079039, -31.183201373035246, 6.9904991620222825]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.23034963079039, -31.183201373035246, 6.9904991620222825]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_339",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-26.558750337879555, -0.46553346482742275, 0.4096286026183022]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-26.558750337879555, -0.46553346482742275, 0.4096286026183022]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_340",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4996513731157611, -0.2667173514153085, -0.07599813762175885]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4996513731157611, -0.2667173514153085, -0.07599813762175885]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_341",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9456270441561992, -0.15802212866943, -0.005839046541915587]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9456270441561992, -0.15802212866943, -0.005839046541915587]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_342",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.9270788752014867, 0.9999330713145571, 0.1364014304965783]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9270788752014867, 0.9999330713145571, 0.1364014304965783]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_343",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-17.399254059872398, -26.708054431908916, 0.2919811734342616]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.399254059872398, -26.708054431908916, 0.2919811734342616]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_344",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-29.48807694411287, 252.91424943585622, -634.1828731883058]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-29.48807694411287, 252.91424943585622, -634.1828731883058]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_345",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-18.822649932546593, -36.40686132238065, 0.1503732149638207]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.822649932546593, -36.40686132238065, 0.1503732149638207]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_346",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.759129043584526, 3.7668711484139887, -0.3882195222332783]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.759129043584526, 3.7668711484139887, -0.3882195222332783]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_347",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8873141963574441, 0.12914176169675312, 0.027427523709486784]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8873141963574441, 0.12914176169675312, 0.027427523709486784]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_348",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.398877958186028, -80.71978914189046, -18.193543776733453]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.398877958186028, -80.71978914189046, -18.193543776733453]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_349",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-70.47590676260621, -1367.6955266520858, 94.63912701031757]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-70.47590676260621, -1367.6955266520858, 94.63912701031757]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_350",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1499143819942614, -13.234000551815576, 7.610522743568081]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1499143819942614, -13.234000551815576, 7.610522743568081]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_351",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.2904416818931663, 0.007845148442219396, -0.8337399690908114]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.2904416818931663, 0.007845148442219396, -0.8337399690908114]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_352",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.583308904965506, 51.35357554447087, -39.357078877980896]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.583308904965506, 51.35357554447087, -39.357078877980896]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_353",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.794796494687755, 49.33843916983162, 6.173622532322335]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.794796494687755, 49.33843916983162, 6.173622532322335]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_354",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.141183032818148, 7.348309953275617, -1.002257011106235]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.141183032818148, 7.348309953275617, -1.002257011106235]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_355",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[27.661467283686928, -137.46648226009412, -135.49637445122514]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[27.661467283686928, -137.46648226009412, -135.49637445122514]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_356",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.780848133233405, 9.651458995852629, 74.43229441785861]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.780848133233405, 9.651458995852629, 74.43229441785861]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_357",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.160449103105917, 1.1269245667983658, 0.007648112667132995]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.160449103105917, 1.1269245667983658, 0.007648112667132995]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_358",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.462525572549866, -2.921377339713576, 0.09802222963459045]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.462525572549866, -2.921377339713576, 0.09802222963459045]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_359",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4628958642376947, -0.4670452549411474, -0.2258029024816256]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4628958642376947, -0.4670452549411474, -0.2258029024816256]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_360",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.14732886807537, -10.075544855686637, 0.05506199395975377]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.14732886807537, -10.075544855686637, 0.05506199395975377]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_361",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.6691463047914, -24.909879172264752, -36.52909741495526]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.6691463047914, -24.909879172264752, -36.52909741495526]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_362",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8236671351699405, -0.19965117156650042, -0.048160540683518806]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8236671351699405, -0.19965117156650042, -0.048160540683518806]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_363",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.646311024580946, -43.75022369084682, 31.097048417476735]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.646311024580946, -43.75022369084682, 31.097048417476735]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_364",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.66650906090062, -5.421557734814482, -0.09978195233094997]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.66650906090062, -5.421557734814482, -0.09978195233094997]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_365",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.929411857845801, -4.9742620399568445, -0.10879743589813633]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.929411857845801, -4.9742620399568445, -0.10879743589813633]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_366",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.678818634451731, 1.2006567090888043, -0.31607151879180667]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.678818634451731, 1.2006567090888043, -0.31607151879180667]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_367",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[155.96258212015297, -763.0135409256322, -862.7783870596073]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[155.96258212015297, -763.0135409256322, -862.7783870596073]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_368",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.1101084683966373, -0.8275712694773087, -0.5398510556823581]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1101084683966373, -0.8275712694773087, -0.5398510556823581]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_369",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-40.56293341254048, 12.441424653565404, -0.9183858501097465]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-40.56293341254048, 12.441424653565404, -0.9183858501097465]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_370",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.922530349784971, -1.7266352245584917, 0.010196680499667437]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.922530349784971, -1.7266352245584917, 0.010196680499667437]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_371",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.746864746287716, 18.00617318896877, -2.321733211637311]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.746864746287716, 18.00617318896877, -2.321733211637311]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_372",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.268664970925209, -0.12745949277896484, -0.000741060501887483]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.268664970925209, -0.12745949277896484, -0.000741060501887483]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_373",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[537.1652288954728, 2387.174512037496, 166.5096408032908]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[537.1652288954728, 2387.174512037496, 166.5096408032908]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_374",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.8602319322595868, -3.231111038815506, -0.4109006716647563]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8602319322595868, -3.231111038815506, -0.4109006716647563]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_375",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.796663226641407, 88.65603818666611, -145.52510521140275]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.796663226641407, 88.65603818666611, -145.52510521140275]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_376",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[138.9502821791886, -101.73136119892902, 17.986964928633995]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[138.9502821791886, -101.73136119892902, 17.986964928633995]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_377",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-160.63640942191824, -372.74574870247966, -12.294895849111112]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-160.63640942191824, -372.74574870247966, -12.294895849111112]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_378",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.119646255091812, -2.3295705312606936, -0.4855517768757838]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.119646255091812, -2.3295705312606936, -0.4855517768757838]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_379",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[44.35952100393139, -1886.7938499991426, 97.86290880582797]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[44.35952100393139, -1886.7938499991426, 97.86290880582797]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_380",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.154759912646357, -54.38779521015898, 10.439105204681542]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.154759912646357, -54.38779521015898, 10.439105204681542]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_381",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.5142311614862447, -0.16232112435857163, 0.019934360397633175]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5142311614862447, -0.16232112435857163, 0.019934360397633175]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_382",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.5288213191310578, -0.49013659294245243, 0.004585516639223842]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5288213191310578, -0.49013659294245243, 0.004585516639223842]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_383",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.851106399542931, -6.721337001138295, 1.844960476067108]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.851106399542931, -6.721337001138295, 1.844960476067108]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_384",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-69.30207789001858, 256.6979370008486, -237.4807558752526]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-69.30207789001858, 256.6979370008486, -237.4807558752526]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_385",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.38749227530638825, -0.03789338735659463, 0.0019336777551602847]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.38749227530638825, -0.03789338735659463, 0.0019336777551602847]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_386",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-44.90311224889589, -50.204785053469806, -13.687499233354107]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-44.90311224889589, -50.204785053469806, -13.687499233354107]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_387",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.726720701915788, -0.3078877308922922, -0.0035776721307802612]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.726720701915788, -0.3078877308922922, -0.0035776721307802612]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_388",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4955012352452872, -0.7234235204036504, 0.2811039561697923]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4955012352452872, -0.7234235204036504, 0.2811039561697923]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_389",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.958036397888364, 1.1870333765233467, 2.962840961599493]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.958036397888364, 1.1870333765233467, 2.962840961599493]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_390",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6231455884872672, -0.22826449259572107, -0.04770908644638808]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6231455884872672, -0.22826449259572107, -0.04770908644638808]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_391",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.500961537428672, -4.5417417594848555, 2.227899656967324]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.500961537428672, -4.5417417594848555, 2.227899656967324]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_392",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[30.570243370580336, -33.452909996793856, -8.000833984630756]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[30.570243370580336, -33.452909996793856, -8.000833984630756]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_393",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[316.6404347523615, 4.723127575293319, -118.26980224106227]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[316.6404347523615, 4.723127575293319, -118.26980224106227]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_394",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.5178533945287054, 0.2375651482967266, -0.07378396217751652]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.5178533945287054, 0.2375651482967266, -0.07378396217751652]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_395",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.891392777764978, 1.7734685402338595, 0.015428503280976677]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.891392777764978, 1.7734685402338595, 0.015428503280976677]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_396",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.3404547548823755, -1.7530556396810437, 0.11503559813579617]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.3404547548823755, -1.7530556396810437, 0.11503559813579617]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_397",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.580612182459447, 74.5474084790095, 101.55318588700875]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.580612182459447, 74.5474084790095, 101.55318588700875]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_398",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.276538249036312, 2.751165976918534, 0.1256081084838716]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.276538249036312, 2.751165976918534, 0.1256081084838716]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_399",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7360351000684072, -0.6177066472940913, -0.3730281599254041]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7360351000684072, -0.6177066472940913, -0.3730281599254041]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_400",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.6274655840922403, -1.9499128938683914, 2.018007461674615]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.6274655840922403, -1.9499128938683914, 2.018007461674615]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_401",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.1650317294635615, 0.13730097025600813, 0.033876820998580415]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.1650317294635615, 0.13730097025600813, 0.033876820998580415]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_402",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[39.980736438700625, 253.71023397768928, 28.420391690274244]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[39.980736438700625, 253.71023397768928, 28.420391690274244]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_403",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.46095239120728293, -0.720961668578415, -0.09074893886827567]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.46095239120728293, -0.720961668578415, -0.09074893886827567]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_404",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[49.946004048462775, -6.029845711730173, -0.5707645238888827]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[49.946004048462775, -6.029845711730173, -0.5707645238888827]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_405",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.4054678100974822, 1.9995666808849544, 0.8178823663451594]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.4054678100974822, 1.9995666808849544, 0.8178823663451594]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_406",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[195.2093706169105, -191.04707966123365, 42.94199904011594]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[195.2093706169105, -191.04707966123365, 42.94199904011594]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_407",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[199.83338193533623, 3122.307967879843, -49.17956449574378]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[199.83338193533623, 3122.307967879843, -49.17956449574378]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_408",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.08521281138830494, -0.07471926403292262, 0.005683802948539797]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08521281138830494, -0.07471926403292262, 0.005683802948539797]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_409",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[29.83616608882719, -26.56751519920661, -97.39237699547212]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[29.83616608882719, -26.56751519920661, -97.39237699547212]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_410",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[34.838835573905584, 236.64094595661192, -1161.2182191958723]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[34.838835573905584, 236.64094595661192, -1161.2182191958723]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_411",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5126475395966019, -1.1952131068825, 0.4621519648714862]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5126475395966019, -1.1952131068825, 0.4621519648714862]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_412",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[74.62289792010213, -47.74722183050998, 2.272821832233825]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[74.62289792010213, -47.74722183050998, 2.272821832233825]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_413",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.674789872818582, -205.6683535826348, -396.3030004177046]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.674789872818582, -205.6683535826348, -396.3030004177046]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_414",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-132.3339859518826, 1189.2978261676612, -295.2690544005024]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-132.3339859518826, 1189.2978261676612, -295.2690544005024]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_415",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7325964907656728, 0.04503024608497665, 0.008962561603688624]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7325964907656728, 0.04503024608497665, 0.008962561603688624]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_416",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-13.73885696938786, 40.12059856043166, 16.514679033023306]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.73885696938786, 40.12059856043166, 16.514679033023306]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_417",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.837199186364402, -0.7567043049632278, 1.0436019124415483]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.837199186364402, -0.7567043049632278, 1.0436019124415483]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_418",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.555983466801914, 5.58485145474358, -2.0684907286826926]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.555983466801914, 5.58485145474358, -2.0684907286826926]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_419",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.4955381306625215, 3.3958354831216027, -0.6284770440731691]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.4955381306625215, 3.3958354831216027, -0.6284770440731691]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_420",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.826017790929118, 1.0591709866915695, 0.1952307628304041]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.826017790929118, 1.0591709866915695, 0.1952307628304041]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_421",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[23.911002398092105, 3.3609369245499523, -0.4013989983201342]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[23.911002398092105, 3.3609369245499523, -0.4013989983201342]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_422",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[23.977687809954446, -25.87352843669568, 5.245898922365783]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[23.977687809954446, -25.87352843669568, 5.245898922365783]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_423",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3275783569060837, -0.2242728561611411, 0.01405152161233243]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3275783569060837, -0.2242728561611411, 0.01405152161233243]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_424",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-413.2773014535967, -357.92828145711684, 1.8632503839699623]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-413.2773014535967, -357.92828145711684, 1.8632503839699623]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_425",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.159965655533512, -11.377677845337722, -2.66481430532242]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.159965655533512, -11.377677845337722, -2.66481430532242]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_426",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.038403916729375195, -0.004760391845498524, 4.121933044105039e-05]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.038403916729375195, -0.004760391845498524, 4.121933044105039e-05]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_427",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[31.84421036747918, 71.72188759018364, -104.49358077267709]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[31.84421036747918, 71.72188759018364, -104.49358077267709]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_428",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-69.51647105477134, 51.574766529503336, 861.828290501794]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-69.51647105477134, 51.574766529503336, 861.828290501794]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_429",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-35.4554068488859, -13709.83672208926, 680.9225556689456]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-35.4554068488859, -13709.83672208926, 680.9225556689456]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_430",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-38.902702542042746, 419.4989722027185, -1265.85569247633]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-38.902702542042746, 419.4989722027185, -1265.85569247633]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_431",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.28529017455270955, -0.4887550636460695, -0.1125052200932053]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.28529017455270955, -0.4887550636460695, -0.1125052200932053]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_432",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[34.712780526812224, 168.23903983617936, 24.23721441204177]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[34.712780526812224, 168.23903983617936, 24.23721441204177]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_433",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.6379975616809426, -1.706764140303731, -0.19983337417826025]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.6379975616809426, -1.706764140303731, -0.19983337417826025]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_434",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-376.05624137004406, 32491.347362662553, 59842.257232459415]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-376.05624137004406, 32491.347362662553, 59842.257232459415]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_435",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.2033977256680535, -5.140932221655746, -0.7305990114670249]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.2033977256680535, -5.140932221655746, -0.7305990114670249]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_436",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.335769366156764, 16.6233830466365, 0.15063131674083463]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.335769366156764, 16.6233830466365, 0.15063131674083463]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_437",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-270.9910386862404, -203.60982701833944, 126.98915781641021]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-270.9910386862404, -203.60982701833944, 126.98915781641021]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_438",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.5337251107777559, -0.017851803790063347, 0.05719325332442114]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5337251107777559, -0.017851803790063347, 0.05719325332442114]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_439",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.17714460264060308, -0.029105562767350136, -0.0007484060709971025]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17714460264060308, -0.029105562767350136, -0.0007484060709971025]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_440",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.28998262401478403, -6.570096110253454, 0.1990204127509822]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.28998262401478403, -6.570096110253454, 0.1990204127509822]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_441",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.959390245378663, 7.045329553974461, -1.3272014889114063]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.959390245378663, 7.045329553974461, -1.3272014889114063]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_442",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-113.24175798779724, -19.5536104466554, 1.4873123016490652]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-113.24175798779724, -19.5536104466554, 1.4873123016490652]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_443",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.186371307773697, -140.06697886466662, -123.77413127818438]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.186371307773697, -140.06697886466662, -123.77413127818438]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_444",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.335512682382802, 10.795305738370963, 3.140498994178762]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.335512682382802, 10.795305738370963, 3.140498994178762]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_445",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.755899323919751, 20.98961274848192, 3.603715079498978]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.755899323919751, 20.98961274848192, 3.603715079498978]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_446",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.2431920002247947, -0.8485258583717679, 0.7826319156416435]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2431920002247947, -0.8485258583717679, 0.7826319156416435]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_447",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.66331218721002, -2.37711766500598, -0.14251527962786498]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.66331218721002, -2.37711766500598, -0.14251527962786498]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_448",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.944745055885904, 5.84247646120346, -0.12129641289270904]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.944745055885904, 5.84247646120346, -0.12129641289270904]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_449",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.189900931370505, -36.99106934520673, 51.44753181604803]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.189900931370505, -36.99106934520673, 51.44753181604803]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_450",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-15.495400716844978, 53.64726913563692, -28.07322097478574]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.495400716844978, 53.64726913563692, -28.07322097478574]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_451",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-27.19949151649798, 30.806073871064033, 15.749520043711215]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-27.19949151649798, 30.806073871064033, 15.749520043711215]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_452",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.1308517374568763, 0.5193180636450803, 0.21306077984418476]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.1308517374568763, 0.5193180636450803, 0.21306077984418476]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_453",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.55743106888252, -18.747539516150265, 8.55087291674318]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.55743106888252, -18.747539516150265, 8.55087291674318]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_454",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[53.70968125704744, -221.3471347499351, 216.9500710581903]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[53.70968125704744, -221.3471347499351, 216.9500710581903]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_455",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-72.28638908269835, -216.0215071999828, -99.92898730350859]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-72.28638908269835, -216.0215071999828, -99.92898730350859]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_456",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.821767121855427, 1.1493528917307703, 0.4004140686739597]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.821767121855427, 1.1493528917307703, 0.4004140686739597]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_457",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.082049823842901, 13.775400052453179, -0.15795415800873264]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.082049823842901, 13.775400052453179, -0.15795415800873264]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_458",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.553992237881086, 0.9315428616429053, 1.2195406609866783]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.553992237881086, 0.9315428616429053, 1.2195406609866783]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_459",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.562480336751971, 34.00706178551167, -3.3789423396214557]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.562480336751971, 34.00706178551167, -3.3789423396214557]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_460",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3508170929232015, -2.0395628668232995, 0.22780923940492298]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3508170929232015, -2.0395628668232995, 0.22780923940492298]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_461",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.06445381241992, 0.6983983509945483, -0.22600534658641813]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.06445381241992, 0.6983983509945483, -0.22600534658641813]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_462",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.17697638888466374, -0.022271453351976698, -0.0037576050880688432]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17697638888466374, -0.022271453351976698, -0.0037576050880688432]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_463",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-10.944181686484843, 24.602131984426265, 17.222104424108885]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.944181686484843, 24.602131984426265, 17.222104424108885]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_464",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[386.7797333399696, 1218.1864432345455, 948.3068746508762]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[386.7797333399696, 1218.1864432345455, 948.3068746508762]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_465",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-43.81995794073962, -400.5056349748581, -760.0220075494668]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-43.81995794073962, -400.5056349748581, -760.0220075494668]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_466",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[137.03688018193495, 38.235489193423675, -4.831098201745572]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[137.03688018193495, 38.235489193423675, -4.831098201745572]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_467",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.5966500529624685, -10.013550533197906, 2.0856425120367716]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.5966500529624685, -10.013550533197906, 2.0856425120367716]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_468",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.762596033140826, 0.44482826814159476, 0.005134574423353793]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.762596033140826, 0.44482826814159476, 0.005134574423353793]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_469",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.014941325516945, 0.7934545937141783, -0.0853610123769995]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.014941325516945, 0.7934545937141783, -0.0853610123769995]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_470",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2698360433976783, 0.004491956444603647, 0.001037697371375652]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2698360433976783, 0.004491956444603647, 0.001037697371375652]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_471",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[18.134400754929665, 72.0071138455179, -4.2060267700509675]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[18.134400754929665, 72.0071138455179, -4.2060267700509675]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_472",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.3738445122367, -1.0482206151554883, -0.0363365793438064]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.3738445122367, -1.0482206151554883, -0.0363365793438064]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_473",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[78.15001970462812, -59.69048332430291, 4.229576620172035]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[78.15001970462812, -59.69048332430291, 4.229576620172035]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_474",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-26.82856241689006, 78.46626680162639, 10.89987005027511]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-26.82856241689006, 78.46626680162639, 10.89987005027511]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_475",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.807319985424902, 23.367574197283346, -4.74049402332797]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.807319985424902, 23.367574197283346, -4.74049402332797]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_476",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[215.11483710522236, 6649.485086228595, -22472.073694674105]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[215.11483710522236, 6649.485086228595, -22472.073694674105]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_477",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-35.735064122279844, 48.90636473522778, -6.094301866943675]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-35.735064122279844, 48.90636473522778, -6.094301866943675]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_478",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-17.162321635903375, 15.881885175682822, -1.0617224226759783]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.162321635903375, 15.881885175682822, -1.0617224226759783]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_479",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[58.724213642474254, 812.9665086125425, -0.6717275897233287]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[58.724213642474254, 812.9665086125425, -0.6717275897233287]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_480",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-65.00493311931652, 126.89042399367901, -31.833926460546518]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-65.00493311931652, 126.89042399367901, -31.833926460546518]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_481",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7019263969359422, -2.181799032236275, 0.26945118058656425]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7019263969359422, -2.181799032236275, 0.26945118058656425]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_482",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.3383852993090497, 1.640797152801493, -0.31893285174596636]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.3383852993090497, 1.640797152801493, -0.31893285174596636]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_483",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.04384208556109348, -0.0030516667595308134, -3.515871118840898e-05]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04384208556109348, -0.0030516667595308134, -3.515871118840898e-05]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_484",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[951.980356686761, -29627.438460756493, 99648.96704097363]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[951.980356686761, -29627.438460756493, 99648.96704097363]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_485",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[87.35961621828244, 117.52165764206538, 37.96136323935234]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[87.35961621828244, 117.52165764206538, 37.96136323935234]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_486",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[26.1428762657619, 111.79702700435868, -329.3106147172349]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[26.1428762657619, 111.79702700435868, -329.3106147172349]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_487",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.382714383988851, -1.0958685271533821, -0.06423125221143167]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.382714383988851, -1.0958685271533821, -0.06423125221143167]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_488",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4376075720625676, -0.7315773383586852, 0.19626388587214427]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4376075720625676, -0.7315773383586852, 0.19626388587214427]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_489",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.961676661328095, -52.07126060981082, 7.168171829344115]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.961676661328095, -52.07126060981082, 7.168171829344115]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_490",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.693045695404251, 0.1439301761038112, 0.021467575039299577]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.693045695404251, 0.1439301761038112, 0.021467575039299577]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_491",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[991.3960872005026, 93279.28732025651, 89332.6427477009]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[991.3960872005026, 93279.28732025651, 89332.6427477009]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_492",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.8009357294946535, 1.1124533561804215, -1.2504502200362002]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.8009357294946535, 1.1124533561804215, -1.2504502200362002]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_493",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.660732447067652, 0.6871582455155095, 0.0103867216111231]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.660732447067652, 0.6871582455155095, 0.0103867216111231]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_494",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.558982385206162, -10.134905504751389, 9.133945851588146]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.558982385206162, -10.134905504751389, 9.133945851588146]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_495",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.379445435703373, 15.513741503035195, 6.601296428731657]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.379445435703373, 15.513741503035195, 6.601296428731657]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_496",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.500946428391435, -33.11653311456094, -2.8858502696540644]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.500946428391435, -33.11653311456094, -2.8858502696540644]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_497",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.9440936567494065, -1.6915194132142828, -0.22229357567896793]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.9440936567494065, -1.6915194132142828, -0.22229357567896793]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_498",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-185.87038509299288, 235.72685174004943, -43.9887592604222]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-185.87038509299288, 235.72685174004943, -43.9887592604222]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_499",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.9013401244737, 24.742480366413, 4.662596845189842]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.9013401244737, 24.742480366413, 4.662596845189842]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_500",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.7728664566230545, -0.28512188174867126, -0.006371692783517637]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7728664566230545, -0.28512188174867126, -0.006371692783517637]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_501",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-51.25778934483642, -121.34709957499398, -49.69892479524089]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-51.25778934483642, -121.34709957499398, -49.69892479524089]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_502",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[17.835226058241837, 45.151090821121564, 2.3876400219186666]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[17.835226058241837, 45.151090821121564, 2.3876400219186666]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_503",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.490047442378523, -0.26954331903898904, -0.003985118378076493]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.490047442378523, -0.26954331903898904, -0.003985118378076493]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_504",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[67.37370672384598, 229.86633878070324, 29.43473749204507]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[67.37370672384598, 229.86633878070324, 29.43473749204507]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_505",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.746904886102563, 4.393541819333983, 0.7487445224626192]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.746904886102563, 4.393541819333983, 0.7487445224626192]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_506",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[22.337099989392172, 157.80804344643192, 351.6561169130337]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[22.337099989392172, 157.80804344643192, 351.6561169130337]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_507",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.1760252818510954, 0.44117077141630634, 0.052372317861750485]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1760252818510954, 0.44117077141630634, 0.052372317861750485]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_508",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2797640063937938, -0.0717840784090478, 0.006942757580526416]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2797640063937938, -0.0717840784090478, 0.006942757580526416]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_509",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.563223733788753, 2.5340092323085854, 0.16571682637470134]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.563223733788753, 2.5340092323085854, 0.16571682637470134]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_510",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4524717907865914, -0.5394009929361355, 0.07086419459230407]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4524717907865914, -0.5394009929361355, 0.07086419459230407]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_511",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.933947101063438, 0.2885822210996642, -0.029483957749191048]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.933947101063438, 0.2885822210996642, -0.029483957749191048]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_512",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.3446680885322264, -2.847453655387537, -0.029215806326938442]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.3446680885322264, -2.847453655387537, -0.029215806326938442]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_513",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.03495909831286492, -0.0016306372070862727, -7.98187009915658e-06]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03495909831286492, -0.0016306372070862727, -7.98187009915658e-06]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_514",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.99707531270158, -2.7459838023963345, 0.6520461568451099]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.99707531270158, -2.7459838023963345, 0.6520461568451099]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_515",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-31.61625710258342, 18.84047304299066, 40.12044039430962]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-31.61625710258342, 18.84047304299066, 40.12044039430962]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_516",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.846333122999305, -87.1418807419104, -121.68550486494023]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.846333122999305, -87.1418807419104, -121.68550486494023]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_517",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.31906712100519, -6.6095379428606345, 0.8675877474524192]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.31906712100519, -6.6095379428606345, 0.8675877474524192]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_518",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-221.60563493711493, 1354.2989826061266, -357.2616729856836]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-221.60563493711493, 1354.2989826061266, -357.2616729856836]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_519",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.279482544582873, -10.531851493887675, 0.8425825877947448]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.279482544582873, -10.531851493887675, 0.8425825877947448]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_520",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.9209549261302246, -0.41643761464059115, -0.023289703605765436]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9209549261302246, -0.41643761464059115, -0.023289703605765436]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_521",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.18714203980331212, -0.26596312182578613, -0.03792201384690921]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18714203980331212, -0.26596312182578613, -0.03792201384690921]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_522",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-28.264519690578954, -134.10774277291625, 55.0843051424111]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-28.264519690578954, -134.10774277291625, 55.0843051424111]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_523",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.18038101964643016, -0.44112804861450705, 0.1376758803709163]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18038101964643016, -0.44112804861450705, 0.1376758803709163]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_524",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.137719330260972, 15.178802670450573, 9.77333413082097]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.137719330260972, 15.178802670450573, 9.77333413082097]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_525",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.709524173473453, 2.4356110601749577, -0.7261449001307465]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.709524173473453, 2.4356110601749577, -0.7261449001307465]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_526",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.011264853820402, -8.687775940160057, -0.39023459529801136]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.011264853820402, -8.687775940160057, -0.39023459529801136]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_527",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[44.36774683219295, 213.58905310355607, 88.22154232674174]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[44.36774683219295, 213.58905310355607, 88.22154232674174]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_528",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-138.3766654421139, 3203.538566476461, -122.00607620330183]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-138.3766654421139, 3203.538566476461, -122.00607620330183]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_529",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.833448063285768, 19.763424435320854, -3.8795279171379624]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.833448063285768, 19.763424435320854, -3.8795279171379624]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_530",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.5876697528018018, -2.090857550476682, -0.48097832080884567]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5876697528018018, -2.090857550476682, -0.48097832080884567]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_531",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.043520533059404, 5.775964645864894, -0.6266078070637366]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.043520533059404, 5.775964645864894, -0.6266078070637366]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_532",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.0233191458005413, -1.1829686910445274, 0.0390482088983247]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.0233191458005413, -1.1829686910445274, 0.0390482088983247]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_533",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.6135164155766963, 0.6354147171786173, 0.06136003398820834]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6135164155766963, 0.6354147171786173, 0.06136003398820834]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_534",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.130572261213151, -0.46150903577117486, -0.010213619915645452]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.130572261213151, -0.46150903577117486, -0.010213619915645452]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_535",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.445272935778162, 8.581907503040286, 0.36307726484717995]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.445272935778162, 8.581907503040286, 0.36307726484717995]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_536",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.982758781841023, 6.007806546002115, 1.4770536172959006]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.982758781841023, 6.007806546002115, 1.4770536172959006]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_537",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[262.70148161189513, -1132.2331854137437, -48.81074412411704]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[262.70148161189513, -1132.2331854137437, -48.81074412411704]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_538",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.513182699085689, -0.5157393583646035, 0.10356287680342004]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.513182699085689, -0.5157393583646035, 0.10356287680342004]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_539",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-539.763912377679, -92.87175723156004, -2.155032788694407]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-539.763912377679, -92.87175723156004, -2.155032788694407]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_540",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.8292781929391677, 0.3409750250202494, 0.03923730111319773]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8292781929391677, 0.3409750250202494, 0.03923730111319773]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_541",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.4683934311178595, -3.203443391184165, -7.945675395510494]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.4683934311178595, -3.203443391184165, -7.945675395510494]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_542",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4759029611113832, -0.04038620091693545, 0.016969115844063805]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4759029611113832, -0.04038620091693545, 0.016969115844063805]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_543",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3257834505693672, -0.5213336253957843, 0.06586668601648897]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3257834505693672, -0.5213336253957843, 0.06586668601648897]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_544",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-808.6297765360068, 1242.942509342655, 66.91807719533405]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-808.6297765360068, 1242.942509342655, 66.91807719533405]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_545",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.07481496590569477, -0.4772818896266322, 0.006613841489992051]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07481496590569477, -0.4772818896266322, 0.006613841489992051]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_546",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-21.6921501576756, -29.854457711557743, -9.830279337875698]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-21.6921501576756, -29.854457711557743, -9.830279337875698]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_547",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.30588117218364114, -1.5558488954423684, 0.028297835494735777]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.30588117218364114, -1.5558488954423684, 0.028297835494735777]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_548",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-32.823515366112936, 357.8497055059545, -1296.3063652247658]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-32.823515366112936, 357.8497055059545, -1296.3063652247658]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_549",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.2700244747737097, 0.22672959491977598, -0.0032775569167082944]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2700244747737097, 0.22672959491977598, -0.0032775569167082944]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_550",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.095841130538167, -6.45711215017291, -4.824531358108698]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.095841130538167, -6.45711215017291, -4.824531358108698]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_551",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-106.20246874947968, 118.19861686620115, -29.643521844379382]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-106.20246874947968, 118.19861686620115, -29.643521844379382]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_552",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.086989293438984, 1.1819331660190833, -0.1708714612134881]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.086989293438984, 1.1819331660190833, -0.1708714612134881]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_553",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-154.06663989538805, -15.46538162684713, 4.118646091692208]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-154.06663989538805, -15.46538162684713, 4.118646091692208]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_554",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.351087207585511, 1.6899029576882754, 0.3793175858828056]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.351087207585511, 1.6899029576882754, 0.3793175858828056]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_555",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-19.436062695852204, 94.75948039388875, -35.381675839990805]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-19.436062695852204, 94.75948039388875, -35.381675839990805]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_556",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.7512284735119135, 3.4606773305897165, -0.004449708574138771]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.7512284735119135, 3.4606773305897165, -0.004449708574138771]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_557",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.056350209178786, -25.25601682094779, -3.880298534835546]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.056350209178786, -25.25601682094779, -3.880298534835546]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_558",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5329468964103173, -0.28680371002627936, -0.07239927208361167]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5329468964103173, -0.28680371002627936, -0.07239927208361167]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_559",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.2341701056010077, -1.78830388477904, 0.09876733824666951]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2341701056010077, -1.78830388477904, 0.09876733824666951]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_560",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.904692387646776, 9.388511319855068, -4.36714361777013]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.904692387646776, 9.388511319855068, -4.36714361777013]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_561",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.867249466322521, -4.017630864776946, 0.05449115712371817]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.867249466322521, -4.017630864776946, 0.05449115712371817]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_562",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.1115298155674775, -29.8321582773247, 19.24446443595852]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.1115298155674775, -29.8321582773247, 19.24446443595852]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_563",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.0156615930523545, 1.0821451248239158, -0.17447127706900553]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0156615930523545, 1.0821451248239158, -0.17447127706900553]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_564",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.32369374267364, -4.092366494751166, 7.951023517254423]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.32369374267364, -4.092366494751166, 7.951023517254423]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_565",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.678807094808018, -0.9514075834769969, 0.20308815601646452]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.678807094808018, -0.9514075834769969, 0.20308815601646452]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_566",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[14.264581265523196, -19.0794183906204, -2.718522341555888]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.264581265523196, -19.0794183906204, -2.718522341555888]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_567",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[154.81033452389212, 217.4805474932144, -93.61655196283047]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[154.81033452389212, 217.4805474932144, -93.61655196283047]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_568",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-243.8368564619274, 1856.2636695165138, 193.08559634572472]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-243.8368564619274, 1856.2636695165138, 193.08559634572472]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_569",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-47.8389151112169, -177.17075500334352, -106.9551116687775]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-47.8389151112169, -177.17075500334352, -106.9551116687775]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_570",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[33.079251578354864, 113.52888110202748, 102.17188716965393]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[33.079251578354864, 113.52888110202748, 102.17188716965393]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_571",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.607743921123657, -119.50155977473815, -126.24080411024353]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.607743921123657, -119.50155977473815, -126.24080411024353]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_572",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.903295734944921, -6.322181811988674, 0.15559495105962284]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.903295734944921, -6.322181811988674, 0.15559495105962284]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_573",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.4105142515415965, -1.4021953940517262, 1.4014370843590358]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4105142515415965, -1.4021953940517262, 1.4014370843590358]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_574",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[270.7879376526435, -63.64382682153608, -51.23921173235858]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[270.7879376526435, -63.64382682153608, -51.23921173235858]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_575",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.3051666277693075, -3.342235656710738, 0.7051621724061504]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.3051666277693075, -3.342235656710738, 0.7051621724061504]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_576",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.520224422823278, -0.6461940939456633, 0.010715938322538938]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.520224422823278, -0.6461940939456633, 0.010715938322538938]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_577",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.64786569341945, -22.721370027528238, 2.6662618610442284]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.64786569341945, -22.721370027528238, 2.6662618610442284]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_578",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8995014837283379, 0.03409932516643041, 0.004560432080253182]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8995014837283379, 0.03409932516643041, 0.004560432080253182]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_579",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.470980299590002, -10.463713244128336, 0.950937744686662]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.470980299590002, -10.463713244128336, 0.950937744686662]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_580",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[70.45343049447, -598.021981098918, -297.4514372511683]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[70.45343049447, -598.021981098918, -297.4514372511683]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_581",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.8477848772149255, -5.032436451783148, 1.0072934617559153]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.8477848772149255, -5.032436451783148, 1.0072934617559153]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_582",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.31690125448928, 30.869015824129228, 4.3904995517197]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.31690125448928, 30.869015824129228, 4.3904995517197]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_583",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[22.545691672209085, 14.219034389510458, 2.263487768515889]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[22.545691672209085, 14.219034389510458, 2.263487768515889]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_584",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.12039842078477, 69.56069722397949, 39.02686834892509]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.12039842078477, 69.56069722397949, 39.02686834892509]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_585",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.6225880250162246, -1.4834245252821872, 0.00019982767630770553]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.6225880250162246, -1.4834245252821872, 0.00019982767630770553]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_586",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.655429491201424, -1.0585270819475199, -0.15585299420629037]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.655429491201424, -1.0585270819475199, -0.15585299420629037]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_587",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.618143924812637, 52.198611804099045, -54.90209316041633]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.618143924812637, 52.198611804099045, -54.90209316041633]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_588",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8342117641955424, -0.11862383456969444, -0.09816514622149354]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8342117641955424, -0.11862383456969444, -0.09816514622149354]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_589",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0867933293021999, -0.4589982441025598, 0.4189993968041869]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0867933293021999, -0.4589982441025598, 0.4189993968041869]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_590",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-60.47054028539489, 187.619302939652, -9.35821007844113]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-60.47054028539489, 187.619302939652, -9.35821007844113]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_591",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.277710791112722, -0.7283408350537639, -2.5742849392396296]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.277710791112722, -0.7283408350537639, -2.5742849392396296]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_592",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[63.17478609894631, 7.047240891847362, 0.12361136453767183]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[63.17478609894631, 7.047240891847362, 0.12361136453767183]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_593",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-422.5010802205451, -842.324331332913, 2138.5557455376384]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-422.5010802205451, -842.324331332913, 2138.5557455376384]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_594",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-25.688199710461905, 1.305910565377979, 0.21560424407839368]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-25.688199710461905, 1.305910565377979, 0.21560424407839368]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_595",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[21.241599426456716, 10.84533214954196, -4.831892499762364]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[21.241599426456716, 10.84533214954196, -4.831892499762364]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_596",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-13.885497745880901, -2.1949651160486017, 0.21201654117703797]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.885497745880901, -2.1949651160486017, 0.21201654117703797]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_597",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.023040852639621, 33.7757506130405, 7.713654806552024]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.023040852639621, 33.7757506130405, 7.713654806552024]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_598",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.018032810437031, -1.6072085010720287, -0.11255422313709099]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.018032810437031, -1.6072085010720287, -0.11255422313709099]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_599",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.669476506549596, -6.400175187865409, 0.4198520944015581]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.669476506549596, -6.400175187865409, 0.4198520944015581]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_600",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.66701246506869, 20.55041375373855, 13.237588376238484]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.66701246506869, 20.55041375373855, 13.237588376238484]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_601",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.340461904709013, 1.8978031800040769, -0.043077229694261115]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.340461904709013, 1.8978031800040769, -0.043077229694261115]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_602",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.696318607241751, 0.1008852661749521, 0.0004946803229817038]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.696318607241751, 0.1008852661749521, 0.0004946803229817038]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_603",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-23.579317454826167, 45.59622163424082, -3.922030849893147]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-23.579317454826167, 45.59622163424082, -3.922030849893147]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_604",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.0916172539522666, -0.44439229334283115, -0.056100297791826015]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0916172539522666, -0.44439229334283115, -0.056100297791826015]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_605",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[171.389976897003, -1493.4225617589568, 3135.1762139923644]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[171.389976897003, -1493.4225617589568, 3135.1762139923644]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_606",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.881063230032497, 7.095873160657149, 3.1927235836617918]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.881063230032497, 7.095873160657149, 3.1927235836617918]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_607",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-24.207208196691646, 20.00698359155022, 2.254602065860338]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-24.207208196691646, 20.00698359155022, 2.254602065860338]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_608",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.065279276722745, 21.311552212507216, 7.8642784557811405]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.065279276722745, 21.311552212507216, 7.8642784557811405]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_609",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.5091935185221366, -4.0761079954227855, -0.7291559299044483]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5091935185221366, -4.0761079954227855, -0.7291559299044483]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_610",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-64.73139368513124, 903.4306537179712, 943.6661613544074]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-64.73139368513124, 903.4306537179712, 943.6661613544074]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_611",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[77.04344201756581, -6.149059795090608, 0.11540715630573116]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[77.04344201756581, -6.149059795090608, 0.11540715630573116]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_612",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8152615694832497, -0.01860142380571575, 0.0022167902995237658]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8152615694832497, -0.01860142380571575, 0.0022167902995237658]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_613",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[389.48256982482343, 3769.152330917579, 572.3793463633112]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[389.48256982482343, 3769.152330917579, 572.3793463633112]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_614",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.156603857117988, 0.3679923253091677, 0.5720612171667893]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.156603857117988, 0.3679923253091677, 0.5720612171667893]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_615",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.613887398967059, 34.51915093762687, 24.136504257715128]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.613887398967059, 34.51915093762687, 24.136504257715128]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_616",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-51.657466645682305, 71.14204146565345, 74.7234014087807]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-51.657466645682305, 71.14204146565345, 74.7234014087807]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_617",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[152.58233937895622, 3437.7174095146092, -1918.0680892103624]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[152.58233937895622, 3437.7174095146092, -1918.0680892103624]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_618",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-19.613131878800175, 18.049015421178318, 1.2448973732096758]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-19.613131878800175, 18.049015421178318, 1.2448973732096758]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_619",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6839158918123667, -0.1911832082771713, -0.000825153948067659]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6839158918123667, -0.1911832082771713, -0.000825153948067659]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_620",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.443728845348626, -3.4951370551592174, -2.080183187648557]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.443728845348626, -3.4951370551592174, -2.080183187648557]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_621",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.318975828489556, 9.713050431430613, 0.8205237895342732]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.318975828489556, 9.713050431430613, 0.8205237895342732]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_622",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.414362379244527, 4.140919352924443, -1.3960406190645571]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.414362379244527, 4.140919352924443, -1.3960406190645571]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_623",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.19106774522771364, 0.011111579323493282, -0.00019376349315410526]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19106774522771364, 0.011111579323493282, -0.00019376349315410526]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_624",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[128.78559995253872, 151.44679433373884, -344.11319182437484]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[128.78559995253872, 151.44679433373884, -344.11319182437484]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_625",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-40.68876730713539, 380.0971237287748, 285.9904590728733]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-40.68876730713539, 380.0971237287748, 285.9904590728733]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_626",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.8829420375062513, 0.651806122433911, 0.033619900045139345]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8829420375062513, 0.651806122433911, 0.033619900045139345]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_627",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.575760361852448, -5.180933562812472, 1.3223810760084793]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.575760361852448, -5.180933562812472, 1.3223810760084793]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_628",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[41.895237127169615, -54.639526756911195, 17.37230317288736]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[41.895237127169615, -54.639526756911195, 17.37230317288736]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_629",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3991429742406154, -0.9731397347722122, -0.09224497036476109]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3991429742406154, -0.9731397347722122, -0.09224497036476109]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_630",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[77.54809638337547, 19.808153242810164, -613.3751205506717]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[77.54809638337547, 19.808153242810164, -613.3751205506717]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_631",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.03361888070306433, -0.8611240766363915, 0.06615189478265729]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03361888070306433, -0.8611240766363915, 0.06615189478265729]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_632",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.036914248669081405, -0.15068016298786466, -0.0060296148650618945]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.036914248669081405, -0.15068016298786466, -0.0060296148650618945]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_633",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.164024709853258, 0.10157031871828953, -0.01723600431274197]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.164024709853258, 0.10157031871828953, -0.01723600431274197]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_634",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.3205497545212754, 1.907406358947382, 1.505583915243335]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.3205497545212754, 1.907406358947382, 1.505583915243335]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_635",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.000423602997021, -6.15437769216537, 1.0514368240234702]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.000423602997021, -6.15437769216537, 1.0514368240234702]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_636",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.295148757056439, 5.085166131821651, -3.1395194586869524]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.295148757056439, 5.085166131821651, -3.1395194586869524]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_637",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-33.42747677908052, 33.43318171711133, 32.09669607730631]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-33.42747677908052, 33.43318171711133, 32.09669607730631]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_638",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.230854645079887, -3.695582177217664, -1.4395391515899143]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.230854645079887, -3.695582177217664, -1.4395391515899143]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_639",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9786900193689803, -4.689840006984527, -0.1644716118388836]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9786900193689803, -4.689840006984527, -0.1644716118388836]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_640",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.496677282831256, 0.2850584117005103, -0.0826234669730904]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.496677282831256, 0.2850584117005103, -0.0826234669730904]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_641",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[42.75392395084077, -17.584365766254294, -17.18448898947256]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[42.75392395084077, -17.584365766254294, -17.18448898947256]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_642",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[170.64040568056174, -87014.2975605297, 1174222.8584978557]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[170.64040568056174, -87014.2975605297, 1174222.8584978557]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_643",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.013733934076669, -1.5443357038322367, 0.1073967746900711]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.013733934076669, -1.5443357038322367, 0.1073967746900711]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_644",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.5220535224592657, -17.3496910287089, 25.74238098121324]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.5220535224592657, -17.3496910287089, 25.74238098121324]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_645",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.9459708907468612, -0.1386408155529736, 0.003909139506600083]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9459708907468612, -0.1386408155529736, 0.003909139506600083]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_646",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.19047126333656095, -0.3904245130042534, 0.030700206477913505]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.19047126333656095, -0.3904245130042534, 0.030700206477913505]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_647",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.261986961806644, -9.620010024118375, -0.8842021927936746]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.261986961806644, -9.620010024118375, -0.8842021927936746]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_648",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[43.698888850115466, -161.50229029566222, -5.3756775889145825]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[43.698888850115466, -161.50229029566222, -5.3756775889145825]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_649",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-41.82398458305038, 26.14556868874079, -3.4242094962789147]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-41.82398458305038, 26.14556868874079, -3.4242094962789147]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_650",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.899458464659995, 1.4515367988967547, 0.9443774105168982]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.899458464659995, 1.4515367988967547, 0.9443774105168982]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_651",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.674996127712404, 0.12140566551777754, -1.2385646952282283]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.674996127712404, 0.12140566551777754, -1.2385646952282283]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_652",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[39.22378146886871, -78.1850900466924, 19.184810199480488]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[39.22378146886871, -78.1850900466924, 19.184810199480488]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_653",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-10.77643459872834, -10.144441415702339, -0.2883127522654942]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.77643459872834, -10.144441415702339, -0.2883127522654942]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_654",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-214.46691967250547, -24112.410995464066, -60989.61022629941]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-214.46691967250547, -24112.410995464066, -60989.61022629941]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_655",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.248759497465297, 11.731678768097327, 3.004006175307414]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.248759497465297, 11.731678768097327, 3.004006175307414]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_656",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-10.644702755278974, 0.9626093056368643, 0.14549086654387944]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.644702755278974, 0.9626093056368643, 0.14549086654387944]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_657",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[40.5769050740438, -24.85221288125224, 3.7480451052257915]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[40.5769050740438, -24.85221288125224, 3.7480451052257915]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_658",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.051868422892852, 46.671078420303374, 22.620900405609508]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.051868422892852, 46.671078420303374, 22.620900405609508]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_659",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[19.158491470387904, 12.611432603713471, -1.2472674138910496]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[19.158491470387904, 12.611432603713471, -1.2472674138910496]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_660",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3874037775090131, -422.94227957624736, -109.7754984292008]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3874037775090131, -422.94227957624736, -109.7754984292008]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_661",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[46.32963793973985, -144.13647918484452, 22.511476396569513]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[46.32963793973985, -144.13647918484452, 22.511476396569513]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_662",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.538532090050698, -47.067558424820334, 130.58385644250976]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.538532090050698, -47.067558424820334, 130.58385644250976]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_663",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.8839677865345212, 0.07595465315027083, 0.08280729633294419]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.8839677865345212, 0.07595465315027083, 0.08280729633294419]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_664",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.7853782913192155, 4.671736953925933, 0.032554581978986814]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.7853782913192155, 4.671736953925933, 0.032554581978986814]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_665",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.9280046364072838, -1.5927236266091682, -1.2789415573287002]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9280046364072838, -1.5927236266091682, -1.2789415573287002]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_666",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[26.697859952787628, -34.83159367386274, -8.983507590813286]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[26.697859952787628, -34.83159367386274, -8.983507590813286]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_667",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-959.0421040476818, -497.2042784462276, 4.55903874410789]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-959.0421040476818, -497.2042784462276, 4.55903874410789]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_668",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.138023395645803, 14.153530825684557, 0.7770587492184237]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.138023395645803, 14.153530825684557, 0.7770587492184237]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_669",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.37559503256389415, 0.021347957729354394, -0.0017497759279812087]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.37559503256389415, 0.021347957729354394, -0.0017497759279812087]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_670",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-26.31905836205006, 4.896181830366236, -0.22715418792083594]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-26.31905836205006, 4.896181830366236, -0.22715418792083594]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_671",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-15.013716805086439, 18.662510867192847, -4.997005558119309]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.013716805086439, 18.662510867192847, -4.997005558119309]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_672",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.913331168103692, -0.9631130466280257, 0.10005758497309894]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.913331168103692, -0.9631130466280257, 0.10005758497309894]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_673",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-141.99741220559747, 214.93125372911496, -81.55539548227716]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-141.99741220559747, 214.93125372911496, -81.55539548227716]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_674",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[124.18615547591925, 73.56299296538579, -103.00649676005717]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[124.18615547591925, 73.56299296538579, -103.00649676005717]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_675",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[36.233032527857915, 311.9234504986477, 44.89816384733439]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[36.233032527857915, 311.9234504986477, 44.89816384733439]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_676",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[111.17911754810012, 8.347508477141826, -0.31588914898285]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[111.17911754810012, 8.347508477141826, -0.31588914898285]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_677",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.55725320084611, 15.332470343798235, 0.017758278881919783]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.55725320084611, 15.332470343798235, 0.017758278881919783]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_678",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[28.070996905580166, -1404.918419456605, 96.60674861561327]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[28.070996905580166, -1404.918419456605, 96.60674861561327]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_679",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.26677608308166, -0.04539972212811927, 0.07219960755594071]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.26677608308166, -0.04539972212811927, 0.07219960755594071]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_680",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-31.642570294708012, -5.843010776840515, 653.1255829684272]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-31.642570294708012, -5.843010776840515, 653.1255829684272]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_681",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5569407252735099, -0.222388523128392, -0.07671730896953977]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5569407252735099, -0.222388523128392, -0.07671730896953977]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_682",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.808673622193112, -1.954929002961959, -0.0641765834038711]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.808673622193112, -1.954929002961959, -0.0641765834038711]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_683",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-401.2378480407698, 4553.777310118242, -2898.9553797850526]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-401.2378480407698, 4553.777310118242, -2898.9553797850526]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_684",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.5294690248347065, -6.7958641071327595, 1.4871025746193396]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.5294690248347065, -6.7958641071327595, 1.4871025746193396]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_685",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.24939453800521694, -1.5260813007199796, -0.07526366044190963]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.24939453800521694, -1.5260813007199796, -0.07526366044190963]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_686",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6395706862956101, -0.0076768063417354815, 0.0028543016681151227]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6395706862956101, -0.0076768063417354815, 0.0028543016681151227]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_687",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[966.2007588052174, 190428.55370268633, -393265.6968439939]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[966.2007588052174, 190428.55370268633, -393265.6968439939]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_688",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.844696934516852, -2.181694657517603, 0.7468001328392165]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.844696934516852, -2.181694657517603, 0.7468001328392165]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_689",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[48.05552565165261, 31.731198382071774, -11.358193909461244]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[48.05552565165261, 31.731198382071774, -11.358193909461244]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_690",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[138.58165844865448, -853.9627598456926, -530.238043485272]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[138.58165844865448, -853.9627598456926, -530.238043485272]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_691",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.880304386260836, 1.0394690462219365, 0.14217342476828634]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.880304386260836, 1.0394690462219365, 0.14217342476828634]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_692",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.0153976947512957, 1.785088970955146, 0.177137959284126]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.0153976947512957, 1.785088970955146, 0.177137959284126]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_693",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.4908926152246975, -0.02744083731551994, 0.11550818790734003]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.4908926152246975, -0.02744083731551994, 0.11550818790734003]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_694",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.2258195210366125, 7.635869510030694, 0.7057641473024329]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.2258195210366125, 7.635869510030694, 0.7057641473024329]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_695",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.001066300601642034, -0.6447553766160509, -0.11725032447920844]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.001066300601642034, -0.6447553766160509, -0.11725032447920844]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_696",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[542.913767165929, -398.9267789920665, -23.00836472668454]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[542.913767165929, -398.9267789920665, -23.00836472668454]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_697",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.705054237518443, -17.542812184457823, -11.017221911535623]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.705054237518443, -17.542812184457823, -11.017221911535623]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_698",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6673676199088103, -0.02094329440947762, 0.05188675165678201]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6673676199088103, -0.02094329440947762, 0.05188675165678201]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_699",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[126.92069565276464, -4.693177904089029, 0.023047755936996657]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[126.92069565276464, -4.693177904089029, 0.023047755936996657]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_700",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-181.78382878691895, -609.5379740822834, 3558.15545255937]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-181.78382878691895, -609.5379740822834, 3558.15545255937]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_701",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.513493482026271, 1.881477488991292, 0.12861362057852815]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.513493482026271, 1.881477488991292, 0.12861362057852815]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_702",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.4990141852885888, 0.21578586026052868, -0.0287712327365773]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.4990141852885888, 0.21578586026052868, -0.0287712327365773]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_703",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-106.79193234417333, -1401.4481195960718, -1391.7976862014052]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-106.79193234417333, -1401.4481195960718, -1391.7976862014052]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_704",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[131.62320038515355, 416.706512760135, -37.01449137064497]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[131.62320038515355, 416.706512760135, -37.01449137064497]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_705",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-35.154003752952846, 260.2147764373173, -81.27411517440692]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-35.154003752952846, 260.2147764373173, -81.27411517440692]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_706",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.877608336520167, 5.207455444342488, 0.573699495147202]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.877608336520167, 5.207455444342488, 0.573699495147202]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_707",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.208325439485314, -2.384041389077306, 0.5854580725283784]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.208325439485314, -2.384041389077306, 0.5854580725283784]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_708",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.991003039640141, -14.41451617697535, -18.341706186758294]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.991003039640141, -14.41451617697535, -18.341706186758294]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_709",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.932042226430697, -3.142975837196877, 1.082602237762742]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.932042226430697, -3.142975837196877, 1.082602237762742]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_710",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.16406703818315888, -0.26448828355257914, 0.030800297609073022]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.16406703818315888, -0.26448828355257914, 0.030800297609073022]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_711",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.034982895484201915, -0.19769009078783076, 0.00367156271590741]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.034982895484201915, -0.19769009078783076, 0.00367156271590741]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_712",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7551966406773873, 0.12493883386717589, 0.006683887015867968]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7551966406773873, 0.12493883386717589, 0.006683887015867968]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_713",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.42398049115764, 1.6242453510918566, -0.18465286521814478]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.42398049115764, 1.6242453510918566, -0.18465286521814478]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_714",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0169576743339812, 0.2283514554230462, 0.012562872452345651]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0169576743339812, 0.2283514554230462, 0.012562872452345651]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_715",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.189621781062304, -45.82400076977689, 43.518473456226914]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.189621781062304, -45.82400076977689, 43.518473456226914]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_716",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8045535475833134, 0.05211183405684007, -0.05000304610650482]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8045535475833134, 0.05211183405684007, -0.05000304610650482]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_717",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[30.4865904351478, 7.824370841426178, -4.9641365859886015]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[30.4865904351478, 7.824370841426178, -4.9641365859886015]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_718",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.6709564308832205, 1.9286821935723066, -0.15278801923273863]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.6709564308832205, 1.9286821935723066, -0.15278801923273863]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_719",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.903288013194023, 1.5152887106456998, 0.041541230858488515]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.903288013194023, 1.5152887106456998, 0.041541230858488515]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_720",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.426700726348276, 1.3489659320795215, -0.1899547036027099]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.426700726348276, 1.3489659320795215, -0.1899547036027099]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_721",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.9296935946721447, -1.6311083849081485, -0.22370553049800637]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9296935946721447, -1.6311083849081485, -0.22370553049800637]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_722",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-75.48106281838564, 1486.62187984468, -2333.105562304749]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-75.48106281838564, 1486.62187984468, -2333.105562304749]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_723",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.6120205868366138, 1.0821871756713133, 0.3432656859701289]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.6120205868366138, 1.0821871756713133, 0.3432656859701289]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_724",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.89370765365561, 9.06994932372353, 2.2755583083801265]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.89370765365561, 9.06994932372353, 2.2755583083801265]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_725",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-236.74322656997862, -3719.7654912424073, -4233.922044515501]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-236.74322656997862, -3719.7654912424073, -4233.922044515501]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_726",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.3202179794948177, 1.4746687758571861, 0.18873199456496909]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.3202179794948177, 1.4746687758571861, 0.18873199456496909]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_727",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.1112035739487611, -0.6054960152761031, -0.659016588860426]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1112035739487611, -0.6054960152761031, -0.659016588860426]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_728",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.2999217370973764, 0.8211951006192213, -0.07583253300954829]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.2999217370973764, 0.8211951006192213, -0.07583253300954829]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_729",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-26.050366861984266, -278.4420282683156, 131.98714114939256]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-26.050366861984266, -278.4420282683156, 131.98714114939256]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_730",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.5690766989062241, -6.077299563068393, -0.3057968456154778]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5690766989062241, -6.077299563068393, -0.3057968456154778]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_731",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.1794060342392774, 2.4562619758912763, 0.3332369022874741]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.1794060342392774, 2.4562619758912763, 0.3332369022874741]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_732",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.0190732897665935, 0.0738598634047174, -0.0436673932099677]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0190732897665935, 0.0738598634047174, -0.0436673932099677]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_733",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.100010602968044, -5.648595649991855, -10.553372300341437]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.100010602968044, -5.648595649991855, -10.553372300341437]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_734",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-58.199006914638126, -42.79420502100193, 28.223585081820453]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-58.199006914638126, -42.79420502100193, 28.223585081820453]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_735",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.2091362903886487, 0.31019668362202035, -0.032532616203981284]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2091362903886487, 0.31019668362202035, -0.032532616203981284]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_736",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.398034072118602, -5.982069658121272, -5.5814530955484845]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.398034072118602, -5.982069658121272, -5.5814530955484845]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_737",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.047799614165940085, -0.2575851598195783, 0.05304175805347766]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.047799614165940085, -0.2575851598195783, 0.05304175805347766]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_738",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.680679333034157, 1.453028399576666, -0.07485529832100231]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.680679333034157, 1.453028399576666, -0.07485529832100231]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_739",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.39375766746556773, 0.04048589911320914, 0.00044528990735404707]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.39375766746556773, 0.04048589911320914, 0.00044528990735404707]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_740",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[98.98147116983164, -129.54304583701528, -453.9455764476981]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[98.98147116983164, -129.54304583701528, -453.9455764476981]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_741",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6267461320759549, -0.907244864477257, -0.08695314916413897]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6267461320759549, -0.907244864477257, -0.08695314916413897]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_742",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-975.506218798232, 8133.666559560161, 5883.253376079741]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-975.506218798232, 8133.666559560161, 5883.253376079741]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_743",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.10847255002253747, -0.23028800991459622, 0.020837110301590238]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10847255002253747, -0.23028800991459622, 0.020837110301590238]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_744",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.6946244482760726, 0.42950042064704574, 0.010637037336297419]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6946244482760726, 0.42950042064704574, 0.010637037336297419]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_745",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.179633262716635, 1.9203067363362445, 5.283030737688905]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.179633262716635, 1.9203067363362445, 5.283030737688905]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_746",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[19.473690103785906, 77.67737123360659, -30.61215915499174]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[19.473690103785906, 77.67737123360659, -30.61215915499174]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_747",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.195824678456203, 4.318587030168913, 1.2985847179091126]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.195824678456203, 4.318587030168913, 1.2985847179091126]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_748",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.157897121081983, 7.72965269741969, -3.37441495223916]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.157897121081983, 7.72965269741969, -3.37441495223916]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_749",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.996531992520652, 2.0128694986870297, 40.46470072326511]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.996531992520652, 2.0128694986870297, 40.46470072326511]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_750",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.130205316964176, 38.41314522246215, -7.269985703893687]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.130205316964176, 38.41314522246215, -7.269985703893687]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_751",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[945.0166710608576, -3724.737078343346, 2267.7979097503844]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[945.0166710608576, -3724.737078343346, 2267.7979097503844]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_752",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.830698200373331, 0.7096197498687189, 0.044846996660290815]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.830698200373331, 0.7096197498687189, 0.044846996660290815]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_753",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.5740036984748345, -56.20194544239562, 19.857297428856146]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5740036984748345, -56.20194544239562, 19.857297428856146]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_754",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-10.544452396417766, 17.43483274300892, 28.62023396169938]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.544452396417766, 17.43483274300892, 28.62023396169938]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_755",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.531509309370687, 21.928762190437293, -1.4187491809248676]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.531509309370687, 21.928762190437293, -1.4187491809248676]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_756",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-57.88898377595807, -41.24735252669574, -1.720182261276851]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-57.88898377595807, -41.24735252669574, -1.720182261276851]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_757",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-39.41224603568068, 156.7028301099996, -101.2124873853015]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-39.41224603568068, 156.7028301099996, -101.2124873853015]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_758",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.838382263519765, 4.820313083782364, -1.9823487018312724]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.838382263519765, 4.820313083782364, -1.9823487018312724]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_759",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-48.13423472855035, 209.12602667608022, -50.36640307300359]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-48.13423472855035, 209.12602667608022, -50.36640307300359]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_760",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6113206275871579, -0.15885124783723392, -0.04639345858215644]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6113206275871579, -0.15885124783723392, -0.04639345858215644]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_761",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-24.265084874214907, -47.68047203227849, 31.6919585673959]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-24.265084874214907, -47.68047203227849, 31.6919585673959]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_762",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4929723483357077, -0.02665895376751881, -0.003794566964609408]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4929723483357077, -0.02665895376751881, -0.003794566964609408]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_763",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.045533965243861885, -0.8116895685632759, -0.10933314002831776]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.045533965243861885, -0.8116895685632759, -0.10933314002831776]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_764",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.294650359139645, 10.750834308191388, 0.5205145801908406]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.294650359139645, 10.750834308191388, 0.5205145801908406]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_765",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-39.092000403450676, 88.81026408914572, -42.70430548855359]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-39.092000403450676, 88.81026408914572, -42.70430548855359]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_766",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.2981477492130014, -0.6418239173284367, -0.6802714863769088]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2981477492130014, -0.6418239173284367, -0.6802714863769088]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_767",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.6803571394812493, 0.6313044159597979, 0.058129815925550166]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6803571394812493, 0.6313044159597979, 0.058129815925550166]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_768",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.243781043713504, 0.7726431569494769, 2.827555223536688]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.243781043713504, 0.7726431569494769, 2.827555223536688]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_769",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.780120618095913, -0.07065256829700448, -0.0037891739799056677]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.780120618095913, -0.07065256829700448, -0.0037891739799056677]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_770",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.1418392807597444, 0.5101591433480113, -0.11671438962793153]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.1418392807597444, 0.5101591433480113, -0.11671438962793153]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_771",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[254.90185073633978, -727.5852887513533, -2504.224381097623]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[254.90185073633978, -727.5852887513533, -2504.224381097623]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_772",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[95.96077744688824, -83.88251578549941, -25.529568088063336]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[95.96077744688824, -83.88251578549941, -25.529568088063336]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_773",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.738932943166004, -33.90082967467899, 81.16098742845682]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.738932943166004, -33.90082967467899, 81.16098742845682]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_774",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-255.72217857386102, -213.19846431637828, -38.59130827267474]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-255.72217857386102, -213.19846431637828, -38.59130827267474]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_775",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.6303665157866727, -0.20733646818157986, 0.05461672302749831]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6303665157866727, -0.20733646818157986, 0.05461672302749831]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_776",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[77.98160150272435, -54.178092648866254, -32.26138258990634]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[77.98160150272435, -54.178092648866254, -32.26138258990634]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_777",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.342716068178873, 21.043945518770208, 1.2795011581869251]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.342716068178873, 21.043945518770208, 1.2795011581869251]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_778",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.221196002856622, -16.851939580779064, -18.704480166197715]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.221196002856622, -16.851939580779064, -18.704480166197715]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_779",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[41.026856928512515, 64.52070549657286, 3.6024592710940557]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[41.026856928512515, 64.52070549657286, 3.6024592710940557]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_780",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1701828973346426, 0.26353241144408407, 0.03147245213110009]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1701828973346426, 0.26353241144408407, 0.03147245213110009]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_781",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[182.3869715773637, 213.3024086228502, 32.05603315881882]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[182.3869715773637, 213.3024086228502, 32.05603315881882]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_782",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.78991398244131, -38.55436440966623, 17.147696752844443]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.78991398244131, -38.55436440966623, 17.147696752844443]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_783",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-40.772584645847814, 68.10682420053016, -24.55323762911689]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-40.772584645847814, 68.10682420053016, -24.55323762911689]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_784",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.4488997954620535, 1.5703609175518638, 0.2757433977981636]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.4488997954620535, 1.5703609175518638, 0.2757433977981636]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_785",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.1380504196902158, -0.2587927199300862, -0.0247744693781256]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1380504196902158, -0.2587927199300862, -0.0247744693781256]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_786",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.9452101089383957, 0.31137686812135956, -0.6661510018792617]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9452101089383957, 0.31137686812135956, -0.6661510018792617]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_787",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.165256199650276, -5.4718232176868336, 1.8999505480991055]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.165256199650276, -5.4718232176868336, 1.8999505480991055]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_788",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.309613543019035, -96.40087755493687, 169.65961358597696]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.309613543019035, -96.40087755493687, 169.65961358597696]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_789",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6839296108677508, 0.04664540774594306, 0.0008370569791205956]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6839296108677508, 0.04664540774594306, 0.0008370569791205956]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_790",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.3460338352404704, -0.03998385704887915, 0.003447416310909441]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.3460338352404704, -0.03998385704887915, 0.003447416310909441]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_791",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.619511047028062, 31.386328145777536, 10.884853096343738]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.619511047028062, 31.386328145777536, 10.884853096343738]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_792",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.263600632174956, 0.26907062002656534, -0.011399492092719614]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.263600632174956, 0.26907062002656534, -0.011399492092719614]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_793",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[20.030437035536746, -21.402185227601993, 0.7310961084377119]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[20.030437035536746, -21.402185227601993, 0.7310961084377119]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_794",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.35347809282839, -5.611462999682089, 0.46761763894403147]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.35347809282839, -5.611462999682089, 0.46761763894403147]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_795",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.50203086478115, 13.763290587976034, 0.08364456293641552]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.50203086478115, 13.763290587976034, 0.08364456293641552]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_796",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.0568043420786923, -2.309267032205346, -0.09474904624563502]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0568043420786923, -2.309267032205346, -0.09474904624563502]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_797",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.9820445764969788, -0.1245937034366495, 0.0025838534670117102]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9820445764969788, -0.1245937034366495, 0.0025838534670117102]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_798",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-18.804953479962517, -95.03961614023738, -94.79555525487824]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.804953479962517, -95.03961614023738, -94.79555525487824]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_799",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.699051578859598, -10.24131437949349, -1.304776761611322]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.699051578859598, -10.24131437949349, -1.304776761611322]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_800",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-17.290642426813722, 49.83771779213503, -11.11915359867588]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.290642426813722, 49.83771779213503, -11.11915359867588]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_801",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.7399205005742768, 0.3478329298151373, -0.0012378111441486985]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7399205005742768, 0.3478329298151373, -0.0012378111441486985]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_802",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.6817414107845625, 0.5732182662339129, -0.04900420759380863]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6817414107845625, 0.5732182662339129, -0.04900420759380863]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_803",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.2808132179515303, 0.011169954263602434, 8.20538557833763e-07]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2808132179515303, 0.011169954263602434, 8.20538557833763e-07]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_804",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7152236957244807, -0.22557554209918723, -0.17083220328477525]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7152236957244807, -0.22557554209918723, -0.17083220328477525]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_805",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[169.96716835936468, -1820.886578324898, 4374.328830819041]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[169.96716835936468, -1820.886578324898, 4374.328830819041]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_806",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[17.139569463448254, 1.978090986696167, -26.143305062558372]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[17.139569463448254, 1.978090986696167, -26.143305062558372]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_807",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7979257348597621, -0.1658307411669481, 0.0017591813033375396]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7979257348597621, -0.1658307411669481, 0.0017591813033375396]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_808",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.21837269805735, -78.00224139188549, 79.80195965211884]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.21837269805735, -78.00224139188549, 79.80195965211884]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_809",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-54.84303091926832, 160.7399557181693, 308.270463865786]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-54.84303091926832, 160.7399557181693, 308.270463865786]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_810",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.092795000566803, -67.65142398214505, 6.923594500620476]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.092795000566803, -67.65142398214505, 6.923594500620476]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_811",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-26.59560927003292, 6.907113022404722, 152.3935983853698]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-26.59560927003292, 6.907113022404722, 152.3935983853698]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_812",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[27.450015275333595, 10.935695348868201, -60.00930014798136]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[27.450015275333595, 10.935695348868201, -60.00930014798136]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_813",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.7234107916751107, -1.6946369782084594, -0.25117768437576465]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7234107916751107, -1.6946369782084594, -0.25117768437576465]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_814",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8102959456652763, 0.04263729933502712, -0.048547872170496366]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8102959456652763, 0.04263729933502712, -0.048547872170496366]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_815",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.425832749548065, 4.22017798910348, 9.21993208999752]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.425832749548065, 4.22017798910348, 9.21993208999752]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_816",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.6876033786181295, -2.003428841048409, 0.16287875539728627]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.6876033786181295, -2.003428841048409, 0.16287875539728627]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_817",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.0183476782146903, -1.3962639597624353, -0.35934913806483987]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0183476782146903, -1.3962639597624353, -0.35934913806483987]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_818",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.41381501668977305, 0.0408302503270848, -0.000984046621674555]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.41381501668977305, 0.0408302503270848, -0.000984046621674555]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_819",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4544279339252931, -0.04482181885282438, -0.020097150673853842]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4544279339252931, -0.04482181885282438, -0.020097150673853842]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_820",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-19.956857938790165, 21.086716296106143, -5.554481092493503]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-19.956857938790165, 21.086716296106143, -5.554481092493503]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_821",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5546737163430998, -1.940876734969856, 0.17059195021638485]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5546737163430998, -1.940876734969856, 0.17059195021638485]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_822",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.848376356271976, 0.028157109819061665, -0.061470047355194554]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.848376356271976, 0.028157109819061665, -0.061470047355194554]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_823",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.97278793267563, -53.384758888877904, 32.06736176758217]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.97278793267563, -53.384758888877904, 32.06736176758217]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_824",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.06150137176832288, -0.11999466319641784, -0.007026467160946447]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06150137176832288, -0.11999466319641784, -0.007026467160946447]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_825",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.34075503747154, -12.124735237477521, -0.4136783852751288]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.34075503747154, -12.124735237477521, -0.4136783852751288]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_826",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.35506218668201006, -4.624660563790526, 0.10305292524019222]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.35506218668201006, -4.624660563790526, 0.10305292524019222]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_827",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-29.551945347282615, -211.43221648010265, 366.84922582131423]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-29.551945347282615, -211.43221648010265, 366.84922582131423]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_828",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-91.56650542615712, 2383.6501942082336, -14873.061914680966]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-91.56650542615712, 2383.6501942082336, -14873.061914680966]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_829",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.956886713895162, 7.057886033501381, 1.2736917312859277]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.956886713895162, 7.057886033501381, 1.2736917312859277]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_830",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.9006836999831547, -1.950812542235207, -1.7724015597463765]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9006836999831547, -1.950812542235207, -1.7724015597463765]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_831",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[14.253395059792656, 43.40430400715668, -18.310010481247815]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.253395059792656, 43.40430400715668, -18.310010481247815]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_832",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[25.718042227566915, 169.34556330589388, 293.18040698223064]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[25.718042227566915, 169.34556330589388, 293.18040698223064]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_833",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.2068456457994183, -14.387361104252903, -1.980540114379641]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.2068456457994183, -14.387361104252903, -1.980540114379641]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_834",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.8189389191373102, -0.7133052411120735, -0.06262831298480125]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8189389191373102, -0.7133052411120735, -0.06262831298480125]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_835",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.452216135615564, 1.9197952938680758, -0.47902091506841127]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.452216135615564, 1.9197952938680758, -0.47902091506841127]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_836",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[159.11077932325037, -3116.007467656217, 10875.157161174988]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[159.11077932325037, -3116.007467656217, 10875.157161174988]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_837",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.066180294969762, -0.0022007976141633634, -8.310698042158027]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.066180294969762, -0.0022007976141633634, -8.310698042158027]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_838",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.8971490001267657, -1522.7341509473656, 2987.6804768874777]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8971490001267657, -1522.7341509473656, 2987.6804768874777]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_839",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.87794505137404, 5.2872401924626375, -0.5630431886133671]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.87794505137404, 5.2872401924626375, -0.5630431886133671]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_840",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.69417998758847, -0.39628740832224185, -4.16545695844165]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.69417998758847, -0.39628740832224185, -4.16545695844165]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_841",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[14.581557002344047, 25.588065893834518, 5.115856599650344]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.581557002344047, 25.588065893834518, 5.115856599650344]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_842",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[27.11373498922243, 50.65495271931072, -16.82934957897204]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[27.11373498922243, 50.65495271931072, -16.82934957897204]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_843",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[14.349398600835931, 19.26324170149139, 5.86021578183331]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.349398600835931, 19.26324170149139, 5.86021578183331]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_844",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7371598006017791, -9.22443171499847, -1.1613351266424854]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7371598006017791, -9.22443171499847, -1.1613351266424854]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_845",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[33.0510040479337, 11.444925267750595, -36.50744844933842]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[33.0510040479337, 11.444925267750595, -36.50744844933842]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_846",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.2409732586758206, 0.3203873936655982, 0.020376923850112933]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2409732586758206, 0.3203873936655982, 0.020376923850112933]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_847",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9140812744486828, -0.4200777315651557, 0.005773233532582916]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9140812744486828, -0.4200777315651557, 0.005773233532582916]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_848",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-21.695455459519646, -8.760619717424085, 3.936932506397195]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-21.695455459519646, -8.760619717424085, 3.936932506397195]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_849",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.3636077277505, -31.403011595016487, 21.581519923808067]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.3636077277505, -31.403011595016487, 21.581519923808067]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_850",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.525729889615548, 50.260242725642925, -52.08276017067131]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.525729889615548, 50.260242725642925, -52.08276017067131]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_851",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.657921776314295, 9.43926620248505, -0.993948029380317]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.657921776314295, 9.43926620248505, -0.993948029380317]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_852",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.1946109423709153, -0.0034706465790766876, -0.0008337832924188317]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1946109423709153, -0.0034706465790766876, -0.0008337832924188317]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_853",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7168458343467714, -0.04098120577248493, -0.0005500207935218016]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7168458343467714, -0.04098120577248493, -0.0005500207935218016]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_854",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[35.022532415078125, 2.896118560390688, 0.002726865329003805]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[35.022532415078125, 2.896118560390688, 0.002726865329003805]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_855",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.294987704773963, -2.949061383439776, -0.3225427002777454]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.294987704773963, -2.949061383439776, -0.3225427002777454]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_856",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[874.7160798219234, 558.1534192648687, -9.85903401458832]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[874.7160798219234, 558.1534192648687, -9.85903401458832]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_857",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.8343131769095053, -5.481176657477467, 0.9373419759916555]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8343131769095053, -5.481176657477467, 0.9373419759916555]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_858",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.998346534611285, -38.50498961776161, 8.108965095422667]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.998346534611285, -38.50498961776161, 8.108965095422667]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_859",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-22.02217464307301, 130.82043879587468, -216.199885418801]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-22.02217464307301, 130.82043879587468, -216.199885418801]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_860",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.0024844443693155, -37.81164905338373, -10.289640988016313]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.0024844443693155, -37.81164905338373, -10.289640988016313]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_861",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-57.08037875194648, -72.47955754287688, 14.134177161180666]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-57.08037875194648, -72.47955754287688, 14.134177161180666]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_862",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.190595400958253, 2.220036863788557, -0.31530957108190033]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.190595400958253, 2.220036863788557, -0.31530957108190033]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_863",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-36.184404901021935, 74.67454644718882, 415.9860809030828]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-36.184404901021935, 74.67454644718882, 415.9860809030828]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_864",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.39265102091541, 13.108395387925778, 3.7397136164282534]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.39265102091541, 13.108395387925778, 3.7397136164282534]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_865",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[156.01829572358795, 143.05221695023937, -68.08399526100789]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[156.01829572358795, 143.05221695023937, -68.08399526100789]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_866",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[15.401760230408659, 46.68190144134099, -79.51183045873746]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.401760230408659, 46.68190144134099, -79.51183045873746]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_867",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.25751099234871233, -0.49703565280819356, -0.0424038124641599]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.25751099234871233, -0.49703565280819356, -0.0424038124641599]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_868",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-19.965450258979097, 103.54446604073628, -60.709802589367]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-19.965450258979097, 103.54446604073628, -60.709802589367]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_869",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.6511752434753664, -0.8282701559696156, -0.09048735538411758]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6511752434753664, -0.8282701559696156, -0.09048735538411758]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_870",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7644469676253997, 0.17069789694732895, -0.011829693825775214]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7644469676253997, 0.17069789694732895, -0.011829693825775214]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_871",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-21.468782651172003, 46.677416980643414, -11.197613530906272]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-21.468782651172003, 46.677416980643414, -11.197613530906272]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_872",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[20.055656196207337, -48.885875281320736, 16.11784923818332]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[20.055656196207337, -48.885875281320736, 16.11784923818332]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_873",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[463.73308501242684, -187.53827270271086, -57.05160013902999]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[463.73308501242684, -187.53827270271086, -57.05160013902999]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_874",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-122.49720583523225, -1429.4735901746567, 1454.3467585815254]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-122.49720583523225, -1429.4735901746567, 1454.3467585815254]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_875",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.78886877273395, -22.283026994956376, 13.016929573038812]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.78886877273395, -22.283026994956376, 13.016929573038812]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_876",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[184.57800931313494, -5115.221501187745, -84621.05006173946]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[184.57800931313494, -5115.221501187745, -84621.05006173946]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_877",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3294995993528915, -0.8084621903197918, 0.08977396173964322]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3294995993528915, -0.8084621903197918, 0.08977396173964322]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_878",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.007153133748858, 18.4323690528487, 5.223895340015971]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.007153133748858, 18.4323690528487, 5.223895340015971]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_879",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[201.84975754797708, 87.5683031339874, -8.60608310273784]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[201.84975754797708, 87.5683031339874, -8.60608310273784]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_880",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-20.544195888148963, 60.70826585134297, 37.69822117980126]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-20.544195888148963, 60.70826585134297, 37.69822117980126]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_881",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-132.65350814299774, 128.50599373380456, 40.85835755866494]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-132.65350814299774, 128.50599373380456, 40.85835755866494]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_882",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-15.414610568017741, 0.4334727232930009, 0.10799833038205023]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.414610568017741, 0.4334727232930009, 0.10799833038205023]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_883",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.15917448515511812, -1.0013191017949528, -0.07544499189179116]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.15917448515511812, -1.0013191017949528, -0.07544499189179116]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_884",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.86774219013832, -31.02375151484964, -2.0960760630141633]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.86774219013832, -31.02375151484964, -2.0960760630141633]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_885",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.2130858294465447, -32.544542389890154, -5.30729573590285]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.2130858294465447, -32.544542389890154, -5.30729573590285]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_886",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-67.68790873276306, 529.1592460702493, -153.51613497137927]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-67.68790873276306, 529.1592460702493, -153.51613497137927]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_887",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7129789965269175, -0.07506217253226662, -0.022419691509350154]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7129789965269175, -0.07506217253226662, -0.022419691509350154]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_888",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7426467110300059, -4.727938357784286, -0.5853374060643592]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7426467110300059, -4.727938357784286, -0.5853374060643592]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_889",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.450659450664331, 11.983491454471809, 0.6813106801999946]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.450659450664331, 11.983491454471809, 0.6813106801999946]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_890",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.40520887993254, -13.92840086109743, 0.5819842793041607]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.40520887993254, -13.92840086109743, 0.5819842793041607]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_891",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.62766887903917, 2.3510302853288407, -0.11097889405764155]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.62766887903917, 2.3510302853288407, -0.11097889405764155]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_892",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.523222872959712, 0.2101449310869321, -1.1667630211095343]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.523222872959712, 0.2101449310869321, -1.1667630211095343]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_893",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.567059639076252, -14.231814807780724, 2.5891026313374494]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.567059639076252, -14.231814807780724, 2.5891026313374494]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_894",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.673666912253751, 9.527021485167177, -3.0689015029238322]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.673666912253751, 9.527021485167177, -3.0689015029238322]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_895",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.14593650631241, 4.340570336206669, -0.14238476250628204]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.14593650631241, 4.340570336206669, -0.14238476250628204]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_896",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-24.64722212897945, 14.701319965807926, 1199.6683310608323]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-24.64722212897945, 14.701319965807926, 1199.6683310608323]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_897",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.857772921556367, 1.4864542924299755, 0.04732251444167927]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.857772921556367, 1.4864542924299755, 0.04732251444167927]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_898",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.327518963220891, -6.131878642122454, 10.042622721903287]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.327518963220891, -6.131878642122454, 10.042622721903287]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_899",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.30247515539491865, -0.06790264387645625, -0.019035517752119913]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.30247515539491865, -0.06790264387645625, -0.019035517752119913]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_900",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-87.04641421722171, 1506.7619677985722, -2002.4642703418729]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-87.04641421722171, 1506.7619677985722, -2002.4642703418729]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_901",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2934914884370524, -0.718280170354606, 0.3204498902956414]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2934914884370524, -0.718280170354606, 0.3204498902956414]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_902",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.977559166862752, 8.739641627782856, 6.376312851729915]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.977559166862752, 8.739641627782856, 6.376312851729915]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_903",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.850924983099449, -78.32113621743602, -138.32448890143394]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.850924983099449, -78.32113621743602, -138.32448890143394]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_904",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-32.74982550537874, -66.41421858707292, -8.824643029163191]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-32.74982550537874, -66.41421858707292, -8.824643029163191]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_905",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.8378612830112733, -59.95483491705211, -6.248502077259995]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.8378612830112733, -59.95483491705211, -6.248502077259995]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_906",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.2116383776212816, -15.463522980796048, -4.78631677340983]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2116383776212816, -15.463522980796048, -4.78631677340983]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_907",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.476656899808237, 51.741721242325745, -53.93298275654233]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.476656899808237, 51.741721242325745, -53.93298275654233]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_908",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-75.49213771904572, -21.692585308855715, 111.00671824962613]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-75.49213771904572, -21.692585308855715, 111.00671824962613]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_909",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-22.096897141228233, -30.46878012528632, -2.4767453313747425]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-22.096897141228233, -30.46878012528632, -2.4767453313747425]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_910",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.966707885368877, 1.3990396697950311, -0.8711020007481073]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.966707885368877, 1.3990396697950311, -0.8711020007481073]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_911",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.250915586313045, 10.154518107054718, -1.9486587120122487]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.250915586313045, 10.154518107054718, -1.9486587120122487]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_912",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.6829003479030895, 2.947268625429479, -0.2645983607774569]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.6829003479030895, 2.947268625429479, -0.2645983607774569]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_913",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-20.390231400950103, -34.6769131061317, -6.325082594192266]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-20.390231400950103, -34.6769131061317, -6.325082594192266]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_914",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5703734027718039, 0.07727134513471696, 0.0001227780378766416]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5703734027718039, 0.07727134513471696, 0.0001227780378766416]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_915",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.4256346602661327, -0.9541494233454354, 0.13246892356000925]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4256346602661327, -0.9541494233454354, 0.13246892356000925]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_916",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.461893917481621, -0.8384270787088166, -0.18968633617481978]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.461893917481621, -0.8384270787088166, -0.18968633617481978]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_917",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.126974825735623, 1.0461810676081034, 0.12061192918681099]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.126974825735623, 1.0461810676081034, 0.12061192918681099]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_918",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-80.41151425484054, 1267.5175125840647, -286.70236794763196]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-80.41151425484054, 1267.5175125840647, -286.70236794763196]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_919",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.7938619493411303, 1.0422274611969229, 0.6299596601146777]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.7938619493411303, 1.0422274611969229, 0.6299596601146777]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_920",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-34.5520286966848, -43.9885985727385, 39.385791507227914]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-34.5520286966848, -43.9885985727385, 39.385791507227914]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_921",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-57.87707064331337, 160.87222493438168, -109.51386928337625]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-57.87707064331337, 160.87222493438168, -109.51386928337625]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_922",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.558236451239005, -3.0230155316210543, 1.7182557613593548]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.558236451239005, -3.0230155316210543, 1.7182557613593548]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_923",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9593548001845189, -12.309947842125595, -5.490465512081529]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9593548001845189, -12.309947842125595, -5.490465512081529]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_924",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[385.7062961097339, 13.399854166513936, -2.117950644754224]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[385.7062961097339, 13.399854166513936, -2.117950644754224]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_925",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.9241878970158726, -25.931082099691555, -7.019276809169116]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.9241878970158726, -25.931082099691555, -7.019276809169116]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_926",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[83.53765072143085, -15.387281838078628, -0.7074042206551407]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[83.53765072143085, -15.387281838078628, -0.7074042206551407]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_927",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.724315670971379, -1.2442683762747684, 0.18221910508974995]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.724315670971379, -1.2442683762747684, 0.18221910508974995]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_928",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.49463639034069457, 0.07267899030120638, -0.002760198672331368]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.49463639034069457, 0.07267899030120638, -0.002760198672331368]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_929",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.042547868401845, 1.915192551892078, 0.32866210473226903]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.042547868401845, 1.915192551892078, 0.32866210473226903]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_930",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-29.204026145202178, 54.77457213214231, -5.913487553232818]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-29.204026145202178, 54.77457213214231, -5.913487553232818]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_931",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.5422305556661007, -467.2388822281686, -2562.3958449860834]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5422305556661007, -467.2388822281686, -2562.3958449860834]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_932",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[43.157208822971924, 62.90560650048719, -26.826485071752177]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[43.157208822971924, 62.90560650048719, -26.826485071752177]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_933",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.417720321073302, 7.718864162712521, -2.3687988380406164]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.417720321073302, 7.718864162712521, -2.3687988380406164]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_934",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-636.5118940733004, 2614.6099264761533, 4728.662466372959]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-636.5118940733004, 2614.6099264761533, 4728.662466372959]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_935",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.067023109804612, 28.77394669689949, 106.09968387101745]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.067023109804612, 28.77394669689949, 106.09968387101745]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_936",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[54.61689992799808, -119.06818680470352, -1.3878592479546785]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[54.61689992799808, -119.06818680470352, -1.3878592479546785]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_937",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.199379349575995, 44.63127799899841, 11.122086232428106]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.199379349575995, 44.63127799899841, 11.122086232428106]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_938",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.947978123415486, 6.903871251825466, -0.16222701095529718]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.947978123415486, 6.903871251825466, -0.16222701095529718]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_939",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.8683176111797466, -0.6481596696569318, -0.005493541110191417]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8683176111797466, -0.6481596696569318, -0.005493541110191417]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_940",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.6957731409242, -0.7701331372949659, -1.4312189946434162]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.6957731409242, -0.7701331372949659, -1.4312189946434162]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_941",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-66.64165737365822, -30.662302213613078, 8.767201560688068]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-66.64165737365822, -30.662302213613078, 8.767201560688068]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_942",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.5035151183229942, 1.3940890168376059, -0.07348957691110504]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.5035151183229942, 1.3940890168376059, -0.07348957691110504]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_943",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-44.81555328141722, 254.87950766536457, -157.7978132386392]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-44.81555328141722, 254.87950766536457, -157.7978132386392]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_944",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[679.4563648351976, -415.6994870931213, 1.5227258697243449]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[679.4563648351976, -415.6994870931213, 1.5227258697243449]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_945",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-127.30975616775005, 80.02410413687845, -11.611893844648826]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-127.30975616775005, 80.02410413687845, -11.611893844648826]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_946",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.6802526816963168, -5.474232731642914, -0.8630555249817036]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6802526816963168, -5.474232731642914, -0.8630555249817036]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_947",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-34.11879856423179, -13.214779415767453, 5.951250470187966]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-34.11879856423179, -13.214779415767453, 5.951250470187966]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_948",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.423483825607873, 2.8034847847965456, -0.8554533917266879]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.423483825607873, 2.8034847847965456, -0.8554533917266879]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_949",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8066065001095399, 0.16636236223139678, 0.0033192398111860683]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8066065001095399, 0.16636236223139678, 0.0033192398111860683]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_950",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.72277808437522, -15.58420341540053, -6.952218786584993]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.72277808437522, -15.58420341540053, -6.952218786584993]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_951",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.24749263538074, 16.01376666449032, -3.337689667109208]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.24749263538074, 16.01376666449032, -3.337689667109208]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_952",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-24.150427015694344, 9.338755546547965, -0.0879800697975312]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-24.150427015694344, 9.338755546547965, -0.0879800697975312]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_953",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.077388813540334, -0.3090189372437595, -1.925988825401804]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.077388813540334, -0.3090189372437595, -1.925988825401804]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_954",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.425142334445582, 7.416480341056586, 9.559540297980467]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.425142334445582, 7.416480341056586, 9.559540297980467]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_955",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[309.76256406994094, -31.221068669622984, -3.077230513457912]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[309.76256406994094, -31.221068669622984, -3.077230513457912]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_956",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-10.376424716428469, -1.3187597704944278, 13.707483505546541]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.376424716428469, -1.3187597704944278, 13.707483505546541]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_957",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[441.7669262004311, -316.34491580851454, 55.94922555622442]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[441.7669262004311, -316.34491580851454, 55.94922555622442]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_958",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.375573836920096, 5.321150024663615, -4.9972999647699154]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.375573836920096, 5.321150024663615, -4.9972999647699154]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_959",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-39.13170558927307, 61.3843741290143, 0.2578384880229651]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-39.13170558927307, 61.3843741290143, 0.2578384880229651]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_960",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.717098553996791, -0.2021544195245196, 0.004088725645175429]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.717098553996791, -0.2021544195245196, 0.004088725645175429]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_961",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.4486971000678017, 0.47112988970547365, 0.04429224501971783]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4486971000678017, 0.47112988970547365, 0.04429224501971783]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_962",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.8509898946804872, -2.637738096771479, -0.03643933784201124]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8509898946804872, -2.637738096771479, -0.03643933784201124]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_963",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.505925296792647, 8.125120734451768, -2.952283335083409]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.505925296792647, 8.125120734451768, -2.952283335083409]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_964",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-27.396489984802184, 12.849044953001574, -0.13481337386110095]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-27.396489984802184, 12.849044953001574, -0.13481337386110095]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_965",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8420399338690069, 0.014442378672974182, 0.02979550564934288]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8420399338690069, 0.014442378672974182, 0.02979550564934288]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_966",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6147270642989813, -0.10200316108552858, -0.0037814260061018756]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6147270642989813, -0.10200316108552858, -0.0037814260061018756]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_967",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3336922084303704, 0.37033163451872586, -0.026106904336136542]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3336922084303704, 0.37033163451872586, -0.026106904336136542]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_968",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.9731436264719537, 0.031005306627611917, -0.016235709453136453]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9731436264719537, 0.031005306627611917, -0.016235709453136453]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_969",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0936160627104305, 0.382524065155884, -0.04321885641324392]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0936160627104305, 0.382524065155884, -0.04321885641324392]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_970",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-53.253260397418266, -72.22624906035855, -18.150238240003564]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-53.253260397418266, -72.22624906035855, -18.150238240003564]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_971",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-15.871043560842624, 8.775745041223463, -0.35753487363279773]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.871043560842624, 8.775745041223463, -0.35753487363279773]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_972",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.376138100676166, -2.0065960205004285, 0.36733124548188734]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.376138100676166, -2.0065960205004285, 0.36733124548188734]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_973",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-110.57838150309317, -190.27218403933188, -7.018732306760532]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-110.57838150309317, -190.27218403933188, -7.018732306760532]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_974",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4689574963083294, 0.052850294383812356, 0.000947505845372628]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4689574963083294, 0.052850294383812356, 0.000947505845372628]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_975",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.4359484776479539, 0.2598528511216261, 0.011814080083002209]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4359484776479539, 0.2598528511216261, 0.011814080083002209]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_976",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.722734760403087, 2.035939600309818, -0.0026914689631191515]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.722734760403087, 2.035939600309818, -0.0026914689631191515]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_977",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8035635520254693, -15.35200974194405, -2.816858506957624]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8035635520254693, -15.35200974194405, -2.816858506957624]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_978",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-247.54282894130014, 1852.2191770010559, -878.8998101242839]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-247.54282894130014, 1852.2191770010559, -878.8998101242839]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_979",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[117.37610898106487, 1113.1720363146546, -5.4878498253029875]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[117.37610898106487, 1113.1720363146546, -5.4878498253029875]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_980",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.2760822854704506, 0.2511815165313595, 0.042620702356490625]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2760822854704506, 0.2511815165313595, 0.042620702356490625]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_981",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.288037897567177, -4.491959944974009, -0.3201066132689319]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.288037897567177, -4.491959944974009, -0.3201066132689319]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_982",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.365230915756922, 1.9402227491344994, -0.2921266143112349]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.365230915756922, 1.9402227491344994, -0.2921266143112349]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_983",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[325.04191671894205, -566.0569970366745, -12.873769110578658]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[325.04191671894205, -566.0569970366745, -12.873769110578658]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_984",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-31.22356216438977, 1.9080402082061756, 0.05890633245811057]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-31.22356216438977, 1.9080402082061756, 0.05890633245811057]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_985",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.210570580339781, -0.8730826903131627, 0.043408383785828564]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.210570580339781, -0.8730826903131627, 0.043408383785828564]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_986",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[47.45471489646922, -45.664770169092236, 7.621481392028216]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[47.45471489646922, -45.664770169092236, 7.621481392028216]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_987",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.6363931827279616, -1.1331856498619555, -0.08854861150612485]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6363931827279616, -1.1331856498619555, -0.08854861150612485]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_988",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-71.28312856641263, 23.569915833702822, -1.4236785370580871]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-71.28312856641263, 23.569915833702822, -1.4236785370580871]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_989",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[84.79138279245754, 106.51847153750916, 8.041521973424018]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[84.79138279245754, 106.51847153750916, 8.041521973424018]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_990",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[67.39843651031039, 438.576943034368, -414.2859175486953]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[67.39843651031039, 438.576943034368, -414.2859175486953]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_991",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[55.445061405933515, 758.4058209605801, -235.76138143129407]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[55.445061405933515, 758.4058209605801, -235.76138143129407]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_992",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.14701713967999597, -2.424150806124373, 1.3399819676940352]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.14701713967999597, -2.424150806124373, 1.3399819676940352]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_993",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3720877873538473, -0.19483126208214513, 0.006305622417704333]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3720877873538473, -0.19483126208214513, 0.006305622417704333]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_994",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.9182581760891555, 0.8729167471983522, -0.1312981580954458]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.9182581760891555, 0.8729167471983522, -0.1312981580954458]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_995",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[78.31542345687629, 95.43514323694009, 20.47137882799267]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[78.31542345687629, 95.43514323694009, 20.47137882799267]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_996",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.14811545083561395, -21.14299012140959, -13.96988484955725]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.14811545083561395, -21.14299012140959, -13.96988484955725]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_997",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.01674833442463, 34.072410571376366, 11.78478103617444]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.01674833442463, 34.072410571376366, 11.78478103617444]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_998",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-18.37196721017322, 0.48470728675093655, 2.1456249151635487]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.37196721017322, 0.48470728675093655, 2.1456249151635487]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_999",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.27970739412039136, -0.011499566004782434, 9.358908725143137e-05]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.27970739412039136, -0.011499566004782434, 9.358908725143137e-05]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ]
  }
]